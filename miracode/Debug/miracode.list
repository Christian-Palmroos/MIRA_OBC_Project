
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000115f0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  080117b0  080117b0  000217b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011a50  08011a50  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  08011a50  08011a50  00021a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a58  08011a58  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a58  08011a58  00021a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011a5c  08011a5c  00021a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08011a60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023c8  200001f4  08011c54  000301f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200025bc  08011c54  000325bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002acfc  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000542e  00000000  00000000  0005af20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022f0  00000000  00000000  00060350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020b8  00000000  00000000  00062640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003252b  00000000  00000000  000646f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e4e0  00000000  00000000  00096c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011af62  00000000  00000000  000c5103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001e0065  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d18  00000000  00000000  001e00b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000009c  00000000  00000000  001e9dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  001e9e6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08011798 	.word	0x08011798

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	08011798 	.word	0x08011798

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b5b0      	push	{r4, r5, r7, lr}
 80005b6:	b0ac      	sub	sp, #176	; 0xb0
 80005b8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	FRESULT res; /* FatFs function common result code */
	UINT byteswritten, bytesread; /* File write/read counts */
	char wtext[50] = "STM32 FATFS works great!"; /* File write buffer. This was previously type uint8_t */
 80005ba:	4b7a      	ldr	r3, [pc, #488]	; (80007a4 <main+0x1f0>)
 80005bc:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80005c0:	461d      	mov	r5, r3
 80005c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ca:	c403      	stmia	r4!, {r0, r1}
 80005cc:	7022      	strb	r2, [r4, #0]
 80005ce:	f107 0381 	add.w	r3, r7, #129	; 0x81
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]
 80005de:	615a      	str	r2, [r3, #20]
 80005e0:	761a      	strb	r2, [r3, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fee8 	bl	80013b6 <HAL_Init>

  /* USER CODE BEGIN Init */

  MX_FATFS_Init();
 80005e6:	f00a fd0f 	bl	800b008 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80005ea:	f00f fa93 	bl	800fb14 <MX_USB_DEVICE_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f8e5 	bl	80007bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f000 fb2f 	bl	8000c54 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005f6:	f000 f93f 	bl	8000878 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005fa:	f000 f97d 	bl	80008f8 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 80005fe:	f000 f9bb 	bl	8000978 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000602:	f000 f9db 	bl	80009bc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000606:	f000 fa8d 	bl	8000b24 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800060a:	f000 fad7 	bl	8000bbc <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800060e:	f00a fcfb 	bl	800b008 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000612:	f00f fa7f 	bl	800fb14 <MX_USB_DEVICE_Init>
  MX_TIM17_Init();
 8000616:	f000 fa0f 	bl	8000a38 <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800061a:	f000 f921 	bl	8000860 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  //
  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800061e:	2200      	movs	r2, #0
 8000620:	4961      	ldr	r1, [pc, #388]	; (80007a8 <main+0x1f4>)
 8000622:	4862      	ldr	r0, [pc, #392]	; (80007ac <main+0x1f8>)
 8000624:	f00e f88e 	bl	800e744 <f_mount>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d010      	beq.n	8000650 <main+0x9c>
      	{
  	  	  	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 800062e:	2108      	movs	r1, #8
 8000630:	485f      	ldr	r0, [pc, #380]	; (80007b0 <main+0x1fc>)
 8000632:	f001 fa2d 	bl	8001a90 <HAL_GPIO_TogglePin>
  	  	  	  HAL_Delay (300);
 8000636:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800063a:	f000 ff31 	bl	80014a0 <HAL_Delay>
  	  	  	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 800063e:	2108      	movs	r1, #8
 8000640:	485b      	ldr	r0, [pc, #364]	; (80007b0 <main+0x1fc>)
 8000642:	f001 fa25 	bl	8001a90 <HAL_GPIO_TogglePin>
  	  	  	  HAL_Delay (1000);
 8000646:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800064a:	f000 ff29 	bl	80014a0 <HAL_Delay>
 800064e:	e06f      	b.n	8000730 <main+0x17c>
      	}
  else
      	{
      		if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2264      	movs	r2, #100	; 0x64
 8000654:	9200      	str	r2, [sp, #0]
 8000656:	2200      	movs	r2, #0
 8000658:	2107      	movs	r1, #7
 800065a:	4853      	ldr	r0, [pc, #332]	; (80007a8 <main+0x1f4>)
 800065c:	f00e fdd2 	bl	800f204 <f_mkfs>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d010      	beq.n	8000688 <main+0xd4>
      	    {
  				  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED0_Pin);
 8000666:	2108      	movs	r1, #8
 8000668:	4851      	ldr	r0, [pc, #324]	; (80007b0 <main+0x1fc>)
 800066a:	f001 fa11 	bl	8001a90 <HAL_GPIO_TogglePin>
  				  HAL_Delay (300);
 800066e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000672:	f000 ff15 	bl	80014a0 <HAL_Delay>
  				  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED0_Pin);
 8000676:	2108      	movs	r1, #8
 8000678:	484d      	ldr	r0, [pc, #308]	; (80007b0 <main+0x1fc>)
 800067a:	f001 fa09 	bl	8001a90 <HAL_GPIO_TogglePin>
  				  HAL_Delay (1000);
 800067e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000682:	f000 ff0d 	bl	80014a0 <HAL_Delay>
 8000686:	e053      	b.n	8000730 <main+0x17c>
      	    }
      		else
      		{
      			// Open file for writing (Create)
      			if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8000688:	220a      	movs	r2, #10
 800068a:	494a      	ldr	r1, [pc, #296]	; (80007b4 <main+0x200>)
 800068c:	484a      	ldr	r0, [pc, #296]	; (80007b8 <main+0x204>)
 800068e:	f00e f89f 	bl	800e7d0 <f_open>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d010      	beq.n	80006ba <main+0x106>
      			{
      		  	  	  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED0_Pin);
 8000698:	2108      	movs	r1, #8
 800069a:	4845      	ldr	r0, [pc, #276]	; (80007b0 <main+0x1fc>)
 800069c:	f001 f9f8 	bl	8001a90 <HAL_GPIO_TogglePin>
      		  	  	  HAL_Delay (300);
 80006a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006a4:	f000 fefc 	bl	80014a0 <HAL_Delay>
      		  	  	  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED0_Pin);
 80006a8:	2108      	movs	r1, #8
 80006aa:	4841      	ldr	r0, [pc, #260]	; (80007b0 <main+0x1fc>)
 80006ac:	f001 f9f0 	bl	8001a90 <HAL_GPIO_TogglePin>
      		  	  	  HAL_Delay (1000);
 80006b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b4:	f000 fef4 	bl	80014a0 <HAL_Delay>
 80006b8:	e03a      	b.n	8000730 <main+0x17c>
      			}
      			else
      			{

      				// Write to the text file
      				res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 80006ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff fd9e 	bl	8000200 <strlen>
 80006c4:	4602      	mov	r2, r0
 80006c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006ca:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80006ce:	483a      	ldr	r0, [pc, #232]	; (80007b8 <main+0x204>)
 80006d0:	f00e fb7b 	bl	800edca <f_write>
 80006d4:	4603      	mov	r3, r0
 80006d6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
      				f_read(&SDFile, &rtext, 100, &bytesread);
 80006da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006de:	1d39      	adds	r1, r7, #4
 80006e0:	2264      	movs	r2, #100	; 0x64
 80006e2:	4835      	ldr	r0, [pc, #212]	; (80007b8 <main+0x204>)
 80006e4:	f00e fa32 	bl	800eb4c <f_read>
      				//f_read();

      				usberr = CDC_Transmit_FS(rtext,  sizeof(rtext));
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2164      	movs	r1, #100	; 0x64
 80006ec:	4618      	mov	r0, r3
 80006ee:	f00f facf 	bl	800fc90 <CDC_Transmit_FS>
 80006f2:	4603      	mov	r3, r0
 80006f4:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
      				if((byteswritten == 0) || (res != FR_OK))
 80006f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d003      	beq.n	8000708 <main+0x154>
 8000700:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000704:	2b00      	cmp	r3, #0
 8000706:	d010      	beq.n	800072a <main+0x176>
      				{
      			  	  	  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED0_Pin);
 8000708:	2108      	movs	r1, #8
 800070a:	4829      	ldr	r0, [pc, #164]	; (80007b0 <main+0x1fc>)
 800070c:	f001 f9c0 	bl	8001a90 <HAL_GPIO_TogglePin>
      			  	  	  HAL_Delay (300);
 8000710:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000714:	f000 fec4 	bl	80014a0 <HAL_Delay>
      			  	  	  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED0_Pin);
 8000718:	2108      	movs	r1, #8
 800071a:	4825      	ldr	r0, [pc, #148]	; (80007b0 <main+0x1fc>)
 800071c:	f001 f9b8 	bl	8001a90 <HAL_GPIO_TogglePin>
      			  	  	  HAL_Delay (1000);
 8000720:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000724:	f000 febc 	bl	80014a0 <HAL_Delay>
 8000728:	e002      	b.n	8000730 <main+0x17c>
      				}
      				else
      				{

      					f_close(&SDFile);
 800072a:	4823      	ldr	r0, [pc, #140]	; (80007b8 <main+0x204>)
 800072c:	f00e fd40 	bl	800f1b0 <f_close>
      				}

      			}
      		}
      	}
      	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	481d      	ldr	r0, [pc, #116]	; (80007ac <main+0x1f8>)
 8000736:	f00e f805 	bl	800e744 <f_mount>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 800073a:	2108      	movs	r1, #8
 800073c:	481c      	ldr	r0, [pc, #112]	; (80007b0 <main+0x1fc>)
 800073e:	f001 f9a7 	bl	8001a90 <HAL_GPIO_TogglePin>
	  HAL_Delay (1000);
 8000742:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000746:	f000 feab 	bl	80014a0 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 800074a:	2110      	movs	r1, #16
 800074c:	4818      	ldr	r0, [pc, #96]	; (80007b0 <main+0x1fc>)
 800074e:	f001 f99f 	bl	8001a90 <HAL_GPIO_TogglePin>
	  HAL_Delay (1000);
 8000752:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000756:	f000 fea3 	bl	80014a0 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 800075a:	2120      	movs	r1, #32
 800075c:	4814      	ldr	r0, [pc, #80]	; (80007b0 <main+0x1fc>)
 800075e:	f001 f997 	bl	8001a90 <HAL_GPIO_TogglePin>
	  HAL_Delay (1000);
 8000762:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000766:	f000 fe9b 	bl	80014a0 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 800076a:	2140      	movs	r1, #64	; 0x40
 800076c:	4810      	ldr	r0, [pc, #64]	; (80007b0 <main+0x1fc>)
 800076e:	f001 f98f 	bl	8001a90 <HAL_GPIO_TogglePin>
	  HAL_Delay (1000);
 8000772:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000776:	f000 fe93 	bl	80014a0 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 800077a:	2108      	movs	r1, #8
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <main+0x1fc>)
 800077e:	f001 f987 	bl	8001a90 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8000782:	2110      	movs	r1, #16
 8000784:	480a      	ldr	r0, [pc, #40]	; (80007b0 <main+0x1fc>)
 8000786:	f001 f983 	bl	8001a90 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 800078a:	2120      	movs	r1, #32
 800078c:	4808      	ldr	r0, [pc, #32]	; (80007b0 <main+0x1fc>)
 800078e:	f001 f97f 	bl	8001a90 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8000792:	2140      	movs	r1, #64	; 0x40
 8000794:	4806      	ldr	r0, [pc, #24]	; (80007b0 <main+0x1fc>)
 8000796:	f001 f97b 	bl	8001a90 <HAL_GPIO_TogglePin>
	  HAL_Delay (2000);
 800079a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800079e:	f000 fe7f 	bl	80014a0 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 80007a2:	e7ca      	b.n	800073a <main+0x186>
 80007a4:	080117bc 	.word	0x080117bc
 80007a8:	20000510 	.word	0x20000510
 80007ac:	20000514 	.word	0x20000514
 80007b0:	48000c00 	.word	0x48000c00
 80007b4:	080117b0 	.word	0x080117b0
 80007b8:	20000744 	.word	0x20000744

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b096      	sub	sp, #88	; 0x58
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	2244      	movs	r2, #68	; 0x44
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f010 f810 	bl	80107f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	463b      	mov	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80007de:	2000      	movs	r0, #0
 80007e0:	f002 fc76 	bl	80030d0 <HAL_PWREx_ControlVoltageScaling>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x32>
  {
    Error_Handler();
 80007ea:	f000 fb11 	bl	8000e10 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80007ee:	2321      	movs	r3, #33	; 0x21
 80007f0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007f8:	2301      	movs	r3, #1
 80007fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fc:	2302      	movs	r3, #2
 80007fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000800:	2303      	movs	r3, #3
 8000802:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000804:	2301      	movs	r3, #1
 8000806:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000808:	231e      	movs	r3, #30
 800080a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV20;
 800080c:	2314      	movs	r3, #20
 800080e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000810:	2302      	movs	r3, #2
 8000812:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000814:	2302      	movs	r3, #2
 8000816:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4618      	mov	r0, r3
 800081e:	f002 fd0b 	bl	8003238 <HAL_RCC_OscConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000828:	f000 faf2 	bl	8000e10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082c:	230f      	movs	r3, #15
 800082e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000830:	2303      	movs	r3, #3
 8000832:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000840:	463b      	mov	r3, r7
 8000842:	2105      	movs	r1, #5
 8000844:	4618      	mov	r0, r3
 8000846:	f003 f911 	bl	8003a6c <HAL_RCC_ClockConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000850:	f000 fade 	bl	8000e10 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000854:	f003 fb08 	bl	8003e68 <HAL_RCC_EnableCSS>
}
 8000858:	bf00      	nop
 800085a:	3758      	adds	r7, #88	; 0x58
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000864:	2200      	movs	r2, #0
 8000866:	2100      	movs	r1, #0
 8000868:	201a      	movs	r0, #26
 800086a:	f000 ff18 	bl	800169e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800086e:	201a      	movs	r0, #26
 8000870:	f000 ff31 	bl	80016d6 <HAL_NVIC_EnableIRQ>
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}

08000878 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800087c:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <MX_I2C1_Init+0x74>)
 800087e:	4a1c      	ldr	r2, [pc, #112]	; (80008f0 <MX_I2C1_Init+0x78>)
 8000880:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000882:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_I2C1_Init+0x74>)
 8000884:	4a1b      	ldr	r2, [pc, #108]	; (80008f4 <MX_I2C1_Init+0x7c>)
 8000886:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000888:	4b18      	ldr	r3, [pc, #96]	; (80008ec <MX_I2C1_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_I2C1_Init+0x74>)
 8000890:	2201      	movs	r2, #1
 8000892:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_I2C1_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_I2C1_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_I2C1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_I2C1_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_I2C1_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008b2:	480e      	ldr	r0, [pc, #56]	; (80008ec <MX_I2C1_Init+0x74>)
 80008b4:	f001 f906 	bl	8001ac4 <HAL_I2C_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008be:	f000 faa7 	bl	8000e10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008c2:	2100      	movs	r1, #0
 80008c4:	4809      	ldr	r0, [pc, #36]	; (80008ec <MX_I2C1_Init+0x74>)
 80008c6:	f001 f98c 	bl	8001be2 <HAL_I2CEx_ConfigAnalogFilter>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008d0:	f000 fa9e 	bl	8000e10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008d4:	2100      	movs	r1, #0
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_I2C1_Init+0x74>)
 80008d8:	f001 f9ce 	bl	8001c78 <HAL_I2CEx_ConfigDigitalFilter>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008e2:	f000 fa95 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000210 	.word	0x20000210
 80008f0:	40005400 	.word	0x40005400
 80008f4:	307075b1 	.word	0x307075b1

080008f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_I2C2_Init+0x74>)
 80008fe:	4a1c      	ldr	r2, [pc, #112]	; (8000970 <MX_I2C2_Init+0x78>)
 8000900:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_I2C2_Init+0x74>)
 8000904:	4a1b      	ldr	r2, [pc, #108]	; (8000974 <MX_I2C2_Init+0x7c>)
 8000906:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000908:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_I2C2_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_I2C2_Init+0x74>)
 8000910:	2201      	movs	r2, #1
 8000912:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_I2C2_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_I2C2_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_I2C2_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_I2C2_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_I2C2_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000932:	480e      	ldr	r0, [pc, #56]	; (800096c <MX_I2C2_Init+0x74>)
 8000934:	f001 f8c6 	bl	8001ac4 <HAL_I2C_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800093e:	f000 fa67 	bl	8000e10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000942:	2100      	movs	r1, #0
 8000944:	4809      	ldr	r0, [pc, #36]	; (800096c <MX_I2C2_Init+0x74>)
 8000946:	f001 f94c 	bl	8001be2 <HAL_I2CEx_ConfigAnalogFilter>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000950:	f000 fa5e 	bl	8000e10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000954:	2100      	movs	r1, #0
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_I2C2_Init+0x74>)
 8000958:	f001 f98e 	bl	8001c78 <HAL_I2CEx_ConfigDigitalFilter>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000962:	f000 fa55 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000264 	.word	0x20000264
 8000970:	40005800 	.word	0x40005800
 8000974:	307075b1 	.word	0x307075b1

08000978 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800097c:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <MX_SDMMC1_SD_Init+0x3c>)
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <MX_SDMMC1_SD_Init+0x40>)
 8000980:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_SDMMC1_SD_Init+0x3c>)
 8000984:	2200      	movs	r2, #0
 8000986:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000988:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <MX_SDMMC1_SD_Init+0x3c>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_SDMMC1_SD_Init+0x3c>)
 8000990:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000994:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <MX_SDMMC1_SD_Init+0x3c>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <MX_SDMMC1_SD_Init+0x3c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 80009a2:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <MX_SDMMC1_SD_Init+0x3c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	200002b8 	.word	0x200002b8
 80009b8:	50062400 	.word	0x50062400

080009bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <MX_SPI1_Init+0x74>)
 80009c2:	4a1c      	ldr	r2, [pc, #112]	; (8000a34 <MX_SPI1_Init+0x78>)
 80009c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009c6:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_SPI1_Init+0x74>)
 80009c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <MX_SPI1_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80009d4:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <MX_SPI1_Init+0x74>)
 80009d6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_SPI1_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_SPI1_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_SPI1_Init+0x74>)
 80009ea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80009ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_SPI1_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_SPI1_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_SPI1_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_SPI1_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_SPI1_Init+0x74>)
 8000a0a:	2207      	movs	r2, #7
 8000a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_SPI1_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_SPI1_Init+0x74>)
 8000a16:	2208      	movs	r2, #8
 8000a18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_SPI1_Init+0x74>)
 8000a1c:	f006 fc9b 	bl	8007356 <HAL_SPI_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a26:	f000 f9f3 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000338 	.word	0x20000338
 8000a34:	40013000 	.word	0x40013000

08000a38 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b092      	sub	sp, #72	; 0x48
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]
 8000a4e:	615a      	str	r2, [r3, #20]
 8000a50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a52:	463b      	mov	r3, r7
 8000a54:	222c      	movs	r2, #44	; 0x2c
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f00f fec9 	bl	80107f0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000a5e:	4b2f      	ldr	r3, [pc, #188]	; (8000b1c <MX_TIM17_Init+0xe4>)
 8000a60:	4a2f      	ldr	r2, [pc, #188]	; (8000b20 <MX_TIM17_Init+0xe8>)
 8000a62:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 999;
 8000a64:	4b2d      	ldr	r3, [pc, #180]	; (8000b1c <MX_TIM17_Init+0xe4>)
 8000a66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a6a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6c:	4b2b      	ldr	r3, [pc, #172]	; (8000b1c <MX_TIM17_Init+0xe4>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 11999;
 8000a72:	4b2a      	ldr	r3, [pc, #168]	; (8000b1c <MX_TIM17_Init+0xe4>)
 8000a74:	f642 62df 	movw	r2, #11999	; 0x2edf
 8000a78:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7a:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <MX_TIM17_Init+0xe4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000a80:	4b26      	ldr	r3, [pc, #152]	; (8000b1c <MX_TIM17_Init+0xe4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a86:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <MX_TIM17_Init+0xe4>)
 8000a88:	2280      	movs	r2, #128	; 0x80
 8000a8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a8c:	4823      	ldr	r0, [pc, #140]	; (8000b1c <MX_TIM17_Init+0xe4>)
 8000a8e:	f006 fd05 	bl	800749c <HAL_TIM_Base_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8000a98:	f000 f9ba 	bl	8000e10 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8000a9c:	481f      	ldr	r0, [pc, #124]	; (8000b1c <MX_TIM17_Init+0xe4>)
 8000a9e:	f006 fd54 	bl	800754a <HAL_TIM_OC_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8000aa8:	f000 f9b2 	bl	8000e10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000acc:	2200      	movs	r2, #0
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4812      	ldr	r0, [pc, #72]	; (8000b1c <MX_TIM17_Init+0xe4>)
 8000ad2:	f006 febb 	bl	800784c <HAL_TIM_OC_ConfigChannel>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8000adc:	f000 f998 	bl	8000e10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000af4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000afe:	463b      	mov	r3, r7
 8000b00:	4619      	mov	r1, r3
 8000b02:	4806      	ldr	r0, [pc, #24]	; (8000b1c <MX_TIM17_Init+0xe4>)
 8000b04:	f007 fabe 	bl	8008084 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8000b0e:	f000 f97f 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	3748      	adds	r7, #72	; 0x48
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2000039c 	.word	0x2000039c
 8000b20:	40014800 	.word	0x40014800

08000b24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b28:	4b22      	ldr	r3, [pc, #136]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000b2a:	4a23      	ldr	r2, [pc, #140]	; (8000bb8 <MX_USART1_UART_Init+0x94>)
 8000b2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b2e:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000b30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b36:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b42:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4e:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5a:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b6c:	4811      	ldr	r0, [pc, #68]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000b6e:	f007 fb25 	bl	80081bc <HAL_UART_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b78:	f000 f94a 	bl	8000e10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000b80:	f008 f856 	bl	8008c30 <HAL_UARTEx_SetTxFifoThreshold>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b8a:	f000 f941 	bl	8000e10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4808      	ldr	r0, [pc, #32]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000b92:	f008 f88b 	bl	8008cac <HAL_UARTEx_SetRxFifoThreshold>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b9c:	f000 f938 	bl	8000e10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000ba2:	f008 f80c 	bl	8008bbe <HAL_UARTEx_DisableFifoMode>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bac:	f000 f930 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200003e8 	.word	0x200003e8
 8000bb8:	40013800 	.word	0x40013800

08000bbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bc0:	4b22      	ldr	r3, [pc, #136]	; (8000c4c <MX_USART2_UART_Init+0x90>)
 8000bc2:	4a23      	ldr	r2, [pc, #140]	; (8000c50 <MX_USART2_UART_Init+0x94>)
 8000bc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bc6:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <MX_USART2_UART_Init+0x90>)
 8000bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bce:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <MX_USART2_UART_Init+0x90>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <MX_USART2_UART_Init+0x90>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bda:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <MX_USART2_UART_Init+0x90>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000be0:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <MX_USART2_UART_Init+0x90>)
 8000be2:	220c      	movs	r2, #12
 8000be4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <MX_USART2_UART_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_USART2_UART_Init+0x90>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <MX_USART2_UART_Init+0x90>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_USART2_UART_Init+0x90>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_USART2_UART_Init+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c04:	4811      	ldr	r0, [pc, #68]	; (8000c4c <MX_USART2_UART_Init+0x90>)
 8000c06:	f007 fad9 	bl	80081bc <HAL_UART_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c10:	f000 f8fe 	bl	8000e10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c14:	2100      	movs	r1, #0
 8000c16:	480d      	ldr	r0, [pc, #52]	; (8000c4c <MX_USART2_UART_Init+0x90>)
 8000c18:	f008 f80a 	bl	8008c30 <HAL_UARTEx_SetTxFifoThreshold>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c22:	f000 f8f5 	bl	8000e10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c26:	2100      	movs	r1, #0
 8000c28:	4808      	ldr	r0, [pc, #32]	; (8000c4c <MX_USART2_UART_Init+0x90>)
 8000c2a:	f008 f83f 	bl	8008cac <HAL_UARTEx_SetRxFifoThreshold>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c34:	f000 f8ec 	bl	8000e10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <MX_USART2_UART_Init+0x90>)
 8000c3a:	f007 ffc0 	bl	8008bbe <HAL_UARTEx_DisableFifoMode>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c44:	f000 f8e4 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000478 	.word	0x20000478
 8000c50:	40004400 	.word	0x40004400

08000c54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08c      	sub	sp, #48	; 0x30
 8000c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c6a:	4b64      	ldr	r3, [pc, #400]	; (8000dfc <MX_GPIO_Init+0x1a8>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	4a63      	ldr	r2, [pc, #396]	; (8000dfc <MX_GPIO_Init+0x1a8>)
 8000c70:	f043 0310 	orr.w	r3, r3, #16
 8000c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c76:	4b61      	ldr	r3, [pc, #388]	; (8000dfc <MX_GPIO_Init+0x1a8>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	f003 0310 	and.w	r3, r3, #16
 8000c7e:	61bb      	str	r3, [r7, #24]
 8000c80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c82:	4b5e      	ldr	r3, [pc, #376]	; (8000dfc <MX_GPIO_Init+0x1a8>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	4a5d      	ldr	r2, [pc, #372]	; (8000dfc <MX_GPIO_Init+0x1a8>)
 8000c88:	f043 0304 	orr.w	r3, r3, #4
 8000c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8e:	4b5b      	ldr	r3, [pc, #364]	; (8000dfc <MX_GPIO_Init+0x1a8>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	f003 0304 	and.w	r3, r3, #4
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c9a:	4b58      	ldr	r3, [pc, #352]	; (8000dfc <MX_GPIO_Init+0x1a8>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	4a57      	ldr	r2, [pc, #348]	; (8000dfc <MX_GPIO_Init+0x1a8>)
 8000ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca6:	4b55      	ldr	r3, [pc, #340]	; (8000dfc <MX_GPIO_Init+0x1a8>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	4b52      	ldr	r3, [pc, #328]	; (8000dfc <MX_GPIO_Init+0x1a8>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	4a51      	ldr	r2, [pc, #324]	; (8000dfc <MX_GPIO_Init+0x1a8>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cbe:	4b4f      	ldr	r3, [pc, #316]	; (8000dfc <MX_GPIO_Init+0x1a8>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cca:	4b4c      	ldr	r3, [pc, #304]	; (8000dfc <MX_GPIO_Init+0x1a8>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	4a4b      	ldr	r2, [pc, #300]	; (8000dfc <MX_GPIO_Init+0x1a8>)
 8000cd0:	f043 0302 	orr.w	r3, r3, #2
 8000cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd6:	4b49      	ldr	r3, [pc, #292]	; (8000dfc <MX_GPIO_Init+0x1a8>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce2:	4b46      	ldr	r3, [pc, #280]	; (8000dfc <MX_GPIO_Init+0x1a8>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	4a45      	ldr	r2, [pc, #276]	; (8000dfc <MX_GPIO_Init+0x1a8>)
 8000ce8:	f043 0308 	orr.w	r3, r3, #8
 8000cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cee:	4b43      	ldr	r3, [pc, #268]	; (8000dfc <MX_GPIO_Init+0x1a8>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	f003 0308 	and.w	r3, r3, #8
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f641 013c 	movw	r1, #6204	; 0x183c
 8000d00:	483f      	ldr	r0, [pc, #252]	; (8000e00 <MX_GPIO_Init+0x1ac>)
 8000d02:	f000 fead 	bl	8001a60 <HAL_GPIO_WritePin>
                          |MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2130      	movs	r1, #48	; 0x30
 8000d0a:	483e      	ldr	r0, [pc, #248]	; (8000e04 <MX_GPIO_Init+0x1b0>)
 8000d0c:	f000 fea8 	bl	8001a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2178      	movs	r1, #120	; 0x78
 8000d14:	483c      	ldr	r0, [pc, #240]	; (8000e08 <MX_GPIO_Init+0x1b4>)
 8000d16:	f000 fea3 	bl	8001a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
  GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8000d1a:	f641 033c 	movw	r3, #6204	; 0x183c
 8000d1e:	61fb      	str	r3, [r7, #28]
                          |MIRA_EN_PWR_Pin|OCPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	4619      	mov	r1, r3
 8000d32:	4833      	ldr	r0, [pc, #204]	; (8000e00 <MX_GPIO_Init+0x1ac>)
 8000d34:	f000 fcea 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_INT_Pin */
  GPIO_InitStruct.Pin = CHG_INT_Pin;
 8000d38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	482d      	ldr	r0, [pc, #180]	; (8000e04 <MX_GPIO_Init+0x1b0>)
 8000d4e:	f000 fcdd 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIG0_Pin */
  GPIO_InitStruct.Pin = LORA_DIG0_Pin;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LORA_DIG0_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d68:	f000 fcd0 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 8000d6c:	2330      	movs	r3, #48	; 0x30
 8000d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	4619      	mov	r1, r3
 8000d82:	4820      	ldr	r0, [pc, #128]	; (8000e04 <MX_GPIO_Init+0x1b0>)
 8000d84:	f000 fcc2 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : OCPFAULT_Pin */
  GPIO_InitStruct.Pin = OCPFAULT_Pin;
 8000d88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d92:	2301      	movs	r3, #1
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 031c 	add.w	r3, r7, #28
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4818      	ldr	r0, [pc, #96]	; (8000e00 <MX_GPIO_Init+0x1ac>)
 8000d9e:	f000 fcb5 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = CARD_DETECT_Pin;
 8000da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da8:	2300      	movs	r3, #0
 8000daa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	4619      	mov	r1, r3
 8000db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dba:	f000 fca7 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8000dbe:	2378      	movs	r3, #120	; 0x78
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480c      	ldr	r0, [pc, #48]	; (8000e08 <MX_GPIO_Init+0x1b4>)
 8000dd6:	f000 fc99 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : POWERGOOD_Pin */
  GPIO_InitStruct.Pin = POWERGOOD_Pin;
 8000dda:	2320      	movs	r3, #32
 8000ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dde:	2300      	movs	r3, #0
 8000de0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	4619      	mov	r1, r3
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <MX_GPIO_Init+0x1b8>)
 8000dee:	f000 fc8d 	bl	800170c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000df2:	bf00      	nop
 8000df4:	3730      	adds	r7, #48	; 0x30
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	48001000 	.word	0x48001000
 8000e04:	48000800 	.word	0x48000800
 8000e08:	48000c00 	.word	0x48000c00
 8000e0c:	48000400 	.word	0x48000400

08000e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e14:	b672      	cpsid	i
}
 8000e16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("Error_Handler() called");
 8000e18:	4801      	ldr	r0, [pc, #4]	; (8000e20 <Error_Handler+0x10>)
 8000e1a:	f00f fcf1 	bl	8010800 <iprintf>
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <Error_Handler+0xe>
 8000e20:	080117f0 	.word	0x080117f0

08000e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <HAL_MspInit+0x44>)
 8000e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e2e:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <HAL_MspInit+0x44>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6613      	str	r3, [r2, #96]	; 0x60
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <HAL_MspInit+0x44>)
 8000e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <HAL_MspInit+0x44>)
 8000e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e46:	4a08      	ldr	r2, [pc, #32]	; (8000e68 <HAL_MspInit+0x44>)
 8000e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_MspInit+0x44>)
 8000e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000

08000e6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b0b0      	sub	sp, #192	; 0xc0
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e84:	f107 0318 	add.w	r3, r7, #24
 8000e88:	2294      	movs	r2, #148	; 0x94
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f00f fcaf 	bl	80107f0 <memset>
  if(hi2c->Instance==I2C1)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a42      	ldr	r2, [pc, #264]	; (8000fa0 <HAL_I2C_MspInit+0x134>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d13b      	bne.n	8000f14 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e9c:	2340      	movs	r3, #64	; 0x40
 8000e9e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea4:	f107 0318 	add.w	r3, r7, #24
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f003 f8c9 	bl	8004040 <HAL_RCCEx_PeriphCLKConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000eb4:	f7ff ffac 	bl	8000e10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb8:	4b3a      	ldr	r3, [pc, #232]	; (8000fa4 <HAL_I2C_MspInit+0x138>)
 8000eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebc:	4a39      	ldr	r2, [pc, #228]	; (8000fa4 <HAL_I2C_MspInit+0x138>)
 8000ebe:	f043 0302 	orr.w	r3, r3, #2
 8000ec2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec4:	4b37      	ldr	r3, [pc, #220]	; (8000fa4 <HAL_I2C_MspInit+0x138>)
 8000ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ed0:	23c0      	movs	r3, #192	; 0xc0
 8000ed2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ed6:	2312      	movs	r3, #18
 8000ed8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ee8:	2304      	movs	r3, #4
 8000eea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	482c      	ldr	r0, [pc, #176]	; (8000fa8 <HAL_I2C_MspInit+0x13c>)
 8000ef6:	f000 fc09 	bl	800170c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000efa:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <HAL_I2C_MspInit+0x138>)
 8000efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efe:	4a29      	ldr	r2, [pc, #164]	; (8000fa4 <HAL_I2C_MspInit+0x138>)
 8000f00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f04:	6593      	str	r3, [r2, #88]	; 0x58
 8000f06:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <HAL_I2C_MspInit+0x138>)
 8000f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f12:	e040      	b.n	8000f96 <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a24      	ldr	r2, [pc, #144]	; (8000fac <HAL_I2C_MspInit+0x140>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d13b      	bne.n	8000f96 <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f22:	2300      	movs	r3, #0
 8000f24:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f26:	f107 0318 	add.w	r3, r7, #24
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f003 f888 	bl	8004040 <HAL_RCCEx_PeriphCLKConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8000f36:	f7ff ff6b 	bl	8000e10 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <HAL_I2C_MspInit+0x138>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	4a19      	ldr	r2, [pc, #100]	; (8000fa4 <HAL_I2C_MspInit+0x138>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <HAL_I2C_MspInit+0x138>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f52:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f5a:	2312      	movs	r3, #18
 8000f5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f66:	2303      	movs	r3, #3
 8000f68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f72:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f76:	4619      	mov	r1, r3
 8000f78:	480b      	ldr	r0, [pc, #44]	; (8000fa8 <HAL_I2C_MspInit+0x13c>)
 8000f7a:	f000 fbc7 	bl	800170c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <HAL_I2C_MspInit+0x138>)
 8000f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f82:	4a08      	ldr	r2, [pc, #32]	; (8000fa4 <HAL_I2C_MspInit+0x138>)
 8000f84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f88:	6593      	str	r3, [r2, #88]	; 0x58
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_I2C_MspInit+0x138>)
 8000f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
}
 8000f96:	bf00      	nop
 8000f98:	37c0      	adds	r7, #192	; 0xc0
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40005400 	.word	0x40005400
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	48000400 	.word	0x48000400
 8000fac:	40005800 	.word	0x40005800

08000fb0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b0b0      	sub	sp, #192	; 0xc0
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc8:	f107 0318 	add.w	r3, r7, #24
 8000fcc:	2294      	movs	r2, #148	; 0x94
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f00f fc0d 	bl	80107f0 <memset>
  if(hsd->Instance==SDMMC1)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a33      	ldr	r2, [pc, #204]	; (80010a8 <HAL_SD_MspInit+0xf8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d15f      	bne.n	80010a0 <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000fe0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000fe4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8000fe6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fee:	f107 0318 	add.w	r3, r7, #24
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f003 f824 	bl	8004040 <HAL_RCCEx_PeriphCLKConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8000ffe:	f7ff ff07 	bl	8000e10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001002:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <HAL_SD_MspInit+0xfc>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	4a29      	ldr	r2, [pc, #164]	; (80010ac <HAL_SD_MspInit+0xfc>)
 8001008:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800100c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100e:	4b27      	ldr	r3, [pc, #156]	; (80010ac <HAL_SD_MspInit+0xfc>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800101a:	4b24      	ldr	r3, [pc, #144]	; (80010ac <HAL_SD_MspInit+0xfc>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	4a23      	ldr	r2, [pc, #140]	; (80010ac <HAL_SD_MspInit+0xfc>)
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001026:	4b21      	ldr	r3, [pc, #132]	; (80010ac <HAL_SD_MspInit+0xfc>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001032:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <HAL_SD_MspInit+0xfc>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	4a1d      	ldr	r2, [pc, #116]	; (80010ac <HAL_SD_MspInit+0xfc>)
 8001038:	f043 0308 	orr.w	r3, r3, #8
 800103c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103e:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <HAL_SD_MspInit+0xfc>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800104a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800104e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001064:	230c      	movs	r3, #12
 8001066:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800106e:	4619      	mov	r1, r3
 8001070:	480f      	ldr	r0, [pc, #60]	; (80010b0 <HAL_SD_MspInit+0x100>)
 8001072:	f000 fb4b 	bl	800170c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001076:	2304      	movs	r3, #4
 8001078:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800108e:	230c      	movs	r3, #12
 8001090:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001094:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	; (80010b4 <HAL_SD_MspInit+0x104>)
 800109c:	f000 fb36 	bl	800170c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80010a0:	bf00      	nop
 80010a2:	37c0      	adds	r7, #192	; 0xc0
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	50062400 	.word	0x50062400
 80010ac:	40021000 	.word	0x40021000
 80010b0:	48000800 	.word	0x48000800
 80010b4:	48000c00 	.word	0x48000c00

080010b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	; 0x28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a17      	ldr	r2, [pc, #92]	; (8001134 <HAL_SPI_MspInit+0x7c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d128      	bne.n	800112c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <HAL_SPI_MspInit+0x80>)
 80010dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010de:	4a16      	ldr	r2, [pc, #88]	; (8001138 <HAL_SPI_MspInit+0x80>)
 80010e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010e4:	6613      	str	r3, [r2, #96]	; 0x60
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <HAL_SPI_MspInit+0x80>)
 80010e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_SPI_MspInit+0x80>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	4a10      	ldr	r2, [pc, #64]	; (8001138 <HAL_SPI_MspInit+0x80>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_SPI_MspInit+0x80>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800110a:	23f0      	movs	r3, #240	; 0xf0
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800111a:	2305      	movs	r3, #5
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001128:	f000 faf0 	bl	800170c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800112c:	bf00      	nop
 800112e:	3728      	adds	r7, #40	; 0x28
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40013000 	.word	0x40013000
 8001138:	40021000 	.word	0x40021000

0800113c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <HAL_TIM_Base_MspInit+0x38>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d10b      	bne.n	8001166 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_TIM_Base_MspInit+0x3c>)
 8001150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001152:	4a09      	ldr	r2, [pc, #36]	; (8001178 <HAL_TIM_Base_MspInit+0x3c>)
 8001154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001158:	6613      	str	r3, [r2, #96]	; 0x60
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <HAL_TIM_Base_MspInit+0x3c>)
 800115c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001166:	bf00      	nop
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40014800 	.word	0x40014800
 8001178:	40021000 	.word	0x40021000

0800117c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b0b0      	sub	sp, #192	; 0xc0
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001194:	f107 0318 	add.w	r3, r7, #24
 8001198:	2294      	movs	r2, #148	; 0x94
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f00f fb27 	bl	80107f0 <memset>
  if(huart->Instance==USART1)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a43      	ldr	r2, [pc, #268]	; (80012b4 <HAL_UART_MspInit+0x138>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d13d      	bne.n	8001228 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011ac:	2301      	movs	r3, #1
 80011ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011b0:	2300      	movs	r3, #0
 80011b2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b4:	f107 0318 	add.w	r3, r7, #24
 80011b8:	4618      	mov	r0, r3
 80011ba:	f002 ff41 	bl	8004040 <HAL_RCCEx_PeriphCLKConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011c4:	f7ff fe24 	bl	8000e10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011c8:	4b3b      	ldr	r3, [pc, #236]	; (80012b8 <HAL_UART_MspInit+0x13c>)
 80011ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011cc:	4a3a      	ldr	r2, [pc, #232]	; (80012b8 <HAL_UART_MspInit+0x13c>)
 80011ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d2:	6613      	str	r3, [r2, #96]	; 0x60
 80011d4:	4b38      	ldr	r3, [pc, #224]	; (80012b8 <HAL_UART_MspInit+0x13c>)
 80011d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e0:	4b35      	ldr	r3, [pc, #212]	; (80012b8 <HAL_UART_MspInit+0x13c>)
 80011e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e4:	4a34      	ldr	r2, [pc, #208]	; (80012b8 <HAL_UART_MspInit+0x13c>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ec:	4b32      	ldr	r3, [pc, #200]	; (80012b8 <HAL_UART_MspInit+0x13c>)
 80011ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 80011f8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	2302      	movs	r3, #2
 8001202:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120c:	2303      	movs	r3, #3
 800120e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001212:	2307      	movs	r3, #7
 8001214:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800121c:	4619      	mov	r1, r3
 800121e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001222:	f000 fa73 	bl	800170c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001226:	e040      	b.n	80012aa <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a23      	ldr	r2, [pc, #140]	; (80012bc <HAL_UART_MspInit+0x140>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d13b      	bne.n	80012aa <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001232:	2302      	movs	r3, #2
 8001234:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001236:	2300      	movs	r3, #0
 8001238:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800123a:	f107 0318 	add.w	r3, r7, #24
 800123e:	4618      	mov	r0, r3
 8001240:	f002 fefe 	bl	8004040 <HAL_RCCEx_PeriphCLKConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800124a:	f7ff fde1 	bl	8000e10 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <HAL_UART_MspInit+0x13c>)
 8001250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001252:	4a19      	ldr	r2, [pc, #100]	; (80012b8 <HAL_UART_MspInit+0x13c>)
 8001254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001258:	6593      	str	r3, [r2, #88]	; 0x58
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <HAL_UART_MspInit+0x13c>)
 800125c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <HAL_UART_MspInit+0x13c>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	4a13      	ldr	r2, [pc, #76]	; (80012b8 <HAL_UART_MspInit+0x13c>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <HAL_UART_MspInit+0x13c>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 800127e:	230c      	movs	r3, #12
 8001280:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001290:	2303      	movs	r3, #3
 8001292:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001296:	2307      	movs	r3, #7
 8001298:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012a0:	4619      	mov	r1, r3
 80012a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a6:	f000 fa31 	bl	800170c <HAL_GPIO_Init>
}
 80012aa:	bf00      	nop
 80012ac:	37c0      	adds	r7, #192	; 0xc0
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40013800 	.word	0x40013800
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40004400 	.word	0x40004400

080012c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80012c4:	f002 fde0 	bl	8003e88 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <NMI_Handler+0x8>

080012ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <HardFault_Handler+0x4>

080012d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <MemManage_Handler+0x4>

080012d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012da:	e7fe      	b.n	80012da <BusFault_Handler+0x4>

080012dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <UsageFault_Handler+0x4>

080012e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001310:	f000 f8a6 	bl	8001460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}

08001318 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800131e:	f006 f975 	bl	800760c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	2000039c 	.word	0x2000039c

0800132c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001330:	4802      	ldr	r0, [pc, #8]	; (800133c <OTG_FS_IRQHandler+0x10>)
 8001332:	f000 fe40 	bl	8001fb6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20001e7c 	.word	0x20001e7c

08001340 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <SystemInit+0x20>)
 8001346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800134a:	4a05      	ldr	r2, [pc, #20]	; (8001360 <SystemInit+0x20>)
 800134c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800139c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001368:	f7ff ffea 	bl	8001340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800136e:	490d      	ldr	r1, [pc, #52]	; (80013a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001370:	4a0d      	ldr	r2, [pc, #52]	; (80013a8 <LoopForever+0xe>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001374:	e002      	b.n	800137c <LoopCopyDataInit>

08001376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137a:	3304      	adds	r3, #4

0800137c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800137c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001380:	d3f9      	bcc.n	8001376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001384:	4c0a      	ldr	r4, [pc, #40]	; (80013b0 <LoopForever+0x16>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001388:	e001      	b.n	800138e <LoopFillZerobss>

0800138a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800138c:	3204      	adds	r2, #4

0800138e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001390:	d3fb      	bcc.n	800138a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001392:	f00f fa09 	bl	80107a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001396:	f7ff f90d 	bl	80005b4 <main>

0800139a <LoopForever>:

LoopForever:
    b LoopForever
 800139a:	e7fe      	b.n	800139a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800139c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80013a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a4:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80013a8:	08011a60 	.word	0x08011a60
  ldr r2, =_sbss
 80013ac:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80013b0:	200025bc 	.word	0x200025bc

080013b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013b4:	e7fe      	b.n	80013b4 <ADC1_IRQHandler>

080013b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013bc:	2300      	movs	r3, #0
 80013be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c0:	2003      	movs	r0, #3
 80013c2:	f000 f961 	bl	8001688 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013c6:	200f      	movs	r0, #15
 80013c8:	f000 f80e 	bl	80013e8 <HAL_InitTick>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d002      	beq.n	80013d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	71fb      	strb	r3, [r7, #7]
 80013d6:	e001      	b.n	80013dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013d8:	f7ff fd24 	bl	8000e24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013dc:	79fb      	ldrb	r3, [r7, #7]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013f0:	2300      	movs	r3, #0
 80013f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <HAL_InitTick+0x6c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d023      	beq.n	8001444 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013fc:	4b16      	ldr	r3, [pc, #88]	; (8001458 <HAL_InitTick+0x70>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <HAL_InitTick+0x6c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140a:	fbb3 f3f1 	udiv	r3, r3, r1
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f000 f96d 	bl	80016f2 <HAL_SYSTICK_Config>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10f      	bne.n	800143e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b0f      	cmp	r3, #15
 8001422:	d809      	bhi.n	8001438 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001424:	2200      	movs	r2, #0
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800142c:	f000 f937 	bl	800169e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001430:	4a0a      	ldr	r2, [pc, #40]	; (800145c <HAL_InitTick+0x74>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e007      	b.n	8001448 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	e004      	b.n	8001448 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	73fb      	strb	r3, [r7, #15]
 8001442:	e001      	b.n	8001448 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001448:	7bfb      	ldrb	r3, [r7, #15]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000008 	.word	0x20000008
 8001458:	20000000 	.word	0x20000000
 800145c:	20000004 	.word	0x20000004

08001460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_IncTick+0x20>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_IncTick+0x24>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4413      	add	r3, r2
 8001470:	4a04      	ldr	r2, [pc, #16]	; (8001484 <HAL_IncTick+0x24>)
 8001472:	6013      	str	r3, [r2, #0]
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000008 	.word	0x20000008
 8001484:	20000508 	.word	0x20000508

08001488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return uwTick;
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <HAL_GetTick+0x14>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20000508 	.word	0x20000508

080014a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a8:	f7ff ffee 	bl	8001488 <HAL_GetTick>
 80014ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014b8:	d005      	beq.n	80014c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <HAL_Delay+0x44>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4413      	add	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014c6:	bf00      	nop
 80014c8:	f7ff ffde 	bl	8001488 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d8f7      	bhi.n	80014c8 <HAL_Delay+0x28>
  {
  }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000008 	.word	0x20000008

080014e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <__NVIC_SetPriorityGrouping+0x44>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001504:	4013      	ands	r3, r2
 8001506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001510:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151a:	4a04      	ldr	r2, [pc, #16]	; (800152c <__NVIC_SetPriorityGrouping+0x44>)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	60d3      	str	r3, [r2, #12]
}
 8001520:	bf00      	nop
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <__NVIC_GetPriorityGrouping+0x18>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	0a1b      	lsrs	r3, r3, #8
 800153a:	f003 0307 	and.w	r3, r3, #7
}
 800153e:	4618      	mov	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	2b00      	cmp	r3, #0
 800155c:	db0b      	blt.n	8001576 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	f003 021f 	and.w	r2, r3, #31
 8001564:	4907      	ldr	r1, [pc, #28]	; (8001584 <__NVIC_EnableIRQ+0x38>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	095b      	lsrs	r3, r3, #5
 800156c:	2001      	movs	r0, #1
 800156e:	fa00 f202 	lsl.w	r2, r0, r2
 8001572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000e100 	.word	0xe000e100

08001588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	2b00      	cmp	r3, #0
 800159a:	db0a      	blt.n	80015b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	490c      	ldr	r1, [pc, #48]	; (80015d4 <__NVIC_SetPriority+0x4c>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	0112      	lsls	r2, r2, #4
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	440b      	add	r3, r1
 80015ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b0:	e00a      	b.n	80015c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4908      	ldr	r1, [pc, #32]	; (80015d8 <__NVIC_SetPriority+0x50>)
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	3b04      	subs	r3, #4
 80015c0:	0112      	lsls	r2, r2, #4
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	440b      	add	r3, r1
 80015c6:	761a      	strb	r2, [r3, #24]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000e100 	.word	0xe000e100
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b089      	sub	sp, #36	; 0x24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f1c3 0307 	rsb	r3, r3, #7
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	bf28      	it	cs
 80015fa:	2304      	movcs	r3, #4
 80015fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3304      	adds	r3, #4
 8001602:	2b06      	cmp	r3, #6
 8001604:	d902      	bls.n	800160c <NVIC_EncodePriority+0x30>
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3b03      	subs	r3, #3
 800160a:	e000      	b.n	800160e <NVIC_EncodePriority+0x32>
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	401a      	ands	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001624:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	43d9      	mvns	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	4313      	orrs	r3, r2
         );
}
 8001636:	4618      	mov	r0, r3
 8001638:	3724      	adds	r7, #36	; 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001654:	d301      	bcc.n	800165a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001656:	2301      	movs	r3, #1
 8001658:	e00f      	b.n	800167a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165a:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <SysTick_Config+0x40>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001662:	210f      	movs	r1, #15
 8001664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001668:	f7ff ff8e 	bl	8001588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <SysTick_Config+0x40>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001672:	4b04      	ldr	r3, [pc, #16]	; (8001684 <SysTick_Config+0x40>)
 8001674:	2207      	movs	r2, #7
 8001676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	e000e010 	.word	0xe000e010

08001688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ff29 	bl	80014e8 <__NVIC_SetPriorityGrouping>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
 80016aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016b0:	f7ff ff3e 	bl	8001530 <__NVIC_GetPriorityGrouping>
 80016b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	68b9      	ldr	r1, [r7, #8]
 80016ba:	6978      	ldr	r0, [r7, #20]
 80016bc:	f7ff ff8e 	bl	80015dc <NVIC_EncodePriority>
 80016c0:	4602      	mov	r2, r0
 80016c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff5d 	bl	8001588 <__NVIC_SetPriority>
}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff31 	bl	800154c <__NVIC_EnableIRQ>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ffa2 	bl	8001644 <SysTick_Config>
 8001700:	4603      	mov	r3, r0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800170c:	b480      	push	{r7}
 800170e:	b087      	sub	sp, #28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171a:	e166      	b.n	80019ea <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	2101      	movs	r1, #1
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	4013      	ands	r3, r2
 800172a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 8158 	beq.w	80019e4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	2b01      	cmp	r3, #1
 800173e:	d005      	beq.n	800174c <HAL_GPIO_Init+0x40>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d130      	bne.n	80017ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	2203      	movs	r2, #3
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	68da      	ldr	r2, [r3, #12]
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001782:	2201      	movs	r2, #1
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	4013      	ands	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	091b      	lsrs	r3, r3, #4
 8001798:	f003 0201 	and.w	r2, r3, #1
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d017      	beq.n	80017ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	2203      	movs	r2, #3
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d123      	bne.n	800183e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	08da      	lsrs	r2, r3, #3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3208      	adds	r2, #8
 80017fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001802:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	220f      	movs	r2, #15
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	691a      	ldr	r2, [r3, #16]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	08da      	lsrs	r2, r3, #3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3208      	adds	r2, #8
 8001838:	6939      	ldr	r1, [r7, #16]
 800183a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	2203      	movs	r2, #3
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 0203 	and.w	r2, r3, #3
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 80b2 	beq.w	80019e4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001880:	4b61      	ldr	r3, [pc, #388]	; (8001a08 <HAL_GPIO_Init+0x2fc>)
 8001882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001884:	4a60      	ldr	r2, [pc, #384]	; (8001a08 <HAL_GPIO_Init+0x2fc>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6613      	str	r3, [r2, #96]	; 0x60
 800188c:	4b5e      	ldr	r3, [pc, #376]	; (8001a08 <HAL_GPIO_Init+0x2fc>)
 800188e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001898:	4a5c      	ldr	r2, [pc, #368]	; (8001a0c <HAL_GPIO_Init+0x300>)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	089b      	lsrs	r3, r3, #2
 800189e:	3302      	adds	r3, #2
 80018a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	220f      	movs	r2, #15
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018c2:	d02b      	beq.n	800191c <HAL_GPIO_Init+0x210>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a52      	ldr	r2, [pc, #328]	; (8001a10 <HAL_GPIO_Init+0x304>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d025      	beq.n	8001918 <HAL_GPIO_Init+0x20c>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a51      	ldr	r2, [pc, #324]	; (8001a14 <HAL_GPIO_Init+0x308>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d01f      	beq.n	8001914 <HAL_GPIO_Init+0x208>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a50      	ldr	r2, [pc, #320]	; (8001a18 <HAL_GPIO_Init+0x30c>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d019      	beq.n	8001910 <HAL_GPIO_Init+0x204>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a4f      	ldr	r2, [pc, #316]	; (8001a1c <HAL_GPIO_Init+0x310>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d013      	beq.n	800190c <HAL_GPIO_Init+0x200>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a4e      	ldr	r2, [pc, #312]	; (8001a20 <HAL_GPIO_Init+0x314>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d00d      	beq.n	8001908 <HAL_GPIO_Init+0x1fc>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a4d      	ldr	r2, [pc, #308]	; (8001a24 <HAL_GPIO_Init+0x318>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d007      	beq.n	8001904 <HAL_GPIO_Init+0x1f8>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a4c      	ldr	r2, [pc, #304]	; (8001a28 <HAL_GPIO_Init+0x31c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d101      	bne.n	8001900 <HAL_GPIO_Init+0x1f4>
 80018fc:	2307      	movs	r3, #7
 80018fe:	e00e      	b.n	800191e <HAL_GPIO_Init+0x212>
 8001900:	2308      	movs	r3, #8
 8001902:	e00c      	b.n	800191e <HAL_GPIO_Init+0x212>
 8001904:	2306      	movs	r3, #6
 8001906:	e00a      	b.n	800191e <HAL_GPIO_Init+0x212>
 8001908:	2305      	movs	r3, #5
 800190a:	e008      	b.n	800191e <HAL_GPIO_Init+0x212>
 800190c:	2304      	movs	r3, #4
 800190e:	e006      	b.n	800191e <HAL_GPIO_Init+0x212>
 8001910:	2303      	movs	r3, #3
 8001912:	e004      	b.n	800191e <HAL_GPIO_Init+0x212>
 8001914:	2302      	movs	r3, #2
 8001916:	e002      	b.n	800191e <HAL_GPIO_Init+0x212>
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <HAL_GPIO_Init+0x212>
 800191c:	2300      	movs	r3, #0
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	f002 0203 	and.w	r2, r2, #3
 8001924:	0092      	lsls	r2, r2, #2
 8001926:	4093      	lsls	r3, r2
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4313      	orrs	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800192e:	4937      	ldr	r1, [pc, #220]	; (8001a0c <HAL_GPIO_Init+0x300>)
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	089b      	lsrs	r3, r3, #2
 8001934:	3302      	adds	r3, #2
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800193c:	4b3b      	ldr	r3, [pc, #236]	; (8001a2c <HAL_GPIO_Init+0x320>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	43db      	mvns	r3, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001960:	4a32      	ldr	r2, [pc, #200]	; (8001a2c <HAL_GPIO_Init+0x320>)
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001966:	4b31      	ldr	r3, [pc, #196]	; (8001a2c <HAL_GPIO_Init+0x320>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800198a:	4a28      	ldr	r2, [pc, #160]	; (8001a2c <HAL_GPIO_Init+0x320>)
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001990:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <HAL_GPIO_Init+0x320>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019b4:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <HAL_GPIO_Init+0x320>)
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019ba:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <HAL_GPIO_Init+0x320>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019de:	4a13      	ldr	r2, [pc, #76]	; (8001a2c <HAL_GPIO_Init+0x320>)
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	3301      	adds	r3, #1
 80019e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	fa22 f303 	lsr.w	r3, r2, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f47f ae91 	bne.w	800171c <HAL_GPIO_Init+0x10>
  }
}
 80019fa:	bf00      	nop
 80019fc:	bf00      	nop
 80019fe:	371c      	adds	r7, #28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40010000 	.word	0x40010000
 8001a10:	48000400 	.word	0x48000400
 8001a14:	48000800 	.word	0x48000800
 8001a18:	48000c00 	.word	0x48000c00
 8001a1c:	48001000 	.word	0x48001000
 8001a20:	48001400 	.word	0x48001400
 8001a24:	48001800 	.word	0x48001800
 8001a28:	48001c00 	.word	0x48001c00
 8001a2c:	40010400 	.word	0x40010400

08001a30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691a      	ldr	r2, [r3, #16]
 8001a40:	887b      	ldrh	r3, [r7, #2]
 8001a42:	4013      	ands	r3, r2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d002      	beq.n	8001a4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	73fb      	strb	r3, [r7, #15]
 8001a4c:	e001      	b.n	8001a52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	807b      	strh	r3, [r7, #2]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a70:	787b      	ldrb	r3, [r7, #1]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a76:	887a      	ldrh	r2, [r7, #2]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a7c:	e002      	b.n	8001a84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a7e:	887a      	ldrh	r2, [r7, #2]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aa2:	887a      	ldrh	r2, [r7, #2]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	041a      	lsls	r2, r3, #16
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	43d9      	mvns	r1, r3
 8001aae:	887b      	ldrh	r3, [r7, #2]
 8001ab0:	400b      	ands	r3, r1
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	619a      	str	r2, [r3, #24]
}
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e081      	b.n	8001bda <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d106      	bne.n	8001af0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff f9be 	bl	8000e6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2224      	movs	r2, #36	; 0x24
 8001af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0201 	bic.w	r2, r2, #1
 8001b06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d107      	bne.n	8001b3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	e006      	b.n	8001b4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d104      	bne.n	8001b5e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691a      	ldr	r2, [r3, #16]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69d9      	ldr	r1, [r3, #28]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a1a      	ldr	r2, [r3, #32]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0201 	orr.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b20      	cmp	r3, #32
 8001bf6:	d138      	bne.n	8001c6a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e032      	b.n	8001c6c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2224      	movs	r2, #36	; 0x24
 8001c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0201 	bic.w	r2, r2, #1
 8001c24:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c34:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6819      	ldr	r1, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 0201 	orr.w	r2, r2, #1
 8001c54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2220      	movs	r2, #32
 8001c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e000      	b.n	8001c6c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c6a:	2302      	movs	r3, #2
  }
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b20      	cmp	r3, #32
 8001c8c:	d139      	bne.n	8001d02 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d101      	bne.n	8001c9c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	e033      	b.n	8001d04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2224      	movs	r2, #36	; 0x24
 8001ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0201 	bic.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	021b      	lsls	r3, r3, #8
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f042 0201 	orr.w	r2, r2, #1
 8001cec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	e000      	b.n	8001d04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d02:	2302      	movs	r3, #2
  }
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d12:	b08f      	sub	sp, #60	; 0x3c
 8001d14:	af0a      	add	r7, sp, #40	; 0x28
 8001d16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e116      	b.n	8001f50 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d106      	bne.n	8001d42 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f00e f901 	bl	800ff44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2203      	movs	r2, #3
 8001d46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d102      	bne.n	8001d5c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f007 feee 	bl	8009b42 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	687e      	ldr	r6, [r7, #4]
 8001d6e:	466d      	mov	r5, sp
 8001d70:	f106 0410 	add.w	r4, r6, #16
 8001d74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d80:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d84:	1d33      	adds	r3, r6, #4
 8001d86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d88:	6838      	ldr	r0, [r7, #0]
 8001d8a:	f007 fe01 	bl	8009990 <USB_CoreInit>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2202      	movs	r2, #2
 8001d98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0d7      	b.n	8001f50 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2100      	movs	r1, #0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f007 fedc 	bl	8009b64 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dac:	2300      	movs	r3, #0
 8001dae:	73fb      	strb	r3, [r7, #15]
 8001db0:	e04a      	b.n	8001e48 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001db2:	7bfa      	ldrb	r2, [r7, #15]
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	4413      	add	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	333d      	adds	r3, #61	; 0x3d
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001dc6:	7bfa      	ldrb	r2, [r7, #15]
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4413      	add	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	333c      	adds	r3, #60	; 0x3c
 8001dd6:	7bfa      	ldrb	r2, [r7, #15]
 8001dd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001dda:	7bfa      	ldrb	r2, [r7, #15]
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	b298      	uxth	r0, r3
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4413      	add	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	440b      	add	r3, r1
 8001dec:	3344      	adds	r3, #68	; 0x44
 8001dee:	4602      	mov	r2, r0
 8001df0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001df2:	7bfa      	ldrb	r2, [r7, #15]
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	440b      	add	r3, r1
 8001e00:	3340      	adds	r3, #64	; 0x40
 8001e02:	2200      	movs	r2, #0
 8001e04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e06:	7bfa      	ldrb	r2, [r7, #15]
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4413      	add	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	440b      	add	r3, r1
 8001e14:	3348      	adds	r3, #72	; 0x48
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e1a:	7bfa      	ldrb	r2, [r7, #15]
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	4413      	add	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	440b      	add	r3, r1
 8001e28:	334c      	adds	r3, #76	; 0x4c
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e2e:	7bfa      	ldrb	r2, [r7, #15]
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4413      	add	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	3354      	adds	r3, #84	; 0x54
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	3301      	adds	r3, #1
 8001e46:	73fb      	strb	r3, [r7, #15]
 8001e48:	7bfa      	ldrb	r2, [r7, #15]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d3af      	bcc.n	8001db2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	73fb      	strb	r3, [r7, #15]
 8001e56:	e044      	b.n	8001ee2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4413      	add	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e6e:	7bfa      	ldrb	r2, [r7, #15]
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	4613      	mov	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	4413      	add	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	440b      	add	r3, r1
 8001e7c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e80:	7bfa      	ldrb	r2, [r7, #15]
 8001e82:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e84:	7bfa      	ldrb	r2, [r7, #15]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e9a:	7bfa      	ldrb	r2, [r7, #15]
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001eb0:	7bfa      	ldrb	r2, [r7, #15]
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4413      	add	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ec6:	7bfa      	ldrb	r2, [r7, #15]
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4413      	add	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	440b      	add	r3, r1
 8001ed4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	73fb      	strb	r3, [r7, #15]
 8001ee2:	7bfa      	ldrb	r2, [r7, #15]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d3b5      	bcc.n	8001e58 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	603b      	str	r3, [r7, #0]
 8001ef2:	687e      	ldr	r6, [r7, #4]
 8001ef4:	466d      	mov	r5, sp
 8001ef6:	f106 0410 	add.w	r4, r6, #16
 8001efa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001efc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001efe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f06:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f0a:	1d33      	adds	r3, r6, #4
 8001f0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f0e:	6838      	ldr	r0, [r7, #0]
 8001f10:	f007 fe74 	bl	8009bfc <USB_DevInit>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d005      	beq.n	8001f26 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e014      	b.n	8001f50 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d102      	bne.n	8001f44 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f001 f882 	bl	8003048 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f008 fefc 	bl	800ad46 <USB_DevDisconnect>

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f58 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_PCD_Start+0x1c>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e01c      	b.n	8001fae <HAL_PCD_Start+0x56>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d105      	bne.n	8001f90 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f88:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f007 fdc3 	bl	8009b20 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f008 feb0 	bl	800ad04 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001fb6:	b590      	push	{r4, r7, lr}
 8001fb8:	b08d      	sub	sp, #52	; 0x34
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fc4:	6a3b      	ldr	r3, [r7, #32]
 8001fc6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f008 ff6e 	bl	800aeae <USB_GetMode>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f040 847e 	bne.w	80028d6 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f008 fed2 	bl	800ad88 <USB_ReadInterrupts>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 8474 	beq.w	80028d4 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f008 febf 	bl	800ad88 <USB_ReadInterrupts>
 800200a:	4603      	mov	r3, r0
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b02      	cmp	r3, #2
 8002012:	d107      	bne.n	8002024 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	695a      	ldr	r2, [r3, #20]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f002 0202 	and.w	r2, r2, #2
 8002022:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f008 fead 	bl	800ad88 <USB_ReadInterrupts>
 800202e:	4603      	mov	r3, r0
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	2b10      	cmp	r3, #16
 8002036:	d161      	bne.n	80020fc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699a      	ldr	r2, [r3, #24]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0210 	bic.w	r2, r2, #16
 8002046:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	f003 020f 	and.w	r2, r3, #15
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	4413      	add	r3, r2
 8002064:	3304      	adds	r3, #4
 8002066:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	0c5b      	lsrs	r3, r3, #17
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	2b02      	cmp	r3, #2
 8002072:	d124      	bne.n	80020be <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800207a:	4013      	ands	r3, r2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d035      	beq.n	80020ec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	091b      	lsrs	r3, r3, #4
 8002088:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800208a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800208e:	b29b      	uxth	r3, r3
 8002090:	461a      	mov	r2, r3
 8002092:	6a38      	ldr	r0, [r7, #32]
 8002094:	f008 fce4 	bl	800aa60 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	691a      	ldr	r2, [r3, #16]
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	091b      	lsrs	r3, r3, #4
 80020a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020a4:	441a      	add	r2, r3
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	6a1a      	ldr	r2, [r3, #32]
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020b6:	441a      	add	r2, r3
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	621a      	str	r2, [r3, #32]
 80020bc:	e016      	b.n	80020ec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	0c5b      	lsrs	r3, r3, #17
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	2b06      	cmp	r3, #6
 80020c8:	d110      	bne.n	80020ec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020d0:	2208      	movs	r2, #8
 80020d2:	4619      	mov	r1, r3
 80020d4:	6a38      	ldr	r0, [r7, #32]
 80020d6:	f008 fcc3 	bl	800aa60 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	6a1a      	ldr	r2, [r3, #32]
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020e6:	441a      	add	r2, r3
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	699a      	ldr	r2, [r3, #24]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0210 	orr.w	r2, r2, #16
 80020fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f008 fe41 	bl	800ad88 <USB_ReadInterrupts>
 8002106:	4603      	mov	r3, r0
 8002108:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800210c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002110:	f040 80a7 	bne.w	8002262 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f008 fe46 	bl	800adae <USB_ReadDevAllOutEpInterrupt>
 8002122:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002124:	e099      	b.n	800225a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 808e 	beq.w	800224e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f008 fe6a 	bl	800ae16 <USB_ReadDevOutEPInterrupt>
 8002142:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00c      	beq.n	8002168 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	015a      	lsls	r2, r3, #5
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	4413      	add	r3, r2
 8002156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800215a:	461a      	mov	r2, r3
 800215c:	2301      	movs	r3, #1
 800215e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002160:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 fe96 	bl	8002e94 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00c      	beq.n	800218c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	4413      	add	r3, r2
 800217a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800217e:	461a      	mov	r2, r3
 8002180:	2308      	movs	r3, #8
 8002182:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002184:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 fed2 	bl	8002f30 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	2b00      	cmp	r3, #0
 8002194:	d008      	beq.n	80021a8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	015a      	lsls	r2, r3, #5
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	4413      	add	r3, r2
 800219e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021a2:	461a      	mov	r2, r3
 80021a4:	2310      	movs	r3, #16
 80021a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d030      	beq.n	8002214 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ba:	2b80      	cmp	r3, #128	; 0x80
 80021bc:	d109      	bne.n	80021d2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021d0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80021d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4413      	add	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	4413      	add	r3, r2
 80021e4:	3304      	adds	r3, #4
 80021e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	78db      	ldrb	r3, [r3, #3]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d108      	bne.n	8002202 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	2200      	movs	r2, #0
 80021f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	4619      	mov	r1, r3
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f00d ffe5 	bl	80101cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	015a      	lsls	r2, r3, #5
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	4413      	add	r3, r2
 800220a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800220e:	461a      	mov	r2, r3
 8002210:	2302      	movs	r3, #2
 8002212:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	f003 0320 	and.w	r3, r3, #32
 800221a:	2b00      	cmp	r3, #0
 800221c:	d008      	beq.n	8002230 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	015a      	lsls	r2, r3, #5
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	4413      	add	r3, r2
 8002226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800222a:	461a      	mov	r2, r3
 800222c:	2320      	movs	r3, #32
 800222e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d009      	beq.n	800224e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	015a      	lsls	r2, r3, #5
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	4413      	add	r3, r2
 8002242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002246:	461a      	mov	r2, r3
 8002248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800224c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	3301      	adds	r3, #1
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002256:	085b      	lsrs	r3, r3, #1
 8002258:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800225a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225c:	2b00      	cmp	r3, #0
 800225e:	f47f af62 	bne.w	8002126 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f008 fd8e 	bl	800ad88 <USB_ReadInterrupts>
 800226c:	4603      	mov	r3, r0
 800226e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002272:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002276:	f040 80a4 	bne.w	80023c2 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f008 fdaf 	bl	800ade2 <USB_ReadDevAllInEpInterrupt>
 8002284:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800228a:	e096      	b.n	80023ba <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800228c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 808b 	beq.w	80023ae <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	4611      	mov	r1, r2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f008 fdd5 	bl	800ae52 <USB_ReadDevInEPInterrupt>
 80022a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d020      	beq.n	80022f6 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	2201      	movs	r2, #1
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69f9      	ldr	r1, [r7, #28]
 80022d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022d4:	4013      	ands	r3, r2
 80022d6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	015a      	lsls	r2, r3, #5
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022e4:	461a      	mov	r2, r3
 80022e6:	2301      	movs	r3, #1
 80022e8:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	4619      	mov	r1, r3
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f00d fed6 	bl	80100a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	015a      	lsls	r2, r3, #5
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	4413      	add	r3, r2
 8002308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800230c:	461a      	mov	r2, r3
 800230e:	2308      	movs	r3, #8
 8002310:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	f003 0310 	and.w	r3, r3, #16
 8002318:	2b00      	cmp	r3, #0
 800231a:	d008      	beq.n	800232e <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	4413      	add	r3, r2
 8002324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002328:	461a      	mov	r2, r3
 800232a:	2310      	movs	r3, #16
 800232c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	4413      	add	r3, r2
 8002340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002344:	461a      	mov	r2, r3
 8002346:	2340      	movs	r3, #64	; 0x40
 8002348:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d023      	beq.n	800239c <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002354:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002356:	6a38      	ldr	r0, [r7, #32]
 8002358:	f007 fd9c 	bl	8009e94 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800235c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235e:	4613      	mov	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4413      	add	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	3338      	adds	r3, #56	; 0x38
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	4413      	add	r3, r2
 800236c:	3304      	adds	r3, #4
 800236e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	78db      	ldrb	r3, [r3, #3]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d108      	bne.n	800238a <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	2200      	movs	r2, #0
 800237c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	b2db      	uxtb	r3, r3
 8002382:	4619      	mov	r1, r3
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f00d ff33 	bl	80101f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	015a      	lsls	r2, r3, #5
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	4413      	add	r3, r2
 8002392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002396:	461a      	mov	r2, r3
 8002398:	2302      	movs	r3, #2
 800239a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80023a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 fcea 	bl	8002d82 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	3301      	adds	r3, #1
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b6:	085b      	lsrs	r3, r3, #1
 80023b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f47f af65 	bne.w	800228c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f008 fcde 	bl	800ad88 <USB_ReadInterrupts>
 80023cc:	4603      	mov	r3, r0
 80023ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023d6:	d122      	bne.n	800241e <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	69fa      	ldr	r2, [r7, #28]
 80023e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023e6:	f023 0301 	bic.w	r3, r3, #1
 80023ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d108      	bne.n	8002408 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80023fe:	2100      	movs	r1, #0
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f00e f965 	bl	80106d0 <HAL_PCDEx_LPM_Callback>
 8002406:	e002      	b.n	800240e <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f00d feb7 	bl	801017c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695a      	ldr	r2, [r3, #20]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800241c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f008 fcb0 	bl	800ad88 <USB_ReadInterrupts>
 8002428:	4603      	mov	r3, r0
 800242a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800242e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002432:	d112      	bne.n	800245a <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	d102      	bne.n	800244a <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f00d fe73 	bl	8010130 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002458:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f008 fc92 	bl	800ad88 <USB_ReadInterrupts>
 8002464:	4603      	mov	r3, r0
 8002466:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800246a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800246e:	d121      	bne.n	80024b4 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695a      	ldr	r2, [r3, #20]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800247e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002486:	2b00      	cmp	r3, #0
 8002488:	d111      	bne.n	80024ae <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002498:	089b      	lsrs	r3, r3, #2
 800249a:	f003 020f 	and.w	r2, r3, #15
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80024a4:	2101      	movs	r1, #1
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f00e f912 	bl	80106d0 <HAL_PCDEx_LPM_Callback>
 80024ac:	e002      	b.n	80024b4 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f00d fe3e 	bl	8010130 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f008 fc65 	bl	800ad88 <USB_ReadInterrupts>
 80024be:	4603      	mov	r3, r0
 80024c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024c8:	f040 80b5 	bne.w	8002636 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	69fa      	ldr	r2, [r7, #28]
 80024d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024da:	f023 0301 	bic.w	r3, r3, #1
 80024de:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2110      	movs	r1, #16
 80024e6:	4618      	mov	r0, r3
 80024e8:	f007 fcd4 	bl	8009e94 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ec:	2300      	movs	r3, #0
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024f0:	e046      	b.n	8002580 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024fe:	461a      	mov	r2, r3
 8002500:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002504:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	4413      	add	r3, r2
 800250e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002516:	0151      	lsls	r1, r2, #5
 8002518:	69fa      	ldr	r2, [r7, #28]
 800251a:	440a      	add	r2, r1
 800251c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002520:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002524:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002528:	015a      	lsls	r2, r3, #5
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	4413      	add	r3, r2
 800252e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002532:	461a      	mov	r2, r3
 8002534:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002538:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800253a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253c:	015a      	lsls	r2, r3, #5
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	4413      	add	r3, r2
 8002542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800254a:	0151      	lsls	r1, r2, #5
 800254c:	69fa      	ldr	r2, [r7, #28]
 800254e:	440a      	add	r2, r1
 8002550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002554:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002558:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800255a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	4413      	add	r3, r2
 8002562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800256a:	0151      	lsls	r1, r2, #5
 800256c:	69fa      	ldr	r2, [r7, #28]
 800256e:	440a      	add	r2, r1
 8002570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002574:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002578:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800257a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257c:	3301      	adds	r3, #1
 800257e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002586:	429a      	cmp	r2, r3
 8002588:	d3b3      	bcc.n	80024f2 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	69fa      	ldr	r2, [r7, #28]
 8002594:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002598:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800259c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d016      	beq.n	80025d4 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025b0:	69fa      	ldr	r2, [r7, #28]
 80025b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025b6:	f043 030b 	orr.w	r3, r3, #11
 80025ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025cc:	f043 030b 	orr.w	r3, r3, #11
 80025d0:	6453      	str	r3, [r2, #68]	; 0x44
 80025d2:	e015      	b.n	8002600 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025e6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80025ea:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	69fa      	ldr	r2, [r7, #28]
 80025f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025fa:	f043 030b 	orr.w	r3, r3, #11
 80025fe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	69fa      	ldr	r2, [r7, #28]
 800260a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800260e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002612:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800261e:	4619      	mov	r1, r3
 8002620:	4610      	mov	r0, r2
 8002622:	f008 fc75 	bl	800af10 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695a      	ldr	r2, [r3, #20]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002634:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f008 fba4 	bl	800ad88 <USB_ReadInterrupts>
 8002640:	4603      	mov	r3, r0
 8002642:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800264a:	d124      	bne.n	8002696 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f008 fc3a 	bl	800aeca <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f007 fc97 	bl	8009f8e <USB_GetDevSpeed>
 8002660:	4603      	mov	r3, r0
 8002662:	461a      	mov	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681c      	ldr	r4, [r3, #0]
 800266c:	f001 fbc4 	bl	8003df8 <HAL_RCC_GetHCLKFreq>
 8002670:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002676:	b2db      	uxtb	r3, r3
 8002678:	461a      	mov	r2, r3
 800267a:	4620      	mov	r0, r4
 800267c:	f007 f9b4 	bl	80099e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f00d fd36 	bl	80100f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695a      	ldr	r2, [r3, #20]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002694:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f008 fb74 	bl	800ad88 <USB_ReadInterrupts>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d10a      	bne.n	80026c0 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f00d fd13 	bl	80100d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f002 0208 	and.w	r2, r2, #8
 80026be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f008 fb5f 	bl	800ad88 <USB_ReadInterrupts>
 80026ca:	4603      	mov	r3, r0
 80026cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d0:	2b80      	cmp	r3, #128	; 0x80
 80026d2:	d122      	bne.n	800271a <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026e0:	2301      	movs	r3, #1
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
 80026e4:	e014      	b.n	8002710 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d105      	bne.n	800270a <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	b2db      	uxtb	r3, r3
 8002702:	4619      	mov	r1, r3
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 fb0b 	bl	8002d20 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	3301      	adds	r3, #1
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002716:	429a      	cmp	r2, r3
 8002718:	d3e5      	bcc.n	80026e6 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f008 fb32 	bl	800ad88 <USB_ReadInterrupts>
 8002724:	4603      	mov	r3, r0
 8002726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800272a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800272e:	d13b      	bne.n	80027a8 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002730:	2301      	movs	r3, #1
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
 8002734:	e02b      	b.n	800278e <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	4413      	add	r3, r2
 800273e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274a:	4613      	mov	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4413      	add	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	440b      	add	r3, r1
 8002754:	3340      	adds	r3, #64	; 0x40
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d115      	bne.n	8002788 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800275c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800275e:	2b00      	cmp	r3, #0
 8002760:	da12      	bge.n	8002788 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002766:	4613      	mov	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	333f      	adds	r3, #63	; 0x3f
 8002772:	2201      	movs	r2, #1
 8002774:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800277e:	b2db      	uxtb	r3, r3
 8002780:	4619      	mov	r1, r3
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 facc 	bl	8002d20 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	3301      	adds	r3, #1
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002794:	429a      	cmp	r2, r3
 8002796:	d3ce      	bcc.n	8002736 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80027a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f008 faeb 	bl	800ad88 <USB_ReadInterrupts>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027bc:	d155      	bne.n	800286a <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027be:	2301      	movs	r3, #1
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
 80027c2:	e045      	b.n	8002850 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d8:	4613      	mov	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d12e      	bne.n	800284a <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027ec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	da2b      	bge.n	800284a <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80027fe:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002802:	429a      	cmp	r2, r3
 8002804:	d121      	bne.n	800284a <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280a:	4613      	mov	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4413      	add	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002818:	2201      	movs	r2, #1
 800281a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10a      	bne.n	800284a <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	69fa      	ldr	r2, [r7, #28]
 800283e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002842:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002846:	6053      	str	r3, [r2, #4]
            break;
 8002848:	e007      	b.n	800285a <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	3301      	adds	r3, #1
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002856:	429a      	cmp	r2, r3
 8002858:	d3b4      	bcc.n	80027c4 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	695a      	ldr	r2, [r3, #20]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002868:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f008 fa8a 	bl	800ad88 <USB_ReadInterrupts>
 8002874:	4603      	mov	r3, r0
 8002876:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800287a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800287e:	d10a      	bne.n	8002896 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f00d fcc7 	bl	8010214 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695a      	ldr	r2, [r3, #20]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002894:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f008 fa74 	bl	800ad88 <USB_ReadInterrupts>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d115      	bne.n	80028d6 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f00d fcb7 	bl	8010230 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6859      	ldr	r1, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	e000      	b.n	80028d6 <HAL_PCD_IRQHandler+0x920>
      return;
 80028d4:	bf00      	nop
    }
  }
}
 80028d6:	3734      	adds	r7, #52	; 0x34
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd90      	pop	{r4, r7, pc}

080028dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_PCD_SetAddress+0x1a>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e013      	b.n	800291e <HAL_PCD_SetAddress+0x42>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	78fa      	ldrb	r2, [r7, #3]
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f008 f9d2 	bl	800acb8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	4608      	mov	r0, r1
 8002930:	4611      	mov	r1, r2
 8002932:	461a      	mov	r2, r3
 8002934:	4603      	mov	r3, r0
 8002936:	70fb      	strb	r3, [r7, #3]
 8002938:	460b      	mov	r3, r1
 800293a:	803b      	strh	r3, [r7, #0]
 800293c:	4613      	mov	r3, r2
 800293e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002944:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002948:	2b00      	cmp	r3, #0
 800294a:	da0f      	bge.n	800296c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800294c:	78fb      	ldrb	r3, [r7, #3]
 800294e:	f003 020f 	and.w	r2, r3, #15
 8002952:	4613      	mov	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	3338      	adds	r3, #56	; 0x38
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	4413      	add	r3, r2
 8002960:	3304      	adds	r3, #4
 8002962:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	705a      	strb	r2, [r3, #1]
 800296a:	e00f      	b.n	800298c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	f003 020f 	and.w	r2, r3, #15
 8002972:	4613      	mov	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	4413      	add	r3, r2
 8002982:	3304      	adds	r3, #4
 8002984:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800298c:	78fb      	ldrb	r3, [r7, #3]
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	b2da      	uxtb	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002998:	883a      	ldrh	r2, [r7, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	78ba      	ldrb	r2, [r7, #2]
 80029a2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	785b      	ldrb	r3, [r3, #1]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d004      	beq.n	80029b6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029b6:	78bb      	ldrb	r3, [r7, #2]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d102      	bne.n	80029c2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_PCD_EP_Open+0xaa>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e00e      	b.n	80029ee <HAL_PCD_EP_Open+0xc8>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68f9      	ldr	r1, [r7, #12]
 80029de:	4618      	mov	r0, r3
 80029e0:	f007 faf4 	bl	8009fcc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80029ec:	7afb      	ldrb	r3, [r7, #11]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	460b      	mov	r3, r1
 8002a00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	da0f      	bge.n	8002a2a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a0a:	78fb      	ldrb	r3, [r7, #3]
 8002a0c:	f003 020f 	and.w	r2, r3, #15
 8002a10:	4613      	mov	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	4413      	add	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	3338      	adds	r3, #56	; 0x38
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3304      	adds	r3, #4
 8002a20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2201      	movs	r2, #1
 8002a26:	705a      	strb	r2, [r3, #1]
 8002a28:	e00f      	b.n	8002a4a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a2a:	78fb      	ldrb	r3, [r7, #3]
 8002a2c:	f003 020f 	and.w	r2, r3, #15
 8002a30:	4613      	mov	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4413      	add	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	4413      	add	r3, r2
 8002a40:	3304      	adds	r3, #4
 8002a42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	f003 030f 	and.w	r3, r3, #15
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_PCD_EP_Close+0x6e>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e00e      	b.n	8002a82 <HAL_PCD_EP_Close+0x8c>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68f9      	ldr	r1, [r7, #12]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f007 fb32 	bl	800a0dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b086      	sub	sp, #24
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	607a      	str	r2, [r7, #4]
 8002a94:	603b      	str	r3, [r7, #0]
 8002a96:	460b      	mov	r3, r1
 8002a98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a9a:	7afb      	ldrb	r3, [r7, #11]
 8002a9c:	f003 020f 	and.w	r2, r3, #15
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4413      	add	r3, r2
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002acc:	7afb      	ldrb	r3, [r7, #11]
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ad8:	7afb      	ldrb	r3, [r7, #11]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d106      	bne.n	8002af0 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6979      	ldr	r1, [r7, #20]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f007 fdb3 	bl	800a654 <USB_EP0StartXfer>
 8002aee:	e005      	b.n	8002afc <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6979      	ldr	r1, [r7, #20]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f007 fbcc 	bl	800a294 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b12:	78fb      	ldrb	r3, [r7, #3]
 8002b14:	f003 020f 	and.w	r2, r3, #15
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002b28:	681b      	ldr	r3, [r3, #0]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b086      	sub	sp, #24
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	60f8      	str	r0, [r7, #12]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	603b      	str	r3, [r7, #0]
 8002b42:	460b      	mov	r3, r1
 8002b44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b46:	7afb      	ldrb	r3, [r7, #11]
 8002b48:	f003 020f 	and.w	r2, r3, #15
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	4413      	add	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	3338      	adds	r3, #56	; 0x38
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	4413      	add	r3, r2
 8002b5a:	3304      	adds	r3, #4
 8002b5c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2201      	movs	r2, #1
 8002b74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b76:	7afb      	ldrb	r3, [r7, #11]
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b82:	7afb      	ldrb	r3, [r7, #11]
 8002b84:	f003 030f 	and.w	r3, r3, #15
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d106      	bne.n	8002b9a <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6979      	ldr	r1, [r7, #20]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f007 fd5e 	bl	800a654 <USB_EP0StartXfer>
 8002b98:	e005      	b.n	8002ba6 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6979      	ldr	r1, [r7, #20]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f007 fb77 	bl	800a294 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	f003 020f 	and.w	r2, r3, #15
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d901      	bls.n	8002bce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e04e      	b.n	8002c6c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	da0f      	bge.n	8002bf6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bd6:	78fb      	ldrb	r3, [r7, #3]
 8002bd8:	f003 020f 	and.w	r2, r3, #15
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	3338      	adds	r3, #56	; 0x38
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	4413      	add	r3, r2
 8002bea:	3304      	adds	r3, #4
 8002bec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	705a      	strb	r2, [r3, #1]
 8002bf4:	e00d      	b.n	8002c12 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bf6:	78fa      	ldrb	r2, [r7, #3]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	4413      	add	r3, r2
 8002c08:	3304      	adds	r3, #4
 8002c0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2201      	movs	r2, #1
 8002c16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c18:	78fb      	ldrb	r3, [r7, #3]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d101      	bne.n	8002c32 <HAL_PCD_EP_SetStall+0x82>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e01c      	b.n	8002c6c <HAL_PCD_EP_SetStall+0xbc>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68f9      	ldr	r1, [r7, #12]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f007 ff65 	bl	800ab10 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c46:	78fb      	ldrb	r3, [r7, #3]
 8002c48:	f003 030f 	and.w	r3, r3, #15
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d108      	bne.n	8002c62 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	f008 f957 	bl	800af10 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	f003 020f 	and.w	r2, r3, #15
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d901      	bls.n	8002c92 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e042      	b.n	8002d18 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	da0f      	bge.n	8002cba <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c9a:	78fb      	ldrb	r3, [r7, #3]
 8002c9c:	f003 020f 	and.w	r2, r3, #15
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	3338      	adds	r3, #56	; 0x38
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	4413      	add	r3, r2
 8002cae:	3304      	adds	r3, #4
 8002cb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	705a      	strb	r2, [r3, #1]
 8002cb8:	e00f      	b.n	8002cda <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cba:	78fb      	ldrb	r3, [r7, #3]
 8002cbc:	f003 020f 	and.w	r2, r3, #15
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	4413      	add	r3, r2
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ce0:	78fb      	ldrb	r3, [r7, #3]
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d101      	bne.n	8002cfa <HAL_PCD_EP_ClrStall+0x86>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e00e      	b.n	8002d18 <HAL_PCD_EP_ClrStall+0xa4>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68f9      	ldr	r1, [r7, #12]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f007 ff6f 	bl	800abec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002d2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	da0c      	bge.n	8002d4e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	f003 020f 	and.w	r2, r3, #15
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	3338      	adds	r3, #56	; 0x38
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	4413      	add	r3, r2
 8002d48:	3304      	adds	r3, #4
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	e00c      	b.n	8002d68 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d4e:	78fb      	ldrb	r3, [r7, #3]
 8002d50:	f003 020f 	and.w	r2, r3, #15
 8002d54:	4613      	mov	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4413      	add	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	4413      	add	r3, r2
 8002d64:	3304      	adds	r3, #4
 8002d66:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68f9      	ldr	r1, [r7, #12]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f007 fd92 	bl	800a898 <USB_EPStopXfer>
 8002d74:	4603      	mov	r3, r0
 8002d76:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d78:	7afb      	ldrb	r3, [r7, #11]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b088      	sub	sp, #32
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	3338      	adds	r3, #56	; 0x38
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	4413      	add	r3, r2
 8002da6:	3304      	adds	r3, #4
 8002da8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a1a      	ldr	r2, [r3, #32]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d901      	bls.n	8002dba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e067      	b.n	8002e8a <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	699a      	ldr	r2, [r3, #24]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	69fa      	ldr	r2, [r7, #28]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d902      	bls.n	8002dd6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	3303      	adds	r3, #3
 8002dda:	089b      	lsrs	r3, r3, #2
 8002ddc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dde:	e026      	b.n	8002e2e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	699a      	ldr	r2, [r3, #24]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d902      	bls.n	8002dfc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	3303      	adds	r3, #3
 8002e00:	089b      	lsrs	r3, r3, #2
 8002e02:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6919      	ldr	r1, [r3, #16]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	6978      	ldr	r0, [r7, #20]
 8002e12:	f007 fdeb 	bl	800a9ec <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	691a      	ldr	r2, [r3, #16]
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	441a      	add	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a1a      	ldr	r2, [r3, #32]
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	441a      	add	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	015a      	lsls	r2, r3, #5
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d809      	bhi.n	8002e58 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a1a      	ldr	r2, [r3, #32]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d203      	bcs.n	8002e58 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1c3      	bne.n	8002de0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	699a      	ldr	r2, [r3, #24]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d811      	bhi.n	8002e88 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	6939      	ldr	r1, [r7, #16]
 8002e80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e84:	4013      	ands	r3, r2
 8002e86:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3720      	adds	r7, #32
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	333c      	adds	r3, #60	; 0x3c
 8002eac:	3304      	adds	r3, #4
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4a19      	ldr	r2, [pc, #100]	; (8002f2c <PCD_EP_OutXfrComplete_int+0x98>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d124      	bne.n	8002f14 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00a      	beq.n	8002eea <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ee6:	6093      	str	r3, [r2, #8]
 8002ee8:	e01a      	b.n	8002f20 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	f003 0320 	and.w	r3, r3, #32
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d008      	beq.n	8002f06 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	015a      	lsls	r2, r3, #5
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f00:	461a      	mov	r2, r3
 8002f02:	2320      	movs	r3, #32
 8002f04:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f00d f8ad 	bl	801006c <HAL_PCD_DataOutStageCallback>
 8002f12:	e005      	b.n	8002f20 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	4619      	mov	r1, r3
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f00d f8a6 	bl	801006c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	4f54310a 	.word	0x4f54310a

08002f30 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	333c      	adds	r3, #60	; 0x3c
 8002f48:	3304      	adds	r3, #4
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	015a      	lsls	r2, r3, #5
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4a0c      	ldr	r2, [pc, #48]	; (8002f94 <PCD_EP_OutSetupPacket_int+0x64>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d90e      	bls.n	8002f84 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d009      	beq.n	8002f84 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f00d f85f 	bl	8010048 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	4f54300a 	.word	0x4f54300a

08002f98 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	70fb      	strb	r3, [r7, #3]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d107      	bne.n	8002fc6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002fb6:	883b      	ldrh	r3, [r7, #0]
 8002fb8:	0419      	lsls	r1, r3, #16
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	629a      	str	r2, [r3, #40]	; 0x28
 8002fc4:	e028      	b.n	8003018 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fcc:	0c1b      	lsrs	r3, r3, #16
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	73fb      	strb	r3, [r7, #15]
 8002fd8:	e00d      	b.n	8002ff6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
 8002fe0:	3340      	adds	r3, #64	; 0x40
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	0c1b      	lsrs	r3, r3, #16
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	4413      	add	r3, r2
 8002fee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	73fb      	strb	r3, [r7, #15]
 8002ff6:	7bfa      	ldrb	r2, [r7, #15]
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d3ec      	bcc.n	8002fda <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003000:	883b      	ldrh	r3, [r7, #0]
 8003002:	0418      	lsls	r0, r3, #16
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6819      	ldr	r1, [r3, #0]
 8003008:	78fb      	ldrb	r3, [r7, #3]
 800300a:	3b01      	subs	r3, #1
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	4302      	orrs	r2, r0
 8003010:	3340      	adds	r3, #64	; 0x40
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
 800302e:	460b      	mov	r3, r1
 8003030:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	887a      	ldrh	r2, [r7, #2]
 8003038:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800307a:	f043 0303 	orr.w	r3, r3, #3
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003094:	4b0d      	ldr	r3, [pc, #52]	; (80030cc <HAL_PWREx_GetVoltageRange+0x3c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800309c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a0:	d102      	bne.n	80030a8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80030a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030a6:	e00b      	b.n	80030c0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80030a8:	4b08      	ldr	r3, [pc, #32]	; (80030cc <HAL_PWREx_GetVoltageRange+0x3c>)
 80030aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b6:	d102      	bne.n	80030be <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80030b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030bc:	e000      	b.n	80030c0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80030be:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40007000 	.word	0x40007000

080030d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d141      	bne.n	8003162 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80030de:	4b4b      	ldr	r3, [pc, #300]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ea:	d131      	bne.n	8003150 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030ec:	4b47      	ldr	r3, [pc, #284]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030f2:	4a46      	ldr	r2, [pc, #280]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030fc:	4b43      	ldr	r3, [pc, #268]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003104:	4a41      	ldr	r2, [pc, #260]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003106:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800310a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800310c:	4b40      	ldr	r3, [pc, #256]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2232      	movs	r2, #50	; 0x32
 8003112:	fb02 f303 	mul.w	r3, r2, r3
 8003116:	4a3f      	ldr	r2, [pc, #252]	; (8003214 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	0c9b      	lsrs	r3, r3, #18
 800311e:	3301      	adds	r3, #1
 8003120:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003122:	e002      	b.n	800312a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	3b01      	subs	r3, #1
 8003128:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800312a:	4b38      	ldr	r3, [pc, #224]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003136:	d102      	bne.n	800313e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f2      	bne.n	8003124 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800313e:	4b33      	ldr	r3, [pc, #204]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800314a:	d158      	bne.n	80031fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e057      	b.n	8003200 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003150:	4b2e      	ldr	r3, [pc, #184]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003156:	4a2d      	ldr	r2, [pc, #180]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800315c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003160:	e04d      	b.n	80031fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003168:	d141      	bne.n	80031ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800316a:	4b28      	ldr	r3, [pc, #160]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003176:	d131      	bne.n	80031dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003178:	4b24      	ldr	r3, [pc, #144]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800317a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800317e:	4a23      	ldr	r2, [pc, #140]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003184:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003188:	4b20      	ldr	r3, [pc, #128]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003190:	4a1e      	ldr	r2, [pc, #120]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003196:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003198:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2232      	movs	r2, #50	; 0x32
 800319e:	fb02 f303 	mul.w	r3, r2, r3
 80031a2:	4a1c      	ldr	r2, [pc, #112]	; (8003214 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031a4:	fba2 2303 	umull	r2, r3, r2, r3
 80031a8:	0c9b      	lsrs	r3, r3, #18
 80031aa:	3301      	adds	r3, #1
 80031ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031ae:	e002      	b.n	80031b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031b6:	4b15      	ldr	r3, [pc, #84]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c2:	d102      	bne.n	80031ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f2      	bne.n	80031b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031ca:	4b10      	ldr	r3, [pc, #64]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d6:	d112      	bne.n	80031fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e011      	b.n	8003200 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031dc:	4b0b      	ldr	r3, [pc, #44]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031e2:	4a0a      	ldr	r2, [pc, #40]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80031ec:	e007      	b.n	80031fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80031ee:	4b07      	ldr	r3, [pc, #28]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031f6:	4a05      	ldr	r2, [pc, #20]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031fc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	40007000 	.word	0x40007000
 8003210:	20000000 	.word	0x20000000
 8003214:	431bde83 	.word	0x431bde83

08003218 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800321c:	4b05      	ldr	r3, [pc, #20]	; (8003234 <HAL_PWREx_EnableVddUSB+0x1c>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	4a04      	ldr	r2, [pc, #16]	; (8003234 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003222:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003226:	6053      	str	r3, [r2, #4]
}
 8003228:	bf00      	nop
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40007000 	.word	0x40007000

08003238 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d102      	bne.n	800324c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	f000 bc08 	b.w	8003a5c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800324c:	4b96      	ldr	r3, [pc, #600]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 030c 	and.w	r3, r3, #12
 8003254:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003256:	4b94      	ldr	r3, [pc, #592]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80e4 	beq.w	8003436 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d007      	beq.n	8003284 <HAL_RCC_OscConfig+0x4c>
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	2b0c      	cmp	r3, #12
 8003278:	f040 808b 	bne.w	8003392 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2b01      	cmp	r3, #1
 8003280:	f040 8087 	bne.w	8003392 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003284:	4b88      	ldr	r3, [pc, #544]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <HAL_RCC_OscConfig+0x64>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e3df      	b.n	8003a5c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1a      	ldr	r2, [r3, #32]
 80032a0:	4b81      	ldr	r3, [pc, #516]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d004      	beq.n	80032b6 <HAL_RCC_OscConfig+0x7e>
 80032ac:	4b7e      	ldr	r3, [pc, #504]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032b4:	e005      	b.n	80032c2 <HAL_RCC_OscConfig+0x8a>
 80032b6:	4b7c      	ldr	r3, [pc, #496]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80032b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d223      	bcs.n	800330e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fdf8 	bl	8003ec0 <RCC_SetFlashLatencyFromMSIRange>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e3c0      	b.n	8003a5c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032da:	4b73      	ldr	r3, [pc, #460]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a72      	ldr	r2, [pc, #456]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80032e0:	f043 0308 	orr.w	r3, r3, #8
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	4b70      	ldr	r3, [pc, #448]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	496d      	ldr	r1, [pc, #436]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032f8:	4b6b      	ldr	r3, [pc, #428]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	021b      	lsls	r3, r3, #8
 8003306:	4968      	ldr	r1, [pc, #416]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003308:	4313      	orrs	r3, r2
 800330a:	604b      	str	r3, [r1, #4]
 800330c:	e025      	b.n	800335a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800330e:	4b66      	ldr	r3, [pc, #408]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a65      	ldr	r2, [pc, #404]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003314:	f043 0308 	orr.w	r3, r3, #8
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	4b63      	ldr	r3, [pc, #396]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	4960      	ldr	r1, [pc, #384]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003328:	4313      	orrs	r3, r2
 800332a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800332c:	4b5e      	ldr	r3, [pc, #376]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	021b      	lsls	r3, r3, #8
 800333a:	495b      	ldr	r1, [pc, #364]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 800333c:	4313      	orrs	r3, r2
 800333e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d109      	bne.n	800335a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fdb8 	bl	8003ec0 <RCC_SetFlashLatencyFromMSIRange>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e380      	b.n	8003a5c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800335a:	f000 fcc1 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 800335e:	4602      	mov	r2, r0
 8003360:	4b51      	ldr	r3, [pc, #324]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	091b      	lsrs	r3, r3, #4
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	4950      	ldr	r1, [pc, #320]	; (80034ac <HAL_RCC_OscConfig+0x274>)
 800336c:	5ccb      	ldrb	r3, [r1, r3]
 800336e:	f003 031f 	and.w	r3, r3, #31
 8003372:	fa22 f303 	lsr.w	r3, r2, r3
 8003376:	4a4e      	ldr	r2, [pc, #312]	; (80034b0 <HAL_RCC_OscConfig+0x278>)
 8003378:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800337a:	4b4e      	ldr	r3, [pc, #312]	; (80034b4 <HAL_RCC_OscConfig+0x27c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7fe f832 	bl	80013e8 <HAL_InitTick>
 8003384:	4603      	mov	r3, r0
 8003386:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d052      	beq.n	8003434 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800338e:	7bfb      	ldrb	r3, [r7, #15]
 8003390:	e364      	b.n	8003a5c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d032      	beq.n	8003400 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800339a:	4b43      	ldr	r3, [pc, #268]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a42      	ldr	r2, [pc, #264]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033a6:	f7fe f86f 	bl	8001488 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033ae:	f7fe f86b 	bl	8001488 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e34d      	b.n	8003a5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033c0:	4b39      	ldr	r3, [pc, #228]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0f0      	beq.n	80033ae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033cc:	4b36      	ldr	r3, [pc, #216]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a35      	ldr	r2, [pc, #212]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80033d2:	f043 0308 	orr.w	r3, r3, #8
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	4b33      	ldr	r3, [pc, #204]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	4930      	ldr	r1, [pc, #192]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ea:	4b2f      	ldr	r3, [pc, #188]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	021b      	lsls	r3, r3, #8
 80033f8:	492b      	ldr	r1, [pc, #172]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	604b      	str	r3, [r1, #4]
 80033fe:	e01a      	b.n	8003436 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003400:	4b29      	ldr	r3, [pc, #164]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a28      	ldr	r2, [pc, #160]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003406:	f023 0301 	bic.w	r3, r3, #1
 800340a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800340c:	f7fe f83c 	bl	8001488 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003414:	f7fe f838 	bl	8001488 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e31a      	b.n	8003a5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003426:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <HAL_RCC_OscConfig+0x1dc>
 8003432:	e000      	b.n	8003436 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003434:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d073      	beq.n	800352a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	2b08      	cmp	r3, #8
 8003446:	d005      	beq.n	8003454 <HAL_RCC_OscConfig+0x21c>
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	2b0c      	cmp	r3, #12
 800344c:	d10e      	bne.n	800346c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2b03      	cmp	r3, #3
 8003452:	d10b      	bne.n	800346c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003454:	4b14      	ldr	r3, [pc, #80]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d063      	beq.n	8003528 <HAL_RCC_OscConfig+0x2f0>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d15f      	bne.n	8003528 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e2f7      	b.n	8003a5c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003474:	d106      	bne.n	8003484 <HAL_RCC_OscConfig+0x24c>
 8003476:	4b0c      	ldr	r3, [pc, #48]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a0b      	ldr	r2, [pc, #44]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 800347c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	e025      	b.n	80034d0 <HAL_RCC_OscConfig+0x298>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800348c:	d114      	bne.n	80034b8 <HAL_RCC_OscConfig+0x280>
 800348e:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a05      	ldr	r2, [pc, #20]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	4b03      	ldr	r3, [pc, #12]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a02      	ldr	r2, [pc, #8]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80034a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	e013      	b.n	80034d0 <HAL_RCC_OscConfig+0x298>
 80034a8:	40021000 	.word	0x40021000
 80034ac:	08011894 	.word	0x08011894
 80034b0:	20000000 	.word	0x20000000
 80034b4:	20000004 	.word	0x20000004
 80034b8:	4ba0      	ldr	r3, [pc, #640]	; (800373c <HAL_RCC_OscConfig+0x504>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a9f      	ldr	r2, [pc, #636]	; (800373c <HAL_RCC_OscConfig+0x504>)
 80034be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	4b9d      	ldr	r3, [pc, #628]	; (800373c <HAL_RCC_OscConfig+0x504>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a9c      	ldr	r2, [pc, #624]	; (800373c <HAL_RCC_OscConfig+0x504>)
 80034ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d013      	beq.n	8003500 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d8:	f7fd ffd6 	bl	8001488 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034e0:	f7fd ffd2 	bl	8001488 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b64      	cmp	r3, #100	; 0x64
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e2b4      	b.n	8003a5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034f2:	4b92      	ldr	r3, [pc, #584]	; (800373c <HAL_RCC_OscConfig+0x504>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f0      	beq.n	80034e0 <HAL_RCC_OscConfig+0x2a8>
 80034fe:	e014      	b.n	800352a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7fd ffc2 	bl	8001488 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003508:	f7fd ffbe 	bl	8001488 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b64      	cmp	r3, #100	; 0x64
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e2a0      	b.n	8003a5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800351a:	4b88      	ldr	r3, [pc, #544]	; (800373c <HAL_RCC_OscConfig+0x504>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x2d0>
 8003526:	e000      	b.n	800352a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d060      	beq.n	80035f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	2b04      	cmp	r3, #4
 800353a:	d005      	beq.n	8003548 <HAL_RCC_OscConfig+0x310>
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	2b0c      	cmp	r3, #12
 8003540:	d119      	bne.n	8003576 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2b02      	cmp	r3, #2
 8003546:	d116      	bne.n	8003576 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003548:	4b7c      	ldr	r3, [pc, #496]	; (800373c <HAL_RCC_OscConfig+0x504>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003550:	2b00      	cmp	r3, #0
 8003552:	d005      	beq.n	8003560 <HAL_RCC_OscConfig+0x328>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e27d      	b.n	8003a5c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003560:	4b76      	ldr	r3, [pc, #472]	; (800373c <HAL_RCC_OscConfig+0x504>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	061b      	lsls	r3, r3, #24
 800356e:	4973      	ldr	r1, [pc, #460]	; (800373c <HAL_RCC_OscConfig+0x504>)
 8003570:	4313      	orrs	r3, r2
 8003572:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003574:	e040      	b.n	80035f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d023      	beq.n	80035c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800357e:	4b6f      	ldr	r3, [pc, #444]	; (800373c <HAL_RCC_OscConfig+0x504>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a6e      	ldr	r2, [pc, #440]	; (800373c <HAL_RCC_OscConfig+0x504>)
 8003584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358a:	f7fd ff7d 	bl	8001488 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003592:	f7fd ff79 	bl	8001488 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e25b      	b.n	8003a5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035a4:	4b65      	ldr	r3, [pc, #404]	; (800373c <HAL_RCC_OscConfig+0x504>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0f0      	beq.n	8003592 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b0:	4b62      	ldr	r3, [pc, #392]	; (800373c <HAL_RCC_OscConfig+0x504>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	061b      	lsls	r3, r3, #24
 80035be:	495f      	ldr	r1, [pc, #380]	; (800373c <HAL_RCC_OscConfig+0x504>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	604b      	str	r3, [r1, #4]
 80035c4:	e018      	b.n	80035f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035c6:	4b5d      	ldr	r3, [pc, #372]	; (800373c <HAL_RCC_OscConfig+0x504>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a5c      	ldr	r2, [pc, #368]	; (800373c <HAL_RCC_OscConfig+0x504>)
 80035cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d2:	f7fd ff59 	bl	8001488 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035da:	f7fd ff55 	bl	8001488 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e237      	b.n	8003a5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035ec:	4b53      	ldr	r3, [pc, #332]	; (800373c <HAL_RCC_OscConfig+0x504>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1f0      	bne.n	80035da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b00      	cmp	r3, #0
 8003602:	d03c      	beq.n	800367e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01c      	beq.n	8003646 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800360c:	4b4b      	ldr	r3, [pc, #300]	; (800373c <HAL_RCC_OscConfig+0x504>)
 800360e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003612:	4a4a      	ldr	r2, [pc, #296]	; (800373c <HAL_RCC_OscConfig+0x504>)
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361c:	f7fd ff34 	bl	8001488 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003624:	f7fd ff30 	bl	8001488 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e212      	b.n	8003a5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003636:	4b41      	ldr	r3, [pc, #260]	; (800373c <HAL_RCC_OscConfig+0x504>)
 8003638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0ef      	beq.n	8003624 <HAL_RCC_OscConfig+0x3ec>
 8003644:	e01b      	b.n	800367e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003646:	4b3d      	ldr	r3, [pc, #244]	; (800373c <HAL_RCC_OscConfig+0x504>)
 8003648:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800364c:	4a3b      	ldr	r2, [pc, #236]	; (800373c <HAL_RCC_OscConfig+0x504>)
 800364e:	f023 0301 	bic.w	r3, r3, #1
 8003652:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003656:	f7fd ff17 	bl	8001488 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800365e:	f7fd ff13 	bl	8001488 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e1f5      	b.n	8003a5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003670:	4b32      	ldr	r3, [pc, #200]	; (800373c <HAL_RCC_OscConfig+0x504>)
 8003672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1ef      	bne.n	800365e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 80a6 	beq.w	80037d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800368c:	2300      	movs	r3, #0
 800368e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003690:	4b2a      	ldr	r3, [pc, #168]	; (800373c <HAL_RCC_OscConfig+0x504>)
 8003692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10d      	bne.n	80036b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800369c:	4b27      	ldr	r3, [pc, #156]	; (800373c <HAL_RCC_OscConfig+0x504>)
 800369e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a0:	4a26      	ldr	r2, [pc, #152]	; (800373c <HAL_RCC_OscConfig+0x504>)
 80036a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a6:	6593      	str	r3, [r2, #88]	; 0x58
 80036a8:	4b24      	ldr	r3, [pc, #144]	; (800373c <HAL_RCC_OscConfig+0x504>)
 80036aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036b4:	2301      	movs	r3, #1
 80036b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036b8:	4b21      	ldr	r3, [pc, #132]	; (8003740 <HAL_RCC_OscConfig+0x508>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d118      	bne.n	80036f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036c4:	4b1e      	ldr	r3, [pc, #120]	; (8003740 <HAL_RCC_OscConfig+0x508>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1d      	ldr	r2, [pc, #116]	; (8003740 <HAL_RCC_OscConfig+0x508>)
 80036ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036d0:	f7fd feda 	bl	8001488 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d8:	f7fd fed6 	bl	8001488 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e1b8      	b.n	8003a5c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036ea:	4b15      	ldr	r3, [pc, #84]	; (8003740 <HAL_RCC_OscConfig+0x508>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d108      	bne.n	8003710 <HAL_RCC_OscConfig+0x4d8>
 80036fe:	4b0f      	ldr	r3, [pc, #60]	; (800373c <HAL_RCC_OscConfig+0x504>)
 8003700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003704:	4a0d      	ldr	r2, [pc, #52]	; (800373c <HAL_RCC_OscConfig+0x504>)
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800370e:	e029      	b.n	8003764 <HAL_RCC_OscConfig+0x52c>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	2b05      	cmp	r3, #5
 8003716:	d115      	bne.n	8003744 <HAL_RCC_OscConfig+0x50c>
 8003718:	4b08      	ldr	r3, [pc, #32]	; (800373c <HAL_RCC_OscConfig+0x504>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371e:	4a07      	ldr	r2, [pc, #28]	; (800373c <HAL_RCC_OscConfig+0x504>)
 8003720:	f043 0304 	orr.w	r3, r3, #4
 8003724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003728:	4b04      	ldr	r3, [pc, #16]	; (800373c <HAL_RCC_OscConfig+0x504>)
 800372a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372e:	4a03      	ldr	r2, [pc, #12]	; (800373c <HAL_RCC_OscConfig+0x504>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003738:	e014      	b.n	8003764 <HAL_RCC_OscConfig+0x52c>
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000
 8003740:	40007000 	.word	0x40007000
 8003744:	4b9d      	ldr	r3, [pc, #628]	; (80039bc <HAL_RCC_OscConfig+0x784>)
 8003746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374a:	4a9c      	ldr	r2, [pc, #624]	; (80039bc <HAL_RCC_OscConfig+0x784>)
 800374c:	f023 0301 	bic.w	r3, r3, #1
 8003750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003754:	4b99      	ldr	r3, [pc, #612]	; (80039bc <HAL_RCC_OscConfig+0x784>)
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375a:	4a98      	ldr	r2, [pc, #608]	; (80039bc <HAL_RCC_OscConfig+0x784>)
 800375c:	f023 0304 	bic.w	r3, r3, #4
 8003760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d016      	beq.n	800379a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376c:	f7fd fe8c 	bl	8001488 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003772:	e00a      	b.n	800378a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003774:	f7fd fe88 	bl	8001488 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003782:	4293      	cmp	r3, r2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e168      	b.n	8003a5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800378a:	4b8c      	ldr	r3, [pc, #560]	; (80039bc <HAL_RCC_OscConfig+0x784>)
 800378c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0ed      	beq.n	8003774 <HAL_RCC_OscConfig+0x53c>
 8003798:	e015      	b.n	80037c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379a:	f7fd fe75 	bl	8001488 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037a0:	e00a      	b.n	80037b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a2:	f7fd fe71 	bl	8001488 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e151      	b.n	8003a5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037b8:	4b80      	ldr	r3, [pc, #512]	; (80039bc <HAL_RCC_OscConfig+0x784>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1ed      	bne.n	80037a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037c6:	7ffb      	ldrb	r3, [r7, #31]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d105      	bne.n	80037d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037cc:	4b7b      	ldr	r3, [pc, #492]	; (80039bc <HAL_RCC_OscConfig+0x784>)
 80037ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d0:	4a7a      	ldr	r2, [pc, #488]	; (80039bc <HAL_RCC_OscConfig+0x784>)
 80037d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0320 	and.w	r3, r3, #32
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d03c      	beq.n	800385e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d01c      	beq.n	8003826 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037ec:	4b73      	ldr	r3, [pc, #460]	; (80039bc <HAL_RCC_OscConfig+0x784>)
 80037ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037f2:	4a72      	ldr	r2, [pc, #456]	; (80039bc <HAL_RCC_OscConfig+0x784>)
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fc:	f7fd fe44 	bl	8001488 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003804:	f7fd fe40 	bl	8001488 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e122      	b.n	8003a5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003816:	4b69      	ldr	r3, [pc, #420]	; (80039bc <HAL_RCC_OscConfig+0x784>)
 8003818:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0ef      	beq.n	8003804 <HAL_RCC_OscConfig+0x5cc>
 8003824:	e01b      	b.n	800385e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003826:	4b65      	ldr	r3, [pc, #404]	; (80039bc <HAL_RCC_OscConfig+0x784>)
 8003828:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800382c:	4a63      	ldr	r2, [pc, #396]	; (80039bc <HAL_RCC_OscConfig+0x784>)
 800382e:	f023 0301 	bic.w	r3, r3, #1
 8003832:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003836:	f7fd fe27 	bl	8001488 <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800383e:	f7fd fe23 	bl	8001488 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e105      	b.n	8003a5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003850:	4b5a      	ldr	r3, [pc, #360]	; (80039bc <HAL_RCC_OscConfig+0x784>)
 8003852:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1ef      	bne.n	800383e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 80f9 	beq.w	8003a5a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386c:	2b02      	cmp	r3, #2
 800386e:	f040 80cf 	bne.w	8003a10 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003872:	4b52      	ldr	r3, [pc, #328]	; (80039bc <HAL_RCC_OscConfig+0x784>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f003 0203 	and.w	r2, r3, #3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	429a      	cmp	r2, r3
 8003884:	d12c      	bne.n	80038e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	3b01      	subs	r3, #1
 8003892:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003894:	429a      	cmp	r2, r3
 8003896:	d123      	bne.n	80038e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d11b      	bne.n	80038e0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d113      	bne.n	80038e0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c2:	085b      	lsrs	r3, r3, #1
 80038c4:	3b01      	subs	r3, #1
 80038c6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d109      	bne.n	80038e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	085b      	lsrs	r3, r3, #1
 80038d8:	3b01      	subs	r3, #1
 80038da:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038dc:	429a      	cmp	r2, r3
 80038de:	d071      	beq.n	80039c4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2b0c      	cmp	r3, #12
 80038e4:	d068      	beq.n	80039b8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038e6:	4b35      	ldr	r3, [pc, #212]	; (80039bc <HAL_RCC_OscConfig+0x784>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d105      	bne.n	80038fe <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80038f2:	4b32      	ldr	r3, [pc, #200]	; (80039bc <HAL_RCC_OscConfig+0x784>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e0ac      	b.n	8003a5c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003902:	4b2e      	ldr	r3, [pc, #184]	; (80039bc <HAL_RCC_OscConfig+0x784>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a2d      	ldr	r2, [pc, #180]	; (80039bc <HAL_RCC_OscConfig+0x784>)
 8003908:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800390c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800390e:	f7fd fdbb 	bl	8001488 <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003914:	e008      	b.n	8003928 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003916:	f7fd fdb7 	bl	8001488 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e099      	b.n	8003a5c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003928:	4b24      	ldr	r3, [pc, #144]	; (80039bc <HAL_RCC_OscConfig+0x784>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1f0      	bne.n	8003916 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003934:	4b21      	ldr	r3, [pc, #132]	; (80039bc <HAL_RCC_OscConfig+0x784>)
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	4b21      	ldr	r3, [pc, #132]	; (80039c0 <HAL_RCC_OscConfig+0x788>)
 800393a:	4013      	ands	r3, r2
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003944:	3a01      	subs	r2, #1
 8003946:	0112      	lsls	r2, r2, #4
 8003948:	4311      	orrs	r1, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800394e:	0212      	lsls	r2, r2, #8
 8003950:	4311      	orrs	r1, r2
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003956:	0852      	lsrs	r2, r2, #1
 8003958:	3a01      	subs	r2, #1
 800395a:	0552      	lsls	r2, r2, #21
 800395c:	4311      	orrs	r1, r2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003962:	0852      	lsrs	r2, r2, #1
 8003964:	3a01      	subs	r2, #1
 8003966:	0652      	lsls	r2, r2, #25
 8003968:	4311      	orrs	r1, r2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800396e:	06d2      	lsls	r2, r2, #27
 8003970:	430a      	orrs	r2, r1
 8003972:	4912      	ldr	r1, [pc, #72]	; (80039bc <HAL_RCC_OscConfig+0x784>)
 8003974:	4313      	orrs	r3, r2
 8003976:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003978:	4b10      	ldr	r3, [pc, #64]	; (80039bc <HAL_RCC_OscConfig+0x784>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a0f      	ldr	r2, [pc, #60]	; (80039bc <HAL_RCC_OscConfig+0x784>)
 800397e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003982:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003984:	4b0d      	ldr	r3, [pc, #52]	; (80039bc <HAL_RCC_OscConfig+0x784>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	4a0c      	ldr	r2, [pc, #48]	; (80039bc <HAL_RCC_OscConfig+0x784>)
 800398a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800398e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003990:	f7fd fd7a 	bl	8001488 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003998:	f7fd fd76 	bl	8001488 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e058      	b.n	8003a5c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039aa:	4b04      	ldr	r3, [pc, #16]	; (80039bc <HAL_RCC_OscConfig+0x784>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0f0      	beq.n	8003998 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039b6:	e050      	b.n	8003a5a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e04f      	b.n	8003a5c <HAL_RCC_OscConfig+0x824>
 80039bc:	40021000 	.word	0x40021000
 80039c0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039c4:	4b27      	ldr	r3, [pc, #156]	; (8003a64 <HAL_RCC_OscConfig+0x82c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d144      	bne.n	8003a5a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039d0:	4b24      	ldr	r3, [pc, #144]	; (8003a64 <HAL_RCC_OscConfig+0x82c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a23      	ldr	r2, [pc, #140]	; (8003a64 <HAL_RCC_OscConfig+0x82c>)
 80039d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039dc:	4b21      	ldr	r3, [pc, #132]	; (8003a64 <HAL_RCC_OscConfig+0x82c>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	4a20      	ldr	r2, [pc, #128]	; (8003a64 <HAL_RCC_OscConfig+0x82c>)
 80039e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039e8:	f7fd fd4e 	bl	8001488 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f0:	f7fd fd4a 	bl	8001488 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e02c      	b.n	8003a5c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a02:	4b18      	ldr	r3, [pc, #96]	; (8003a64 <HAL_RCC_OscConfig+0x82c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f0      	beq.n	80039f0 <HAL_RCC_OscConfig+0x7b8>
 8003a0e:	e024      	b.n	8003a5a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	2b0c      	cmp	r3, #12
 8003a14:	d01f      	beq.n	8003a56 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a16:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <HAL_RCC_OscConfig+0x82c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a12      	ldr	r2, [pc, #72]	; (8003a64 <HAL_RCC_OscConfig+0x82c>)
 8003a1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a22:	f7fd fd31 	bl	8001488 <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a2a:	f7fd fd2d 	bl	8001488 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e00f      	b.n	8003a5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a3c:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <HAL_RCC_OscConfig+0x82c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1f0      	bne.n	8003a2a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a48:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <HAL_RCC_OscConfig+0x82c>)
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	4905      	ldr	r1, [pc, #20]	; (8003a64 <HAL_RCC_OscConfig+0x82c>)
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_RCC_OscConfig+0x830>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	60cb      	str	r3, [r1, #12]
 8003a54:	e001      	b.n	8003a5a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e000      	b.n	8003a5c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3720      	adds	r7, #32
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40021000 	.word	0x40021000
 8003a68:	feeefffc 	.word	0xfeeefffc

08003a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a76:	2300      	movs	r3, #0
 8003a78:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e11d      	b.n	8003cc0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a84:	4b90      	ldr	r3, [pc, #576]	; (8003cc8 <HAL_RCC_ClockConfig+0x25c>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 030f 	and.w	r3, r3, #15
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d910      	bls.n	8003ab4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a92:	4b8d      	ldr	r3, [pc, #564]	; (8003cc8 <HAL_RCC_ClockConfig+0x25c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f023 020f 	bic.w	r2, r3, #15
 8003a9a:	498b      	ldr	r1, [pc, #556]	; (8003cc8 <HAL_RCC_ClockConfig+0x25c>)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa2:	4b89      	ldr	r3, [pc, #548]	; (8003cc8 <HAL_RCC_ClockConfig+0x25c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d001      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e105      	b.n	8003cc0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d010      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	4b81      	ldr	r3, [pc, #516]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d908      	bls.n	8003ae2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad0:	4b7e      	ldr	r3, [pc, #504]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	497b      	ldr	r1, [pc, #492]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d079      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b03      	cmp	r3, #3
 8003af4:	d11e      	bne.n	8003b34 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003af6:	4b75      	ldr	r3, [pc, #468]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e0dc      	b.n	8003cc0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003b06:	f000 fa35 	bl	8003f74 <RCC_GetSysClockFreqFromPLLSource>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4a70      	ldr	r2, [pc, #448]	; (8003cd0 <HAL_RCC_ClockConfig+0x264>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d946      	bls.n	8003ba0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003b12:	4b6e      	ldr	r3, [pc, #440]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d140      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b1e:	4b6b      	ldr	r3, [pc, #428]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b26:	4a69      	ldr	r2, [pc, #420]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b2c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b2e:	2380      	movs	r3, #128	; 0x80
 8003b30:	617b      	str	r3, [r7, #20]
 8003b32:	e035      	b.n	8003ba0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d107      	bne.n	8003b4c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b3c:	4b63      	ldr	r3, [pc, #396]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d115      	bne.n	8003b74 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e0b9      	b.n	8003cc0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d107      	bne.n	8003b64 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b54:	4b5d      	ldr	r3, [pc, #372]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d109      	bne.n	8003b74 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0ad      	b.n	8003cc0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b64:	4b59      	ldr	r3, [pc, #356]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e0a5      	b.n	8003cc0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003b74:	f000 f8b4 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	4a55      	ldr	r2, [pc, #340]	; (8003cd0 <HAL_RCC_ClockConfig+0x264>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d90f      	bls.n	8003ba0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003b80:	4b52      	ldr	r3, [pc, #328]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d109      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b8c:	4b4f      	ldr	r3, [pc, #316]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b94:	4a4d      	ldr	r2, [pc, #308]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b9a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b9c:	2380      	movs	r3, #128	; 0x80
 8003b9e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ba0:	4b4a      	ldr	r3, [pc, #296]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f023 0203 	bic.w	r2, r3, #3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	4947      	ldr	r1, [pc, #284]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb2:	f7fd fc69 	bl	8001488 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb8:	e00a      	b.n	8003bd0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bba:	f7fd fc65 	bl	8001488 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e077      	b.n	8003cc0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd0:	4b3e      	ldr	r3, [pc, #248]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 020c 	and.w	r2, r3, #12
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d1eb      	bne.n	8003bba <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b80      	cmp	r3, #128	; 0x80
 8003be6:	d105      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003be8:	4b38      	ldr	r3, [pc, #224]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	4a37      	ldr	r2, [pc, #220]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003bee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bf2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d010      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	4b31      	ldr	r3, [pc, #196]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d208      	bcs.n	8003c22 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c10:	4b2e      	ldr	r3, [pc, #184]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	492b      	ldr	r1, [pc, #172]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c22:	4b29      	ldr	r3, [pc, #164]	; (8003cc8 <HAL_RCC_ClockConfig+0x25c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d210      	bcs.n	8003c52 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c30:	4b25      	ldr	r3, [pc, #148]	; (8003cc8 <HAL_RCC_ClockConfig+0x25c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f023 020f 	bic.w	r2, r3, #15
 8003c38:	4923      	ldr	r1, [pc, #140]	; (8003cc8 <HAL_RCC_ClockConfig+0x25c>)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c40:	4b21      	ldr	r3, [pc, #132]	; (8003cc8 <HAL_RCC_ClockConfig+0x25c>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 030f 	and.w	r3, r3, #15
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d001      	beq.n	8003c52 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e036      	b.n	8003cc0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0304 	and.w	r3, r3, #4
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d008      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c5e:	4b1b      	ldr	r3, [pc, #108]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	4918      	ldr	r1, [pc, #96]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d009      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c7c:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	4910      	ldr	r1, [pc, #64]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c90:	f000 f826 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8003c94:	4602      	mov	r2, r0
 8003c96:	4b0d      	ldr	r3, [pc, #52]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	091b      	lsrs	r3, r3, #4
 8003c9c:	f003 030f 	and.w	r3, r3, #15
 8003ca0:	490c      	ldr	r1, [pc, #48]	; (8003cd4 <HAL_RCC_ClockConfig+0x268>)
 8003ca2:	5ccb      	ldrb	r3, [r1, r3]
 8003ca4:	f003 031f 	and.w	r3, r3, #31
 8003ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8003cac:	4a0a      	ldr	r2, [pc, #40]	; (8003cd8 <HAL_RCC_ClockConfig+0x26c>)
 8003cae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003cb0:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <HAL_RCC_ClockConfig+0x270>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fd fb97 	bl	80013e8 <HAL_InitTick>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	73fb      	strb	r3, [r7, #15]

  return status;
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40022000 	.word	0x40022000
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	04c4b400 	.word	0x04c4b400
 8003cd4:	08011894 	.word	0x08011894
 8003cd8:	20000000 	.word	0x20000000
 8003cdc:	20000004 	.word	0x20000004

08003ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b089      	sub	sp, #36	; 0x24
 8003ce4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	2300      	movs	r3, #0
 8003cec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cee:	4b3e      	ldr	r3, [pc, #248]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
 8003cf6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cf8:	4b3b      	ldr	r3, [pc, #236]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f003 0303 	and.w	r3, r3, #3
 8003d00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <HAL_RCC_GetSysClockFreq+0x34>
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	2b0c      	cmp	r3, #12
 8003d0c:	d121      	bne.n	8003d52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d11e      	bne.n	8003d52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d14:	4b34      	ldr	r3, [pc, #208]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0308 	and.w	r3, r3, #8
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d107      	bne.n	8003d30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d20:	4b31      	ldr	r3, [pc, #196]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d26:	0a1b      	lsrs	r3, r3, #8
 8003d28:	f003 030f 	and.w	r3, r3, #15
 8003d2c:	61fb      	str	r3, [r7, #28]
 8003d2e:	e005      	b.n	8003d3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d30:	4b2d      	ldr	r3, [pc, #180]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	091b      	lsrs	r3, r3, #4
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d3c:	4a2b      	ldr	r2, [pc, #172]	; (8003dec <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10d      	bne.n	8003d68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d50:	e00a      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	d102      	bne.n	8003d5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d58:	4b25      	ldr	r3, [pc, #148]	; (8003df0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d5a:	61bb      	str	r3, [r7, #24]
 8003d5c:	e004      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d101      	bne.n	8003d68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d64:	4b23      	ldr	r3, [pc, #140]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	2b0c      	cmp	r3, #12
 8003d6c:	d134      	bne.n	8003dd8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d6e:	4b1e      	ldr	r3, [pc, #120]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d003      	beq.n	8003d86 <HAL_RCC_GetSysClockFreq+0xa6>
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d003      	beq.n	8003d8c <HAL_RCC_GetSysClockFreq+0xac>
 8003d84:	e005      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d86:	4b1a      	ldr	r3, [pc, #104]	; (8003df0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d88:	617b      	str	r3, [r7, #20]
      break;
 8003d8a:	e005      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d8c:	4b19      	ldr	r3, [pc, #100]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d8e:	617b      	str	r3, [r7, #20]
      break;
 8003d90:	e002      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	617b      	str	r3, [r7, #20]
      break;
 8003d96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d98:	4b13      	ldr	r3, [pc, #76]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	091b      	lsrs	r3, r3, #4
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	3301      	adds	r3, #1
 8003da4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003da6:	4b10      	ldr	r3, [pc, #64]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	0a1b      	lsrs	r3, r3, #8
 8003dac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	fb03 f202 	mul.w	r2, r3, r2
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dbe:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	0e5b      	lsrs	r3, r3, #25
 8003dc4:	f003 0303 	and.w	r3, r3, #3
 8003dc8:	3301      	adds	r3, #1
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003dd8:	69bb      	ldr	r3, [r7, #24]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3724      	adds	r7, #36	; 0x24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	40021000 	.word	0x40021000
 8003dec:	080118ac 	.word	0x080118ac
 8003df0:	00f42400 	.word	0x00f42400
 8003df4:	007a1200 	.word	0x007a1200

08003df8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dfc:	4b03      	ldr	r3, [pc, #12]	; (8003e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	20000000 	.word	0x20000000

08003e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e14:	f7ff fff0 	bl	8003df8 <HAL_RCC_GetHCLKFreq>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	4b06      	ldr	r3, [pc, #24]	; (8003e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	0a1b      	lsrs	r3, r3, #8
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	4904      	ldr	r1, [pc, #16]	; (8003e38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e26:	5ccb      	ldrb	r3, [r1, r3]
 8003e28:	f003 031f 	and.w	r3, r3, #31
 8003e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40021000 	.word	0x40021000
 8003e38:	080118a4 	.word	0x080118a4

08003e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e40:	f7ff ffda 	bl	8003df8 <HAL_RCC_GetHCLKFreq>
 8003e44:	4602      	mov	r2, r0
 8003e46:	4b06      	ldr	r3, [pc, #24]	; (8003e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	0adb      	lsrs	r3, r3, #11
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	4904      	ldr	r1, [pc, #16]	; (8003e64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e52:	5ccb      	ldrb	r3, [r1, r3]
 8003e54:	f003 031f 	and.w	r3, r3, #31
 8003e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40021000 	.word	0x40021000
 8003e64:	080118a4 	.word	0x080118a4

08003e68 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8003e6c:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <HAL_RCC_EnableCSS+0x1c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a04      	ldr	r2, [pc, #16]	; (8003e84 <HAL_RCC_EnableCSS+0x1c>)
 8003e72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e76:	6013      	str	r3, [r2, #0]
}
 8003e78:	bf00      	nop
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40021000 	.word	0x40021000

08003e88 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003e8c:	4b07      	ldr	r3, [pc, #28]	; (8003eac <HAL_RCC_NMI_IRQHandler+0x24>)
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e98:	d105      	bne.n	8003ea6 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003e9a:	f000 f809 	bl	8003eb0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003e9e:	4b03      	ldr	r3, [pc, #12]	; (8003eac <HAL_RCC_NMI_IRQHandler+0x24>)
 8003ea0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ea4:	621a      	str	r2, [r3, #32]
  }
}
 8003ea6:	bf00      	nop
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40021000 	.word	0x40021000

08003eb0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
	...

08003ec0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ec8:	2300      	movs	r3, #0
 8003eca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ecc:	4b27      	ldr	r3, [pc, #156]	; (8003f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ed8:	f7ff f8da 	bl	8003090 <HAL_PWREx_GetVoltageRange>
 8003edc:	6178      	str	r0, [r7, #20]
 8003ede:	e014      	b.n	8003f0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ee0:	4b22      	ldr	r3, [pc, #136]	; (8003f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee4:	4a21      	ldr	r2, [pc, #132]	; (8003f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eea:	6593      	str	r3, [r2, #88]	; 0x58
 8003eec:	4b1f      	ldr	r3, [pc, #124]	; (8003f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ef8:	f7ff f8ca 	bl	8003090 <HAL_PWREx_GetVoltageRange>
 8003efc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003efe:	4b1b      	ldr	r3, [pc, #108]	; (8003f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f02:	4a1a      	ldr	r2, [pc, #104]	; (8003f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f10:	d10b      	bne.n	8003f2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b80      	cmp	r3, #128	; 0x80
 8003f16:	d913      	bls.n	8003f40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2ba0      	cmp	r3, #160	; 0xa0
 8003f1c:	d902      	bls.n	8003f24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f1e:	2302      	movs	r3, #2
 8003f20:	613b      	str	r3, [r7, #16]
 8003f22:	e00d      	b.n	8003f40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f24:	2301      	movs	r3, #1
 8003f26:	613b      	str	r3, [r7, #16]
 8003f28:	e00a      	b.n	8003f40 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b7f      	cmp	r3, #127	; 0x7f
 8003f2e:	d902      	bls.n	8003f36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003f30:	2302      	movs	r3, #2
 8003f32:	613b      	str	r3, [r7, #16]
 8003f34:	e004      	b.n	8003f40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b70      	cmp	r3, #112	; 0x70
 8003f3a:	d101      	bne.n	8003f40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f023 020f 	bic.w	r2, r3, #15
 8003f48:	4909      	ldr	r1, [pc, #36]	; (8003f70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f50:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d001      	beq.n	8003f62 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3718      	adds	r7, #24
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	40022000 	.word	0x40022000

08003f74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f7a:	4b2d      	ldr	r3, [pc, #180]	; (8004030 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d00b      	beq.n	8003fa2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2b03      	cmp	r3, #3
 8003f8e:	d825      	bhi.n	8003fdc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d008      	beq.n	8003fa8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d11f      	bne.n	8003fdc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003f9c:	4b25      	ldr	r3, [pc, #148]	; (8004034 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003f9e:	613b      	str	r3, [r7, #16]
    break;
 8003fa0:	e01f      	b.n	8003fe2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003fa2:	4b25      	ldr	r3, [pc, #148]	; (8004038 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003fa4:	613b      	str	r3, [r7, #16]
    break;
 8003fa6:	e01c      	b.n	8003fe2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003fa8:	4b21      	ldr	r3, [pc, #132]	; (8004030 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0308 	and.w	r3, r3, #8
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d107      	bne.n	8003fc4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003fb4:	4b1e      	ldr	r3, [pc, #120]	; (8004030 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fba:	0a1b      	lsrs	r3, r3, #8
 8003fbc:	f003 030f 	and.w	r3, r3, #15
 8003fc0:	617b      	str	r3, [r7, #20]
 8003fc2:	e005      	b.n	8003fd0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003fc4:	4b1a      	ldr	r3, [pc, #104]	; (8004030 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	091b      	lsrs	r3, r3, #4
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003fd0:	4a1a      	ldr	r2, [pc, #104]	; (800403c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd8:	613b      	str	r3, [r7, #16]
    break;
 8003fda:	e002      	b.n	8003fe2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	613b      	str	r3, [r7, #16]
    break;
 8003fe0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fe2:	4b13      	ldr	r3, [pc, #76]	; (8004030 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	091b      	lsrs	r3, r3, #4
 8003fe8:	f003 030f 	and.w	r3, r3, #15
 8003fec:	3301      	adds	r3, #1
 8003fee:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ff0:	4b0f      	ldr	r3, [pc, #60]	; (8004030 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	0a1b      	lsrs	r3, r3, #8
 8003ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	fb03 f202 	mul.w	r2, r3, r2
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	fbb2 f3f3 	udiv	r3, r2, r3
 8004006:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004008:	4b09      	ldr	r3, [pc, #36]	; (8004030 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	0e5b      	lsrs	r3, r3, #25
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	3301      	adds	r3, #1
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004020:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004022:	683b      	ldr	r3, [r7, #0]
}
 8004024:	4618      	mov	r0, r3
 8004026:	371c      	adds	r7, #28
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	40021000 	.word	0x40021000
 8004034:	00f42400 	.word	0x00f42400
 8004038:	007a1200 	.word	0x007a1200
 800403c:	080118ac 	.word	0x080118ac

08004040 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004048:	2300      	movs	r3, #0
 800404a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800404c:	2300      	movs	r3, #0
 800404e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004058:	2b00      	cmp	r3, #0
 800405a:	d040      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004060:	2b80      	cmp	r3, #128	; 0x80
 8004062:	d02a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004064:	2b80      	cmp	r3, #128	; 0x80
 8004066:	d825      	bhi.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004068:	2b60      	cmp	r3, #96	; 0x60
 800406a:	d026      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800406c:	2b60      	cmp	r3, #96	; 0x60
 800406e:	d821      	bhi.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004070:	2b40      	cmp	r3, #64	; 0x40
 8004072:	d006      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004074:	2b40      	cmp	r3, #64	; 0x40
 8004076:	d81d      	bhi.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004078:	2b00      	cmp	r3, #0
 800407a:	d009      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800407c:	2b20      	cmp	r3, #32
 800407e:	d010      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004080:	e018      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004082:	4b89      	ldr	r3, [pc, #548]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	4a88      	ldr	r2, [pc, #544]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800408c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800408e:	e015      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3304      	adds	r3, #4
 8004094:	2100      	movs	r1, #0
 8004096:	4618      	mov	r0, r3
 8004098:	f001 fa24 	bl	80054e4 <RCCEx_PLLSAI1_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040a0:	e00c      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3320      	adds	r3, #32
 80040a6:	2100      	movs	r1, #0
 80040a8:	4618      	mov	r0, r3
 80040aa:	f001 fb0f 	bl	80056cc <RCCEx_PLLSAI2_Config>
 80040ae:	4603      	mov	r3, r0
 80040b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040b2:	e003      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	74fb      	strb	r3, [r7, #19]
      break;
 80040b8:	e000      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80040ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040bc:	7cfb      	ldrb	r3, [r7, #19]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10b      	bne.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040c2:	4b79      	ldr	r3, [pc, #484]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040c8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040d0:	4975      	ldr	r1, [pc, #468]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80040d8:	e001      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040da:	7cfb      	ldrb	r3, [r7, #19]
 80040dc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d047      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f2:	d030      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80040f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f8:	d82a      	bhi.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80040fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040fe:	d02a      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004100:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004104:	d824      	bhi.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800410a:	d008      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800410c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004110:	d81e      	bhi.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800411a:	d010      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800411c:	e018      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800411e:	4b62      	ldr	r3, [pc, #392]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	4a61      	ldr	r2, [pc, #388]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004128:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800412a:	e015      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3304      	adds	r3, #4
 8004130:	2100      	movs	r1, #0
 8004132:	4618      	mov	r0, r3
 8004134:	f001 f9d6 	bl	80054e4 <RCCEx_PLLSAI1_Config>
 8004138:	4603      	mov	r3, r0
 800413a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800413c:	e00c      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3320      	adds	r3, #32
 8004142:	2100      	movs	r1, #0
 8004144:	4618      	mov	r0, r3
 8004146:	f001 fac1 	bl	80056cc <RCCEx_PLLSAI2_Config>
 800414a:	4603      	mov	r3, r0
 800414c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800414e:	e003      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	74fb      	strb	r3, [r7, #19]
      break;
 8004154:	e000      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004156:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004158:	7cfb      	ldrb	r3, [r7, #19]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10b      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800415e:	4b52      	ldr	r3, [pc, #328]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004160:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416c:	494e      	ldr	r1, [pc, #312]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004174:	e001      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004176:	7cfb      	ldrb	r3, [r7, #19]
 8004178:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 809f 	beq.w	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004188:	2300      	movs	r3, #0
 800418a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800418c:	4b46      	ldr	r3, [pc, #280]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800418e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004198:	2301      	movs	r3, #1
 800419a:	e000      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800419c:	2300      	movs	r3, #0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00d      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041a2:	4b41      	ldr	r3, [pc, #260]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a6:	4a40      	ldr	r2, [pc, #256]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ac:	6593      	str	r3, [r2, #88]	; 0x58
 80041ae:	4b3e      	ldr	r3, [pc, #248]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b6:	60bb      	str	r3, [r7, #8]
 80041b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ba:	2301      	movs	r3, #1
 80041bc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041be:	4b3b      	ldr	r3, [pc, #236]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a3a      	ldr	r2, [pc, #232]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80041c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041ca:	f7fd f95d 	bl	8001488 <HAL_GetTick>
 80041ce:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041d0:	e009      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d2:	f7fd f959 	bl	8001488 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d902      	bls.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	74fb      	strb	r3, [r7, #19]
        break;
 80041e4:	e005      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041e6:	4b31      	ldr	r3, [pc, #196]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0ef      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80041f2:	7cfb      	ldrb	r3, [r7, #19]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d15b      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041f8:	4b2b      	ldr	r3, [pc, #172]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004202:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d01f      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	429a      	cmp	r2, r3
 8004214:	d019      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004216:	4b24      	ldr	r3, [pc, #144]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004220:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004222:	4b21      	ldr	r3, [pc, #132]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004228:	4a1f      	ldr	r2, [pc, #124]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800422a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800422e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004232:	4b1d      	ldr	r3, [pc, #116]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004238:	4a1b      	ldr	r2, [pc, #108]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800423a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800423e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004242:	4a19      	ldr	r2, [pc, #100]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d016      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004254:	f7fd f918 	bl	8001488 <HAL_GetTick>
 8004258:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800425a:	e00b      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800425c:	f7fd f914 	bl	8001488 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	f241 3288 	movw	r2, #5000	; 0x1388
 800426a:	4293      	cmp	r3, r2
 800426c:	d902      	bls.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	74fb      	strb	r3, [r7, #19]
            break;
 8004272:	e006      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004274:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d0ec      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004282:	7cfb      	ldrb	r3, [r7, #19]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10c      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004288:	4b07      	ldr	r3, [pc, #28]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800428a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004298:	4903      	ldr	r1, [pc, #12]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800429a:	4313      	orrs	r3, r2
 800429c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042a0:	e008      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042a2:	7cfb      	ldrb	r3, [r7, #19]
 80042a4:	74bb      	strb	r3, [r7, #18]
 80042a6:	e005      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80042a8:	40021000 	.word	0x40021000
 80042ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b0:	7cfb      	ldrb	r3, [r7, #19]
 80042b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042b4:	7c7b      	ldrb	r3, [r7, #17]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d105      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ba:	4ba0      	ldr	r3, [pc, #640]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042be:	4a9f      	ldr	r2, [pc, #636]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00a      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042d2:	4b9a      	ldr	r3, [pc, #616]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d8:	f023 0203 	bic.w	r2, r3, #3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e0:	4996      	ldr	r1, [pc, #600]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00a      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042f4:	4b91      	ldr	r3, [pc, #580]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fa:	f023 020c 	bic.w	r2, r3, #12
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	498e      	ldr	r1, [pc, #568]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0304 	and.w	r3, r3, #4
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00a      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004316:	4b89      	ldr	r3, [pc, #548]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004324:	4985      	ldr	r1, [pc, #532]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0308 	and.w	r3, r3, #8
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00a      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004338:	4b80      	ldr	r3, [pc, #512]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800433a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004346:	497d      	ldr	r1, [pc, #500]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0310 	and.w	r3, r3, #16
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00a      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800435a:	4b78      	ldr	r3, [pc, #480]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800435c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004360:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004368:	4974      	ldr	r1, [pc, #464]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800436a:	4313      	orrs	r3, r2
 800436c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0320 	and.w	r3, r3, #32
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00a      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800437c:	4b6f      	ldr	r3, [pc, #444]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800437e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004382:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800438a:	496c      	ldr	r1, [pc, #432]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800438c:	4313      	orrs	r3, r2
 800438e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00a      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800439e:	4b67      	ldr	r3, [pc, #412]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ac:	4963      	ldr	r1, [pc, #396]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00a      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043c0:	4b5e      	ldr	r3, [pc, #376]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043ce:	495b      	ldr	r1, [pc, #364]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00a      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043e2:	4b56      	ldr	r3, [pc, #344]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f0:	4952      	ldr	r1, [pc, #328]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00a      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004404:	4b4d      	ldr	r3, [pc, #308]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004412:	494a      	ldr	r1, [pc, #296]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00a      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004426:	4b45      	ldr	r3, [pc, #276]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004434:	4941      	ldr	r1, [pc, #260]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004436:	4313      	orrs	r3, r2
 8004438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00a      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004448:	4b3c      	ldr	r3, [pc, #240]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800444a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800444e:	f023 0203 	bic.w	r2, r3, #3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004456:	4939      	ldr	r1, [pc, #228]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004458:	4313      	orrs	r3, r2
 800445a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d028      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800446a:	4b34      	ldr	r3, [pc, #208]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800446c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004470:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004478:	4930      	ldr	r1, [pc, #192]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800447a:	4313      	orrs	r3, r2
 800447c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004484:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004488:	d106      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800448a:	4b2c      	ldr	r3, [pc, #176]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	4a2b      	ldr	r2, [pc, #172]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004490:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004494:	60d3      	str	r3, [r2, #12]
 8004496:	e011      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800449c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044a0:	d10c      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3304      	adds	r3, #4
 80044a6:	2101      	movs	r1, #1
 80044a8:	4618      	mov	r0, r3
 80044aa:	f001 f81b 	bl	80054e4 <RCCEx_PLLSAI1_Config>
 80044ae:	4603      	mov	r3, r0
 80044b0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044b2:	7cfb      	ldrb	r3, [r7, #19]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80044b8:	7cfb      	ldrb	r3, [r7, #19]
 80044ba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d04d      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044d0:	d108      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80044d2:	4b1a      	ldr	r3, [pc, #104]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044d8:	4a18      	ldr	r2, [pc, #96]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044de:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80044e2:	e012      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80044e4:	4b15      	ldr	r3, [pc, #84]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044ea:	4a14      	ldr	r2, [pc, #80]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044f0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80044f4:	4b11      	ldr	r3, [pc, #68]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004502:	490e      	ldr	r1, [pc, #56]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800450e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004512:	d106      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004514:	4b09      	ldr	r3, [pc, #36]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	4a08      	ldr	r2, [pc, #32]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800451a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800451e:	60d3      	str	r3, [r2, #12]
 8004520:	e020      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004526:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800452a:	d109      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800452c:	4b03      	ldr	r3, [pc, #12]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	4a02      	ldr	r2, [pc, #8]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004536:	60d3      	str	r3, [r2, #12]
 8004538:	e014      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800453a:	bf00      	nop
 800453c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004544:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004548:	d10c      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	3304      	adds	r3, #4
 800454e:	2101      	movs	r1, #1
 8004550:	4618      	mov	r0, r3
 8004552:	f000 ffc7 	bl	80054e4 <RCCEx_PLLSAI1_Config>
 8004556:	4603      	mov	r3, r0
 8004558:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800455a:	7cfb      	ldrb	r3, [r7, #19]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004560:	7cfb      	ldrb	r3, [r7, #19]
 8004562:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d028      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004570:	4b4a      	ldr	r3, [pc, #296]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004576:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800457e:	4947      	ldr	r1, [pc, #284]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004580:	4313      	orrs	r3, r2
 8004582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800458a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800458e:	d106      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004590:	4b42      	ldr	r3, [pc, #264]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	4a41      	ldr	r2, [pc, #260]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004596:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800459a:	60d3      	str	r3, [r2, #12]
 800459c:	e011      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045a6:	d10c      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3304      	adds	r3, #4
 80045ac:	2101      	movs	r1, #1
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 ff98 	bl	80054e4 <RCCEx_PLLSAI1_Config>
 80045b4:	4603      	mov	r3, r0
 80045b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045b8:	7cfb      	ldrb	r3, [r7, #19]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80045be:	7cfb      	ldrb	r3, [r7, #19]
 80045c0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d01e      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045ce:	4b33      	ldr	r3, [pc, #204]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045de:	492f      	ldr	r1, [pc, #188]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045f0:	d10c      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	3304      	adds	r3, #4
 80045f6:	2102      	movs	r1, #2
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 ff73 	bl	80054e4 <RCCEx_PLLSAI1_Config>
 80045fe:	4603      	mov	r3, r0
 8004600:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004602:	7cfb      	ldrb	r3, [r7, #19]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004608:	7cfb      	ldrb	r3, [r7, #19]
 800460a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00b      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004618:	4b20      	ldr	r3, [pc, #128]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800461a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800461e:	f023 0204 	bic.w	r2, r3, #4
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004628:	491c      	ldr	r1, [pc, #112]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00b      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800463c:	4b17      	ldr	r3, [pc, #92]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800463e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004642:	f023 0218 	bic.w	r2, r3, #24
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464c:	4913      	ldr	r1, [pc, #76]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d017      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004660:	4b0e      	ldr	r3, [pc, #56]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004662:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004666:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004670:	490a      	ldr	r1, [pc, #40]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004672:	4313      	orrs	r3, r2
 8004674:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800467e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004682:	d105      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004684:	4b05      	ldr	r3, [pc, #20]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	4a04      	ldr	r2, [pc, #16]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800468a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800468e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004690:	7cbb      	ldrb	r3, [r7, #18]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40021000 	.word	0x40021000

080046a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b088      	sub	sp, #32
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046b2:	d13e      	bne.n	8004732 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80046b4:	4bb6      	ldr	r3, [pc, #728]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80046b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046be:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046c6:	d028      	beq.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ce:	f200 86f4 	bhi.w	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d8:	d005      	beq.n	80046e6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046e0:	d00e      	beq.n	8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80046e2:	f000 beea 	b.w	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80046e6:	4baa      	ldr	r3, [pc, #680]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80046e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	f040 86e4 	bne.w	80054be <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 80046f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046fa:	61fb      	str	r3, [r7, #28]
      break;
 80046fc:	f000 bedf 	b.w	80054be <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004700:	4ba3      	ldr	r3, [pc, #652]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b02      	cmp	r3, #2
 800470c:	f040 86d9 	bne.w	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8004710:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004714:	61fb      	str	r3, [r7, #28]
      break;
 8004716:	f000 bed4 	b.w	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800471a:	4b9d      	ldr	r3, [pc, #628]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004722:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004726:	f040 86ce 	bne.w	80054c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 800472a:	4b9a      	ldr	r3, [pc, #616]	; (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800472c:	61fb      	str	r3, [r7, #28]
      break;
 800472e:	f000 beca 	b.w	80054c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004732:	4b97      	ldr	r3, [pc, #604]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	2b03      	cmp	r3, #3
 8004740:	d036      	beq.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	2b03      	cmp	r3, #3
 8004746:	d840      	bhi.n	80047ca <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d003      	beq.n	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	2b02      	cmp	r3, #2
 8004752:	d020      	beq.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004754:	e039      	b.n	80047ca <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004756:	4b8e      	ldr	r3, [pc, #568]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b02      	cmp	r3, #2
 8004760:	d116      	bne.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004762:	4b8b      	ldr	r3, [pc, #556]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	2b00      	cmp	r3, #0
 800476c:	d005      	beq.n	800477a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800476e:	4b88      	ldr	r3, [pc, #544]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	091b      	lsrs	r3, r3, #4
 8004774:	f003 030f 	and.w	r3, r3, #15
 8004778:	e005      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800477a:	4b85      	ldr	r3, [pc, #532]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800477c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004780:	0a1b      	lsrs	r3, r3, #8
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	4a84      	ldr	r2, [pc, #528]	; (8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800478c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800478e:	e01f      	b.n	80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	61bb      	str	r3, [r7, #24]
      break;
 8004794:	e01c      	b.n	80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004796:	4b7e      	ldr	r3, [pc, #504]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800479e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a2:	d102      	bne.n	80047aa <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80047a4:	4b7d      	ldr	r3, [pc, #500]	; (800499c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80047a6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80047a8:	e012      	b.n	80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	61bb      	str	r3, [r7, #24]
      break;
 80047ae:	e00f      	b.n	80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80047b0:	4b77      	ldr	r3, [pc, #476]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047bc:	d102      	bne.n	80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80047be:	4b78      	ldr	r3, [pc, #480]	; (80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80047c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80047c2:	e005      	b.n	80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	61bb      	str	r3, [r7, #24]
      break;
 80047c8:	e002      	b.n	80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	61bb      	str	r3, [r7, #24]
      break;
 80047ce:	bf00      	nop
    }

    switch(PeriphClk)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047d6:	f000 8606 	beq.w	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047e0:	f200 8673 	bhi.w	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047ea:	f000 8469 	beq.w	80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047f4:	f200 8669 	bhi.w	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047fe:	f000 8531 	beq.w	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004808:	f200 865f 	bhi.w	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004812:	f000 8187 	beq.w	8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800481c:	f200 8655 	bhi.w	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004826:	f000 80cd 	beq.w	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004830:	f200 864b 	bhi.w	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800483a:	f000 8430 	beq.w	800509e <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004844:	f200 8641 	bhi.w	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800484e:	f000 83e4 	beq.w	800501a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004858:	f200 8637 	bhi.w	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004862:	f000 80af 	beq.w	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800486c:	f200 862d 	bhi.w	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004876:	f000 809d 	beq.w	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004880:	f200 8623 	bhi.w	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800488a:	f000 808b 	beq.w	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004894:	f200 8619 	bhi.w	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800489e:	f000 8554 	beq.w	800534a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a8:	f200 860f 	bhi.w	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048b2:	f000 8500 	beq.w	80052b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048bc:	f200 8605 	bhi.w	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048c6:	f000 84a1 	beq.w	800520c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d0:	f200 85fb 	bhi.w	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b80      	cmp	r3, #128	; 0x80
 80048d8:	f000 846c 	beq.w	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b80      	cmp	r3, #128	; 0x80
 80048e0:	f200 85f3 	bhi.w	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	d84c      	bhi.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 85ec 	beq.w	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	3b01      	subs	r3, #1
 80048f6:	2b1f      	cmp	r3, #31
 80048f8:	f200 85e7 	bhi.w	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80048fc:	a201      	add	r2, pc, #4	; (adr r2, 8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80048fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004902:	bf00      	nop
 8004904:	08004d19 	.word	0x08004d19
 8004908:	08004d87 	.word	0x08004d87
 800490c:	080054cb 	.word	0x080054cb
 8004910:	08004e1b 	.word	0x08004e1b
 8004914:	080054cb 	.word	0x080054cb
 8004918:	080054cb 	.word	0x080054cb
 800491c:	080054cb 	.word	0x080054cb
 8004920:	08004e93 	.word	0x08004e93
 8004924:	080054cb 	.word	0x080054cb
 8004928:	080054cb 	.word	0x080054cb
 800492c:	080054cb 	.word	0x080054cb
 8004930:	080054cb 	.word	0x080054cb
 8004934:	080054cb 	.word	0x080054cb
 8004938:	080054cb 	.word	0x080054cb
 800493c:	080054cb 	.word	0x080054cb
 8004940:	08004f17 	.word	0x08004f17
 8004944:	080054cb 	.word	0x080054cb
 8004948:	080054cb 	.word	0x080054cb
 800494c:	080054cb 	.word	0x080054cb
 8004950:	080054cb 	.word	0x080054cb
 8004954:	080054cb 	.word	0x080054cb
 8004958:	080054cb 	.word	0x080054cb
 800495c:	080054cb 	.word	0x080054cb
 8004960:	080054cb 	.word	0x080054cb
 8004964:	080054cb 	.word	0x080054cb
 8004968:	080054cb 	.word	0x080054cb
 800496c:	080054cb 	.word	0x080054cb
 8004970:	080054cb 	.word	0x080054cb
 8004974:	080054cb 	.word	0x080054cb
 8004978:	080054cb 	.word	0x080054cb
 800497c:	080054cb 	.word	0x080054cb
 8004980:	08004f99 	.word	0x08004f99
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b40      	cmp	r3, #64	; 0x40
 8004988:	f000 83e8 	beq.w	800515c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800498c:	f000 bd9d 	b.w	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004990:	40021000 	.word	0x40021000
 8004994:	0003d090 	.word	0x0003d090
 8004998:	080118ac 	.word	0x080118ac
 800499c:	00f42400 	.word	0x00f42400
 80049a0:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80049a4:	69b9      	ldr	r1, [r7, #24]
 80049a6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80049aa:	f000 ff83 	bl	80058b4 <RCCEx_GetSAIxPeriphCLKFreq>
 80049ae:	61f8      	str	r0, [r7, #28]
      break;
 80049b0:	f000 bd8e 	b.w	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80049b4:	69b9      	ldr	r1, [r7, #24]
 80049b6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80049ba:	f000 ff7b 	bl	80058b4 <RCCEx_GetSAIxPeriphCLKFreq>
 80049be:	61f8      	str	r0, [r7, #28]
      break;
 80049c0:	f000 bd86 	b.w	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80049c4:	4b9a      	ldr	r3, [pc, #616]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80049c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ca:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80049d6:	d015      	beq.n	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80049de:	f200 8092 	bhi.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049e8:	d029      	beq.n	8004a3e <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049f0:	f200 8089 	bhi.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d07b      	beq.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a00:	d04a      	beq.n	8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8004a02:	e080      	b.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004a04:	4b8a      	ldr	r3, [pc, #552]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d17d      	bne.n	8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004a10:	4b87      	ldr	r3, [pc, #540]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0308 	and.w	r3, r3, #8
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8004a1c:	4b84      	ldr	r3, [pc, #528]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	091b      	lsrs	r3, r3, #4
 8004a22:	f003 030f 	and.w	r3, r3, #15
 8004a26:	e005      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8004a28:	4b81      	ldr	r3, [pc, #516]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a2e:	0a1b      	lsrs	r3, r3, #8
 8004a30:	f003 030f 	and.w	r3, r3, #15
 8004a34:	4a7f      	ldr	r2, [pc, #508]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a3a:	61fb      	str	r3, [r7, #28]
          break;
 8004a3c:	e066      	b.n	8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004a3e:	4b7c      	ldr	r3, [pc, #496]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a4a:	d162      	bne.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004a4c:	4b78      	ldr	r3, [pc, #480]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a58:	d15b      	bne.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004a5a:	4b75      	ldr	r3, [pc, #468]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	0a1b      	lsrs	r3, r3, #8
 8004a60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a64:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	fb03 f202 	mul.w	r2, r3, r2
 8004a6e:	4b70      	ldr	r3, [pc, #448]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	091b      	lsrs	r3, r3, #4
 8004a74:	f003 030f 	and.w	r3, r3, #15
 8004a78:	3301      	adds	r3, #1
 8004a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004a80:	4b6b      	ldr	r3, [pc, #428]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	0d5b      	lsrs	r3, r3, #21
 8004a86:	f003 0303 	and.w	r3, r3, #3
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a94:	61fb      	str	r3, [r7, #28]
          break;
 8004a96:	e03c      	b.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004a98:	4b65      	ldr	r3, [pc, #404]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aa4:	d138      	bne.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004aa6:	4b62      	ldr	r3, [pc, #392]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ab2:	d131      	bne.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004ab4:	4b5e      	ldr	r3, [pc, #376]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	0a1b      	lsrs	r3, r3, #8
 8004aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004abe:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	fb03 f202 	mul.w	r2, r3, r2
 8004ac8:	4b59      	ldr	r3, [pc, #356]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	091b      	lsrs	r3, r3, #4
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004ada:	4b55      	ldr	r3, [pc, #340]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	0d5b      	lsrs	r3, r3, #21
 8004ae0:	f003 0303 	and.w	r3, r3, #3
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aee:	61fb      	str	r3, [r7, #28]
          break;
 8004af0:	e012      	b.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004af2:	4b4f      	ldr	r3, [pc, #316]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004af4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d10e      	bne.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8004b00:	4b4d      	ldr	r3, [pc, #308]	; (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004b02:	61fb      	str	r3, [r7, #28]
          break;
 8004b04:	e00b      	b.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8004b06:	bf00      	nop
 8004b08:	f000 bce2 	b.w	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004b0c:	bf00      	nop
 8004b0e:	f000 bcdf 	b.w	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004b12:	bf00      	nop
 8004b14:	f000 bcdc 	b.w	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004b18:	bf00      	nop
 8004b1a:	f000 bcd9 	b.w	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004b1e:	bf00      	nop
        break;
 8004b20:	f000 bcd6 	b.w	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8004b24:	4b42      	ldr	r3, [pc, #264]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004b26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b32:	d13d      	bne.n	8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004b34:	4b3e      	ldr	r3, [pc, #248]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b40:	f040 84c5 	bne.w	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8004b44:	4b3a      	ldr	r3, [pc, #232]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b50:	f040 84bd 	bne.w	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004b54:	4b36      	ldr	r3, [pc, #216]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	0a1b      	lsrs	r3, r3, #8
 8004b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b5e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	fb03 f202 	mul.w	r2, r3, r2
 8004b68:	4b31      	ldr	r3, [pc, #196]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	091b      	lsrs	r3, r3, #4
 8004b6e:	f003 030f 	and.w	r3, r3, #15
 8004b72:	3301      	adds	r3, #1
 8004b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b78:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004b7a:	4b2d      	ldr	r3, [pc, #180]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	0edb      	lsrs	r3, r3, #27
 8004b80:	f003 031f 	and.w	r3, r3, #31
 8004b84:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10a      	bne.n	8004ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004b8c:	4b28      	ldr	r3, [pc, #160]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8004b98:	2311      	movs	r3, #17
 8004b9a:	617b      	str	r3, [r7, #20]
 8004b9c:	e001      	b.n	8004ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8004b9e:	2307      	movs	r3, #7
 8004ba0:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004baa:	61fb      	str	r3, [r7, #28]
      break;
 8004bac:	f000 bc8f 	b.w	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004bb0:	4b1f      	ldr	r3, [pc, #124]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004bc2:	d016      	beq.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004bca:	f200 809b 	bhi.w	8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bd4:	d032      	beq.n	8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bdc:	f200 8092 	bhi.w	8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 8084 	beq.w	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bee:	d052      	beq.n	8004c96 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8004bf0:	e088      	b.n	8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004bf2:	4b0f      	ldr	r3, [pc, #60]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	f040 8084 	bne.w	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004c00:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0308 	and.w	r3, r3, #8
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d005      	beq.n	8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8004c0c:	4b08      	ldr	r3, [pc, #32]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	091b      	lsrs	r3, r3, #4
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	e005      	b.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8004c18:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c1e:	0a1b      	lsrs	r3, r3, #8
 8004c20:	f003 030f 	and.w	r3, r3, #15
 8004c24:	4a03      	ldr	r2, [pc, #12]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c2a:	61fb      	str	r3, [r7, #28]
          break;
 8004c2c:	e06c      	b.n	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8004c2e:	bf00      	nop
 8004c30:	40021000 	.word	0x40021000
 8004c34:	080118ac 	.word	0x080118ac
 8004c38:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004c3c:	4ba5      	ldr	r3, [pc, #660]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c48:	d160      	bne.n	8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004c4a:	4ba2      	ldr	r3, [pc, #648]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c56:	d159      	bne.n	8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004c58:	4b9e      	ldr	r3, [pc, #632]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	0a1b      	lsrs	r3, r3, #8
 8004c5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c62:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	fb03 f202 	mul.w	r2, r3, r2
 8004c6c:	4b99      	ldr	r3, [pc, #612]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	091b      	lsrs	r3, r3, #4
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	3301      	adds	r3, #1
 8004c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004c7e:	4b95      	ldr	r3, [pc, #596]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	0d5b      	lsrs	r3, r3, #21
 8004c84:	f003 0303 	and.w	r3, r3, #3
 8004c88:	3301      	adds	r3, #1
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c92:	61fb      	str	r3, [r7, #28]
          break;
 8004c94:	e03a      	b.n	8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004c96:	4b8f      	ldr	r3, [pc, #572]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ca2:	d135      	bne.n	8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004ca4:	4b8b      	ldr	r3, [pc, #556]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cb0:	d12e      	bne.n	8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004cb2:	4b88      	ldr	r3, [pc, #544]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	0a1b      	lsrs	r3, r3, #8
 8004cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cbc:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	fb03 f202 	mul.w	r2, r3, r2
 8004cc6:	4b83      	ldr	r3, [pc, #524]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	091b      	lsrs	r3, r3, #4
 8004ccc:	f003 030f 	and.w	r3, r3, #15
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004cd8:	4b7e      	ldr	r3, [pc, #504]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	0d5b      	lsrs	r3, r3, #21
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cec:	61fb      	str	r3, [r7, #28]
          break;
 8004cee:	e00f      	b.n	8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004cf0:	4b78      	ldr	r3, [pc, #480]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004cf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d10a      	bne.n	8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8004cfe:	4b76      	ldr	r3, [pc, #472]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004d00:	61fb      	str	r3, [r7, #28]
          break;
 8004d02:	e007      	b.n	8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8004d04:	bf00      	nop
 8004d06:	e3e2      	b.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004d08:	bf00      	nop
 8004d0a:	e3e0      	b.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004d0c:	bf00      	nop
 8004d0e:	e3de      	b.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004d10:	bf00      	nop
 8004d12:	e3dc      	b.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004d14:	bf00      	nop
      break;
 8004d16:	e3da      	b.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004d18:	4b6e      	ldr	r3, [pc, #440]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b03      	cmp	r3, #3
 8004d28:	d827      	bhi.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8004d2a:	a201      	add	r2, pc, #4	; (adr r2, 8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8004d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d30:	08004d41 	.word	0x08004d41
 8004d34:	08004d49 	.word	0x08004d49
 8004d38:	08004d51 	.word	0x08004d51
 8004d3c:	08004d65 	.word	0x08004d65
          frequency = HAL_RCC_GetPCLK2Freq();
 8004d40:	f7ff f87c 	bl	8003e3c <HAL_RCC_GetPCLK2Freq>
 8004d44:	61f8      	str	r0, [r7, #28]
          break;
 8004d46:	e01d      	b.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8004d48:	f7fe ffca 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8004d4c:	61f8      	str	r0, [r7, #28]
          break;
 8004d4e:	e019      	b.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d50:	4b60      	ldr	r3, [pc, #384]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d5c:	d10f      	bne.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8004d5e:	4b5f      	ldr	r3, [pc, #380]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004d60:	61fb      	str	r3, [r7, #28]
          break;
 8004d62:	e00c      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004d64:	4b5b      	ldr	r3, [pc, #364]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d107      	bne.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8004d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d76:	61fb      	str	r3, [r7, #28]
          break;
 8004d78:	e003      	b.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8004d7a:	bf00      	nop
 8004d7c:	e3a8      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004d7e:	bf00      	nop
 8004d80:	e3a6      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004d82:	bf00      	nop
        break;
 8004d84:	e3a4      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004d86:	4b53      	ldr	r3, [pc, #332]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8c:	f003 030c 	and.w	r3, r3, #12
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2b0c      	cmp	r3, #12
 8004d96:	d83a      	bhi.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8004d98:	a201      	add	r2, pc, #4	; (adr r2, 8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8004d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9e:	bf00      	nop
 8004da0:	08004dd5 	.word	0x08004dd5
 8004da4:	08004e0f 	.word	0x08004e0f
 8004da8:	08004e0f 	.word	0x08004e0f
 8004dac:	08004e0f 	.word	0x08004e0f
 8004db0:	08004ddd 	.word	0x08004ddd
 8004db4:	08004e0f 	.word	0x08004e0f
 8004db8:	08004e0f 	.word	0x08004e0f
 8004dbc:	08004e0f 	.word	0x08004e0f
 8004dc0:	08004de5 	.word	0x08004de5
 8004dc4:	08004e0f 	.word	0x08004e0f
 8004dc8:	08004e0f 	.word	0x08004e0f
 8004dcc:	08004e0f 	.word	0x08004e0f
 8004dd0:	08004df9 	.word	0x08004df9
          frequency = HAL_RCC_GetPCLK1Freq();
 8004dd4:	f7ff f81c 	bl	8003e10 <HAL_RCC_GetPCLK1Freq>
 8004dd8:	61f8      	str	r0, [r7, #28]
          break;
 8004dda:	e01d      	b.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8004ddc:	f7fe ff80 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8004de0:	61f8      	str	r0, [r7, #28]
          break;
 8004de2:	e019      	b.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004de4:	4b3b      	ldr	r3, [pc, #236]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004df0:	d10f      	bne.n	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8004df2:	4b3a      	ldr	r3, [pc, #232]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004df4:	61fb      	str	r3, [r7, #28]
          break;
 8004df6:	e00c      	b.n	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004df8:	4b36      	ldr	r3, [pc, #216]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d107      	bne.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8004e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e0a:	61fb      	str	r3, [r7, #28]
          break;
 8004e0c:	e003      	b.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8004e0e:	bf00      	nop
 8004e10:	e35e      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004e12:	bf00      	nop
 8004e14:	e35c      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004e16:	bf00      	nop
        break;
 8004e18:	e35a      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004e1a:	4b2e      	ldr	r3, [pc, #184]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e20:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2b30      	cmp	r3, #48	; 0x30
 8004e2a:	d021      	beq.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2b30      	cmp	r3, #48	; 0x30
 8004e30:	d829      	bhi.n	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2b20      	cmp	r3, #32
 8004e36:	d011      	beq.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b20      	cmp	r3, #32
 8004e3c:	d823      	bhi.n	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b10      	cmp	r3, #16
 8004e48:	d004      	beq.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8004e4a:	e01c      	b.n	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004e4c:	f7fe ffe0 	bl	8003e10 <HAL_RCC_GetPCLK1Freq>
 8004e50:	61f8      	str	r0, [r7, #28]
          break;
 8004e52:	e01d      	b.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004e54:	f7fe ff44 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8004e58:	61f8      	str	r0, [r7, #28]
          break;
 8004e5a:	e019      	b.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e5c:	4b1d      	ldr	r3, [pc, #116]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e68:	d10f      	bne.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8004e6a:	4b1c      	ldr	r3, [pc, #112]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004e6c:	61fb      	str	r3, [r7, #28]
          break;
 8004e6e:	e00c      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004e70:	4b18      	ldr	r3, [pc, #96]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d107      	bne.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8004e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e82:	61fb      	str	r3, [r7, #28]
          break;
 8004e84:	e003      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8004e86:	bf00      	nop
 8004e88:	e322      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004e8a:	bf00      	nop
 8004e8c:	e320      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004e8e:	bf00      	nop
        break;
 8004e90:	e31e      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004e92:	4b10      	ldr	r3, [pc, #64]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e98:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e9c:	60fb      	str	r3, [r7, #12]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2bc0      	cmp	r3, #192	; 0xc0
 8004ea2:	d027      	beq.n	8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ea8:	d82f      	bhi.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b80      	cmp	r3, #128	; 0x80
 8004eae:	d017      	beq.n	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2b80      	cmp	r3, #128	; 0x80
 8004eb4:	d829      	bhi.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b40      	cmp	r3, #64	; 0x40
 8004ec0:	d004      	beq.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8004ec2:	e022      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ec4:	f7fe ffa4 	bl	8003e10 <HAL_RCC_GetPCLK1Freq>
 8004ec8:	61f8      	str	r0, [r7, #28]
          break;
 8004eca:	e023      	b.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8004ecc:	f7fe ff08 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8004ed0:	61f8      	str	r0, [r7, #28]
          break;
 8004ed2:	e01f      	b.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8004ed4:	40021000 	.word	0x40021000
 8004ed8:	02dc6c00 	.word	0x02dc6c00
 8004edc:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ee0:	4b9b      	ldr	r3, [pc, #620]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eec:	d10f      	bne.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8004eee:	4b99      	ldr	r3, [pc, #612]	; (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004ef0:	61fb      	str	r3, [r7, #28]
          break;
 8004ef2:	e00c      	b.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004ef4:	4b96      	ldr	r3, [pc, #600]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d107      	bne.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8004f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f06:	61fb      	str	r3, [r7, #28]
          break;
 8004f08:	e003      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8004f0a:	bf00      	nop
 8004f0c:	e2e0      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004f0e:	bf00      	nop
 8004f10:	e2de      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004f12:	bf00      	nop
        break;
 8004f14:	e2dc      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004f16:	4b8e      	ldr	r3, [pc, #568]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f28:	d025      	beq.n	8004f76 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f30:	d82c      	bhi.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f38:	d013      	beq.n	8004f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f40:	d824      	bhi.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d004      	beq.n	8004f52 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f4e:	d004      	beq.n	8004f5a <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8004f50:	e01c      	b.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004f52:	f7fe ff5d 	bl	8003e10 <HAL_RCC_GetPCLK1Freq>
 8004f56:	61f8      	str	r0, [r7, #28]
          break;
 8004f58:	e01d      	b.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8004f5a:	f7fe fec1 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8004f5e:	61f8      	str	r0, [r7, #28]
          break;
 8004f60:	e019      	b.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f62:	4b7b      	ldr	r3, [pc, #492]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f6e:	d10f      	bne.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8004f70:	4b78      	ldr	r3, [pc, #480]	; (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004f72:	61fb      	str	r3, [r7, #28]
          break;
 8004f74:	e00c      	b.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004f76:	4b76      	ldr	r3, [pc, #472]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d107      	bne.n	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8004f84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f88:	61fb      	str	r3, [r7, #28]
          break;
 8004f8a:	e003      	b.n	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8004f8c:	bf00      	nop
 8004f8e:	e29f      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004f90:	bf00      	nop
 8004f92:	e29d      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004f94:	bf00      	nop
        break;
 8004f96:	e29b      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004f98:	4b6d      	ldr	r3, [pc, #436]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004faa:	d025      	beq.n	8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fb2:	d82c      	bhi.n	800500e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fba:	d013      	beq.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fc2:	d824      	bhi.n	800500e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d004      	beq.n	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd0:	d004      	beq.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8004fd2:	e01c      	b.n	800500e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004fd4:	f7fe ff1c 	bl	8003e10 <HAL_RCC_GetPCLK1Freq>
 8004fd8:	61f8      	str	r0, [r7, #28]
          break;
 8004fda:	e01d      	b.n	8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8004fdc:	f7fe fe80 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8004fe0:	61f8      	str	r0, [r7, #28]
          break;
 8004fe2:	e019      	b.n	8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004fe4:	4b5a      	ldr	r3, [pc, #360]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff0:	d10f      	bne.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8004ff2:	4b58      	ldr	r3, [pc, #352]	; (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004ff4:	61fb      	str	r3, [r7, #28]
          break;
 8004ff6:	e00c      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004ff8:	4b55      	ldr	r3, [pc, #340]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b02      	cmp	r3, #2
 8005004:	d107      	bne.n	8005016 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8005006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800500a:	61fb      	str	r3, [r7, #28]
          break;
 800500c:	e003      	b.n	8005016 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 800500e:	bf00      	nop
 8005010:	e25e      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005012:	bf00      	nop
 8005014:	e25c      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005016:	bf00      	nop
        break;
 8005018:	e25a      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800501a:	4b4d      	ldr	r3, [pc, #308]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800501c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005020:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800502c:	d007      	beq.n	800503e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005034:	d12f      	bne.n	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005036:	f7fe fe53 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 800503a:	61f8      	str	r0, [r7, #28]
          break;
 800503c:	e02e      	b.n	800509c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800503e:	4b44      	ldr	r3, [pc, #272]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005046:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800504a:	d126      	bne.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800504c:	4b40      	ldr	r3, [pc, #256]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d020      	beq.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005058:	4b3d      	ldr	r3, [pc, #244]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	0a1b      	lsrs	r3, r3, #8
 800505e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005062:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	fb03 f202 	mul.w	r2, r3, r2
 800506c:	4b38      	ldr	r3, [pc, #224]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	091b      	lsrs	r3, r3, #4
 8005072:	f003 030f 	and.w	r3, r3, #15
 8005076:	3301      	adds	r3, #1
 8005078:	fbb2 f3f3 	udiv	r3, r2, r3
 800507c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800507e:	4b34      	ldr	r3, [pc, #208]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	0e5b      	lsrs	r3, r3, #25
 8005084:	f003 0303 	and.w	r3, r3, #3
 8005088:	3301      	adds	r3, #1
 800508a:	005b      	lsls	r3, r3, #1
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005092:	61fb      	str	r3, [r7, #28]
          break;
 8005094:	e001      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8005096:	bf00      	nop
 8005098:	e21a      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800509a:	bf00      	nop
        break;
 800509c:	e218      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800509e:	4b2c      	ldr	r3, [pc, #176]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80050a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050a4:	f003 0304 	and.w	r3, r3, #4
 80050a8:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d103      	bne.n	80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 80050b0:	f7fe fec4 	bl	8003e3c <HAL_RCC_GetPCLK2Freq>
 80050b4:	61f8      	str	r0, [r7, #28]
        break;
 80050b6:	e20b      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 80050b8:	f7fe fe12 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 80050bc:	61f8      	str	r0, [r7, #28]
        break;
 80050be:	e207      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80050c0:	4b23      	ldr	r3, [pc, #140]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80050c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050c6:	f003 0318 	and.w	r3, r3, #24
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2b10      	cmp	r3, #16
 80050d0:	d010      	beq.n	80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2b10      	cmp	r3, #16
 80050d6:	d834      	bhi.n	8005142 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d024      	beq.n	800512e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 80050e4:	e02d      	b.n	8005142 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80050e6:	69b9      	ldr	r1, [r7, #24]
 80050e8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80050ec:	f000 fbe2 	bl	80058b4 <RCCEx_GetSAIxPeriphCLKFreq>
 80050f0:	61f8      	str	r0, [r7, #28]
          break;
 80050f2:	e02b      	b.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80050f4:	4b16      	ldr	r3, [pc, #88]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d122      	bne.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005100:	4b13      	ldr	r3, [pc, #76]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b00      	cmp	r3, #0
 800510a:	d005      	beq.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800510c:	4b10      	ldr	r3, [pc, #64]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	091b      	lsrs	r3, r3, #4
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	e005      	b.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8005118:	4b0d      	ldr	r3, [pc, #52]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800511a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800511e:	0a1b      	lsrs	r3, r3, #8
 8005120:	f003 030f 	and.w	r3, r3, #15
 8005124:	4a0c      	ldr	r2, [pc, #48]	; (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800512a:	61fb      	str	r3, [r7, #28]
          break;
 800512c:	e00b      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800512e:	4b08      	ldr	r3, [pc, #32]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800513a:	d106      	bne.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800513c:	4b05      	ldr	r3, [pc, #20]	; (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800513e:	61fb      	str	r3, [r7, #28]
          break;
 8005140:	e003      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8005142:	bf00      	nop
 8005144:	e1c4      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005146:	bf00      	nop
 8005148:	e1c2      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800514a:	bf00      	nop
        break;
 800514c:	e1c0      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800514e:	bf00      	nop
 8005150:	40021000 	.word	0x40021000
 8005154:	00f42400 	.word	0x00f42400
 8005158:	080118ac 	.word	0x080118ac
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800515c:	4b96      	ldr	r3, [pc, #600]	; (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800515e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005162:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800516e:	d013      	beq.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005176:	d819      	bhi.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d004      	beq.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005184:	d004      	beq.n	8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8005186:	e011      	b.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005188:	f7fe fe42 	bl	8003e10 <HAL_RCC_GetPCLK1Freq>
 800518c:	61f8      	str	r0, [r7, #28]
          break;
 800518e:	e010      	b.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8005190:	f7fe fda6 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8005194:	61f8      	str	r0, [r7, #28]
          break;
 8005196:	e00c      	b.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005198:	4b87      	ldr	r3, [pc, #540]	; (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051a4:	d104      	bne.n	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 80051a6:	4b85      	ldr	r3, [pc, #532]	; (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80051a8:	61fb      	str	r3, [r7, #28]
          break;
 80051aa:	e001      	b.n	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 80051ac:	bf00      	nop
 80051ae:	e18f      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80051b0:	bf00      	nop
        break;
 80051b2:	e18d      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80051b4:	4b80      	ldr	r3, [pc, #512]	; (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80051b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051c6:	d013      	beq.n	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051ce:	d819      	bhi.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d004      	beq.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051dc:	d004      	beq.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 80051de:	e011      	b.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 80051e0:	f7fe fe16 	bl	8003e10 <HAL_RCC_GetPCLK1Freq>
 80051e4:	61f8      	str	r0, [r7, #28]
          break;
 80051e6:	e010      	b.n	800520a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 80051e8:	f7fe fd7a 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 80051ec:	61f8      	str	r0, [r7, #28]
          break;
 80051ee:	e00c      	b.n	800520a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80051f0:	4b71      	ldr	r3, [pc, #452]	; (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051fc:	d104      	bne.n	8005208 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 80051fe:	4b6f      	ldr	r3, [pc, #444]	; (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005200:	61fb      	str	r3, [r7, #28]
          break;
 8005202:	e001      	b.n	8005208 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8005204:	bf00      	nop
 8005206:	e163      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005208:	bf00      	nop
        break;
 800520a:	e161      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800520c:	4b6a      	ldr	r3, [pc, #424]	; (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800520e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005212:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800521e:	d013      	beq.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005226:	d819      	bhi.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d004      	beq.n	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005234:	d004      	beq.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8005236:	e011      	b.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005238:	f7fe fdea 	bl	8003e10 <HAL_RCC_GetPCLK1Freq>
 800523c:	61f8      	str	r0, [r7, #28]
          break;
 800523e:	e010      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8005240:	f7fe fd4e 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8005244:	61f8      	str	r0, [r7, #28]
          break;
 8005246:	e00c      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005248:	4b5b      	ldr	r3, [pc, #364]	; (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005254:	d104      	bne.n	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8005256:	4b59      	ldr	r3, [pc, #356]	; (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005258:	61fb      	str	r3, [r7, #28]
          break;
 800525a:	e001      	b.n	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 800525c:	bf00      	nop
 800525e:	e137      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005260:	bf00      	nop
        break;
 8005262:	e135      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005264:	4b54      	ldr	r3, [pc, #336]	; (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005266:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800526a:	f003 0303 	and.w	r3, r3, #3
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2b02      	cmp	r3, #2
 8005274:	d011      	beq.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b02      	cmp	r3, #2
 800527a:	d818      	bhi.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d004      	beq.n	8005292 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8005288:	e011      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800528a:	f7fe fdc1 	bl	8003e10 <HAL_RCC_GetPCLK1Freq>
 800528e:	61f8      	str	r0, [r7, #28]
          break;
 8005290:	e010      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8005292:	f7fe fd25 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8005296:	61f8      	str	r0, [r7, #28]
          break;
 8005298:	e00c      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800529a:	4b47      	ldr	r3, [pc, #284]	; (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a6:	d104      	bne.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 80052a8:	4b44      	ldr	r3, [pc, #272]	; (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80052aa:	61fb      	str	r3, [r7, #28]
          break;
 80052ac:	e001      	b.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 80052ae:	bf00      	nop
 80052b0:	e10e      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80052b2:	bf00      	nop
        break;
 80052b4:	e10c      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80052b6:	4b40      	ldr	r3, [pc, #256]	; (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80052b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052bc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80052c8:	d02c      	beq.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80052d0:	d833      	bhi.n	800533a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80052d8:	d01a      	beq.n	8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80052e0:	d82b      	bhi.n	800533a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d004      	beq.n	80052f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052ee:	d004      	beq.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 80052f0:	e023      	b.n	800533a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80052f2:	f7fe fd8d 	bl	8003e10 <HAL_RCC_GetPCLK1Freq>
 80052f6:	61f8      	str	r0, [r7, #28]
          break;
 80052f8:	e026      	b.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80052fa:	4b2f      	ldr	r3, [pc, #188]	; (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80052fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b02      	cmp	r3, #2
 8005306:	d11a      	bne.n	800533e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8005308:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800530c:	61fb      	str	r3, [r7, #28]
          break;
 800530e:	e016      	b.n	800533e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005310:	4b29      	ldr	r3, [pc, #164]	; (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800531c:	d111      	bne.n	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800531e:	4b27      	ldr	r3, [pc, #156]	; (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005320:	61fb      	str	r3, [r7, #28]
          break;
 8005322:	e00e      	b.n	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005324:	4b24      	ldr	r3, [pc, #144]	; (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532a:	f003 0302 	and.w	r3, r3, #2
 800532e:	2b02      	cmp	r3, #2
 8005330:	d109      	bne.n	8005346 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8005332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005336:	61fb      	str	r3, [r7, #28]
          break;
 8005338:	e005      	b.n	8005346 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 800533a:	bf00      	nop
 800533c:	e0c8      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800533e:	bf00      	nop
 8005340:	e0c6      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005342:	bf00      	nop
 8005344:	e0c4      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005346:	bf00      	nop
        break;
 8005348:	e0c2      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800534a:	4b1b      	ldr	r3, [pc, #108]	; (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800534c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005350:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005354:	60fb      	str	r3, [r7, #12]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800535c:	d030      	beq.n	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005364:	d837      	bhi.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800536c:	d01a      	beq.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005374:	d82f      	bhi.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d004      	beq.n	8005386 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005382:	d004      	beq.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8005384:	e027      	b.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005386:	f7fe fd43 	bl	8003e10 <HAL_RCC_GetPCLK1Freq>
 800538a:	61f8      	str	r0, [r7, #28]
          break;
 800538c:	e02a      	b.n	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800538e:	4b0a      	ldr	r3, [pc, #40]	; (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005390:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b02      	cmp	r3, #2
 800539a:	d11e      	bne.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 800539c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80053a0:	61fb      	str	r3, [r7, #28]
          break;
 80053a2:	e01a      	b.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80053a4:	4b04      	ldr	r3, [pc, #16]	; (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053b0:	d115      	bne.n	80053de <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 80053b2:	4b02      	ldr	r3, [pc, #8]	; (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80053b4:	61fb      	str	r3, [r7, #28]
          break;
 80053b6:	e012      	b.n	80053de <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80053b8:	40021000 	.word	0x40021000
 80053bc:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80053c0:	4b46      	ldr	r3, [pc, #280]	; (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80053c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d109      	bne.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 80053ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053d2:	61fb      	str	r3, [r7, #28]
          break;
 80053d4:	e005      	b.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 80053d6:	bf00      	nop
 80053d8:	e07a      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80053da:	bf00      	nop
 80053dc:	e078      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80053de:	bf00      	nop
 80053e0:	e076      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80053e2:	bf00      	nop
        break;
 80053e4:	e074      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80053e6:	4b3d      	ldr	r3, [pc, #244]	; (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80053e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053ec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80053f0:	60fb      	str	r3, [r7, #12]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053f8:	d02c      	beq.n	8005454 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005400:	d855      	bhi.n	80054ae <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d004      	beq.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800540e:	d004      	beq.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8005410:	e04d      	b.n	80054ae <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005412:	f7fe fc65 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8005416:	61f8      	str	r0, [r7, #28]
          break;
 8005418:	e04e      	b.n	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800541a:	4b30      	ldr	r3, [pc, #192]	; (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b02      	cmp	r3, #2
 8005424:	d145      	bne.n	80054b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005426:	4b2d      	ldr	r3, [pc, #180]	; (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0308 	and.w	r3, r3, #8
 800542e:	2b00      	cmp	r3, #0
 8005430:	d005      	beq.n	800543e <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8005432:	4b2a      	ldr	r3, [pc, #168]	; (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	091b      	lsrs	r3, r3, #4
 8005438:	f003 030f 	and.w	r3, r3, #15
 800543c:	e005      	b.n	800544a <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800543e:	4b27      	ldr	r3, [pc, #156]	; (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005444:	0a1b      	lsrs	r3, r3, #8
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	4a25      	ldr	r2, [pc, #148]	; (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 800544c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005450:	61fb      	str	r3, [r7, #28]
          break;
 8005452:	e02e      	b.n	80054b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005454:	4b21      	ldr	r3, [pc, #132]	; (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800545c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005460:	d129      	bne.n	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005462:	4b1e      	ldr	r3, [pc, #120]	; (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800546a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800546e:	d122      	bne.n	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005470:	4b1a      	ldr	r3, [pc, #104]	; (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	0a1b      	lsrs	r3, r3, #8
 8005476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800547a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	fb03 f202 	mul.w	r2, r3, r2
 8005484:	4b15      	ldr	r3, [pc, #84]	; (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	091b      	lsrs	r3, r3, #4
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	3301      	adds	r3, #1
 8005490:	fbb2 f3f3 	udiv	r3, r2, r3
 8005494:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005496:	4b11      	ldr	r3, [pc, #68]	; (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	0d5b      	lsrs	r3, r3, #21
 800549c:	f003 0303 	and.w	r3, r3, #3
 80054a0:	3301      	adds	r3, #1
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054aa:	61fb      	str	r3, [r7, #28]
          break;
 80054ac:	e003      	b.n	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 80054ae:	bf00      	nop
 80054b0:	e00e      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80054b2:	bf00      	nop
 80054b4:	e00c      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80054b6:	bf00      	nop
        break;
 80054b8:	e00a      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80054ba:	bf00      	nop
 80054bc:	e008      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80054be:	bf00      	nop
 80054c0:	e006      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80054c2:	bf00      	nop
 80054c4:	e004      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80054c6:	bf00      	nop
 80054c8:	e002      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80054ca:	bf00      	nop
 80054cc:	e000      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80054ce:	bf00      	nop
    }
  }

  return(frequency);
 80054d0:	69fb      	ldr	r3, [r7, #28]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3720      	adds	r7, #32
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	40021000 	.word	0x40021000
 80054e0:	080118ac 	.word	0x080118ac

080054e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054f2:	4b72      	ldr	r3, [pc, #456]	; (80056bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00e      	beq.n	800551c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80054fe:	4b6f      	ldr	r3, [pc, #444]	; (80056bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f003 0203 	and.w	r2, r3, #3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d103      	bne.n	8005516 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
       ||
 8005512:	2b00      	cmp	r3, #0
 8005514:	d142      	bne.n	800559c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	73fb      	strb	r3, [r7, #15]
 800551a:	e03f      	b.n	800559c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b03      	cmp	r3, #3
 8005522:	d018      	beq.n	8005556 <RCCEx_PLLSAI1_Config+0x72>
 8005524:	2b03      	cmp	r3, #3
 8005526:	d825      	bhi.n	8005574 <RCCEx_PLLSAI1_Config+0x90>
 8005528:	2b01      	cmp	r3, #1
 800552a:	d002      	beq.n	8005532 <RCCEx_PLLSAI1_Config+0x4e>
 800552c:	2b02      	cmp	r3, #2
 800552e:	d009      	beq.n	8005544 <RCCEx_PLLSAI1_Config+0x60>
 8005530:	e020      	b.n	8005574 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005532:	4b62      	ldr	r3, [pc, #392]	; (80056bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d11d      	bne.n	800557a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005542:	e01a      	b.n	800557a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005544:	4b5d      	ldr	r3, [pc, #372]	; (80056bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800554c:	2b00      	cmp	r3, #0
 800554e:	d116      	bne.n	800557e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005554:	e013      	b.n	800557e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005556:	4b59      	ldr	r3, [pc, #356]	; (80056bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10f      	bne.n	8005582 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005562:	4b56      	ldr	r3, [pc, #344]	; (80056bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d109      	bne.n	8005582 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005572:	e006      	b.n	8005582 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	73fb      	strb	r3, [r7, #15]
      break;
 8005578:	e004      	b.n	8005584 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800557a:	bf00      	nop
 800557c:	e002      	b.n	8005584 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800557e:	bf00      	nop
 8005580:	e000      	b.n	8005584 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005582:	bf00      	nop
    }

    if(status == HAL_OK)
 8005584:	7bfb      	ldrb	r3, [r7, #15]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d108      	bne.n	800559c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800558a:	4b4c      	ldr	r3, [pc, #304]	; (80056bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f023 0203 	bic.w	r2, r3, #3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4949      	ldr	r1, [pc, #292]	; (80056bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005598:	4313      	orrs	r3, r2
 800559a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f040 8086 	bne.w	80056b0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80055a4:	4b45      	ldr	r3, [pc, #276]	; (80056bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a44      	ldr	r2, [pc, #272]	; (80056bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80055aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055b0:	f7fb ff6a 	bl	8001488 <HAL_GetTick>
 80055b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055b6:	e009      	b.n	80055cc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055b8:	f7fb ff66 	bl	8001488 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d902      	bls.n	80055cc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	73fb      	strb	r3, [r7, #15]
        break;
 80055ca:	e005      	b.n	80055d8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055cc:	4b3b      	ldr	r3, [pc, #236]	; (80056bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1ef      	bne.n	80055b8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d168      	bne.n	80056b0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d113      	bne.n	800560c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055e4:	4b35      	ldr	r3, [pc, #212]	; (80056bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	4b35      	ldr	r3, [pc, #212]	; (80056c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055ea:	4013      	ands	r3, r2
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	6892      	ldr	r2, [r2, #8]
 80055f0:	0211      	lsls	r1, r2, #8
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	68d2      	ldr	r2, [r2, #12]
 80055f6:	06d2      	lsls	r2, r2, #27
 80055f8:	4311      	orrs	r1, r2
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	6852      	ldr	r2, [r2, #4]
 80055fe:	3a01      	subs	r2, #1
 8005600:	0112      	lsls	r2, r2, #4
 8005602:	430a      	orrs	r2, r1
 8005604:	492d      	ldr	r1, [pc, #180]	; (80056bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005606:	4313      	orrs	r3, r2
 8005608:	610b      	str	r3, [r1, #16]
 800560a:	e02d      	b.n	8005668 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d115      	bne.n	800563e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005612:	4b2a      	ldr	r3, [pc, #168]	; (80056bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005614:	691a      	ldr	r2, [r3, #16]
 8005616:	4b2b      	ldr	r3, [pc, #172]	; (80056c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005618:	4013      	ands	r3, r2
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6892      	ldr	r2, [r2, #8]
 800561e:	0211      	lsls	r1, r2, #8
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6912      	ldr	r2, [r2, #16]
 8005624:	0852      	lsrs	r2, r2, #1
 8005626:	3a01      	subs	r2, #1
 8005628:	0552      	lsls	r2, r2, #21
 800562a:	4311      	orrs	r1, r2
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	6852      	ldr	r2, [r2, #4]
 8005630:	3a01      	subs	r2, #1
 8005632:	0112      	lsls	r2, r2, #4
 8005634:	430a      	orrs	r2, r1
 8005636:	4921      	ldr	r1, [pc, #132]	; (80056bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005638:	4313      	orrs	r3, r2
 800563a:	610b      	str	r3, [r1, #16]
 800563c:	e014      	b.n	8005668 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800563e:	4b1f      	ldr	r3, [pc, #124]	; (80056bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005640:	691a      	ldr	r2, [r3, #16]
 8005642:	4b21      	ldr	r3, [pc, #132]	; (80056c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005644:	4013      	ands	r3, r2
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	6892      	ldr	r2, [r2, #8]
 800564a:	0211      	lsls	r1, r2, #8
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	6952      	ldr	r2, [r2, #20]
 8005650:	0852      	lsrs	r2, r2, #1
 8005652:	3a01      	subs	r2, #1
 8005654:	0652      	lsls	r2, r2, #25
 8005656:	4311      	orrs	r1, r2
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	6852      	ldr	r2, [r2, #4]
 800565c:	3a01      	subs	r2, #1
 800565e:	0112      	lsls	r2, r2, #4
 8005660:	430a      	orrs	r2, r1
 8005662:	4916      	ldr	r1, [pc, #88]	; (80056bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005664:	4313      	orrs	r3, r2
 8005666:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005668:	4b14      	ldr	r3, [pc, #80]	; (80056bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a13      	ldr	r2, [pc, #76]	; (80056bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800566e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005672:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005674:	f7fb ff08 	bl	8001488 <HAL_GetTick>
 8005678:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800567a:	e009      	b.n	8005690 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800567c:	f7fb ff04 	bl	8001488 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d902      	bls.n	8005690 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	73fb      	strb	r3, [r7, #15]
          break;
 800568e:	e005      	b.n	800569c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005690:	4b0a      	ldr	r3, [pc, #40]	; (80056bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0ef      	beq.n	800567c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800569c:	7bfb      	ldrb	r3, [r7, #15]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d106      	bne.n	80056b0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80056a2:	4b06      	ldr	r3, [pc, #24]	; (80056bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80056a4:	691a      	ldr	r2, [r3, #16]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	4904      	ldr	r1, [pc, #16]	; (80056bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	40021000 	.word	0x40021000
 80056c0:	07ff800f 	.word	0x07ff800f
 80056c4:	ff9f800f 	.word	0xff9f800f
 80056c8:	f9ff800f 	.word	0xf9ff800f

080056cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056da:	4b72      	ldr	r3, [pc, #456]	; (80058a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00e      	beq.n	8005704 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80056e6:	4b6f      	ldr	r3, [pc, #444]	; (80058a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f003 0203 	and.w	r2, r3, #3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d103      	bne.n	80056fe <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
       ||
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d142      	bne.n	8005784 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	73fb      	strb	r3, [r7, #15]
 8005702:	e03f      	b.n	8005784 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b03      	cmp	r3, #3
 800570a:	d018      	beq.n	800573e <RCCEx_PLLSAI2_Config+0x72>
 800570c:	2b03      	cmp	r3, #3
 800570e:	d825      	bhi.n	800575c <RCCEx_PLLSAI2_Config+0x90>
 8005710:	2b01      	cmp	r3, #1
 8005712:	d002      	beq.n	800571a <RCCEx_PLLSAI2_Config+0x4e>
 8005714:	2b02      	cmp	r3, #2
 8005716:	d009      	beq.n	800572c <RCCEx_PLLSAI2_Config+0x60>
 8005718:	e020      	b.n	800575c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800571a:	4b62      	ldr	r3, [pc, #392]	; (80058a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d11d      	bne.n	8005762 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800572a:	e01a      	b.n	8005762 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800572c:	4b5d      	ldr	r3, [pc, #372]	; (80058a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005734:	2b00      	cmp	r3, #0
 8005736:	d116      	bne.n	8005766 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800573c:	e013      	b.n	8005766 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800573e:	4b59      	ldr	r3, [pc, #356]	; (80058a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10f      	bne.n	800576a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800574a:	4b56      	ldr	r3, [pc, #344]	; (80058a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d109      	bne.n	800576a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800575a:	e006      	b.n	800576a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	73fb      	strb	r3, [r7, #15]
      break;
 8005760:	e004      	b.n	800576c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005762:	bf00      	nop
 8005764:	e002      	b.n	800576c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005766:	bf00      	nop
 8005768:	e000      	b.n	800576c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800576a:	bf00      	nop
    }

    if(status == HAL_OK)
 800576c:	7bfb      	ldrb	r3, [r7, #15]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d108      	bne.n	8005784 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005772:	4b4c      	ldr	r3, [pc, #304]	; (80058a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f023 0203 	bic.w	r2, r3, #3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4949      	ldr	r1, [pc, #292]	; (80058a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005780:	4313      	orrs	r3, r2
 8005782:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005784:	7bfb      	ldrb	r3, [r7, #15]
 8005786:	2b00      	cmp	r3, #0
 8005788:	f040 8086 	bne.w	8005898 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800578c:	4b45      	ldr	r3, [pc, #276]	; (80058a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a44      	ldr	r2, [pc, #272]	; (80058a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005796:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005798:	f7fb fe76 	bl	8001488 <HAL_GetTick>
 800579c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800579e:	e009      	b.n	80057b4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057a0:	f7fb fe72 	bl	8001488 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d902      	bls.n	80057b4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	73fb      	strb	r3, [r7, #15]
        break;
 80057b2:	e005      	b.n	80057c0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057b4:	4b3b      	ldr	r3, [pc, #236]	; (80058a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1ef      	bne.n	80057a0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d168      	bne.n	8005898 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d113      	bne.n	80057f4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057cc:	4b35      	ldr	r3, [pc, #212]	; (80058a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057ce:	695a      	ldr	r2, [r3, #20]
 80057d0:	4b35      	ldr	r3, [pc, #212]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1dc>)
 80057d2:	4013      	ands	r3, r2
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6892      	ldr	r2, [r2, #8]
 80057d8:	0211      	lsls	r1, r2, #8
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	68d2      	ldr	r2, [r2, #12]
 80057de:	06d2      	lsls	r2, r2, #27
 80057e0:	4311      	orrs	r1, r2
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	6852      	ldr	r2, [r2, #4]
 80057e6:	3a01      	subs	r2, #1
 80057e8:	0112      	lsls	r2, r2, #4
 80057ea:	430a      	orrs	r2, r1
 80057ec:	492d      	ldr	r1, [pc, #180]	; (80058a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	614b      	str	r3, [r1, #20]
 80057f2:	e02d      	b.n	8005850 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d115      	bne.n	8005826 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057fa:	4b2a      	ldr	r3, [pc, #168]	; (80058a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057fc:	695a      	ldr	r2, [r3, #20]
 80057fe:	4b2b      	ldr	r3, [pc, #172]	; (80058ac <RCCEx_PLLSAI2_Config+0x1e0>)
 8005800:	4013      	ands	r3, r2
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	6892      	ldr	r2, [r2, #8]
 8005806:	0211      	lsls	r1, r2, #8
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6912      	ldr	r2, [r2, #16]
 800580c:	0852      	lsrs	r2, r2, #1
 800580e:	3a01      	subs	r2, #1
 8005810:	0552      	lsls	r2, r2, #21
 8005812:	4311      	orrs	r1, r2
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	6852      	ldr	r2, [r2, #4]
 8005818:	3a01      	subs	r2, #1
 800581a:	0112      	lsls	r2, r2, #4
 800581c:	430a      	orrs	r2, r1
 800581e:	4921      	ldr	r1, [pc, #132]	; (80058a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005820:	4313      	orrs	r3, r2
 8005822:	614b      	str	r3, [r1, #20]
 8005824:	e014      	b.n	8005850 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005826:	4b1f      	ldr	r3, [pc, #124]	; (80058a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005828:	695a      	ldr	r2, [r3, #20]
 800582a:	4b21      	ldr	r3, [pc, #132]	; (80058b0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800582c:	4013      	ands	r3, r2
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	6892      	ldr	r2, [r2, #8]
 8005832:	0211      	lsls	r1, r2, #8
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	6952      	ldr	r2, [r2, #20]
 8005838:	0852      	lsrs	r2, r2, #1
 800583a:	3a01      	subs	r2, #1
 800583c:	0652      	lsls	r2, r2, #25
 800583e:	4311      	orrs	r1, r2
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6852      	ldr	r2, [r2, #4]
 8005844:	3a01      	subs	r2, #1
 8005846:	0112      	lsls	r2, r2, #4
 8005848:	430a      	orrs	r2, r1
 800584a:	4916      	ldr	r1, [pc, #88]	; (80058a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800584c:	4313      	orrs	r3, r2
 800584e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005850:	4b14      	ldr	r3, [pc, #80]	; (80058a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a13      	ldr	r2, [pc, #76]	; (80058a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800585a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800585c:	f7fb fe14 	bl	8001488 <HAL_GetTick>
 8005860:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005862:	e009      	b.n	8005878 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005864:	f7fb fe10 	bl	8001488 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d902      	bls.n	8005878 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	73fb      	strb	r3, [r7, #15]
          break;
 8005876:	e005      	b.n	8005884 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005878:	4b0a      	ldr	r3, [pc, #40]	; (80058a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0ef      	beq.n	8005864 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005884:	7bfb      	ldrb	r3, [r7, #15]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d106      	bne.n	8005898 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800588a:	4b06      	ldr	r3, [pc, #24]	; (80058a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800588c:	695a      	ldr	r2, [r3, #20]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	4904      	ldr	r1, [pc, #16]	; (80058a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005894:	4313      	orrs	r3, r2
 8005896:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005898:	7bfb      	ldrb	r3, [r7, #15]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	40021000 	.word	0x40021000
 80058a8:	07ff800f 	.word	0x07ff800f
 80058ac:	ff9f800f 	.word	0xff9f800f
 80058b0:	f9ff800f 	.word	0xf9ff800f

080058b4 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b089      	sub	sp, #36	; 0x24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058d0:	d10b      	bne.n	80058ea <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80058d2:	4b7e      	ldr	r3, [pc, #504]	; (8005acc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80058d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058d8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80058dc:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	2b60      	cmp	r3, #96	; 0x60
 80058e2:	d112      	bne.n	800590a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80058e4:	4b7a      	ldr	r3, [pc, #488]	; (8005ad0 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80058e6:	61fb      	str	r3, [r7, #28]
 80058e8:	e00f      	b.n	800590a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058f0:	d10b      	bne.n	800590a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80058f2:	4b76      	ldr	r3, [pc, #472]	; (8005acc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80058f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058fc:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005904:	d101      	bne.n	800590a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005906:	4b72      	ldr	r3, [pc, #456]	; (8005ad0 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8005908:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	2b00      	cmp	r3, #0
 800590e:	f040 80d6 	bne.w	8005abe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	2b40      	cmp	r3, #64	; 0x40
 800591a:	d003      	beq.n	8005924 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005922:	d13b      	bne.n	800599c <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005924:	4b69      	ldr	r3, [pc, #420]	; (8005acc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800592c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005930:	f040 80c4 	bne.w	8005abc <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8005934:	4b65      	ldr	r3, [pc, #404]	; (8005acc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 80bd 	beq.w	8005abc <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005942:	4b62      	ldr	r3, [pc, #392]	; (8005acc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	091b      	lsrs	r3, r3, #4
 8005948:	f003 030f 	and.w	r3, r3, #15
 800594c:	3301      	adds	r3, #1
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	fbb2 f3f3 	udiv	r3, r2, r3
 8005954:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005956:	4b5d      	ldr	r3, [pc, #372]	; (8005acc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	0a1b      	lsrs	r3, r3, #8
 800595c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005960:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005962:	4b5a      	ldr	r3, [pc, #360]	; (8005acc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	0edb      	lsrs	r3, r3, #27
 8005968:	f003 031f 	and.w	r3, r3, #31
 800596c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10a      	bne.n	800598a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005974:	4b55      	ldr	r3, [pc, #340]	; (8005acc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8005980:	2311      	movs	r3, #17
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	e001      	b.n	800598a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8005986:	2307      	movs	r3, #7
 8005988:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	fb03 f202 	mul.w	r2, r3, r2
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	fbb2 f3f3 	udiv	r3, r2, r3
 8005998:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800599a:	e08f      	b.n	8005abc <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d13a      	bne.n	8005a18 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80059a2:	4b4a      	ldr	r3, [pc, #296]	; (8005acc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059ae:	f040 8086 	bne.w	8005abe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80059b2:	4b46      	ldr	r3, [pc, #280]	; (8005acc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d07f      	beq.n	8005abe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80059be:	4b43      	ldr	r3, [pc, #268]	; (8005acc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	091b      	lsrs	r3, r3, #4
 80059c4:	f003 030f 	and.w	r3, r3, #15
 80059c8:	3301      	adds	r3, #1
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d0:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80059d2:	4b3e      	ldr	r3, [pc, #248]	; (8005acc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	0a1b      	lsrs	r3, r3, #8
 80059d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059dc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80059de:	4b3b      	ldr	r3, [pc, #236]	; (8005acc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	0edb      	lsrs	r3, r3, #27
 80059e4:	f003 031f 	and.w	r3, r3, #31
 80059e8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10a      	bne.n	8005a06 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80059f0:	4b36      	ldr	r3, [pc, #216]	; (8005acc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d002      	beq.n	8005a02 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80059fc:	2311      	movs	r3, #17
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	e001      	b.n	8005a06 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8005a02:	2307      	movs	r3, #7
 8005a04:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	fb03 f202 	mul.w	r2, r3, r2
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a14:	61fb      	str	r3, [r7, #28]
 8005a16:	e052      	b.n	8005abe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	2b80      	cmp	r3, #128	; 0x80
 8005a1c:	d003      	beq.n	8005a26 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a24:	d109      	bne.n	8005a3a <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a26:	4b29      	ldr	r3, [pc, #164]	; (8005acc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a32:	d144      	bne.n	8005abe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8005a34:	4b27      	ldr	r3, [pc, #156]	; (8005ad4 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8005a36:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a38:	e041      	b.n	8005abe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	d003      	beq.n	8005a48 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a46:	d13a      	bne.n	8005abe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8005a48:	4b20      	ldr	r3, [pc, #128]	; (8005acc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a54:	d133      	bne.n	8005abe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8005a56:	4b1d      	ldr	r3, [pc, #116]	; (8005acc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d02d      	beq.n	8005abe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8005a62:	4b1a      	ldr	r3, [pc, #104]	; (8005acc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	091b      	lsrs	r3, r3, #4
 8005a68:	f003 030f 	and.w	r3, r3, #15
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a74:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005a76:	4b15      	ldr	r3, [pc, #84]	; (8005acc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	0a1b      	lsrs	r3, r3, #8
 8005a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a80:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8005a82:	4b12      	ldr	r3, [pc, #72]	; (8005acc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	0edb      	lsrs	r3, r3, #27
 8005a88:	f003 031f 	and.w	r3, r3, #31
 8005a8c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10a      	bne.n	8005aaa <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005a94:	4b0d      	ldr	r3, [pc, #52]	; (8005acc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8005aa0:	2311      	movs	r3, #17
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	e001      	b.n	8005aaa <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8005aa6:	2307      	movs	r3, #7
 8005aa8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	fb03 f202 	mul.w	r2, r3, r2
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab8:	61fb      	str	r3, [r7, #28]
 8005aba:	e000      	b.n	8005abe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005abc:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8005abe:	69fb      	ldr	r3, [r7, #28]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3724      	adds	r7, #36	; 0x24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	40021000 	.word	0x40021000
 8005ad0:	001fff68 	.word	0x001fff68
 8005ad4:	00f42400 	.word	0x00f42400

08005ad8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08a      	sub	sp, #40	; 0x28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e078      	b.n	8005bdc <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d105      	bne.n	8005b02 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7fb fa57 	bl	8000fb0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2203      	movs	r2, #3
 8005b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f86a 	bl	8005be4 <HAL_SD_InitCard>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e060      	b.n	8005bdc <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005b1a:	f107 0308 	add.w	r3, r7, #8
 8005b1e:	4619      	mov	r1, r3
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 fdcd 	bl	80066c0 <HAL_SD_GetCardStatus>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d001      	beq.n	8005b30 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e055      	b.n	8005bdc <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005b30:	7e3b      	ldrb	r3, [r7, #24]
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005b36:	7e7b      	ldrb	r3, [r7, #25]
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d10a      	bne.n	8005b5a <HAL_SD_Init+0x82>
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d102      	bne.n	8005b50 <HAL_SD_Init+0x78>
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d004      	beq.n	8005b5a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b56:	65da      	str	r2, [r3, #92]	; 0x5c
 8005b58:	e00b      	b.n	8005b72 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d104      	bne.n	8005b6c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b68:	65da      	str	r2, [r3, #92]	; 0x5c
 8005b6a:	e002      	b.n	8005b72 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	4619      	mov	r1, r3
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fe83 	bl	8006884 <HAL_SD_ConfigWideBusOperation>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d001      	beq.n	8005b88 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e029      	b.n	8005bdc <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005b88:	f7fb fc7e 	bl	8001488 <HAL_GetTick>
 8005b8c:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005b8e:	e014      	b.n	8005bba <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8005b90:	f7fb fc7a 	bl	8001488 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b9e:	d10c      	bne.n	8005bba <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ba6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e010      	b.n	8005bdc <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 ff76 	bl	8006aac <HAL_SD_GetCardState>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d1e4      	bne.n	8005b90 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3728      	adds	r7, #40	; 0x28
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005be4:	b5b0      	push	{r4, r5, r7, lr}
 8005be6:	b08e      	sub	sp, #56	; 0x38
 8005be8:	af04      	add	r7, sp, #16
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005bec:	2300      	movs	r3, #0
 8005bee:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005bfc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005c00:	f7fe fd4e 	bl	80046a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005c04:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d109      	bne.n	8005c20 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c1a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e079      	b.n	8005d14 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	0a1b      	lsrs	r3, r3, #8
 8005c24:	4a3d      	ldr	r2, [pc, #244]	; (8005d1c <HAL_SD_InitCard+0x138>)
 8005c26:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2a:	091b      	lsrs	r3, r3, #4
 8005c2c:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d107      	bne.n	8005c4c <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0210 	orr.w	r2, r2, #16
 8005c4a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681d      	ldr	r5, [r3, #0]
 8005c50:	466c      	mov	r4, sp
 8005c52:	f107 0314 	add.w	r3, r7, #20
 8005c56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005c5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005c5e:	f107 0308 	add.w	r3, r7, #8
 8005c62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c64:	4628      	mov	r0, r5
 8005c66:	f003 f8ad 	bl	8008dc4 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f003 f8f0 	bl	8008e54 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	005b      	lsls	r3, r3, #1
 8005c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7e:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8005c80:	4a27      	ldr	r2, [pc, #156]	; (8005d20 <HAL_SD_InitCard+0x13c>)
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c88:	3301      	adds	r3, #1
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fb fc08 	bl	80014a0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 ffeb 	bl	8006c6c <SD_PowerON>
 8005c96:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00b      	beq.n	8005cb6 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	431a      	orrs	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e02e      	b.n	8005d14 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 ff18 	bl	8006aec <SD_InitCard>
 8005cbc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00b      	beq.n	8005cdc <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e01b      	b.n	8005d14 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f003 f94b 	bl	8008f80 <SDMMC_CmdBlockLength>
 8005cea:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00f      	beq.n	8005d12 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a0b      	ldr	r2, [pc, #44]	; (8005d24 <HAL_SD_InitCard+0x140>)
 8005cf8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	431a      	orrs	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e000      	b.n	8005d14 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3728      	adds	r7, #40	; 0x28
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8005d1c:	014f8b59 	.word	0x014f8b59
 8005d20:	00012110 	.word	0x00012110
 8005d24:	1fe00fff 	.word	0x1fe00fff

08005d28 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b092      	sub	sp, #72	; 0x48
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005d36:	f7fb fba7 	bl	8001488 <HAL_GetTick>
 8005d3a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d107      	bne.n	8005d5a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e170      	b.n	800603c <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	f040 8163 	bne.w	800602e <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005d6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	441a      	add	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d907      	bls.n	8005d8c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d80:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e157      	b.n	800603c <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2203      	movs	r2, #3
 8005d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d002      	beq.n	8005daa <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da6:	025b      	lsls	r3, r3, #9
 8005da8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005daa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dae:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	025b      	lsls	r3, r3, #9
 8005db4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005db6:	2390      	movs	r3, #144	; 0x90
 8005db8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005dba:	2302      	movs	r3, #2
 8005dbc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f107 0214 	add.w	r2, r7, #20
 8005dce:	4611      	mov	r1, r2
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f003 f8a9 	bl	8008f28 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68da      	ldr	r2, [r3, #12]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005de4:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d90a      	bls.n	8005e02 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2202      	movs	r2, #2
 8005df0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f003 f907 	bl	800900c <SDMMC_CmdReadMultiBlock>
 8005dfe:	6478      	str	r0, [r7, #68]	; 0x44
 8005e00:	e009      	b.n	8005e16 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2201      	movs	r2, #1
 8005e06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f003 f8d9 	bl	8008fc6 <SDMMC_CmdReadSingleBlock>
 8005e14:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d012      	beq.n	8005e42 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a88      	ldr	r2, [pc, #544]	; (8006044 <HAL_SD_ReadBlocks+0x31c>)
 8005e22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e0fc      	b.n	800603c <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005e46:	e061      	b.n	8005f0c <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d03c      	beq.n	8005ed0 <HAL_SD_ReadBlocks+0x1a8>
 8005e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d039      	beq.n	8005ed0 <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	643b      	str	r3, [r7, #64]	; 0x40
 8005e60:	e033      	b.n	8005eca <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f002 ffd6 	bl	8008e18 <SDMMC_ReadFIFO>
 8005e6c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e74:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e78:	3301      	adds	r3, #1
 8005e7a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e84:	0a1b      	lsrs	r3, r3, #8
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8e:	3301      	adds	r3, #1
 8005e90:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e94:	3b01      	subs	r3, #1
 8005e96:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9a:	0c1b      	lsrs	r3, r3, #16
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb0:	0e1b      	lsrs	r3, r3, #24
 8005eb2:	b2da      	uxtb	r2, r3
 8005eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eba:	3301      	adds	r3, #1
 8005ebc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8005ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	643b      	str	r3, [r7, #64]	; 0x40
 8005eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ecc:	2b07      	cmp	r3, #7
 8005ece:	d9c8      	bls.n	8005e62 <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005ed0:	f7fb fada 	bl	8001488 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d902      	bls.n	8005ee6 <HAL_SD_ReadBlocks+0x1be>
 8005ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d112      	bne.n	8005f0c <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a56      	ldr	r2, [pc, #344]	; (8006044 <HAL_SD_ReadBlocks+0x31c>)
 8005eec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e097      	b.n	800603c <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f12:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d096      	beq.n	8005e48 <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68da      	ldr	r2, [r3, #12]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f28:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d022      	beq.n	8005f7e <HAL_SD_ReadBlocks+0x256>
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d91f      	bls.n	8005f7e <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f42:	2b03      	cmp	r3, #3
 8005f44:	d01b      	beq.n	8005f7e <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f003 f8c8 	bl	80090e0 <SDMMC_CmdStopTransfer>
 8005f50:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d012      	beq.n	8005f7e <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a39      	ldr	r2, [pc, #228]	; (8006044 <HAL_SD_ReadBlocks+0x31c>)
 8005f5e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f66:	431a      	orrs	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e05e      	b.n	800603c <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f84:	f003 0308 	and.w	r3, r3, #8
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d012      	beq.n	8005fb2 <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a2c      	ldr	r2, [pc, #176]	; (8006044 <HAL_SD_ReadBlocks+0x31c>)
 8005f92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f98:	f043 0208 	orr.w	r2, r3, #8
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e044      	b.n	800603c <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d012      	beq.n	8005fe6 <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a1f      	ldr	r2, [pc, #124]	; (8006044 <HAL_SD_ReadBlocks+0x31c>)
 8005fc6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fcc:	f043 0202 	orr.w	r2, r3, #2
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e02a      	b.n	800603c <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fec:	f003 0320 	and.w	r3, r3, #32
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d012      	beq.n	800601a <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a12      	ldr	r2, [pc, #72]	; (8006044 <HAL_SD_ReadBlocks+0x31c>)
 8005ffa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006000:	f043 0220 	orr.w	r2, r3, #32
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e010      	b.n	800603c <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a0a      	ldr	r2, [pc, #40]	; (8006048 <HAL_SD_ReadBlocks+0x320>)
 8006020:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	e006      	b.n	800603c <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006032:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
  }
}
 800603c:	4618      	mov	r0, r3
 800603e:	3748      	adds	r7, #72	; 0x48
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	1fe00fff 	.word	0x1fe00fff
 8006048:	18000f3a 	.word	0x18000f3a

0800604c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b092      	sub	sp, #72	; 0x48
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
 8006058:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800605a:	f7fb fa15 	bl	8001488 <HAL_GetTick>
 800605e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d107      	bne.n	800607e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006072:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e174      	b.n	8006368 <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b01      	cmp	r3, #1
 8006088:	f040 8167 	bne.w	800635a <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006092:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	441a      	add	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609c:	429a      	cmp	r2, r3
 800609e:	d907      	bls.n	80060b0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e15b      	b.n	8006368 <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2203      	movs	r2, #3
 80060b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2200      	movs	r2, #0
 80060be:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d002      	beq.n	80060ce <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80060c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ca:	025b      	lsls	r3, r3, #9
 80060cc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80060ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060d2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	025b      	lsls	r3, r3, #9
 80060d8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80060da:	2390      	movs	r3, #144	; 0x90
 80060dc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80060de:	2300      	movs	r3, #0
 80060e0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80060e2:	2300      	movs	r3, #0
 80060e4:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80060e6:	2300      	movs	r3, #0
 80060e8:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f107 0218 	add.w	r2, r7, #24
 80060f2:	4611      	mov	r1, r2
 80060f4:	4618      	mov	r0, r3
 80060f6:	f002 ff17 	bl	8008f28 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68da      	ldr	r2, [r3, #12]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006108:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d90a      	bls.n	8006126 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2220      	movs	r2, #32
 8006114:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800611c:	4618      	mov	r0, r3
 800611e:	f002 ffbb 	bl	8009098 <SDMMC_CmdWriteMultiBlock>
 8006122:	6478      	str	r0, [r7, #68]	; 0x44
 8006124:	e009      	b.n	800613a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2210      	movs	r2, #16
 800612a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006132:	4618      	mov	r0, r3
 8006134:	f002 ff8d 	bl	8009052 <SDMMC_CmdWriteSingleBlock>
 8006138:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800613a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800613c:	2b00      	cmp	r3, #0
 800613e:	d012      	beq.n	8006166 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a8a      	ldr	r2, [pc, #552]	; (8006370 <HAL_SD_WriteBlocks+0x324>)
 8006146:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800614c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800614e:	431a      	orrs	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e100      	b.n	8006368 <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800616a:	e065      	b.n	8006238 <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d040      	beq.n	80061fc <HAL_SD_WriteBlocks+0x1b0>
 800617a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800617c:	2b00      	cmp	r3, #0
 800617e:	d03d      	beq.n	80061fc <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006180:	2300      	movs	r3, #0
 8006182:	643b      	str	r3, [r7, #64]	; 0x40
 8006184:	e037      	b.n	80061f6 <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 8006186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800618c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618e:	3301      	adds	r3, #1
 8006190:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006194:	3b01      	subs	r3, #1
 8006196:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	021a      	lsls	r2, r3, #8
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80061a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a6:	3301      	adds	r3, #1
 80061a8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80061aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ac:	3b01      	subs	r3, #1
 80061ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80061b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	041a      	lsls	r2, r3, #16
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80061bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061be:	3301      	adds	r3, #1
 80061c0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80061c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c4:	3b01      	subs	r3, #1
 80061c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80061c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	061a      	lsls	r2, r3, #24
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80061d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d6:	3301      	adds	r3, #1
 80061d8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80061da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061dc:	3b01      	subs	r3, #1
 80061de:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f107 0214 	add.w	r2, r7, #20
 80061e8:	4611      	mov	r1, r2
 80061ea:	4618      	mov	r0, r3
 80061ec:	f002 fe21 	bl	8008e32 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80061f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061f2:	3301      	adds	r3, #1
 80061f4:	643b      	str	r3, [r7, #64]	; 0x40
 80061f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061f8:	2b07      	cmp	r3, #7
 80061fa:	d9c4      	bls.n	8006186 <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80061fc:	f7fb f944 	bl	8001488 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006208:	429a      	cmp	r2, r3
 800620a:	d902      	bls.n	8006212 <HAL_SD_WriteBlocks+0x1c6>
 800620c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800620e:	2b00      	cmp	r3, #0
 8006210:	d112      	bne.n	8006238 <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a56      	ldr	r2, [pc, #344]	; (8006370 <HAL_SD_WriteBlocks+0x324>)
 8006218:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800621e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006220:	431a      	orrs	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e097      	b.n	8006368 <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800623e:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8006242:	2b00      	cmp	r3, #0
 8006244:	d092      	beq.n	800616c <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68da      	ldr	r2, [r3, #12]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006254:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800625c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006260:	2b00      	cmp	r3, #0
 8006262:	d022      	beq.n	80062aa <HAL_SD_WriteBlocks+0x25e>
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d91f      	bls.n	80062aa <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626e:	2b03      	cmp	r3, #3
 8006270:	d01b      	beq.n	80062aa <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4618      	mov	r0, r3
 8006278:	f002 ff32 	bl	80090e0 <SDMMC_CmdStopTransfer>
 800627c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800627e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006280:	2b00      	cmp	r3, #0
 8006282:	d012      	beq.n	80062aa <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a39      	ldr	r2, [pc, #228]	; (8006370 <HAL_SD_WriteBlocks+0x324>)
 800628a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006292:	431a      	orrs	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e05e      	b.n	8006368 <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b0:	f003 0308 	and.w	r3, r3, #8
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d012      	beq.n	80062de <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a2c      	ldr	r2, [pc, #176]	; (8006370 <HAL_SD_WriteBlocks+0x324>)
 80062be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c4:	f043 0208 	orr.w	r2, r3, #8
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e044      	b.n	8006368 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e4:	f003 0302 	and.w	r3, r3, #2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d012      	beq.n	8006312 <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a1f      	ldr	r2, [pc, #124]	; (8006370 <HAL_SD_WriteBlocks+0x324>)
 80062f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f8:	f043 0202 	orr.w	r2, r3, #2
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e02a      	b.n	8006368 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006318:	f003 0310 	and.w	r3, r3, #16
 800631c:	2b00      	cmp	r3, #0
 800631e:	d012      	beq.n	8006346 <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a12      	ldr	r2, [pc, #72]	; (8006370 <HAL_SD_WriteBlocks+0x324>)
 8006326:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632c:	f043 0210 	orr.w	r2, r3, #16
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e010      	b.n	8006368 <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a0a      	ldr	r2, [pc, #40]	; (8006374 <HAL_SD_WriteBlocks+0x328>)
 800634c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006356:	2300      	movs	r3, #0
 8006358:	e006      	b.n	8006368 <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
  }
}
 8006368:	4618      	mov	r0, r3
 800636a:	3748      	adds	r7, #72	; 0x48
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	1fe00fff 	.word	0x1fe00fff
 8006374:	18000f3a 	.word	0x18000f3a

08006378 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006386:	0f9b      	lsrs	r3, r3, #30
 8006388:	b2da      	uxtb	r2, r3
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006392:	0e9b      	lsrs	r3, r3, #26
 8006394:	b2db      	uxtb	r3, r3
 8006396:	f003 030f 	and.w	r3, r3, #15
 800639a:	b2da      	uxtb	r2, r3
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063a4:	0e1b      	lsrs	r3, r3, #24
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	f003 0303 	and.w	r3, r3, #3
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063b6:	0c1b      	lsrs	r3, r3, #16
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063c2:	0a1b      	lsrs	r3, r3, #8
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063d8:	0d1b      	lsrs	r3, r3, #20
 80063da:	b29a      	uxth	r2, r3
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063e4:	0c1b      	lsrs	r3, r3, #16
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	f003 030f 	and.w	r3, r3, #15
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063f6:	0bdb      	lsrs	r3, r3, #15
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006408:	0b9b      	lsrs	r3, r3, #14
 800640a:	b2db      	uxtb	r3, r3
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	b2da      	uxtb	r2, r3
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800641a:	0b5b      	lsrs	r3, r3, #13
 800641c:	b2db      	uxtb	r3, r3
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	b2da      	uxtb	r2, r3
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800642c:	0b1b      	lsrs	r3, r3, #12
 800642e:	b2db      	uxtb	r3, r3
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	b2da      	uxtb	r2, r3
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2200      	movs	r2, #0
 800643e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006444:	2b00      	cmp	r3, #0
 8006446:	d163      	bne.n	8006510 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800644c:	009a      	lsls	r2, r3, #2
 800644e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006452:	4013      	ands	r3, r2
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006458:	0f92      	lsrs	r2, r2, #30
 800645a:	431a      	orrs	r2, r3
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006464:	0edb      	lsrs	r3, r3, #27
 8006466:	b2db      	uxtb	r3, r3
 8006468:	f003 0307 	and.w	r3, r3, #7
 800646c:	b2da      	uxtb	r2, r3
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006476:	0e1b      	lsrs	r3, r3, #24
 8006478:	b2db      	uxtb	r3, r3
 800647a:	f003 0307 	and.w	r3, r3, #7
 800647e:	b2da      	uxtb	r2, r3
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006488:	0d5b      	lsrs	r3, r3, #21
 800648a:	b2db      	uxtb	r3, r3
 800648c:	f003 0307 	and.w	r3, r3, #7
 8006490:	b2da      	uxtb	r2, r3
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800649a:	0c9b      	lsrs	r3, r3, #18
 800649c:	b2db      	uxtb	r3, r3
 800649e:	f003 0307 	and.w	r3, r3, #7
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064ac:	0bdb      	lsrs	r3, r3, #15
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	f003 0307 	and.w	r3, r3, #7
 80064b4:	b2da      	uxtb	r2, r3
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	1c5a      	adds	r2, r3, #1
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	7e1b      	ldrb	r3, [r3, #24]
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	f003 0307 	and.w	r3, r3, #7
 80064ce:	3302      	adds	r3, #2
 80064d0:	2201      	movs	r2, #1
 80064d2:	fa02 f303 	lsl.w	r3, r2, r3
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80064da:	fb03 f202 	mul.w	r2, r3, r2
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	7a1b      	ldrb	r3, [r3, #8]
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	f003 030f 	and.w	r3, r3, #15
 80064ec:	2201      	movs	r2, #1
 80064ee:	409a      	lsls	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80064fc:	0a52      	lsrs	r2, r2, #9
 80064fe:	fb03 f202 	mul.w	r2, r3, r2
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800650c:	659a      	str	r2, [r3, #88]	; 0x58
 800650e:	e031      	b.n	8006574 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006514:	2b01      	cmp	r3, #1
 8006516:	d11d      	bne.n	8006554 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800651c:	041b      	lsls	r3, r3, #16
 800651e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006526:	0c1b      	lsrs	r3, r3, #16
 8006528:	431a      	orrs	r2, r3
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	3301      	adds	r3, #1
 8006534:	029a      	lsls	r2, r3, #10
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006548:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	659a      	str	r2, [r3, #88]	; 0x58
 8006552:	e00f      	b.n	8006574 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a58      	ldr	r2, [pc, #352]	; (80066bc <HAL_SD_GetCardCSD+0x344>)
 800655a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006560:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e09d      	b.n	80066b0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006578:	0b9b      	lsrs	r3, r3, #14
 800657a:	b2db      	uxtb	r3, r3
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	b2da      	uxtb	r2, r3
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800658a:	09db      	lsrs	r3, r3, #7
 800658c:	b2db      	uxtb	r3, r3
 800658e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006592:	b2da      	uxtb	r2, r3
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800659c:	b2db      	uxtb	r3, r3
 800659e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065ac:	0fdb      	lsrs	r3, r3, #31
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065b8:	0f5b      	lsrs	r3, r3, #29
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	f003 0303 	and.w	r3, r3, #3
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065ca:	0e9b      	lsrs	r3, r3, #26
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	f003 0307 	and.w	r3, r3, #7
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065dc:	0d9b      	lsrs	r3, r3, #22
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	f003 030f 	and.w	r3, r3, #15
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065ee:	0d5b      	lsrs	r3, r3, #21
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800660a:	0c1b      	lsrs	r3, r3, #16
 800660c:	b2db      	uxtb	r3, r3
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	b2da      	uxtb	r2, r3
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800661e:	0bdb      	lsrs	r3, r3, #15
 8006620:	b2db      	uxtb	r3, r3
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	b2da      	uxtb	r2, r3
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006632:	0b9b      	lsrs	r3, r3, #14
 8006634:	b2db      	uxtb	r3, r3
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	b2da      	uxtb	r2, r3
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006646:	0b5b      	lsrs	r3, r3, #13
 8006648:	b2db      	uxtb	r3, r3
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	b2da      	uxtb	r2, r3
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800665a:	0b1b      	lsrs	r3, r3, #12
 800665c:	b2db      	uxtb	r3, r3
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	b2da      	uxtb	r2, r3
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800666e:	0a9b      	lsrs	r3, r3, #10
 8006670:	b2db      	uxtb	r3, r3
 8006672:	f003 0303 	and.w	r3, r3, #3
 8006676:	b2da      	uxtb	r2, r3
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006682:	0a1b      	lsrs	r3, r3, #8
 8006684:	b2db      	uxtb	r3, r3
 8006686:	f003 0303 	and.w	r3, r3, #3
 800668a:	b2da      	uxtb	r2, r3
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006696:	085b      	lsrs	r3, r3, #1
 8006698:	b2db      	uxtb	r3, r3
 800669a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr
 80066bc:	1fe00fff 	.word	0x1fe00fff

080066c0 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b094      	sub	sp, #80	; 0x50
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80066ca:	2300      	movs	r3, #0
 80066cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80066d0:	f107 0308 	add.w	r3, r7, #8
 80066d4:	4619      	mov	r1, r3
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fbd4 	bl	8006e84 <SD_SendSDStatus>
 80066dc:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80066de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d011      	beq.n	8006708 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a4f      	ldr	r2, [pc, #316]	; (8006828 <HAL_SD_GetCardStatus+0x168>)
 80066ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066f2:	431a      	orrs	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006706:	e070      	b.n	80067ea <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	099b      	lsrs	r3, r3, #6
 800670c:	b2db      	uxtb	r3, r3
 800670e:	f003 0303 	and.w	r3, r3, #3
 8006712:	b2da      	uxtb	r2, r3
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	095b      	lsrs	r3, r3, #5
 800671c:	b2db      	uxtb	r3, r3
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	b2da      	uxtb	r2, r3
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	0a1b      	lsrs	r3, r3, #8
 800672c:	b29b      	uxth	r3, r3
 800672e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006732:	b29a      	uxth	r2, r3
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	0e1b      	lsrs	r3, r3, #24
 8006738:	b29b      	uxth	r3, r3
 800673a:	4313      	orrs	r3, r2
 800673c:	b29a      	uxth	r2, r3
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	061a      	lsls	r2, r3, #24
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	021b      	lsls	r3, r3, #8
 800674a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800674e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	0a1b      	lsrs	r3, r3, #8
 8006754:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006758:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	0e1b      	lsrs	r3, r3, #24
 800675e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	b2da      	uxtb	r2, r3
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	0a1b      	lsrs	r3, r3, #8
 8006770:	b2da      	uxtb	r2, r3
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	0d1b      	lsrs	r3, r3, #20
 800677a:	b2db      	uxtb	r3, r3
 800677c:	f003 030f 	and.w	r3, r3, #15
 8006780:	b2da      	uxtb	r2, r3
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	0c1b      	lsrs	r3, r3, #16
 800678a:	b29b      	uxth	r3, r3
 800678c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006790:	b29a      	uxth	r2, r3
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	b29b      	uxth	r3, r3
 8006796:	b2db      	uxtb	r3, r3
 8006798:	b29b      	uxth	r3, r3
 800679a:	4313      	orrs	r3, r2
 800679c:	b29a      	uxth	r2, r3
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	0a9b      	lsrs	r3, r3, #10
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	0a1b      	lsrs	r3, r3, #8
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	f003 0303 	and.w	r3, r3, #3
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	091b      	lsrs	r3, r3, #4
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	f003 030f 	and.w	r3, r3, #15
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	f003 030f 	and.w	r3, r3, #15
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	0e1b      	lsrs	r3, r3, #24
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80067f2:	4618      	mov	r0, r3
 80067f4:	f002 fbc4 	bl	8008f80 <SDMMC_CmdBlockLength>
 80067f8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80067fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00d      	beq.n	800681c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a08      	ldr	r2, [pc, #32]	; (8006828 <HAL_SD_GetCardStatus+0x168>)
 8006806:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800680c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800681c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006820:	4618      	mov	r0, r3
 8006822:	3750      	adds	r7, #80	; 0x50
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	1fe00fff 	.word	0x1fe00fff

0800682c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006884:	b5b0      	push	{r4, r5, r7, lr}
 8006886:	b090      	sub	sp, #64	; 0x40
 8006888:	af04      	add	r7, sp, #16
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2203      	movs	r2, #3
 8006898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068a0:	2b03      	cmp	r3, #3
 80068a2:	d02e      	beq.n	8006902 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068aa:	d106      	bne.n	80068ba <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	639a      	str	r2, [r3, #56]	; 0x38
 80068b8:	e029      	b.n	800690e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068c0:	d10a      	bne.n	80068d8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fbd6 	bl	8007074 <SD_WideBus_Enable>
 80068c8:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d0:	431a      	orrs	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	639a      	str	r2, [r3, #56]	; 0x38
 80068d6:	e01a      	b.n	800690e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10a      	bne.n	80068f4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fc13 	bl	800710a <SD_WideBus_Disable>
 80068e4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ec:	431a      	orrs	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	639a      	str	r2, [r3, #56]	; 0x38
 80068f2:	e00c      	b.n	800690e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	639a      	str	r2, [r3, #56]	; 0x38
 8006900:	e005      	b.n	800690e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006906:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006912:	2b00      	cmp	r3, #0
 8006914:	d007      	beq.n	8006926 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a60      	ldr	r2, [pc, #384]	; (8006a9c <HAL_SD_ConfigWideBusOperation+0x218>)
 800691c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006924:	e097      	b.n	8006a56 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006926:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800692a:	f7fd feb9 	bl	80046a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800692e:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 8086 	beq.w	8006a44 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	695a      	ldr	r2, [r3, #20]
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	4952      	ldr	r1, [pc, #328]	; (8006aa0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006956:	fba1 1303 	umull	r1, r3, r1, r3
 800695a:	0e1b      	lsrs	r3, r3, #24
 800695c:	429a      	cmp	r2, r3
 800695e:	d303      	bcc.n	8006968 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	61fb      	str	r3, [r7, #28]
 8006966:	e05a      	b.n	8006a1e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800696c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006970:	d103      	bne.n	800697a <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	61fb      	str	r3, [r7, #28]
 8006978:	e051      	b.n	8006a1e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800697e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006982:	d126      	bne.n	80069d2 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10e      	bne.n	80069aa <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	4a45      	ldr	r2, [pc, #276]	; (8006aa4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d906      	bls.n	80069a2 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	4a42      	ldr	r2, [pc, #264]	; (8006aa0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006998:	fba2 2303 	umull	r2, r3, r2, r3
 800699c:	0e5b      	lsrs	r3, r3, #25
 800699e:	61fb      	str	r3, [r7, #28]
 80069a0:	e03d      	b.n	8006a1e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	61fb      	str	r3, [r7, #28]
 80069a8:	e039      	b.n	8006a1e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	005b      	lsls	r3, r3, #1
 80069b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b6:	4a3b      	ldr	r2, [pc, #236]	; (8006aa4 <HAL_SD_ConfigWideBusOperation+0x220>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d906      	bls.n	80069ca <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80069bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069be:	4a38      	ldr	r2, [pc, #224]	; (8006aa0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80069c0:	fba2 2303 	umull	r2, r3, r2, r3
 80069c4:	0e5b      	lsrs	r3, r3, #25
 80069c6:	61fb      	str	r3, [r7, #28]
 80069c8:	e029      	b.n	8006a1e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	61fb      	str	r3, [r7, #28]
 80069d0:	e025      	b.n	8006a1e <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10e      	bne.n	80069f8 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	4a32      	ldr	r2, [pc, #200]	; (8006aa8 <HAL_SD_ConfigWideBusOperation+0x224>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d906      	bls.n	80069f0 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	4a2e      	ldr	r2, [pc, #184]	; (8006aa0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80069e6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ea:	0e1b      	lsrs	r3, r3, #24
 80069ec:	61fb      	str	r3, [r7, #28]
 80069ee:	e016      	b.n	8006a1e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	61fb      	str	r3, [r7, #28]
 80069f6:	e012      	b.n	8006a1e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a04:	4a28      	ldr	r2, [pc, #160]	; (8006aa8 <HAL_SD_ConfigWideBusOperation+0x224>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d906      	bls.n	8006a18 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0c:	4a24      	ldr	r2, [pc, #144]	; (8006aa0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a12:	0e1b      	lsrs	r3, r3, #24
 8006a14:	61fb      	str	r3, [r7, #28]
 8006a16:	e002      	b.n	8006a1e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681d      	ldr	r5, [r3, #0]
 8006a28:	466c      	mov	r4, sp
 8006a2a:	f107 0318 	add.w	r3, r7, #24
 8006a2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006a32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006a36:	f107 030c 	add.w	r3, r7, #12
 8006a3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	f002 f9c1 	bl	8008dc4 <SDMMC_Init>
 8006a42:	e008      	b.n	8006a56 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a48:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f002 fa8e 	bl	8008f80 <SDMMC_CmdBlockLength>
 8006a64:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00c      	beq.n	8006a86 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a0a      	ldr	r2, [pc, #40]	; (8006a9c <HAL_SD_ConfigWideBusOperation+0x218>)
 8006a72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006a8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3730      	adds	r7, #48	; 0x30
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bdb0      	pop	{r4, r5, r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	1fe00fff 	.word	0x1fe00fff
 8006aa0:	55e63b89 	.word	0x55e63b89
 8006aa4:	02faf080 	.word	0x02faf080
 8006aa8:	017d7840 	.word	0x017d7840

08006aac <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006ab8:	f107 030c 	add.w	r3, r7, #12
 8006abc:	4619      	mov	r1, r3
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fab0 	bl	8007024 <SD_SendStatus>
 8006ac4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d005      	beq.n	8006ad8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	0a5b      	lsrs	r3, r3, #9
 8006adc:	f003 030f 	and.w	r3, r3, #15
 8006ae0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006ae2:	693b      	ldr	r3, [r7, #16]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3718      	adds	r7, #24
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006aec:	b5b0      	push	{r4, r5, r7, lr}
 8006aee:	b090      	sub	sp, #64	; 0x40
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006af4:	2301      	movs	r3, #1
 8006af6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f002 f9bb 	bl	8008e78 <SDMMC_GetPowerState>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d102      	bne.n	8006b0e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006b08:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006b0c:	e0a9      	b.n	8006c62 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b12:	2b03      	cmp	r3, #3
 8006b14:	d02e      	beq.n	8006b74 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f002 fc00 	bl	8009320 <SDMMC_CmdSendCID>
 8006b20:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <SD_InitCard+0x40>
    {
      return errorstate;
 8006b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b2a:	e09a      	b.n	8006c62 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2100      	movs	r1, #0
 8006b32:	4618      	mov	r0, r3
 8006b34:	f002 f9e5 	bl	8008f02 <SDMMC_GetResponse>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2104      	movs	r1, #4
 8006b44:	4618      	mov	r0, r3
 8006b46:	f002 f9dc 	bl	8008f02 <SDMMC_GetResponse>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2108      	movs	r1, #8
 8006b56:	4618      	mov	r0, r3
 8006b58:	f002 f9d3 	bl	8008f02 <SDMMC_GetResponse>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	210c      	movs	r1, #12
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f002 f9ca 	bl	8008f02 <SDMMC_GetResponse>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b78:	2b03      	cmp	r3, #3
 8006b7a:	d00d      	beq.n	8006b98 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f107 020e 	add.w	r2, r7, #14
 8006b84:	4611      	mov	r1, r2
 8006b86:	4618      	mov	r0, r3
 8006b88:	f002 fc09 	bl	800939e <SDMMC_CmdSetRelAdd>
 8006b8c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d001      	beq.n	8006b98 <SD_InitCard+0xac>
    {
      return errorstate;
 8006b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b96:	e064      	b.n	8006c62 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b9c:	2b03      	cmp	r3, #3
 8006b9e:	d036      	beq.n	8006c0e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006ba0:	89fb      	ldrh	r3, [r7, #14]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb0:	041b      	lsls	r3, r3, #16
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	4610      	mov	r0, r2
 8006bb6:	f002 fbd2 	bl	800935e <SDMMC_CmdSendCSD>
 8006bba:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d001      	beq.n	8006bc6 <SD_InitCard+0xda>
    {
      return errorstate;
 8006bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bc4:	e04d      	b.n	8006c62 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2100      	movs	r1, #0
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f002 f998 	bl	8008f02 <SDMMC_GetResponse>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2104      	movs	r1, #4
 8006bde:	4618      	mov	r0, r3
 8006be0:	f002 f98f 	bl	8008f02 <SDMMC_GetResponse>
 8006be4:	4602      	mov	r2, r0
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2108      	movs	r1, #8
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f002 f986 	bl	8008f02 <SDMMC_GetResponse>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	210c      	movs	r1, #12
 8006c02:	4618      	mov	r0, r3
 8006c04:	f002 f97d 	bl	8008f02 <SDMMC_GetResponse>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2104      	movs	r1, #4
 8006c14:	4618      	mov	r0, r3
 8006c16:	f002 f974 	bl	8008f02 <SDMMC_GetResponse>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	0d1a      	lsrs	r2, r3, #20
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006c22:	f107 0310 	add.w	r3, r7, #16
 8006c26:	4619      	mov	r1, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f7ff fba5 	bl	8006378 <HAL_SD_GetCardCSD>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006c38:	e013      	b.n	8006c62 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6819      	ldr	r1, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c42:	041b      	lsls	r3, r3, #16
 8006c44:	2200      	movs	r2, #0
 8006c46:	461c      	mov	r4, r3
 8006c48:	4615      	mov	r5, r2
 8006c4a:	4622      	mov	r2, r4
 8006c4c:	462b      	mov	r3, r5
 8006c4e:	4608      	mov	r0, r1
 8006c50:	f002 fa7c 	bl	800914c <SDMMC_CmdSelDesel>
 8006c54:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <SD_InitCard+0x174>
  {
    return errorstate;
 8006c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c5e:	e000      	b.n	8006c62 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3740      	adds	r7, #64	; 0x40
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006c6c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b088      	sub	sp, #32
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c74:	2300      	movs	r3, #0
 8006c76:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	61fb      	str	r3, [r7, #28]
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8006c80:	f7fa fc02 	bl	8001488 <HAL_GetTick>
 8006c84:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f002 fa82 	bl	8009194 <SDMMC_CmdGoIdleState>
 8006c90:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <SD_PowerON+0x30>
  {
    return errorstate;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	e0ed      	b.n	8006e78 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f002 fa95 	bl	80091d0 <SDMMC_CmdOperCond>
 8006ca6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00d      	beq.n	8006cca <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f002 fa6b 	bl	8009194 <SDMMC_CmdGoIdleState>
 8006cbe:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d004      	beq.n	8006cd0 <SD_PowerON+0x64>
    {
      return errorstate;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	e0d6      	b.n	8006e78 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d137      	bne.n	8006d48 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2100      	movs	r1, #0
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f002 fa96 	bl	8009210 <SDMMC_CmdAppCommand>
 8006ce4:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d02d      	beq.n	8006d48 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006cec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006cf0:	e0c2      	b.n	8006e78 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f002 fa89 	bl	8009210 <SDMMC_CmdAppCommand>
 8006cfe:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <SD_PowerON+0x9e>
    {
      return errorstate;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	e0b6      	b.n	8006e78 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	495c      	ldr	r1, [pc, #368]	; (8006e80 <SD_PowerON+0x214>)
 8006d10:	4618      	mov	r0, r3
 8006d12:	f002 faa0 	bl	8009256 <SDMMC_CmdAppOperCommand>
 8006d16:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d002      	beq.n	8006d24 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d22:	e0a9      	b.n	8006e78 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2100      	movs	r1, #0
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f002 f8e9 	bl	8008f02 <SDMMC_GetResponse>
 8006d30:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	0fdb      	lsrs	r3, r3, #31
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d101      	bne.n	8006d3e <SD_PowerON+0xd2>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e000      	b.n	8006d40 <SD_PowerON+0xd4>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	61bb      	str	r3, [r7, #24]

    count++;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	3301      	adds	r3, #1
 8006d46:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d802      	bhi.n	8006d58 <SD_PowerON+0xec>
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d0cc      	beq.n	8006cf2 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d902      	bls.n	8006d68 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006d62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d66:	e087      	b.n	8006e78 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d07e      	beq.n	8006e70 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2201      	movs	r2, #1
 8006d76:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d17a      	bne.n	8006e76 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d075      	beq.n	8006e76 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d90:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f042 0208 	orr.w	r2, r2, #8
 8006da0:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f002 fb60 	bl	800946c <SDMMC_CmdVoltageSwitch>
 8006dac:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00c      	beq.n	8006dce <SD_PowerON+0x162>
        {
          return errorstate;
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	e05f      	b.n	8006e78 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006db8:	f7fa fb66 	bl	8001488 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dc6:	d102      	bne.n	8006dce <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8006dc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006dcc:	e054      	b.n	8006e78 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006dd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ddc:	d1ec      	bne.n	8006db8 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006de6:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006df6:	d002      	beq.n	8006dfe <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8006df8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006dfc:	e03c      	b.n	8006e78 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8006dfe:	2001      	movs	r0, #1
 8006e00:	f000 fa9e 	bl	8007340 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f042 0204 	orr.w	r2, r2, #4
 8006e12:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006e14:	e00a      	b.n	8006e2c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006e16:	f7fa fb37 	bl	8001488 <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e24:	d102      	bne.n	8006e2c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8006e26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e2a:	e025      	b.n	8006e78 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e3a:	d1ec      	bne.n	8006e16 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e44:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e54:	d102      	bne.n	8006e5c <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006e56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e5a:	e00d      	b.n	8006e78 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2213      	movs	r2, #19
 8006e62:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e6c:	639a      	str	r2, [r3, #56]	; 0x38
 8006e6e:	e002      	b.n	8006e76 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3720      	adds	r7, #32
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	c1100000 	.word	0xc1100000

08006e84 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b08c      	sub	sp, #48	; 0x30
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006e8e:	f7fa fafb 	bl	8001488 <HAL_GetTick>
 8006e92:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f002 f82f 	bl	8008f02 <SDMMC_GetResponse>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006eae:	d102      	bne.n	8006eb6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006eb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006eb4:	e0b0      	b.n	8007018 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2140      	movs	r1, #64	; 0x40
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f002 f85f 	bl	8008f80 <SDMMC_CmdBlockLength>
 8006ec2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ec4:	6a3b      	ldr	r3, [r7, #32]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d005      	beq.n	8006ed6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006ed2:	6a3b      	ldr	r3, [r7, #32]
 8006ed4:	e0a0      	b.n	8007018 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ede:	041b      	lsls	r3, r3, #16
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	4610      	mov	r0, r2
 8006ee4:	f002 f994 	bl	8009210 <SDMMC_CmdAppCommand>
 8006ee8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d005      	beq.n	8006efc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	e08d      	b.n	8007018 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006efc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f00:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006f02:	2340      	movs	r3, #64	; 0x40
 8006f04:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006f06:	2360      	movs	r3, #96	; 0x60
 8006f08:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006f12:	2301      	movs	r3, #1
 8006f14:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f107 0208 	add.w	r2, r7, #8
 8006f1e:	4611      	mov	r1, r2
 8006f20:	4618      	mov	r0, r3
 8006f22:	f002 f801 	bl	8008f28 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f002 fa7c 	bl	8009428 <SDMMC_CmdStatusRegister>
 8006f30:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d02b      	beq.n	8006f90 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006f40:	6a3b      	ldr	r3, [r7, #32]
 8006f42:	e069      	b.n	8007018 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d013      	beq.n	8006f7a <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8006f52:	2300      	movs	r3, #0
 8006f54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f56:	e00d      	b.n	8006f74 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f001 ff5b 	bl	8008e18 <SDMMC_ReadFIFO>
 8006f62:	4602      	mov	r2, r0
 8006f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f66:	601a      	str	r2, [r3, #0]
        pData++;
 8006f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6a:	3304      	adds	r3, #4
 8006f6c:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8006f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f70:	3301      	adds	r3, #1
 8006f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f76:	2b07      	cmp	r3, #7
 8006f78:	d9ee      	bls.n	8006f58 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006f7a:	f7fa fa85 	bl	8001488 <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f88:	d102      	bne.n	8006f90 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006f8a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f8e:	e043      	b.n	8007018 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f96:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d0d2      	beq.n	8006f44 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa4:	f003 0308 	and.w	r3, r3, #8
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d001      	beq.n	8006fb0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006fac:	2308      	movs	r3, #8
 8006fae:	e033      	b.n	8007018 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	e02a      	b.n	8007018 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc8:	f003 0320 	and.w	r3, r3, #32
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d017      	beq.n	8007000 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006fd0:	2320      	movs	r3, #32
 8006fd2:	e021      	b.n	8007018 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f001 ff1d 	bl	8008e18 <SDMMC_ReadFIFO>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe2:	601a      	str	r2, [r3, #0]
    pData++;
 8006fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe6:	3304      	adds	r3, #4
 8006fe8:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006fea:	f7fa fa4d 	bl	8001488 <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ff8:	d102      	bne.n	8007000 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006ffa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ffe:	e00b      	b.n	8007018 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007006:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1e2      	bne.n	8006fd4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a03      	ldr	r2, [pc, #12]	; (8007020 <SD_SendSDStatus+0x19c>)
 8007014:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3730      	adds	r7, #48	; 0x30
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	18000f3a 	.word	0x18000f3a

08007024 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d102      	bne.n	800703a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007034:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007038:	e018      	b.n	800706c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007042:	041b      	lsls	r3, r3, #16
 8007044:	4619      	mov	r1, r3
 8007046:	4610      	mov	r0, r2
 8007048:	f002 f9cb 	bl	80093e2 <SDMMC_CmdSendStatus>
 800704c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d001      	beq.n	8007058 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	e009      	b.n	800706c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2100      	movs	r1, #0
 800705e:	4618      	mov	r0, r3
 8007060:	f001 ff4f 	bl	8008f02 <SDMMC_GetResponse>
 8007064:	4602      	mov	r2, r0
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800707c:	2300      	movs	r3, #0
 800707e:	60fb      	str	r3, [r7, #12]
 8007080:	2300      	movs	r3, #0
 8007082:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2100      	movs	r1, #0
 800708a:	4618      	mov	r0, r3
 800708c:	f001 ff39 	bl	8008f02 <SDMMC_GetResponse>
 8007090:	4603      	mov	r3, r0
 8007092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007096:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800709a:	d102      	bne.n	80070a2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800709c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80070a0:	e02f      	b.n	8007102 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80070a2:	f107 030c 	add.w	r3, r7, #12
 80070a6:	4619      	mov	r1, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 f879 	bl	80071a0 <SD_FindSCR>
 80070ae:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	e023      	b.n	8007102 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d01c      	beq.n	80070fe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070cc:	041b      	lsls	r3, r3, #16
 80070ce:	4619      	mov	r1, r3
 80070d0:	4610      	mov	r0, r2
 80070d2:	f002 f89d 	bl	8009210 <SDMMC_CmdAppCommand>
 80070d6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d001      	beq.n	80070e2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	e00f      	b.n	8007102 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2102      	movs	r1, #2
 80070e8:	4618      	mov	r0, r3
 80070ea:	f002 f8d4 	bl	8009296 <SDMMC_CmdBusWidth>
 80070ee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d001      	beq.n	80070fa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	e003      	b.n	8007102 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80070fa:	2300      	movs	r3, #0
 80070fc:	e001      	b.n	8007102 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80070fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007102:	4618      	mov	r0, r3
 8007104:	3718      	adds	r7, #24
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b086      	sub	sp, #24
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007112:	2300      	movs	r3, #0
 8007114:	60fb      	str	r3, [r7, #12]
 8007116:	2300      	movs	r3, #0
 8007118:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2100      	movs	r1, #0
 8007120:	4618      	mov	r0, r3
 8007122:	f001 feee 	bl	8008f02 <SDMMC_GetResponse>
 8007126:	4603      	mov	r3, r0
 8007128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800712c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007130:	d102      	bne.n	8007138 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007132:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007136:	e02f      	b.n	8007198 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007138:	f107 030c 	add.w	r3, r7, #12
 800713c:	4619      	mov	r1, r3
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f82e 	bl	80071a0 <SD_FindSCR>
 8007144:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d001      	beq.n	8007150 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	e023      	b.n	8007198 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007156:	2b00      	cmp	r3, #0
 8007158:	d01c      	beq.n	8007194 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007162:	041b      	lsls	r3, r3, #16
 8007164:	4619      	mov	r1, r3
 8007166:	4610      	mov	r0, r2
 8007168:	f002 f852 	bl	8009210 <SDMMC_CmdAppCommand>
 800716c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d001      	beq.n	8007178 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	e00f      	b.n	8007198 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2100      	movs	r1, #0
 800717e:	4618      	mov	r0, r3
 8007180:	f002 f889 	bl	8009296 <SDMMC_CmdBusWidth>
 8007184:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	e003      	b.n	8007198 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007190:	2300      	movs	r3, #0
 8007192:	e001      	b.n	8007198 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007194:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007198:	4618      	mov	r0, r3
 800719a:	3718      	adds	r7, #24
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b08e      	sub	sp, #56	; 0x38
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80071aa:	f7fa f96d 	bl	8001488 <HAL_GetTick>
 80071ae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80071b0:	2300      	movs	r3, #0
 80071b2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80071b4:	2300      	movs	r3, #0
 80071b6:	60bb      	str	r3, [r7, #8]
 80071b8:	2300      	movs	r3, #0
 80071ba:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2108      	movs	r1, #8
 80071c6:	4618      	mov	r0, r3
 80071c8:	f001 feda 	bl	8008f80 <SDMMC_CmdBlockLength>
 80071cc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80071ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d001      	beq.n	80071d8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80071d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d6:	e0ad      	b.n	8007334 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071e0:	041b      	lsls	r3, r3, #16
 80071e2:	4619      	mov	r1, r3
 80071e4:	4610      	mov	r0, r2
 80071e6:	f002 f813 	bl	8009210 <SDMMC_CmdAppCommand>
 80071ea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80071ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80071f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f4:	e09e      	b.n	8007334 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80071f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071fa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80071fc:	2308      	movs	r3, #8
 80071fe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007200:	2330      	movs	r3, #48	; 0x30
 8007202:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007204:	2302      	movs	r3, #2
 8007206:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007208:	2300      	movs	r3, #0
 800720a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800720c:	2301      	movs	r3, #1
 800720e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f107 0210 	add.w	r2, r7, #16
 8007218:	4611      	mov	r1, r2
 800721a:	4618      	mov	r0, r3
 800721c:	f001 fe84 	bl	8008f28 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4618      	mov	r0, r3
 8007226:	f002 f859 	bl	80092dc <SDMMC_CmdSendSCR>
 800722a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800722c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722e:	2b00      	cmp	r3, #0
 8007230:	d027      	beq.n	8007282 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007234:	e07e      	b.n	8007334 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800723c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d113      	bne.n	800726c <SD_FindSCR+0xcc>
 8007244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007246:	2b00      	cmp	r3, #0
 8007248:	d110      	bne.n	800726c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4618      	mov	r0, r3
 8007250:	f001 fde2 	bl	8008e18 <SDMMC_ReadFIFO>
 8007254:	4603      	mov	r3, r0
 8007256:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4618      	mov	r0, r3
 800725e:	f001 fddb 	bl	8008e18 <SDMMC_ReadFIFO>
 8007262:	4603      	mov	r3, r0
 8007264:	60fb      	str	r3, [r7, #12]
      index++;
 8007266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007268:	3301      	adds	r3, #1
 800726a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800726c:	f7fa f90c 	bl	8001488 <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800727a:	d102      	bne.n	8007282 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800727c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007280:	e058      	b.n	8007334 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007288:	f240 532a 	movw	r3, #1322	; 0x52a
 800728c:	4013      	ands	r3, r2
 800728e:	2b00      	cmp	r3, #0
 8007290:	d0d1      	beq.n	8007236 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007298:	f003 0308 	and.w	r3, r3, #8
 800729c:	2b00      	cmp	r3, #0
 800729e:	d005      	beq.n	80072ac <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2208      	movs	r2, #8
 80072a6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80072a8:	2308      	movs	r3, #8
 80072aa:	e043      	b.n	8007334 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072b2:	f003 0302 	and.w	r3, r3, #2
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d005      	beq.n	80072c6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2202      	movs	r2, #2
 80072c0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80072c2:	2302      	movs	r3, #2
 80072c4:	e036      	b.n	8007334 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072cc:	f003 0320 	and.w	r3, r3, #32
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d005      	beq.n	80072e0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2220      	movs	r2, #32
 80072da:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80072dc:	2320      	movs	r3, #32
 80072de:	e029      	b.n	8007334 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a15      	ldr	r2, [pc, #84]	; (800733c <SD_FindSCR+0x19c>)
 80072e6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	061a      	lsls	r2, r3, #24
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	021b      	lsls	r3, r3, #8
 80072f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80072f4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	0a1b      	lsrs	r3, r3, #8
 80072fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80072fe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	0e1b      	lsrs	r3, r3, #24
 8007304:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007308:	601a      	str	r2, [r3, #0]
    scr++;
 800730a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730c:	3304      	adds	r3, #4
 800730e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	061a      	lsls	r2, r3, #24
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	021b      	lsls	r3, r3, #8
 8007318:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800731c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	0a1b      	lsrs	r3, r3, #8
 8007322:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007326:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	0e1b      	lsrs	r3, r3, #24
 800732c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800732e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007330:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	3738      	adds	r7, #56	; 0x38
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	18000f3a 	.word	0x18000f3a

08007340 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	4603      	mov	r3, r0
 8007348:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800734a:	bf00      	nop
 800734c:	370c      	adds	r7, #12
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr

08007356 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b084      	sub	sp, #16
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e095      	b.n	8007494 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736c:	2b00      	cmp	r3, #0
 800736e:	d108      	bne.n	8007382 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007378:	d009      	beq.n	800738e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	61da      	str	r2, [r3, #28]
 8007380:	e005      	b.n	800738e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b00      	cmp	r3, #0
 800739e:	d106      	bne.n	80073ae <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f7f9 fe85 	bl	80010b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2202      	movs	r2, #2
 80073b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073c4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073ce:	d902      	bls.n	80073d6 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80073d0:	2300      	movs	r3, #0
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	e002      	b.n	80073dc <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80073d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073da:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80073e4:	d007      	beq.n	80073f6 <HAL_SPI_Init+0xa0>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073ee:	d002      	beq.n	80073f6 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007406:	431a      	orrs	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	f003 0302 	and.w	r3, r3, #2
 8007410:	431a      	orrs	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	431a      	orrs	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007424:	431a      	orrs	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800742e:	431a      	orrs	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a1b      	ldr	r3, [r3, #32]
 8007434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007438:	ea42 0103 	orr.w	r1, r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007440:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	430a      	orrs	r2, r1
 800744a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	0c1b      	lsrs	r3, r3, #16
 8007452:	f003 0204 	and.w	r2, r3, #4
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745a:	f003 0310 	and.w	r3, r3, #16
 800745e:	431a      	orrs	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007464:	f003 0308 	and.w	r3, r3, #8
 8007468:	431a      	orrs	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007472:	ea42 0103 	orr.w	r1, r2, r3
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	430a      	orrs	r2, r1
 8007482:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e049      	b.n	8007542 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d106      	bne.n	80074c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7f9 fe3a 	bl	800113c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	3304      	adds	r3, #4
 80074d8:	4619      	mov	r1, r3
 80074da:	4610      	mov	r0, r2
 80074dc:	f000 fa62 	bl	80079a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3708      	adds	r7, #8
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b082      	sub	sp, #8
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d101      	bne.n	800755c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e049      	b.n	80075f0 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b00      	cmp	r3, #0
 8007566:	d106      	bne.n	8007576 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 f841 	bl	80075f8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2202      	movs	r2, #2
 800757a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	3304      	adds	r3, #4
 8007586:	4619      	mov	r1, r3
 8007588:	4610      	mov	r0, r2
 800758a:	f000 fa0b 	bl	80079a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	f003 0302 	and.w	r3, r3, #2
 800761e:	2b02      	cmp	r3, #2
 8007620:	d122      	bne.n	8007668 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	f003 0302 	and.w	r3, r3, #2
 800762c:	2b02      	cmp	r3, #2
 800762e:	d11b      	bne.n	8007668 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f06f 0202 	mvn.w	r2, #2
 8007638:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	f003 0303 	and.w	r3, r3, #3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d003      	beq.n	8007656 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f98a 	bl	8007968 <HAL_TIM_IC_CaptureCallback>
 8007654:	e005      	b.n	8007662 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 f97c 	bl	8007954 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 f98d 	bl	800797c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	f003 0304 	and.w	r3, r3, #4
 8007672:	2b04      	cmp	r3, #4
 8007674:	d122      	bne.n	80076bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	f003 0304 	and.w	r3, r3, #4
 8007680:	2b04      	cmp	r3, #4
 8007682:	d11b      	bne.n	80076bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f06f 0204 	mvn.w	r2, #4
 800768c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2202      	movs	r2, #2
 8007692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d003      	beq.n	80076aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f960 	bl	8007968 <HAL_TIM_IC_CaptureCallback>
 80076a8:	e005      	b.n	80076b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f952 	bl	8007954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f963 	bl	800797c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	f003 0308 	and.w	r3, r3, #8
 80076c6:	2b08      	cmp	r3, #8
 80076c8:	d122      	bne.n	8007710 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f003 0308 	and.w	r3, r3, #8
 80076d4:	2b08      	cmp	r3, #8
 80076d6:	d11b      	bne.n	8007710 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f06f 0208 	mvn.w	r2, #8
 80076e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2204      	movs	r2, #4
 80076e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	f003 0303 	and.w	r3, r3, #3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f936 	bl	8007968 <HAL_TIM_IC_CaptureCallback>
 80076fc:	e005      	b.n	800770a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f928 	bl	8007954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f939 	bl	800797c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	f003 0310 	and.w	r3, r3, #16
 800771a:	2b10      	cmp	r3, #16
 800771c:	d122      	bne.n	8007764 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	f003 0310 	and.w	r3, r3, #16
 8007728:	2b10      	cmp	r3, #16
 800772a:	d11b      	bne.n	8007764 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f06f 0210 	mvn.w	r2, #16
 8007734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2208      	movs	r2, #8
 800773a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f90c 	bl	8007968 <HAL_TIM_IC_CaptureCallback>
 8007750:	e005      	b.n	800775e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f8fe 	bl	8007954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f90f 	bl	800797c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	2b01      	cmp	r3, #1
 8007770:	d10e      	bne.n	8007790 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f003 0301 	and.w	r3, r3, #1
 800777c:	2b01      	cmp	r3, #1
 800777e:	d107      	bne.n	8007790 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f06f 0201 	mvn.w	r2, #1
 8007788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f8d8 	bl	8007940 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800779a:	2b80      	cmp	r3, #128	; 0x80
 800779c:	d10e      	bne.n	80077bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077a8:	2b80      	cmp	r3, #128	; 0x80
 80077aa:	d107      	bne.n	80077bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80077b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fcec 	bl	8008194 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ca:	d10e      	bne.n	80077ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077d6:	2b80      	cmp	r3, #128	; 0x80
 80077d8:	d107      	bne.n	80077ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80077e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fcdf 	bl	80081a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f4:	2b40      	cmp	r3, #64	; 0x40
 80077f6:	d10e      	bne.n	8007816 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007802:	2b40      	cmp	r3, #64	; 0x40
 8007804:	d107      	bne.n	8007816 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800780e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f8bd 	bl	8007990 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	f003 0320 	and.w	r3, r3, #32
 8007820:	2b20      	cmp	r3, #32
 8007822:	d10e      	bne.n	8007842 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	f003 0320 	and.w	r3, r3, #32
 800782e:	2b20      	cmp	r3, #32
 8007830:	d107      	bne.n	8007842 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f06f 0220 	mvn.w	r2, #32
 800783a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fc9f 	bl	8008180 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007842:	bf00      	nop
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
	...

0800784c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007858:	2300      	movs	r3, #0
 800785a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007862:	2b01      	cmp	r3, #1
 8007864:	d101      	bne.n	800786a <HAL_TIM_OC_ConfigChannel+0x1e>
 8007866:	2302      	movs	r3, #2
 8007868:	e066      	b.n	8007938 <HAL_TIM_OC_ConfigChannel+0xec>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2201      	movs	r2, #1
 800786e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2b14      	cmp	r3, #20
 8007876:	d857      	bhi.n	8007928 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007878:	a201      	add	r2, pc, #4	; (adr r2, 8007880 <HAL_TIM_OC_ConfigChannel+0x34>)
 800787a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787e:	bf00      	nop
 8007880:	080078d5 	.word	0x080078d5
 8007884:	08007929 	.word	0x08007929
 8007888:	08007929 	.word	0x08007929
 800788c:	08007929 	.word	0x08007929
 8007890:	080078e3 	.word	0x080078e3
 8007894:	08007929 	.word	0x08007929
 8007898:	08007929 	.word	0x08007929
 800789c:	08007929 	.word	0x08007929
 80078a0:	080078f1 	.word	0x080078f1
 80078a4:	08007929 	.word	0x08007929
 80078a8:	08007929 	.word	0x08007929
 80078ac:	08007929 	.word	0x08007929
 80078b0:	080078ff 	.word	0x080078ff
 80078b4:	08007929 	.word	0x08007929
 80078b8:	08007929 	.word	0x08007929
 80078bc:	08007929 	.word	0x08007929
 80078c0:	0800790d 	.word	0x0800790d
 80078c4:	08007929 	.word	0x08007929
 80078c8:	08007929 	.word	0x08007929
 80078cc:	08007929 	.word	0x08007929
 80078d0:	0800791b 	.word	0x0800791b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68b9      	ldr	r1, [r7, #8]
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 f8fc 	bl	8007ad8 <TIM_OC1_SetConfig>
      break;
 80078e0:	e025      	b.n	800792e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68b9      	ldr	r1, [r7, #8]
 80078e8:	4618      	mov	r0, r3
 80078ea:	f000 f985 	bl	8007bf8 <TIM_OC2_SetConfig>
      break;
 80078ee:	e01e      	b.n	800792e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68b9      	ldr	r1, [r7, #8]
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 fa08 	bl	8007d0c <TIM_OC3_SetConfig>
      break;
 80078fc:	e017      	b.n	800792e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68b9      	ldr	r1, [r7, #8]
 8007904:	4618      	mov	r0, r3
 8007906:	f000 fa89 	bl	8007e1c <TIM_OC4_SetConfig>
      break;
 800790a:	e010      	b.n	800792e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68b9      	ldr	r1, [r7, #8]
 8007912:	4618      	mov	r0, r3
 8007914:	f000 faec 	bl	8007ef0 <TIM_OC5_SetConfig>
      break;
 8007918:	e009      	b.n	800792e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68b9      	ldr	r1, [r7, #8]
 8007920:	4618      	mov	r0, r3
 8007922:	f000 fb49 	bl	8007fb8 <TIM_OC6_SetConfig>
      break;
 8007926:	e002      	b.n	800792e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	75fb      	strb	r3, [r7, #23]
      break;
 800792c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007936:	7dfb      	ldrb	r3, [r7, #23]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3718      	adds	r7, #24
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007948:	bf00      	nop
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a40      	ldr	r2, [pc, #256]	; (8007ab8 <TIM_Base_SetConfig+0x114>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d013      	beq.n	80079e4 <TIM_Base_SetConfig+0x40>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079c2:	d00f      	beq.n	80079e4 <TIM_Base_SetConfig+0x40>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a3d      	ldr	r2, [pc, #244]	; (8007abc <TIM_Base_SetConfig+0x118>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d00b      	beq.n	80079e4 <TIM_Base_SetConfig+0x40>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a3c      	ldr	r2, [pc, #240]	; (8007ac0 <TIM_Base_SetConfig+0x11c>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d007      	beq.n	80079e4 <TIM_Base_SetConfig+0x40>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a3b      	ldr	r2, [pc, #236]	; (8007ac4 <TIM_Base_SetConfig+0x120>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d003      	beq.n	80079e4 <TIM_Base_SetConfig+0x40>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a3a      	ldr	r2, [pc, #232]	; (8007ac8 <TIM_Base_SetConfig+0x124>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d108      	bne.n	80079f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a2f      	ldr	r2, [pc, #188]	; (8007ab8 <TIM_Base_SetConfig+0x114>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d01f      	beq.n	8007a3e <TIM_Base_SetConfig+0x9a>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a04:	d01b      	beq.n	8007a3e <TIM_Base_SetConfig+0x9a>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a2c      	ldr	r2, [pc, #176]	; (8007abc <TIM_Base_SetConfig+0x118>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d017      	beq.n	8007a3e <TIM_Base_SetConfig+0x9a>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a2b      	ldr	r2, [pc, #172]	; (8007ac0 <TIM_Base_SetConfig+0x11c>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d013      	beq.n	8007a3e <TIM_Base_SetConfig+0x9a>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a2a      	ldr	r2, [pc, #168]	; (8007ac4 <TIM_Base_SetConfig+0x120>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d00f      	beq.n	8007a3e <TIM_Base_SetConfig+0x9a>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a29      	ldr	r2, [pc, #164]	; (8007ac8 <TIM_Base_SetConfig+0x124>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d00b      	beq.n	8007a3e <TIM_Base_SetConfig+0x9a>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a28      	ldr	r2, [pc, #160]	; (8007acc <TIM_Base_SetConfig+0x128>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d007      	beq.n	8007a3e <TIM_Base_SetConfig+0x9a>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a27      	ldr	r2, [pc, #156]	; (8007ad0 <TIM_Base_SetConfig+0x12c>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d003      	beq.n	8007a3e <TIM_Base_SetConfig+0x9a>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a26      	ldr	r2, [pc, #152]	; (8007ad4 <TIM_Base_SetConfig+0x130>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d108      	bne.n	8007a50 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	695b      	ldr	r3, [r3, #20]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	689a      	ldr	r2, [r3, #8]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a10      	ldr	r2, [pc, #64]	; (8007ab8 <TIM_Base_SetConfig+0x114>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d00f      	beq.n	8007a9c <TIM_Base_SetConfig+0xf8>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a12      	ldr	r2, [pc, #72]	; (8007ac8 <TIM_Base_SetConfig+0x124>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d00b      	beq.n	8007a9c <TIM_Base_SetConfig+0xf8>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a11      	ldr	r2, [pc, #68]	; (8007acc <TIM_Base_SetConfig+0x128>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d007      	beq.n	8007a9c <TIM_Base_SetConfig+0xf8>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a10      	ldr	r2, [pc, #64]	; (8007ad0 <TIM_Base_SetConfig+0x12c>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d003      	beq.n	8007a9c <TIM_Base_SetConfig+0xf8>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a0f      	ldr	r2, [pc, #60]	; (8007ad4 <TIM_Base_SetConfig+0x130>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d103      	bne.n	8007aa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	691a      	ldr	r2, [r3, #16]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	615a      	str	r2, [r3, #20]
}
 8007aaa:	bf00      	nop
 8007aac:	3714      	adds	r7, #20
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	40012c00 	.word	0x40012c00
 8007abc:	40000400 	.word	0x40000400
 8007ac0:	40000800 	.word	0x40000800
 8007ac4:	40000c00 	.word	0x40000c00
 8007ac8:	40013400 	.word	0x40013400
 8007acc:	40014000 	.word	0x40014000
 8007ad0:	40014400 	.word	0x40014400
 8007ad4:	40014800 	.word	0x40014800

08007ad8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b087      	sub	sp, #28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	f023 0201 	bic.w	r2, r3, #1
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a1b      	ldr	r3, [r3, #32]
 8007af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	699b      	ldr	r3, [r3, #24]
 8007afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f023 0303 	bic.w	r3, r3, #3
 8007b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f023 0302 	bic.w	r3, r3, #2
 8007b24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a2c      	ldr	r2, [pc, #176]	; (8007be4 <TIM_OC1_SetConfig+0x10c>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d00f      	beq.n	8007b58 <TIM_OC1_SetConfig+0x80>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a2b      	ldr	r2, [pc, #172]	; (8007be8 <TIM_OC1_SetConfig+0x110>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d00b      	beq.n	8007b58 <TIM_OC1_SetConfig+0x80>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a2a      	ldr	r2, [pc, #168]	; (8007bec <TIM_OC1_SetConfig+0x114>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d007      	beq.n	8007b58 <TIM_OC1_SetConfig+0x80>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a29      	ldr	r2, [pc, #164]	; (8007bf0 <TIM_OC1_SetConfig+0x118>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d003      	beq.n	8007b58 <TIM_OC1_SetConfig+0x80>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a28      	ldr	r2, [pc, #160]	; (8007bf4 <TIM_OC1_SetConfig+0x11c>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d10c      	bne.n	8007b72 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	f023 0308 	bic.w	r3, r3, #8
 8007b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f023 0304 	bic.w	r3, r3, #4
 8007b70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a1b      	ldr	r2, [pc, #108]	; (8007be4 <TIM_OC1_SetConfig+0x10c>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d00f      	beq.n	8007b9a <TIM_OC1_SetConfig+0xc2>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a1a      	ldr	r2, [pc, #104]	; (8007be8 <TIM_OC1_SetConfig+0x110>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d00b      	beq.n	8007b9a <TIM_OC1_SetConfig+0xc2>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a19      	ldr	r2, [pc, #100]	; (8007bec <TIM_OC1_SetConfig+0x114>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d007      	beq.n	8007b9a <TIM_OC1_SetConfig+0xc2>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a18      	ldr	r2, [pc, #96]	; (8007bf0 <TIM_OC1_SetConfig+0x118>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d003      	beq.n	8007b9a <TIM_OC1_SetConfig+0xc2>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a17      	ldr	r2, [pc, #92]	; (8007bf4 <TIM_OC1_SetConfig+0x11c>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d111      	bne.n	8007bbe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	621a      	str	r2, [r3, #32]
}
 8007bd8:	bf00      	nop
 8007bda:	371c      	adds	r7, #28
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr
 8007be4:	40012c00 	.word	0x40012c00
 8007be8:	40013400 	.word	0x40013400
 8007bec:	40014000 	.word	0x40014000
 8007bf0:	40014400 	.word	0x40014400
 8007bf4:	40014800 	.word	0x40014800

08007bf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b087      	sub	sp, #28
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	f023 0210 	bic.w	r2, r3, #16
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	021b      	lsls	r3, r3, #8
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	f023 0320 	bic.w	r3, r3, #32
 8007c46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	011b      	lsls	r3, r3, #4
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a28      	ldr	r2, [pc, #160]	; (8007cf8 <TIM_OC2_SetConfig+0x100>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d003      	beq.n	8007c64 <TIM_OC2_SetConfig+0x6c>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a27      	ldr	r2, [pc, #156]	; (8007cfc <TIM_OC2_SetConfig+0x104>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d10d      	bne.n	8007c80 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	011b      	lsls	r3, r3, #4
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a1d      	ldr	r2, [pc, #116]	; (8007cf8 <TIM_OC2_SetConfig+0x100>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d00f      	beq.n	8007ca8 <TIM_OC2_SetConfig+0xb0>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a1c      	ldr	r2, [pc, #112]	; (8007cfc <TIM_OC2_SetConfig+0x104>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d00b      	beq.n	8007ca8 <TIM_OC2_SetConfig+0xb0>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a1b      	ldr	r2, [pc, #108]	; (8007d00 <TIM_OC2_SetConfig+0x108>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d007      	beq.n	8007ca8 <TIM_OC2_SetConfig+0xb0>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a1a      	ldr	r2, [pc, #104]	; (8007d04 <TIM_OC2_SetConfig+0x10c>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d003      	beq.n	8007ca8 <TIM_OC2_SetConfig+0xb0>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a19      	ldr	r2, [pc, #100]	; (8007d08 <TIM_OC2_SetConfig+0x110>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d113      	bne.n	8007cd0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	695b      	ldr	r3, [r3, #20]
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	621a      	str	r2, [r3, #32]
}
 8007cea:	bf00      	nop
 8007cec:	371c      	adds	r7, #28
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	40012c00 	.word	0x40012c00
 8007cfc:	40013400 	.word	0x40013400
 8007d00:	40014000 	.word	0x40014000
 8007d04:	40014400 	.word	0x40014400
 8007d08:	40014800 	.word	0x40014800

08007d0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b087      	sub	sp, #28
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f023 0303 	bic.w	r3, r3, #3
 8007d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	021b      	lsls	r3, r3, #8
 8007d60:	697a      	ldr	r2, [r7, #20]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a27      	ldr	r2, [pc, #156]	; (8007e08 <TIM_OC3_SetConfig+0xfc>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d003      	beq.n	8007d76 <TIM_OC3_SetConfig+0x6a>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a26      	ldr	r2, [pc, #152]	; (8007e0c <TIM_OC3_SetConfig+0x100>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d10d      	bne.n	8007d92 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	021b      	lsls	r3, r3, #8
 8007d84:	697a      	ldr	r2, [r7, #20]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a1c      	ldr	r2, [pc, #112]	; (8007e08 <TIM_OC3_SetConfig+0xfc>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d00f      	beq.n	8007dba <TIM_OC3_SetConfig+0xae>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a1b      	ldr	r2, [pc, #108]	; (8007e0c <TIM_OC3_SetConfig+0x100>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d00b      	beq.n	8007dba <TIM_OC3_SetConfig+0xae>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a1a      	ldr	r2, [pc, #104]	; (8007e10 <TIM_OC3_SetConfig+0x104>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d007      	beq.n	8007dba <TIM_OC3_SetConfig+0xae>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a19      	ldr	r2, [pc, #100]	; (8007e14 <TIM_OC3_SetConfig+0x108>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d003      	beq.n	8007dba <TIM_OC3_SetConfig+0xae>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a18      	ldr	r2, [pc, #96]	; (8007e18 <TIM_OC3_SetConfig+0x10c>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d113      	bne.n	8007de2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	011b      	lsls	r3, r3, #4
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	011b      	lsls	r3, r3, #4
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	685a      	ldr	r2, [r3, #4]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	697a      	ldr	r2, [r7, #20]
 8007dfa:	621a      	str	r2, [r3, #32]
}
 8007dfc:	bf00      	nop
 8007dfe:	371c      	adds	r7, #28
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr
 8007e08:	40012c00 	.word	0x40012c00
 8007e0c:	40013400 	.word	0x40013400
 8007e10:	40014000 	.word	0x40014000
 8007e14:	40014400 	.word	0x40014400
 8007e18:	40014800 	.word	0x40014800

08007e1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b087      	sub	sp, #28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a1b      	ldr	r3, [r3, #32]
 8007e2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	021b      	lsls	r3, r3, #8
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	031b      	lsls	r3, r3, #12
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a18      	ldr	r2, [pc, #96]	; (8007edc <TIM_OC4_SetConfig+0xc0>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d00f      	beq.n	8007ea0 <TIM_OC4_SetConfig+0x84>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a17      	ldr	r2, [pc, #92]	; (8007ee0 <TIM_OC4_SetConfig+0xc4>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d00b      	beq.n	8007ea0 <TIM_OC4_SetConfig+0x84>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a16      	ldr	r2, [pc, #88]	; (8007ee4 <TIM_OC4_SetConfig+0xc8>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d007      	beq.n	8007ea0 <TIM_OC4_SetConfig+0x84>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a15      	ldr	r2, [pc, #84]	; (8007ee8 <TIM_OC4_SetConfig+0xcc>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d003      	beq.n	8007ea0 <TIM_OC4_SetConfig+0x84>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a14      	ldr	r2, [pc, #80]	; (8007eec <TIM_OC4_SetConfig+0xd0>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d109      	bne.n	8007eb4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ea6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	695b      	ldr	r3, [r3, #20]
 8007eac:	019b      	lsls	r3, r3, #6
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	685a      	ldr	r2, [r3, #4]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	693a      	ldr	r2, [r7, #16]
 8007ecc:	621a      	str	r2, [r3, #32]
}
 8007ece:	bf00      	nop
 8007ed0:	371c      	adds	r7, #28
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	40012c00 	.word	0x40012c00
 8007ee0:	40013400 	.word	0x40013400
 8007ee4:	40014000 	.word	0x40014000
 8007ee8:	40014400 	.word	0x40014400
 8007eec:	40014800 	.word	0x40014800

08007ef0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b087      	sub	sp, #28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007f34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	041b      	lsls	r3, r3, #16
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a17      	ldr	r2, [pc, #92]	; (8007fa4 <TIM_OC5_SetConfig+0xb4>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d00f      	beq.n	8007f6a <TIM_OC5_SetConfig+0x7a>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a16      	ldr	r2, [pc, #88]	; (8007fa8 <TIM_OC5_SetConfig+0xb8>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d00b      	beq.n	8007f6a <TIM_OC5_SetConfig+0x7a>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a15      	ldr	r2, [pc, #84]	; (8007fac <TIM_OC5_SetConfig+0xbc>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d007      	beq.n	8007f6a <TIM_OC5_SetConfig+0x7a>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a14      	ldr	r2, [pc, #80]	; (8007fb0 <TIM_OC5_SetConfig+0xc0>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d003      	beq.n	8007f6a <TIM_OC5_SetConfig+0x7a>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a13      	ldr	r2, [pc, #76]	; (8007fb4 <TIM_OC5_SetConfig+0xc4>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d109      	bne.n	8007f7e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	695b      	ldr	r3, [r3, #20]
 8007f76:	021b      	lsls	r3, r3, #8
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	685a      	ldr	r2, [r3, #4]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	693a      	ldr	r2, [r7, #16]
 8007f96:	621a      	str	r2, [r3, #32]
}
 8007f98:	bf00      	nop
 8007f9a:	371c      	adds	r7, #28
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr
 8007fa4:	40012c00 	.word	0x40012c00
 8007fa8:	40013400 	.word	0x40013400
 8007fac:	40014000 	.word	0x40014000
 8007fb0:	40014400 	.word	0x40014400
 8007fb4:	40014800 	.word	0x40014800

08007fb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b087      	sub	sp, #28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	021b      	lsls	r3, r3, #8
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ffe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	051b      	lsls	r3, r3, #20
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	4313      	orrs	r3, r2
 800800a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a18      	ldr	r2, [pc, #96]	; (8008070 <TIM_OC6_SetConfig+0xb8>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d00f      	beq.n	8008034 <TIM_OC6_SetConfig+0x7c>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a17      	ldr	r2, [pc, #92]	; (8008074 <TIM_OC6_SetConfig+0xbc>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d00b      	beq.n	8008034 <TIM_OC6_SetConfig+0x7c>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a16      	ldr	r2, [pc, #88]	; (8008078 <TIM_OC6_SetConfig+0xc0>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d007      	beq.n	8008034 <TIM_OC6_SetConfig+0x7c>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a15      	ldr	r2, [pc, #84]	; (800807c <TIM_OC6_SetConfig+0xc4>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d003      	beq.n	8008034 <TIM_OC6_SetConfig+0x7c>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a14      	ldr	r2, [pc, #80]	; (8008080 <TIM_OC6_SetConfig+0xc8>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d109      	bne.n	8008048 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800803a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	695b      	ldr	r3, [r3, #20]
 8008040:	029b      	lsls	r3, r3, #10
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	4313      	orrs	r3, r2
 8008046:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	685a      	ldr	r2, [r3, #4]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	621a      	str	r2, [r3, #32]
}
 8008062:	bf00      	nop
 8008064:	371c      	adds	r7, #28
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	40012c00 	.word	0x40012c00
 8008074:	40013400 	.word	0x40013400
 8008078:	40014000 	.word	0x40014000
 800807c:	40014400 	.word	0x40014400
 8008080:	40014800 	.word	0x40014800

08008084 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800808e:	2300      	movs	r3, #0
 8008090:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008098:	2b01      	cmp	r3, #1
 800809a:	d101      	bne.n	80080a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800809c:	2302      	movs	r3, #2
 800809e:	e065      	b.n	800816c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4313      	orrs	r3, r2
 80080de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	695b      	ldr	r3, [r3, #20]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008106:	4313      	orrs	r3, r2
 8008108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	041b      	lsls	r3, r3, #16
 8008116:	4313      	orrs	r3, r2
 8008118:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a16      	ldr	r2, [pc, #88]	; (8008178 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d004      	beq.n	800812e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a14      	ldr	r2, [pc, #80]	; (800817c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d115      	bne.n	800815a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008138:	051b      	lsls	r3, r3, #20
 800813a:	4313      	orrs	r3, r2
 800813c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	69db      	ldr	r3, [r3, #28]
 8008148:	4313      	orrs	r3, r2
 800814a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	6a1b      	ldr	r3, [r3, #32]
 8008156:	4313      	orrs	r3, r2
 8008158:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3714      	adds	r7, #20
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr
 8008178:	40012c00 	.word	0x40012c00
 800817c:	40013400 	.word	0x40013400

08008180 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008188:	bf00      	nop
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d101      	bne.n	80081ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e042      	b.n	8008254 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d106      	bne.n	80081e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f7f8 ffcb 	bl	800117c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2224      	movs	r2, #36	; 0x24
 80081ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f022 0201 	bic.w	r2, r2, #1
 80081fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 f82c 	bl	800825c <UART_SetConfig>
 8008204:	4603      	mov	r3, r0
 8008206:	2b01      	cmp	r3, #1
 8008208:	d101      	bne.n	800820e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e022      	b.n	8008254 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008212:	2b00      	cmp	r3, #0
 8008214:	d002      	beq.n	800821c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fb1c 	bl	8008854 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800822a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	689a      	ldr	r2, [r3, #8]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800823a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 0201 	orr.w	r2, r2, #1
 800824a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fba3 	bl	8008998 <UART_CheckIdleState>
 8008252:	4603      	mov	r3, r0
}
 8008254:	4618      	mov	r0, r3
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800825c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008260:	b08c      	sub	sp, #48	; 0x30
 8008262:	af00      	add	r7, sp, #0
 8008264:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008266:	2300      	movs	r3, #0
 8008268:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	689a      	ldr	r2, [r3, #8]
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	431a      	orrs	r2, r3
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	695b      	ldr	r3, [r3, #20]
 800827a:	431a      	orrs	r2, r3
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	69db      	ldr	r3, [r3, #28]
 8008280:	4313      	orrs	r3, r2
 8008282:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	4baa      	ldr	r3, [pc, #680]	; (8008534 <UART_SetConfig+0x2d8>)
 800828c:	4013      	ands	r3, r2
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	6812      	ldr	r2, [r2, #0]
 8008292:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008294:	430b      	orrs	r3, r1
 8008296:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	68da      	ldr	r2, [r3, #12]
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	430a      	orrs	r2, r1
 80082ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a9f      	ldr	r2, [pc, #636]	; (8008538 <UART_SetConfig+0x2dc>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d004      	beq.n	80082c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	6a1b      	ldr	r3, [r3, #32]
 80082c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082c4:	4313      	orrs	r3, r2
 80082c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80082d2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80082d6:	697a      	ldr	r2, [r7, #20]
 80082d8:	6812      	ldr	r2, [r2, #0]
 80082da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082dc:	430b      	orrs	r3, r1
 80082de:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e6:	f023 010f 	bic.w	r1, r3, #15
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	430a      	orrs	r2, r1
 80082f4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a90      	ldr	r2, [pc, #576]	; (800853c <UART_SetConfig+0x2e0>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d125      	bne.n	800834c <UART_SetConfig+0xf0>
 8008300:	4b8f      	ldr	r3, [pc, #572]	; (8008540 <UART_SetConfig+0x2e4>)
 8008302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008306:	f003 0303 	and.w	r3, r3, #3
 800830a:	2b03      	cmp	r3, #3
 800830c:	d81a      	bhi.n	8008344 <UART_SetConfig+0xe8>
 800830e:	a201      	add	r2, pc, #4	; (adr r2, 8008314 <UART_SetConfig+0xb8>)
 8008310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008314:	08008325 	.word	0x08008325
 8008318:	08008335 	.word	0x08008335
 800831c:	0800832d 	.word	0x0800832d
 8008320:	0800833d 	.word	0x0800833d
 8008324:	2301      	movs	r3, #1
 8008326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800832a:	e116      	b.n	800855a <UART_SetConfig+0x2fe>
 800832c:	2302      	movs	r3, #2
 800832e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008332:	e112      	b.n	800855a <UART_SetConfig+0x2fe>
 8008334:	2304      	movs	r3, #4
 8008336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800833a:	e10e      	b.n	800855a <UART_SetConfig+0x2fe>
 800833c:	2308      	movs	r3, #8
 800833e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008342:	e10a      	b.n	800855a <UART_SetConfig+0x2fe>
 8008344:	2310      	movs	r3, #16
 8008346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800834a:	e106      	b.n	800855a <UART_SetConfig+0x2fe>
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a7c      	ldr	r2, [pc, #496]	; (8008544 <UART_SetConfig+0x2e8>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d138      	bne.n	80083c8 <UART_SetConfig+0x16c>
 8008356:	4b7a      	ldr	r3, [pc, #488]	; (8008540 <UART_SetConfig+0x2e4>)
 8008358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800835c:	f003 030c 	and.w	r3, r3, #12
 8008360:	2b0c      	cmp	r3, #12
 8008362:	d82d      	bhi.n	80083c0 <UART_SetConfig+0x164>
 8008364:	a201      	add	r2, pc, #4	; (adr r2, 800836c <UART_SetConfig+0x110>)
 8008366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836a:	bf00      	nop
 800836c:	080083a1 	.word	0x080083a1
 8008370:	080083c1 	.word	0x080083c1
 8008374:	080083c1 	.word	0x080083c1
 8008378:	080083c1 	.word	0x080083c1
 800837c:	080083b1 	.word	0x080083b1
 8008380:	080083c1 	.word	0x080083c1
 8008384:	080083c1 	.word	0x080083c1
 8008388:	080083c1 	.word	0x080083c1
 800838c:	080083a9 	.word	0x080083a9
 8008390:	080083c1 	.word	0x080083c1
 8008394:	080083c1 	.word	0x080083c1
 8008398:	080083c1 	.word	0x080083c1
 800839c:	080083b9 	.word	0x080083b9
 80083a0:	2300      	movs	r3, #0
 80083a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083a6:	e0d8      	b.n	800855a <UART_SetConfig+0x2fe>
 80083a8:	2302      	movs	r3, #2
 80083aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ae:	e0d4      	b.n	800855a <UART_SetConfig+0x2fe>
 80083b0:	2304      	movs	r3, #4
 80083b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083b6:	e0d0      	b.n	800855a <UART_SetConfig+0x2fe>
 80083b8:	2308      	movs	r3, #8
 80083ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083be:	e0cc      	b.n	800855a <UART_SetConfig+0x2fe>
 80083c0:	2310      	movs	r3, #16
 80083c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083c6:	e0c8      	b.n	800855a <UART_SetConfig+0x2fe>
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a5e      	ldr	r2, [pc, #376]	; (8008548 <UART_SetConfig+0x2ec>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d125      	bne.n	800841e <UART_SetConfig+0x1c2>
 80083d2:	4b5b      	ldr	r3, [pc, #364]	; (8008540 <UART_SetConfig+0x2e4>)
 80083d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80083dc:	2b30      	cmp	r3, #48	; 0x30
 80083de:	d016      	beq.n	800840e <UART_SetConfig+0x1b2>
 80083e0:	2b30      	cmp	r3, #48	; 0x30
 80083e2:	d818      	bhi.n	8008416 <UART_SetConfig+0x1ba>
 80083e4:	2b20      	cmp	r3, #32
 80083e6:	d00a      	beq.n	80083fe <UART_SetConfig+0x1a2>
 80083e8:	2b20      	cmp	r3, #32
 80083ea:	d814      	bhi.n	8008416 <UART_SetConfig+0x1ba>
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d002      	beq.n	80083f6 <UART_SetConfig+0x19a>
 80083f0:	2b10      	cmp	r3, #16
 80083f2:	d008      	beq.n	8008406 <UART_SetConfig+0x1aa>
 80083f4:	e00f      	b.n	8008416 <UART_SetConfig+0x1ba>
 80083f6:	2300      	movs	r3, #0
 80083f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083fc:	e0ad      	b.n	800855a <UART_SetConfig+0x2fe>
 80083fe:	2302      	movs	r3, #2
 8008400:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008404:	e0a9      	b.n	800855a <UART_SetConfig+0x2fe>
 8008406:	2304      	movs	r3, #4
 8008408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800840c:	e0a5      	b.n	800855a <UART_SetConfig+0x2fe>
 800840e:	2308      	movs	r3, #8
 8008410:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008414:	e0a1      	b.n	800855a <UART_SetConfig+0x2fe>
 8008416:	2310      	movs	r3, #16
 8008418:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800841c:	e09d      	b.n	800855a <UART_SetConfig+0x2fe>
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a4a      	ldr	r2, [pc, #296]	; (800854c <UART_SetConfig+0x2f0>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d125      	bne.n	8008474 <UART_SetConfig+0x218>
 8008428:	4b45      	ldr	r3, [pc, #276]	; (8008540 <UART_SetConfig+0x2e4>)
 800842a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800842e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008432:	2bc0      	cmp	r3, #192	; 0xc0
 8008434:	d016      	beq.n	8008464 <UART_SetConfig+0x208>
 8008436:	2bc0      	cmp	r3, #192	; 0xc0
 8008438:	d818      	bhi.n	800846c <UART_SetConfig+0x210>
 800843a:	2b80      	cmp	r3, #128	; 0x80
 800843c:	d00a      	beq.n	8008454 <UART_SetConfig+0x1f8>
 800843e:	2b80      	cmp	r3, #128	; 0x80
 8008440:	d814      	bhi.n	800846c <UART_SetConfig+0x210>
 8008442:	2b00      	cmp	r3, #0
 8008444:	d002      	beq.n	800844c <UART_SetConfig+0x1f0>
 8008446:	2b40      	cmp	r3, #64	; 0x40
 8008448:	d008      	beq.n	800845c <UART_SetConfig+0x200>
 800844a:	e00f      	b.n	800846c <UART_SetConfig+0x210>
 800844c:	2300      	movs	r3, #0
 800844e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008452:	e082      	b.n	800855a <UART_SetConfig+0x2fe>
 8008454:	2302      	movs	r3, #2
 8008456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800845a:	e07e      	b.n	800855a <UART_SetConfig+0x2fe>
 800845c:	2304      	movs	r3, #4
 800845e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008462:	e07a      	b.n	800855a <UART_SetConfig+0x2fe>
 8008464:	2308      	movs	r3, #8
 8008466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800846a:	e076      	b.n	800855a <UART_SetConfig+0x2fe>
 800846c:	2310      	movs	r3, #16
 800846e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008472:	e072      	b.n	800855a <UART_SetConfig+0x2fe>
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a35      	ldr	r2, [pc, #212]	; (8008550 <UART_SetConfig+0x2f4>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d12a      	bne.n	80084d4 <UART_SetConfig+0x278>
 800847e:	4b30      	ldr	r3, [pc, #192]	; (8008540 <UART_SetConfig+0x2e4>)
 8008480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008484:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008488:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800848c:	d01a      	beq.n	80084c4 <UART_SetConfig+0x268>
 800848e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008492:	d81b      	bhi.n	80084cc <UART_SetConfig+0x270>
 8008494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008498:	d00c      	beq.n	80084b4 <UART_SetConfig+0x258>
 800849a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800849e:	d815      	bhi.n	80084cc <UART_SetConfig+0x270>
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d003      	beq.n	80084ac <UART_SetConfig+0x250>
 80084a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084a8:	d008      	beq.n	80084bc <UART_SetConfig+0x260>
 80084aa:	e00f      	b.n	80084cc <UART_SetConfig+0x270>
 80084ac:	2300      	movs	r3, #0
 80084ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084b2:	e052      	b.n	800855a <UART_SetConfig+0x2fe>
 80084b4:	2302      	movs	r3, #2
 80084b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ba:	e04e      	b.n	800855a <UART_SetConfig+0x2fe>
 80084bc:	2304      	movs	r3, #4
 80084be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084c2:	e04a      	b.n	800855a <UART_SetConfig+0x2fe>
 80084c4:	2308      	movs	r3, #8
 80084c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ca:	e046      	b.n	800855a <UART_SetConfig+0x2fe>
 80084cc:	2310      	movs	r3, #16
 80084ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084d2:	e042      	b.n	800855a <UART_SetConfig+0x2fe>
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a17      	ldr	r2, [pc, #92]	; (8008538 <UART_SetConfig+0x2dc>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d13a      	bne.n	8008554 <UART_SetConfig+0x2f8>
 80084de:	4b18      	ldr	r3, [pc, #96]	; (8008540 <UART_SetConfig+0x2e4>)
 80084e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80084e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084ec:	d01a      	beq.n	8008524 <UART_SetConfig+0x2c8>
 80084ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084f2:	d81b      	bhi.n	800852c <UART_SetConfig+0x2d0>
 80084f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084f8:	d00c      	beq.n	8008514 <UART_SetConfig+0x2b8>
 80084fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084fe:	d815      	bhi.n	800852c <UART_SetConfig+0x2d0>
 8008500:	2b00      	cmp	r3, #0
 8008502:	d003      	beq.n	800850c <UART_SetConfig+0x2b0>
 8008504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008508:	d008      	beq.n	800851c <UART_SetConfig+0x2c0>
 800850a:	e00f      	b.n	800852c <UART_SetConfig+0x2d0>
 800850c:	2300      	movs	r3, #0
 800850e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008512:	e022      	b.n	800855a <UART_SetConfig+0x2fe>
 8008514:	2302      	movs	r3, #2
 8008516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800851a:	e01e      	b.n	800855a <UART_SetConfig+0x2fe>
 800851c:	2304      	movs	r3, #4
 800851e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008522:	e01a      	b.n	800855a <UART_SetConfig+0x2fe>
 8008524:	2308      	movs	r3, #8
 8008526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800852a:	e016      	b.n	800855a <UART_SetConfig+0x2fe>
 800852c:	2310      	movs	r3, #16
 800852e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008532:	e012      	b.n	800855a <UART_SetConfig+0x2fe>
 8008534:	cfff69f3 	.word	0xcfff69f3
 8008538:	40008000 	.word	0x40008000
 800853c:	40013800 	.word	0x40013800
 8008540:	40021000 	.word	0x40021000
 8008544:	40004400 	.word	0x40004400
 8008548:	40004800 	.word	0x40004800
 800854c:	40004c00 	.word	0x40004c00
 8008550:	40005000 	.word	0x40005000
 8008554:	2310      	movs	r3, #16
 8008556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4aae      	ldr	r2, [pc, #696]	; (8008818 <UART_SetConfig+0x5bc>)
 8008560:	4293      	cmp	r3, r2
 8008562:	f040 8097 	bne.w	8008694 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008566:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800856a:	2b08      	cmp	r3, #8
 800856c:	d823      	bhi.n	80085b6 <UART_SetConfig+0x35a>
 800856e:	a201      	add	r2, pc, #4	; (adr r2, 8008574 <UART_SetConfig+0x318>)
 8008570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008574:	08008599 	.word	0x08008599
 8008578:	080085b7 	.word	0x080085b7
 800857c:	080085a1 	.word	0x080085a1
 8008580:	080085b7 	.word	0x080085b7
 8008584:	080085a7 	.word	0x080085a7
 8008588:	080085b7 	.word	0x080085b7
 800858c:	080085b7 	.word	0x080085b7
 8008590:	080085b7 	.word	0x080085b7
 8008594:	080085af 	.word	0x080085af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008598:	f7fb fc3a 	bl	8003e10 <HAL_RCC_GetPCLK1Freq>
 800859c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800859e:	e010      	b.n	80085c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085a0:	4b9e      	ldr	r3, [pc, #632]	; (800881c <UART_SetConfig+0x5c0>)
 80085a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80085a4:	e00d      	b.n	80085c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085a6:	f7fb fb9b 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 80085aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085ac:	e009      	b.n	80085c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80085b4:	e005      	b.n	80085c2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80085b6:	2300      	movs	r3, #0
 80085b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80085c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80085c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	f000 8130 	beq.w	800882a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ce:	4a94      	ldr	r2, [pc, #592]	; (8008820 <UART_SetConfig+0x5c4>)
 80085d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085d4:	461a      	mov	r2, r3
 80085d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80085dc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	685a      	ldr	r2, [r3, #4]
 80085e2:	4613      	mov	r3, r2
 80085e4:	005b      	lsls	r3, r3, #1
 80085e6:	4413      	add	r3, r2
 80085e8:	69ba      	ldr	r2, [r7, #24]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d305      	bcc.n	80085fa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085f4:	69ba      	ldr	r2, [r7, #24]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d903      	bls.n	8008602 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008600:	e113      	b.n	800882a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008604:	2200      	movs	r2, #0
 8008606:	60bb      	str	r3, [r7, #8]
 8008608:	60fa      	str	r2, [r7, #12]
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860e:	4a84      	ldr	r2, [pc, #528]	; (8008820 <UART_SetConfig+0x5c4>)
 8008610:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008614:	b29b      	uxth	r3, r3
 8008616:	2200      	movs	r2, #0
 8008618:	603b      	str	r3, [r7, #0]
 800861a:	607a      	str	r2, [r7, #4]
 800861c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008620:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008624:	f7f7 fe44 	bl	80002b0 <__aeabi_uldivmod>
 8008628:	4602      	mov	r2, r0
 800862a:	460b      	mov	r3, r1
 800862c:	4610      	mov	r0, r2
 800862e:	4619      	mov	r1, r3
 8008630:	f04f 0200 	mov.w	r2, #0
 8008634:	f04f 0300 	mov.w	r3, #0
 8008638:	020b      	lsls	r3, r1, #8
 800863a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800863e:	0202      	lsls	r2, r0, #8
 8008640:	6979      	ldr	r1, [r7, #20]
 8008642:	6849      	ldr	r1, [r1, #4]
 8008644:	0849      	lsrs	r1, r1, #1
 8008646:	2000      	movs	r0, #0
 8008648:	460c      	mov	r4, r1
 800864a:	4605      	mov	r5, r0
 800864c:	eb12 0804 	adds.w	r8, r2, r4
 8008650:	eb43 0905 	adc.w	r9, r3, r5
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	469a      	mov	sl, r3
 800865c:	4693      	mov	fp, r2
 800865e:	4652      	mov	r2, sl
 8008660:	465b      	mov	r3, fp
 8008662:	4640      	mov	r0, r8
 8008664:	4649      	mov	r1, r9
 8008666:	f7f7 fe23 	bl	80002b0 <__aeabi_uldivmod>
 800866a:	4602      	mov	r2, r0
 800866c:	460b      	mov	r3, r1
 800866e:	4613      	mov	r3, r2
 8008670:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008672:	6a3b      	ldr	r3, [r7, #32]
 8008674:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008678:	d308      	bcc.n	800868c <UART_SetConfig+0x430>
 800867a:	6a3b      	ldr	r3, [r7, #32]
 800867c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008680:	d204      	bcs.n	800868c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	6a3a      	ldr	r2, [r7, #32]
 8008688:	60da      	str	r2, [r3, #12]
 800868a:	e0ce      	b.n	800882a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800868c:	2301      	movs	r3, #1
 800868e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008692:	e0ca      	b.n	800882a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	69db      	ldr	r3, [r3, #28]
 8008698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800869c:	d166      	bne.n	800876c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800869e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80086a2:	2b08      	cmp	r3, #8
 80086a4:	d827      	bhi.n	80086f6 <UART_SetConfig+0x49a>
 80086a6:	a201      	add	r2, pc, #4	; (adr r2, 80086ac <UART_SetConfig+0x450>)
 80086a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ac:	080086d1 	.word	0x080086d1
 80086b0:	080086d9 	.word	0x080086d9
 80086b4:	080086e1 	.word	0x080086e1
 80086b8:	080086f7 	.word	0x080086f7
 80086bc:	080086e7 	.word	0x080086e7
 80086c0:	080086f7 	.word	0x080086f7
 80086c4:	080086f7 	.word	0x080086f7
 80086c8:	080086f7 	.word	0x080086f7
 80086cc:	080086ef 	.word	0x080086ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086d0:	f7fb fb9e 	bl	8003e10 <HAL_RCC_GetPCLK1Freq>
 80086d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086d6:	e014      	b.n	8008702 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086d8:	f7fb fbb0 	bl	8003e3c <HAL_RCC_GetPCLK2Freq>
 80086dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086de:	e010      	b.n	8008702 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086e0:	4b4e      	ldr	r3, [pc, #312]	; (800881c <UART_SetConfig+0x5c0>)
 80086e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086e4:	e00d      	b.n	8008702 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086e6:	f7fb fafb 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 80086ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086ec:	e009      	b.n	8008702 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086f4:	e005      	b.n	8008702 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80086f6:	2300      	movs	r3, #0
 80086f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008700:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008704:	2b00      	cmp	r3, #0
 8008706:	f000 8090 	beq.w	800882a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870e:	4a44      	ldr	r2, [pc, #272]	; (8008820 <UART_SetConfig+0x5c4>)
 8008710:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008714:	461a      	mov	r2, r3
 8008716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008718:	fbb3 f3f2 	udiv	r3, r3, r2
 800871c:	005a      	lsls	r2, r3, #1
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	085b      	lsrs	r3, r3, #1
 8008724:	441a      	add	r2, r3
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	fbb2 f3f3 	udiv	r3, r2, r3
 800872e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008730:	6a3b      	ldr	r3, [r7, #32]
 8008732:	2b0f      	cmp	r3, #15
 8008734:	d916      	bls.n	8008764 <UART_SetConfig+0x508>
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800873c:	d212      	bcs.n	8008764 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800873e:	6a3b      	ldr	r3, [r7, #32]
 8008740:	b29b      	uxth	r3, r3
 8008742:	f023 030f 	bic.w	r3, r3, #15
 8008746:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008748:	6a3b      	ldr	r3, [r7, #32]
 800874a:	085b      	lsrs	r3, r3, #1
 800874c:	b29b      	uxth	r3, r3
 800874e:	f003 0307 	and.w	r3, r3, #7
 8008752:	b29a      	uxth	r2, r3
 8008754:	8bfb      	ldrh	r3, [r7, #30]
 8008756:	4313      	orrs	r3, r2
 8008758:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	8bfa      	ldrh	r2, [r7, #30]
 8008760:	60da      	str	r2, [r3, #12]
 8008762:	e062      	b.n	800882a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800876a:	e05e      	b.n	800882a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800876c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008770:	2b08      	cmp	r3, #8
 8008772:	d828      	bhi.n	80087c6 <UART_SetConfig+0x56a>
 8008774:	a201      	add	r2, pc, #4	; (adr r2, 800877c <UART_SetConfig+0x520>)
 8008776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877a:	bf00      	nop
 800877c:	080087a1 	.word	0x080087a1
 8008780:	080087a9 	.word	0x080087a9
 8008784:	080087b1 	.word	0x080087b1
 8008788:	080087c7 	.word	0x080087c7
 800878c:	080087b7 	.word	0x080087b7
 8008790:	080087c7 	.word	0x080087c7
 8008794:	080087c7 	.word	0x080087c7
 8008798:	080087c7 	.word	0x080087c7
 800879c:	080087bf 	.word	0x080087bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087a0:	f7fb fb36 	bl	8003e10 <HAL_RCC_GetPCLK1Freq>
 80087a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087a6:	e014      	b.n	80087d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087a8:	f7fb fb48 	bl	8003e3c <HAL_RCC_GetPCLK2Freq>
 80087ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087ae:	e010      	b.n	80087d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087b0:	4b1a      	ldr	r3, [pc, #104]	; (800881c <UART_SetConfig+0x5c0>)
 80087b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80087b4:	e00d      	b.n	80087d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087b6:	f7fb fa93 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 80087ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087bc:	e009      	b.n	80087d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80087c4:	e005      	b.n	80087d2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80087c6:	2300      	movs	r3, #0
 80087c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80087d0:	bf00      	nop
    }

    if (pclk != 0U)
 80087d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d028      	beq.n	800882a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087dc:	4a10      	ldr	r2, [pc, #64]	; (8008820 <UART_SetConfig+0x5c4>)
 80087de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087e2:	461a      	mov	r2, r3
 80087e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	085b      	lsrs	r3, r3, #1
 80087f0:	441a      	add	r2, r3
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80087fa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087fc:	6a3b      	ldr	r3, [r7, #32]
 80087fe:	2b0f      	cmp	r3, #15
 8008800:	d910      	bls.n	8008824 <UART_SetConfig+0x5c8>
 8008802:	6a3b      	ldr	r3, [r7, #32]
 8008804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008808:	d20c      	bcs.n	8008824 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800880a:	6a3b      	ldr	r3, [r7, #32]
 800880c:	b29a      	uxth	r2, r3
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	60da      	str	r2, [r3, #12]
 8008814:	e009      	b.n	800882a <UART_SetConfig+0x5ce>
 8008816:	bf00      	nop
 8008818:	40008000 	.word	0x40008000
 800881c:	00f42400 	.word	0x00f42400
 8008820:	080118dc 	.word	0x080118dc
      }
      else
      {
        ret = HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	2201      	movs	r2, #1
 800882e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	2201      	movs	r2, #1
 8008836:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	2200      	movs	r2, #0
 800883e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	2200      	movs	r2, #0
 8008844:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008846:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800884a:	4618      	mov	r0, r3
 800884c:	3730      	adds	r7, #48	; 0x30
 800884e:	46bd      	mov	sp, r7
 8008850:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008854 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008860:	f003 0301 	and.w	r3, r3, #1
 8008864:	2b00      	cmp	r3, #0
 8008866:	d00a      	beq.n	800887e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	430a      	orrs	r2, r1
 800887c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008882:	f003 0302 	and.w	r3, r3, #2
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00a      	beq.n	80088a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	430a      	orrs	r2, r1
 800889e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a4:	f003 0304 	and.w	r3, r3, #4
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00a      	beq.n	80088c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	430a      	orrs	r2, r1
 80088c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c6:	f003 0308 	and.w	r3, r3, #8
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00a      	beq.n	80088e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	430a      	orrs	r2, r1
 80088e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e8:	f003 0310 	and.w	r3, r3, #16
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00a      	beq.n	8008906 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	430a      	orrs	r2, r1
 8008904:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890a:	f003 0320 	and.w	r3, r3, #32
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00a      	beq.n	8008928 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	430a      	orrs	r2, r1
 8008926:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800892c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008930:	2b00      	cmp	r3, #0
 8008932:	d01a      	beq.n	800896a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	430a      	orrs	r2, r1
 8008948:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800894e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008952:	d10a      	bne.n	800896a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	430a      	orrs	r2, r1
 8008968:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00a      	beq.n	800898c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	430a      	orrs	r2, r1
 800898a:	605a      	str	r2, [r3, #4]
  }
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b086      	sub	sp, #24
 800899c:	af02      	add	r7, sp, #8
 800899e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089a8:	f7f8 fd6e 	bl	8001488 <HAL_GetTick>
 80089ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 0308 	and.w	r3, r3, #8
 80089b8:	2b08      	cmp	r3, #8
 80089ba:	d10e      	bne.n	80089da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f82f 	bl	8008a2e <UART_WaitOnFlagUntilTimeout>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089d6:	2303      	movs	r3, #3
 80089d8:	e025      	b.n	8008a26 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 0304 	and.w	r3, r3, #4
 80089e4:	2b04      	cmp	r3, #4
 80089e6:	d10e      	bne.n	8008a06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f819 	bl	8008a2e <UART_WaitOnFlagUntilTimeout>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d001      	beq.n	8008a06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a02:	2303      	movs	r3, #3
 8008a04:	e00f      	b.n	8008a26 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2220      	movs	r2, #32
 8008a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2220      	movs	r2, #32
 8008a12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b09c      	sub	sp, #112	; 0x70
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	60f8      	str	r0, [r7, #12]
 8008a36:	60b9      	str	r1, [r7, #8]
 8008a38:	603b      	str	r3, [r7, #0]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a3e:	e0a9      	b.n	8008b94 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a46:	f000 80a5 	beq.w	8008b94 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a4a:	f7f8 fd1d 	bl	8001488 <HAL_GetTick>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d302      	bcc.n	8008a60 <UART_WaitOnFlagUntilTimeout+0x32>
 8008a5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d140      	bne.n	8008ae2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a68:	e853 3f00 	ldrex	r3, [r3]
 8008a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a74:	667b      	str	r3, [r7, #100]	; 0x64
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a80:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a86:	e841 2300 	strex	r3, r2, [r1]
 8008a8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1e6      	bne.n	8008a60 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	3308      	adds	r3, #8
 8008a98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a9c:	e853 3f00 	ldrex	r3, [r3]
 8008aa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa4:	f023 0301 	bic.w	r3, r3, #1
 8008aa8:	663b      	str	r3, [r7, #96]	; 0x60
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	3308      	adds	r3, #8
 8008ab0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ab2:	64ba      	str	r2, [r7, #72]	; 0x48
 8008ab4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ab8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008aba:	e841 2300 	strex	r3, r2, [r1]
 8008abe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1e5      	bne.n	8008a92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2220      	movs	r2, #32
 8008aca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2220      	movs	r2, #32
 8008ad2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	e069      	b.n	8008bb6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0304 	and.w	r3, r3, #4
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d051      	beq.n	8008b94 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	69db      	ldr	r3, [r3, #28]
 8008af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008afa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008afe:	d149      	bne.n	8008b94 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b08:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b12:	e853 3f00 	ldrex	r3, [r3]
 8008b16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	461a      	mov	r2, r3
 8008b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b28:	637b      	str	r3, [r7, #52]	; 0x34
 8008b2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b30:	e841 2300 	strex	r3, r2, [r1]
 8008b34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1e6      	bne.n	8008b0a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	3308      	adds	r3, #8
 8008b42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	e853 3f00 	ldrex	r3, [r3]
 8008b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	f023 0301 	bic.w	r3, r3, #1
 8008b52:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	3308      	adds	r3, #8
 8008b5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b5c:	623a      	str	r2, [r7, #32]
 8008b5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b60:	69f9      	ldr	r1, [r7, #28]
 8008b62:	6a3a      	ldr	r2, [r7, #32]
 8008b64:	e841 2300 	strex	r3, r2, [r1]
 8008b68:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1e5      	bne.n	8008b3c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2220      	movs	r2, #32
 8008b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2220      	movs	r2, #32
 8008b7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2220      	movs	r2, #32
 8008b84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008b90:	2303      	movs	r3, #3
 8008b92:	e010      	b.n	8008bb6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	69da      	ldr	r2, [r3, #28]
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	bf0c      	ite	eq
 8008ba4:	2301      	moveq	r3, #1
 8008ba6:	2300      	movne	r3, #0
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	461a      	mov	r2, r3
 8008bac:	79fb      	ldrb	r3, [r7, #7]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	f43f af46 	beq.w	8008a40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3770      	adds	r7, #112	; 0x70
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b085      	sub	sp, #20
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d101      	bne.n	8008bd4 <HAL_UARTEx_DisableFifoMode+0x16>
 8008bd0:	2302      	movs	r3, #2
 8008bd2:	e027      	b.n	8008c24 <HAL_UARTEx_DisableFifoMode+0x66>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2224      	movs	r2, #36	; 0x24
 8008be0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f022 0201 	bic.w	r2, r2, #1
 8008bfa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008c02:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2220      	movs	r2, #32
 8008c16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3714      	adds	r7, #20
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d101      	bne.n	8008c48 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008c44:	2302      	movs	r3, #2
 8008c46:	e02d      	b.n	8008ca4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2224      	movs	r2, #36	; 0x24
 8008c54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f022 0201 	bic.w	r2, r2, #1
 8008c6e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	683a      	ldr	r2, [r7, #0]
 8008c80:	430a      	orrs	r2, r1
 8008c82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 f84f 	bl	8008d28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2220      	movs	r2, #32
 8008c96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d101      	bne.n	8008cc4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008cc0:	2302      	movs	r3, #2
 8008cc2:	e02d      	b.n	8008d20 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2224      	movs	r2, #36	; 0x24
 8008cd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f022 0201 	bic.w	r2, r2, #1
 8008cea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	683a      	ldr	r2, [r7, #0]
 8008cfc:	430a      	orrs	r2, r1
 8008cfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 f811 	bl	8008d28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2220      	movs	r2, #32
 8008d12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d108      	bne.n	8008d4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008d48:	e031      	b.n	8008dae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008d4a:	2308      	movs	r3, #8
 8008d4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d4e:	2308      	movs	r3, #8
 8008d50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	0e5b      	lsrs	r3, r3, #25
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	f003 0307 	and.w	r3, r3, #7
 8008d60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	0f5b      	lsrs	r3, r3, #29
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	f003 0307 	and.w	r3, r3, #7
 8008d70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d72:	7bbb      	ldrb	r3, [r7, #14]
 8008d74:	7b3a      	ldrb	r2, [r7, #12]
 8008d76:	4911      	ldr	r1, [pc, #68]	; (8008dbc <UARTEx_SetNbDataToProcess+0x94>)
 8008d78:	5c8a      	ldrb	r2, [r1, r2]
 8008d7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d7e:	7b3a      	ldrb	r2, [r7, #12]
 8008d80:	490f      	ldr	r1, [pc, #60]	; (8008dc0 <UARTEx_SetNbDataToProcess+0x98>)
 8008d82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d84:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d88:	b29a      	uxth	r2, r3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d90:	7bfb      	ldrb	r3, [r7, #15]
 8008d92:	7b7a      	ldrb	r2, [r7, #13]
 8008d94:	4909      	ldr	r1, [pc, #36]	; (8008dbc <UARTEx_SetNbDataToProcess+0x94>)
 8008d96:	5c8a      	ldrb	r2, [r1, r2]
 8008d98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d9c:	7b7a      	ldrb	r2, [r7, #13]
 8008d9e:	4908      	ldr	r1, [pc, #32]	; (8008dc0 <UARTEx_SetNbDataToProcess+0x98>)
 8008da0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008da2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008dae:	bf00      	nop
 8008db0:	3714      	adds	r7, #20
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	080118f4 	.word	0x080118f4
 8008dc0:	080118fc 	.word	0x080118fc

08008dc4 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008dc4:	b084      	sub	sp, #16
 8008dc6:	b480      	push	{r7}
 8008dc8:	b085      	sub	sp, #20
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	f107 001c 	add.w	r0, r7, #28
 8008dd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8008dda:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8008ddc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008dde:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8008de2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8008de6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8008dea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	685a      	ldr	r2, [r3, #4]
 8008df6:	4b07      	ldr	r3, [pc, #28]	; (8008e14 <SDMMC_Init+0x50>)
 8008df8:	4013      	ands	r3, r2
 8008dfa:	68fa      	ldr	r2, [r7, #12]
 8008dfc:	431a      	orrs	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3714      	adds	r7, #20
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	b004      	add	sp, #16
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	ffc02c00 	.word	0xffc02c00

08008e18 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	370c      	adds	r7, #12
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr

08008e32 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008e32:	b480      	push	{r7}
 8008e34:	b083      	sub	sp, #12
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
 8008e3a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f043 0203 	orr.w	r2, r3, #3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008e68:	2002      	movs	r0, #2
 8008e6a:	f7f8 fb19 	bl	80014a0 <HAL_Delay>

  return HAL_OK;
 8008e6e:	2300      	movs	r3, #0
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 0303 	and.w	r3, r3, #3
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	370c      	adds	r7, #12
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b085      	sub	sp, #20
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008eb2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008eb8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008ebe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	68da      	ldr	r2, [r3, #12]
 8008eca:	4b06      	ldr	r3, [pc, #24]	; (8008ee4 <SDMMC_SendCommand+0x50>)
 8008ecc:	4013      	ands	r3, r2
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	431a      	orrs	r2, r3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3714      	adds	r7, #20
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr
 8008ee4:	fffee0c0 	.word	0xfffee0c0

08008ee8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	b2db      	uxtb	r3, r3
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	370c      	adds	r7, #12
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr

08008f02 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008f02:	b480      	push	{r7}
 8008f04:	b085      	sub	sp, #20
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
 8008f0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	3314      	adds	r3, #20
 8008f10:	461a      	mov	r2, r3
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	4413      	add	r3, r2
 8008f16:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3714      	adds	r7, #20
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008f32:	2300      	movs	r3, #0
 8008f34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	685a      	ldr	r2, [r3, #4]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008f4e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008f54:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008f5a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	431a      	orrs	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008f72:	2300      	movs	r3, #0

}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b088      	sub	sp, #32
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008f8e:	2310      	movs	r3, #16
 8008f90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fa0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fa2:	f107 0308 	add.w	r3, r7, #8
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f7ff ff73 	bl	8008e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fb2:	2110      	movs	r1, #16
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fa7b 	bl	80094b0 <SDMMC_GetCmdResp1>
 8008fba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fbc:	69fb      	ldr	r3, [r7, #28]
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3720      	adds	r7, #32
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b088      	sub	sp, #32
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
 8008fce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008fd4:	2311      	movs	r3, #17
 8008fd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fe2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fe6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fe8:	f107 0308 	add.w	r3, r7, #8
 8008fec:	4619      	mov	r1, r3
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f7ff ff50 	bl	8008e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ff8:	2111      	movs	r1, #17
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 fa58 	bl	80094b0 <SDMMC_GetCmdResp1>
 8009000:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009002:	69fb      	ldr	r3, [r7, #28]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3720      	adds	r7, #32
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b088      	sub	sp, #32
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800901a:	2312      	movs	r3, #18
 800901c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800901e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009022:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009024:	2300      	movs	r3, #0
 8009026:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800902c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800902e:	f107 0308 	add.w	r3, r7, #8
 8009032:	4619      	mov	r1, r3
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7ff ff2d 	bl	8008e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800903a:	f241 3288 	movw	r2, #5000	; 0x1388
 800903e:	2112      	movs	r1, #18
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 fa35 	bl	80094b0 <SDMMC_GetCmdResp1>
 8009046:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009048:	69fb      	ldr	r3, [r7, #28]
}
 800904a:	4618      	mov	r0, r3
 800904c:	3720      	adds	r7, #32
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b088      	sub	sp, #32
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009060:	2318      	movs	r3, #24
 8009062:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009064:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009068:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800906a:	2300      	movs	r3, #0
 800906c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800906e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009072:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009074:	f107 0308 	add.w	r3, r7, #8
 8009078:	4619      	mov	r1, r3
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7ff ff0a 	bl	8008e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009080:	f241 3288 	movw	r2, #5000	; 0x1388
 8009084:	2118      	movs	r1, #24
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fa12 	bl	80094b0 <SDMMC_GetCmdResp1>
 800908c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800908e:	69fb      	ldr	r3, [r7, #28]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3720      	adds	r7, #32
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b088      	sub	sp, #32
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80090a6:	2319      	movs	r3, #25
 80090a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090b0:	2300      	movs	r3, #0
 80090b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090ba:	f107 0308 	add.w	r3, r7, #8
 80090be:	4619      	mov	r1, r3
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f7ff fee7 	bl	8008e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80090c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80090ca:	2119      	movs	r1, #25
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 f9ef 	bl	80094b0 <SDMMC_GetCmdResp1>
 80090d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090d4:	69fb      	ldr	r3, [r7, #28]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3720      	adds	r7, #32
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
	...

080090e0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b088      	sub	sp, #32
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80090e8:	2300      	movs	r3, #0
 80090ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80090ec:	230c      	movs	r3, #12
 80090ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090f6:	2300      	movs	r3, #0
 80090f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090fe:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009118:	f107 0308 	add.w	r3, r7, #8
 800911c:	4619      	mov	r1, r3
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f7ff feb8 	bl	8008e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009124:	4a08      	ldr	r2, [pc, #32]	; (8009148 <SDMMC_CmdStopTransfer+0x68>)
 8009126:	210c      	movs	r1, #12
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 f9c1 	bl	80094b0 <SDMMC_GetCmdResp1>
 800912e:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800913c:	69fb      	ldr	r3, [r7, #28]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3720      	adds	r7, #32
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	05f5e100 	.word	0x05f5e100

0800914c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b08a      	sub	sp, #40	; 0x28
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800915c:	2307      	movs	r3, #7
 800915e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009160:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009164:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009166:	2300      	movs	r3, #0
 8009168:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800916a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800916e:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009170:	f107 0310 	add.w	r3, r7, #16
 8009174:	4619      	mov	r1, r3
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f7ff fe8c 	bl	8008e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800917c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009180:	2107      	movs	r1, #7
 8009182:	68f8      	ldr	r0, [r7, #12]
 8009184:	f000 f994 	bl	80094b0 <SDMMC_GetCmdResp1>
 8009188:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800918a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800918c:	4618      	mov	r0, r3
 800918e:	3728      	adds	r7, #40	; 0x28
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b088      	sub	sp, #32
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800919c:	2300      	movs	r3, #0
 800919e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80091a0:	2300      	movs	r3, #0
 80091a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80091a4:	2300      	movs	r3, #0
 80091a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091a8:	2300      	movs	r3, #0
 80091aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091b2:	f107 0308 	add.w	r3, r7, #8
 80091b6:	4619      	mov	r1, r3
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f7ff fe6b 	bl	8008e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 fbb8 	bl	8009934 <SDMMC_GetCmdError>
 80091c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091c6:	69fb      	ldr	r3, [r7, #28]
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3720      	adds	r7, #32
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b088      	sub	sp, #32
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80091d8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80091dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80091de:	2308      	movs	r3, #8
 80091e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091e8:	2300      	movs	r3, #0
 80091ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091f2:	f107 0308 	add.w	r3, r7, #8
 80091f6:	4619      	mov	r1, r3
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f7ff fe4b 	bl	8008e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fb4a 	bl	8009898 <SDMMC_GetCmdResp7>
 8009204:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009206:	69fb      	ldr	r3, [r7, #28]
}
 8009208:	4618      	mov	r0, r3
 800920a:	3720      	adds	r7, #32
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b088      	sub	sp, #32
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800921e:	2337      	movs	r3, #55	; 0x37
 8009220:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009222:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009226:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009228:	2300      	movs	r3, #0
 800922a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800922c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009230:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009232:	f107 0308 	add.w	r3, r7, #8
 8009236:	4619      	mov	r1, r3
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f7ff fe2b 	bl	8008e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800923e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009242:	2137      	movs	r1, #55	; 0x37
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f933 	bl	80094b0 <SDMMC_GetCmdResp1>
 800924a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800924c:	69fb      	ldr	r3, [r7, #28]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3720      	adds	r7, #32
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b088      	sub	sp, #32
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009264:	2329      	movs	r3, #41	; 0x29
 8009266:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009268:	f44f 7380 	mov.w	r3, #256	; 0x100
 800926c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800926e:	2300      	movs	r3, #0
 8009270:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009276:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009278:	f107 0308 	add.w	r3, r7, #8
 800927c:	4619      	mov	r1, r3
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7ff fe08 	bl	8008e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 fa4f 	bl	8009728 <SDMMC_GetCmdResp3>
 800928a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800928c:	69fb      	ldr	r3, [r7, #28]
}
 800928e:	4618      	mov	r0, r3
 8009290:	3720      	adds	r7, #32
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b088      	sub	sp, #32
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
 800929e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80092a4:	2306      	movs	r3, #6
 80092a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092ae:	2300      	movs	r3, #0
 80092b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092b8:	f107 0308 	add.w	r3, r7, #8
 80092bc:	4619      	mov	r1, r3
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f7ff fde8 	bl	8008e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80092c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80092c8:	2106      	movs	r1, #6
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f8f0 	bl	80094b0 <SDMMC_GetCmdResp1>
 80092d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092d2:	69fb      	ldr	r3, [r7, #28]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3720      	adds	r7, #32
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b088      	sub	sp, #32
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80092e4:	2300      	movs	r3, #0
 80092e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80092e8:	2333      	movs	r3, #51	; 0x33
 80092ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092f2:	2300      	movs	r3, #0
 80092f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092fc:	f107 0308 	add.w	r3, r7, #8
 8009300:	4619      	mov	r1, r3
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f7ff fdc6 	bl	8008e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009308:	f241 3288 	movw	r2, #5000	; 0x1388
 800930c:	2133      	movs	r1, #51	; 0x33
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 f8ce 	bl	80094b0 <SDMMC_GetCmdResp1>
 8009314:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009316:	69fb      	ldr	r3, [r7, #28]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3720      	adds	r7, #32
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b088      	sub	sp, #32
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009328:	2300      	movs	r3, #0
 800932a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800932c:	2302      	movs	r3, #2
 800932e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009330:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009334:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009336:	2300      	movs	r3, #0
 8009338:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800933a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800933e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009340:	f107 0308 	add.w	r3, r7, #8
 8009344:	4619      	mov	r1, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f7ff fda4 	bl	8008e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 f9a1 	bl	8009694 <SDMMC_GetCmdResp2>
 8009352:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009354:	69fb      	ldr	r3, [r7, #28]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3720      	adds	r7, #32
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b088      	sub	sp, #32
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
 8009366:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800936c:	2309      	movs	r3, #9
 800936e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009370:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009374:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009376:	2300      	movs	r3, #0
 8009378:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800937a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800937e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009380:	f107 0308 	add.w	r3, r7, #8
 8009384:	4619      	mov	r1, r3
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f7ff fd84 	bl	8008e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f981 	bl	8009694 <SDMMC_GetCmdResp2>
 8009392:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009394:	69fb      	ldr	r3, [r7, #28]
}
 8009396:	4618      	mov	r0, r3
 8009398:	3720      	adds	r7, #32
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b088      	sub	sp, #32
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
 80093a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80093a8:	2300      	movs	r3, #0
 80093aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80093ac:	2303      	movs	r3, #3
 80093ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80093b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093b6:	2300      	movs	r3, #0
 80093b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093c0:	f107 0308 	add.w	r3, r7, #8
 80093c4:	4619      	mov	r1, r3
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f7ff fd64 	bl	8008e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80093cc:	683a      	ldr	r2, [r7, #0]
 80093ce:	2103      	movs	r1, #3
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f9e9 	bl	80097a8 <SDMMC_GetCmdResp6>
 80093d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093d8:	69fb      	ldr	r3, [r7, #28]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3720      	adds	r7, #32
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b088      	sub	sp, #32
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
 80093ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80093f0:	230d      	movs	r3, #13
 80093f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80093f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093fa:	2300      	movs	r3, #0
 80093fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009402:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009404:	f107 0308 	add.w	r3, r7, #8
 8009408:	4619      	mov	r1, r3
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7ff fd42 	bl	8008e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009410:	f241 3288 	movw	r2, #5000	; 0x1388
 8009414:	210d      	movs	r1, #13
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 f84a 	bl	80094b0 <SDMMC_GetCmdResp1>
 800941c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800941e:	69fb      	ldr	r3, [r7, #28]
}
 8009420:	4618      	mov	r0, r3
 8009422:	3720      	adds	r7, #32
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b088      	sub	sp, #32
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009430:	2300      	movs	r3, #0
 8009432:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009434:	230d      	movs	r3, #13
 8009436:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009438:	f44f 7380 	mov.w	r3, #256	; 0x100
 800943c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800943e:	2300      	movs	r3, #0
 8009440:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009446:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009448:	f107 0308 	add.w	r3, r7, #8
 800944c:	4619      	mov	r1, r3
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f7ff fd20 	bl	8008e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009454:	f241 3288 	movw	r2, #5000	; 0x1388
 8009458:	210d      	movs	r1, #13
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f828 	bl	80094b0 <SDMMC_GetCmdResp1>
 8009460:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009462:	69fb      	ldr	r3, [r7, #28]
}
 8009464:	4618      	mov	r0, r3
 8009466:	3720      	adds	r7, #32
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b088      	sub	sp, #32
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8009474:	2300      	movs	r3, #0
 8009476:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8009478:	230b      	movs	r3, #11
 800947a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800947c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009480:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009482:	2300      	movs	r3, #0
 8009484:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800948a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800948c:	f107 0308 	add.w	r3, r7, #8
 8009490:	4619      	mov	r1, r3
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f7ff fcfe 	bl	8008e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8009498:	f241 3288 	movw	r2, #5000	; 0x1388
 800949c:	210b      	movs	r1, #11
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f806 	bl	80094b0 <SDMMC_GetCmdResp1>
 80094a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094a6:	69fb      	ldr	r3, [r7, #28]
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3720      	adds	r7, #32
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b088      	sub	sp, #32
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	460b      	mov	r3, r1
 80094ba:	607a      	str	r2, [r7, #4]
 80094bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80094be:	4b70      	ldr	r3, [pc, #448]	; (8009680 <SDMMC_GetCmdResp1+0x1d0>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a70      	ldr	r2, [pc, #448]	; (8009684 <SDMMC_GetCmdResp1+0x1d4>)
 80094c4:	fba2 2303 	umull	r2, r3, r2, r3
 80094c8:	0a5a      	lsrs	r2, r3, #9
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	fb02 f303 	mul.w	r3, r2, r3
 80094d0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	1e5a      	subs	r2, r3, #1
 80094d6:	61fa      	str	r2, [r7, #28]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d102      	bne.n	80094e2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094e0:	e0c9      	b.n	8009676 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e6:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80094e8:	69ba      	ldr	r2, [r7, #24]
 80094ea:	4b67      	ldr	r3, [pc, #412]	; (8009688 <SDMMC_GetCmdResp1+0x1d8>)
 80094ec:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d0ef      	beq.n	80094d2 <SDMMC_GetCmdResp1+0x22>
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1ea      	bne.n	80094d2 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009500:	f003 0304 	and.w	r3, r3, #4
 8009504:	2b00      	cmp	r3, #0
 8009506:	d004      	beq.n	8009512 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2204      	movs	r2, #4
 800950c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800950e:	2304      	movs	r3, #4
 8009510:	e0b1      	b.n	8009676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009516:	f003 0301 	and.w	r3, r3, #1
 800951a:	2b00      	cmp	r3, #0
 800951c:	d004      	beq.n	8009528 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2201      	movs	r2, #1
 8009522:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009524:	2301      	movs	r3, #1
 8009526:	e0a6      	b.n	8009676 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	4a58      	ldr	r2, [pc, #352]	; (800968c <SDMMC_GetCmdResp1+0x1dc>)
 800952c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800952e:	68f8      	ldr	r0, [r7, #12]
 8009530:	f7ff fcda 	bl	8008ee8 <SDMMC_GetCommandResponse>
 8009534:	4603      	mov	r3, r0
 8009536:	461a      	mov	r2, r3
 8009538:	7afb      	ldrb	r3, [r7, #11]
 800953a:	4293      	cmp	r3, r2
 800953c:	d001      	beq.n	8009542 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800953e:	2301      	movs	r3, #1
 8009540:	e099      	b.n	8009676 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009542:	2100      	movs	r1, #0
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f7ff fcdc 	bl	8008f02 <SDMMC_GetResponse>
 800954a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800954c:	697a      	ldr	r2, [r7, #20]
 800954e:	4b50      	ldr	r3, [pc, #320]	; (8009690 <SDMMC_GetCmdResp1+0x1e0>)
 8009550:	4013      	ands	r3, r2
 8009552:	2b00      	cmp	r3, #0
 8009554:	d101      	bne.n	800955a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009556:	2300      	movs	r3, #0
 8009558:	e08d      	b.n	8009676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	2b00      	cmp	r3, #0
 800955e:	da02      	bge.n	8009566 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009560:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009564:	e087      	b.n	8009676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800956c:	2b00      	cmp	r3, #0
 800956e:	d001      	beq.n	8009574 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009570:	2340      	movs	r3, #64	; 0x40
 8009572:	e080      	b.n	8009676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800957a:	2b00      	cmp	r3, #0
 800957c:	d001      	beq.n	8009582 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800957e:	2380      	movs	r3, #128	; 0x80
 8009580:	e079      	b.n	8009676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009588:	2b00      	cmp	r3, #0
 800958a:	d002      	beq.n	8009592 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800958c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009590:	e071      	b.n	8009676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009598:	2b00      	cmp	r3, #0
 800959a:	d002      	beq.n	80095a2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800959c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095a0:	e069      	b.n	8009676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d002      	beq.n	80095b2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80095ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095b0:	e061      	b.n	8009676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d002      	beq.n	80095c2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80095bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095c0:	e059      	b.n	8009676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d002      	beq.n	80095d2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80095cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095d0:	e051      	b.n	8009676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d002      	beq.n	80095e2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80095dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80095e0:	e049      	b.n	8009676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d002      	beq.n	80095f2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80095ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80095f0:	e041      	b.n	8009676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d002      	beq.n	8009602 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80095fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009600:	e039      	b.n	8009676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009608:	2b00      	cmp	r3, #0
 800960a:	d002      	beq.n	8009612 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800960c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009610:	e031      	b.n	8009676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009618:	2b00      	cmp	r3, #0
 800961a:	d002      	beq.n	8009622 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800961c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009620:	e029      	b.n	8009676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009628:	2b00      	cmp	r3, #0
 800962a:	d002      	beq.n	8009632 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800962c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009630:	e021      	b.n	8009676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009638:	2b00      	cmp	r3, #0
 800963a:	d002      	beq.n	8009642 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800963c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009640:	e019      	b.n	8009676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009648:	2b00      	cmp	r3, #0
 800964a:	d002      	beq.n	8009652 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800964c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009650:	e011      	b.n	8009676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009658:	2b00      	cmp	r3, #0
 800965a:	d002      	beq.n	8009662 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800965c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009660:	e009      	b.n	8009676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	f003 0308 	and.w	r3, r3, #8
 8009668:	2b00      	cmp	r3, #0
 800966a:	d002      	beq.n	8009672 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800966c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009670:	e001      	b.n	8009676 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009672:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009676:	4618      	mov	r0, r3
 8009678:	3720      	adds	r7, #32
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	20000000 	.word	0x20000000
 8009684:	10624dd3 	.word	0x10624dd3
 8009688:	00200045 	.word	0x00200045
 800968c:	002000c5 	.word	0x002000c5
 8009690:	fdffe008 	.word	0xfdffe008

08009694 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800969c:	4b1f      	ldr	r3, [pc, #124]	; (800971c <SDMMC_GetCmdResp2+0x88>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a1f      	ldr	r2, [pc, #124]	; (8009720 <SDMMC_GetCmdResp2+0x8c>)
 80096a2:	fba2 2303 	umull	r2, r3, r2, r3
 80096a6:	0a5b      	lsrs	r3, r3, #9
 80096a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80096ac:	fb02 f303 	mul.w	r3, r2, r3
 80096b0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	1e5a      	subs	r2, r3, #1
 80096b6:	60fa      	str	r2, [r7, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d102      	bne.n	80096c2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096c0:	e026      	b.n	8009710 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096c6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d0ef      	beq.n	80096b2 <SDMMC_GetCmdResp2+0x1e>
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d1ea      	bne.n	80096b2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e0:	f003 0304 	and.w	r3, r3, #4
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d004      	beq.n	80096f2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2204      	movs	r2, #4
 80096ec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80096ee:	2304      	movs	r3, #4
 80096f0:	e00e      	b.n	8009710 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096f6:	f003 0301 	and.w	r3, r3, #1
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d004      	beq.n	8009708 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2201      	movs	r2, #1
 8009702:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009704:	2301      	movs	r3, #1
 8009706:	e003      	b.n	8009710 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4a06      	ldr	r2, [pc, #24]	; (8009724 <SDMMC_GetCmdResp2+0x90>)
 800970c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	3714      	adds	r7, #20
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr
 800971c:	20000000 	.word	0x20000000
 8009720:	10624dd3 	.word	0x10624dd3
 8009724:	002000c5 	.word	0x002000c5

08009728 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009730:	4b1a      	ldr	r3, [pc, #104]	; (800979c <SDMMC_GetCmdResp3+0x74>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a1a      	ldr	r2, [pc, #104]	; (80097a0 <SDMMC_GetCmdResp3+0x78>)
 8009736:	fba2 2303 	umull	r2, r3, r2, r3
 800973a:	0a5b      	lsrs	r3, r3, #9
 800973c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009740:	fb02 f303 	mul.w	r3, r2, r3
 8009744:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	1e5a      	subs	r2, r3, #1
 800974a:	60fa      	str	r2, [r7, #12]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d102      	bne.n	8009756 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009750:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009754:	e01b      	b.n	800978e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800975a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009762:	2b00      	cmp	r3, #0
 8009764:	d0ef      	beq.n	8009746 <SDMMC_GetCmdResp3+0x1e>
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1ea      	bne.n	8009746 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009774:	f003 0304 	and.w	r3, r3, #4
 8009778:	2b00      	cmp	r3, #0
 800977a:	d004      	beq.n	8009786 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2204      	movs	r2, #4
 8009780:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009782:	2304      	movs	r3, #4
 8009784:	e003      	b.n	800978e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4a06      	ldr	r2, [pc, #24]	; (80097a4 <SDMMC_GetCmdResp3+0x7c>)
 800978a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3714      	adds	r7, #20
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	20000000 	.word	0x20000000
 80097a0:	10624dd3 	.word	0x10624dd3
 80097a4:	002000c5 	.word	0x002000c5

080097a8 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b088      	sub	sp, #32
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	460b      	mov	r3, r1
 80097b2:	607a      	str	r2, [r7, #4]
 80097b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80097b6:	4b35      	ldr	r3, [pc, #212]	; (800988c <SDMMC_GetCmdResp6+0xe4>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a35      	ldr	r2, [pc, #212]	; (8009890 <SDMMC_GetCmdResp6+0xe8>)
 80097bc:	fba2 2303 	umull	r2, r3, r2, r3
 80097c0:	0a5b      	lsrs	r3, r3, #9
 80097c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80097c6:	fb02 f303 	mul.w	r3, r2, r3
 80097ca:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	1e5a      	subs	r2, r3, #1
 80097d0:	61fa      	str	r2, [r7, #28]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d102      	bne.n	80097dc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80097d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80097da:	e052      	b.n	8009882 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097e0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80097e2:	69bb      	ldr	r3, [r7, #24]
 80097e4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d0ef      	beq.n	80097cc <SDMMC_GetCmdResp6+0x24>
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d1ea      	bne.n	80097cc <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097fa:	f003 0304 	and.w	r3, r3, #4
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d004      	beq.n	800980c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2204      	movs	r2, #4
 8009806:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009808:	2304      	movs	r3, #4
 800980a:	e03a      	b.n	8009882 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009810:	f003 0301 	and.w	r3, r3, #1
 8009814:	2b00      	cmp	r3, #0
 8009816:	d004      	beq.n	8009822 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2201      	movs	r2, #1
 800981c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800981e:	2301      	movs	r3, #1
 8009820:	e02f      	b.n	8009882 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009822:	68f8      	ldr	r0, [r7, #12]
 8009824:	f7ff fb60 	bl	8008ee8 <SDMMC_GetCommandResponse>
 8009828:	4603      	mov	r3, r0
 800982a:	461a      	mov	r2, r3
 800982c:	7afb      	ldrb	r3, [r7, #11]
 800982e:	4293      	cmp	r3, r2
 8009830:	d001      	beq.n	8009836 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009832:	2301      	movs	r3, #1
 8009834:	e025      	b.n	8009882 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	4a16      	ldr	r2, [pc, #88]	; (8009894 <SDMMC_GetCmdResp6+0xec>)
 800983a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800983c:	2100      	movs	r1, #0
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f7ff fb5f 	bl	8008f02 <SDMMC_GetResponse>
 8009844:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800984c:	2b00      	cmp	r3, #0
 800984e:	d106      	bne.n	800985e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	0c1b      	lsrs	r3, r3, #16
 8009854:	b29a      	uxth	r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800985a:	2300      	movs	r3, #0
 800985c:	e011      	b.n	8009882 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009864:	2b00      	cmp	r3, #0
 8009866:	d002      	beq.n	800986e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009868:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800986c:	e009      	b.n	8009882 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009874:	2b00      	cmp	r3, #0
 8009876:	d002      	beq.n	800987e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800987c:	e001      	b.n	8009882 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800987e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009882:	4618      	mov	r0, r3
 8009884:	3720      	adds	r7, #32
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	20000000 	.word	0x20000000
 8009890:	10624dd3 	.word	0x10624dd3
 8009894:	002000c5 	.word	0x002000c5

08009898 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80098a0:	4b22      	ldr	r3, [pc, #136]	; (800992c <SDMMC_GetCmdResp7+0x94>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a22      	ldr	r2, [pc, #136]	; (8009930 <SDMMC_GetCmdResp7+0x98>)
 80098a6:	fba2 2303 	umull	r2, r3, r2, r3
 80098aa:	0a5b      	lsrs	r3, r3, #9
 80098ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80098b0:	fb02 f303 	mul.w	r3, r2, r3
 80098b4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	1e5a      	subs	r2, r3, #1
 80098ba:	60fa      	str	r2, [r7, #12]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d102      	bne.n	80098c6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80098c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80098c4:	e02c      	b.n	8009920 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d0ef      	beq.n	80098b6 <SDMMC_GetCmdResp7+0x1e>
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1ea      	bne.n	80098b6 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098e4:	f003 0304 	and.w	r3, r3, #4
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d004      	beq.n	80098f6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2204      	movs	r2, #4
 80098f0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80098f2:	2304      	movs	r3, #4
 80098f4:	e014      	b.n	8009920 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098fa:	f003 0301 	and.w	r3, r3, #1
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d004      	beq.n	800990c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2201      	movs	r2, #1
 8009906:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009908:	2301      	movs	r3, #1
 800990a:	e009      	b.n	8009920 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009914:	2b00      	cmp	r3, #0
 8009916:	d002      	beq.n	800991e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2240      	movs	r2, #64	; 0x40
 800991c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800991e:	2300      	movs	r3, #0

}
 8009920:	4618      	mov	r0, r3
 8009922:	3714      	adds	r7, #20
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr
 800992c:	20000000 	.word	0x20000000
 8009930:	10624dd3 	.word	0x10624dd3

08009934 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009934:	b480      	push	{r7}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800993c:	4b11      	ldr	r3, [pc, #68]	; (8009984 <SDMMC_GetCmdError+0x50>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a11      	ldr	r2, [pc, #68]	; (8009988 <SDMMC_GetCmdError+0x54>)
 8009942:	fba2 2303 	umull	r2, r3, r2, r3
 8009946:	0a5b      	lsrs	r3, r3, #9
 8009948:	f241 3288 	movw	r2, #5000	; 0x1388
 800994c:	fb02 f303 	mul.w	r3, r2, r3
 8009950:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	1e5a      	subs	r2, r3, #1
 8009956:	60fa      	str	r2, [r7, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d102      	bne.n	8009962 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800995c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009960:	e009      	b.n	8009976 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800996a:	2b00      	cmp	r3, #0
 800996c:	d0f1      	beq.n	8009952 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4a06      	ldr	r2, [pc, #24]	; (800998c <SDMMC_GetCmdError+0x58>)
 8009972:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3714      	adds	r7, #20
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	20000000 	.word	0x20000000
 8009988:	10624dd3 	.word	0x10624dd3
 800998c:	002000c5 	.word	0x002000c5

08009990 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009990:	b084      	sub	sp, #16
 8009992:	b580      	push	{r7, lr}
 8009994:	b084      	sub	sp, #16
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
 800999a:	f107 001c 	add.w	r0, r7, #28
 800999e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f001 faf6 	bl	800afa0 <USB_CoreReset>
 80099b4:	4603      	mov	r3, r0
 80099b6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80099b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d106      	bne.n	80099cc <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	639a      	str	r2, [r3, #56]	; 0x38
 80099ca:	e005      	b.n	80099d8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80099d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3710      	adds	r7, #16
 80099de:	46bd      	mov	sp, r7
 80099e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80099e4:	b004      	add	sp, #16
 80099e6:	4770      	bx	lr

080099e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b087      	sub	sp, #28
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	4613      	mov	r3, r2
 80099f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80099f6:	79fb      	ldrb	r3, [r7, #7]
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d165      	bne.n	8009ac8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	4a3e      	ldr	r2, [pc, #248]	; (8009af8 <USB_SetTurnaroundTime+0x110>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d906      	bls.n	8009a12 <USB_SetTurnaroundTime+0x2a>
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	4a3d      	ldr	r2, [pc, #244]	; (8009afc <USB_SetTurnaroundTime+0x114>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d202      	bcs.n	8009a12 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009a0c:	230f      	movs	r3, #15
 8009a0e:	617b      	str	r3, [r7, #20]
 8009a10:	e05c      	b.n	8009acc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	4a39      	ldr	r2, [pc, #228]	; (8009afc <USB_SetTurnaroundTime+0x114>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d306      	bcc.n	8009a28 <USB_SetTurnaroundTime+0x40>
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	4a38      	ldr	r2, [pc, #224]	; (8009b00 <USB_SetTurnaroundTime+0x118>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d202      	bcs.n	8009a28 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009a22:	230e      	movs	r3, #14
 8009a24:	617b      	str	r3, [r7, #20]
 8009a26:	e051      	b.n	8009acc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	4a35      	ldr	r2, [pc, #212]	; (8009b00 <USB_SetTurnaroundTime+0x118>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d306      	bcc.n	8009a3e <USB_SetTurnaroundTime+0x56>
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	4a34      	ldr	r2, [pc, #208]	; (8009b04 <USB_SetTurnaroundTime+0x11c>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d202      	bcs.n	8009a3e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009a38:	230d      	movs	r3, #13
 8009a3a:	617b      	str	r3, [r7, #20]
 8009a3c:	e046      	b.n	8009acc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	4a30      	ldr	r2, [pc, #192]	; (8009b04 <USB_SetTurnaroundTime+0x11c>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d306      	bcc.n	8009a54 <USB_SetTurnaroundTime+0x6c>
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	4a2f      	ldr	r2, [pc, #188]	; (8009b08 <USB_SetTurnaroundTime+0x120>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d802      	bhi.n	8009a54 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009a4e:	230c      	movs	r3, #12
 8009a50:	617b      	str	r3, [r7, #20]
 8009a52:	e03b      	b.n	8009acc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	4a2c      	ldr	r2, [pc, #176]	; (8009b08 <USB_SetTurnaroundTime+0x120>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d906      	bls.n	8009a6a <USB_SetTurnaroundTime+0x82>
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	4a2b      	ldr	r2, [pc, #172]	; (8009b0c <USB_SetTurnaroundTime+0x124>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d802      	bhi.n	8009a6a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009a64:	230b      	movs	r3, #11
 8009a66:	617b      	str	r3, [r7, #20]
 8009a68:	e030      	b.n	8009acc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	4a27      	ldr	r2, [pc, #156]	; (8009b0c <USB_SetTurnaroundTime+0x124>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d906      	bls.n	8009a80 <USB_SetTurnaroundTime+0x98>
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	4a26      	ldr	r2, [pc, #152]	; (8009b10 <USB_SetTurnaroundTime+0x128>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d802      	bhi.n	8009a80 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009a7a:	230a      	movs	r3, #10
 8009a7c:	617b      	str	r3, [r7, #20]
 8009a7e:	e025      	b.n	8009acc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	4a23      	ldr	r2, [pc, #140]	; (8009b10 <USB_SetTurnaroundTime+0x128>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d906      	bls.n	8009a96 <USB_SetTurnaroundTime+0xae>
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	4a22      	ldr	r2, [pc, #136]	; (8009b14 <USB_SetTurnaroundTime+0x12c>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d202      	bcs.n	8009a96 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009a90:	2309      	movs	r3, #9
 8009a92:	617b      	str	r3, [r7, #20]
 8009a94:	e01a      	b.n	8009acc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	4a1e      	ldr	r2, [pc, #120]	; (8009b14 <USB_SetTurnaroundTime+0x12c>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d306      	bcc.n	8009aac <USB_SetTurnaroundTime+0xc4>
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	4a1d      	ldr	r2, [pc, #116]	; (8009b18 <USB_SetTurnaroundTime+0x130>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d802      	bhi.n	8009aac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009aa6:	2308      	movs	r3, #8
 8009aa8:	617b      	str	r3, [r7, #20]
 8009aaa:	e00f      	b.n	8009acc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	4a1a      	ldr	r2, [pc, #104]	; (8009b18 <USB_SetTurnaroundTime+0x130>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d906      	bls.n	8009ac2 <USB_SetTurnaroundTime+0xda>
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	4a19      	ldr	r2, [pc, #100]	; (8009b1c <USB_SetTurnaroundTime+0x134>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d202      	bcs.n	8009ac2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009abc:	2307      	movs	r3, #7
 8009abe:	617b      	str	r3, [r7, #20]
 8009ac0:	e004      	b.n	8009acc <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009ac2:	2306      	movs	r3, #6
 8009ac4:	617b      	str	r3, [r7, #20]
 8009ac6:	e001      	b.n	8009acc <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009ac8:	2309      	movs	r3, #9
 8009aca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	68da      	ldr	r2, [r3, #12]
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	029b      	lsls	r3, r3, #10
 8009ae0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009ae4:	431a      	orrs	r2, r3
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009aea:	2300      	movs	r3, #0
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	371c      	adds	r7, #28
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr
 8009af8:	00d8acbf 	.word	0x00d8acbf
 8009afc:	00e4e1c0 	.word	0x00e4e1c0
 8009b00:	00f42400 	.word	0x00f42400
 8009b04:	01067380 	.word	0x01067380
 8009b08:	011a499f 	.word	0x011a499f
 8009b0c:	01312cff 	.word	0x01312cff
 8009b10:	014ca43f 	.word	0x014ca43f
 8009b14:	016e3600 	.word	0x016e3600
 8009b18:	01a6ab1f 	.word	0x01a6ab1f
 8009b1c:	01e84800 	.word	0x01e84800

08009b20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b083      	sub	sp, #12
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	f043 0201 	orr.w	r2, r3, #1
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009b34:	2300      	movs	r3, #0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	370c      	adds	r7, #12
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr

08009b42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b42:	b480      	push	{r7}
 8009b44:	b083      	sub	sp, #12
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	689b      	ldr	r3, [r3, #8]
 8009b4e:	f023 0201 	bic.w	r2, r3, #1
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009b56:	2300      	movs	r3, #0
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009b70:	2300      	movs	r3, #0
 8009b72:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009b80:	78fb      	ldrb	r3, [r7, #3]
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d115      	bne.n	8009bb2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009b92:	2001      	movs	r0, #1
 8009b94:	f7f7 fc84 	bl	80014a0 <HAL_Delay>
      ms++;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f001 f985 	bl	800aeae <USB_GetMode>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d01e      	beq.n	8009be8 <USB_SetCurrentMode+0x84>
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2b31      	cmp	r3, #49	; 0x31
 8009bae:	d9f0      	bls.n	8009b92 <USB_SetCurrentMode+0x2e>
 8009bb0:	e01a      	b.n	8009be8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009bb2:	78fb      	ldrb	r3, [r7, #3]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d115      	bne.n	8009be4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009bc4:	2001      	movs	r0, #1
 8009bc6:	f7f7 fc6b 	bl	80014a0 <HAL_Delay>
      ms++;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f001 f96c 	bl	800aeae <USB_GetMode>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d005      	beq.n	8009be8 <USB_SetCurrentMode+0x84>
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2b31      	cmp	r3, #49	; 0x31
 8009be0:	d9f0      	bls.n	8009bc4 <USB_SetCurrentMode+0x60>
 8009be2:	e001      	b.n	8009be8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009be4:	2301      	movs	r3, #1
 8009be6:	e005      	b.n	8009bf4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2b32      	cmp	r3, #50	; 0x32
 8009bec:	d101      	bne.n	8009bf2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	e000      	b.n	8009bf4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009bf2:	2300      	movs	r3, #0
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009bfc:	b084      	sub	sp, #16
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b086      	sub	sp, #24
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009c0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009c16:	2300      	movs	r3, #0
 8009c18:	613b      	str	r3, [r7, #16]
 8009c1a:	e009      	b.n	8009c30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	3340      	adds	r3, #64	; 0x40
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	4413      	add	r3, r2
 8009c26:	2200      	movs	r2, #0
 8009c28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	613b      	str	r3, [r7, #16]
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	2b0e      	cmp	r3, #14
 8009c34:	d9f2      	bls.n	8009c1c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d11c      	bne.n	8009c76 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	68fa      	ldr	r2, [r7, #12]
 8009c46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c4a:	f043 0302 	orr.w	r3, r3, #2
 8009c4e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c54:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	601a      	str	r2, [r3, #0]
 8009c74:	e005      	b.n	8009c82 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c88:	461a      	mov	r2, r3
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c94:	4619      	mov	r1, r3
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	680b      	ldr	r3, [r1, #0]
 8009ca0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009ca2:	2103      	movs	r1, #3
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 f959 	bl	8009f5c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009caa:	2110      	movs	r1, #16
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 f8f1 	bl	8009e94 <USB_FlushTxFifo>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d001      	beq.n	8009cbc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 f91d 	bl	8009efc <USB_FlushRxFifo>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d001      	beq.n	8009ccc <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cde:	461a      	mov	r2, r3
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cea:	461a      	mov	r2, r3
 8009cec:	2300      	movs	r3, #0
 8009cee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	613b      	str	r3, [r7, #16]
 8009cf4:	e043      	b.n	8009d7e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	015a      	lsls	r2, r3, #5
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d0c:	d118      	bne.n	8009d40 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d10a      	bne.n	8009d2a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	015a      	lsls	r2, r3, #5
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d20:	461a      	mov	r2, r3
 8009d22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009d26:	6013      	str	r3, [r2, #0]
 8009d28:	e013      	b.n	8009d52 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	015a      	lsls	r2, r3, #5
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	4413      	add	r3, r2
 8009d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d36:	461a      	mov	r2, r3
 8009d38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009d3c:	6013      	str	r3, [r2, #0]
 8009d3e:	e008      	b.n	8009d52 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	015a      	lsls	r2, r3, #5
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	4413      	add	r3, r2
 8009d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	2300      	movs	r3, #0
 8009d50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	015a      	lsls	r2, r3, #5
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	4413      	add	r3, r2
 8009d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d5e:	461a      	mov	r2, r3
 8009d60:	2300      	movs	r3, #0
 8009d62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	015a      	lsls	r2, r3, #5
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d70:	461a      	mov	r2, r3
 8009d72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009d76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	613b      	str	r3, [r7, #16]
 8009d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d80:	693a      	ldr	r2, [r7, #16]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d3b7      	bcc.n	8009cf6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d86:	2300      	movs	r3, #0
 8009d88:	613b      	str	r3, [r7, #16]
 8009d8a:	e043      	b.n	8009e14 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	015a      	lsls	r2, r3, #5
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	4413      	add	r3, r2
 8009d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009da2:	d118      	bne.n	8009dd6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10a      	bne.n	8009dc0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	015a      	lsls	r2, r3, #5
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	4413      	add	r3, r2
 8009db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009db6:	461a      	mov	r2, r3
 8009db8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009dbc:	6013      	str	r3, [r2, #0]
 8009dbe:	e013      	b.n	8009de8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	015a      	lsls	r2, r3, #5
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dcc:	461a      	mov	r2, r3
 8009dce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009dd2:	6013      	str	r3, [r2, #0]
 8009dd4:	e008      	b.n	8009de8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	015a      	lsls	r2, r3, #5
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	4413      	add	r3, r2
 8009dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009de2:	461a      	mov	r2, r3
 8009de4:	2300      	movs	r3, #0
 8009de6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	015a      	lsls	r2, r3, #5
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	4413      	add	r3, r2
 8009df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009df4:	461a      	mov	r2, r3
 8009df6:	2300      	movs	r3, #0
 8009df8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	015a      	lsls	r2, r3, #5
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	4413      	add	r3, r2
 8009e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e06:	461a      	mov	r2, r3
 8009e08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009e0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	3301      	adds	r3, #1
 8009e12:	613b      	str	r3, [r7, #16]
 8009e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e16:	693a      	ldr	r2, [r7, #16]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d3b7      	bcc.n	8009d8c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e2e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009e3c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	699b      	ldr	r3, [r3, #24]
 8009e42:	f043 0210 	orr.w	r2, r3, #16
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	699a      	ldr	r2, [r3, #24]
 8009e4e:	4b10      	ldr	r3, [pc, #64]	; (8009e90 <USB_DevInit+0x294>)
 8009e50:	4313      	orrs	r3, r2
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d005      	beq.n	8009e68 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	699b      	ldr	r3, [r3, #24]
 8009e60:	f043 0208 	orr.w	r2, r3, #8
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d107      	bne.n	8009e7e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	699b      	ldr	r3, [r3, #24]
 8009e72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e76:	f043 0304 	orr.w	r3, r3, #4
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3718      	adds	r7, #24
 8009e84:	46bd      	mov	sp, r7
 8009e86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e8a:	b004      	add	sp, #16
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	803c3800 	.word	0x803c3800

08009e94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b085      	sub	sp, #20
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	4a13      	ldr	r2, [pc, #76]	; (8009ef8 <USB_FlushTxFifo+0x64>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d901      	bls.n	8009eb4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	e01b      	b.n	8009eec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	691b      	ldr	r3, [r3, #16]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	daf2      	bge.n	8009ea2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	019b      	lsls	r3, r3, #6
 8009ec4:	f043 0220 	orr.w	r2, r3, #32
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	4a08      	ldr	r2, [pc, #32]	; (8009ef8 <USB_FlushTxFifo+0x64>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d901      	bls.n	8009ede <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009eda:	2303      	movs	r3, #3
 8009edc:	e006      	b.n	8009eec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	691b      	ldr	r3, [r3, #16]
 8009ee2:	f003 0320 	and.w	r3, r3, #32
 8009ee6:	2b20      	cmp	r3, #32
 8009ee8:	d0f0      	beq.n	8009ecc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009eea:	2300      	movs	r3, #0
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3714      	adds	r7, #20
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr
 8009ef8:	00030d40 	.word	0x00030d40

08009efc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f04:	2300      	movs	r3, #0
 8009f06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	4a11      	ldr	r2, [pc, #68]	; (8009f58 <USB_FlushRxFifo+0x5c>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d901      	bls.n	8009f1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009f16:	2303      	movs	r3, #3
 8009f18:	e018      	b.n	8009f4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	691b      	ldr	r3, [r3, #16]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	daf2      	bge.n	8009f08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009f22:	2300      	movs	r3, #0
 8009f24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2210      	movs	r2, #16
 8009f2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	4a08      	ldr	r2, [pc, #32]	; (8009f58 <USB_FlushRxFifo+0x5c>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d901      	bls.n	8009f3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	e006      	b.n	8009f4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	691b      	ldr	r3, [r3, #16]
 8009f42:	f003 0310 	and.w	r3, r3, #16
 8009f46:	2b10      	cmp	r3, #16
 8009f48:	d0f0      	beq.n	8009f2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009f4a:	2300      	movs	r3, #0
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3714      	adds	r7, #20
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr
 8009f58:	00030d40 	.word	0x00030d40

08009f5c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b085      	sub	sp, #20
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	460b      	mov	r3, r1
 8009f66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	78fb      	ldrb	r3, [r7, #3]
 8009f76:	68f9      	ldr	r1, [r7, #12]
 8009f78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr

08009f8e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009f8e:	b480      	push	{r7}
 8009f90:	b087      	sub	sp, #28
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	f003 0306 	and.w	r3, r3, #6
 8009fa6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	d002      	beq.n	8009fb4 <USB_GetDevSpeed+0x26>
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2b06      	cmp	r3, #6
 8009fb2:	d102      	bne.n	8009fba <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009fb4:	2302      	movs	r3, #2
 8009fb6:	75fb      	strb	r3, [r7, #23]
 8009fb8:	e001      	b.n	8009fbe <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8009fba:	230f      	movs	r3, #15
 8009fbc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	371c      	adds	r7, #28
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b085      	sub	sp, #20
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	785b      	ldrb	r3, [r3, #1]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d13a      	bne.n	800a05e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fee:	69da      	ldr	r2, [r3, #28]
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	f003 030f 	and.w	r3, r3, #15
 8009ff8:	2101      	movs	r1, #1
 8009ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	68f9      	ldr	r1, [r7, #12]
 800a002:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a006:	4313      	orrs	r3, r2
 800a008:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	015a      	lsls	r2, r3, #5
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	4413      	add	r3, r2
 800a012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d155      	bne.n	800a0cc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	015a      	lsls	r2, r3, #5
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	4413      	add	r3, r2
 800a028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	791b      	ldrb	r3, [r3, #4]
 800a03a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a03c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	059b      	lsls	r3, r3, #22
 800a042:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a044:	4313      	orrs	r3, r2
 800a046:	68ba      	ldr	r2, [r7, #8]
 800a048:	0151      	lsls	r1, r2, #5
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	440a      	add	r2, r1
 800a04e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a05a:	6013      	str	r3, [r2, #0]
 800a05c:	e036      	b.n	800a0cc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a064:	69da      	ldr	r2, [r3, #28]
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	f003 030f 	and.w	r3, r3, #15
 800a06e:	2101      	movs	r1, #1
 800a070:	fa01 f303 	lsl.w	r3, r1, r3
 800a074:	041b      	lsls	r3, r3, #16
 800a076:	68f9      	ldr	r1, [r7, #12]
 800a078:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a07c:	4313      	orrs	r3, r2
 800a07e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	015a      	lsls	r2, r3, #5
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	4413      	add	r3, r2
 800a088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a092:	2b00      	cmp	r3, #0
 800a094:	d11a      	bne.n	800a0cc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	015a      	lsls	r2, r3, #5
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	4413      	add	r3, r2
 800a09e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	791b      	ldrb	r3, [r3, #4]
 800a0b0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a0b2:	430b      	orrs	r3, r1
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	68ba      	ldr	r2, [r7, #8]
 800a0b8:	0151      	lsls	r1, r2, #5
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	440a      	add	r2, r1
 800a0be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0ca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3714      	adds	r7, #20
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
	...

0800a0dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b085      	sub	sp, #20
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	785b      	ldrb	r3, [r3, #1]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d161      	bne.n	800a1bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	015a      	lsls	r2, r3, #5
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	4413      	add	r3, r2
 800a100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a10a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a10e:	d11f      	bne.n	800a150 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	015a      	lsls	r2, r3, #5
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	4413      	add	r3, r2
 800a118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	68ba      	ldr	r2, [r7, #8]
 800a120:	0151      	lsls	r1, r2, #5
 800a122:	68fa      	ldr	r2, [r7, #12]
 800a124:	440a      	add	r2, r1
 800a126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a12a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a12e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	015a      	lsls	r2, r3, #5
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	4413      	add	r3, r2
 800a138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	0151      	lsls	r1, r2, #5
 800a142:	68fa      	ldr	r2, [r7, #12]
 800a144:	440a      	add	r2, r1
 800a146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a14a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a14e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a156:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	f003 030f 	and.w	r3, r3, #15
 800a160:	2101      	movs	r1, #1
 800a162:	fa01 f303 	lsl.w	r3, r1, r3
 800a166:	b29b      	uxth	r3, r3
 800a168:	43db      	mvns	r3, r3
 800a16a:	68f9      	ldr	r1, [r7, #12]
 800a16c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a170:	4013      	ands	r3, r2
 800a172:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a17a:	69da      	ldr	r2, [r3, #28]
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	f003 030f 	and.w	r3, r3, #15
 800a184:	2101      	movs	r1, #1
 800a186:	fa01 f303 	lsl.w	r3, r1, r3
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	43db      	mvns	r3, r3
 800a18e:	68f9      	ldr	r1, [r7, #12]
 800a190:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a194:	4013      	ands	r3, r2
 800a196:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	015a      	lsls	r2, r3, #5
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	4413      	add	r3, r2
 800a1a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	0159      	lsls	r1, r3, #5
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	440b      	add	r3, r1
 800a1ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	4b35      	ldr	r3, [pc, #212]	; (800a28c <USB_DeactivateEndpoint+0x1b0>)
 800a1b6:	4013      	ands	r3, r2
 800a1b8:	600b      	str	r3, [r1, #0]
 800a1ba:	e060      	b.n	800a27e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	015a      	lsls	r2, r3, #5
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	4413      	add	r3, r2
 800a1c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1d2:	d11f      	bne.n	800a214 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	015a      	lsls	r2, r3, #5
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	4413      	add	r3, r2
 800a1dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	68ba      	ldr	r2, [r7, #8]
 800a1e4:	0151      	lsls	r1, r2, #5
 800a1e6:	68fa      	ldr	r2, [r7, #12]
 800a1e8:	440a      	add	r2, r1
 800a1ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a1f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	015a      	lsls	r2, r3, #5
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	68ba      	ldr	r2, [r7, #8]
 800a204:	0151      	lsls	r1, r2, #5
 800a206:	68fa      	ldr	r2, [r7, #12]
 800a208:	440a      	add	r2, r1
 800a20a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a20e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a212:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a21a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	f003 030f 	and.w	r3, r3, #15
 800a224:	2101      	movs	r1, #1
 800a226:	fa01 f303 	lsl.w	r3, r1, r3
 800a22a:	041b      	lsls	r3, r3, #16
 800a22c:	43db      	mvns	r3, r3
 800a22e:	68f9      	ldr	r1, [r7, #12]
 800a230:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a234:	4013      	ands	r3, r2
 800a236:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a23e:	69da      	ldr	r2, [r3, #28]
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	f003 030f 	and.w	r3, r3, #15
 800a248:	2101      	movs	r1, #1
 800a24a:	fa01 f303 	lsl.w	r3, r1, r3
 800a24e:	041b      	lsls	r3, r3, #16
 800a250:	43db      	mvns	r3, r3
 800a252:	68f9      	ldr	r1, [r7, #12]
 800a254:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a258:	4013      	ands	r3, r2
 800a25a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	015a      	lsls	r2, r3, #5
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	4413      	add	r3, r2
 800a264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	0159      	lsls	r1, r3, #5
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	440b      	add	r3, r1
 800a272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a276:	4619      	mov	r1, r3
 800a278:	4b05      	ldr	r3, [pc, #20]	; (800a290 <USB_DeactivateEndpoint+0x1b4>)
 800a27a:	4013      	ands	r3, r2
 800a27c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	3714      	adds	r7, #20
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr
 800a28c:	ec337800 	.word	0xec337800
 800a290:	eff37800 	.word	0xeff37800

0800a294 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	785b      	ldrb	r3, [r3, #1]
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	f040 810a 	bne.w	800a4c6 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	699b      	ldr	r3, [r3, #24]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d132      	bne.n	800a320 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	015a      	lsls	r2, r3, #5
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2c6:	691b      	ldr	r3, [r3, #16]
 800a2c8:	693a      	ldr	r2, [r7, #16]
 800a2ca:	0151      	lsls	r1, r2, #5
 800a2cc:	697a      	ldr	r2, [r7, #20]
 800a2ce:	440a      	add	r2, r1
 800a2d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a2d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a2dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	015a      	lsls	r2, r3, #5
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	693a      	ldr	r2, [r7, #16]
 800a2ee:	0151      	lsls	r1, r2, #5
 800a2f0:	697a      	ldr	r2, [r7, #20]
 800a2f2:	440a      	add	r2, r1
 800a2f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a2fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	015a      	lsls	r2, r3, #5
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	4413      	add	r3, r2
 800a306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a30a:	691b      	ldr	r3, [r3, #16]
 800a30c:	693a      	ldr	r2, [r7, #16]
 800a30e:	0151      	lsls	r1, r2, #5
 800a310:	697a      	ldr	r2, [r7, #20]
 800a312:	440a      	add	r2, r1
 800a314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a318:	0cdb      	lsrs	r3, r3, #19
 800a31a:	04db      	lsls	r3, r3, #19
 800a31c:	6113      	str	r3, [r2, #16]
 800a31e:	e074      	b.n	800a40a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	015a      	lsls	r2, r3, #5
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	4413      	add	r3, r2
 800a328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a32c:	691b      	ldr	r3, [r3, #16]
 800a32e:	693a      	ldr	r2, [r7, #16]
 800a330:	0151      	lsls	r1, r2, #5
 800a332:	697a      	ldr	r2, [r7, #20]
 800a334:	440a      	add	r2, r1
 800a336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a33a:	0cdb      	lsrs	r3, r3, #19
 800a33c:	04db      	lsls	r3, r3, #19
 800a33e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	015a      	lsls	r2, r3, #5
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	4413      	add	r3, r2
 800a348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a34c:	691b      	ldr	r3, [r3, #16]
 800a34e:	693a      	ldr	r2, [r7, #16]
 800a350:	0151      	lsls	r1, r2, #5
 800a352:	697a      	ldr	r2, [r7, #20]
 800a354:	440a      	add	r2, r1
 800a356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a35a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a35e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a362:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	015a      	lsls	r2, r3, #5
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	4413      	add	r3, r2
 800a36c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a370:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	6999      	ldr	r1, [r3, #24]
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	440b      	add	r3, r1
 800a37c:	1e59      	subs	r1, r3, #1
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	fbb1 f3f3 	udiv	r3, r1, r3
 800a386:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a388:	4b9e      	ldr	r3, [pc, #632]	; (800a604 <USB_EPStartXfer+0x370>)
 800a38a:	400b      	ands	r3, r1
 800a38c:	6939      	ldr	r1, [r7, #16]
 800a38e:	0148      	lsls	r0, r1, #5
 800a390:	6979      	ldr	r1, [r7, #20]
 800a392:	4401      	add	r1, r0
 800a394:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a398:	4313      	orrs	r3, r2
 800a39a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	015a      	lsls	r2, r3, #5
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3a8:	691a      	ldr	r2, [r3, #16]
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	699b      	ldr	r3, [r3, #24]
 800a3ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3b2:	6939      	ldr	r1, [r7, #16]
 800a3b4:	0148      	lsls	r0, r1, #5
 800a3b6:	6979      	ldr	r1, [r7, #20]
 800a3b8:	4401      	add	r1, r0
 800a3ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	791b      	ldrb	r3, [r3, #4]
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	d11f      	bne.n	800a40a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	015a      	lsls	r2, r3, #5
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	693a      	ldr	r2, [r7, #16]
 800a3da:	0151      	lsls	r1, r2, #5
 800a3dc:	697a      	ldr	r2, [r7, #20]
 800a3de:	440a      	add	r2, r1
 800a3e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a3e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	015a      	lsls	r2, r3, #5
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3f6:	691b      	ldr	r3, [r3, #16]
 800a3f8:	693a      	ldr	r2, [r7, #16]
 800a3fa:	0151      	lsls	r1, r2, #5
 800a3fc:	697a      	ldr	r2, [r7, #20]
 800a3fe:	440a      	add	r2, r1
 800a400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a404:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a408:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	015a      	lsls	r2, r3, #5
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	4413      	add	r3, r2
 800a412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	693a      	ldr	r2, [r7, #16]
 800a41a:	0151      	lsls	r1, r2, #5
 800a41c:	697a      	ldr	r2, [r7, #20]
 800a41e:	440a      	add	r2, r1
 800a420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a424:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a428:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	791b      	ldrb	r3, [r3, #4]
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d015      	beq.n	800a45e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	699b      	ldr	r3, [r3, #24]
 800a436:	2b00      	cmp	r3, #0
 800a438:	f000 8106 	beq.w	800a648 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	f003 030f 	and.w	r3, r3, #15
 800a44c:	2101      	movs	r1, #1
 800a44e:	fa01 f303 	lsl.w	r3, r1, r3
 800a452:	6979      	ldr	r1, [r7, #20]
 800a454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a458:	4313      	orrs	r3, r2
 800a45a:	634b      	str	r3, [r1, #52]	; 0x34
 800a45c:	e0f4      	b.n	800a648 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d110      	bne.n	800a490 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	015a      	lsls	r2, r3, #5
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	4413      	add	r3, r2
 800a476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	693a      	ldr	r2, [r7, #16]
 800a47e:	0151      	lsls	r1, r2, #5
 800a480:	697a      	ldr	r2, [r7, #20]
 800a482:	440a      	add	r2, r1
 800a484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a488:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a48c:	6013      	str	r3, [r2, #0]
 800a48e:	e00f      	b.n	800a4b0 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	015a      	lsls	r2, r3, #5
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	4413      	add	r3, r2
 800a498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	693a      	ldr	r2, [r7, #16]
 800a4a0:	0151      	lsls	r1, r2, #5
 800a4a2:	697a      	ldr	r2, [r7, #20]
 800a4a4:	440a      	add	r2, r1
 800a4a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4ae:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	6919      	ldr	r1, [r3, #16]
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	781a      	ldrb	r2, [r3, #0]
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	699b      	ldr	r3, [r3, #24]
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 fa94 	bl	800a9ec <USB_WritePacket>
 800a4c4:	e0c0      	b.n	800a648 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	015a      	lsls	r2, r3, #5
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	693a      	ldr	r2, [r7, #16]
 800a4d6:	0151      	lsls	r1, r2, #5
 800a4d8:	697a      	ldr	r2, [r7, #20]
 800a4da:	440a      	add	r2, r1
 800a4dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4e0:	0cdb      	lsrs	r3, r3, #19
 800a4e2:	04db      	lsls	r3, r3, #19
 800a4e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	015a      	lsls	r2, r3, #5
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4f2:	691b      	ldr	r3, [r3, #16]
 800a4f4:	693a      	ldr	r2, [r7, #16]
 800a4f6:	0151      	lsls	r1, r2, #5
 800a4f8:	697a      	ldr	r2, [r7, #20]
 800a4fa:	440a      	add	r2, r1
 800a4fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a500:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a504:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a508:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	699b      	ldr	r3, [r3, #24]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d123      	bne.n	800a55a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	015a      	lsls	r2, r3, #5
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	4413      	add	r3, r2
 800a51a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a51e:	691a      	ldr	r2, [r3, #16]
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a528:	6939      	ldr	r1, [r7, #16]
 800a52a:	0148      	lsls	r0, r1, #5
 800a52c:	6979      	ldr	r1, [r7, #20]
 800a52e:	4401      	add	r1, r0
 800a530:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a534:	4313      	orrs	r3, r2
 800a536:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	015a      	lsls	r2, r3, #5
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	4413      	add	r3, r2
 800a540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a544:	691b      	ldr	r3, [r3, #16]
 800a546:	693a      	ldr	r2, [r7, #16]
 800a548:	0151      	lsls	r1, r2, #5
 800a54a:	697a      	ldr	r2, [r7, #20]
 800a54c:	440a      	add	r2, r1
 800a54e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a552:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a556:	6113      	str	r3, [r2, #16]
 800a558:	e037      	b.n	800a5ca <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	699a      	ldr	r2, [r3, #24]
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	4413      	add	r3, r2
 800a564:	1e5a      	subs	r2, r3, #1
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a56e:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	89fa      	ldrh	r2, [r7, #14]
 800a576:	fb03 f202 	mul.w	r2, r3, r2
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	015a      	lsls	r2, r3, #5
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	4413      	add	r3, r2
 800a586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a58a:	691a      	ldr	r2, [r3, #16]
 800a58c:	89fb      	ldrh	r3, [r7, #14]
 800a58e:	04d9      	lsls	r1, r3, #19
 800a590:	4b1c      	ldr	r3, [pc, #112]	; (800a604 <USB_EPStartXfer+0x370>)
 800a592:	400b      	ands	r3, r1
 800a594:	6939      	ldr	r1, [r7, #16]
 800a596:	0148      	lsls	r0, r1, #5
 800a598:	6979      	ldr	r1, [r7, #20]
 800a59a:	4401      	add	r1, r0
 800a59c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	015a      	lsls	r2, r3, #5
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5b0:	691a      	ldr	r2, [r3, #16]
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	69db      	ldr	r3, [r3, #28]
 800a5b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5ba:	6939      	ldr	r1, [r7, #16]
 800a5bc:	0148      	lsls	r0, r1, #5
 800a5be:	6979      	ldr	r1, [r7, #20]
 800a5c0:	4401      	add	r1, r0
 800a5c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	791b      	ldrb	r3, [r3, #4]
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d12a      	bne.n	800a628 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d112      	bne.n	800a608 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	015a      	lsls	r2, r3, #5
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	4413      	add	r3, r2
 800a5ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	693a      	ldr	r2, [r7, #16]
 800a5f2:	0151      	lsls	r1, r2, #5
 800a5f4:	697a      	ldr	r2, [r7, #20]
 800a5f6:	440a      	add	r2, r1
 800a5f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a600:	6013      	str	r3, [r2, #0]
 800a602:	e011      	b.n	800a628 <USB_EPStartXfer+0x394>
 800a604:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	015a      	lsls	r2, r3, #5
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	4413      	add	r3, r2
 800a610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	693a      	ldr	r2, [r7, #16]
 800a618:	0151      	lsls	r1, r2, #5
 800a61a:	697a      	ldr	r2, [r7, #20]
 800a61c:	440a      	add	r2, r1
 800a61e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a626:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	015a      	lsls	r2, r3, #5
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	4413      	add	r3, r2
 800a630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	693a      	ldr	r2, [r7, #16]
 800a638:	0151      	lsls	r1, r2, #5
 800a63a:	697a      	ldr	r2, [r7, #20]
 800a63c:	440a      	add	r2, r1
 800a63e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a642:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a646:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3718      	adds	r7, #24
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop

0800a654 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a654:	b480      	push	{r7}
 800a656:	b085      	sub	sp, #20
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	785b      	ldrb	r3, [r3, #1]
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	f040 80ab 	bne.w	800a7c8 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	699b      	ldr	r3, [r3, #24]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d132      	bne.n	800a6e0 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	015a      	lsls	r2, r3, #5
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	4413      	add	r3, r2
 800a682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a686:	691b      	ldr	r3, [r3, #16]
 800a688:	68ba      	ldr	r2, [r7, #8]
 800a68a:	0151      	lsls	r1, r2, #5
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	440a      	add	r2, r1
 800a690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a694:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a698:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a69c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	015a      	lsls	r2, r3, #5
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	4413      	add	r3, r2
 800a6a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6aa:	691b      	ldr	r3, [r3, #16]
 800a6ac:	68ba      	ldr	r2, [r7, #8]
 800a6ae:	0151      	lsls	r1, r2, #5
 800a6b0:	68fa      	ldr	r2, [r7, #12]
 800a6b2:	440a      	add	r2, r1
 800a6b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a6bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	015a      	lsls	r2, r3, #5
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6ca:	691b      	ldr	r3, [r3, #16]
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	0151      	lsls	r1, r2, #5
 800a6d0:	68fa      	ldr	r2, [r7, #12]
 800a6d2:	440a      	add	r2, r1
 800a6d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6d8:	0cdb      	lsrs	r3, r3, #19
 800a6da:	04db      	lsls	r3, r3, #19
 800a6dc:	6113      	str	r3, [r2, #16]
 800a6de:	e04e      	b.n	800a77e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	015a      	lsls	r2, r3, #5
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	0151      	lsls	r1, r2, #5
 800a6f2:	68fa      	ldr	r2, [r7, #12]
 800a6f4:	440a      	add	r2, r1
 800a6f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6fa:	0cdb      	lsrs	r3, r3, #19
 800a6fc:	04db      	lsls	r3, r3, #19
 800a6fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	015a      	lsls	r2, r3, #5
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	4413      	add	r3, r2
 800a708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a70c:	691b      	ldr	r3, [r3, #16]
 800a70e:	68ba      	ldr	r2, [r7, #8]
 800a710:	0151      	lsls	r1, r2, #5
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	440a      	add	r2, r1
 800a716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a71a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a71e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a722:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	699a      	ldr	r2, [r3, #24]
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d903      	bls.n	800a738 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	68da      	ldr	r2, [r3, #12]
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	015a      	lsls	r2, r3, #5
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	4413      	add	r3, r2
 800a740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a744:	691b      	ldr	r3, [r3, #16]
 800a746:	68ba      	ldr	r2, [r7, #8]
 800a748:	0151      	lsls	r1, r2, #5
 800a74a:	68fa      	ldr	r2, [r7, #12]
 800a74c:	440a      	add	r2, r1
 800a74e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a752:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a756:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	015a      	lsls	r2, r3, #5
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	4413      	add	r3, r2
 800a760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a764:	691a      	ldr	r2, [r3, #16]
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	699b      	ldr	r3, [r3, #24]
 800a76a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a76e:	68b9      	ldr	r1, [r7, #8]
 800a770:	0148      	lsls	r0, r1, #5
 800a772:	68f9      	ldr	r1, [r7, #12]
 800a774:	4401      	add	r1, r0
 800a776:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a77a:	4313      	orrs	r3, r2
 800a77c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	015a      	lsls	r2, r3, #5
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	4413      	add	r3, r2
 800a786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	68ba      	ldr	r2, [r7, #8]
 800a78e:	0151      	lsls	r1, r2, #5
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	440a      	add	r2, r1
 800a794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a798:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a79c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	699b      	ldr	r3, [r3, #24]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d071      	beq.n	800a88a <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	f003 030f 	and.w	r3, r3, #15
 800a7b6:	2101      	movs	r1, #1
 800a7b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a7bc:	68f9      	ldr	r1, [r7, #12]
 800a7be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	634b      	str	r3, [r1, #52]	; 0x34
 800a7c6:	e060      	b.n	800a88a <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	015a      	lsls	r2, r3, #5
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7d4:	691b      	ldr	r3, [r3, #16]
 800a7d6:	68ba      	ldr	r2, [r7, #8]
 800a7d8:	0151      	lsls	r1, r2, #5
 800a7da:	68fa      	ldr	r2, [r7, #12]
 800a7dc:	440a      	add	r2, r1
 800a7de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7e2:	0cdb      	lsrs	r3, r3, #19
 800a7e4:	04db      	lsls	r3, r3, #19
 800a7e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	015a      	lsls	r2, r3, #5
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7f4:	691b      	ldr	r3, [r3, #16]
 800a7f6:	68ba      	ldr	r2, [r7, #8]
 800a7f8:	0151      	lsls	r1, r2, #5
 800a7fa:	68fa      	ldr	r2, [r7, #12]
 800a7fc:	440a      	add	r2, r1
 800a7fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a802:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a806:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a80a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	699b      	ldr	r3, [r3, #24]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d003      	beq.n	800a81c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	68da      	ldr	r2, [r3, #12]
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	68da      	ldr	r2, [r3, #12]
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	015a      	lsls	r2, r3, #5
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	4413      	add	r3, r2
 800a82c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	68ba      	ldr	r2, [r7, #8]
 800a834:	0151      	lsls	r1, r2, #5
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	440a      	add	r2, r1
 800a83a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a83e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a842:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	015a      	lsls	r2, r3, #5
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	4413      	add	r3, r2
 800a84c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a850:	691a      	ldr	r2, [r3, #16]
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	69db      	ldr	r3, [r3, #28]
 800a856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a85a:	68b9      	ldr	r1, [r7, #8]
 800a85c:	0148      	lsls	r0, r1, #5
 800a85e:	68f9      	ldr	r1, [r7, #12]
 800a860:	4401      	add	r1, r0
 800a862:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a866:	4313      	orrs	r3, r2
 800a868:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	015a      	lsls	r2, r3, #5
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	4413      	add	r3, r2
 800a872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	68ba      	ldr	r2, [r7, #8]
 800a87a:	0151      	lsls	r1, r2, #5
 800a87c:	68fa      	ldr	r2, [r7, #12]
 800a87e:	440a      	add	r2, r1
 800a880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a884:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a888:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a88a:	2300      	movs	r3, #0
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3714      	adds	r7, #20
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a898:	b480      	push	{r7}
 800a89a:	b087      	sub	sp, #28
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	785b      	ldrb	r3, [r3, #1]
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d14a      	bne.n	800a94c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	015a      	lsls	r2, r3, #5
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	4413      	add	r3, r2
 800a8c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8ce:	f040 8086 	bne.w	800a9de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	015a      	lsls	r2, r3, #5
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	4413      	add	r3, r2
 800a8dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	683a      	ldr	r2, [r7, #0]
 800a8e4:	7812      	ldrb	r2, [r2, #0]
 800a8e6:	0151      	lsls	r1, r2, #5
 800a8e8:	693a      	ldr	r2, [r7, #16]
 800a8ea:	440a      	add	r2, r1
 800a8ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a8f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	015a      	lsls	r2, r3, #5
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	4413      	add	r3, r2
 800a900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	683a      	ldr	r2, [r7, #0]
 800a908:	7812      	ldrb	r2, [r2, #0]
 800a90a:	0151      	lsls	r1, r2, #5
 800a90c:	693a      	ldr	r2, [r7, #16]
 800a90e:	440a      	add	r2, r1
 800a910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a914:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a918:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	3301      	adds	r3, #1
 800a91e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f242 7210 	movw	r2, #10000	; 0x2710
 800a926:	4293      	cmp	r3, r2
 800a928:	d902      	bls.n	800a930 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	75fb      	strb	r3, [r7, #23]
          break;
 800a92e:	e056      	b.n	800a9de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	015a      	lsls	r2, r3, #5
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	4413      	add	r3, r2
 800a93a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a944:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a948:	d0e7      	beq.n	800a91a <USB_EPStopXfer+0x82>
 800a94a:	e048      	b.n	800a9de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	015a      	lsls	r2, r3, #5
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	4413      	add	r3, r2
 800a956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a960:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a964:	d13b      	bne.n	800a9de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	015a      	lsls	r2, r3, #5
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	4413      	add	r3, r2
 800a970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	683a      	ldr	r2, [r7, #0]
 800a978:	7812      	ldrb	r2, [r2, #0]
 800a97a:	0151      	lsls	r1, r2, #5
 800a97c:	693a      	ldr	r2, [r7, #16]
 800a97e:	440a      	add	r2, r1
 800a980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a984:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a988:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	015a      	lsls	r2, r3, #5
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	4413      	add	r3, r2
 800a994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	683a      	ldr	r2, [r7, #0]
 800a99c:	7812      	ldrb	r2, [r2, #0]
 800a99e:	0151      	lsls	r1, r2, #5
 800a9a0:	693a      	ldr	r2, [r7, #16]
 800a9a2:	440a      	add	r2, r1
 800a9a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a9ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f242 7210 	movw	r2, #10000	; 0x2710
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d902      	bls.n	800a9c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	75fb      	strb	r3, [r7, #23]
          break;
 800a9c2:	e00c      	b.n	800a9de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	015a      	lsls	r2, r3, #5
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	4413      	add	r3, r2
 800a9ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9dc:	d0e7      	beq.n	800a9ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a9de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	371c      	adds	r7, #28
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr

0800a9ec <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b089      	sub	sp, #36	; 0x24
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	4611      	mov	r1, r2
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	71fb      	strb	r3, [r7, #7]
 800a9fe:	4613      	mov	r3, r2
 800aa00:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800aa0a:	88bb      	ldrh	r3, [r7, #4]
 800aa0c:	3303      	adds	r3, #3
 800aa0e:	089b      	lsrs	r3, r3, #2
 800aa10:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800aa12:	2300      	movs	r3, #0
 800aa14:	61bb      	str	r3, [r7, #24]
 800aa16:	e018      	b.n	800aa4a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800aa18:	79fb      	ldrb	r3, [r7, #7]
 800aa1a:	031a      	lsls	r2, r3, #12
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	4413      	add	r3, r2
 800aa20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa24:	461a      	mov	r2, r3
 800aa26:	69fb      	ldr	r3, [r7, #28]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	3301      	adds	r3, #1
 800aa30:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	3301      	adds	r3, #1
 800aa36:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800aa38:	69fb      	ldr	r3, [r7, #28]
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	3301      	adds	r3, #1
 800aa42:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800aa44:	69bb      	ldr	r3, [r7, #24]
 800aa46:	3301      	adds	r3, #1
 800aa48:	61bb      	str	r3, [r7, #24]
 800aa4a:	69ba      	ldr	r2, [r7, #24]
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d3e2      	bcc.n	800aa18 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800aa52:	2300      	movs	r3, #0
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3724      	adds	r7, #36	; 0x24
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b08b      	sub	sp, #44	; 0x2c
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	4613      	mov	r3, r2
 800aa6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800aa76:	88fb      	ldrh	r3, [r7, #6]
 800aa78:	089b      	lsrs	r3, r3, #2
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800aa7e:	88fb      	ldrh	r3, [r7, #6]
 800aa80:	f003 0303 	and.w	r3, r3, #3
 800aa84:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800aa86:	2300      	movs	r3, #0
 800aa88:	623b      	str	r3, [r7, #32]
 800aa8a:	e014      	b.n	800aab6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800aa8c:	69bb      	ldr	r3, [r7, #24]
 800aa8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa96:	601a      	str	r2, [r3, #0]
    pDest++;
 800aa98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800aa9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800aaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800aaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaac:	3301      	adds	r3, #1
 800aaae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800aab0:	6a3b      	ldr	r3, [r7, #32]
 800aab2:	3301      	adds	r3, #1
 800aab4:	623b      	str	r3, [r7, #32]
 800aab6:	6a3a      	ldr	r2, [r7, #32]
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d3e6      	bcc.n	800aa8c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800aabe:	8bfb      	ldrh	r3, [r7, #30]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d01e      	beq.n	800ab02 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800aac4:	2300      	movs	r3, #0
 800aac6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aace:	461a      	mov	r2, r3
 800aad0:	f107 0310 	add.w	r3, r7, #16
 800aad4:	6812      	ldr	r2, [r2, #0]
 800aad6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aad8:	693a      	ldr	r2, [r7, #16]
 800aada:	6a3b      	ldr	r3, [r7, #32]
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	00db      	lsls	r3, r3, #3
 800aae0:	fa22 f303 	lsr.w	r3, r2, r3
 800aae4:	b2da      	uxtb	r2, r3
 800aae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae8:	701a      	strb	r2, [r3, #0]
      i++;
 800aaea:	6a3b      	ldr	r3, [r7, #32]
 800aaec:	3301      	adds	r3, #1
 800aaee:	623b      	str	r3, [r7, #32]
      pDest++;
 800aaf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800aaf6:	8bfb      	ldrh	r3, [r7, #30]
 800aaf8:	3b01      	subs	r3, #1
 800aafa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aafc:	8bfb      	ldrh	r3, [r7, #30]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1ea      	bne.n	800aad8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ab02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	372c      	adds	r7, #44	; 0x2c
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr

0800ab10 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	785b      	ldrb	r3, [r3, #1]
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d12c      	bne.n	800ab86 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	015a      	lsls	r2, r3, #5
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	4413      	add	r3, r2
 800ab34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	db12      	blt.n	800ab64 <USB_EPSetStall+0x54>
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d00f      	beq.n	800ab64 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	015a      	lsls	r2, r3, #5
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	68ba      	ldr	r2, [r7, #8]
 800ab54:	0151      	lsls	r1, r2, #5
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	440a      	add	r2, r1
 800ab5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ab62:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	015a      	lsls	r2, r3, #5
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	4413      	add	r3, r2
 800ab6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	68ba      	ldr	r2, [r7, #8]
 800ab74:	0151      	lsls	r1, r2, #5
 800ab76:	68fa      	ldr	r2, [r7, #12]
 800ab78:	440a      	add	r2, r1
 800ab7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ab82:	6013      	str	r3, [r2, #0]
 800ab84:	e02b      	b.n	800abde <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	015a      	lsls	r2, r3, #5
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	4413      	add	r3, r2
 800ab8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	db12      	blt.n	800abbe <USB_EPSetStall+0xae>
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d00f      	beq.n	800abbe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	015a      	lsls	r2, r3, #5
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	4413      	add	r3, r2
 800aba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	68ba      	ldr	r2, [r7, #8]
 800abae:	0151      	lsls	r1, r2, #5
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	440a      	add	r2, r1
 800abb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800abbc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	015a      	lsls	r2, r3, #5
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	4413      	add	r3, r2
 800abc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	68ba      	ldr	r2, [r7, #8]
 800abce:	0151      	lsls	r1, r2, #5
 800abd0:	68fa      	ldr	r2, [r7, #12]
 800abd2:	440a      	add	r2, r1
 800abd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800abdc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800abde:	2300      	movs	r3, #0
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3714      	adds	r7, #20
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800abec:	b480      	push	{r7}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	785b      	ldrb	r3, [r3, #1]
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	d128      	bne.n	800ac5a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	015a      	lsls	r2, r3, #5
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	4413      	add	r3, r2
 800ac10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	68ba      	ldr	r2, [r7, #8]
 800ac18:	0151      	lsls	r1, r2, #5
 800ac1a:	68fa      	ldr	r2, [r7, #12]
 800ac1c:	440a      	add	r2, r1
 800ac1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ac26:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	791b      	ldrb	r3, [r3, #4]
 800ac2c:	2b03      	cmp	r3, #3
 800ac2e:	d003      	beq.n	800ac38 <USB_EPClearStall+0x4c>
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	791b      	ldrb	r3, [r3, #4]
 800ac34:	2b02      	cmp	r3, #2
 800ac36:	d138      	bne.n	800acaa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	015a      	lsls	r2, r3, #5
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	4413      	add	r3, r2
 800ac40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	68ba      	ldr	r2, [r7, #8]
 800ac48:	0151      	lsls	r1, r2, #5
 800ac4a:	68fa      	ldr	r2, [r7, #12]
 800ac4c:	440a      	add	r2, r1
 800ac4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac56:	6013      	str	r3, [r2, #0]
 800ac58:	e027      	b.n	800acaa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	015a      	lsls	r2, r3, #5
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	4413      	add	r3, r2
 800ac62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	68ba      	ldr	r2, [r7, #8]
 800ac6a:	0151      	lsls	r1, r2, #5
 800ac6c:	68fa      	ldr	r2, [r7, #12]
 800ac6e:	440a      	add	r2, r1
 800ac70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ac78:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	791b      	ldrb	r3, [r3, #4]
 800ac7e:	2b03      	cmp	r3, #3
 800ac80:	d003      	beq.n	800ac8a <USB_EPClearStall+0x9e>
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	791b      	ldrb	r3, [r3, #4]
 800ac86:	2b02      	cmp	r3, #2
 800ac88:	d10f      	bne.n	800acaa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	015a      	lsls	r2, r3, #5
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	4413      	add	r3, r2
 800ac92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	68ba      	ldr	r2, [r7, #8]
 800ac9a:	0151      	lsls	r1, r2, #5
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	440a      	add	r2, r1
 800aca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aca8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800acaa:	2300      	movs	r3, #0
}
 800acac:	4618      	mov	r0, r3
 800acae:	3714      	adds	r7, #20
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800acb8:	b480      	push	{r7}
 800acba:	b085      	sub	sp, #20
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	460b      	mov	r3, r1
 800acc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acd6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800acda:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ace2:	681a      	ldr	r2, [r3, #0]
 800ace4:	78fb      	ldrb	r3, [r7, #3]
 800ace6:	011b      	lsls	r3, r3, #4
 800ace8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800acec:	68f9      	ldr	r1, [r7, #12]
 800acee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800acf2:	4313      	orrs	r3, r2
 800acf4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800acf6:	2300      	movs	r3, #0
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3714      	adds	r7, #20
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b085      	sub	sp, #20
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ad1e:	f023 0303 	bic.w	r3, r3, #3
 800ad22:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad32:	f023 0302 	bic.w	r3, r3, #2
 800ad36:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3714      	adds	r7, #20
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr

0800ad46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ad46:	b480      	push	{r7}
 800ad48:	b085      	sub	sp, #20
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ad60:	f023 0303 	bic.w	r3, r3, #3
 800ad64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	68fa      	ldr	r2, [r7, #12]
 800ad70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad74:	f043 0302 	orr.w	r3, r3, #2
 800ad78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad7a:	2300      	movs	r3, #0
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3714      	adds	r7, #20
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b085      	sub	sp, #20
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	695b      	ldr	r3, [r3, #20]
 800ad94:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	699b      	ldr	r3, [r3, #24]
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	4013      	ands	r3, r2
 800ad9e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ada0:	68fb      	ldr	r3, [r7, #12]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3714      	adds	r7, #20
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr

0800adae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800adae:	b480      	push	{r7}
 800adb0:	b085      	sub	sp, #20
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adc0:	699b      	ldr	r3, [r3, #24]
 800adc2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adca:	69db      	ldr	r3, [r3, #28]
 800adcc:	68ba      	ldr	r2, [r7, #8]
 800adce:	4013      	ands	r3, r2
 800add0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	0c1b      	lsrs	r3, r3, #16
}
 800add6:	4618      	mov	r0, r3
 800add8:	3714      	adds	r7, #20
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr

0800ade2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ade2:	b480      	push	{r7}
 800ade4:	b085      	sub	sp, #20
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adf4:	699b      	ldr	r3, [r3, #24]
 800adf6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adfe:	69db      	ldr	r3, [r3, #28]
 800ae00:	68ba      	ldr	r2, [r7, #8]
 800ae02:	4013      	ands	r3, r2
 800ae04:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	b29b      	uxth	r3, r3
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3714      	adds	r7, #20
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr

0800ae16 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ae16:	b480      	push	{r7}
 800ae18:	b085      	sub	sp, #20
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
 800ae1e:	460b      	mov	r3, r1
 800ae20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ae26:	78fb      	ldrb	r3, [r7, #3]
 800ae28:	015a      	lsls	r2, r3, #5
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae3c:	695b      	ldr	r3, [r3, #20]
 800ae3e:	68ba      	ldr	r2, [r7, #8]
 800ae40:	4013      	ands	r3, r2
 800ae42:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ae44:	68bb      	ldr	r3, [r7, #8]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3714      	adds	r7, #20
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr

0800ae52 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ae52:	b480      	push	{r7}
 800ae54:	b087      	sub	sp, #28
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae68:	691b      	ldr	r3, [r3, #16]
 800ae6a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae74:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ae76:	78fb      	ldrb	r3, [r7, #3]
 800ae78:	f003 030f 	and.w	r3, r3, #15
 800ae7c:	68fa      	ldr	r2, [r7, #12]
 800ae7e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae82:	01db      	lsls	r3, r3, #7
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	693a      	ldr	r2, [r7, #16]
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ae8c:	78fb      	ldrb	r3, [r7, #3]
 800ae8e:	015a      	lsls	r2, r3, #5
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	4413      	add	r3, r2
 800ae94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae98:	689b      	ldr	r3, [r3, #8]
 800ae9a:	693a      	ldr	r2, [r7, #16]
 800ae9c:	4013      	ands	r3, r2
 800ae9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aea0:	68bb      	ldr	r3, [r7, #8]
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	371c      	adds	r7, #28
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr

0800aeae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aeae:	b480      	push	{r7}
 800aeb0:	b083      	sub	sp, #12
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	695b      	ldr	r3, [r3, #20]
 800aeba:	f003 0301 	and.w	r3, r3, #1
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	370c      	adds	r7, #12
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr

0800aeca <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800aeca:	b480      	push	{r7}
 800aecc:	b085      	sub	sp, #20
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	68fa      	ldr	r2, [r7, #12]
 800aee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aee4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800aee8:	f023 0307 	bic.w	r3, r3, #7
 800aeec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	68fa      	ldr	r2, [r7, #12]
 800aef8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aefc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800af02:	2300      	movs	r3, #0
}
 800af04:	4618      	mov	r0, r3
 800af06:	3714      	adds	r7, #20
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr

0800af10 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800af10:	b480      	push	{r7}
 800af12:	b085      	sub	sp, #20
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	333c      	adds	r3, #60	; 0x3c
 800af22:	3304      	adds	r3, #4
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	4a1c      	ldr	r2, [pc, #112]	; (800af9c <USB_EP0_OutStart+0x8c>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d90a      	bls.n	800af46 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af40:	d101      	bne.n	800af46 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800af42:	2300      	movs	r3, #0
 800af44:	e024      	b.n	800af90 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af4c:	461a      	mov	r2, r3
 800af4e:	2300      	movs	r3, #0
 800af50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af58:	691b      	ldr	r3, [r3, #16]
 800af5a:	68fa      	ldr	r2, [r7, #12]
 800af5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af6c:	691b      	ldr	r3, [r3, #16]
 800af6e:	68fa      	ldr	r2, [r7, #12]
 800af70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af74:	f043 0318 	orr.w	r3, r3, #24
 800af78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af80:	691b      	ldr	r3, [r3, #16]
 800af82:	68fa      	ldr	r2, [r7, #12]
 800af84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af88:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800af8c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800af8e:	2300      	movs	r3, #0
}
 800af90:	4618      	mov	r0, r3
 800af92:	3714      	adds	r7, #20
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr
 800af9c:	4f54300a 	.word	0x4f54300a

0800afa0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b085      	sub	sp, #20
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800afa8:	2300      	movs	r3, #0
 800afaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	3301      	adds	r3, #1
 800afb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	4a13      	ldr	r2, [pc, #76]	; (800b004 <USB_CoreReset+0x64>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d901      	bls.n	800afbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800afba:	2303      	movs	r3, #3
 800afbc:	e01b      	b.n	800aff6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	691b      	ldr	r3, [r3, #16]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	daf2      	bge.n	800afac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800afc6:	2300      	movs	r3, #0
 800afc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	691b      	ldr	r3, [r3, #16]
 800afce:	f043 0201 	orr.w	r2, r3, #1
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	3301      	adds	r3, #1
 800afda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	4a09      	ldr	r2, [pc, #36]	; (800b004 <USB_CoreReset+0x64>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d901      	bls.n	800afe8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800afe4:	2303      	movs	r3, #3
 800afe6:	e006      	b.n	800aff6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	691b      	ldr	r3, [r3, #16]
 800afec:	f003 0301 	and.w	r3, r3, #1
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d0f0      	beq.n	800afd6 <USB_CoreReset+0x36>

  return HAL_OK;
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3714      	adds	r7, #20
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	00030d40 	.word	0x00030d40

0800b008 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b00c:	4904      	ldr	r1, [pc, #16]	; (800b020 <MX_FATFS_Init+0x18>)
 800b00e:	4805      	ldr	r0, [pc, #20]	; (800b024 <MX_FATFS_Init+0x1c>)
 800b010:	f004 fd70 	bl	800faf4 <FATFS_LinkDriver>
 800b014:	4603      	mov	r3, r0
 800b016:	461a      	mov	r2, r3
 800b018:	4b03      	ldr	r3, [pc, #12]	; (800b028 <MX_FATFS_Init+0x20>)
 800b01a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b01c:	bf00      	nop
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	20000510 	.word	0x20000510
 800b024:	08011904 	.word	0x08011904
 800b028:	2000050c 	.word	0x2000050c

0800b02c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b02c:	b480      	push	{r7}
 800b02e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b030:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b032:	4618      	mov	r0, r3
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b042:	2300      	movs	r3, #0
 800b044:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b046:	f000 f879 	bl	800b13c <BSP_SD_IsDetected>
 800b04a:	4603      	mov	r3, r0
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d001      	beq.n	800b054 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b050:	2302      	movs	r3, #2
 800b052:	e012      	b.n	800b07a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b054:	480b      	ldr	r0, [pc, #44]	; (800b084 <BSP_SD_Init+0x48>)
 800b056:	f7fa fd3f 	bl	8005ad8 <HAL_SD_Init>
 800b05a:	4603      	mov	r3, r0
 800b05c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b05e:	79fb      	ldrb	r3, [r7, #7]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d109      	bne.n	800b078 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b064:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b068:	4806      	ldr	r0, [pc, #24]	; (800b084 <BSP_SD_Init+0x48>)
 800b06a:	f7fb fc0b 	bl	8006884 <HAL_SD_ConfigWideBusOperation>
 800b06e:	4603      	mov	r3, r0
 800b070:	2b00      	cmp	r3, #0
 800b072:	d001      	beq.n	800b078 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b074:	2301      	movs	r3, #1
 800b076:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b078:	79fb      	ldrb	r3, [r7, #7]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3708      	adds	r7, #8
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	200002b8 	.word	0x200002b8

0800b088 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b088      	sub	sp, #32
 800b08c:	af02      	add	r7, sp, #8
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
 800b094:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b096:	2300      	movs	r3, #0
 800b098:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	9300      	str	r3, [sp, #0]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	68ba      	ldr	r2, [r7, #8]
 800b0a2:	68f9      	ldr	r1, [r7, #12]
 800b0a4:	4806      	ldr	r0, [pc, #24]	; (800b0c0 <BSP_SD_ReadBlocks+0x38>)
 800b0a6:	f7fa fe3f 	bl	8005d28 <HAL_SD_ReadBlocks>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d001      	beq.n	800b0b4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b0b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3718      	adds	r7, #24
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	200002b8 	.word	0x200002b8

0800b0c4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b088      	sub	sp, #32
 800b0c8:	af02      	add	r7, sp, #8
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	607a      	str	r2, [r7, #4]
 800b0d0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	9300      	str	r3, [sp, #0]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	68ba      	ldr	r2, [r7, #8]
 800b0de:	68f9      	ldr	r1, [r7, #12]
 800b0e0:	4806      	ldr	r0, [pc, #24]	; (800b0fc <BSP_SD_WriteBlocks+0x38>)
 800b0e2:	f7fa ffb3 	bl	800604c <HAL_SD_WriteBlocks>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d001      	beq.n	800b0f0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b0f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3718      	adds	r7, #24
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	200002b8 	.word	0x200002b8

0800b100 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b104:	4805      	ldr	r0, [pc, #20]	; (800b11c <BSP_SD_GetCardState+0x1c>)
 800b106:	f7fb fcd1 	bl	8006aac <HAL_SD_GetCardState>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b04      	cmp	r3, #4
 800b10e:	bf14      	ite	ne
 800b110:	2301      	movne	r3, #1
 800b112:	2300      	moveq	r3, #0
 800b114:	b2db      	uxtb	r3, r3
}
 800b116:	4618      	mov	r0, r3
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	200002b8 	.word	0x200002b8

0800b120 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b128:	6879      	ldr	r1, [r7, #4]
 800b12a:	4803      	ldr	r0, [pc, #12]	; (800b138 <BSP_SD_GetCardInfo+0x18>)
 800b12c:	f7fb fb7e 	bl	800682c <HAL_SD_GetCardInfo>
}
 800b130:	bf00      	nop
 800b132:	3708      	adds	r7, #8
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}
 800b138:	200002b8 	.word	0x200002b8

0800b13c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b142:	2301      	movs	r3, #1
 800b144:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b146:	f000 f80b 	bl	800b160 <BSP_PlatformIsDetected>
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d101      	bne.n	800b154 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b150:	2300      	movs	r3, #0
 800b152:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b154:	79fb      	ldrb	r3, [r7, #7]
 800b156:	b2db      	uxtb	r3, r3
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3708      	adds	r7, #8
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b166:	2301      	movs	r3, #1
 800b168:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b16a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b16e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b172:	f7f6 fc5d 	bl	8001a30 <HAL_GPIO_ReadPin>
 800b176:	4603      	mov	r3, r0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d001      	beq.n	800b180 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 800b17c:	2300      	movs	r3, #0
 800b17e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b180:	79fb      	ldrb	r3, [r7, #7]
}
 800b182:	4618      	mov	r0, r3
 800b184:	3708      	adds	r7, #8
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
	...

0800b18c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	4603      	mov	r3, r0
 800b194:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b196:	4b0b      	ldr	r3, [pc, #44]	; (800b1c4 <SD_CheckStatus+0x38>)
 800b198:	2201      	movs	r2, #1
 800b19a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b19c:	f7ff ffb0 	bl	800b100 <BSP_SD_GetCardState>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d107      	bne.n	800b1b6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b1a6:	4b07      	ldr	r3, [pc, #28]	; (800b1c4 <SD_CheckStatus+0x38>)
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	f023 0301 	bic.w	r3, r3, #1
 800b1b0:	b2da      	uxtb	r2, r3
 800b1b2:	4b04      	ldr	r3, [pc, #16]	; (800b1c4 <SD_CheckStatus+0x38>)
 800b1b4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b1b6:	4b03      	ldr	r3, [pc, #12]	; (800b1c4 <SD_CheckStatus+0x38>)
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	b2db      	uxtb	r3, r3
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3708      	adds	r7, #8
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	20000009 	.word	0x20000009

0800b1c8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b1d2:	4b0b      	ldr	r3, [pc, #44]	; (800b200 <SD_initialize+0x38>)
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b1d8:	f7ff ff30 	bl	800b03c <BSP_SD_Init>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d107      	bne.n	800b1f2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b1e2:	79fb      	ldrb	r3, [r7, #7]
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7ff ffd1 	bl	800b18c <SD_CheckStatus>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	4b04      	ldr	r3, [pc, #16]	; (800b200 <SD_initialize+0x38>)
 800b1f0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b1f2:	4b03      	ldr	r3, [pc, #12]	; (800b200 <SD_initialize+0x38>)
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	b2db      	uxtb	r3, r3
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3708      	adds	r7, #8
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}
 800b200:	20000009 	.word	0x20000009

0800b204 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b082      	sub	sp, #8
 800b208:	af00      	add	r7, sp, #0
 800b20a:	4603      	mov	r3, r0
 800b20c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b20e:	79fb      	ldrb	r3, [r7, #7]
 800b210:	4618      	mov	r0, r3
 800b212:	f7ff ffbb 	bl	800b18c <SD_CheckStatus>
 800b216:	4603      	mov	r3, r0
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3708      	adds	r7, #8
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b086      	sub	sp, #24
 800b224:	af00      	add	r7, sp, #0
 800b226:	60b9      	str	r1, [r7, #8]
 800b228:	607a      	str	r2, [r7, #4]
 800b22a:	603b      	str	r3, [r7, #0]
 800b22c:	4603      	mov	r3, r0
 800b22e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b230:	2301      	movs	r3, #1
 800b232:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b238:	683a      	ldr	r2, [r7, #0]
 800b23a:	6879      	ldr	r1, [r7, #4]
 800b23c:	68b8      	ldr	r0, [r7, #8]
 800b23e:	f7ff ff23 	bl	800b088 <BSP_SD_ReadBlocks>
 800b242:	4603      	mov	r3, r0
 800b244:	2b00      	cmp	r3, #0
 800b246:	d107      	bne.n	800b258 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b248:	bf00      	nop
 800b24a:	f7ff ff59 	bl	800b100 <BSP_SD_GetCardState>
 800b24e:	4603      	mov	r3, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	d1fa      	bne.n	800b24a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800b254:	2300      	movs	r3, #0
 800b256:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b258:	7dfb      	ldrb	r3, [r7, #23]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3718      	adds	r7, #24
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}

0800b262 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b262:	b580      	push	{r7, lr}
 800b264:	b086      	sub	sp, #24
 800b266:	af00      	add	r7, sp, #0
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	607a      	str	r2, [r7, #4]
 800b26c:	603b      	str	r3, [r7, #0]
 800b26e:	4603      	mov	r3, r0
 800b270:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b272:	2301      	movs	r3, #1
 800b274:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b27a:	683a      	ldr	r2, [r7, #0]
 800b27c:	6879      	ldr	r1, [r7, #4]
 800b27e:	68b8      	ldr	r0, [r7, #8]
 800b280:	f7ff ff20 	bl	800b0c4 <BSP_SD_WriteBlocks>
 800b284:	4603      	mov	r3, r0
 800b286:	2b00      	cmp	r3, #0
 800b288:	d107      	bne.n	800b29a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b28a:	bf00      	nop
 800b28c:	f7ff ff38 	bl	800b100 <BSP_SD_GetCardState>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1fa      	bne.n	800b28c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b296:	2300      	movs	r3, #0
 800b298:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b29a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3718      	adds	r7, #24
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b08c      	sub	sp, #48	; 0x30
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	603a      	str	r2, [r7, #0]
 800b2ae:	71fb      	strb	r3, [r7, #7]
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b2ba:	4b25      	ldr	r3, [pc, #148]	; (800b350 <SD_ioctl+0xac>)
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	f003 0301 	and.w	r3, r3, #1
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d001      	beq.n	800b2cc <SD_ioctl+0x28>
 800b2c8:	2303      	movs	r3, #3
 800b2ca:	e03c      	b.n	800b346 <SD_ioctl+0xa2>

  switch (cmd)
 800b2cc:	79bb      	ldrb	r3, [r7, #6]
 800b2ce:	2b03      	cmp	r3, #3
 800b2d0:	d834      	bhi.n	800b33c <SD_ioctl+0x98>
 800b2d2:	a201      	add	r2, pc, #4	; (adr r2, 800b2d8 <SD_ioctl+0x34>)
 800b2d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2d8:	0800b2e9 	.word	0x0800b2e9
 800b2dc:	0800b2f1 	.word	0x0800b2f1
 800b2e0:	0800b309 	.word	0x0800b309
 800b2e4:	0800b323 	.word	0x0800b323
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b2ee:	e028      	b.n	800b342 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b2f0:	f107 0308 	add.w	r3, r7, #8
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7ff ff13 	bl	800b120 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b2fa:	6a3a      	ldr	r2, [r7, #32]
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b300:	2300      	movs	r3, #0
 800b302:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b306:	e01c      	b.n	800b342 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b308:	f107 0308 	add.w	r3, r7, #8
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7ff ff07 	bl	800b120 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b314:	b29a      	uxth	r2, r3
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b31a:	2300      	movs	r3, #0
 800b31c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b320:	e00f      	b.n	800b342 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b322:	f107 0308 	add.w	r3, r7, #8
 800b326:	4618      	mov	r0, r3
 800b328:	f7ff fefa 	bl	800b120 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32e:	0a5a      	lsrs	r2, r3, #9
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b334:	2300      	movs	r3, #0
 800b336:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b33a:	e002      	b.n	800b342 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b33c:	2304      	movs	r3, #4
 800b33e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b342:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b346:	4618      	mov	r0, r3
 800b348:	3730      	adds	r7, #48	; 0x30
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	20000009 	.word	0x20000009

0800b354 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	460b      	mov	r3, r1
 800b35e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b360:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b364:	f005 fa02 	bl	801076c <USBD_static_malloc>
 800b368:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d105      	bne.n	800b37c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b378:	2302      	movs	r3, #2
 800b37a:	e066      	b.n	800b44a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	7c1b      	ldrb	r3, [r3, #16]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d119      	bne.n	800b3c0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b38c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b390:	2202      	movs	r2, #2
 800b392:	2181      	movs	r1, #129	; 0x81
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f004 ffd5 	bl	8010344 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2201      	movs	r2, #1
 800b39e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b3a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3a4:	2202      	movs	r2, #2
 800b3a6:	2101      	movs	r1, #1
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f004 ffcb 	bl	8010344 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2210      	movs	r2, #16
 800b3ba:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b3be:	e016      	b.n	800b3ee <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b3c0:	2340      	movs	r3, #64	; 0x40
 800b3c2:	2202      	movs	r2, #2
 800b3c4:	2181      	movs	r1, #129	; 0x81
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f004 ffbc 	bl	8010344 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b3d2:	2340      	movs	r3, #64	; 0x40
 800b3d4:	2202      	movs	r2, #2
 800b3d6:	2101      	movs	r1, #1
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f004 ffb3 	bl	8010344 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2210      	movs	r2, #16
 800b3ea:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b3ee:	2308      	movs	r3, #8
 800b3f0:	2203      	movs	r2, #3
 800b3f2:	2182      	movs	r1, #130	; 0x82
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f004 ffa5 	bl	8010344 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2200      	movs	r2, #0
 800b410:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2200      	movs	r2, #0
 800b418:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	7c1b      	ldrb	r3, [r3, #16]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d109      	bne.n	800b438 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b42a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b42e:	2101      	movs	r1, #1
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f005 f901 	bl	8010638 <USBD_LL_PrepareReceive>
 800b436:	e007      	b.n	800b448 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b43e:	2340      	movs	r3, #64	; 0x40
 800b440:	2101      	movs	r1, #1
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f005 f8f8 	bl	8010638 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b448:	2300      	movs	r3, #0
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3710      	adds	r7, #16
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b452:	b580      	push	{r7, lr}
 800b454:	b082      	sub	sp, #8
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
 800b45a:	460b      	mov	r3, r1
 800b45c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b45e:	2181      	movs	r1, #129	; 0x81
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f004 ffad 	bl	80103c0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2200      	movs	r2, #0
 800b46a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b46c:	2101      	movs	r1, #1
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f004 ffa6 	bl	80103c0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2200      	movs	r2, #0
 800b478:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b47c:	2182      	movs	r1, #130	; 0x82
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f004 ff9e 	bl	80103c0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2200      	movs	r2, #0
 800b488:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2200      	movs	r2, #0
 800b490:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d00e      	beq.n	800b4bc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f005 f96a 	bl	8010788 <USBD_static_free>
    pdev->pClassData = NULL;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b4bc:	2300      	movs	r3, #0
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3708      	adds	r7, #8
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
	...

0800b4c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b086      	sub	sp, #24
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d101      	bne.n	800b4f0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b4ec:	2303      	movs	r3, #3
 800b4ee:	e0af      	b.n	800b650 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d03f      	beq.n	800b57c <USBD_CDC_Setup+0xb4>
 800b4fc:	2b20      	cmp	r3, #32
 800b4fe:	f040 809f 	bne.w	800b640 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	88db      	ldrh	r3, [r3, #6]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d02e      	beq.n	800b568 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	b25b      	sxtb	r3, r3
 800b510:	2b00      	cmp	r3, #0
 800b512:	da16      	bge.n	800b542 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	683a      	ldr	r2, [r7, #0]
 800b51e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b520:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b522:	683a      	ldr	r2, [r7, #0]
 800b524:	88d2      	ldrh	r2, [r2, #6]
 800b526:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	88db      	ldrh	r3, [r3, #6]
 800b52c:	2b07      	cmp	r3, #7
 800b52e:	bf28      	it	cs
 800b530:	2307      	movcs	r3, #7
 800b532:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	89fa      	ldrh	r2, [r7, #14]
 800b538:	4619      	mov	r1, r3
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f001 fb43 	bl	800cbc6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b540:	e085      	b.n	800b64e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	785a      	ldrb	r2, [r3, #1]
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	88db      	ldrh	r3, [r3, #6]
 800b550:	b2da      	uxtb	r2, r3
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b558:	6939      	ldr	r1, [r7, #16]
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	88db      	ldrh	r3, [r3, #6]
 800b55e:	461a      	mov	r2, r3
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f001 fb5c 	bl	800cc1e <USBD_CtlPrepareRx>
      break;
 800b566:	e072      	b.n	800b64e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b56e:	689b      	ldr	r3, [r3, #8]
 800b570:	683a      	ldr	r2, [r7, #0]
 800b572:	7850      	ldrb	r0, [r2, #1]
 800b574:	2200      	movs	r2, #0
 800b576:	6839      	ldr	r1, [r7, #0]
 800b578:	4798      	blx	r3
      break;
 800b57a:	e068      	b.n	800b64e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	785b      	ldrb	r3, [r3, #1]
 800b580:	2b0b      	cmp	r3, #11
 800b582:	d852      	bhi.n	800b62a <USBD_CDC_Setup+0x162>
 800b584:	a201      	add	r2, pc, #4	; (adr r2, 800b58c <USBD_CDC_Setup+0xc4>)
 800b586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b58a:	bf00      	nop
 800b58c:	0800b5bd 	.word	0x0800b5bd
 800b590:	0800b639 	.word	0x0800b639
 800b594:	0800b62b 	.word	0x0800b62b
 800b598:	0800b62b 	.word	0x0800b62b
 800b59c:	0800b62b 	.word	0x0800b62b
 800b5a0:	0800b62b 	.word	0x0800b62b
 800b5a4:	0800b62b 	.word	0x0800b62b
 800b5a8:	0800b62b 	.word	0x0800b62b
 800b5ac:	0800b62b 	.word	0x0800b62b
 800b5b0:	0800b62b 	.word	0x0800b62b
 800b5b4:	0800b5e7 	.word	0x0800b5e7
 800b5b8:	0800b611 	.word	0x0800b611
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5c2:	b2db      	uxtb	r3, r3
 800b5c4:	2b03      	cmp	r3, #3
 800b5c6:	d107      	bne.n	800b5d8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b5c8:	f107 030a 	add.w	r3, r7, #10
 800b5cc:	2202      	movs	r2, #2
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f001 faf8 	bl	800cbc6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b5d6:	e032      	b.n	800b63e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b5d8:	6839      	ldr	r1, [r7, #0]
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f001 fa82 	bl	800cae4 <USBD_CtlError>
            ret = USBD_FAIL;
 800b5e0:	2303      	movs	r3, #3
 800b5e2:	75fb      	strb	r3, [r7, #23]
          break;
 800b5e4:	e02b      	b.n	800b63e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5ec:	b2db      	uxtb	r3, r3
 800b5ee:	2b03      	cmp	r3, #3
 800b5f0:	d107      	bne.n	800b602 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b5f2:	f107 030d 	add.w	r3, r7, #13
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f001 fae3 	bl	800cbc6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b600:	e01d      	b.n	800b63e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b602:	6839      	ldr	r1, [r7, #0]
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f001 fa6d 	bl	800cae4 <USBD_CtlError>
            ret = USBD_FAIL;
 800b60a:	2303      	movs	r3, #3
 800b60c:	75fb      	strb	r3, [r7, #23]
          break;
 800b60e:	e016      	b.n	800b63e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b616:	b2db      	uxtb	r3, r3
 800b618:	2b03      	cmp	r3, #3
 800b61a:	d00f      	beq.n	800b63c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b61c:	6839      	ldr	r1, [r7, #0]
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f001 fa60 	bl	800cae4 <USBD_CtlError>
            ret = USBD_FAIL;
 800b624:	2303      	movs	r3, #3
 800b626:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b628:	e008      	b.n	800b63c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b62a:	6839      	ldr	r1, [r7, #0]
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f001 fa59 	bl	800cae4 <USBD_CtlError>
          ret = USBD_FAIL;
 800b632:	2303      	movs	r3, #3
 800b634:	75fb      	strb	r3, [r7, #23]
          break;
 800b636:	e002      	b.n	800b63e <USBD_CDC_Setup+0x176>
          break;
 800b638:	bf00      	nop
 800b63a:	e008      	b.n	800b64e <USBD_CDC_Setup+0x186>
          break;
 800b63c:	bf00      	nop
      }
      break;
 800b63e:	e006      	b.n	800b64e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b640:	6839      	ldr	r1, [r7, #0]
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f001 fa4e 	bl	800cae4 <USBD_CtlError>
      ret = USBD_FAIL;
 800b648:	2303      	movs	r3, #3
 800b64a:	75fb      	strb	r3, [r7, #23]
      break;
 800b64c:	bf00      	nop
  }

  return (uint8_t)ret;
 800b64e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b650:	4618      	mov	r0, r3
 800b652:	3718      	adds	r7, #24
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b084      	sub	sp, #16
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	460b      	mov	r3, r1
 800b662:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b66a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b672:	2b00      	cmp	r3, #0
 800b674:	d101      	bne.n	800b67a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b676:	2303      	movs	r3, #3
 800b678:	e04f      	b.n	800b71a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b680:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b682:	78fa      	ldrb	r2, [r7, #3]
 800b684:	6879      	ldr	r1, [r7, #4]
 800b686:	4613      	mov	r3, r2
 800b688:	009b      	lsls	r3, r3, #2
 800b68a:	4413      	add	r3, r2
 800b68c:	009b      	lsls	r3, r3, #2
 800b68e:	440b      	add	r3, r1
 800b690:	3318      	adds	r3, #24
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d029      	beq.n	800b6ec <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b698:	78fa      	ldrb	r2, [r7, #3]
 800b69a:	6879      	ldr	r1, [r7, #4]
 800b69c:	4613      	mov	r3, r2
 800b69e:	009b      	lsls	r3, r3, #2
 800b6a0:	4413      	add	r3, r2
 800b6a2:	009b      	lsls	r3, r3, #2
 800b6a4:	440b      	add	r3, r1
 800b6a6:	3318      	adds	r3, #24
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	78f9      	ldrb	r1, [r7, #3]
 800b6ac:	68f8      	ldr	r0, [r7, #12]
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	00db      	lsls	r3, r3, #3
 800b6b2:	440b      	add	r3, r1
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	4403      	add	r3, r0
 800b6b8:	3348      	adds	r3, #72	; 0x48
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	fbb2 f1f3 	udiv	r1, r2, r3
 800b6c0:	fb01 f303 	mul.w	r3, r1, r3
 800b6c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d110      	bne.n	800b6ec <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b6ca:	78fa      	ldrb	r2, [r7, #3]
 800b6cc:	6879      	ldr	r1, [r7, #4]
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	009b      	lsls	r3, r3, #2
 800b6d2:	4413      	add	r3, r2
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	440b      	add	r3, r1
 800b6d8:	3318      	adds	r3, #24
 800b6da:	2200      	movs	r2, #0
 800b6dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b6de:	78f9      	ldrb	r1, [r7, #3]
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f004 ff6f 	bl	80105c8 <USBD_LL_Transmit>
 800b6ea:	e015      	b.n	800b718 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b6fa:	691b      	ldr	r3, [r3, #16]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00b      	beq.n	800b718 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b706:	691b      	ldr	r3, [r3, #16]
 800b708:	68ba      	ldr	r2, [r7, #8]
 800b70a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b70e:	68ba      	ldr	r2, [r7, #8]
 800b710:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b714:	78fa      	ldrb	r2, [r7, #3]
 800b716:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b718:	2300      	movs	r3, #0
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3710      	adds	r7, #16
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b084      	sub	sp, #16
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
 800b72a:	460b      	mov	r3, r1
 800b72c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b734:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d101      	bne.n	800b744 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b740:	2303      	movs	r3, #3
 800b742:	e015      	b.n	800b770 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b744:	78fb      	ldrb	r3, [r7, #3]
 800b746:	4619      	mov	r1, r3
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f004 ffad 	bl	80106a8 <USBD_LL_GetRxDataSize>
 800b74e:	4602      	mov	r2, r0
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b75c:	68db      	ldr	r3, [r3, #12]
 800b75e:	68fa      	ldr	r2, [r7, #12]
 800b760:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b764:	68fa      	ldr	r2, [r7, #12]
 800b766:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b76a:	4611      	mov	r1, r2
 800b76c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b76e:	2300      	movs	r3, #0
}
 800b770:	4618      	mov	r0, r3
 800b772:	3710      	adds	r7, #16
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b786:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d101      	bne.n	800b792 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b78e:	2303      	movs	r3, #3
 800b790:	e01b      	b.n	800b7ca <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d015      	beq.n	800b7c8 <USBD_CDC_EP0_RxReady+0x50>
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b7a2:	2bff      	cmp	r3, #255	; 0xff
 800b7a4:	d010      	beq.n	800b7c8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7ac:	689b      	ldr	r3, [r3, #8]
 800b7ae:	68fa      	ldr	r2, [r7, #12]
 800b7b0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b7b4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b7b6:	68fa      	ldr	r2, [r7, #12]
 800b7b8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b7bc:	b292      	uxth	r2, r2
 800b7be:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	22ff      	movs	r2, #255	; 0xff
 800b7c4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b7c8:	2300      	movs	r3, #0
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3710      	adds	r7, #16
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
	...

0800b7d4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b083      	sub	sp, #12
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2243      	movs	r2, #67	; 0x43
 800b7e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b7e2:	4b03      	ldr	r3, [pc, #12]	; (800b7f0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	370c      	adds	r7, #12
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr
 800b7f0:	20000094 	.word	0x20000094

0800b7f4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2243      	movs	r2, #67	; 0x43
 800b800:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b802:	4b03      	ldr	r3, [pc, #12]	; (800b810 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b804:	4618      	mov	r0, r3
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr
 800b810:	20000050 	.word	0x20000050

0800b814 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b814:	b480      	push	{r7}
 800b816:	b083      	sub	sp, #12
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2243      	movs	r2, #67	; 0x43
 800b820:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b822:	4b03      	ldr	r3, [pc, #12]	; (800b830 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b824:	4618      	mov	r0, r3
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr
 800b830:	200000d8 	.word	0x200000d8

0800b834 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b834:	b480      	push	{r7}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	220a      	movs	r2, #10
 800b840:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b842:	4b03      	ldr	r3, [pc, #12]	; (800b850 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b844:	4618      	mov	r0, r3
 800b846:	370c      	adds	r7, #12
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr
 800b850:	2000000c 	.word	0x2000000c

0800b854 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b854:	b480      	push	{r7}
 800b856:	b083      	sub	sp, #12
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d101      	bne.n	800b868 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b864:	2303      	movs	r3, #3
 800b866:	e004      	b.n	800b872 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	683a      	ldr	r2, [r7, #0]
 800b86c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b870:	2300      	movs	r3, #0
}
 800b872:	4618      	mov	r0, r3
 800b874:	370c      	adds	r7, #12
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr

0800b87e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b87e:	b480      	push	{r7}
 800b880:	b087      	sub	sp, #28
 800b882:	af00      	add	r7, sp, #0
 800b884:	60f8      	str	r0, [r7, #12]
 800b886:	60b9      	str	r1, [r7, #8]
 800b888:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b890:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d101      	bne.n	800b89c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b898:	2303      	movs	r3, #3
 800b89a:	e008      	b.n	800b8ae <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	68ba      	ldr	r2, [r7, #8]
 800b8a0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b8ac:	2300      	movs	r3, #0
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	371c      	adds	r7, #28
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr

0800b8ba <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b8ba:	b480      	push	{r7}
 800b8bc:	b085      	sub	sp, #20
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
 800b8c2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8ca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d101      	bne.n	800b8d6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b8d2:	2303      	movs	r3, #3
 800b8d4:	e004      	b.n	800b8e0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	683a      	ldr	r2, [r7, #0]
 800b8da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b8de:	2300      	movs	r3, #0
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3714      	adds	r7, #20
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8fa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b906:	2b00      	cmp	r3, #0
 800b908:	d101      	bne.n	800b90e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b90a:	2303      	movs	r3, #3
 800b90c:	e01a      	b.n	800b944 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b914:	2b00      	cmp	r3, #0
 800b916:	d114      	bne.n	800b942 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	2201      	movs	r2, #1
 800b91c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b936:	2181      	movs	r1, #129	; 0x81
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f004 fe45 	bl	80105c8 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b93e:	2300      	movs	r3, #0
 800b940:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b942:	7bfb      	ldrb	r3, [r7, #15]
}
 800b944:	4618      	mov	r0, r3
 800b946:	3710      	adds	r7, #16
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b95a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b962:	2b00      	cmp	r3, #0
 800b964:	d101      	bne.n	800b96a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b966:	2303      	movs	r3, #3
 800b968:	e016      	b.n	800b998 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	7c1b      	ldrb	r3, [r3, #16]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d109      	bne.n	800b986 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b97c:	2101      	movs	r1, #1
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f004 fe5a 	bl	8010638 <USBD_LL_PrepareReceive>
 800b984:	e007      	b.n	800b996 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b98c:	2340      	movs	r3, #64	; 0x40
 800b98e:	2101      	movs	r1, #1
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f004 fe51 	bl	8010638 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b996:	2300      	movs	r3, #0
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3710      	adds	r7, #16
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b086      	sub	sp, #24
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	60f8      	str	r0, [r7, #12]
 800b9a8:	60b9      	str	r1, [r7, #8]
 800b9aa:	4613      	mov	r3, r2
 800b9ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d101      	bne.n	800b9b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b9b4:	2303      	movs	r3, #3
 800b9b6:	e01f      	b.n	800b9f8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d003      	beq.n	800b9de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	68ba      	ldr	r2, [r7, #8]
 800b9da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2201      	movs	r2, #1
 800b9e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	79fa      	ldrb	r2, [r7, #7]
 800b9ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b9ec:	68f8      	ldr	r0, [r7, #12]
 800b9ee:	f004 fc2d 	bl	801024c <USBD_LL_Init>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b9f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3718      	adds	r7, #24
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d101      	bne.n	800ba18 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ba14:	2303      	movs	r3, #3
 800ba16:	e016      	b.n	800ba46 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	683a      	ldr	r2, [r7, #0]
 800ba1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d00b      	beq.n	800ba44 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba34:	f107 020e 	add.w	r2, r7, #14
 800ba38:	4610      	mov	r0, r2
 800ba3a:	4798      	blx	r3
 800ba3c:	4602      	mov	r2, r0
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3710      	adds	r7, #16
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ba4e:	b580      	push	{r7, lr}
 800ba50:	b082      	sub	sp, #8
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f004 fc42 	bl	80102e0 <USBD_LL_Start>
 800ba5c:	4603      	mov	r3, r0
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3708      	adds	r7, #8
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}

0800ba66 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ba66:	b480      	push	{r7}
 800ba68:	b083      	sub	sp, #12
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ba6e:	2300      	movs	r3, #0
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	370c      	adds	r7, #12
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr

0800ba7c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	460b      	mov	r3, r1
 800ba86:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ba88:	2303      	movs	r3, #3
 800ba8a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d009      	beq.n	800baaa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	78fa      	ldrb	r2, [r7, #3]
 800baa0:	4611      	mov	r1, r2
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	4798      	blx	r3
 800baa6:	4603      	mov	r3, r0
 800baa8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800baaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800baac:	4618      	mov	r0, r3
 800baae:	3710      	adds	r7, #16
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b082      	sub	sp, #8
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	460b      	mov	r3, r1
 800babe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d007      	beq.n	800bada <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	78fa      	ldrb	r2, [r7, #3]
 800bad4:	4611      	mov	r1, r2
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	4798      	blx	r3
  }

  return USBD_OK;
 800bada:	2300      	movs	r3, #0
}
 800badc:	4618      	mov	r0, r3
 800bade:	3708      	adds	r7, #8
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800baf4:	6839      	ldr	r1, [r7, #0]
 800baf6:	4618      	mov	r0, r3
 800baf8:	f000 ffba 	bl	800ca70 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2201      	movs	r2, #1
 800bb00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bb18:	f003 031f 	and.w	r3, r3, #31
 800bb1c:	2b02      	cmp	r3, #2
 800bb1e:	d01a      	beq.n	800bb56 <USBD_LL_SetupStage+0x72>
 800bb20:	2b02      	cmp	r3, #2
 800bb22:	d822      	bhi.n	800bb6a <USBD_LL_SetupStage+0x86>
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d002      	beq.n	800bb2e <USBD_LL_SetupStage+0x4a>
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	d00a      	beq.n	800bb42 <USBD_LL_SetupStage+0x5e>
 800bb2c:	e01d      	b.n	800bb6a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb34:	4619      	mov	r1, r3
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f000 fa62 	bl	800c000 <USBD_StdDevReq>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	73fb      	strb	r3, [r7, #15]
      break;
 800bb40:	e020      	b.n	800bb84 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb48:	4619      	mov	r1, r3
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 fac6 	bl	800c0dc <USBD_StdItfReq>
 800bb50:	4603      	mov	r3, r0
 800bb52:	73fb      	strb	r3, [r7, #15]
      break;
 800bb54:	e016      	b.n	800bb84 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 fb05 	bl	800c16e <USBD_StdEPReq>
 800bb64:	4603      	mov	r3, r0
 800bb66:	73fb      	strb	r3, [r7, #15]
      break;
 800bb68:	e00c      	b.n	800bb84 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bb70:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	4619      	mov	r1, r3
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f004 fc57 	bl	801042c <USBD_LL_StallEP>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	73fb      	strb	r3, [r7, #15]
      break;
 800bb82:	bf00      	nop
  }

  return ret;
 800bb84:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3710      	adds	r7, #16
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}

0800bb8e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bb8e:	b580      	push	{r7, lr}
 800bb90:	b086      	sub	sp, #24
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	60f8      	str	r0, [r7, #12]
 800bb96:	460b      	mov	r3, r1
 800bb98:	607a      	str	r2, [r7, #4]
 800bb9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bb9c:	7afb      	ldrb	r3, [r7, #11]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d138      	bne.n	800bc14 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bba8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bbb0:	2b03      	cmp	r3, #3
 800bbb2:	d14a      	bne.n	800bc4a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	689a      	ldr	r2, [r3, #8]
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	68db      	ldr	r3, [r3, #12]
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d913      	bls.n	800bbe8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	689a      	ldr	r2, [r3, #8]
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	68db      	ldr	r3, [r3, #12]
 800bbc8:	1ad2      	subs	r2, r2, r3
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	68da      	ldr	r2, [r3, #12]
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	689b      	ldr	r3, [r3, #8]
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	bf28      	it	cs
 800bbda:	4613      	movcs	r3, r2
 800bbdc:	461a      	mov	r2, r3
 800bbde:	6879      	ldr	r1, [r7, #4]
 800bbe0:	68f8      	ldr	r0, [r7, #12]
 800bbe2:	f001 f839 	bl	800cc58 <USBD_CtlContinueRx>
 800bbe6:	e030      	b.n	800bc4a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbee:	b2db      	uxtb	r3, r3
 800bbf0:	2b03      	cmp	r3, #3
 800bbf2:	d10b      	bne.n	800bc0c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbfa:	691b      	ldr	r3, [r3, #16]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d005      	beq.n	800bc0c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc06:	691b      	ldr	r3, [r3, #16]
 800bc08:	68f8      	ldr	r0, [r7, #12]
 800bc0a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bc0c:	68f8      	ldr	r0, [r7, #12]
 800bc0e:	f001 f834 	bl	800cc7a <USBD_CtlSendStatus>
 800bc12:	e01a      	b.n	800bc4a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc1a:	b2db      	uxtb	r3, r3
 800bc1c:	2b03      	cmp	r3, #3
 800bc1e:	d114      	bne.n	800bc4a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc26:	699b      	ldr	r3, [r3, #24]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d00e      	beq.n	800bc4a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc32:	699b      	ldr	r3, [r3, #24]
 800bc34:	7afa      	ldrb	r2, [r7, #11]
 800bc36:	4611      	mov	r1, r2
 800bc38:	68f8      	ldr	r0, [r7, #12]
 800bc3a:	4798      	blx	r3
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bc40:	7dfb      	ldrb	r3, [r7, #23]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d001      	beq.n	800bc4a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800bc46:	7dfb      	ldrb	r3, [r7, #23]
 800bc48:	e000      	b.n	800bc4c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800bc4a:	2300      	movs	r3, #0
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3718      	adds	r7, #24
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b086      	sub	sp, #24
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	607a      	str	r2, [r7, #4]
 800bc60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bc62:	7afb      	ldrb	r3, [r7, #11]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d16b      	bne.n	800bd40 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	3314      	adds	r3, #20
 800bc6c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bc74:	2b02      	cmp	r3, #2
 800bc76:	d156      	bne.n	800bd26 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	689a      	ldr	r2, [r3, #8]
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	68db      	ldr	r3, [r3, #12]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d914      	bls.n	800bcae <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	689a      	ldr	r2, [r3, #8]
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	68db      	ldr	r3, [r3, #12]
 800bc8c:	1ad2      	subs	r2, r2, r3
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	689b      	ldr	r3, [r3, #8]
 800bc96:	461a      	mov	r2, r3
 800bc98:	6879      	ldr	r1, [r7, #4]
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	f000 ffae 	bl	800cbfc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bca0:	2300      	movs	r3, #0
 800bca2:	2200      	movs	r2, #0
 800bca4:	2100      	movs	r1, #0
 800bca6:	68f8      	ldr	r0, [r7, #12]
 800bca8:	f004 fcc6 	bl	8010638 <USBD_LL_PrepareReceive>
 800bcac:	e03b      	b.n	800bd26 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	68da      	ldr	r2, [r3, #12]
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	689b      	ldr	r3, [r3, #8]
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d11c      	bne.n	800bcf4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	685a      	ldr	r2, [r3, #4]
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d316      	bcc.n	800bcf4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	685a      	ldr	r2, [r3, #4]
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d20f      	bcs.n	800bcf4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	2100      	movs	r1, #0
 800bcd8:	68f8      	ldr	r0, [r7, #12]
 800bcda:	f000 ff8f 	bl	800cbfc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2200      	movs	r2, #0
 800bce2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bce6:	2300      	movs	r3, #0
 800bce8:	2200      	movs	r2, #0
 800bcea:	2100      	movs	r1, #0
 800bcec:	68f8      	ldr	r0, [r7, #12]
 800bcee:	f004 fca3 	bl	8010638 <USBD_LL_PrepareReceive>
 800bcf2:	e018      	b.n	800bd26 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	2b03      	cmp	r3, #3
 800bcfe:	d10b      	bne.n	800bd18 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d005      	beq.n	800bd18 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd12:	68db      	ldr	r3, [r3, #12]
 800bd14:	68f8      	ldr	r0, [r7, #12]
 800bd16:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd18:	2180      	movs	r1, #128	; 0x80
 800bd1a:	68f8      	ldr	r0, [r7, #12]
 800bd1c:	f004 fb86 	bl	801042c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bd20:	68f8      	ldr	r0, [r7, #12]
 800bd22:	f000 ffbd 	bl	800cca0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d122      	bne.n	800bd76 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bd30:	68f8      	ldr	r0, [r7, #12]
 800bd32:	f7ff fe98 	bl	800ba66 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bd3e:	e01a      	b.n	800bd76 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd46:	b2db      	uxtb	r3, r3
 800bd48:	2b03      	cmp	r3, #3
 800bd4a:	d114      	bne.n	800bd76 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd52:	695b      	ldr	r3, [r3, #20]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d00e      	beq.n	800bd76 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd5e:	695b      	ldr	r3, [r3, #20]
 800bd60:	7afa      	ldrb	r2, [r7, #11]
 800bd62:	4611      	mov	r1, r2
 800bd64:	68f8      	ldr	r0, [r7, #12]
 800bd66:	4798      	blx	r3
 800bd68:	4603      	mov	r3, r0
 800bd6a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bd6c:	7dfb      	ldrb	r3, [r7, #23]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d001      	beq.n	800bd76 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800bd72:	7dfb      	ldrb	r3, [r7, #23]
 800bd74:	e000      	b.n	800bd78 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800bd76:	2300      	movs	r3, #0
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3718      	adds	r7, #24
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2200      	movs	r2, #0
 800bd94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2200      	movs	r2, #0
 800bda2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d101      	bne.n	800bdb4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800bdb0:	2303      	movs	r3, #3
 800bdb2:	e02f      	b.n	800be14 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d00f      	beq.n	800bdde <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d009      	beq.n	800bdde <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	687a      	ldr	r2, [r7, #4]
 800bdd4:	6852      	ldr	r2, [r2, #4]
 800bdd6:	b2d2      	uxtb	r2, r2
 800bdd8:	4611      	mov	r1, r2
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bdde:	2340      	movs	r3, #64	; 0x40
 800bde0:	2200      	movs	r2, #0
 800bde2:	2100      	movs	r1, #0
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f004 faad 	bl	8010344 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2201      	movs	r2, #1
 800bdee:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2240      	movs	r2, #64	; 0x40
 800bdf6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bdfa:	2340      	movs	r3, #64	; 0x40
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	2180      	movs	r1, #128	; 0x80
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f004 fa9f 	bl	8010344 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2201      	movs	r2, #1
 800be0a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2240      	movs	r2, #64	; 0x40
 800be10:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800be12:	2300      	movs	r3, #0
}
 800be14:	4618      	mov	r0, r3
 800be16:	3708      	adds	r7, #8
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b083      	sub	sp, #12
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	460b      	mov	r3, r1
 800be26:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	78fa      	ldrb	r2, [r7, #3]
 800be2c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800be2e:	2300      	movs	r3, #0
}
 800be30:	4618      	mov	r0, r3
 800be32:	370c      	adds	r7, #12
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr

0800be3c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b083      	sub	sp, #12
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be4a:	b2da      	uxtb	r2, r3
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2204      	movs	r2, #4
 800be56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800be5a:	2300      	movs	r3, #0
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	370c      	adds	r7, #12
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be76:	b2db      	uxtb	r3, r3
 800be78:	2b04      	cmp	r3, #4
 800be7a:	d106      	bne.n	800be8a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800be82:	b2da      	uxtb	r2, r3
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800be8a:	2300      	movs	r3, #0
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	370c      	adds	r7, #12
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr

0800be98 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d101      	bne.n	800beae <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800beaa:	2303      	movs	r3, #3
 800beac:	e012      	b.n	800bed4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800beb4:	b2db      	uxtb	r3, r3
 800beb6:	2b03      	cmp	r3, #3
 800beb8:	d10b      	bne.n	800bed2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bec0:	69db      	ldr	r3, [r3, #28]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d005      	beq.n	800bed2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800becc:	69db      	ldr	r3, [r3, #28]
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bed2:	2300      	movs	r3, #0
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3708      	adds	r7, #8
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}

0800bedc <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	460b      	mov	r3, r1
 800bee6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d101      	bne.n	800bef6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800bef2:	2303      	movs	r3, #3
 800bef4:	e014      	b.n	800bf20 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800befc:	b2db      	uxtb	r3, r3
 800befe:	2b03      	cmp	r3, #3
 800bf00:	d10d      	bne.n	800bf1e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf08:	6a1b      	ldr	r3, [r3, #32]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d007      	beq.n	800bf1e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf14:	6a1b      	ldr	r3, [r3, #32]
 800bf16:	78fa      	ldrb	r2, [r7, #3]
 800bf18:	4611      	mov	r1, r2
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bf1e:	2300      	movs	r3, #0
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3708      	adds	r7, #8
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	460b      	mov	r3, r1
 800bf32:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d101      	bne.n	800bf42 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800bf3e:	2303      	movs	r3, #3
 800bf40:	e014      	b.n	800bf6c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf48:	b2db      	uxtb	r3, r3
 800bf4a:	2b03      	cmp	r3, #3
 800bf4c:	d10d      	bne.n	800bf6a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d007      	beq.n	800bf6a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf62:	78fa      	ldrb	r2, [r7, #3]
 800bf64:	4611      	mov	r1, r2
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bf6a:	2300      	movs	r3, #0
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3708      	adds	r7, #8
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b083      	sub	sp, #12
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bf7c:	2300      	movs	r3, #0
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	370c      	adds	r7, #12
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr

0800bf8a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b082      	sub	sp, #8
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2201      	movs	r2, #1
 800bf96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d009      	beq.n	800bfb8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	6852      	ldr	r2, [r2, #4]
 800bfb0:	b2d2      	uxtb	r2, r2
 800bfb2:	4611      	mov	r1, r2
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	4798      	blx	r3
  }

  return USBD_OK;
 800bfb8:	2300      	movs	r3, #0
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3708      	adds	r7, #8
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}

0800bfc2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bfc2:	b480      	push	{r7}
 800bfc4:	b087      	sub	sp, #28
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bfe0:	8a3b      	ldrh	r3, [r7, #16]
 800bfe2:	021b      	lsls	r3, r3, #8
 800bfe4:	b21a      	sxth	r2, r3
 800bfe6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bfea:	4313      	orrs	r3, r2
 800bfec:	b21b      	sxth	r3, r3
 800bfee:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bff0:	89fb      	ldrh	r3, [r7, #14]
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	371c      	adds	r7, #28
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr
	...

0800c000 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c00a:	2300      	movs	r3, #0
 800c00c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c016:	2b40      	cmp	r3, #64	; 0x40
 800c018:	d005      	beq.n	800c026 <USBD_StdDevReq+0x26>
 800c01a:	2b40      	cmp	r3, #64	; 0x40
 800c01c:	d853      	bhi.n	800c0c6 <USBD_StdDevReq+0xc6>
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d00b      	beq.n	800c03a <USBD_StdDevReq+0x3a>
 800c022:	2b20      	cmp	r3, #32
 800c024:	d14f      	bne.n	800c0c6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c02c:	689b      	ldr	r3, [r3, #8]
 800c02e:	6839      	ldr	r1, [r7, #0]
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	4798      	blx	r3
 800c034:	4603      	mov	r3, r0
 800c036:	73fb      	strb	r3, [r7, #15]
      break;
 800c038:	e04a      	b.n	800c0d0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	785b      	ldrb	r3, [r3, #1]
 800c03e:	2b09      	cmp	r3, #9
 800c040:	d83b      	bhi.n	800c0ba <USBD_StdDevReq+0xba>
 800c042:	a201      	add	r2, pc, #4	; (adr r2, 800c048 <USBD_StdDevReq+0x48>)
 800c044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c048:	0800c09d 	.word	0x0800c09d
 800c04c:	0800c0b1 	.word	0x0800c0b1
 800c050:	0800c0bb 	.word	0x0800c0bb
 800c054:	0800c0a7 	.word	0x0800c0a7
 800c058:	0800c0bb 	.word	0x0800c0bb
 800c05c:	0800c07b 	.word	0x0800c07b
 800c060:	0800c071 	.word	0x0800c071
 800c064:	0800c0bb 	.word	0x0800c0bb
 800c068:	0800c093 	.word	0x0800c093
 800c06c:	0800c085 	.word	0x0800c085
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c070:	6839      	ldr	r1, [r7, #0]
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 f9de 	bl	800c434 <USBD_GetDescriptor>
          break;
 800c078:	e024      	b.n	800c0c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c07a:	6839      	ldr	r1, [r7, #0]
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f000 fb6d 	bl	800c75c <USBD_SetAddress>
          break;
 800c082:	e01f      	b.n	800c0c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c084:	6839      	ldr	r1, [r7, #0]
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 fbac 	bl	800c7e4 <USBD_SetConfig>
 800c08c:	4603      	mov	r3, r0
 800c08e:	73fb      	strb	r3, [r7, #15]
          break;
 800c090:	e018      	b.n	800c0c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c092:	6839      	ldr	r1, [r7, #0]
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 fc4b 	bl	800c930 <USBD_GetConfig>
          break;
 800c09a:	e013      	b.n	800c0c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c09c:	6839      	ldr	r1, [r7, #0]
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f000 fc7c 	bl	800c99c <USBD_GetStatus>
          break;
 800c0a4:	e00e      	b.n	800c0c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c0a6:	6839      	ldr	r1, [r7, #0]
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 fcab 	bl	800ca04 <USBD_SetFeature>
          break;
 800c0ae:	e009      	b.n	800c0c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c0b0:	6839      	ldr	r1, [r7, #0]
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 fcba 	bl	800ca2c <USBD_ClrFeature>
          break;
 800c0b8:	e004      	b.n	800c0c4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c0ba:	6839      	ldr	r1, [r7, #0]
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 fd11 	bl	800cae4 <USBD_CtlError>
          break;
 800c0c2:	bf00      	nop
      }
      break;
 800c0c4:	e004      	b.n	800c0d0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c0c6:	6839      	ldr	r1, [r7, #0]
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f000 fd0b 	bl	800cae4 <USBD_CtlError>
      break;
 800c0ce:	bf00      	nop
  }

  return ret;
 800c0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3710      	adds	r7, #16
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop

0800c0dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c0f2:	2b40      	cmp	r3, #64	; 0x40
 800c0f4:	d005      	beq.n	800c102 <USBD_StdItfReq+0x26>
 800c0f6:	2b40      	cmp	r3, #64	; 0x40
 800c0f8:	d82f      	bhi.n	800c15a <USBD_StdItfReq+0x7e>
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d001      	beq.n	800c102 <USBD_StdItfReq+0x26>
 800c0fe:	2b20      	cmp	r3, #32
 800c100:	d12b      	bne.n	800c15a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c108:	b2db      	uxtb	r3, r3
 800c10a:	3b01      	subs	r3, #1
 800c10c:	2b02      	cmp	r3, #2
 800c10e:	d81d      	bhi.n	800c14c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	889b      	ldrh	r3, [r3, #4]
 800c114:	b2db      	uxtb	r3, r3
 800c116:	2b01      	cmp	r3, #1
 800c118:	d813      	bhi.n	800c142 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c120:	689b      	ldr	r3, [r3, #8]
 800c122:	6839      	ldr	r1, [r7, #0]
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	4798      	blx	r3
 800c128:	4603      	mov	r3, r0
 800c12a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	88db      	ldrh	r3, [r3, #6]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d110      	bne.n	800c156 <USBD_StdItfReq+0x7a>
 800c134:	7bfb      	ldrb	r3, [r7, #15]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d10d      	bne.n	800c156 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f000 fd9d 	bl	800cc7a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c140:	e009      	b.n	800c156 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c142:	6839      	ldr	r1, [r7, #0]
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f000 fccd 	bl	800cae4 <USBD_CtlError>
          break;
 800c14a:	e004      	b.n	800c156 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c14c:	6839      	ldr	r1, [r7, #0]
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 fcc8 	bl	800cae4 <USBD_CtlError>
          break;
 800c154:	e000      	b.n	800c158 <USBD_StdItfReq+0x7c>
          break;
 800c156:	bf00      	nop
      }
      break;
 800c158:	e004      	b.n	800c164 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c15a:	6839      	ldr	r1, [r7, #0]
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f000 fcc1 	bl	800cae4 <USBD_CtlError>
      break;
 800c162:	bf00      	nop
  }

  return ret;
 800c164:	7bfb      	ldrb	r3, [r7, #15]
}
 800c166:	4618      	mov	r0, r3
 800c168:	3710      	adds	r7, #16
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}

0800c16e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c16e:	b580      	push	{r7, lr}
 800c170:	b084      	sub	sp, #16
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
 800c176:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c178:	2300      	movs	r3, #0
 800c17a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	889b      	ldrh	r3, [r3, #4]
 800c180:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c18a:	2b40      	cmp	r3, #64	; 0x40
 800c18c:	d007      	beq.n	800c19e <USBD_StdEPReq+0x30>
 800c18e:	2b40      	cmp	r3, #64	; 0x40
 800c190:	f200 8145 	bhi.w	800c41e <USBD_StdEPReq+0x2b0>
 800c194:	2b00      	cmp	r3, #0
 800c196:	d00c      	beq.n	800c1b2 <USBD_StdEPReq+0x44>
 800c198:	2b20      	cmp	r3, #32
 800c19a:	f040 8140 	bne.w	800c41e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1a4:	689b      	ldr	r3, [r3, #8]
 800c1a6:	6839      	ldr	r1, [r7, #0]
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	4798      	blx	r3
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	73fb      	strb	r3, [r7, #15]
      break;
 800c1b0:	e13a      	b.n	800c428 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	785b      	ldrb	r3, [r3, #1]
 800c1b6:	2b03      	cmp	r3, #3
 800c1b8:	d007      	beq.n	800c1ca <USBD_StdEPReq+0x5c>
 800c1ba:	2b03      	cmp	r3, #3
 800c1bc:	f300 8129 	bgt.w	800c412 <USBD_StdEPReq+0x2a4>
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d07f      	beq.n	800c2c4 <USBD_StdEPReq+0x156>
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d03c      	beq.n	800c242 <USBD_StdEPReq+0xd4>
 800c1c8:	e123      	b.n	800c412 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	2b02      	cmp	r3, #2
 800c1d4:	d002      	beq.n	800c1dc <USBD_StdEPReq+0x6e>
 800c1d6:	2b03      	cmp	r3, #3
 800c1d8:	d016      	beq.n	800c208 <USBD_StdEPReq+0x9a>
 800c1da:	e02c      	b.n	800c236 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1dc:	7bbb      	ldrb	r3, [r7, #14]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d00d      	beq.n	800c1fe <USBD_StdEPReq+0x90>
 800c1e2:	7bbb      	ldrb	r3, [r7, #14]
 800c1e4:	2b80      	cmp	r3, #128	; 0x80
 800c1e6:	d00a      	beq.n	800c1fe <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c1e8:	7bbb      	ldrb	r3, [r7, #14]
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f004 f91d 	bl	801042c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1f2:	2180      	movs	r1, #128	; 0x80
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f004 f919 	bl	801042c <USBD_LL_StallEP>
 800c1fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c1fc:	e020      	b.n	800c240 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c1fe:	6839      	ldr	r1, [r7, #0]
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 fc6f 	bl	800cae4 <USBD_CtlError>
              break;
 800c206:	e01b      	b.n	800c240 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	885b      	ldrh	r3, [r3, #2]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d10e      	bne.n	800c22e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c210:	7bbb      	ldrb	r3, [r7, #14]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d00b      	beq.n	800c22e <USBD_StdEPReq+0xc0>
 800c216:	7bbb      	ldrb	r3, [r7, #14]
 800c218:	2b80      	cmp	r3, #128	; 0x80
 800c21a:	d008      	beq.n	800c22e <USBD_StdEPReq+0xc0>
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	88db      	ldrh	r3, [r3, #6]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d104      	bne.n	800c22e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c224:	7bbb      	ldrb	r3, [r7, #14]
 800c226:	4619      	mov	r1, r3
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f004 f8ff 	bl	801042c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 fd23 	bl	800cc7a <USBD_CtlSendStatus>

              break;
 800c234:	e004      	b.n	800c240 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c236:	6839      	ldr	r1, [r7, #0]
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 fc53 	bl	800cae4 <USBD_CtlError>
              break;
 800c23e:	bf00      	nop
          }
          break;
 800c240:	e0ec      	b.n	800c41c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c248:	b2db      	uxtb	r3, r3
 800c24a:	2b02      	cmp	r3, #2
 800c24c:	d002      	beq.n	800c254 <USBD_StdEPReq+0xe6>
 800c24e:	2b03      	cmp	r3, #3
 800c250:	d016      	beq.n	800c280 <USBD_StdEPReq+0x112>
 800c252:	e030      	b.n	800c2b6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c254:	7bbb      	ldrb	r3, [r7, #14]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d00d      	beq.n	800c276 <USBD_StdEPReq+0x108>
 800c25a:	7bbb      	ldrb	r3, [r7, #14]
 800c25c:	2b80      	cmp	r3, #128	; 0x80
 800c25e:	d00a      	beq.n	800c276 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c260:	7bbb      	ldrb	r3, [r7, #14]
 800c262:	4619      	mov	r1, r3
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f004 f8e1 	bl	801042c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c26a:	2180      	movs	r1, #128	; 0x80
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f004 f8dd 	bl	801042c <USBD_LL_StallEP>
 800c272:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c274:	e025      	b.n	800c2c2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c276:	6839      	ldr	r1, [r7, #0]
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 fc33 	bl	800cae4 <USBD_CtlError>
              break;
 800c27e:	e020      	b.n	800c2c2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	885b      	ldrh	r3, [r3, #2]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d11b      	bne.n	800c2c0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c288:	7bbb      	ldrb	r3, [r7, #14]
 800c28a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d004      	beq.n	800c29c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c292:	7bbb      	ldrb	r3, [r7, #14]
 800c294:	4619      	mov	r1, r3
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f004 f8fe 	bl	8010498 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f000 fcec 	bl	800cc7a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2a8:	689b      	ldr	r3, [r3, #8]
 800c2aa:	6839      	ldr	r1, [r7, #0]
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	4798      	blx	r3
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c2b4:	e004      	b.n	800c2c0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c2b6:	6839      	ldr	r1, [r7, #0]
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f000 fc13 	bl	800cae4 <USBD_CtlError>
              break;
 800c2be:	e000      	b.n	800c2c2 <USBD_StdEPReq+0x154>
              break;
 800c2c0:	bf00      	nop
          }
          break;
 800c2c2:	e0ab      	b.n	800c41c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2ca:	b2db      	uxtb	r3, r3
 800c2cc:	2b02      	cmp	r3, #2
 800c2ce:	d002      	beq.n	800c2d6 <USBD_StdEPReq+0x168>
 800c2d0:	2b03      	cmp	r3, #3
 800c2d2:	d032      	beq.n	800c33a <USBD_StdEPReq+0x1cc>
 800c2d4:	e097      	b.n	800c406 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c2d6:	7bbb      	ldrb	r3, [r7, #14]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d007      	beq.n	800c2ec <USBD_StdEPReq+0x17e>
 800c2dc:	7bbb      	ldrb	r3, [r7, #14]
 800c2de:	2b80      	cmp	r3, #128	; 0x80
 800c2e0:	d004      	beq.n	800c2ec <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c2e2:	6839      	ldr	r1, [r7, #0]
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 fbfd 	bl	800cae4 <USBD_CtlError>
                break;
 800c2ea:	e091      	b.n	800c410 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	da0b      	bge.n	800c30c <USBD_StdEPReq+0x19e>
 800c2f4:	7bbb      	ldrb	r3, [r7, #14]
 800c2f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2fa:	4613      	mov	r3, r2
 800c2fc:	009b      	lsls	r3, r3, #2
 800c2fe:	4413      	add	r3, r2
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	3310      	adds	r3, #16
 800c304:	687a      	ldr	r2, [r7, #4]
 800c306:	4413      	add	r3, r2
 800c308:	3304      	adds	r3, #4
 800c30a:	e00b      	b.n	800c324 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c30c:	7bbb      	ldrb	r3, [r7, #14]
 800c30e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c312:	4613      	mov	r3, r2
 800c314:	009b      	lsls	r3, r3, #2
 800c316:	4413      	add	r3, r2
 800c318:	009b      	lsls	r3, r3, #2
 800c31a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	4413      	add	r3, r2
 800c322:	3304      	adds	r3, #4
 800c324:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	2200      	movs	r2, #0
 800c32a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	2202      	movs	r2, #2
 800c330:	4619      	mov	r1, r3
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	f000 fc47 	bl	800cbc6 <USBD_CtlSendData>
              break;
 800c338:	e06a      	b.n	800c410 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c33a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	da11      	bge.n	800c366 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c342:	7bbb      	ldrb	r3, [r7, #14]
 800c344:	f003 020f 	and.w	r2, r3, #15
 800c348:	6879      	ldr	r1, [r7, #4]
 800c34a:	4613      	mov	r3, r2
 800c34c:	009b      	lsls	r3, r3, #2
 800c34e:	4413      	add	r3, r2
 800c350:	009b      	lsls	r3, r3, #2
 800c352:	440b      	add	r3, r1
 800c354:	3324      	adds	r3, #36	; 0x24
 800c356:	881b      	ldrh	r3, [r3, #0]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d117      	bne.n	800c38c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c35c:	6839      	ldr	r1, [r7, #0]
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f000 fbc0 	bl	800cae4 <USBD_CtlError>
                  break;
 800c364:	e054      	b.n	800c410 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c366:	7bbb      	ldrb	r3, [r7, #14]
 800c368:	f003 020f 	and.w	r2, r3, #15
 800c36c:	6879      	ldr	r1, [r7, #4]
 800c36e:	4613      	mov	r3, r2
 800c370:	009b      	lsls	r3, r3, #2
 800c372:	4413      	add	r3, r2
 800c374:	009b      	lsls	r3, r3, #2
 800c376:	440b      	add	r3, r1
 800c378:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c37c:	881b      	ldrh	r3, [r3, #0]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d104      	bne.n	800c38c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c382:	6839      	ldr	r1, [r7, #0]
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f000 fbad 	bl	800cae4 <USBD_CtlError>
                  break;
 800c38a:	e041      	b.n	800c410 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c38c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c390:	2b00      	cmp	r3, #0
 800c392:	da0b      	bge.n	800c3ac <USBD_StdEPReq+0x23e>
 800c394:	7bbb      	ldrb	r3, [r7, #14]
 800c396:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c39a:	4613      	mov	r3, r2
 800c39c:	009b      	lsls	r3, r3, #2
 800c39e:	4413      	add	r3, r2
 800c3a0:	009b      	lsls	r3, r3, #2
 800c3a2:	3310      	adds	r3, #16
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	4413      	add	r3, r2
 800c3a8:	3304      	adds	r3, #4
 800c3aa:	e00b      	b.n	800c3c4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c3ac:	7bbb      	ldrb	r3, [r7, #14]
 800c3ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c3b2:	4613      	mov	r3, r2
 800c3b4:	009b      	lsls	r3, r3, #2
 800c3b6:	4413      	add	r3, r2
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	4413      	add	r3, r2
 800c3c2:	3304      	adds	r3, #4
 800c3c4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c3c6:	7bbb      	ldrb	r3, [r7, #14]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d002      	beq.n	800c3d2 <USBD_StdEPReq+0x264>
 800c3cc:	7bbb      	ldrb	r3, [r7, #14]
 800c3ce:	2b80      	cmp	r3, #128	; 0x80
 800c3d0:	d103      	bne.n	800c3da <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	601a      	str	r2, [r3, #0]
 800c3d8:	e00e      	b.n	800c3f8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c3da:	7bbb      	ldrb	r3, [r7, #14]
 800c3dc:	4619      	mov	r1, r3
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f004 f890 	bl	8010504 <USBD_LL_IsStallEP>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d003      	beq.n	800c3f2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	601a      	str	r2, [r3, #0]
 800c3f0:	e002      	b.n	800c3f8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	2202      	movs	r2, #2
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 fbe1 	bl	800cbc6 <USBD_CtlSendData>
              break;
 800c404:	e004      	b.n	800c410 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c406:	6839      	ldr	r1, [r7, #0]
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f000 fb6b 	bl	800cae4 <USBD_CtlError>
              break;
 800c40e:	bf00      	nop
          }
          break;
 800c410:	e004      	b.n	800c41c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c412:	6839      	ldr	r1, [r7, #0]
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f000 fb65 	bl	800cae4 <USBD_CtlError>
          break;
 800c41a:	bf00      	nop
      }
      break;
 800c41c:	e004      	b.n	800c428 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c41e:	6839      	ldr	r1, [r7, #0]
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f000 fb5f 	bl	800cae4 <USBD_CtlError>
      break;
 800c426:	bf00      	nop
  }

  return ret;
 800c428:	7bfb      	ldrb	r3, [r7, #15]
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3710      	adds	r7, #16
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
	...

0800c434 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b084      	sub	sp, #16
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c43e:	2300      	movs	r3, #0
 800c440:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c442:	2300      	movs	r3, #0
 800c444:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c446:	2300      	movs	r3, #0
 800c448:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	885b      	ldrh	r3, [r3, #2]
 800c44e:	0a1b      	lsrs	r3, r3, #8
 800c450:	b29b      	uxth	r3, r3
 800c452:	3b01      	subs	r3, #1
 800c454:	2b0e      	cmp	r3, #14
 800c456:	f200 8152 	bhi.w	800c6fe <USBD_GetDescriptor+0x2ca>
 800c45a:	a201      	add	r2, pc, #4	; (adr r2, 800c460 <USBD_GetDescriptor+0x2c>)
 800c45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c460:	0800c4d1 	.word	0x0800c4d1
 800c464:	0800c4e9 	.word	0x0800c4e9
 800c468:	0800c529 	.word	0x0800c529
 800c46c:	0800c6ff 	.word	0x0800c6ff
 800c470:	0800c6ff 	.word	0x0800c6ff
 800c474:	0800c69f 	.word	0x0800c69f
 800c478:	0800c6cb 	.word	0x0800c6cb
 800c47c:	0800c6ff 	.word	0x0800c6ff
 800c480:	0800c6ff 	.word	0x0800c6ff
 800c484:	0800c6ff 	.word	0x0800c6ff
 800c488:	0800c6ff 	.word	0x0800c6ff
 800c48c:	0800c6ff 	.word	0x0800c6ff
 800c490:	0800c6ff 	.word	0x0800c6ff
 800c494:	0800c6ff 	.word	0x0800c6ff
 800c498:	0800c49d 	.word	0x0800c49d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4a2:	69db      	ldr	r3, [r3, #28]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d00b      	beq.n	800c4c0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ae:	69db      	ldr	r3, [r3, #28]
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	7c12      	ldrb	r2, [r2, #16]
 800c4b4:	f107 0108 	add.w	r1, r7, #8
 800c4b8:	4610      	mov	r0, r2
 800c4ba:	4798      	blx	r3
 800c4bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4be:	e126      	b.n	800c70e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c4c0:	6839      	ldr	r1, [r7, #0]
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 fb0e 	bl	800cae4 <USBD_CtlError>
        err++;
 800c4c8:	7afb      	ldrb	r3, [r7, #11]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	72fb      	strb	r3, [r7, #11]
      break;
 800c4ce:	e11e      	b.n	800c70e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	7c12      	ldrb	r2, [r2, #16]
 800c4dc:	f107 0108 	add.w	r1, r7, #8
 800c4e0:	4610      	mov	r0, r2
 800c4e2:	4798      	blx	r3
 800c4e4:	60f8      	str	r0, [r7, #12]
      break;
 800c4e6:	e112      	b.n	800c70e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	7c1b      	ldrb	r3, [r3, #16]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d10d      	bne.n	800c50c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4f8:	f107 0208 	add.w	r2, r7, #8
 800c4fc:	4610      	mov	r0, r2
 800c4fe:	4798      	blx	r3
 800c500:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	3301      	adds	r3, #1
 800c506:	2202      	movs	r2, #2
 800c508:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c50a:	e100      	b.n	800c70e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c514:	f107 0208 	add.w	r2, r7, #8
 800c518:	4610      	mov	r0, r2
 800c51a:	4798      	blx	r3
 800c51c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	3301      	adds	r3, #1
 800c522:	2202      	movs	r2, #2
 800c524:	701a      	strb	r2, [r3, #0]
      break;
 800c526:	e0f2      	b.n	800c70e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	885b      	ldrh	r3, [r3, #2]
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	2b05      	cmp	r3, #5
 800c530:	f200 80ac 	bhi.w	800c68c <USBD_GetDescriptor+0x258>
 800c534:	a201      	add	r2, pc, #4	; (adr r2, 800c53c <USBD_GetDescriptor+0x108>)
 800c536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c53a:	bf00      	nop
 800c53c:	0800c555 	.word	0x0800c555
 800c540:	0800c589 	.word	0x0800c589
 800c544:	0800c5bd 	.word	0x0800c5bd
 800c548:	0800c5f1 	.word	0x0800c5f1
 800c54c:	0800c625 	.word	0x0800c625
 800c550:	0800c659 	.word	0x0800c659
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c55a:	685b      	ldr	r3, [r3, #4]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d00b      	beq.n	800c578 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	687a      	ldr	r2, [r7, #4]
 800c56a:	7c12      	ldrb	r2, [r2, #16]
 800c56c:	f107 0108 	add.w	r1, r7, #8
 800c570:	4610      	mov	r0, r2
 800c572:	4798      	blx	r3
 800c574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c576:	e091      	b.n	800c69c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c578:	6839      	ldr	r1, [r7, #0]
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 fab2 	bl	800cae4 <USBD_CtlError>
            err++;
 800c580:	7afb      	ldrb	r3, [r7, #11]
 800c582:	3301      	adds	r3, #1
 800c584:	72fb      	strb	r3, [r7, #11]
          break;
 800c586:	e089      	b.n	800c69c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c58e:	689b      	ldr	r3, [r3, #8]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d00b      	beq.n	800c5ac <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c59a:	689b      	ldr	r3, [r3, #8]
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	7c12      	ldrb	r2, [r2, #16]
 800c5a0:	f107 0108 	add.w	r1, r7, #8
 800c5a4:	4610      	mov	r0, r2
 800c5a6:	4798      	blx	r3
 800c5a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5aa:	e077      	b.n	800c69c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c5ac:	6839      	ldr	r1, [r7, #0]
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 fa98 	bl	800cae4 <USBD_CtlError>
            err++;
 800c5b4:	7afb      	ldrb	r3, [r7, #11]
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	72fb      	strb	r3, [r7, #11]
          break;
 800c5ba:	e06f      	b.n	800c69c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5c2:	68db      	ldr	r3, [r3, #12]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d00b      	beq.n	800c5e0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	7c12      	ldrb	r2, [r2, #16]
 800c5d4:	f107 0108 	add.w	r1, r7, #8
 800c5d8:	4610      	mov	r0, r2
 800c5da:	4798      	blx	r3
 800c5dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5de:	e05d      	b.n	800c69c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c5e0:	6839      	ldr	r1, [r7, #0]
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f000 fa7e 	bl	800cae4 <USBD_CtlError>
            err++;
 800c5e8:	7afb      	ldrb	r3, [r7, #11]
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	72fb      	strb	r3, [r7, #11]
          break;
 800c5ee:	e055      	b.n	800c69c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5f6:	691b      	ldr	r3, [r3, #16]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d00b      	beq.n	800c614 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c602:	691b      	ldr	r3, [r3, #16]
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	7c12      	ldrb	r2, [r2, #16]
 800c608:	f107 0108 	add.w	r1, r7, #8
 800c60c:	4610      	mov	r0, r2
 800c60e:	4798      	blx	r3
 800c610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c612:	e043      	b.n	800c69c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c614:	6839      	ldr	r1, [r7, #0]
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 fa64 	bl	800cae4 <USBD_CtlError>
            err++;
 800c61c:	7afb      	ldrb	r3, [r7, #11]
 800c61e:	3301      	adds	r3, #1
 800c620:	72fb      	strb	r3, [r7, #11]
          break;
 800c622:	e03b      	b.n	800c69c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c62a:	695b      	ldr	r3, [r3, #20]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d00b      	beq.n	800c648 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c636:	695b      	ldr	r3, [r3, #20]
 800c638:	687a      	ldr	r2, [r7, #4]
 800c63a:	7c12      	ldrb	r2, [r2, #16]
 800c63c:	f107 0108 	add.w	r1, r7, #8
 800c640:	4610      	mov	r0, r2
 800c642:	4798      	blx	r3
 800c644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c646:	e029      	b.n	800c69c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c648:	6839      	ldr	r1, [r7, #0]
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 fa4a 	bl	800cae4 <USBD_CtlError>
            err++;
 800c650:	7afb      	ldrb	r3, [r7, #11]
 800c652:	3301      	adds	r3, #1
 800c654:	72fb      	strb	r3, [r7, #11]
          break;
 800c656:	e021      	b.n	800c69c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c65e:	699b      	ldr	r3, [r3, #24]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d00b      	beq.n	800c67c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c66a:	699b      	ldr	r3, [r3, #24]
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	7c12      	ldrb	r2, [r2, #16]
 800c670:	f107 0108 	add.w	r1, r7, #8
 800c674:	4610      	mov	r0, r2
 800c676:	4798      	blx	r3
 800c678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c67a:	e00f      	b.n	800c69c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c67c:	6839      	ldr	r1, [r7, #0]
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f000 fa30 	bl	800cae4 <USBD_CtlError>
            err++;
 800c684:	7afb      	ldrb	r3, [r7, #11]
 800c686:	3301      	adds	r3, #1
 800c688:	72fb      	strb	r3, [r7, #11]
          break;
 800c68a:	e007      	b.n	800c69c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c68c:	6839      	ldr	r1, [r7, #0]
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 fa28 	bl	800cae4 <USBD_CtlError>
          err++;
 800c694:	7afb      	ldrb	r3, [r7, #11]
 800c696:	3301      	adds	r3, #1
 800c698:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c69a:	bf00      	nop
      }
      break;
 800c69c:	e037      	b.n	800c70e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	7c1b      	ldrb	r3, [r3, #16]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d109      	bne.n	800c6ba <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6ae:	f107 0208 	add.w	r2, r7, #8
 800c6b2:	4610      	mov	r0, r2
 800c6b4:	4798      	blx	r3
 800c6b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c6b8:	e029      	b.n	800c70e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c6ba:	6839      	ldr	r1, [r7, #0]
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 fa11 	bl	800cae4 <USBD_CtlError>
        err++;
 800c6c2:	7afb      	ldrb	r3, [r7, #11]
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	72fb      	strb	r3, [r7, #11]
      break;
 800c6c8:	e021      	b.n	800c70e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	7c1b      	ldrb	r3, [r3, #16]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d10d      	bne.n	800c6ee <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6da:	f107 0208 	add.w	r2, r7, #8
 800c6de:	4610      	mov	r0, r2
 800c6e0:	4798      	blx	r3
 800c6e2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	3301      	adds	r3, #1
 800c6e8:	2207      	movs	r2, #7
 800c6ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c6ec:	e00f      	b.n	800c70e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c6ee:	6839      	ldr	r1, [r7, #0]
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f000 f9f7 	bl	800cae4 <USBD_CtlError>
        err++;
 800c6f6:	7afb      	ldrb	r3, [r7, #11]
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	72fb      	strb	r3, [r7, #11]
      break;
 800c6fc:	e007      	b.n	800c70e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c6fe:	6839      	ldr	r1, [r7, #0]
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f000 f9ef 	bl	800cae4 <USBD_CtlError>
      err++;
 800c706:	7afb      	ldrb	r3, [r7, #11]
 800c708:	3301      	adds	r3, #1
 800c70a:	72fb      	strb	r3, [r7, #11]
      break;
 800c70c:	bf00      	nop
  }

  if (err != 0U)
 800c70e:	7afb      	ldrb	r3, [r7, #11]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d11e      	bne.n	800c752 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	88db      	ldrh	r3, [r3, #6]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d016      	beq.n	800c74a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c71c:	893b      	ldrh	r3, [r7, #8]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d00e      	beq.n	800c740 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	88da      	ldrh	r2, [r3, #6]
 800c726:	893b      	ldrh	r3, [r7, #8]
 800c728:	4293      	cmp	r3, r2
 800c72a:	bf28      	it	cs
 800c72c:	4613      	movcs	r3, r2
 800c72e:	b29b      	uxth	r3, r3
 800c730:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c732:	893b      	ldrh	r3, [r7, #8]
 800c734:	461a      	mov	r2, r3
 800c736:	68f9      	ldr	r1, [r7, #12]
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f000 fa44 	bl	800cbc6 <USBD_CtlSendData>
 800c73e:	e009      	b.n	800c754 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c740:	6839      	ldr	r1, [r7, #0]
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f000 f9ce 	bl	800cae4 <USBD_CtlError>
 800c748:	e004      	b.n	800c754 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 fa95 	bl	800cc7a <USBD_CtlSendStatus>
 800c750:	e000      	b.n	800c754 <USBD_GetDescriptor+0x320>
    return;
 800c752:	bf00      	nop
  }
}
 800c754:	3710      	adds	r7, #16
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	bf00      	nop

0800c75c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b084      	sub	sp, #16
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	889b      	ldrh	r3, [r3, #4]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d131      	bne.n	800c7d2 <USBD_SetAddress+0x76>
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	88db      	ldrh	r3, [r3, #6]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d12d      	bne.n	800c7d2 <USBD_SetAddress+0x76>
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	885b      	ldrh	r3, [r3, #2]
 800c77a:	2b7f      	cmp	r3, #127	; 0x7f
 800c77c:	d829      	bhi.n	800c7d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	885b      	ldrh	r3, [r3, #2]
 800c782:	b2db      	uxtb	r3, r3
 800c784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c788:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c790:	b2db      	uxtb	r3, r3
 800c792:	2b03      	cmp	r3, #3
 800c794:	d104      	bne.n	800c7a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c796:	6839      	ldr	r1, [r7, #0]
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f000 f9a3 	bl	800cae4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c79e:	e01d      	b.n	800c7dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	7bfa      	ldrb	r2, [r7, #15]
 800c7a4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c7a8:	7bfb      	ldrb	r3, [r7, #15]
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f003 fed5 	bl	801055c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 fa61 	bl	800cc7a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c7b8:	7bfb      	ldrb	r3, [r7, #15]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d004      	beq.n	800c7c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2202      	movs	r2, #2
 800c7c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7c6:	e009      	b.n	800c7dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7d0:	e004      	b.n	800c7dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c7d2:	6839      	ldr	r1, [r7, #0]
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f000 f985 	bl	800cae4 <USBD_CtlError>
  }
}
 800c7da:	bf00      	nop
 800c7dc:	bf00      	nop
 800c7de:	3710      	adds	r7, #16
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b084      	sub	sp, #16
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	885b      	ldrh	r3, [r3, #2]
 800c7f6:	b2da      	uxtb	r2, r3
 800c7f8:	4b4c      	ldr	r3, [pc, #304]	; (800c92c <USBD_SetConfig+0x148>)
 800c7fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c7fc:	4b4b      	ldr	r3, [pc, #300]	; (800c92c <USBD_SetConfig+0x148>)
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	2b01      	cmp	r3, #1
 800c802:	d905      	bls.n	800c810 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c804:	6839      	ldr	r1, [r7, #0]
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f000 f96c 	bl	800cae4 <USBD_CtlError>
    return USBD_FAIL;
 800c80c:	2303      	movs	r3, #3
 800c80e:	e088      	b.n	800c922 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c816:	b2db      	uxtb	r3, r3
 800c818:	2b02      	cmp	r3, #2
 800c81a:	d002      	beq.n	800c822 <USBD_SetConfig+0x3e>
 800c81c:	2b03      	cmp	r3, #3
 800c81e:	d025      	beq.n	800c86c <USBD_SetConfig+0x88>
 800c820:	e071      	b.n	800c906 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c822:	4b42      	ldr	r3, [pc, #264]	; (800c92c <USBD_SetConfig+0x148>)
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d01c      	beq.n	800c864 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c82a:	4b40      	ldr	r3, [pc, #256]	; (800c92c <USBD_SetConfig+0x148>)
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	461a      	mov	r2, r3
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c834:	4b3d      	ldr	r3, [pc, #244]	; (800c92c <USBD_SetConfig+0x148>)
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	4619      	mov	r1, r3
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f7ff f91e 	bl	800ba7c <USBD_SetClassConfig>
 800c840:	4603      	mov	r3, r0
 800c842:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c844:	7bfb      	ldrb	r3, [r7, #15]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d004      	beq.n	800c854 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c84a:	6839      	ldr	r1, [r7, #0]
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 f949 	bl	800cae4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c852:	e065      	b.n	800c920 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 fa10 	bl	800cc7a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2203      	movs	r2, #3
 800c85e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c862:	e05d      	b.n	800c920 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f000 fa08 	bl	800cc7a <USBD_CtlSendStatus>
      break;
 800c86a:	e059      	b.n	800c920 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c86c:	4b2f      	ldr	r3, [pc, #188]	; (800c92c <USBD_SetConfig+0x148>)
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d112      	bne.n	800c89a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2202      	movs	r2, #2
 800c878:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c87c:	4b2b      	ldr	r3, [pc, #172]	; (800c92c <USBD_SetConfig+0x148>)
 800c87e:	781b      	ldrb	r3, [r3, #0]
 800c880:	461a      	mov	r2, r3
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c886:	4b29      	ldr	r3, [pc, #164]	; (800c92c <USBD_SetConfig+0x148>)
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	4619      	mov	r1, r3
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f7ff f911 	bl	800bab4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 f9f1 	bl	800cc7a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c898:	e042      	b.n	800c920 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c89a:	4b24      	ldr	r3, [pc, #144]	; (800c92c <USBD_SetConfig+0x148>)
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	461a      	mov	r2, r3
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d02a      	beq.n	800c8fe <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	b2db      	uxtb	r3, r3
 800c8ae:	4619      	mov	r1, r3
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f7ff f8ff 	bl	800bab4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c8b6:	4b1d      	ldr	r3, [pc, #116]	; (800c92c <USBD_SetConfig+0x148>)
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c8c0:	4b1a      	ldr	r3, [pc, #104]	; (800c92c <USBD_SetConfig+0x148>)
 800c8c2:	781b      	ldrb	r3, [r3, #0]
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f7ff f8d8 	bl	800ba7c <USBD_SetClassConfig>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c8d0:	7bfb      	ldrb	r3, [r7, #15]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d00f      	beq.n	800c8f6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c8d6:	6839      	ldr	r1, [r7, #0]
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 f903 	bl	800cae4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f7ff f8e4 	bl	800bab4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2202      	movs	r2, #2
 800c8f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c8f4:	e014      	b.n	800c920 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f000 f9bf 	bl	800cc7a <USBD_CtlSendStatus>
      break;
 800c8fc:	e010      	b.n	800c920 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 f9bb 	bl	800cc7a <USBD_CtlSendStatus>
      break;
 800c904:	e00c      	b.n	800c920 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c906:	6839      	ldr	r1, [r7, #0]
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f000 f8eb 	bl	800cae4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c90e:	4b07      	ldr	r3, [pc, #28]	; (800c92c <USBD_SetConfig+0x148>)
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	4619      	mov	r1, r3
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f7ff f8cd 	bl	800bab4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c91a:	2303      	movs	r3, #3
 800c91c:	73fb      	strb	r3, [r7, #15]
      break;
 800c91e:	bf00      	nop
  }

  return ret;
 800c920:	7bfb      	ldrb	r3, [r7, #15]
}
 800c922:	4618      	mov	r0, r3
 800c924:	3710      	adds	r7, #16
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}
 800c92a:	bf00      	nop
 800c92c:	20000974 	.word	0x20000974

0800c930 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	88db      	ldrh	r3, [r3, #6]
 800c93e:	2b01      	cmp	r3, #1
 800c940:	d004      	beq.n	800c94c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c942:	6839      	ldr	r1, [r7, #0]
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f000 f8cd 	bl	800cae4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c94a:	e023      	b.n	800c994 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c952:	b2db      	uxtb	r3, r3
 800c954:	2b02      	cmp	r3, #2
 800c956:	dc02      	bgt.n	800c95e <USBD_GetConfig+0x2e>
 800c958:	2b00      	cmp	r3, #0
 800c95a:	dc03      	bgt.n	800c964 <USBD_GetConfig+0x34>
 800c95c:	e015      	b.n	800c98a <USBD_GetConfig+0x5a>
 800c95e:	2b03      	cmp	r3, #3
 800c960:	d00b      	beq.n	800c97a <USBD_GetConfig+0x4a>
 800c962:	e012      	b.n	800c98a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	3308      	adds	r3, #8
 800c96e:	2201      	movs	r2, #1
 800c970:	4619      	mov	r1, r3
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f000 f927 	bl	800cbc6 <USBD_CtlSendData>
        break;
 800c978:	e00c      	b.n	800c994 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	3304      	adds	r3, #4
 800c97e:	2201      	movs	r2, #1
 800c980:	4619      	mov	r1, r3
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f000 f91f 	bl	800cbc6 <USBD_CtlSendData>
        break;
 800c988:	e004      	b.n	800c994 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c98a:	6839      	ldr	r1, [r7, #0]
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f000 f8a9 	bl	800cae4 <USBD_CtlError>
        break;
 800c992:	bf00      	nop
}
 800c994:	bf00      	nop
 800c996:	3708      	adds	r7, #8
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b082      	sub	sp, #8
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
 800c9a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	3b01      	subs	r3, #1
 800c9b0:	2b02      	cmp	r3, #2
 800c9b2:	d81e      	bhi.n	800c9f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	88db      	ldrh	r3, [r3, #6]
 800c9b8:	2b02      	cmp	r3, #2
 800c9ba:	d004      	beq.n	800c9c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c9bc:	6839      	ldr	r1, [r7, #0]
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f000 f890 	bl	800cae4 <USBD_CtlError>
        break;
 800c9c4:	e01a      	b.n	800c9fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d005      	beq.n	800c9e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	68db      	ldr	r3, [r3, #12]
 800c9da:	f043 0202 	orr.w	r2, r3, #2
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	330c      	adds	r3, #12
 800c9e6:	2202      	movs	r2, #2
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f000 f8eb 	bl	800cbc6 <USBD_CtlSendData>
      break;
 800c9f0:	e004      	b.n	800c9fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c9f2:	6839      	ldr	r1, [r7, #0]
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 f875 	bl	800cae4 <USBD_CtlError>
      break;
 800c9fa:	bf00      	nop
  }
}
 800c9fc:	bf00      	nop
 800c9fe:	3708      	adds	r7, #8
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	885b      	ldrh	r3, [r3, #2]
 800ca12:	2b01      	cmp	r3, #1
 800ca14:	d106      	bne.n	800ca24 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2201      	movs	r2, #1
 800ca1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 f92b 	bl	800cc7a <USBD_CtlSendStatus>
  }
}
 800ca24:	bf00      	nop
 800ca26:	3708      	adds	r7, #8
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b082      	sub	sp, #8
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
 800ca34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	3b01      	subs	r3, #1
 800ca40:	2b02      	cmp	r3, #2
 800ca42:	d80b      	bhi.n	800ca5c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	885b      	ldrh	r3, [r3, #2]
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	d10c      	bne.n	800ca66 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f000 f910 	bl	800cc7a <USBD_CtlSendStatus>
      }
      break;
 800ca5a:	e004      	b.n	800ca66 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ca5c:	6839      	ldr	r1, [r7, #0]
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f000 f840 	bl	800cae4 <USBD_CtlError>
      break;
 800ca64:	e000      	b.n	800ca68 <USBD_ClrFeature+0x3c>
      break;
 800ca66:	bf00      	nop
  }
}
 800ca68:	bf00      	nop
 800ca6a:	3708      	adds	r7, #8
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b084      	sub	sp, #16
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	781a      	ldrb	r2, [r3, #0]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	3301      	adds	r3, #1
 800ca8a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	781a      	ldrb	r2, [r3, #0]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	3301      	adds	r3, #1
 800ca98:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ca9a:	68f8      	ldr	r0, [r7, #12]
 800ca9c:	f7ff fa91 	bl	800bfc2 <SWAPBYTE>
 800caa0:	4603      	mov	r3, r0
 800caa2:	461a      	mov	r2, r3
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	3301      	adds	r3, #1
 800caac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	3301      	adds	r3, #1
 800cab2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cab4:	68f8      	ldr	r0, [r7, #12]
 800cab6:	f7ff fa84 	bl	800bfc2 <SWAPBYTE>
 800caba:	4603      	mov	r3, r0
 800cabc:	461a      	mov	r2, r3
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	3301      	adds	r3, #1
 800cac6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	3301      	adds	r3, #1
 800cacc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cace:	68f8      	ldr	r0, [r7, #12]
 800cad0:	f7ff fa77 	bl	800bfc2 <SWAPBYTE>
 800cad4:	4603      	mov	r3, r0
 800cad6:	461a      	mov	r2, r3
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	80da      	strh	r2, [r3, #6]
}
 800cadc:	bf00      	nop
 800cade:	3710      	adds	r7, #16
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b082      	sub	sp, #8
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800caee:	2180      	movs	r1, #128	; 0x80
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f003 fc9b 	bl	801042c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800caf6:	2100      	movs	r1, #0
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f003 fc97 	bl	801042c <USBD_LL_StallEP>
}
 800cafe:	bf00      	nop
 800cb00:	3708      	adds	r7, #8
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}

0800cb06 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b086      	sub	sp, #24
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	60f8      	str	r0, [r7, #12]
 800cb0e:	60b9      	str	r1, [r7, #8]
 800cb10:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cb12:	2300      	movs	r3, #0
 800cb14:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d036      	beq.n	800cb8a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cb20:	6938      	ldr	r0, [r7, #16]
 800cb22:	f000 f836 	bl	800cb92 <USBD_GetLen>
 800cb26:	4603      	mov	r3, r0
 800cb28:	3301      	adds	r3, #1
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	005b      	lsls	r3, r3, #1
 800cb2e:	b29a      	uxth	r2, r3
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cb34:	7dfb      	ldrb	r3, [r7, #23]
 800cb36:	68ba      	ldr	r2, [r7, #8]
 800cb38:	4413      	add	r3, r2
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	7812      	ldrb	r2, [r2, #0]
 800cb3e:	701a      	strb	r2, [r3, #0]
  idx++;
 800cb40:	7dfb      	ldrb	r3, [r7, #23]
 800cb42:	3301      	adds	r3, #1
 800cb44:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cb46:	7dfb      	ldrb	r3, [r7, #23]
 800cb48:	68ba      	ldr	r2, [r7, #8]
 800cb4a:	4413      	add	r3, r2
 800cb4c:	2203      	movs	r2, #3
 800cb4e:	701a      	strb	r2, [r3, #0]
  idx++;
 800cb50:	7dfb      	ldrb	r3, [r7, #23]
 800cb52:	3301      	adds	r3, #1
 800cb54:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cb56:	e013      	b.n	800cb80 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cb58:	7dfb      	ldrb	r3, [r7, #23]
 800cb5a:	68ba      	ldr	r2, [r7, #8]
 800cb5c:	4413      	add	r3, r2
 800cb5e:	693a      	ldr	r2, [r7, #16]
 800cb60:	7812      	ldrb	r2, [r2, #0]
 800cb62:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	3301      	adds	r3, #1
 800cb68:	613b      	str	r3, [r7, #16]
    idx++;
 800cb6a:	7dfb      	ldrb	r3, [r7, #23]
 800cb6c:	3301      	adds	r3, #1
 800cb6e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cb70:	7dfb      	ldrb	r3, [r7, #23]
 800cb72:	68ba      	ldr	r2, [r7, #8]
 800cb74:	4413      	add	r3, r2
 800cb76:	2200      	movs	r2, #0
 800cb78:	701a      	strb	r2, [r3, #0]
    idx++;
 800cb7a:	7dfb      	ldrb	r3, [r7, #23]
 800cb7c:	3301      	adds	r3, #1
 800cb7e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d1e7      	bne.n	800cb58 <USBD_GetString+0x52>
 800cb88:	e000      	b.n	800cb8c <USBD_GetString+0x86>
    return;
 800cb8a:	bf00      	nop
  }
}
 800cb8c:	3718      	adds	r7, #24
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}

0800cb92 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cb92:	b480      	push	{r7}
 800cb94:	b085      	sub	sp, #20
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cba2:	e005      	b.n	800cbb0 <USBD_GetLen+0x1e>
  {
    len++;
 800cba4:	7bfb      	ldrb	r3, [r7, #15]
 800cba6:	3301      	adds	r3, #1
 800cba8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	3301      	adds	r3, #1
 800cbae:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	781b      	ldrb	r3, [r3, #0]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d1f5      	bne.n	800cba4 <USBD_GetLen+0x12>
  }

  return len;
 800cbb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	3714      	adds	r7, #20
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc4:	4770      	bx	lr

0800cbc6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cbc6:	b580      	push	{r7, lr}
 800cbc8:	b084      	sub	sp, #16
 800cbca:	af00      	add	r7, sp, #0
 800cbcc:	60f8      	str	r0, [r7, #12]
 800cbce:	60b9      	str	r1, [r7, #8]
 800cbd0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	2202      	movs	r2, #2
 800cbd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	687a      	ldr	r2, [r7, #4]
 800cbe4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	68ba      	ldr	r2, [r7, #8]
 800cbea:	2100      	movs	r1, #0
 800cbec:	68f8      	ldr	r0, [r7, #12]
 800cbee:	f003 fceb 	bl	80105c8 <USBD_LL_Transmit>

  return USBD_OK;
 800cbf2:	2300      	movs	r3, #0
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3710      	adds	r7, #16
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	60f8      	str	r0, [r7, #12]
 800cc04:	60b9      	str	r1, [r7, #8]
 800cc06:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	68ba      	ldr	r2, [r7, #8]
 800cc0c:	2100      	movs	r1, #0
 800cc0e:	68f8      	ldr	r0, [r7, #12]
 800cc10:	f003 fcda 	bl	80105c8 <USBD_LL_Transmit>

  return USBD_OK;
 800cc14:	2300      	movs	r3, #0
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3710      	adds	r7, #16
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}

0800cc1e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b084      	sub	sp, #16
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	60f8      	str	r0, [r7, #12]
 800cc26:	60b9      	str	r1, [r7, #8]
 800cc28:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	2203      	movs	r2, #3
 800cc2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	687a      	ldr	r2, [r7, #4]
 800cc36:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	687a      	ldr	r2, [r7, #4]
 800cc3e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	68ba      	ldr	r2, [r7, #8]
 800cc46:	2100      	movs	r1, #0
 800cc48:	68f8      	ldr	r0, [r7, #12]
 800cc4a:	f003 fcf5 	bl	8010638 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc4e:	2300      	movs	r3, #0
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3710      	adds	r7, #16
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b084      	sub	sp, #16
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	60f8      	str	r0, [r7, #12]
 800cc60:	60b9      	str	r1, [r7, #8]
 800cc62:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	68ba      	ldr	r2, [r7, #8]
 800cc68:	2100      	movs	r1, #0
 800cc6a:	68f8      	ldr	r0, [r7, #12]
 800cc6c:	f003 fce4 	bl	8010638 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc70:	2300      	movs	r3, #0
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3710      	adds	r7, #16
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}

0800cc7a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cc7a:	b580      	push	{r7, lr}
 800cc7c:	b082      	sub	sp, #8
 800cc7e:	af00      	add	r7, sp, #0
 800cc80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2204      	movs	r2, #4
 800cc86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	2100      	movs	r1, #0
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f003 fc99 	bl	80105c8 <USBD_LL_Transmit>

  return USBD_OK;
 800cc96:	2300      	movs	r3, #0
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3708      	adds	r7, #8
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}

0800cca0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b082      	sub	sp, #8
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2205      	movs	r2, #5
 800ccac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	2100      	movs	r1, #0
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f003 fcbe 	bl	8010638 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ccbc:	2300      	movs	r3, #0
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3708      	adds	r7, #8
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
	...

0800ccc8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	4603      	mov	r3, r0
 800ccd0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ccd2:	79fb      	ldrb	r3, [r7, #7]
 800ccd4:	4a08      	ldr	r2, [pc, #32]	; (800ccf8 <disk_status+0x30>)
 800ccd6:	009b      	lsls	r3, r3, #2
 800ccd8:	4413      	add	r3, r2
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	685b      	ldr	r3, [r3, #4]
 800ccde:	79fa      	ldrb	r2, [r7, #7]
 800cce0:	4905      	ldr	r1, [pc, #20]	; (800ccf8 <disk_status+0x30>)
 800cce2:	440a      	add	r2, r1
 800cce4:	7a12      	ldrb	r2, [r2, #8]
 800cce6:	4610      	mov	r0, r2
 800cce8:	4798      	blx	r3
 800ccea:	4603      	mov	r3, r0
 800ccec:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ccee:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3710      	adds	r7, #16
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}
 800ccf8:	200009a0 	.word	0x200009a0

0800ccfc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	4603      	mov	r3, r0
 800cd04:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cd06:	2300      	movs	r3, #0
 800cd08:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cd0a:	79fb      	ldrb	r3, [r7, #7]
 800cd0c:	4a0d      	ldr	r2, [pc, #52]	; (800cd44 <disk_initialize+0x48>)
 800cd0e:	5cd3      	ldrb	r3, [r2, r3]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d111      	bne.n	800cd38 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800cd14:	79fb      	ldrb	r3, [r7, #7]
 800cd16:	4a0b      	ldr	r2, [pc, #44]	; (800cd44 <disk_initialize+0x48>)
 800cd18:	2101      	movs	r1, #1
 800cd1a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cd1c:	79fb      	ldrb	r3, [r7, #7]
 800cd1e:	4a09      	ldr	r2, [pc, #36]	; (800cd44 <disk_initialize+0x48>)
 800cd20:	009b      	lsls	r3, r3, #2
 800cd22:	4413      	add	r3, r2
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	79fa      	ldrb	r2, [r7, #7]
 800cd2a:	4906      	ldr	r1, [pc, #24]	; (800cd44 <disk_initialize+0x48>)
 800cd2c:	440a      	add	r2, r1
 800cd2e:	7a12      	ldrb	r2, [r2, #8]
 800cd30:	4610      	mov	r0, r2
 800cd32:	4798      	blx	r3
 800cd34:	4603      	mov	r3, r0
 800cd36:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cd38:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3710      	adds	r7, #16
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
 800cd42:	bf00      	nop
 800cd44:	200009a0 	.word	0x200009a0

0800cd48 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cd48:	b590      	push	{r4, r7, lr}
 800cd4a:	b087      	sub	sp, #28
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	60b9      	str	r1, [r7, #8]
 800cd50:	607a      	str	r2, [r7, #4]
 800cd52:	603b      	str	r3, [r7, #0]
 800cd54:	4603      	mov	r3, r0
 800cd56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cd58:	7bfb      	ldrb	r3, [r7, #15]
 800cd5a:	4a0a      	ldr	r2, [pc, #40]	; (800cd84 <disk_read+0x3c>)
 800cd5c:	009b      	lsls	r3, r3, #2
 800cd5e:	4413      	add	r3, r2
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	689c      	ldr	r4, [r3, #8]
 800cd64:	7bfb      	ldrb	r3, [r7, #15]
 800cd66:	4a07      	ldr	r2, [pc, #28]	; (800cd84 <disk_read+0x3c>)
 800cd68:	4413      	add	r3, r2
 800cd6a:	7a18      	ldrb	r0, [r3, #8]
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	687a      	ldr	r2, [r7, #4]
 800cd70:	68b9      	ldr	r1, [r7, #8]
 800cd72:	47a0      	blx	r4
 800cd74:	4603      	mov	r3, r0
 800cd76:	75fb      	strb	r3, [r7, #23]
  return res;
 800cd78:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	371c      	adds	r7, #28
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd90      	pop	{r4, r7, pc}
 800cd82:	bf00      	nop
 800cd84:	200009a0 	.word	0x200009a0

0800cd88 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cd88:	b590      	push	{r4, r7, lr}
 800cd8a:	b087      	sub	sp, #28
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	60b9      	str	r1, [r7, #8]
 800cd90:	607a      	str	r2, [r7, #4]
 800cd92:	603b      	str	r3, [r7, #0]
 800cd94:	4603      	mov	r3, r0
 800cd96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cd98:	7bfb      	ldrb	r3, [r7, #15]
 800cd9a:	4a0a      	ldr	r2, [pc, #40]	; (800cdc4 <disk_write+0x3c>)
 800cd9c:	009b      	lsls	r3, r3, #2
 800cd9e:	4413      	add	r3, r2
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	68dc      	ldr	r4, [r3, #12]
 800cda4:	7bfb      	ldrb	r3, [r7, #15]
 800cda6:	4a07      	ldr	r2, [pc, #28]	; (800cdc4 <disk_write+0x3c>)
 800cda8:	4413      	add	r3, r2
 800cdaa:	7a18      	ldrb	r0, [r3, #8]
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	687a      	ldr	r2, [r7, #4]
 800cdb0:	68b9      	ldr	r1, [r7, #8]
 800cdb2:	47a0      	blx	r4
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	75fb      	strb	r3, [r7, #23]
  return res;
 800cdb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	371c      	adds	r7, #28
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd90      	pop	{r4, r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	200009a0 	.word	0x200009a0

0800cdc8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b084      	sub	sp, #16
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	4603      	mov	r3, r0
 800cdd0:	603a      	str	r2, [r7, #0]
 800cdd2:	71fb      	strb	r3, [r7, #7]
 800cdd4:	460b      	mov	r3, r1
 800cdd6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cdd8:	79fb      	ldrb	r3, [r7, #7]
 800cdda:	4a09      	ldr	r2, [pc, #36]	; (800ce00 <disk_ioctl+0x38>)
 800cddc:	009b      	lsls	r3, r3, #2
 800cdde:	4413      	add	r3, r2
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	691b      	ldr	r3, [r3, #16]
 800cde4:	79fa      	ldrb	r2, [r7, #7]
 800cde6:	4906      	ldr	r1, [pc, #24]	; (800ce00 <disk_ioctl+0x38>)
 800cde8:	440a      	add	r2, r1
 800cdea:	7a10      	ldrb	r0, [r2, #8]
 800cdec:	79b9      	ldrb	r1, [r7, #6]
 800cdee:	683a      	ldr	r2, [r7, #0]
 800cdf0:	4798      	blx	r3
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	73fb      	strb	r3, [r7, #15]
  return res;
 800cdf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3710      	adds	r7, #16
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}
 800ce00:	200009a0 	.word	0x200009a0

0800ce04 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ce04:	b480      	push	{r7}
 800ce06:	b085      	sub	sp, #20
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	3301      	adds	r3, #1
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ce14:	89fb      	ldrh	r3, [r7, #14]
 800ce16:	021b      	lsls	r3, r3, #8
 800ce18:	b21a      	sxth	r2, r3
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	b21b      	sxth	r3, r3
 800ce20:	4313      	orrs	r3, r2
 800ce22:	b21b      	sxth	r3, r3
 800ce24:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ce26:	89fb      	ldrh	r3, [r7, #14]
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3714      	adds	r7, #20
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr

0800ce34 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ce34:	b480      	push	{r7}
 800ce36:	b085      	sub	sp, #20
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	3303      	adds	r3, #3
 800ce40:	781b      	ldrb	r3, [r3, #0]
 800ce42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	021b      	lsls	r3, r3, #8
 800ce48:	687a      	ldr	r2, [r7, #4]
 800ce4a:	3202      	adds	r2, #2
 800ce4c:	7812      	ldrb	r2, [r2, #0]
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	021b      	lsls	r3, r3, #8
 800ce56:	687a      	ldr	r2, [r7, #4]
 800ce58:	3201      	adds	r2, #1
 800ce5a:	7812      	ldrb	r2, [r2, #0]
 800ce5c:	4313      	orrs	r3, r2
 800ce5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	021b      	lsls	r3, r3, #8
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	7812      	ldrb	r2, [r2, #0]
 800ce68:	4313      	orrs	r3, r2
 800ce6a:	60fb      	str	r3, [r7, #12]
	return rv;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3714      	adds	r7, #20
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr

0800ce7a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ce7a:	b480      	push	{r7}
 800ce7c:	b083      	sub	sp, #12
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	6078      	str	r0, [r7, #4]
 800ce82:	460b      	mov	r3, r1
 800ce84:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	1c5a      	adds	r2, r3, #1
 800ce8a:	607a      	str	r2, [r7, #4]
 800ce8c:	887a      	ldrh	r2, [r7, #2]
 800ce8e:	b2d2      	uxtb	r2, r2
 800ce90:	701a      	strb	r2, [r3, #0]
 800ce92:	887b      	ldrh	r3, [r7, #2]
 800ce94:	0a1b      	lsrs	r3, r3, #8
 800ce96:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	1c5a      	adds	r2, r3, #1
 800ce9c:	607a      	str	r2, [r7, #4]
 800ce9e:	887a      	ldrh	r2, [r7, #2]
 800cea0:	b2d2      	uxtb	r2, r2
 800cea2:	701a      	strb	r2, [r3, #0]
}
 800cea4:	bf00      	nop
 800cea6:	370c      	adds	r7, #12
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr

0800ceb0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b083      	sub	sp, #12
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	1c5a      	adds	r2, r3, #1
 800cebe:	607a      	str	r2, [r7, #4]
 800cec0:	683a      	ldr	r2, [r7, #0]
 800cec2:	b2d2      	uxtb	r2, r2
 800cec4:	701a      	strb	r2, [r3, #0]
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	0a1b      	lsrs	r3, r3, #8
 800ceca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	1c5a      	adds	r2, r3, #1
 800ced0:	607a      	str	r2, [r7, #4]
 800ced2:	683a      	ldr	r2, [r7, #0]
 800ced4:	b2d2      	uxtb	r2, r2
 800ced6:	701a      	strb	r2, [r3, #0]
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	0a1b      	lsrs	r3, r3, #8
 800cedc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	1c5a      	adds	r2, r3, #1
 800cee2:	607a      	str	r2, [r7, #4]
 800cee4:	683a      	ldr	r2, [r7, #0]
 800cee6:	b2d2      	uxtb	r2, r2
 800cee8:	701a      	strb	r2, [r3, #0]
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	0a1b      	lsrs	r3, r3, #8
 800ceee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	1c5a      	adds	r2, r3, #1
 800cef4:	607a      	str	r2, [r7, #4]
 800cef6:	683a      	ldr	r2, [r7, #0]
 800cef8:	b2d2      	uxtb	r2, r2
 800cefa:	701a      	strb	r2, [r3, #0]
}
 800cefc:	bf00      	nop
 800cefe:	370c      	adds	r7, #12
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr

0800cf08 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cf08:	b480      	push	{r7}
 800cf0a:	b087      	sub	sp, #28
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	60f8      	str	r0, [r7, #12]
 800cf10:	60b9      	str	r1, [r7, #8]
 800cf12:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d00d      	beq.n	800cf3e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cf22:	693a      	ldr	r2, [r7, #16]
 800cf24:	1c53      	adds	r3, r2, #1
 800cf26:	613b      	str	r3, [r7, #16]
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	1c59      	adds	r1, r3, #1
 800cf2c:	6179      	str	r1, [r7, #20]
 800cf2e:	7812      	ldrb	r2, [r2, #0]
 800cf30:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	3b01      	subs	r3, #1
 800cf36:	607b      	str	r3, [r7, #4]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d1f1      	bne.n	800cf22 <mem_cpy+0x1a>
	}
}
 800cf3e:	bf00      	nop
 800cf40:	371c      	adds	r7, #28
 800cf42:	46bd      	mov	sp, r7
 800cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf48:	4770      	bx	lr

0800cf4a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cf4a:	b480      	push	{r7}
 800cf4c:	b087      	sub	sp, #28
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	60f8      	str	r0, [r7, #12]
 800cf52:	60b9      	str	r1, [r7, #8]
 800cf54:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	1c5a      	adds	r2, r3, #1
 800cf5e:	617a      	str	r2, [r7, #20]
 800cf60:	68ba      	ldr	r2, [r7, #8]
 800cf62:	b2d2      	uxtb	r2, r2
 800cf64:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	3b01      	subs	r3, #1
 800cf6a:	607b      	str	r3, [r7, #4]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d1f3      	bne.n	800cf5a <mem_set+0x10>
}
 800cf72:	bf00      	nop
 800cf74:	bf00      	nop
 800cf76:	371c      	adds	r7, #28
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr

0800cf80 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800cf80:	b480      	push	{r7}
 800cf82:	b089      	sub	sp, #36	; 0x24
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	60f8      	str	r0, [r7, #12]
 800cf88:	60b9      	str	r1, [r7, #8]
 800cf8a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	61fb      	str	r3, [r7, #28]
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cf94:	2300      	movs	r3, #0
 800cf96:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800cf98:	69fb      	ldr	r3, [r7, #28]
 800cf9a:	1c5a      	adds	r2, r3, #1
 800cf9c:	61fa      	str	r2, [r7, #28]
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	69bb      	ldr	r3, [r7, #24]
 800cfa4:	1c5a      	adds	r2, r3, #1
 800cfa6:	61ba      	str	r2, [r7, #24]
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	1acb      	subs	r3, r1, r3
 800cfac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	3b01      	subs	r3, #1
 800cfb2:	607b      	str	r3, [r7, #4]
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d002      	beq.n	800cfc0 <mem_cmp+0x40>
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d0eb      	beq.n	800cf98 <mem_cmp+0x18>

	return r;
 800cfc0:	697b      	ldr	r3, [r7, #20]
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3724      	adds	r7, #36	; 0x24
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr

0800cfce <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cfce:	b480      	push	{r7}
 800cfd0:	b083      	sub	sp, #12
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	6078      	str	r0, [r7, #4]
 800cfd6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cfd8:	e002      	b.n	800cfe0 <chk_chr+0x12>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	3301      	adds	r3, #1
 800cfde:	607b      	str	r3, [r7, #4]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	781b      	ldrb	r3, [r3, #0]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d005      	beq.n	800cff4 <chk_chr+0x26>
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	461a      	mov	r2, r3
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d1f2      	bne.n	800cfda <chk_chr+0xc>
	return *str;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	781b      	ldrb	r3, [r3, #0]
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	370c      	adds	r7, #12
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr

0800d004 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d004:	b480      	push	{r7}
 800d006:	b085      	sub	sp, #20
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d00e:	2300      	movs	r3, #0
 800d010:	60bb      	str	r3, [r7, #8]
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	60fb      	str	r3, [r7, #12]
 800d016:	e029      	b.n	800d06c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d018:	4a27      	ldr	r2, [pc, #156]	; (800d0b8 <chk_lock+0xb4>)
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	011b      	lsls	r3, r3, #4
 800d01e:	4413      	add	r3, r2
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d01d      	beq.n	800d062 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d026:	4a24      	ldr	r2, [pc, #144]	; (800d0b8 <chk_lock+0xb4>)
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	011b      	lsls	r3, r3, #4
 800d02c:	4413      	add	r3, r2
 800d02e:	681a      	ldr	r2, [r3, #0]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	429a      	cmp	r2, r3
 800d036:	d116      	bne.n	800d066 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d038:	4a1f      	ldr	r2, [pc, #124]	; (800d0b8 <chk_lock+0xb4>)
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	011b      	lsls	r3, r3, #4
 800d03e:	4413      	add	r3, r2
 800d040:	3304      	adds	r3, #4
 800d042:	681a      	ldr	r2, [r3, #0]
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d048:	429a      	cmp	r2, r3
 800d04a:	d10c      	bne.n	800d066 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d04c:	4a1a      	ldr	r2, [pc, #104]	; (800d0b8 <chk_lock+0xb4>)
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	011b      	lsls	r3, r3, #4
 800d052:	4413      	add	r3, r2
 800d054:	3308      	adds	r3, #8
 800d056:	681a      	ldr	r2, [r3, #0]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d102      	bne.n	800d066 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d060:	e007      	b.n	800d072 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d062:	2301      	movs	r3, #1
 800d064:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	3301      	adds	r3, #1
 800d06a:	60fb      	str	r3, [r7, #12]
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2b01      	cmp	r3, #1
 800d070:	d9d2      	bls.n	800d018 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	2b02      	cmp	r3, #2
 800d076:	d109      	bne.n	800d08c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d102      	bne.n	800d084 <chk_lock+0x80>
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	2b02      	cmp	r3, #2
 800d082:	d101      	bne.n	800d088 <chk_lock+0x84>
 800d084:	2300      	movs	r3, #0
 800d086:	e010      	b.n	800d0aa <chk_lock+0xa6>
 800d088:	2312      	movs	r3, #18
 800d08a:	e00e      	b.n	800d0aa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d108      	bne.n	800d0a4 <chk_lock+0xa0>
 800d092:	4a09      	ldr	r2, [pc, #36]	; (800d0b8 <chk_lock+0xb4>)
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	011b      	lsls	r3, r3, #4
 800d098:	4413      	add	r3, r2
 800d09a:	330c      	adds	r3, #12
 800d09c:	881b      	ldrh	r3, [r3, #0]
 800d09e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0a2:	d101      	bne.n	800d0a8 <chk_lock+0xa4>
 800d0a4:	2310      	movs	r3, #16
 800d0a6:	e000      	b.n	800d0aa <chk_lock+0xa6>
 800d0a8:	2300      	movs	r3, #0
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3714      	adds	r7, #20
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b4:	4770      	bx	lr
 800d0b6:	bf00      	nop
 800d0b8:	20000980 	.word	0x20000980

0800d0bc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b083      	sub	sp, #12
 800d0c0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	607b      	str	r3, [r7, #4]
 800d0c6:	e002      	b.n	800d0ce <enq_lock+0x12>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	607b      	str	r3, [r7, #4]
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	d806      	bhi.n	800d0e2 <enq_lock+0x26>
 800d0d4:	4a09      	ldr	r2, [pc, #36]	; (800d0fc <enq_lock+0x40>)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	011b      	lsls	r3, r3, #4
 800d0da:	4413      	add	r3, r2
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d1f2      	bne.n	800d0c8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2b02      	cmp	r3, #2
 800d0e6:	bf14      	ite	ne
 800d0e8:	2301      	movne	r3, #1
 800d0ea:	2300      	moveq	r3, #0
 800d0ec:	b2db      	uxtb	r3, r3
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	370c      	adds	r7, #12
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f8:	4770      	bx	lr
 800d0fa:	bf00      	nop
 800d0fc:	20000980 	.word	0x20000980

0800d100 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d100:	b480      	push	{r7}
 800d102:	b085      	sub	sp, #20
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d10a:	2300      	movs	r3, #0
 800d10c:	60fb      	str	r3, [r7, #12]
 800d10e:	e01f      	b.n	800d150 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d110:	4a41      	ldr	r2, [pc, #260]	; (800d218 <inc_lock+0x118>)
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	011b      	lsls	r3, r3, #4
 800d116:	4413      	add	r3, r2
 800d118:	681a      	ldr	r2, [r3, #0]
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	429a      	cmp	r2, r3
 800d120:	d113      	bne.n	800d14a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d122:	4a3d      	ldr	r2, [pc, #244]	; (800d218 <inc_lock+0x118>)
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	011b      	lsls	r3, r3, #4
 800d128:	4413      	add	r3, r2
 800d12a:	3304      	adds	r3, #4
 800d12c:	681a      	ldr	r2, [r3, #0]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d132:	429a      	cmp	r2, r3
 800d134:	d109      	bne.n	800d14a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d136:	4a38      	ldr	r2, [pc, #224]	; (800d218 <inc_lock+0x118>)
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	011b      	lsls	r3, r3, #4
 800d13c:	4413      	add	r3, r2
 800d13e:	3308      	adds	r3, #8
 800d140:	681a      	ldr	r2, [r3, #0]
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d146:	429a      	cmp	r2, r3
 800d148:	d006      	beq.n	800d158 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	3301      	adds	r3, #1
 800d14e:	60fb      	str	r3, [r7, #12]
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	2b01      	cmp	r3, #1
 800d154:	d9dc      	bls.n	800d110 <inc_lock+0x10>
 800d156:	e000      	b.n	800d15a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d158:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2b02      	cmp	r3, #2
 800d15e:	d132      	bne.n	800d1c6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d160:	2300      	movs	r3, #0
 800d162:	60fb      	str	r3, [r7, #12]
 800d164:	e002      	b.n	800d16c <inc_lock+0x6c>
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	3301      	adds	r3, #1
 800d16a:	60fb      	str	r3, [r7, #12]
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	2b01      	cmp	r3, #1
 800d170:	d806      	bhi.n	800d180 <inc_lock+0x80>
 800d172:	4a29      	ldr	r2, [pc, #164]	; (800d218 <inc_lock+0x118>)
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	011b      	lsls	r3, r3, #4
 800d178:	4413      	add	r3, r2
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d1f2      	bne.n	800d166 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2b02      	cmp	r3, #2
 800d184:	d101      	bne.n	800d18a <inc_lock+0x8a>
 800d186:	2300      	movs	r3, #0
 800d188:	e040      	b.n	800d20c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681a      	ldr	r2, [r3, #0]
 800d18e:	4922      	ldr	r1, [pc, #136]	; (800d218 <inc_lock+0x118>)
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	011b      	lsls	r3, r3, #4
 800d194:	440b      	add	r3, r1
 800d196:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	689a      	ldr	r2, [r3, #8]
 800d19c:	491e      	ldr	r1, [pc, #120]	; (800d218 <inc_lock+0x118>)
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	011b      	lsls	r3, r3, #4
 800d1a2:	440b      	add	r3, r1
 800d1a4:	3304      	adds	r3, #4
 800d1a6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	695a      	ldr	r2, [r3, #20]
 800d1ac:	491a      	ldr	r1, [pc, #104]	; (800d218 <inc_lock+0x118>)
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	011b      	lsls	r3, r3, #4
 800d1b2:	440b      	add	r3, r1
 800d1b4:	3308      	adds	r3, #8
 800d1b6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d1b8:	4a17      	ldr	r2, [pc, #92]	; (800d218 <inc_lock+0x118>)
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	011b      	lsls	r3, r3, #4
 800d1be:	4413      	add	r3, r2
 800d1c0:	330c      	adds	r3, #12
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d009      	beq.n	800d1e0 <inc_lock+0xe0>
 800d1cc:	4a12      	ldr	r2, [pc, #72]	; (800d218 <inc_lock+0x118>)
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	011b      	lsls	r3, r3, #4
 800d1d2:	4413      	add	r3, r2
 800d1d4:	330c      	adds	r3, #12
 800d1d6:	881b      	ldrh	r3, [r3, #0]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d001      	beq.n	800d1e0 <inc_lock+0xe0>
 800d1dc:	2300      	movs	r3, #0
 800d1de:	e015      	b.n	800d20c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d108      	bne.n	800d1f8 <inc_lock+0xf8>
 800d1e6:	4a0c      	ldr	r2, [pc, #48]	; (800d218 <inc_lock+0x118>)
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	011b      	lsls	r3, r3, #4
 800d1ec:	4413      	add	r3, r2
 800d1ee:	330c      	adds	r3, #12
 800d1f0:	881b      	ldrh	r3, [r3, #0]
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	b29a      	uxth	r2, r3
 800d1f6:	e001      	b.n	800d1fc <inc_lock+0xfc>
 800d1f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d1fc:	4906      	ldr	r1, [pc, #24]	; (800d218 <inc_lock+0x118>)
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	011b      	lsls	r3, r3, #4
 800d202:	440b      	add	r3, r1
 800d204:	330c      	adds	r3, #12
 800d206:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	3301      	adds	r3, #1
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3714      	adds	r7, #20
 800d210:	46bd      	mov	sp, r7
 800d212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d216:	4770      	bx	lr
 800d218:	20000980 	.word	0x20000980

0800d21c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d21c:	b480      	push	{r7}
 800d21e:	b085      	sub	sp, #20
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	3b01      	subs	r3, #1
 800d228:	607b      	str	r3, [r7, #4]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2b01      	cmp	r3, #1
 800d22e:	d825      	bhi.n	800d27c <dec_lock+0x60>
		n = Files[i].ctr;
 800d230:	4a17      	ldr	r2, [pc, #92]	; (800d290 <dec_lock+0x74>)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	011b      	lsls	r3, r3, #4
 800d236:	4413      	add	r3, r2
 800d238:	330c      	adds	r3, #12
 800d23a:	881b      	ldrh	r3, [r3, #0]
 800d23c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d23e:	89fb      	ldrh	r3, [r7, #14]
 800d240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d244:	d101      	bne.n	800d24a <dec_lock+0x2e>
 800d246:	2300      	movs	r3, #0
 800d248:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d24a:	89fb      	ldrh	r3, [r7, #14]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d002      	beq.n	800d256 <dec_lock+0x3a>
 800d250:	89fb      	ldrh	r3, [r7, #14]
 800d252:	3b01      	subs	r3, #1
 800d254:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d256:	4a0e      	ldr	r2, [pc, #56]	; (800d290 <dec_lock+0x74>)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	011b      	lsls	r3, r3, #4
 800d25c:	4413      	add	r3, r2
 800d25e:	330c      	adds	r3, #12
 800d260:	89fa      	ldrh	r2, [r7, #14]
 800d262:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d264:	89fb      	ldrh	r3, [r7, #14]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d105      	bne.n	800d276 <dec_lock+0x5a>
 800d26a:	4a09      	ldr	r2, [pc, #36]	; (800d290 <dec_lock+0x74>)
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	011b      	lsls	r3, r3, #4
 800d270:	4413      	add	r3, r2
 800d272:	2200      	movs	r2, #0
 800d274:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d276:	2300      	movs	r3, #0
 800d278:	737b      	strb	r3, [r7, #13]
 800d27a:	e001      	b.n	800d280 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d27c:	2302      	movs	r3, #2
 800d27e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d280:	7b7b      	ldrb	r3, [r7, #13]
}
 800d282:	4618      	mov	r0, r3
 800d284:	3714      	adds	r7, #20
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	20000980 	.word	0x20000980

0800d294 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d294:	b480      	push	{r7}
 800d296:	b085      	sub	sp, #20
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d29c:	2300      	movs	r3, #0
 800d29e:	60fb      	str	r3, [r7, #12]
 800d2a0:	e010      	b.n	800d2c4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d2a2:	4a0d      	ldr	r2, [pc, #52]	; (800d2d8 <clear_lock+0x44>)
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	011b      	lsls	r3, r3, #4
 800d2a8:	4413      	add	r3, r2
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	687a      	ldr	r2, [r7, #4]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d105      	bne.n	800d2be <clear_lock+0x2a>
 800d2b2:	4a09      	ldr	r2, [pc, #36]	; (800d2d8 <clear_lock+0x44>)
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	011b      	lsls	r3, r3, #4
 800d2b8:	4413      	add	r3, r2
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	3301      	adds	r3, #1
 800d2c2:	60fb      	str	r3, [r7, #12]
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	2b01      	cmp	r3, #1
 800d2c8:	d9eb      	bls.n	800d2a2 <clear_lock+0xe>
	}
}
 800d2ca:	bf00      	nop
 800d2cc:	bf00      	nop
 800d2ce:	3714      	adds	r7, #20
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr
 800d2d8:	20000980 	.word	0x20000980

0800d2dc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b086      	sub	sp, #24
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	78db      	ldrb	r3, [r3, #3]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d034      	beq.n	800d35a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	7858      	ldrb	r0, [r3, #1]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d300:	2301      	movs	r3, #1
 800d302:	697a      	ldr	r2, [r7, #20]
 800d304:	f7ff fd40 	bl	800cd88 <disk_write>
 800d308:	4603      	mov	r3, r0
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d002      	beq.n	800d314 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d30e:	2301      	movs	r3, #1
 800d310:	73fb      	strb	r3, [r7, #15]
 800d312:	e022      	b.n	800d35a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2200      	movs	r2, #0
 800d318:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6a1b      	ldr	r3, [r3, #32]
 800d31e:	697a      	ldr	r2, [r7, #20]
 800d320:	1ad2      	subs	r2, r2, r3
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	699b      	ldr	r3, [r3, #24]
 800d326:	429a      	cmp	r2, r3
 800d328:	d217      	bcs.n	800d35a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	789b      	ldrb	r3, [r3, #2]
 800d32e:	613b      	str	r3, [r7, #16]
 800d330:	e010      	b.n	800d354 <sync_window+0x78>
					wsect += fs->fsize;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	699b      	ldr	r3, [r3, #24]
 800d336:	697a      	ldr	r2, [r7, #20]
 800d338:	4413      	add	r3, r2
 800d33a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	7858      	ldrb	r0, [r3, #1]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d346:	2301      	movs	r3, #1
 800d348:	697a      	ldr	r2, [r7, #20]
 800d34a:	f7ff fd1d 	bl	800cd88 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d34e:	693b      	ldr	r3, [r7, #16]
 800d350:	3b01      	subs	r3, #1
 800d352:	613b      	str	r3, [r7, #16]
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	2b01      	cmp	r3, #1
 800d358:	d8eb      	bhi.n	800d332 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d35a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3718      	adds	r7, #24
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b084      	sub	sp, #16
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d36e:	2300      	movs	r3, #0
 800d370:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d376:	683a      	ldr	r2, [r7, #0]
 800d378:	429a      	cmp	r2, r3
 800d37a:	d01b      	beq.n	800d3b4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f7ff ffad 	bl	800d2dc <sync_window>
 800d382:	4603      	mov	r3, r0
 800d384:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d386:	7bfb      	ldrb	r3, [r7, #15]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d113      	bne.n	800d3b4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	7858      	ldrb	r0, [r3, #1]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d396:	2301      	movs	r3, #1
 800d398:	683a      	ldr	r2, [r7, #0]
 800d39a:	f7ff fcd5 	bl	800cd48 <disk_read>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d004      	beq.n	800d3ae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d3a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d3a8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	683a      	ldr	r2, [r7, #0]
 800d3b2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800d3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3710      	adds	r7, #16
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
	...

0800d3c0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b084      	sub	sp, #16
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f7ff ff87 	bl	800d2dc <sync_window>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d3d2:	7bfb      	ldrb	r3, [r7, #15]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d158      	bne.n	800d48a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	781b      	ldrb	r3, [r3, #0]
 800d3dc:	2b03      	cmp	r3, #3
 800d3de:	d148      	bne.n	800d472 <sync_fs+0xb2>
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	791b      	ldrb	r3, [r3, #4]
 800d3e4:	2b01      	cmp	r3, #1
 800d3e6:	d144      	bne.n	800d472 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	3330      	adds	r3, #48	; 0x30
 800d3ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3f0:	2100      	movs	r1, #0
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f7ff fda9 	bl	800cf4a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	3330      	adds	r3, #48	; 0x30
 800d3fc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d400:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d404:	4618      	mov	r0, r3
 800d406:	f7ff fd38 	bl	800ce7a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	3330      	adds	r3, #48	; 0x30
 800d40e:	4921      	ldr	r1, [pc, #132]	; (800d494 <sync_fs+0xd4>)
 800d410:	4618      	mov	r0, r3
 800d412:	f7ff fd4d 	bl	800ceb0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	3330      	adds	r3, #48	; 0x30
 800d41a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d41e:	491e      	ldr	r1, [pc, #120]	; (800d498 <sync_fs+0xd8>)
 800d420:	4618      	mov	r0, r3
 800d422:	f7ff fd45 	bl	800ceb0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	3330      	adds	r3, #48	; 0x30
 800d42a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	691b      	ldr	r3, [r3, #16]
 800d432:	4619      	mov	r1, r3
 800d434:	4610      	mov	r0, r2
 800d436:	f7ff fd3b 	bl	800ceb0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	3330      	adds	r3, #48	; 0x30
 800d43e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	68db      	ldr	r3, [r3, #12]
 800d446:	4619      	mov	r1, r3
 800d448:	4610      	mov	r0, r2
 800d44a:	f7ff fd31 	bl	800ceb0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	69db      	ldr	r3, [r3, #28]
 800d452:	1c5a      	adds	r2, r3, #1
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	7858      	ldrb	r0, [r3, #1]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d466:	2301      	movs	r3, #1
 800d468:	f7ff fc8e 	bl	800cd88 <disk_write>
			fs->fsi_flag = 0;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2200      	movs	r2, #0
 800d470:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	785b      	ldrb	r3, [r3, #1]
 800d476:	2200      	movs	r2, #0
 800d478:	2100      	movs	r1, #0
 800d47a:	4618      	mov	r0, r3
 800d47c:	f7ff fca4 	bl	800cdc8 <disk_ioctl>
 800d480:	4603      	mov	r3, r0
 800d482:	2b00      	cmp	r3, #0
 800d484:	d001      	beq.n	800d48a <sync_fs+0xca>
 800d486:	2301      	movs	r3, #1
 800d488:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d48a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3710      	adds	r7, #16
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}
 800d494:	41615252 	.word	0x41615252
 800d498:	61417272 	.word	0x61417272

0800d49c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b083      	sub	sp, #12
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
 800d4a4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	3b02      	subs	r3, #2
 800d4aa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	695b      	ldr	r3, [r3, #20]
 800d4b0:	3b02      	subs	r3, #2
 800d4b2:	683a      	ldr	r2, [r7, #0]
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	d301      	bcc.n	800d4bc <clust2sect+0x20>
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	e008      	b.n	800d4ce <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	895b      	ldrh	r3, [r3, #10]
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	fb03 f202 	mul.w	r2, r3, r2
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4cc:	4413      	add	r3, r2
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	370c      	adds	r7, #12
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d8:	4770      	bx	lr

0800d4da <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d4da:	b580      	push	{r7, lr}
 800d4dc:	b086      	sub	sp, #24
 800d4de:	af00      	add	r7, sp, #0
 800d4e0:	6078      	str	r0, [r7, #4]
 800d4e2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	2b01      	cmp	r3, #1
 800d4ee:	d904      	bls.n	800d4fa <get_fat+0x20>
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	695b      	ldr	r3, [r3, #20]
 800d4f4:	683a      	ldr	r2, [r7, #0]
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	d302      	bcc.n	800d500 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	617b      	str	r3, [r7, #20]
 800d4fe:	e08f      	b.n	800d620 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d504:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	781b      	ldrb	r3, [r3, #0]
 800d50a:	2b03      	cmp	r3, #3
 800d50c:	d062      	beq.n	800d5d4 <get_fat+0xfa>
 800d50e:	2b03      	cmp	r3, #3
 800d510:	dc7c      	bgt.n	800d60c <get_fat+0x132>
 800d512:	2b01      	cmp	r3, #1
 800d514:	d002      	beq.n	800d51c <get_fat+0x42>
 800d516:	2b02      	cmp	r3, #2
 800d518:	d042      	beq.n	800d5a0 <get_fat+0xc6>
 800d51a:	e077      	b.n	800d60c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	60fb      	str	r3, [r7, #12]
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	085b      	lsrs	r3, r3, #1
 800d524:	68fa      	ldr	r2, [r7, #12]
 800d526:	4413      	add	r3, r2
 800d528:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d52a:	693b      	ldr	r3, [r7, #16]
 800d52c:	6a1a      	ldr	r2, [r3, #32]
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	0a5b      	lsrs	r3, r3, #9
 800d532:	4413      	add	r3, r2
 800d534:	4619      	mov	r1, r3
 800d536:	6938      	ldr	r0, [r7, #16]
 800d538:	f7ff ff14 	bl	800d364 <move_window>
 800d53c:	4603      	mov	r3, r0
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d167      	bne.n	800d612 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	1c5a      	adds	r2, r3, #1
 800d546:	60fa      	str	r2, [r7, #12]
 800d548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d54c:	693a      	ldr	r2, [r7, #16]
 800d54e:	4413      	add	r3, r2
 800d550:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d554:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	6a1a      	ldr	r2, [r3, #32]
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	0a5b      	lsrs	r3, r3, #9
 800d55e:	4413      	add	r3, r2
 800d560:	4619      	mov	r1, r3
 800d562:	6938      	ldr	r0, [r7, #16]
 800d564:	f7ff fefe 	bl	800d364 <move_window>
 800d568:	4603      	mov	r3, r0
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d153      	bne.n	800d616 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d574:	693a      	ldr	r2, [r7, #16]
 800d576:	4413      	add	r3, r2
 800d578:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d57c:	021b      	lsls	r3, r3, #8
 800d57e:	461a      	mov	r2, r3
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	4313      	orrs	r3, r2
 800d584:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	f003 0301 	and.w	r3, r3, #1
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d002      	beq.n	800d596 <get_fat+0xbc>
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	091b      	lsrs	r3, r3, #4
 800d594:	e002      	b.n	800d59c <get_fat+0xc2>
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d59c:	617b      	str	r3, [r7, #20]
			break;
 800d59e:	e03f      	b.n	800d620 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	6a1a      	ldr	r2, [r3, #32]
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	0a1b      	lsrs	r3, r3, #8
 800d5a8:	4413      	add	r3, r2
 800d5aa:	4619      	mov	r1, r3
 800d5ac:	6938      	ldr	r0, [r7, #16]
 800d5ae:	f7ff fed9 	bl	800d364 <move_window>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d130      	bne.n	800d61a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	005b      	lsls	r3, r3, #1
 800d5c2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d5c6:	4413      	add	r3, r2
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f7ff fc1b 	bl	800ce04 <ld_word>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	617b      	str	r3, [r7, #20]
			break;
 800d5d2:	e025      	b.n	800d620 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	6a1a      	ldr	r2, [r3, #32]
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	09db      	lsrs	r3, r3, #7
 800d5dc:	4413      	add	r3, r2
 800d5de:	4619      	mov	r1, r3
 800d5e0:	6938      	ldr	r0, [r7, #16]
 800d5e2:	f7ff febf 	bl	800d364 <move_window>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d118      	bne.n	800d61e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	009b      	lsls	r3, r3, #2
 800d5f6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d5fa:	4413      	add	r3, r2
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f7ff fc19 	bl	800ce34 <ld_dword>
 800d602:	4603      	mov	r3, r0
 800d604:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d608:	617b      	str	r3, [r7, #20]
			break;
 800d60a:	e009      	b.n	800d620 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d60c:	2301      	movs	r3, #1
 800d60e:	617b      	str	r3, [r7, #20]
 800d610:	e006      	b.n	800d620 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d612:	bf00      	nop
 800d614:	e004      	b.n	800d620 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d616:	bf00      	nop
 800d618:	e002      	b.n	800d620 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d61a:	bf00      	nop
 800d61c:	e000      	b.n	800d620 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d61e:	bf00      	nop
		}
	}

	return val;
 800d620:	697b      	ldr	r3, [r7, #20]
}
 800d622:	4618      	mov	r0, r3
 800d624:	3718      	adds	r7, #24
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}

0800d62a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d62a:	b590      	push	{r4, r7, lr}
 800d62c:	b089      	sub	sp, #36	; 0x24
 800d62e:	af00      	add	r7, sp, #0
 800d630:	60f8      	str	r0, [r7, #12]
 800d632:	60b9      	str	r1, [r7, #8]
 800d634:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d636:	2302      	movs	r3, #2
 800d638:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	2b01      	cmp	r3, #1
 800d63e:	f240 80d2 	bls.w	800d7e6 <put_fat+0x1bc>
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	695b      	ldr	r3, [r3, #20]
 800d646:	68ba      	ldr	r2, [r7, #8]
 800d648:	429a      	cmp	r2, r3
 800d64a:	f080 80cc 	bcs.w	800d7e6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	781b      	ldrb	r3, [r3, #0]
 800d652:	2b03      	cmp	r3, #3
 800d654:	f000 8096 	beq.w	800d784 <put_fat+0x15a>
 800d658:	2b03      	cmp	r3, #3
 800d65a:	f300 80cd 	bgt.w	800d7f8 <put_fat+0x1ce>
 800d65e:	2b01      	cmp	r3, #1
 800d660:	d002      	beq.n	800d668 <put_fat+0x3e>
 800d662:	2b02      	cmp	r3, #2
 800d664:	d06e      	beq.n	800d744 <put_fat+0x11a>
 800d666:	e0c7      	b.n	800d7f8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	61bb      	str	r3, [r7, #24]
 800d66c:	69bb      	ldr	r3, [r7, #24]
 800d66e:	085b      	lsrs	r3, r3, #1
 800d670:	69ba      	ldr	r2, [r7, #24]
 800d672:	4413      	add	r3, r2
 800d674:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	6a1a      	ldr	r2, [r3, #32]
 800d67a:	69bb      	ldr	r3, [r7, #24]
 800d67c:	0a5b      	lsrs	r3, r3, #9
 800d67e:	4413      	add	r3, r2
 800d680:	4619      	mov	r1, r3
 800d682:	68f8      	ldr	r0, [r7, #12]
 800d684:	f7ff fe6e 	bl	800d364 <move_window>
 800d688:	4603      	mov	r3, r0
 800d68a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d68c:	7ffb      	ldrb	r3, [r7, #31]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	f040 80ab 	bne.w	800d7ea <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d69a:	69bb      	ldr	r3, [r7, #24]
 800d69c:	1c59      	adds	r1, r3, #1
 800d69e:	61b9      	str	r1, [r7, #24]
 800d6a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6a4:	4413      	add	r3, r2
 800d6a6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	f003 0301 	and.w	r3, r3, #1
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d00d      	beq.n	800d6ce <put_fat+0xa4>
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	b25b      	sxtb	r3, r3
 800d6b8:	f003 030f 	and.w	r3, r3, #15
 800d6bc:	b25a      	sxtb	r2, r3
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	b2db      	uxtb	r3, r3
 800d6c2:	011b      	lsls	r3, r3, #4
 800d6c4:	b25b      	sxtb	r3, r3
 800d6c6:	4313      	orrs	r3, r2
 800d6c8:	b25b      	sxtb	r3, r3
 800d6ca:	b2db      	uxtb	r3, r3
 800d6cc:	e001      	b.n	800d6d2 <put_fat+0xa8>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	b2db      	uxtb	r3, r3
 800d6d2:	697a      	ldr	r2, [r7, #20]
 800d6d4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2201      	movs	r2, #1
 800d6da:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	6a1a      	ldr	r2, [r3, #32]
 800d6e0:	69bb      	ldr	r3, [r7, #24]
 800d6e2:	0a5b      	lsrs	r3, r3, #9
 800d6e4:	4413      	add	r3, r2
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	68f8      	ldr	r0, [r7, #12]
 800d6ea:	f7ff fe3b 	bl	800d364 <move_window>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d6f2:	7ffb      	ldrb	r3, [r7, #31]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d17a      	bne.n	800d7ee <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d6fe:	69bb      	ldr	r3, [r7, #24]
 800d700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d704:	4413      	add	r3, r2
 800d706:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	f003 0301 	and.w	r3, r3, #1
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d003      	beq.n	800d71a <put_fat+0xf0>
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	091b      	lsrs	r3, r3, #4
 800d716:	b2db      	uxtb	r3, r3
 800d718:	e00e      	b.n	800d738 <put_fat+0x10e>
 800d71a:	697b      	ldr	r3, [r7, #20]
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	b25b      	sxtb	r3, r3
 800d720:	f023 030f 	bic.w	r3, r3, #15
 800d724:	b25a      	sxtb	r2, r3
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	0a1b      	lsrs	r3, r3, #8
 800d72a:	b25b      	sxtb	r3, r3
 800d72c:	f003 030f 	and.w	r3, r3, #15
 800d730:	b25b      	sxtb	r3, r3
 800d732:	4313      	orrs	r3, r2
 800d734:	b25b      	sxtb	r3, r3
 800d736:	b2db      	uxtb	r3, r3
 800d738:	697a      	ldr	r2, [r7, #20]
 800d73a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	2201      	movs	r2, #1
 800d740:	70da      	strb	r2, [r3, #3]
			break;
 800d742:	e059      	b.n	800d7f8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	6a1a      	ldr	r2, [r3, #32]
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	0a1b      	lsrs	r3, r3, #8
 800d74c:	4413      	add	r3, r2
 800d74e:	4619      	mov	r1, r3
 800d750:	68f8      	ldr	r0, [r7, #12]
 800d752:	f7ff fe07 	bl	800d364 <move_window>
 800d756:	4603      	mov	r3, r0
 800d758:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d75a:	7ffb      	ldrb	r3, [r7, #31]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d148      	bne.n	800d7f2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	005b      	lsls	r3, r3, #1
 800d76a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d76e:	4413      	add	r3, r2
 800d770:	687a      	ldr	r2, [r7, #4]
 800d772:	b292      	uxth	r2, r2
 800d774:	4611      	mov	r1, r2
 800d776:	4618      	mov	r0, r3
 800d778:	f7ff fb7f 	bl	800ce7a <st_word>
			fs->wflag = 1;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	2201      	movs	r2, #1
 800d780:	70da      	strb	r2, [r3, #3]
			break;
 800d782:	e039      	b.n	800d7f8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	6a1a      	ldr	r2, [r3, #32]
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	09db      	lsrs	r3, r3, #7
 800d78c:	4413      	add	r3, r2
 800d78e:	4619      	mov	r1, r3
 800d790:	68f8      	ldr	r0, [r7, #12]
 800d792:	f7ff fde7 	bl	800d364 <move_window>
 800d796:	4603      	mov	r3, r0
 800d798:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d79a:	7ffb      	ldrb	r3, [r7, #31]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d12a      	bne.n	800d7f6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	009b      	lsls	r3, r3, #2
 800d7b0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d7b4:	4413      	add	r3, r2
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7ff fb3c 	bl	800ce34 <ld_dword>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d7c2:	4323      	orrs	r3, r4
 800d7c4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	009b      	lsls	r3, r3, #2
 800d7d0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d7d4:	4413      	add	r3, r2
 800d7d6:	6879      	ldr	r1, [r7, #4]
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7ff fb69 	bl	800ceb0 <st_dword>
			fs->wflag = 1;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	2201      	movs	r2, #1
 800d7e2:	70da      	strb	r2, [r3, #3]
			break;
 800d7e4:	e008      	b.n	800d7f8 <put_fat+0x1ce>
		}
	}
 800d7e6:	bf00      	nop
 800d7e8:	e006      	b.n	800d7f8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d7ea:	bf00      	nop
 800d7ec:	e004      	b.n	800d7f8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d7ee:	bf00      	nop
 800d7f0:	e002      	b.n	800d7f8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d7f2:	bf00      	nop
 800d7f4:	e000      	b.n	800d7f8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d7f6:	bf00      	nop
	return res;
 800d7f8:	7ffb      	ldrb	r3, [r7, #31]
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3724      	adds	r7, #36	; 0x24
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd90      	pop	{r4, r7, pc}

0800d802 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d802:	b580      	push	{r7, lr}
 800d804:	b088      	sub	sp, #32
 800d806:	af00      	add	r7, sp, #0
 800d808:	60f8      	str	r0, [r7, #12]
 800d80a:	60b9      	str	r1, [r7, #8]
 800d80c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d80e:	2300      	movs	r3, #0
 800d810:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	d904      	bls.n	800d828 <remove_chain+0x26>
 800d81e:	69bb      	ldr	r3, [r7, #24]
 800d820:	695b      	ldr	r3, [r3, #20]
 800d822:	68ba      	ldr	r2, [r7, #8]
 800d824:	429a      	cmp	r2, r3
 800d826:	d301      	bcc.n	800d82c <remove_chain+0x2a>
 800d828:	2302      	movs	r3, #2
 800d82a:	e04b      	b.n	800d8c4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d00c      	beq.n	800d84c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d832:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d836:	6879      	ldr	r1, [r7, #4]
 800d838:	69b8      	ldr	r0, [r7, #24]
 800d83a:	f7ff fef6 	bl	800d62a <put_fat>
 800d83e:	4603      	mov	r3, r0
 800d840:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d842:	7ffb      	ldrb	r3, [r7, #31]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d001      	beq.n	800d84c <remove_chain+0x4a>
 800d848:	7ffb      	ldrb	r3, [r7, #31]
 800d84a:	e03b      	b.n	800d8c4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d84c:	68b9      	ldr	r1, [r7, #8]
 800d84e:	68f8      	ldr	r0, [r7, #12]
 800d850:	f7ff fe43 	bl	800d4da <get_fat>
 800d854:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d031      	beq.n	800d8c0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	2b01      	cmp	r3, #1
 800d860:	d101      	bne.n	800d866 <remove_chain+0x64>
 800d862:	2302      	movs	r3, #2
 800d864:	e02e      	b.n	800d8c4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d86c:	d101      	bne.n	800d872 <remove_chain+0x70>
 800d86e:	2301      	movs	r3, #1
 800d870:	e028      	b.n	800d8c4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d872:	2200      	movs	r2, #0
 800d874:	68b9      	ldr	r1, [r7, #8]
 800d876:	69b8      	ldr	r0, [r7, #24]
 800d878:	f7ff fed7 	bl	800d62a <put_fat>
 800d87c:	4603      	mov	r3, r0
 800d87e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d880:	7ffb      	ldrb	r3, [r7, #31]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d001      	beq.n	800d88a <remove_chain+0x88>
 800d886:	7ffb      	ldrb	r3, [r7, #31]
 800d888:	e01c      	b.n	800d8c4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d88a:	69bb      	ldr	r3, [r7, #24]
 800d88c:	691a      	ldr	r2, [r3, #16]
 800d88e:	69bb      	ldr	r3, [r7, #24]
 800d890:	695b      	ldr	r3, [r3, #20]
 800d892:	3b02      	subs	r3, #2
 800d894:	429a      	cmp	r2, r3
 800d896:	d20b      	bcs.n	800d8b0 <remove_chain+0xae>
			fs->free_clst++;
 800d898:	69bb      	ldr	r3, [r7, #24]
 800d89a:	691b      	ldr	r3, [r3, #16]
 800d89c:	1c5a      	adds	r2, r3, #1
 800d89e:	69bb      	ldr	r3, [r7, #24]
 800d8a0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d8a2:	69bb      	ldr	r3, [r7, #24]
 800d8a4:	791b      	ldrb	r3, [r3, #4]
 800d8a6:	f043 0301 	orr.w	r3, r3, #1
 800d8aa:	b2da      	uxtb	r2, r3
 800d8ac:	69bb      	ldr	r3, [r7, #24]
 800d8ae:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d8b4:	69bb      	ldr	r3, [r7, #24]
 800d8b6:	695b      	ldr	r3, [r3, #20]
 800d8b8:	68ba      	ldr	r2, [r7, #8]
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d3c6      	bcc.n	800d84c <remove_chain+0x4a>
 800d8be:	e000      	b.n	800d8c2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d8c0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d8c2:	2300      	movs	r3, #0
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3720      	adds	r7, #32
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}

0800d8cc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b088      	sub	sp, #32
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d10d      	bne.n	800d8fe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d8e2:	693b      	ldr	r3, [r7, #16]
 800d8e4:	68db      	ldr	r3, [r3, #12]
 800d8e6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d8e8:	69bb      	ldr	r3, [r7, #24]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d004      	beq.n	800d8f8 <create_chain+0x2c>
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	695b      	ldr	r3, [r3, #20]
 800d8f2:	69ba      	ldr	r2, [r7, #24]
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d31b      	bcc.n	800d930 <create_chain+0x64>
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	61bb      	str	r3, [r7, #24]
 800d8fc:	e018      	b.n	800d930 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d8fe:	6839      	ldr	r1, [r7, #0]
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f7ff fdea 	bl	800d4da <get_fat>
 800d906:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	2b01      	cmp	r3, #1
 800d90c:	d801      	bhi.n	800d912 <create_chain+0x46>
 800d90e:	2301      	movs	r3, #1
 800d910:	e070      	b.n	800d9f4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d918:	d101      	bne.n	800d91e <create_chain+0x52>
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	e06a      	b.n	800d9f4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	695b      	ldr	r3, [r3, #20]
 800d922:	68fa      	ldr	r2, [r7, #12]
 800d924:	429a      	cmp	r2, r3
 800d926:	d201      	bcs.n	800d92c <create_chain+0x60>
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	e063      	b.n	800d9f4 <create_chain+0x128>
		scl = clst;
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d930:	69bb      	ldr	r3, [r7, #24]
 800d932:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d934:	69fb      	ldr	r3, [r7, #28]
 800d936:	3301      	adds	r3, #1
 800d938:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	695b      	ldr	r3, [r3, #20]
 800d93e:	69fa      	ldr	r2, [r7, #28]
 800d940:	429a      	cmp	r2, r3
 800d942:	d307      	bcc.n	800d954 <create_chain+0x88>
				ncl = 2;
 800d944:	2302      	movs	r3, #2
 800d946:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d948:	69fa      	ldr	r2, [r7, #28]
 800d94a:	69bb      	ldr	r3, [r7, #24]
 800d94c:	429a      	cmp	r2, r3
 800d94e:	d901      	bls.n	800d954 <create_chain+0x88>
 800d950:	2300      	movs	r3, #0
 800d952:	e04f      	b.n	800d9f4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d954:	69f9      	ldr	r1, [r7, #28]
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f7ff fdbf 	bl	800d4da <get_fat>
 800d95c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d00e      	beq.n	800d982 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	2b01      	cmp	r3, #1
 800d968:	d003      	beq.n	800d972 <create_chain+0xa6>
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d970:	d101      	bne.n	800d976 <create_chain+0xaa>
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	e03e      	b.n	800d9f4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d976:	69fa      	ldr	r2, [r7, #28]
 800d978:	69bb      	ldr	r3, [r7, #24]
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d1da      	bne.n	800d934 <create_chain+0x68>
 800d97e:	2300      	movs	r3, #0
 800d980:	e038      	b.n	800d9f4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d982:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d984:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d988:	69f9      	ldr	r1, [r7, #28]
 800d98a:	6938      	ldr	r0, [r7, #16]
 800d98c:	f7ff fe4d 	bl	800d62a <put_fat>
 800d990:	4603      	mov	r3, r0
 800d992:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d994:	7dfb      	ldrb	r3, [r7, #23]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d109      	bne.n	800d9ae <create_chain+0xe2>
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d006      	beq.n	800d9ae <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d9a0:	69fa      	ldr	r2, [r7, #28]
 800d9a2:	6839      	ldr	r1, [r7, #0]
 800d9a4:	6938      	ldr	r0, [r7, #16]
 800d9a6:	f7ff fe40 	bl	800d62a <put_fat>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d9ae:	7dfb      	ldrb	r3, [r7, #23]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d116      	bne.n	800d9e2 <create_chain+0x116>
		fs->last_clst = ncl;
 800d9b4:	693b      	ldr	r3, [r7, #16]
 800d9b6:	69fa      	ldr	r2, [r7, #28]
 800d9b8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	691a      	ldr	r2, [r3, #16]
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	695b      	ldr	r3, [r3, #20]
 800d9c2:	3b02      	subs	r3, #2
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d804      	bhi.n	800d9d2 <create_chain+0x106>
 800d9c8:	693b      	ldr	r3, [r7, #16]
 800d9ca:	691b      	ldr	r3, [r3, #16]
 800d9cc:	1e5a      	subs	r2, r3, #1
 800d9ce:	693b      	ldr	r3, [r7, #16]
 800d9d0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	791b      	ldrb	r3, [r3, #4]
 800d9d6:	f043 0301 	orr.w	r3, r3, #1
 800d9da:	b2da      	uxtb	r2, r3
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	711a      	strb	r2, [r3, #4]
 800d9e0:	e007      	b.n	800d9f2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d9e2:	7dfb      	ldrb	r3, [r7, #23]
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	d102      	bne.n	800d9ee <create_chain+0x122>
 800d9e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d9ec:	e000      	b.n	800d9f0 <create_chain+0x124>
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d9f2:	69fb      	ldr	r3, [r7, #28]
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3720      	adds	r7, #32
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b087      	sub	sp, #28
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da10:	3304      	adds	r3, #4
 800da12:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	0a5b      	lsrs	r3, r3, #9
 800da18:	68fa      	ldr	r2, [r7, #12]
 800da1a:	8952      	ldrh	r2, [r2, #10]
 800da1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800da20:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	1d1a      	adds	r2, r3, #4
 800da26:	613a      	str	r2, [r7, #16]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d101      	bne.n	800da36 <clmt_clust+0x3a>
 800da32:	2300      	movs	r3, #0
 800da34:	e010      	b.n	800da58 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800da36:	697a      	ldr	r2, [r7, #20]
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d307      	bcc.n	800da4e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800da3e:	697a      	ldr	r2, [r7, #20]
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	1ad3      	subs	r3, r2, r3
 800da44:	617b      	str	r3, [r7, #20]
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	3304      	adds	r3, #4
 800da4a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800da4c:	e7e9      	b.n	800da22 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800da4e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800da50:	693b      	ldr	r3, [r7, #16]
 800da52:	681a      	ldr	r2, [r3, #0]
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	4413      	add	r3, r2
}
 800da58:	4618      	mov	r0, r3
 800da5a:	371c      	adds	r7, #28
 800da5c:	46bd      	mov	sp, r7
 800da5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da62:	4770      	bx	lr

0800da64 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b086      	sub	sp, #24
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800da7a:	d204      	bcs.n	800da86 <dir_sdi+0x22>
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	f003 031f 	and.w	r3, r3, #31
 800da82:	2b00      	cmp	r3, #0
 800da84:	d001      	beq.n	800da8a <dir_sdi+0x26>
		return FR_INT_ERR;
 800da86:	2302      	movs	r3, #2
 800da88:	e063      	b.n	800db52 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	683a      	ldr	r2, [r7, #0]
 800da8e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	689b      	ldr	r3, [r3, #8]
 800da94:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800da96:	697b      	ldr	r3, [r7, #20]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d106      	bne.n	800daaa <dir_sdi+0x46>
 800da9c:	693b      	ldr	r3, [r7, #16]
 800da9e:	781b      	ldrb	r3, [r3, #0]
 800daa0:	2b02      	cmp	r3, #2
 800daa2:	d902      	bls.n	800daaa <dir_sdi+0x46>
		clst = fs->dirbase;
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d10c      	bne.n	800daca <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	095b      	lsrs	r3, r3, #5
 800dab4:	693a      	ldr	r2, [r7, #16]
 800dab6:	8912      	ldrh	r2, [r2, #8]
 800dab8:	4293      	cmp	r3, r2
 800daba:	d301      	bcc.n	800dac0 <dir_sdi+0x5c>
 800dabc:	2302      	movs	r3, #2
 800dabe:	e048      	b.n	800db52 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	61da      	str	r2, [r3, #28]
 800dac8:	e029      	b.n	800db1e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	895b      	ldrh	r3, [r3, #10]
 800dace:	025b      	lsls	r3, r3, #9
 800dad0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dad2:	e019      	b.n	800db08 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6979      	ldr	r1, [r7, #20]
 800dad8:	4618      	mov	r0, r3
 800dada:	f7ff fcfe 	bl	800d4da <get_fat>
 800dade:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dae6:	d101      	bne.n	800daec <dir_sdi+0x88>
 800dae8:	2301      	movs	r3, #1
 800daea:	e032      	b.n	800db52 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	2b01      	cmp	r3, #1
 800daf0:	d904      	bls.n	800dafc <dir_sdi+0x98>
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	695b      	ldr	r3, [r3, #20]
 800daf6:	697a      	ldr	r2, [r7, #20]
 800daf8:	429a      	cmp	r2, r3
 800dafa:	d301      	bcc.n	800db00 <dir_sdi+0x9c>
 800dafc:	2302      	movs	r3, #2
 800dafe:	e028      	b.n	800db52 <dir_sdi+0xee>
			ofs -= csz;
 800db00:	683a      	ldr	r2, [r7, #0]
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	1ad3      	subs	r3, r2, r3
 800db06:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800db08:	683a      	ldr	r2, [r7, #0]
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	429a      	cmp	r2, r3
 800db0e:	d2e1      	bcs.n	800dad4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800db10:	6979      	ldr	r1, [r7, #20]
 800db12:	6938      	ldr	r0, [r7, #16]
 800db14:	f7ff fcc2 	bl	800d49c <clust2sect>
 800db18:	4602      	mov	r2, r0
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	697a      	ldr	r2, [r7, #20]
 800db22:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	69db      	ldr	r3, [r3, #28]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d101      	bne.n	800db30 <dir_sdi+0xcc>
 800db2c:	2302      	movs	r3, #2
 800db2e:	e010      	b.n	800db52 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	69da      	ldr	r2, [r3, #28]
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	0a5b      	lsrs	r3, r3, #9
 800db38:	441a      	add	r2, r3
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db4a:	441a      	add	r2, r3
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800db50:	2300      	movs	r3, #0
}
 800db52:	4618      	mov	r0, r3
 800db54:	3718      	adds	r7, #24
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}

0800db5a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800db5a:	b580      	push	{r7, lr}
 800db5c:	b086      	sub	sp, #24
 800db5e:	af00      	add	r7, sp, #0
 800db60:	6078      	str	r0, [r7, #4]
 800db62:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	695b      	ldr	r3, [r3, #20]
 800db6e:	3320      	adds	r3, #32
 800db70:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	69db      	ldr	r3, [r3, #28]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d003      	beq.n	800db82 <dir_next+0x28>
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800db80:	d301      	bcc.n	800db86 <dir_next+0x2c>
 800db82:	2304      	movs	r3, #4
 800db84:	e0aa      	b.n	800dcdc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	f040 8098 	bne.w	800dcc2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	69db      	ldr	r3, [r3, #28]
 800db96:	1c5a      	adds	r2, r3, #1
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	699b      	ldr	r3, [r3, #24]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d10b      	bne.n	800dbbc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	095b      	lsrs	r3, r3, #5
 800dba8:	68fa      	ldr	r2, [r7, #12]
 800dbaa:	8912      	ldrh	r2, [r2, #8]
 800dbac:	4293      	cmp	r3, r2
 800dbae:	f0c0 8088 	bcc.w	800dcc2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	61da      	str	r2, [r3, #28]
 800dbb8:	2304      	movs	r3, #4
 800dbba:	e08f      	b.n	800dcdc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	0a5b      	lsrs	r3, r3, #9
 800dbc0:	68fa      	ldr	r2, [r7, #12]
 800dbc2:	8952      	ldrh	r2, [r2, #10]
 800dbc4:	3a01      	subs	r2, #1
 800dbc6:	4013      	ands	r3, r2
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d17a      	bne.n	800dcc2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800dbcc:	687a      	ldr	r2, [r7, #4]
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	699b      	ldr	r3, [r3, #24]
 800dbd2:	4619      	mov	r1, r3
 800dbd4:	4610      	mov	r0, r2
 800dbd6:	f7ff fc80 	bl	800d4da <get_fat>
 800dbda:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	2b01      	cmp	r3, #1
 800dbe0:	d801      	bhi.n	800dbe6 <dir_next+0x8c>
 800dbe2:	2302      	movs	r3, #2
 800dbe4:	e07a      	b.n	800dcdc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dbec:	d101      	bne.n	800dbf2 <dir_next+0x98>
 800dbee:	2301      	movs	r3, #1
 800dbf0:	e074      	b.n	800dcdc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	695b      	ldr	r3, [r3, #20]
 800dbf6:	697a      	ldr	r2, [r7, #20]
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d358      	bcc.n	800dcae <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d104      	bne.n	800dc0c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2200      	movs	r2, #0
 800dc06:	61da      	str	r2, [r3, #28]
 800dc08:	2304      	movs	r3, #4
 800dc0a:	e067      	b.n	800dcdc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800dc0c:	687a      	ldr	r2, [r7, #4]
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	699b      	ldr	r3, [r3, #24]
 800dc12:	4619      	mov	r1, r3
 800dc14:	4610      	mov	r0, r2
 800dc16:	f7ff fe59 	bl	800d8cc <create_chain>
 800dc1a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d101      	bne.n	800dc26 <dir_next+0xcc>
 800dc22:	2307      	movs	r3, #7
 800dc24:	e05a      	b.n	800dcdc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	2b01      	cmp	r3, #1
 800dc2a:	d101      	bne.n	800dc30 <dir_next+0xd6>
 800dc2c:	2302      	movs	r3, #2
 800dc2e:	e055      	b.n	800dcdc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc36:	d101      	bne.n	800dc3c <dir_next+0xe2>
 800dc38:	2301      	movs	r3, #1
 800dc3a:	e04f      	b.n	800dcdc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800dc3c:	68f8      	ldr	r0, [r7, #12]
 800dc3e:	f7ff fb4d 	bl	800d2dc <sync_window>
 800dc42:	4603      	mov	r3, r0
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d001      	beq.n	800dc4c <dir_next+0xf2>
 800dc48:	2301      	movs	r3, #1
 800dc4a:	e047      	b.n	800dcdc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	3330      	adds	r3, #48	; 0x30
 800dc50:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc54:	2100      	movs	r1, #0
 800dc56:	4618      	mov	r0, r3
 800dc58:	f7ff f977 	bl	800cf4a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	613b      	str	r3, [r7, #16]
 800dc60:	6979      	ldr	r1, [r7, #20]
 800dc62:	68f8      	ldr	r0, [r7, #12]
 800dc64:	f7ff fc1a 	bl	800d49c <clust2sect>
 800dc68:	4602      	mov	r2, r0
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	62da      	str	r2, [r3, #44]	; 0x2c
 800dc6e:	e012      	b.n	800dc96 <dir_next+0x13c>
						fs->wflag = 1;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	2201      	movs	r2, #1
 800dc74:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800dc76:	68f8      	ldr	r0, [r7, #12]
 800dc78:	f7ff fb30 	bl	800d2dc <sync_window>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d001      	beq.n	800dc86 <dir_next+0x12c>
 800dc82:	2301      	movs	r3, #1
 800dc84:	e02a      	b.n	800dcdc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	3301      	adds	r3, #1
 800dc8a:	613b      	str	r3, [r7, #16]
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc90:	1c5a      	adds	r2, r3, #1
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	62da      	str	r2, [r3, #44]	; 0x2c
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	895b      	ldrh	r3, [r3, #10]
 800dc9a:	461a      	mov	r2, r3
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	4293      	cmp	r3, r2
 800dca0:	d3e6      	bcc.n	800dc70 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	1ad2      	subs	r2, r2, r3
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	697a      	ldr	r2, [r7, #20]
 800dcb2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800dcb4:	6979      	ldr	r1, [r7, #20]
 800dcb6:	68f8      	ldr	r0, [r7, #12]
 800dcb8:	f7ff fbf0 	bl	800d49c <clust2sect>
 800dcbc:	4602      	mov	r2, r0
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	68ba      	ldr	r2, [r7, #8]
 800dcc6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcd4:	441a      	add	r2, r3
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dcda:	2300      	movs	r3, #0
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3718      	adds	r7, #24
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b086      	sub	sp, #24
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
 800dcec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800dcf4:	2100      	movs	r1, #0
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f7ff feb4 	bl	800da64 <dir_sdi>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dd00:	7dfb      	ldrb	r3, [r7, #23]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d12b      	bne.n	800dd5e <dir_alloc+0x7a>
		n = 0;
 800dd06:	2300      	movs	r3, #0
 800dd08:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	69db      	ldr	r3, [r3, #28]
 800dd0e:	4619      	mov	r1, r3
 800dd10:	68f8      	ldr	r0, [r7, #12]
 800dd12:	f7ff fb27 	bl	800d364 <move_window>
 800dd16:	4603      	mov	r3, r0
 800dd18:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dd1a:	7dfb      	ldrb	r3, [r7, #23]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d11d      	bne.n	800dd5c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6a1b      	ldr	r3, [r3, #32]
 800dd24:	781b      	ldrb	r3, [r3, #0]
 800dd26:	2be5      	cmp	r3, #229	; 0xe5
 800dd28:	d004      	beq.n	800dd34 <dir_alloc+0x50>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6a1b      	ldr	r3, [r3, #32]
 800dd2e:	781b      	ldrb	r3, [r3, #0]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d107      	bne.n	800dd44 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	3301      	adds	r3, #1
 800dd38:	613b      	str	r3, [r7, #16]
 800dd3a:	693a      	ldr	r2, [r7, #16]
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d102      	bne.n	800dd48 <dir_alloc+0x64>
 800dd42:	e00c      	b.n	800dd5e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dd44:	2300      	movs	r3, #0
 800dd46:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dd48:	2101      	movs	r1, #1
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f7ff ff05 	bl	800db5a <dir_next>
 800dd50:	4603      	mov	r3, r0
 800dd52:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dd54:	7dfb      	ldrb	r3, [r7, #23]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d0d7      	beq.n	800dd0a <dir_alloc+0x26>
 800dd5a:	e000      	b.n	800dd5e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800dd5c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dd5e:	7dfb      	ldrb	r3, [r7, #23]
 800dd60:	2b04      	cmp	r3, #4
 800dd62:	d101      	bne.n	800dd68 <dir_alloc+0x84>
 800dd64:	2307      	movs	r3, #7
 800dd66:	75fb      	strb	r3, [r7, #23]
	return res;
 800dd68:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3718      	adds	r7, #24
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}

0800dd72 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dd72:	b580      	push	{r7, lr}
 800dd74:	b084      	sub	sp, #16
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	6078      	str	r0, [r7, #4]
 800dd7a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	331a      	adds	r3, #26
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7ff f83f 	bl	800ce04 <ld_word>
 800dd86:	4603      	mov	r3, r0
 800dd88:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	2b03      	cmp	r3, #3
 800dd90:	d109      	bne.n	800dda6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	3314      	adds	r3, #20
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7ff f834 	bl	800ce04 <ld_word>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	041b      	lsls	r3, r3, #16
 800dda0:	68fa      	ldr	r2, [r7, #12]
 800dda2:	4313      	orrs	r3, r2
 800dda4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dda6:	68fb      	ldr	r3, [r7, #12]
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3710      	adds	r7, #16
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	60f8      	str	r0, [r7, #12]
 800ddb8:	60b9      	str	r1, [r7, #8]
 800ddba:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	331a      	adds	r3, #26
 800ddc0:	687a      	ldr	r2, [r7, #4]
 800ddc2:	b292      	uxth	r2, r2
 800ddc4:	4611      	mov	r1, r2
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f7ff f857 	bl	800ce7a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	781b      	ldrb	r3, [r3, #0]
 800ddd0:	2b03      	cmp	r3, #3
 800ddd2:	d109      	bne.n	800dde8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	f103 0214 	add.w	r2, r3, #20
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	0c1b      	lsrs	r3, r3, #16
 800ddde:	b29b      	uxth	r3, r3
 800dde0:	4619      	mov	r1, r3
 800dde2:	4610      	mov	r0, r2
 800dde4:	f7ff f849 	bl	800ce7a <st_word>
	}
}
 800dde8:	bf00      	nop
 800ddea:	3710      	adds	r7, #16
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b086      	sub	sp, #24
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ddfe:	2100      	movs	r1, #0
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f7ff fe2f 	bl	800da64 <dir_sdi>
 800de06:	4603      	mov	r3, r0
 800de08:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800de0a:	7dfb      	ldrb	r3, [r7, #23]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d001      	beq.n	800de14 <dir_find+0x24>
 800de10:	7dfb      	ldrb	r3, [r7, #23]
 800de12:	e03e      	b.n	800de92 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	69db      	ldr	r3, [r3, #28]
 800de18:	4619      	mov	r1, r3
 800de1a:	6938      	ldr	r0, [r7, #16]
 800de1c:	f7ff faa2 	bl	800d364 <move_window>
 800de20:	4603      	mov	r3, r0
 800de22:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800de24:	7dfb      	ldrb	r3, [r7, #23]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d12f      	bne.n	800de8a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6a1b      	ldr	r3, [r3, #32]
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800de32:	7bfb      	ldrb	r3, [r7, #15]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d102      	bne.n	800de3e <dir_find+0x4e>
 800de38:	2304      	movs	r3, #4
 800de3a:	75fb      	strb	r3, [r7, #23]
 800de3c:	e028      	b.n	800de90 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6a1b      	ldr	r3, [r3, #32]
 800de42:	330b      	adds	r3, #11
 800de44:	781b      	ldrb	r3, [r3, #0]
 800de46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de4a:	b2da      	uxtb	r2, r3
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6a1b      	ldr	r3, [r3, #32]
 800de54:	330b      	adds	r3, #11
 800de56:	781b      	ldrb	r3, [r3, #0]
 800de58:	f003 0308 	and.w	r3, r3, #8
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d10a      	bne.n	800de76 <dir_find+0x86>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	6a18      	ldr	r0, [r3, #32]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	3324      	adds	r3, #36	; 0x24
 800de68:	220b      	movs	r2, #11
 800de6a:	4619      	mov	r1, r3
 800de6c:	f7ff f888 	bl	800cf80 <mem_cmp>
 800de70:	4603      	mov	r3, r0
 800de72:	2b00      	cmp	r3, #0
 800de74:	d00b      	beq.n	800de8e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800de76:	2100      	movs	r1, #0
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f7ff fe6e 	bl	800db5a <dir_next>
 800de7e:	4603      	mov	r3, r0
 800de80:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800de82:	7dfb      	ldrb	r3, [r7, #23]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d0c5      	beq.n	800de14 <dir_find+0x24>
 800de88:	e002      	b.n	800de90 <dir_find+0xa0>
		if (res != FR_OK) break;
 800de8a:	bf00      	nop
 800de8c:	e000      	b.n	800de90 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800de8e:	bf00      	nop

	return res;
 800de90:	7dfb      	ldrb	r3, [r7, #23]
}
 800de92:	4618      	mov	r0, r3
 800de94:	3718      	adds	r7, #24
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}

0800de9a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800de9a:	b580      	push	{r7, lr}
 800de9c:	b084      	sub	sp, #16
 800de9e:	af00      	add	r7, sp, #0
 800dea0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800dea8:	2101      	movs	r1, #1
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f7ff ff1a 	bl	800dce4 <dir_alloc>
 800deb0:	4603      	mov	r3, r0
 800deb2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800deb4:	7bfb      	ldrb	r3, [r7, #15]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d11c      	bne.n	800def4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	69db      	ldr	r3, [r3, #28]
 800debe:	4619      	mov	r1, r3
 800dec0:	68b8      	ldr	r0, [r7, #8]
 800dec2:	f7ff fa4f 	bl	800d364 <move_window>
 800dec6:	4603      	mov	r3, r0
 800dec8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800deca:	7bfb      	ldrb	r3, [r7, #15]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d111      	bne.n	800def4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6a1b      	ldr	r3, [r3, #32]
 800ded4:	2220      	movs	r2, #32
 800ded6:	2100      	movs	r1, #0
 800ded8:	4618      	mov	r0, r3
 800deda:	f7ff f836 	bl	800cf4a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6a18      	ldr	r0, [r3, #32]
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	3324      	adds	r3, #36	; 0x24
 800dee6:	220b      	movs	r2, #11
 800dee8:	4619      	mov	r1, r3
 800deea:	f7ff f80d 	bl	800cf08 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	2201      	movs	r2, #1
 800def2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800def4:	7bfb      	ldrb	r3, [r7, #15]
}
 800def6:	4618      	mov	r0, r3
 800def8:	3710      	adds	r7, #16
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
	...

0800df00 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b088      	sub	sp, #32
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	60fb      	str	r3, [r7, #12]
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	3324      	adds	r3, #36	; 0x24
 800df14:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800df16:	220b      	movs	r2, #11
 800df18:	2120      	movs	r1, #32
 800df1a:	68b8      	ldr	r0, [r7, #8]
 800df1c:	f7ff f815 	bl	800cf4a <mem_set>
	si = i = 0; ni = 8;
 800df20:	2300      	movs	r3, #0
 800df22:	613b      	str	r3, [r7, #16]
 800df24:	693b      	ldr	r3, [r7, #16]
 800df26:	61fb      	str	r3, [r7, #28]
 800df28:	2308      	movs	r3, #8
 800df2a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800df2c:	69fb      	ldr	r3, [r7, #28]
 800df2e:	1c5a      	adds	r2, r3, #1
 800df30:	61fa      	str	r2, [r7, #28]
 800df32:	68fa      	ldr	r2, [r7, #12]
 800df34:	4413      	add	r3, r2
 800df36:	781b      	ldrb	r3, [r3, #0]
 800df38:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800df3a:	7efb      	ldrb	r3, [r7, #27]
 800df3c:	2b20      	cmp	r3, #32
 800df3e:	d94e      	bls.n	800dfde <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800df40:	7efb      	ldrb	r3, [r7, #27]
 800df42:	2b2f      	cmp	r3, #47	; 0x2f
 800df44:	d006      	beq.n	800df54 <create_name+0x54>
 800df46:	7efb      	ldrb	r3, [r7, #27]
 800df48:	2b5c      	cmp	r3, #92	; 0x5c
 800df4a:	d110      	bne.n	800df6e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800df4c:	e002      	b.n	800df54 <create_name+0x54>
 800df4e:	69fb      	ldr	r3, [r7, #28]
 800df50:	3301      	adds	r3, #1
 800df52:	61fb      	str	r3, [r7, #28]
 800df54:	68fa      	ldr	r2, [r7, #12]
 800df56:	69fb      	ldr	r3, [r7, #28]
 800df58:	4413      	add	r3, r2
 800df5a:	781b      	ldrb	r3, [r3, #0]
 800df5c:	2b2f      	cmp	r3, #47	; 0x2f
 800df5e:	d0f6      	beq.n	800df4e <create_name+0x4e>
 800df60:	68fa      	ldr	r2, [r7, #12]
 800df62:	69fb      	ldr	r3, [r7, #28]
 800df64:	4413      	add	r3, r2
 800df66:	781b      	ldrb	r3, [r3, #0]
 800df68:	2b5c      	cmp	r3, #92	; 0x5c
 800df6a:	d0f0      	beq.n	800df4e <create_name+0x4e>
			break;
 800df6c:	e038      	b.n	800dfe0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800df6e:	7efb      	ldrb	r3, [r7, #27]
 800df70:	2b2e      	cmp	r3, #46	; 0x2e
 800df72:	d003      	beq.n	800df7c <create_name+0x7c>
 800df74:	693a      	ldr	r2, [r7, #16]
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	429a      	cmp	r2, r3
 800df7a:	d30c      	bcc.n	800df96 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	2b0b      	cmp	r3, #11
 800df80:	d002      	beq.n	800df88 <create_name+0x88>
 800df82:	7efb      	ldrb	r3, [r7, #27]
 800df84:	2b2e      	cmp	r3, #46	; 0x2e
 800df86:	d001      	beq.n	800df8c <create_name+0x8c>
 800df88:	2306      	movs	r3, #6
 800df8a:	e044      	b.n	800e016 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800df8c:	2308      	movs	r3, #8
 800df8e:	613b      	str	r3, [r7, #16]
 800df90:	230b      	movs	r3, #11
 800df92:	617b      	str	r3, [r7, #20]
			continue;
 800df94:	e022      	b.n	800dfdc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800df96:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	da04      	bge.n	800dfa8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800df9e:	7efb      	ldrb	r3, [r7, #27]
 800dfa0:	3b80      	subs	r3, #128	; 0x80
 800dfa2:	4a1f      	ldr	r2, [pc, #124]	; (800e020 <create_name+0x120>)
 800dfa4:	5cd3      	ldrb	r3, [r2, r3]
 800dfa6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800dfa8:	7efb      	ldrb	r3, [r7, #27]
 800dfaa:	4619      	mov	r1, r3
 800dfac:	481d      	ldr	r0, [pc, #116]	; (800e024 <create_name+0x124>)
 800dfae:	f7ff f80e 	bl	800cfce <chk_chr>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d001      	beq.n	800dfbc <create_name+0xbc>
 800dfb8:	2306      	movs	r3, #6
 800dfba:	e02c      	b.n	800e016 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800dfbc:	7efb      	ldrb	r3, [r7, #27]
 800dfbe:	2b60      	cmp	r3, #96	; 0x60
 800dfc0:	d905      	bls.n	800dfce <create_name+0xce>
 800dfc2:	7efb      	ldrb	r3, [r7, #27]
 800dfc4:	2b7a      	cmp	r3, #122	; 0x7a
 800dfc6:	d802      	bhi.n	800dfce <create_name+0xce>
 800dfc8:	7efb      	ldrb	r3, [r7, #27]
 800dfca:	3b20      	subs	r3, #32
 800dfcc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	1c5a      	adds	r2, r3, #1
 800dfd2:	613a      	str	r2, [r7, #16]
 800dfd4:	68ba      	ldr	r2, [r7, #8]
 800dfd6:	4413      	add	r3, r2
 800dfd8:	7efa      	ldrb	r2, [r7, #27]
 800dfda:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800dfdc:	e7a6      	b.n	800df2c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800dfde:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800dfe0:	68fa      	ldr	r2, [r7, #12]
 800dfe2:	69fb      	ldr	r3, [r7, #28]
 800dfe4:	441a      	add	r2, r3
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d101      	bne.n	800dff4 <create_name+0xf4>
 800dff0:	2306      	movs	r3, #6
 800dff2:	e010      	b.n	800e016 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	781b      	ldrb	r3, [r3, #0]
 800dff8:	2be5      	cmp	r3, #229	; 0xe5
 800dffa:	d102      	bne.n	800e002 <create_name+0x102>
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	2205      	movs	r2, #5
 800e000:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e002:	7efb      	ldrb	r3, [r7, #27]
 800e004:	2b20      	cmp	r3, #32
 800e006:	d801      	bhi.n	800e00c <create_name+0x10c>
 800e008:	2204      	movs	r2, #4
 800e00a:	e000      	b.n	800e00e <create_name+0x10e>
 800e00c:	2200      	movs	r2, #0
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	330b      	adds	r3, #11
 800e012:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e014:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800e016:	4618      	mov	r0, r3
 800e018:	3720      	adds	r7, #32
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}
 800e01e:	bf00      	nop
 800e020:	08011918 	.word	0x08011918
 800e024:	08011808 	.word	0x08011808

0800e028 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b086      	sub	sp, #24
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e03c:	e002      	b.n	800e044 <follow_path+0x1c>
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	3301      	adds	r3, #1
 800e042:	603b      	str	r3, [r7, #0]
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	2b2f      	cmp	r3, #47	; 0x2f
 800e04a:	d0f8      	beq.n	800e03e <follow_path+0x16>
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	2b5c      	cmp	r3, #92	; 0x5c
 800e052:	d0f4      	beq.n	800e03e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	2200      	movs	r2, #0
 800e058:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	2b1f      	cmp	r3, #31
 800e060:	d80a      	bhi.n	800e078 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2280      	movs	r2, #128	; 0x80
 800e066:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e06a:	2100      	movs	r1, #0
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f7ff fcf9 	bl	800da64 <dir_sdi>
 800e072:	4603      	mov	r3, r0
 800e074:	75fb      	strb	r3, [r7, #23]
 800e076:	e043      	b.n	800e100 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e078:	463b      	mov	r3, r7
 800e07a:	4619      	mov	r1, r3
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f7ff ff3f 	bl	800df00 <create_name>
 800e082:	4603      	mov	r3, r0
 800e084:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e086:	7dfb      	ldrb	r3, [r7, #23]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d134      	bne.n	800e0f6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f7ff feaf 	bl	800ddf0 <dir_find>
 800e092:	4603      	mov	r3, r0
 800e094:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e09c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e09e:	7dfb      	ldrb	r3, [r7, #23]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d00a      	beq.n	800e0ba <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e0a4:	7dfb      	ldrb	r3, [r7, #23]
 800e0a6:	2b04      	cmp	r3, #4
 800e0a8:	d127      	bne.n	800e0fa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e0aa:	7afb      	ldrb	r3, [r7, #11]
 800e0ac:	f003 0304 	and.w	r3, r3, #4
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d122      	bne.n	800e0fa <follow_path+0xd2>
 800e0b4:	2305      	movs	r3, #5
 800e0b6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e0b8:	e01f      	b.n	800e0fa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e0ba:	7afb      	ldrb	r3, [r7, #11]
 800e0bc:	f003 0304 	and.w	r3, r3, #4
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d11c      	bne.n	800e0fe <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	799b      	ldrb	r3, [r3, #6]
 800e0c8:	f003 0310 	and.w	r3, r3, #16
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d102      	bne.n	800e0d6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e0d0:	2305      	movs	r3, #5
 800e0d2:	75fb      	strb	r3, [r7, #23]
 800e0d4:	e014      	b.n	800e100 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	695b      	ldr	r3, [r3, #20]
 800e0e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0e4:	4413      	add	r3, r2
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	68f8      	ldr	r0, [r7, #12]
 800e0ea:	f7ff fe42 	bl	800dd72 <ld_clust>
 800e0ee:	4602      	mov	r2, r0
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e0f4:	e7c0      	b.n	800e078 <follow_path+0x50>
			if (res != FR_OK) break;
 800e0f6:	bf00      	nop
 800e0f8:	e002      	b.n	800e100 <follow_path+0xd8>
				break;
 800e0fa:	bf00      	nop
 800e0fc:	e000      	b.n	800e100 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e0fe:	bf00      	nop
			}
		}
	}

	return res;
 800e100:	7dfb      	ldrb	r3, [r7, #23]
}
 800e102:	4618      	mov	r0, r3
 800e104:	3718      	adds	r7, #24
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}

0800e10a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e10a:	b480      	push	{r7}
 800e10c:	b087      	sub	sp, #28
 800e10e:	af00      	add	r7, sp, #0
 800e110:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e116:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d031      	beq.n	800e184 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	617b      	str	r3, [r7, #20]
 800e126:	e002      	b.n	800e12e <get_ldnumber+0x24>
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	3301      	adds	r3, #1
 800e12c:	617b      	str	r3, [r7, #20]
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	781b      	ldrb	r3, [r3, #0]
 800e132:	2b20      	cmp	r3, #32
 800e134:	d903      	bls.n	800e13e <get_ldnumber+0x34>
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	781b      	ldrb	r3, [r3, #0]
 800e13a:	2b3a      	cmp	r3, #58	; 0x3a
 800e13c:	d1f4      	bne.n	800e128 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	781b      	ldrb	r3, [r3, #0]
 800e142:	2b3a      	cmp	r3, #58	; 0x3a
 800e144:	d11c      	bne.n	800e180 <get_ldnumber+0x76>
			tp = *path;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	1c5a      	adds	r2, r3, #1
 800e150:	60fa      	str	r2, [r7, #12]
 800e152:	781b      	ldrb	r3, [r3, #0]
 800e154:	3b30      	subs	r3, #48	; 0x30
 800e156:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	2b09      	cmp	r3, #9
 800e15c:	d80e      	bhi.n	800e17c <get_ldnumber+0x72>
 800e15e:	68fa      	ldr	r2, [r7, #12]
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	429a      	cmp	r2, r3
 800e164:	d10a      	bne.n	800e17c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d107      	bne.n	800e17c <get_ldnumber+0x72>
					vol = (int)i;
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	3301      	adds	r3, #1
 800e174:	617b      	str	r3, [r7, #20]
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	697a      	ldr	r2, [r7, #20]
 800e17a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e17c:	693b      	ldr	r3, [r7, #16]
 800e17e:	e002      	b.n	800e186 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e180:	2300      	movs	r3, #0
 800e182:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e184:	693b      	ldr	r3, [r7, #16]
}
 800e186:	4618      	mov	r0, r3
 800e188:	371c      	adds	r7, #28
 800e18a:	46bd      	mov	sp, r7
 800e18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e190:	4770      	bx	lr
	...

0800e194 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b082      	sub	sp, #8
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
 800e19c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	70da      	strb	r2, [r3, #3]
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e1aa:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e1ac:	6839      	ldr	r1, [r7, #0]
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f7ff f8d8 	bl	800d364 <move_window>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d001      	beq.n	800e1be <check_fs+0x2a>
 800e1ba:	2304      	movs	r3, #4
 800e1bc:	e038      	b.n	800e230 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	3330      	adds	r3, #48	; 0x30
 800e1c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7fe fe1c 	bl	800ce04 <ld_word>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d001      	beq.n	800e1dc <check_fs+0x48>
 800e1d8:	2303      	movs	r3, #3
 800e1da:	e029      	b.n	800e230 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e1e2:	2be9      	cmp	r3, #233	; 0xe9
 800e1e4:	d009      	beq.n	800e1fa <check_fs+0x66>
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e1ec:	2beb      	cmp	r3, #235	; 0xeb
 800e1ee:	d11e      	bne.n	800e22e <check_fs+0x9a>
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e1f6:	2b90      	cmp	r3, #144	; 0x90
 800e1f8:	d119      	bne.n	800e22e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	3330      	adds	r3, #48	; 0x30
 800e1fe:	3336      	adds	r3, #54	; 0x36
 800e200:	4618      	mov	r0, r3
 800e202:	f7fe fe17 	bl	800ce34 <ld_dword>
 800e206:	4603      	mov	r3, r0
 800e208:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e20c:	4a0a      	ldr	r2, [pc, #40]	; (800e238 <check_fs+0xa4>)
 800e20e:	4293      	cmp	r3, r2
 800e210:	d101      	bne.n	800e216 <check_fs+0x82>
 800e212:	2300      	movs	r3, #0
 800e214:	e00c      	b.n	800e230 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	3330      	adds	r3, #48	; 0x30
 800e21a:	3352      	adds	r3, #82	; 0x52
 800e21c:	4618      	mov	r0, r3
 800e21e:	f7fe fe09 	bl	800ce34 <ld_dword>
 800e222:	4603      	mov	r3, r0
 800e224:	4a05      	ldr	r2, [pc, #20]	; (800e23c <check_fs+0xa8>)
 800e226:	4293      	cmp	r3, r2
 800e228:	d101      	bne.n	800e22e <check_fs+0x9a>
 800e22a:	2300      	movs	r3, #0
 800e22c:	e000      	b.n	800e230 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e22e:	2302      	movs	r3, #2
}
 800e230:	4618      	mov	r0, r3
 800e232:	3708      	adds	r7, #8
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}
 800e238:	00544146 	.word	0x00544146
 800e23c:	33544146 	.word	0x33544146

0800e240 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b096      	sub	sp, #88	; 0x58
 800e244:	af00      	add	r7, sp, #0
 800e246:	60f8      	str	r0, [r7, #12]
 800e248:	60b9      	str	r1, [r7, #8]
 800e24a:	4613      	mov	r3, r2
 800e24c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	2200      	movs	r2, #0
 800e252:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e254:	68f8      	ldr	r0, [r7, #12]
 800e256:	f7ff ff58 	bl	800e10a <get_ldnumber>
 800e25a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e25c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e25e:	2b00      	cmp	r3, #0
 800e260:	da01      	bge.n	800e266 <find_volume+0x26>
 800e262:	230b      	movs	r3, #11
 800e264:	e22d      	b.n	800e6c2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e266:	4aa1      	ldr	r2, [pc, #644]	; (800e4ec <find_volume+0x2ac>)
 800e268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e26a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e26e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e272:	2b00      	cmp	r3, #0
 800e274:	d101      	bne.n	800e27a <find_volume+0x3a>
 800e276:	230c      	movs	r3, #12
 800e278:	e223      	b.n	800e6c2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e27e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e280:	79fb      	ldrb	r3, [r7, #7]
 800e282:	f023 0301 	bic.w	r3, r3, #1
 800e286:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e28a:	781b      	ldrb	r3, [r3, #0]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d01a      	beq.n	800e2c6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e292:	785b      	ldrb	r3, [r3, #1]
 800e294:	4618      	mov	r0, r3
 800e296:	f7fe fd17 	bl	800ccc8 <disk_status>
 800e29a:	4603      	mov	r3, r0
 800e29c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e2a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e2a4:	f003 0301 	and.w	r3, r3, #1
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d10c      	bne.n	800e2c6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e2ac:	79fb      	ldrb	r3, [r7, #7]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d007      	beq.n	800e2c2 <find_volume+0x82>
 800e2b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e2b6:	f003 0304 	and.w	r3, r3, #4
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d001      	beq.n	800e2c2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e2be:	230a      	movs	r3, #10
 800e2c0:	e1ff      	b.n	800e6c2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	e1fd      	b.n	800e6c2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e2cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2ce:	b2da      	uxtb	r2, r3
 800e2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d6:	785b      	ldrb	r3, [r3, #1]
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f7fe fd0f 	bl	800ccfc <disk_initialize>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e2e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e2e8:	f003 0301 	and.w	r3, r3, #1
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d001      	beq.n	800e2f4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e2f0:	2303      	movs	r3, #3
 800e2f2:	e1e6      	b.n	800e6c2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e2f4:	79fb      	ldrb	r3, [r7, #7]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d007      	beq.n	800e30a <find_volume+0xca>
 800e2fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e2fe:	f003 0304 	and.w	r3, r3, #4
 800e302:	2b00      	cmp	r3, #0
 800e304:	d001      	beq.n	800e30a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e306:	230a      	movs	r3, #10
 800e308:	e1db      	b.n	800e6c2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e30a:	2300      	movs	r3, #0
 800e30c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e30e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e310:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e312:	f7ff ff3f 	bl	800e194 <check_fs>
 800e316:	4603      	mov	r3, r0
 800e318:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e31c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e320:	2b02      	cmp	r3, #2
 800e322:	d149      	bne.n	800e3b8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e324:	2300      	movs	r3, #0
 800e326:	643b      	str	r3, [r7, #64]	; 0x40
 800e328:	e01e      	b.n	800e368 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e32c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e332:	011b      	lsls	r3, r3, #4
 800e334:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e338:	4413      	add	r3, r2
 800e33a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e33e:	3304      	adds	r3, #4
 800e340:	781b      	ldrb	r3, [r3, #0]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d006      	beq.n	800e354 <find_volume+0x114>
 800e346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e348:	3308      	adds	r3, #8
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7fe fd72 	bl	800ce34 <ld_dword>
 800e350:	4602      	mov	r2, r0
 800e352:	e000      	b.n	800e356 <find_volume+0x116>
 800e354:	2200      	movs	r2, #0
 800e356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e358:	009b      	lsls	r3, r3, #2
 800e35a:	3358      	adds	r3, #88	; 0x58
 800e35c:	443b      	add	r3, r7
 800e35e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e364:	3301      	adds	r3, #1
 800e366:	643b      	str	r3, [r7, #64]	; 0x40
 800e368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e36a:	2b03      	cmp	r3, #3
 800e36c:	d9dd      	bls.n	800e32a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e36e:	2300      	movs	r3, #0
 800e370:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e374:	2b00      	cmp	r3, #0
 800e376:	d002      	beq.n	800e37e <find_volume+0x13e>
 800e378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e37a:	3b01      	subs	r3, #1
 800e37c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e37e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e380:	009b      	lsls	r3, r3, #2
 800e382:	3358      	adds	r3, #88	; 0x58
 800e384:	443b      	add	r3, r7
 800e386:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e38a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e38c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d005      	beq.n	800e39e <find_volume+0x15e>
 800e392:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e394:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e396:	f7ff fefd 	bl	800e194 <check_fs>
 800e39a:	4603      	mov	r3, r0
 800e39c:	e000      	b.n	800e3a0 <find_volume+0x160>
 800e39e:	2303      	movs	r3, #3
 800e3a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e3a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d905      	bls.n	800e3b8 <find_volume+0x178>
 800e3ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	643b      	str	r3, [r7, #64]	; 0x40
 800e3b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3b4:	2b03      	cmp	r3, #3
 800e3b6:	d9e2      	bls.n	800e37e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e3b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e3bc:	2b04      	cmp	r3, #4
 800e3be:	d101      	bne.n	800e3c4 <find_volume+0x184>
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	e17e      	b.n	800e6c2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e3c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e3c8:	2b01      	cmp	r3, #1
 800e3ca:	d901      	bls.n	800e3d0 <find_volume+0x190>
 800e3cc:	230d      	movs	r3, #13
 800e3ce:	e178      	b.n	800e6c2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d2:	3330      	adds	r3, #48	; 0x30
 800e3d4:	330b      	adds	r3, #11
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fe fd14 	bl	800ce04 <ld_word>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3e2:	d001      	beq.n	800e3e8 <find_volume+0x1a8>
 800e3e4:	230d      	movs	r3, #13
 800e3e6:	e16c      	b.n	800e6c2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ea:	3330      	adds	r3, #48	; 0x30
 800e3ec:	3316      	adds	r3, #22
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f7fe fd08 	bl	800ce04 <ld_word>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e3f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d106      	bne.n	800e40c <find_volume+0x1cc>
 800e3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e400:	3330      	adds	r3, #48	; 0x30
 800e402:	3324      	adds	r3, #36	; 0x24
 800e404:	4618      	mov	r0, r3
 800e406:	f7fe fd15 	bl	800ce34 <ld_dword>
 800e40a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e40e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e410:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e414:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800e418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e41a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e41e:	789b      	ldrb	r3, [r3, #2]
 800e420:	2b01      	cmp	r3, #1
 800e422:	d005      	beq.n	800e430 <find_volume+0x1f0>
 800e424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e426:	789b      	ldrb	r3, [r3, #2]
 800e428:	2b02      	cmp	r3, #2
 800e42a:	d001      	beq.n	800e430 <find_volume+0x1f0>
 800e42c:	230d      	movs	r3, #13
 800e42e:	e148      	b.n	800e6c2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e432:	789b      	ldrb	r3, [r3, #2]
 800e434:	461a      	mov	r2, r3
 800e436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e438:	fb02 f303 	mul.w	r3, r2, r3
 800e43c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e444:	b29a      	uxth	r2, r3
 800e446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e448:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e44c:	895b      	ldrh	r3, [r3, #10]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d008      	beq.n	800e464 <find_volume+0x224>
 800e452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e454:	895b      	ldrh	r3, [r3, #10]
 800e456:	461a      	mov	r2, r3
 800e458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e45a:	895b      	ldrh	r3, [r3, #10]
 800e45c:	3b01      	subs	r3, #1
 800e45e:	4013      	ands	r3, r2
 800e460:	2b00      	cmp	r3, #0
 800e462:	d001      	beq.n	800e468 <find_volume+0x228>
 800e464:	230d      	movs	r3, #13
 800e466:	e12c      	b.n	800e6c2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e46a:	3330      	adds	r3, #48	; 0x30
 800e46c:	3311      	adds	r3, #17
 800e46e:	4618      	mov	r0, r3
 800e470:	f7fe fcc8 	bl	800ce04 <ld_word>
 800e474:	4603      	mov	r3, r0
 800e476:	461a      	mov	r2, r3
 800e478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47e:	891b      	ldrh	r3, [r3, #8]
 800e480:	f003 030f 	and.w	r3, r3, #15
 800e484:	b29b      	uxth	r3, r3
 800e486:	2b00      	cmp	r3, #0
 800e488:	d001      	beq.n	800e48e <find_volume+0x24e>
 800e48a:	230d      	movs	r3, #13
 800e48c:	e119      	b.n	800e6c2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e490:	3330      	adds	r3, #48	; 0x30
 800e492:	3313      	adds	r3, #19
 800e494:	4618      	mov	r0, r3
 800e496:	f7fe fcb5 	bl	800ce04 <ld_word>
 800e49a:	4603      	mov	r3, r0
 800e49c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e49e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d106      	bne.n	800e4b2 <find_volume+0x272>
 800e4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a6:	3330      	adds	r3, #48	; 0x30
 800e4a8:	3320      	adds	r3, #32
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f7fe fcc2 	bl	800ce34 <ld_dword>
 800e4b0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b4:	3330      	adds	r3, #48	; 0x30
 800e4b6:	330e      	adds	r3, #14
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f7fe fca3 	bl	800ce04 <ld_word>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e4c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d101      	bne.n	800e4cc <find_volume+0x28c>
 800e4c8:	230d      	movs	r3, #13
 800e4ca:	e0fa      	b.n	800e6c2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e4cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e4ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4d0:	4413      	add	r3, r2
 800e4d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4d4:	8912      	ldrh	r2, [r2, #8]
 800e4d6:	0912      	lsrs	r2, r2, #4
 800e4d8:	b292      	uxth	r2, r2
 800e4da:	4413      	add	r3, r2
 800e4dc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e4de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	d204      	bcs.n	800e4f0 <find_volume+0x2b0>
 800e4e6:	230d      	movs	r3, #13
 800e4e8:	e0eb      	b.n	800e6c2 <find_volume+0x482>
 800e4ea:	bf00      	nop
 800e4ec:	20000978 	.word	0x20000978
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e4f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f4:	1ad3      	subs	r3, r2, r3
 800e4f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4f8:	8952      	ldrh	r2, [r2, #10]
 800e4fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800e4fe:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e502:	2b00      	cmp	r3, #0
 800e504:	d101      	bne.n	800e50a <find_volume+0x2ca>
 800e506:	230d      	movs	r3, #13
 800e508:	e0db      	b.n	800e6c2 <find_volume+0x482>
		fmt = FS_FAT32;
 800e50a:	2303      	movs	r3, #3
 800e50c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e512:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e516:	4293      	cmp	r3, r2
 800e518:	d802      	bhi.n	800e520 <find_volume+0x2e0>
 800e51a:	2302      	movs	r3, #2
 800e51c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e522:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e526:	4293      	cmp	r3, r2
 800e528:	d802      	bhi.n	800e530 <find_volume+0x2f0>
 800e52a:	2301      	movs	r3, #1
 800e52c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e532:	1c9a      	adds	r2, r3, #2
 800e534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e536:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e53a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e53c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e53e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e542:	441a      	add	r2, r3
 800e544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e546:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e548:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54c:	441a      	add	r2, r3
 800e54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e550:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800e552:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e556:	2b03      	cmp	r3, #3
 800e558:	d11e      	bne.n	800e598 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e55c:	3330      	adds	r3, #48	; 0x30
 800e55e:	332a      	adds	r3, #42	; 0x2a
 800e560:	4618      	mov	r0, r3
 800e562:	f7fe fc4f 	bl	800ce04 <ld_word>
 800e566:	4603      	mov	r3, r0
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d001      	beq.n	800e570 <find_volume+0x330>
 800e56c:	230d      	movs	r3, #13
 800e56e:	e0a8      	b.n	800e6c2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e572:	891b      	ldrh	r3, [r3, #8]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d001      	beq.n	800e57c <find_volume+0x33c>
 800e578:	230d      	movs	r3, #13
 800e57a:	e0a2      	b.n	800e6c2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e57e:	3330      	adds	r3, #48	; 0x30
 800e580:	332c      	adds	r3, #44	; 0x2c
 800e582:	4618      	mov	r0, r3
 800e584:	f7fe fc56 	bl	800ce34 <ld_dword>
 800e588:	4602      	mov	r2, r0
 800e58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e58c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e590:	695b      	ldr	r3, [r3, #20]
 800e592:	009b      	lsls	r3, r3, #2
 800e594:	647b      	str	r3, [r7, #68]	; 0x44
 800e596:	e01f      	b.n	800e5d8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e59a:	891b      	ldrh	r3, [r3, #8]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d101      	bne.n	800e5a4 <find_volume+0x364>
 800e5a0:	230d      	movs	r3, #13
 800e5a2:	e08e      	b.n	800e6c2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a6:	6a1a      	ldr	r2, [r3, #32]
 800e5a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5aa:	441a      	add	r2, r3
 800e5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ae:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e5b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e5b4:	2b02      	cmp	r3, #2
 800e5b6:	d103      	bne.n	800e5c0 <find_volume+0x380>
 800e5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ba:	695b      	ldr	r3, [r3, #20]
 800e5bc:	005b      	lsls	r3, r3, #1
 800e5be:	e00a      	b.n	800e5d6 <find_volume+0x396>
 800e5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c2:	695a      	ldr	r2, [r3, #20]
 800e5c4:	4613      	mov	r3, r2
 800e5c6:	005b      	lsls	r3, r3, #1
 800e5c8:	4413      	add	r3, r2
 800e5ca:	085a      	lsrs	r2, r3, #1
 800e5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ce:	695b      	ldr	r3, [r3, #20]
 800e5d0:	f003 0301 	and.w	r3, r3, #1
 800e5d4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e5d6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5da:	699a      	ldr	r2, [r3, #24]
 800e5dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5de:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e5e2:	0a5b      	lsrs	r3, r3, #9
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d201      	bcs.n	800e5ec <find_volume+0x3ac>
 800e5e8:	230d      	movs	r3, #13
 800e5ea:	e06a      	b.n	800e6c2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e5f2:	611a      	str	r2, [r3, #16]
 800e5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f6:	691a      	ldr	r2, [r3, #16]
 800e5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5fa:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5fe:	2280      	movs	r2, #128	; 0x80
 800e600:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e602:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e606:	2b03      	cmp	r3, #3
 800e608:	d149      	bne.n	800e69e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e60c:	3330      	adds	r3, #48	; 0x30
 800e60e:	3330      	adds	r3, #48	; 0x30
 800e610:	4618      	mov	r0, r3
 800e612:	f7fe fbf7 	bl	800ce04 <ld_word>
 800e616:	4603      	mov	r3, r0
 800e618:	2b01      	cmp	r3, #1
 800e61a:	d140      	bne.n	800e69e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e61c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e61e:	3301      	adds	r3, #1
 800e620:	4619      	mov	r1, r3
 800e622:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e624:	f7fe fe9e 	bl	800d364 <move_window>
 800e628:	4603      	mov	r3, r0
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d137      	bne.n	800e69e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e630:	2200      	movs	r2, #0
 800e632:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e636:	3330      	adds	r3, #48	; 0x30
 800e638:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e63c:	4618      	mov	r0, r3
 800e63e:	f7fe fbe1 	bl	800ce04 <ld_word>
 800e642:	4603      	mov	r3, r0
 800e644:	461a      	mov	r2, r3
 800e646:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d127      	bne.n	800e69e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e650:	3330      	adds	r3, #48	; 0x30
 800e652:	4618      	mov	r0, r3
 800e654:	f7fe fbee 	bl	800ce34 <ld_dword>
 800e658:	4603      	mov	r3, r0
 800e65a:	4a1c      	ldr	r2, [pc, #112]	; (800e6cc <find_volume+0x48c>)
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d11e      	bne.n	800e69e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e662:	3330      	adds	r3, #48	; 0x30
 800e664:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e668:	4618      	mov	r0, r3
 800e66a:	f7fe fbe3 	bl	800ce34 <ld_dword>
 800e66e:	4603      	mov	r3, r0
 800e670:	4a17      	ldr	r2, [pc, #92]	; (800e6d0 <find_volume+0x490>)
 800e672:	4293      	cmp	r3, r2
 800e674:	d113      	bne.n	800e69e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e678:	3330      	adds	r3, #48	; 0x30
 800e67a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e67e:	4618      	mov	r0, r3
 800e680:	f7fe fbd8 	bl	800ce34 <ld_dword>
 800e684:	4602      	mov	r2, r0
 800e686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e688:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e68c:	3330      	adds	r3, #48	; 0x30
 800e68e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e692:	4618      	mov	r0, r3
 800e694:	f7fe fbce 	bl	800ce34 <ld_dword>
 800e698:	4602      	mov	r2, r0
 800e69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e69c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6a0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e6a4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e6a6:	4b0b      	ldr	r3, [pc, #44]	; (800e6d4 <find_volume+0x494>)
 800e6a8:	881b      	ldrh	r3, [r3, #0]
 800e6aa:	3301      	adds	r3, #1
 800e6ac:	b29a      	uxth	r2, r3
 800e6ae:	4b09      	ldr	r3, [pc, #36]	; (800e6d4 <find_volume+0x494>)
 800e6b0:	801a      	strh	r2, [r3, #0]
 800e6b2:	4b08      	ldr	r3, [pc, #32]	; (800e6d4 <find_volume+0x494>)
 800e6b4:	881a      	ldrh	r2, [r3, #0]
 800e6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6b8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e6ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e6bc:	f7fe fdea 	bl	800d294 <clear_lock>
#endif
	return FR_OK;
 800e6c0:	2300      	movs	r3, #0
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3758      	adds	r7, #88	; 0x58
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}
 800e6ca:	bf00      	nop
 800e6cc:	41615252 	.word	0x41615252
 800e6d0:	61417272 	.word	0x61417272
 800e6d4:	2000097c 	.word	0x2000097c

0800e6d8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b084      	sub	sp, #16
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
 800e6e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e6e2:	2309      	movs	r3, #9
 800e6e4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d01c      	beq.n	800e726 <validate+0x4e>
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d018      	beq.n	800e726 <validate+0x4e>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	781b      	ldrb	r3, [r3, #0]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d013      	beq.n	800e726 <validate+0x4e>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	889a      	ldrh	r2, [r3, #4]
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	88db      	ldrh	r3, [r3, #6]
 800e708:	429a      	cmp	r2, r3
 800e70a:	d10c      	bne.n	800e726 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	785b      	ldrb	r3, [r3, #1]
 800e712:	4618      	mov	r0, r3
 800e714:	f7fe fad8 	bl	800ccc8 <disk_status>
 800e718:	4603      	mov	r3, r0
 800e71a:	f003 0301 	and.w	r3, r3, #1
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d101      	bne.n	800e726 <validate+0x4e>
			res = FR_OK;
 800e722:	2300      	movs	r3, #0
 800e724:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e726:	7bfb      	ldrb	r3, [r7, #15]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d102      	bne.n	800e732 <validate+0x5a>
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	e000      	b.n	800e734 <validate+0x5c>
 800e732:	2300      	movs	r3, #0
 800e734:	683a      	ldr	r2, [r7, #0]
 800e736:	6013      	str	r3, [r2, #0]
	return res;
 800e738:	7bfb      	ldrb	r3, [r7, #15]
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	3710      	adds	r7, #16
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}
	...

0800e744 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b088      	sub	sp, #32
 800e748:	af00      	add	r7, sp, #0
 800e74a:	60f8      	str	r0, [r7, #12]
 800e74c:	60b9      	str	r1, [r7, #8]
 800e74e:	4613      	mov	r3, r2
 800e750:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e752:	68bb      	ldr	r3, [r7, #8]
 800e754:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e756:	f107 0310 	add.w	r3, r7, #16
 800e75a:	4618      	mov	r0, r3
 800e75c:	f7ff fcd5 	bl	800e10a <get_ldnumber>
 800e760:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e762:	69fb      	ldr	r3, [r7, #28]
 800e764:	2b00      	cmp	r3, #0
 800e766:	da01      	bge.n	800e76c <f_mount+0x28>
 800e768:	230b      	movs	r3, #11
 800e76a:	e02b      	b.n	800e7c4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e76c:	4a17      	ldr	r2, [pc, #92]	; (800e7cc <f_mount+0x88>)
 800e76e:	69fb      	ldr	r3, [r7, #28]
 800e770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e774:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e776:	69bb      	ldr	r3, [r7, #24]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d005      	beq.n	800e788 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e77c:	69b8      	ldr	r0, [r7, #24]
 800e77e:	f7fe fd89 	bl	800d294 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e782:	69bb      	ldr	r3, [r7, #24]
 800e784:	2200      	movs	r2, #0
 800e786:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d002      	beq.n	800e794 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	2200      	movs	r2, #0
 800e792:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e794:	68fa      	ldr	r2, [r7, #12]
 800e796:	490d      	ldr	r1, [pc, #52]	; (800e7cc <f_mount+0x88>)
 800e798:	69fb      	ldr	r3, [r7, #28]
 800e79a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d002      	beq.n	800e7aa <f_mount+0x66>
 800e7a4:	79fb      	ldrb	r3, [r7, #7]
 800e7a6:	2b01      	cmp	r3, #1
 800e7a8:	d001      	beq.n	800e7ae <f_mount+0x6a>
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	e00a      	b.n	800e7c4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e7ae:	f107 010c 	add.w	r1, r7, #12
 800e7b2:	f107 0308 	add.w	r3, r7, #8
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f7ff fd41 	bl	800e240 <find_volume>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e7c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3720      	adds	r7, #32
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}
 800e7cc:	20000978 	.word	0x20000978

0800e7d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b09a      	sub	sp, #104	; 0x68
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	60f8      	str	r0, [r7, #12]
 800e7d8:	60b9      	str	r1, [r7, #8]
 800e7da:	4613      	mov	r3, r2
 800e7dc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d101      	bne.n	800e7e8 <f_open+0x18>
 800e7e4:	2309      	movs	r3, #9
 800e7e6:	e1ad      	b.n	800eb44 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e7e8:	79fb      	ldrb	r3, [r7, #7]
 800e7ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e7ee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e7f0:	79fa      	ldrb	r2, [r7, #7]
 800e7f2:	f107 0114 	add.w	r1, r7, #20
 800e7f6:	f107 0308 	add.w	r3, r7, #8
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f7ff fd20 	bl	800e240 <find_volume>
 800e800:	4603      	mov	r3, r0
 800e802:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e806:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	f040 8191 	bne.w	800eb32 <f_open+0x362>
		dj.obj.fs = fs;
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e814:	68ba      	ldr	r2, [r7, #8]
 800e816:	f107 0318 	add.w	r3, r7, #24
 800e81a:	4611      	mov	r1, r2
 800e81c:	4618      	mov	r0, r3
 800e81e:	f7ff fc03 	bl	800e028 <follow_path>
 800e822:	4603      	mov	r3, r0
 800e824:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e828:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d11a      	bne.n	800e866 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e830:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e834:	b25b      	sxtb	r3, r3
 800e836:	2b00      	cmp	r3, #0
 800e838:	da03      	bge.n	800e842 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e83a:	2306      	movs	r3, #6
 800e83c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e840:	e011      	b.n	800e866 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e842:	79fb      	ldrb	r3, [r7, #7]
 800e844:	f023 0301 	bic.w	r3, r3, #1
 800e848:	2b00      	cmp	r3, #0
 800e84a:	bf14      	ite	ne
 800e84c:	2301      	movne	r3, #1
 800e84e:	2300      	moveq	r3, #0
 800e850:	b2db      	uxtb	r3, r3
 800e852:	461a      	mov	r2, r3
 800e854:	f107 0318 	add.w	r3, r7, #24
 800e858:	4611      	mov	r1, r2
 800e85a:	4618      	mov	r0, r3
 800e85c:	f7fe fbd2 	bl	800d004 <chk_lock>
 800e860:	4603      	mov	r3, r0
 800e862:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e866:	79fb      	ldrb	r3, [r7, #7]
 800e868:	f003 031c 	and.w	r3, r3, #28
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d07f      	beq.n	800e970 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e870:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e874:	2b00      	cmp	r3, #0
 800e876:	d017      	beq.n	800e8a8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e878:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e87c:	2b04      	cmp	r3, #4
 800e87e:	d10e      	bne.n	800e89e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e880:	f7fe fc1c 	bl	800d0bc <enq_lock>
 800e884:	4603      	mov	r3, r0
 800e886:	2b00      	cmp	r3, #0
 800e888:	d006      	beq.n	800e898 <f_open+0xc8>
 800e88a:	f107 0318 	add.w	r3, r7, #24
 800e88e:	4618      	mov	r0, r3
 800e890:	f7ff fb03 	bl	800de9a <dir_register>
 800e894:	4603      	mov	r3, r0
 800e896:	e000      	b.n	800e89a <f_open+0xca>
 800e898:	2312      	movs	r3, #18
 800e89a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e89e:	79fb      	ldrb	r3, [r7, #7]
 800e8a0:	f043 0308 	orr.w	r3, r3, #8
 800e8a4:	71fb      	strb	r3, [r7, #7]
 800e8a6:	e010      	b.n	800e8ca <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e8a8:	7fbb      	ldrb	r3, [r7, #30]
 800e8aa:	f003 0311 	and.w	r3, r3, #17
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d003      	beq.n	800e8ba <f_open+0xea>
					res = FR_DENIED;
 800e8b2:	2307      	movs	r3, #7
 800e8b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e8b8:	e007      	b.n	800e8ca <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e8ba:	79fb      	ldrb	r3, [r7, #7]
 800e8bc:	f003 0304 	and.w	r3, r3, #4
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d002      	beq.n	800e8ca <f_open+0xfa>
 800e8c4:	2308      	movs	r3, #8
 800e8c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e8ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d168      	bne.n	800e9a4 <f_open+0x1d4>
 800e8d2:	79fb      	ldrb	r3, [r7, #7]
 800e8d4:	f003 0308 	and.w	r3, r3, #8
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d063      	beq.n	800e9a4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e8dc:	f7fc fba6 	bl	800b02c <get_fattime>
 800e8e0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e4:	330e      	adds	r3, #14
 800e8e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f7fe fae1 	bl	800ceb0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8f0:	3316      	adds	r3, #22
 800e8f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7fe fadb 	bl	800ceb0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8fc:	330b      	adds	r3, #11
 800e8fe:	2220      	movs	r2, #32
 800e900:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e902:	697b      	ldr	r3, [r7, #20]
 800e904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e906:	4611      	mov	r1, r2
 800e908:	4618      	mov	r0, r3
 800e90a:	f7ff fa32 	bl	800dd72 <ld_clust>
 800e90e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e914:	2200      	movs	r2, #0
 800e916:	4618      	mov	r0, r3
 800e918:	f7ff fa4a 	bl	800ddb0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e91e:	331c      	adds	r3, #28
 800e920:	2100      	movs	r1, #0
 800e922:	4618      	mov	r0, r3
 800e924:	f7fe fac4 	bl	800ceb0 <st_dword>
					fs->wflag = 1;
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	2201      	movs	r2, #1
 800e92c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e92e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e930:	2b00      	cmp	r3, #0
 800e932:	d037      	beq.n	800e9a4 <f_open+0x1d4>
						dw = fs->winsect;
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e938:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e93a:	f107 0318 	add.w	r3, r7, #24
 800e93e:	2200      	movs	r2, #0
 800e940:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e942:	4618      	mov	r0, r3
 800e944:	f7fe ff5d 	bl	800d802 <remove_chain>
 800e948:	4603      	mov	r3, r0
 800e94a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e94e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e952:	2b00      	cmp	r3, #0
 800e954:	d126      	bne.n	800e9a4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7fe fd02 	bl	800d364 <move_window>
 800e960:	4603      	mov	r3, r0
 800e962:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e96a:	3a01      	subs	r2, #1
 800e96c:	60da      	str	r2, [r3, #12]
 800e96e:	e019      	b.n	800e9a4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e970:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e974:	2b00      	cmp	r3, #0
 800e976:	d115      	bne.n	800e9a4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e978:	7fbb      	ldrb	r3, [r7, #30]
 800e97a:	f003 0310 	and.w	r3, r3, #16
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d003      	beq.n	800e98a <f_open+0x1ba>
					res = FR_NO_FILE;
 800e982:	2304      	movs	r3, #4
 800e984:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e988:	e00c      	b.n	800e9a4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e98a:	79fb      	ldrb	r3, [r7, #7]
 800e98c:	f003 0302 	and.w	r3, r3, #2
 800e990:	2b00      	cmp	r3, #0
 800e992:	d007      	beq.n	800e9a4 <f_open+0x1d4>
 800e994:	7fbb      	ldrb	r3, [r7, #30]
 800e996:	f003 0301 	and.w	r3, r3, #1
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d002      	beq.n	800e9a4 <f_open+0x1d4>
						res = FR_DENIED;
 800e99e:	2307      	movs	r3, #7
 800e9a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e9a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d128      	bne.n	800e9fe <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e9ac:	79fb      	ldrb	r3, [r7, #7]
 800e9ae:	f003 0308 	and.w	r3, r3, #8
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d003      	beq.n	800e9be <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e9b6:	79fb      	ldrb	r3, [r7, #7]
 800e9b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9bc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e9be:	697b      	ldr	r3, [r7, #20]
 800e9c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e9c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e9cc:	79fb      	ldrb	r3, [r7, #7]
 800e9ce:	f023 0301 	bic.w	r3, r3, #1
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	bf14      	ite	ne
 800e9d6:	2301      	movne	r3, #1
 800e9d8:	2300      	moveq	r3, #0
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	461a      	mov	r2, r3
 800e9de:	f107 0318 	add.w	r3, r7, #24
 800e9e2:	4611      	mov	r1, r2
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f7fe fb8b 	bl	800d100 <inc_lock>
 800e9ea:	4602      	mov	r2, r0
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	691b      	ldr	r3, [r3, #16]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d102      	bne.n	800e9fe <f_open+0x22e>
 800e9f8:	2302      	movs	r3, #2
 800e9fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e9fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	f040 8095 	bne.w	800eb32 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea0c:	4611      	mov	r1, r2
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f7ff f9af 	bl	800dd72 <ld_clust>
 800ea14:	4602      	mov	r2, r0
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ea1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea1c:	331c      	adds	r3, #28
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7fe fa08 	bl	800ce34 <ld_dword>
 800ea24:	4602      	mov	r2, r0
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ea30:	697a      	ldr	r2, [r7, #20]
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	88da      	ldrh	r2, [r3, #6]
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	79fa      	ldrb	r2, [r7, #7]
 800ea42:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	2200      	movs	r2, #0
 800ea48:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	2200      	movs	r2, #0
 800ea54:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	3330      	adds	r3, #48	; 0x30
 800ea5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea5e:	2100      	movs	r1, #0
 800ea60:	4618      	mov	r0, r3
 800ea62:	f7fe fa72 	bl	800cf4a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ea66:	79fb      	ldrb	r3, [r7, #7]
 800ea68:	f003 0320 	and.w	r3, r3, #32
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d060      	beq.n	800eb32 <f_open+0x362>
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	68db      	ldr	r3, [r3, #12]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d05c      	beq.n	800eb32 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	68da      	ldr	r2, [r3, #12]
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	895b      	ldrh	r3, [r3, #10]
 800ea84:	025b      	lsls	r3, r3, #9
 800ea86:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	689b      	ldr	r3, [r3, #8]
 800ea8c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	68db      	ldr	r3, [r3, #12]
 800ea92:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ea94:	e016      	b.n	800eac4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f7fe fd1d 	bl	800d4da <get_fat>
 800eaa0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800eaa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eaa4:	2b01      	cmp	r3, #1
 800eaa6:	d802      	bhi.n	800eaae <f_open+0x2de>
 800eaa8:	2302      	movs	r3, #2
 800eaaa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800eaae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eab4:	d102      	bne.n	800eabc <f_open+0x2ec>
 800eab6:	2301      	movs	r3, #1
 800eab8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800eabc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800eabe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eac0:	1ad3      	subs	r3, r2, r3
 800eac2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eac4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d103      	bne.n	800ead4 <f_open+0x304>
 800eacc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800eace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ead0:	429a      	cmp	r2, r3
 800ead2:	d8e0      	bhi.n	800ea96 <f_open+0x2c6>
				}
				fp->clust = clst;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ead8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800eada:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d127      	bne.n	800eb32 <f_open+0x362>
 800eae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d022      	beq.n	800eb32 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f7fe fcd3 	bl	800d49c <clust2sect>
 800eaf6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800eaf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d103      	bne.n	800eb06 <f_open+0x336>
						res = FR_INT_ERR;
 800eafe:	2302      	movs	r3, #2
 800eb00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800eb04:	e015      	b.n	800eb32 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800eb06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb08:	0a5a      	lsrs	r2, r3, #9
 800eb0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb0c:	441a      	add	r2, r3
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	7858      	ldrb	r0, [r3, #1]
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	6a1a      	ldr	r2, [r3, #32]
 800eb20:	2301      	movs	r3, #1
 800eb22:	f7fe f911 	bl	800cd48 <disk_read>
 800eb26:	4603      	mov	r3, r0
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d002      	beq.n	800eb32 <f_open+0x362>
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800eb32:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d002      	beq.n	800eb40 <f_open+0x370>
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800eb40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3768      	adds	r7, #104	; 0x68
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b08e      	sub	sp, #56	; 0x38
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	60f8      	str	r0, [r7, #12]
 800eb54:	60b9      	str	r1, [r7, #8]
 800eb56:	607a      	str	r2, [r7, #4]
 800eb58:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	2200      	movs	r2, #0
 800eb62:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	f107 0214 	add.w	r2, r7, #20
 800eb6a:	4611      	mov	r1, r2
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f7ff fdb3 	bl	800e6d8 <validate>
 800eb72:	4603      	mov	r3, r0
 800eb74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800eb78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d107      	bne.n	800eb90 <f_read+0x44>
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	7d5b      	ldrb	r3, [r3, #21]
 800eb84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800eb88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d002      	beq.n	800eb96 <f_read+0x4a>
 800eb90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eb94:	e115      	b.n	800edc2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	7d1b      	ldrb	r3, [r3, #20]
 800eb9a:	f003 0301 	and.w	r3, r3, #1
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d101      	bne.n	800eba6 <f_read+0x5a>
 800eba2:	2307      	movs	r3, #7
 800eba4:	e10d      	b.n	800edc2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	68da      	ldr	r2, [r3, #12]
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	699b      	ldr	r3, [r3, #24]
 800ebae:	1ad3      	subs	r3, r2, r3
 800ebb0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ebb2:	687a      	ldr	r2, [r7, #4]
 800ebb4:	6a3b      	ldr	r3, [r7, #32]
 800ebb6:	429a      	cmp	r2, r3
 800ebb8:	f240 80fe 	bls.w	800edb8 <f_read+0x26c>
 800ebbc:	6a3b      	ldr	r3, [r7, #32]
 800ebbe:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ebc0:	e0fa      	b.n	800edb8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	699b      	ldr	r3, [r3, #24]
 800ebc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	f040 80c6 	bne.w	800ed5c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	699b      	ldr	r3, [r3, #24]
 800ebd4:	0a5b      	lsrs	r3, r3, #9
 800ebd6:	697a      	ldr	r2, [r7, #20]
 800ebd8:	8952      	ldrh	r2, [r2, #10]
 800ebda:	3a01      	subs	r2, #1
 800ebdc:	4013      	ands	r3, r2
 800ebde:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ebe0:	69fb      	ldr	r3, [r7, #28]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d12f      	bne.n	800ec46 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	699b      	ldr	r3, [r3, #24]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d103      	bne.n	800ebf6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	689b      	ldr	r3, [r3, #8]
 800ebf2:	633b      	str	r3, [r7, #48]	; 0x30
 800ebf4:	e013      	b.n	800ec1e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d007      	beq.n	800ec0e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	699b      	ldr	r3, [r3, #24]
 800ec02:	4619      	mov	r1, r3
 800ec04:	68f8      	ldr	r0, [r7, #12]
 800ec06:	f7fe fef9 	bl	800d9fc <clmt_clust>
 800ec0a:	6338      	str	r0, [r7, #48]	; 0x30
 800ec0c:	e007      	b.n	800ec1e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ec0e:	68fa      	ldr	r2, [r7, #12]
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	69db      	ldr	r3, [r3, #28]
 800ec14:	4619      	mov	r1, r3
 800ec16:	4610      	mov	r0, r2
 800ec18:	f7fe fc5f 	bl	800d4da <get_fat>
 800ec1c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ec1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec20:	2b01      	cmp	r3, #1
 800ec22:	d804      	bhi.n	800ec2e <f_read+0xe2>
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	2202      	movs	r2, #2
 800ec28:	755a      	strb	r2, [r3, #21]
 800ec2a:	2302      	movs	r3, #2
 800ec2c:	e0c9      	b.n	800edc2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ec2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec34:	d104      	bne.n	800ec40 <f_read+0xf4>
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	2201      	movs	r2, #1
 800ec3a:	755a      	strb	r2, [r3, #21]
 800ec3c:	2301      	movs	r3, #1
 800ec3e:	e0c0      	b.n	800edc2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec44:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ec46:	697a      	ldr	r2, [r7, #20]
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	69db      	ldr	r3, [r3, #28]
 800ec4c:	4619      	mov	r1, r3
 800ec4e:	4610      	mov	r0, r2
 800ec50:	f7fe fc24 	bl	800d49c <clust2sect>
 800ec54:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ec56:	69bb      	ldr	r3, [r7, #24]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d104      	bne.n	800ec66 <f_read+0x11a>
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	2202      	movs	r2, #2
 800ec60:	755a      	strb	r2, [r3, #21]
 800ec62:	2302      	movs	r3, #2
 800ec64:	e0ad      	b.n	800edc2 <f_read+0x276>
			sect += csect;
 800ec66:	69ba      	ldr	r2, [r7, #24]
 800ec68:	69fb      	ldr	r3, [r7, #28]
 800ec6a:	4413      	add	r3, r2
 800ec6c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	0a5b      	lsrs	r3, r3, #9
 800ec72:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ec74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d039      	beq.n	800ecee <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ec7a:	69fa      	ldr	r2, [r7, #28]
 800ec7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec7e:	4413      	add	r3, r2
 800ec80:	697a      	ldr	r2, [r7, #20]
 800ec82:	8952      	ldrh	r2, [r2, #10]
 800ec84:	4293      	cmp	r3, r2
 800ec86:	d905      	bls.n	800ec94 <f_read+0x148>
					cc = fs->csize - csect;
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	895b      	ldrh	r3, [r3, #10]
 800ec8c:	461a      	mov	r2, r3
 800ec8e:	69fb      	ldr	r3, [r7, #28]
 800ec90:	1ad3      	subs	r3, r2, r3
 800ec92:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ec94:	697b      	ldr	r3, [r7, #20]
 800ec96:	7858      	ldrb	r0, [r3, #1]
 800ec98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec9a:	69ba      	ldr	r2, [r7, #24]
 800ec9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec9e:	f7fe f853 	bl	800cd48 <disk_read>
 800eca2:	4603      	mov	r3, r0
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d004      	beq.n	800ecb2 <f_read+0x166>
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	2201      	movs	r2, #1
 800ecac:	755a      	strb	r2, [r3, #21]
 800ecae:	2301      	movs	r3, #1
 800ecb0:	e087      	b.n	800edc2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	7d1b      	ldrb	r3, [r3, #20]
 800ecb6:	b25b      	sxtb	r3, r3
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	da14      	bge.n	800ece6 <f_read+0x19a>
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	6a1a      	ldr	r2, [r3, #32]
 800ecc0:	69bb      	ldr	r3, [r7, #24]
 800ecc2:	1ad3      	subs	r3, r2, r3
 800ecc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d90d      	bls.n	800ece6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	6a1a      	ldr	r2, [r3, #32]
 800ecce:	69bb      	ldr	r3, [r7, #24]
 800ecd0:	1ad3      	subs	r3, r2, r3
 800ecd2:	025b      	lsls	r3, r3, #9
 800ecd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecd6:	18d0      	adds	r0, r2, r3
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	3330      	adds	r3, #48	; 0x30
 800ecdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ece0:	4619      	mov	r1, r3
 800ece2:	f7fe f911 	bl	800cf08 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ece6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ece8:	025b      	lsls	r3, r3, #9
 800ecea:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ecec:	e050      	b.n	800ed90 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	6a1b      	ldr	r3, [r3, #32]
 800ecf2:	69ba      	ldr	r2, [r7, #24]
 800ecf4:	429a      	cmp	r2, r3
 800ecf6:	d02e      	beq.n	800ed56 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	7d1b      	ldrb	r3, [r3, #20]
 800ecfc:	b25b      	sxtb	r3, r3
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	da18      	bge.n	800ed34 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ed02:	697b      	ldr	r3, [r7, #20]
 800ed04:	7858      	ldrb	r0, [r3, #1]
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	6a1a      	ldr	r2, [r3, #32]
 800ed10:	2301      	movs	r3, #1
 800ed12:	f7fe f839 	bl	800cd88 <disk_write>
 800ed16:	4603      	mov	r3, r0
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d004      	beq.n	800ed26 <f_read+0x1da>
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	2201      	movs	r2, #1
 800ed20:	755a      	strb	r2, [r3, #21]
 800ed22:	2301      	movs	r3, #1
 800ed24:	e04d      	b.n	800edc2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	7d1b      	ldrb	r3, [r3, #20]
 800ed2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed2e:	b2da      	uxtb	r2, r3
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	7858      	ldrb	r0, [r3, #1]
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ed3e:	2301      	movs	r3, #1
 800ed40:	69ba      	ldr	r2, [r7, #24]
 800ed42:	f7fe f801 	bl	800cd48 <disk_read>
 800ed46:	4603      	mov	r3, r0
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d004      	beq.n	800ed56 <f_read+0x20a>
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	2201      	movs	r2, #1
 800ed50:	755a      	strb	r2, [r3, #21]
 800ed52:	2301      	movs	r3, #1
 800ed54:	e035      	b.n	800edc2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	69ba      	ldr	r2, [r7, #24]
 800ed5a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	699b      	ldr	r3, [r3, #24]
 800ed60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed64:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ed68:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ed6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	d901      	bls.n	800ed76 <f_read+0x22a>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	699b      	ldr	r3, [r3, #24]
 800ed80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed84:	4413      	add	r3, r2
 800ed86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed88:	4619      	mov	r1, r3
 800ed8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed8c:	f7fe f8bc 	bl	800cf08 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ed90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed94:	4413      	add	r3, r2
 800ed96:	627b      	str	r3, [r7, #36]	; 0x24
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	699a      	ldr	r2, [r3, #24]
 800ed9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed9e:	441a      	add	r2, r3
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	619a      	str	r2, [r3, #24]
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	681a      	ldr	r2, [r3, #0]
 800eda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edaa:	441a      	add	r2, r3
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	601a      	str	r2, [r3, #0]
 800edb0:	687a      	ldr	r2, [r7, #4]
 800edb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb4:	1ad3      	subs	r3, r2, r3
 800edb6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	f47f af01 	bne.w	800ebc2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800edc0:	2300      	movs	r3, #0
}
 800edc2:	4618      	mov	r0, r3
 800edc4:	3738      	adds	r7, #56	; 0x38
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}

0800edca <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800edca:	b580      	push	{r7, lr}
 800edcc:	b08c      	sub	sp, #48	; 0x30
 800edce:	af00      	add	r7, sp, #0
 800edd0:	60f8      	str	r0, [r7, #12]
 800edd2:	60b9      	str	r1, [r7, #8]
 800edd4:	607a      	str	r2, [r7, #4]
 800edd6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	2200      	movs	r2, #0
 800ede0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	f107 0210 	add.w	r2, r7, #16
 800ede8:	4611      	mov	r1, r2
 800edea:	4618      	mov	r0, r3
 800edec:	f7ff fc74 	bl	800e6d8 <validate>
 800edf0:	4603      	mov	r3, r0
 800edf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800edf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d107      	bne.n	800ee0e <f_write+0x44>
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	7d5b      	ldrb	r3, [r3, #21]
 800ee02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ee06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d002      	beq.n	800ee14 <f_write+0x4a>
 800ee0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee12:	e14b      	b.n	800f0ac <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	7d1b      	ldrb	r3, [r3, #20]
 800ee18:	f003 0302 	and.w	r3, r3, #2
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d101      	bne.n	800ee24 <f_write+0x5a>
 800ee20:	2307      	movs	r3, #7
 800ee22:	e143      	b.n	800f0ac <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	699a      	ldr	r2, [r3, #24]
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	441a      	add	r2, r3
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	699b      	ldr	r3, [r3, #24]
 800ee30:	429a      	cmp	r2, r3
 800ee32:	f080 812d 	bcs.w	800f090 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	699b      	ldr	r3, [r3, #24]
 800ee3a:	43db      	mvns	r3, r3
 800ee3c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ee3e:	e127      	b.n	800f090 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	699b      	ldr	r3, [r3, #24]
 800ee44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	f040 80e3 	bne.w	800f014 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	699b      	ldr	r3, [r3, #24]
 800ee52:	0a5b      	lsrs	r3, r3, #9
 800ee54:	693a      	ldr	r2, [r7, #16]
 800ee56:	8952      	ldrh	r2, [r2, #10]
 800ee58:	3a01      	subs	r2, #1
 800ee5a:	4013      	ands	r3, r2
 800ee5c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ee5e:	69bb      	ldr	r3, [r7, #24]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d143      	bne.n	800eeec <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	699b      	ldr	r3, [r3, #24]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d10c      	bne.n	800ee86 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	689b      	ldr	r3, [r3, #8]
 800ee70:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ee72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d11a      	bne.n	800eeae <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	2100      	movs	r1, #0
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f7fe fd25 	bl	800d8cc <create_chain>
 800ee82:	62b8      	str	r0, [r7, #40]	; 0x28
 800ee84:	e013      	b.n	800eeae <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d007      	beq.n	800ee9e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	699b      	ldr	r3, [r3, #24]
 800ee92:	4619      	mov	r1, r3
 800ee94:	68f8      	ldr	r0, [r7, #12]
 800ee96:	f7fe fdb1 	bl	800d9fc <clmt_clust>
 800ee9a:	62b8      	str	r0, [r7, #40]	; 0x28
 800ee9c:	e007      	b.n	800eeae <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ee9e:	68fa      	ldr	r2, [r7, #12]
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	69db      	ldr	r3, [r3, #28]
 800eea4:	4619      	mov	r1, r3
 800eea6:	4610      	mov	r0, r2
 800eea8:	f7fe fd10 	bl	800d8cc <create_chain>
 800eeac:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800eeae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	f000 80f2 	beq.w	800f09a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800eeb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb8:	2b01      	cmp	r3, #1
 800eeba:	d104      	bne.n	800eec6 <f_write+0xfc>
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	2202      	movs	r2, #2
 800eec0:	755a      	strb	r2, [r3, #21]
 800eec2:	2302      	movs	r3, #2
 800eec4:	e0f2      	b.n	800f0ac <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eecc:	d104      	bne.n	800eed8 <f_write+0x10e>
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	2201      	movs	r2, #1
 800eed2:	755a      	strb	r2, [r3, #21]
 800eed4:	2301      	movs	r3, #1
 800eed6:	e0e9      	b.n	800f0ac <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eedc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	689b      	ldr	r3, [r3, #8]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d102      	bne.n	800eeec <f_write+0x122>
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eeea:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	7d1b      	ldrb	r3, [r3, #20]
 800eef0:	b25b      	sxtb	r3, r3
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	da18      	bge.n	800ef28 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eef6:	693b      	ldr	r3, [r7, #16]
 800eef8:	7858      	ldrb	r0, [r3, #1]
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	6a1a      	ldr	r2, [r3, #32]
 800ef04:	2301      	movs	r3, #1
 800ef06:	f7fd ff3f 	bl	800cd88 <disk_write>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d004      	beq.n	800ef1a <f_write+0x150>
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	2201      	movs	r2, #1
 800ef14:	755a      	strb	r2, [r3, #21]
 800ef16:	2301      	movs	r3, #1
 800ef18:	e0c8      	b.n	800f0ac <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	7d1b      	ldrb	r3, [r3, #20]
 800ef1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef22:	b2da      	uxtb	r2, r3
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ef28:	693a      	ldr	r2, [r7, #16]
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	69db      	ldr	r3, [r3, #28]
 800ef2e:	4619      	mov	r1, r3
 800ef30:	4610      	mov	r0, r2
 800ef32:	f7fe fab3 	bl	800d49c <clust2sect>
 800ef36:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d104      	bne.n	800ef48 <f_write+0x17e>
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	2202      	movs	r2, #2
 800ef42:	755a      	strb	r2, [r3, #21]
 800ef44:	2302      	movs	r3, #2
 800ef46:	e0b1      	b.n	800f0ac <f_write+0x2e2>
			sect += csect;
 800ef48:	697a      	ldr	r2, [r7, #20]
 800ef4a:	69bb      	ldr	r3, [r7, #24]
 800ef4c:	4413      	add	r3, r2
 800ef4e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	0a5b      	lsrs	r3, r3, #9
 800ef54:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ef56:	6a3b      	ldr	r3, [r7, #32]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d03c      	beq.n	800efd6 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ef5c:	69ba      	ldr	r2, [r7, #24]
 800ef5e:	6a3b      	ldr	r3, [r7, #32]
 800ef60:	4413      	add	r3, r2
 800ef62:	693a      	ldr	r2, [r7, #16]
 800ef64:	8952      	ldrh	r2, [r2, #10]
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d905      	bls.n	800ef76 <f_write+0x1ac>
					cc = fs->csize - csect;
 800ef6a:	693b      	ldr	r3, [r7, #16]
 800ef6c:	895b      	ldrh	r3, [r3, #10]
 800ef6e:	461a      	mov	r2, r3
 800ef70:	69bb      	ldr	r3, [r7, #24]
 800ef72:	1ad3      	subs	r3, r2, r3
 800ef74:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	7858      	ldrb	r0, [r3, #1]
 800ef7a:	6a3b      	ldr	r3, [r7, #32]
 800ef7c:	697a      	ldr	r2, [r7, #20]
 800ef7e:	69f9      	ldr	r1, [r7, #28]
 800ef80:	f7fd ff02 	bl	800cd88 <disk_write>
 800ef84:	4603      	mov	r3, r0
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d004      	beq.n	800ef94 <f_write+0x1ca>
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	2201      	movs	r2, #1
 800ef8e:	755a      	strb	r2, [r3, #21]
 800ef90:	2301      	movs	r3, #1
 800ef92:	e08b      	b.n	800f0ac <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	6a1a      	ldr	r2, [r3, #32]
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	1ad3      	subs	r3, r2, r3
 800ef9c:	6a3a      	ldr	r2, [r7, #32]
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d915      	bls.n	800efce <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	6a1a      	ldr	r2, [r3, #32]
 800efac:	697b      	ldr	r3, [r7, #20]
 800efae:	1ad3      	subs	r3, r2, r3
 800efb0:	025b      	lsls	r3, r3, #9
 800efb2:	69fa      	ldr	r2, [r7, #28]
 800efb4:	4413      	add	r3, r2
 800efb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800efba:	4619      	mov	r1, r3
 800efbc:	f7fd ffa4 	bl	800cf08 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	7d1b      	ldrb	r3, [r3, #20]
 800efc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800efc8:	b2da      	uxtb	r2, r3
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800efce:	6a3b      	ldr	r3, [r7, #32]
 800efd0:	025b      	lsls	r3, r3, #9
 800efd2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800efd4:	e03f      	b.n	800f056 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	6a1b      	ldr	r3, [r3, #32]
 800efda:	697a      	ldr	r2, [r7, #20]
 800efdc:	429a      	cmp	r2, r3
 800efde:	d016      	beq.n	800f00e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	699a      	ldr	r2, [r3, #24]
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800efe8:	429a      	cmp	r2, r3
 800efea:	d210      	bcs.n	800f00e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800efec:	693b      	ldr	r3, [r7, #16]
 800efee:	7858      	ldrb	r0, [r3, #1]
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eff6:	2301      	movs	r3, #1
 800eff8:	697a      	ldr	r2, [r7, #20]
 800effa:	f7fd fea5 	bl	800cd48 <disk_read>
 800effe:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f000:	2b00      	cmp	r3, #0
 800f002:	d004      	beq.n	800f00e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2201      	movs	r2, #1
 800f008:	755a      	strb	r2, [r3, #21]
 800f00a:	2301      	movs	r3, #1
 800f00c:	e04e      	b.n	800f0ac <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	697a      	ldr	r2, [r7, #20]
 800f012:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	699b      	ldr	r3, [r3, #24]
 800f018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f01c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f020:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	429a      	cmp	r2, r3
 800f028:	d901      	bls.n	800f02e <f_write+0x264>
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	699b      	ldr	r3, [r3, #24]
 800f038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f03c:	4413      	add	r3, r2
 800f03e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f040:	69f9      	ldr	r1, [r7, #28]
 800f042:	4618      	mov	r0, r3
 800f044:	f7fd ff60 	bl	800cf08 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	7d1b      	ldrb	r3, [r3, #20]
 800f04c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f050:	b2da      	uxtb	r2, r3
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f056:	69fa      	ldr	r2, [r7, #28]
 800f058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f05a:	4413      	add	r3, r2
 800f05c:	61fb      	str	r3, [r7, #28]
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	699a      	ldr	r2, [r3, #24]
 800f062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f064:	441a      	add	r2, r3
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	619a      	str	r2, [r3, #24]
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	68da      	ldr	r2, [r3, #12]
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	699b      	ldr	r3, [r3, #24]
 800f072:	429a      	cmp	r2, r3
 800f074:	bf38      	it	cc
 800f076:	461a      	movcc	r2, r3
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	60da      	str	r2, [r3, #12]
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	681a      	ldr	r2, [r3, #0]
 800f080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f082:	441a      	add	r2, r3
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	601a      	str	r2, [r3, #0]
 800f088:	687a      	ldr	r2, [r7, #4]
 800f08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f08c:	1ad3      	subs	r3, r2, r3
 800f08e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2b00      	cmp	r3, #0
 800f094:	f47f aed4 	bne.w	800ee40 <f_write+0x76>
 800f098:	e000      	b.n	800f09c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f09a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	7d1b      	ldrb	r3, [r3, #20]
 800f0a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0a4:	b2da      	uxtb	r2, r3
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f0aa:	2300      	movs	r3, #0
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	3730      	adds	r7, #48	; 0x30
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}

0800f0b4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b086      	sub	sp, #24
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f107 0208 	add.w	r2, r7, #8
 800f0c2:	4611      	mov	r1, r2
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f7ff fb07 	bl	800e6d8 <validate>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f0ce:	7dfb      	ldrb	r3, [r7, #23]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d168      	bne.n	800f1a6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	7d1b      	ldrb	r3, [r3, #20]
 800f0d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d062      	beq.n	800f1a6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	7d1b      	ldrb	r3, [r3, #20]
 800f0e4:	b25b      	sxtb	r3, r3
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	da15      	bge.n	800f116 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	7858      	ldrb	r0, [r3, #1]
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	6a1a      	ldr	r2, [r3, #32]
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	f7fd fe45 	bl	800cd88 <disk_write>
 800f0fe:	4603      	mov	r3, r0
 800f100:	2b00      	cmp	r3, #0
 800f102:	d001      	beq.n	800f108 <f_sync+0x54>
 800f104:	2301      	movs	r3, #1
 800f106:	e04f      	b.n	800f1a8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	7d1b      	ldrb	r3, [r3, #20]
 800f10c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f110:	b2da      	uxtb	r2, r3
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f116:	f7fb ff89 	bl	800b02c <get_fattime>
 800f11a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f11c:	68ba      	ldr	r2, [r7, #8]
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f122:	4619      	mov	r1, r3
 800f124:	4610      	mov	r0, r2
 800f126:	f7fe f91d 	bl	800d364 <move_window>
 800f12a:	4603      	mov	r3, r0
 800f12c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f12e:	7dfb      	ldrb	r3, [r7, #23]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d138      	bne.n	800f1a6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f138:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	330b      	adds	r3, #11
 800f13e:	781a      	ldrb	r2, [r3, #0]
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	330b      	adds	r3, #11
 800f144:	f042 0220 	orr.w	r2, r2, #32
 800f148:	b2d2      	uxtb	r2, r2
 800f14a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6818      	ldr	r0, [r3, #0]
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	689b      	ldr	r3, [r3, #8]
 800f154:	461a      	mov	r2, r3
 800f156:	68f9      	ldr	r1, [r7, #12]
 800f158:	f7fe fe2a 	bl	800ddb0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	f103 021c 	add.w	r2, r3, #28
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	68db      	ldr	r3, [r3, #12]
 800f166:	4619      	mov	r1, r3
 800f168:	4610      	mov	r0, r2
 800f16a:	f7fd fea1 	bl	800ceb0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	3316      	adds	r3, #22
 800f172:	6939      	ldr	r1, [r7, #16]
 800f174:	4618      	mov	r0, r3
 800f176:	f7fd fe9b 	bl	800ceb0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	3312      	adds	r3, #18
 800f17e:	2100      	movs	r1, #0
 800f180:	4618      	mov	r0, r3
 800f182:	f7fd fe7a 	bl	800ce7a <st_word>
					fs->wflag = 1;
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	2201      	movs	r2, #1
 800f18a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	4618      	mov	r0, r3
 800f190:	f7fe f916 	bl	800d3c0 <sync_fs>
 800f194:	4603      	mov	r3, r0
 800f196:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	7d1b      	ldrb	r3, [r3, #20]
 800f19c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1a0:	b2da      	uxtb	r2, r3
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f1a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	3718      	adds	r7, #24
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}

0800f1b0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b084      	sub	sp, #16
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f1b8:	6878      	ldr	r0, [r7, #4]
 800f1ba:	f7ff ff7b 	bl	800f0b4 <f_sync>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f1c2:	7bfb      	ldrb	r3, [r7, #15]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d118      	bne.n	800f1fa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f107 0208 	add.w	r2, r7, #8
 800f1ce:	4611      	mov	r1, r2
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	f7ff fa81 	bl	800e6d8 <validate>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f1da:	7bfb      	ldrb	r3, [r7, #15]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d10c      	bne.n	800f1fa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	691b      	ldr	r3, [r3, #16]
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f7fe f819 	bl	800d21c <dec_lock>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f1ee:	7bfb      	ldrb	r3, [r7, #15]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d102      	bne.n	800f1fa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f1fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	3710      	adds	r7, #16
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}

0800f204 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800f204:	b590      	push	{r4, r7, lr}
 800f206:	b09d      	sub	sp, #116	; 0x74
 800f208:	af00      	add	r7, sp, #0
 800f20a:	60f8      	str	r0, [r7, #12]
 800f20c:	607a      	str	r2, [r7, #4]
 800f20e:	603b      	str	r3, [r7, #0]
 800f210:	460b      	mov	r3, r1
 800f212:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800f214:	2301      	movs	r3, #1
 800f216:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800f218:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f21c:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800f21e:	f107 030c 	add.w	r3, r7, #12
 800f222:	4618      	mov	r0, r3
 800f224:	f7fe ff71 	bl	800e10a <get_ldnumber>
 800f228:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f22a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	da02      	bge.n	800f236 <f_mkfs+0x32>
 800f230:	230b      	movs	r3, #11
 800f232:	f000 bc0d 	b.w	800fa50 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800f236:	4a94      	ldr	r2, [pc, #592]	; (800f488 <f_mkfs+0x284>)
 800f238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f23a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d005      	beq.n	800f24e <f_mkfs+0x4a>
 800f242:	4a91      	ldr	r2, [pc, #580]	; (800f488 <f_mkfs+0x284>)
 800f244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f24a:	2200      	movs	r2, #0
 800f24c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800f24e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f250:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800f254:	2300      	movs	r3, #0
 800f256:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800f25a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f25e:	4618      	mov	r0, r3
 800f260:	f7fd fd4c 	bl	800ccfc <disk_initialize>
 800f264:	4603      	mov	r3, r0
 800f266:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800f26a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f26e:	f003 0301 	and.w	r3, r3, #1
 800f272:	2b00      	cmp	r3, #0
 800f274:	d001      	beq.n	800f27a <f_mkfs+0x76>
 800f276:	2303      	movs	r3, #3
 800f278:	e3ea      	b.n	800fa50 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800f27a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f27e:	f003 0304 	and.w	r3, r3, #4
 800f282:	2b00      	cmp	r3, #0
 800f284:	d001      	beq.n	800f28a <f_mkfs+0x86>
 800f286:	230a      	movs	r3, #10
 800f288:	e3e2      	b.n	800fa50 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800f28a:	f107 0214 	add.w	r2, r7, #20
 800f28e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f292:	2103      	movs	r1, #3
 800f294:	4618      	mov	r0, r3
 800f296:	f7fd fd97 	bl	800cdc8 <disk_ioctl>
 800f29a:	4603      	mov	r3, r0
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d10c      	bne.n	800f2ba <f_mkfs+0xb6>
 800f2a0:	697b      	ldr	r3, [r7, #20]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d009      	beq.n	800f2ba <f_mkfs+0xb6>
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f2ac:	d805      	bhi.n	800f2ba <f_mkfs+0xb6>
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	1e5a      	subs	r2, r3, #1
 800f2b2:	697b      	ldr	r3, [r7, #20]
 800f2b4:	4013      	ands	r3, r2
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d001      	beq.n	800f2be <f_mkfs+0xba>
 800f2ba:	2301      	movs	r3, #1
 800f2bc:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800f2be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f2c2:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d003      	beq.n	800f2d2 <f_mkfs+0xce>
 800f2ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f2cc:	687a      	ldr	r2, [r7, #4]
 800f2ce:	429a      	cmp	r2, r3
 800f2d0:	d309      	bcc.n	800f2e6 <f_mkfs+0xe2>
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f2d8:	d805      	bhi.n	800f2e6 <f_mkfs+0xe2>
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	1e5a      	subs	r2, r3, #1
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	4013      	ands	r3, r2
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d001      	beq.n	800f2ea <f_mkfs+0xe6>
 800f2e6:	2313      	movs	r3, #19
 800f2e8:	e3b2      	b.n	800fa50 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800f2ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f2ec:	687a      	ldr	r2, [r7, #4]
 800f2ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800f2f2:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800f2f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f2fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f2fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800f302:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800f304:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f308:	fb02 f303 	mul.w	r3, r2, r3
 800f30c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800f30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f310:	2b00      	cmp	r3, #0
 800f312:	d101      	bne.n	800f318 <f_mkfs+0x114>
 800f314:	230e      	movs	r3, #14
 800f316:	e39b      	b.n	800fa50 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800f318:	f107 0210 	add.w	r2, r7, #16
 800f31c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f320:	2101      	movs	r1, #1
 800f322:	4618      	mov	r0, r3
 800f324:	f7fd fd50 	bl	800cdc8 <disk_ioctl>
 800f328:	4603      	mov	r3, r0
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d001      	beq.n	800f332 <f_mkfs+0x12e>
 800f32e:	2301      	movs	r3, #1
 800f330:	e38e      	b.n	800fa50 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800f332:	7afb      	ldrb	r3, [r7, #11]
 800f334:	f003 0308 	and.w	r3, r3, #8
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d001      	beq.n	800f340 <f_mkfs+0x13c>
 800f33c:	2300      	movs	r3, #0
 800f33e:	e000      	b.n	800f342 <f_mkfs+0x13e>
 800f340:	233f      	movs	r3, #63	; 0x3f
 800f342:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f348:	429a      	cmp	r2, r3
 800f34a:	d901      	bls.n	800f350 <f_mkfs+0x14c>
 800f34c:	230e      	movs	r3, #14
 800f34e:	e37f      	b.n	800fa50 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800f350:	693a      	ldr	r2, [r7, #16]
 800f352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f354:	1ad3      	subs	r3, r2, r3
 800f356:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800f358:	693b      	ldr	r3, [r7, #16]
 800f35a:	2b7f      	cmp	r3, #127	; 0x7f
 800f35c:	d801      	bhi.n	800f362 <f_mkfs+0x15e>
 800f35e:	230e      	movs	r3, #14
 800f360:	e376      	b.n	800fa50 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	2b80      	cmp	r3, #128	; 0x80
 800f366:	d901      	bls.n	800f36c <f_mkfs+0x168>
 800f368:	2313      	movs	r3, #19
 800f36a:	e371      	b.n	800fa50 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800f36c:	7afb      	ldrb	r3, [r7, #11]
 800f36e:	f003 0302 	and.w	r3, r3, #2
 800f372:	2b00      	cmp	r3, #0
 800f374:	d00d      	beq.n	800f392 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800f376:	7afb      	ldrb	r3, [r7, #11]
 800f378:	f003 0307 	and.w	r3, r3, #7
 800f37c:	2b02      	cmp	r3, #2
 800f37e:	d004      	beq.n	800f38a <f_mkfs+0x186>
 800f380:	7afb      	ldrb	r3, [r7, #11]
 800f382:	f003 0301 	and.w	r3, r3, #1
 800f386:	2b00      	cmp	r3, #0
 800f388:	d103      	bne.n	800f392 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800f38a:	2303      	movs	r3, #3
 800f38c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800f390:	e009      	b.n	800f3a6 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800f392:	7afb      	ldrb	r3, [r7, #11]
 800f394:	f003 0301 	and.w	r3, r3, #1
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d101      	bne.n	800f3a0 <f_mkfs+0x19c>
 800f39c:	2313      	movs	r3, #19
 800f39e:	e357      	b.n	800fa50 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800f3a0:	2302      	movs	r3, #2
 800f3a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800f3aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f3ae:	2b03      	cmp	r3, #3
 800f3b0:	d13c      	bne.n	800f42c <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800f3b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d11b      	bne.n	800f3f0 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800f3b8:	693b      	ldr	r3, [r7, #16]
 800f3ba:	0c5b      	lsrs	r3, r3, #17
 800f3bc:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f3be:	2300      	movs	r3, #0
 800f3c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	653b      	str	r3, [r7, #80]	; 0x50
 800f3c6:	e005      	b.n	800f3d4 <f_mkfs+0x1d0>
 800f3c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3ca:	3301      	adds	r3, #1
 800f3cc:	64bb      	str	r3, [r7, #72]	; 0x48
 800f3ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3d0:	005b      	lsls	r3, r3, #1
 800f3d2:	653b      	str	r3, [r7, #80]	; 0x50
 800f3d4:	4a2d      	ldr	r2, [pc, #180]	; (800f48c <f_mkfs+0x288>)
 800f3d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d007      	beq.n	800f3f0 <f_mkfs+0x1ec>
 800f3e0:	4a2a      	ldr	r2, [pc, #168]	; (800f48c <f_mkfs+0x288>)
 800f3e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3e8:	461a      	mov	r2, r3
 800f3ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f3ec:	4293      	cmp	r3, r2
 800f3ee:	d2eb      	bcs.n	800f3c8 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800f3f0:	693a      	ldr	r2, [r7, #16]
 800f3f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3f8:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800f3fa:	6a3b      	ldr	r3, [r7, #32]
 800f3fc:	3302      	adds	r3, #2
 800f3fe:	009a      	lsls	r2, r3, #2
 800f400:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f402:	4413      	add	r3, r2
 800f404:	1e5a      	subs	r2, r3, #1
 800f406:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f408:	fbb2 f3f3 	udiv	r3, r2, r3
 800f40c:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800f40e:	2320      	movs	r3, #32
 800f410:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800f412:	2300      	movs	r3, #0
 800f414:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800f416:	6a3b      	ldr	r3, [r7, #32]
 800f418:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f41c:	4293      	cmp	r3, r2
 800f41e:	d903      	bls.n	800f428 <f_mkfs+0x224>
 800f420:	6a3b      	ldr	r3, [r7, #32]
 800f422:	4a1b      	ldr	r2, [pc, #108]	; (800f490 <f_mkfs+0x28c>)
 800f424:	4293      	cmp	r3, r2
 800f426:	d952      	bls.n	800f4ce <f_mkfs+0x2ca>
 800f428:	230e      	movs	r3, #14
 800f42a:	e311      	b.n	800fa50 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800f42c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d11b      	bne.n	800f46a <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800f432:	693b      	ldr	r3, [r7, #16]
 800f434:	0b1b      	lsrs	r3, r3, #12
 800f436:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f438:	2300      	movs	r3, #0
 800f43a:	64bb      	str	r3, [r7, #72]	; 0x48
 800f43c:	2301      	movs	r3, #1
 800f43e:	653b      	str	r3, [r7, #80]	; 0x50
 800f440:	e005      	b.n	800f44e <f_mkfs+0x24a>
 800f442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f444:	3301      	adds	r3, #1
 800f446:	64bb      	str	r3, [r7, #72]	; 0x48
 800f448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f44a:	005b      	lsls	r3, r3, #1
 800f44c:	653b      	str	r3, [r7, #80]	; 0x50
 800f44e:	4a11      	ldr	r2, [pc, #68]	; (800f494 <f_mkfs+0x290>)
 800f450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d007      	beq.n	800f46a <f_mkfs+0x266>
 800f45a:	4a0e      	ldr	r2, [pc, #56]	; (800f494 <f_mkfs+0x290>)
 800f45c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f45e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f462:	461a      	mov	r2, r3
 800f464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f466:	4293      	cmp	r3, r2
 800f468:	d2eb      	bcs.n	800f442 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800f46a:	693a      	ldr	r2, [r7, #16]
 800f46c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f46e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f472:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800f474:	6a3b      	ldr	r3, [r7, #32]
 800f476:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f47a:	4293      	cmp	r3, r2
 800f47c:	d90c      	bls.n	800f498 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800f47e:	6a3b      	ldr	r3, [r7, #32]
 800f480:	3302      	adds	r3, #2
 800f482:	005b      	lsls	r3, r3, #1
 800f484:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f486:	e012      	b.n	800f4ae <f_mkfs+0x2aa>
 800f488:	20000978 	.word	0x20000978
 800f48c:	08011998 	.word	0x08011998
 800f490:	0ffffff5 	.word	0x0ffffff5
 800f494:	080119a8 	.word	0x080119a8
				} else {
					fmt = FS_FAT12;
 800f498:	2301      	movs	r3, #1
 800f49a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800f49e:	6a3a      	ldr	r2, [r7, #32]
 800f4a0:	4613      	mov	r3, r2
 800f4a2:	005b      	lsls	r3, r3, #1
 800f4a4:	4413      	add	r3, r2
 800f4a6:	3301      	adds	r3, #1
 800f4a8:	085b      	lsrs	r3, r3, #1
 800f4aa:	3303      	adds	r3, #3
 800f4ac:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800f4ae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f4b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4b2:	4413      	add	r3, r2
 800f4b4:	1e5a      	subs	r2, r3, #1
 800f4b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f4b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4bc:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800f4be:	2301      	movs	r3, #1
 800f4c0:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800f4c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4c4:	015a      	lsls	r2, r3, #5
 800f4c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f4c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4cc:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800f4ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4d2:	4413      	add	r3, r2
 800f4d4:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800f4d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f4d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4da:	fb03 f202 	mul.w	r2, r3, r2
 800f4de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f4e0:	4413      	add	r3, r2
 800f4e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f4e4:	4413      	add	r3, r2
 800f4e6:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800f4e8:	697a      	ldr	r2, [r7, #20]
 800f4ea:	69fb      	ldr	r3, [r7, #28]
 800f4ec:	4413      	add	r3, r2
 800f4ee:	1e5a      	subs	r2, r3, #1
 800f4f0:	697b      	ldr	r3, [r7, #20]
 800f4f2:	425b      	negs	r3, r3
 800f4f4:	401a      	ands	r2, r3
 800f4f6:	69fb      	ldr	r3, [r7, #28]
 800f4f8:	1ad3      	subs	r3, r2, r3
 800f4fa:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800f4fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f500:	2b03      	cmp	r3, #3
 800f502:	d108      	bne.n	800f516 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800f504:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f508:	4413      	add	r3, r2
 800f50a:	657b      	str	r3, [r7, #84]	; 0x54
 800f50c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f50e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f510:	4413      	add	r3, r2
 800f512:	65bb      	str	r3, [r7, #88]	; 0x58
 800f514:	e006      	b.n	800f524 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800f516:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f51a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f51e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f520:	4413      	add	r3, r2
 800f522:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800f524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f526:	011a      	lsls	r2, r3, #4
 800f528:	69fb      	ldr	r3, [r7, #28]
 800f52a:	441a      	add	r2, r3
 800f52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52e:	1ad2      	subs	r2, r2, r3
 800f530:	693b      	ldr	r3, [r7, #16]
 800f532:	429a      	cmp	r2, r3
 800f534:	d901      	bls.n	800f53a <f_mkfs+0x336>
 800f536:	230e      	movs	r3, #14
 800f538:	e28a      	b.n	800fa50 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800f53a:	693a      	ldr	r2, [r7, #16]
 800f53c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f53e:	1ad2      	subs	r2, r2, r3
 800f540:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f542:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f544:	fb01 f303 	mul.w	r3, r1, r3
 800f548:	1ad2      	subs	r2, r2, r3
 800f54a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f54c:	1ad2      	subs	r2, r2, r3
 800f54e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f550:	fbb2 f3f3 	udiv	r3, r2, r3
 800f554:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800f556:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f55a:	2b03      	cmp	r3, #3
 800f55c:	d10f      	bne.n	800f57e <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800f55e:	6a3b      	ldr	r3, [r7, #32]
 800f560:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f564:	4293      	cmp	r3, r2
 800f566:	d80a      	bhi.n	800f57e <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d105      	bne.n	800f57a <f_mkfs+0x376>
 800f56e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f570:	085b      	lsrs	r3, r3, #1
 800f572:	607b      	str	r3, [r7, #4]
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d144      	bne.n	800f604 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800f57a:	230e      	movs	r3, #14
 800f57c:	e268      	b.n	800fa50 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800f57e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f582:	2b02      	cmp	r3, #2
 800f584:	d133      	bne.n	800f5ee <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800f586:	6a3b      	ldr	r3, [r7, #32]
 800f588:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f58c:	4293      	cmp	r3, r2
 800f58e:	d91e      	bls.n	800f5ce <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d107      	bne.n	800f5a6 <f_mkfs+0x3a2>
 800f596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f598:	005b      	lsls	r3, r3, #1
 800f59a:	2b40      	cmp	r3, #64	; 0x40
 800f59c:	d803      	bhi.n	800f5a6 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800f59e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5a0:	005b      	lsls	r3, r3, #1
 800f5a2:	607b      	str	r3, [r7, #4]
 800f5a4:	e033      	b.n	800f60e <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800f5a6:	7afb      	ldrb	r3, [r7, #11]
 800f5a8:	f003 0302 	and.w	r3, r3, #2
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d003      	beq.n	800f5b8 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800f5b0:	2303      	movs	r3, #3
 800f5b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800f5b6:	e02a      	b.n	800f60e <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d105      	bne.n	800f5ca <f_mkfs+0x3c6>
 800f5be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5c0:	005b      	lsls	r3, r3, #1
 800f5c2:	607b      	str	r3, [r7, #4]
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2b80      	cmp	r3, #128	; 0x80
 800f5c8:	d91e      	bls.n	800f608 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800f5ca:	230e      	movs	r3, #14
 800f5cc:	e240      	b.n	800fa50 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800f5ce:	6a3b      	ldr	r3, [r7, #32]
 800f5d0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f5d4:	4293      	cmp	r3, r2
 800f5d6:	d80a      	bhi.n	800f5ee <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d105      	bne.n	800f5ea <f_mkfs+0x3e6>
 800f5de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5e0:	005b      	lsls	r3, r3, #1
 800f5e2:	607b      	str	r3, [r7, #4]
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2b80      	cmp	r3, #128	; 0x80
 800f5e8:	d910      	bls.n	800f60c <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800f5ea:	230e      	movs	r3, #14
 800f5ec:	e230      	b.n	800fa50 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800f5ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f5f2:	2b01      	cmp	r3, #1
 800f5f4:	d10c      	bne.n	800f610 <f_mkfs+0x40c>
 800f5f6:	6a3b      	ldr	r3, [r7, #32]
 800f5f8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f5fc:	4293      	cmp	r3, r2
 800f5fe:	d907      	bls.n	800f610 <f_mkfs+0x40c>
 800f600:	230e      	movs	r3, #14
 800f602:	e225      	b.n	800fa50 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800f604:	bf00      	nop
 800f606:	e6ce      	b.n	800f3a6 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f608:	bf00      	nop
 800f60a:	e6cc      	b.n	800f3a6 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f60c:	bf00      	nop
			pau = au;
 800f60e:	e6ca      	b.n	800f3a6 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800f610:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800f612:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f614:	461a      	mov	r2, r3
 800f616:	2100      	movs	r1, #0
 800f618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f61a:	f7fd fc96 	bl	800cf4a <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800f61e:	220b      	movs	r2, #11
 800f620:	49b2      	ldr	r1, [pc, #712]	; (800f8ec <f_mkfs+0x6e8>)
 800f622:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f624:	f7fd fc70 	bl	800cf08 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800f628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f62a:	330b      	adds	r3, #11
 800f62c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f62e:	4611      	mov	r1, r2
 800f630:	4618      	mov	r0, r3
 800f632:	f7fd fc22 	bl	800ce7a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800f636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f638:	330d      	adds	r3, #13
 800f63a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f63c:	b2d2      	uxtb	r2, r2
 800f63e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800f640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f642:	330e      	adds	r3, #14
 800f644:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f646:	b292      	uxth	r2, r2
 800f648:	4611      	mov	r1, r2
 800f64a:	4618      	mov	r0, r3
 800f64c:	f7fd fc15 	bl	800ce7a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800f650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f652:	3310      	adds	r3, #16
 800f654:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f656:	b2d2      	uxtb	r2, r2
 800f658:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800f65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f65c:	f103 0211 	add.w	r2, r3, #17
 800f660:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f664:	2b03      	cmp	r3, #3
 800f666:	d002      	beq.n	800f66e <f_mkfs+0x46a>
 800f668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f66a:	b29b      	uxth	r3, r3
 800f66c:	e000      	b.n	800f670 <f_mkfs+0x46c>
 800f66e:	2300      	movs	r3, #0
 800f670:	4619      	mov	r1, r3
 800f672:	4610      	mov	r0, r2
 800f674:	f7fd fc01 	bl	800ce7a <st_word>
		if (sz_vol < 0x10000) {
 800f678:	693b      	ldr	r3, [r7, #16]
 800f67a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f67e:	d208      	bcs.n	800f692 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800f680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f682:	3313      	adds	r3, #19
 800f684:	693a      	ldr	r2, [r7, #16]
 800f686:	b292      	uxth	r2, r2
 800f688:	4611      	mov	r1, r2
 800f68a:	4618      	mov	r0, r3
 800f68c:	f7fd fbf5 	bl	800ce7a <st_word>
 800f690:	e006      	b.n	800f6a0 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800f692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f694:	3320      	adds	r3, #32
 800f696:	693a      	ldr	r2, [r7, #16]
 800f698:	4611      	mov	r1, r2
 800f69a:	4618      	mov	r0, r3
 800f69c:	f7fd fc08 	bl	800ceb0 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800f6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6a2:	3315      	adds	r3, #21
 800f6a4:	22f8      	movs	r2, #248	; 0xf8
 800f6a6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800f6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6aa:	3318      	adds	r3, #24
 800f6ac:	213f      	movs	r1, #63	; 0x3f
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f7fd fbe3 	bl	800ce7a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800f6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b6:	331a      	adds	r3, #26
 800f6b8:	21ff      	movs	r1, #255	; 0xff
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7fd fbdd 	bl	800ce7a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800f6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6c2:	331c      	adds	r3, #28
 800f6c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f7fd fbf2 	bl	800ceb0 <st_dword>
		if (fmt == FS_FAT32) {
 800f6cc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f6d0:	2b03      	cmp	r3, #3
 800f6d2:	d131      	bne.n	800f738 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800f6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6d6:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800f6da:	f7fb fca7 	bl	800b02c <get_fattime>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	4619      	mov	r1, r3
 800f6e2:	4620      	mov	r0, r4
 800f6e4:	f7fd fbe4 	bl	800ceb0 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800f6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ea:	3324      	adds	r3, #36	; 0x24
 800f6ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f7fd fbde 	bl	800ceb0 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800f6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6f6:	332c      	adds	r3, #44	; 0x2c
 800f6f8:	2102      	movs	r1, #2
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f7fd fbd8 	bl	800ceb0 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800f700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f702:	3330      	adds	r3, #48	; 0x30
 800f704:	2101      	movs	r1, #1
 800f706:	4618      	mov	r0, r3
 800f708:	f7fd fbb7 	bl	800ce7a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800f70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f70e:	3332      	adds	r3, #50	; 0x32
 800f710:	2106      	movs	r1, #6
 800f712:	4618      	mov	r0, r3
 800f714:	f7fd fbb1 	bl	800ce7a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800f718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f71a:	3340      	adds	r3, #64	; 0x40
 800f71c:	2280      	movs	r2, #128	; 0x80
 800f71e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800f720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f722:	3342      	adds	r3, #66	; 0x42
 800f724:	2229      	movs	r2, #41	; 0x29
 800f726:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800f728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f72a:	3347      	adds	r3, #71	; 0x47
 800f72c:	2213      	movs	r2, #19
 800f72e:	4970      	ldr	r1, [pc, #448]	; (800f8f0 <f_mkfs+0x6ec>)
 800f730:	4618      	mov	r0, r3
 800f732:	f7fd fbe9 	bl	800cf08 <mem_cpy>
 800f736:	e020      	b.n	800f77a <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800f738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f73a:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800f73e:	f7fb fc75 	bl	800b02c <get_fattime>
 800f742:	4603      	mov	r3, r0
 800f744:	4619      	mov	r1, r3
 800f746:	4620      	mov	r0, r4
 800f748:	f7fd fbb2 	bl	800ceb0 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800f74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f74e:	3316      	adds	r3, #22
 800f750:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f752:	b292      	uxth	r2, r2
 800f754:	4611      	mov	r1, r2
 800f756:	4618      	mov	r0, r3
 800f758:	f7fd fb8f 	bl	800ce7a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800f75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f75e:	3324      	adds	r3, #36	; 0x24
 800f760:	2280      	movs	r2, #128	; 0x80
 800f762:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800f764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f766:	3326      	adds	r3, #38	; 0x26
 800f768:	2229      	movs	r2, #41	; 0x29
 800f76a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800f76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f76e:	332b      	adds	r3, #43	; 0x2b
 800f770:	2213      	movs	r2, #19
 800f772:	4960      	ldr	r1, [pc, #384]	; (800f8f4 <f_mkfs+0x6f0>)
 800f774:	4618      	mov	r0, r3
 800f776:	f7fd fbc7 	bl	800cf08 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800f77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f77c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f780:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f784:	4618      	mov	r0, r3
 800f786:	f7fd fb78 	bl	800ce7a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800f78a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f78e:	2301      	movs	r3, #1
 800f790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f792:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f794:	f7fd faf8 	bl	800cd88 <disk_write>
 800f798:	4603      	mov	r3, r0
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d001      	beq.n	800f7a2 <f_mkfs+0x59e>
 800f79e:	2301      	movs	r3, #1
 800f7a0:	e156      	b.n	800fa50 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800f7a2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f7a6:	2b03      	cmp	r3, #3
 800f7a8:	d140      	bne.n	800f82c <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800f7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ac:	1d9a      	adds	r2, r3, #6
 800f7ae:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f7b2:	2301      	movs	r3, #1
 800f7b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f7b6:	f7fd fae7 	bl	800cd88 <disk_write>
			mem_set(buf, 0, ss);
 800f7ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f7bc:	461a      	mov	r2, r3
 800f7be:	2100      	movs	r1, #0
 800f7c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7c2:	f7fd fbc2 	bl	800cf4a <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800f7c6:	494c      	ldr	r1, [pc, #304]	; (800f8f8 <f_mkfs+0x6f4>)
 800f7c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7ca:	f7fd fb71 	bl	800ceb0 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800f7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7d0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f7d4:	4949      	ldr	r1, [pc, #292]	; (800f8fc <f_mkfs+0x6f8>)
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7fd fb6a 	bl	800ceb0 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800f7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7de:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f7e2:	6a3b      	ldr	r3, [r7, #32]
 800f7e4:	3b01      	subs	r3, #1
 800f7e6:	4619      	mov	r1, r3
 800f7e8:	4610      	mov	r0, r2
 800f7ea:	f7fd fb61 	bl	800ceb0 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800f7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7f0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f7f4:	2102      	movs	r1, #2
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f7fd fb5a 	bl	800ceb0 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800f7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f802:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f806:	4618      	mov	r0, r3
 800f808:	f7fd fb37 	bl	800ce7a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800f80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f80e:	1dda      	adds	r2, r3, #7
 800f810:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f814:	2301      	movs	r3, #1
 800f816:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f818:	f7fd fab6 	bl	800cd88 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800f81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f81e:	1c5a      	adds	r2, r3, #1
 800f820:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f824:	2301      	movs	r3, #1
 800f826:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f828:	f7fd faae 	bl	800cd88 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800f82c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f82e:	2100      	movs	r1, #0
 800f830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f832:	f7fd fb8a 	bl	800cf4a <mem_set>
		sect = b_fat;		/* FAT start sector */
 800f836:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f838:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800f83a:	2300      	movs	r3, #0
 800f83c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f83e:	e04b      	b.n	800f8d8 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800f840:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f844:	2b03      	cmp	r3, #3
 800f846:	d113      	bne.n	800f870 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800f848:	f06f 0107 	mvn.w	r1, #7
 800f84c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f84e:	f7fd fb2f 	bl	800ceb0 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800f852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f854:	3304      	adds	r3, #4
 800f856:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7fd fb28 	bl	800ceb0 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800f860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f862:	3308      	adds	r3, #8
 800f864:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f868:	4618      	mov	r0, r3
 800f86a:	f7fd fb21 	bl	800ceb0 <st_dword>
 800f86e:	e00b      	b.n	800f888 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800f870:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f874:	2b01      	cmp	r3, #1
 800f876:	d101      	bne.n	800f87c <f_mkfs+0x678>
 800f878:	4b21      	ldr	r3, [pc, #132]	; (800f900 <f_mkfs+0x6fc>)
 800f87a:	e001      	b.n	800f880 <f_mkfs+0x67c>
 800f87c:	f06f 0307 	mvn.w	r3, #7
 800f880:	4619      	mov	r1, r3
 800f882:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f884:	f7fd fb14 	bl	800ceb0 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800f888:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f88a:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800f88c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f890:	4293      	cmp	r3, r2
 800f892:	bf28      	it	cs
 800f894:	4613      	movcs	r3, r2
 800f896:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800f898:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f89c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f89e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f8a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f8a2:	f7fd fa71 	bl	800cd88 <disk_write>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d001      	beq.n	800f8b0 <f_mkfs+0x6ac>
 800f8ac:	2301      	movs	r3, #1
 800f8ae:	e0cf      	b.n	800fa50 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800f8b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f8b2:	461a      	mov	r2, r3
 800f8b4:	2100      	movs	r1, #0
 800f8b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f8b8:	f7fd fb47 	bl	800cf4a <mem_set>
				sect += n; nsect -= n;
 800f8bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f8be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f8c0:	4413      	add	r3, r2
 800f8c2:	667b      	str	r3, [r7, #100]	; 0x64
 800f8c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f8c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f8c8:	1ad3      	subs	r3, r2, r3
 800f8ca:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800f8cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d1dc      	bne.n	800f88c <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800f8d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8d4:	3301      	adds	r3, #1
 800f8d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800f8d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f8da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	d3af      	bcc.n	800f840 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800f8e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f8e4:	2b03      	cmp	r3, #3
 800f8e6:	d10d      	bne.n	800f904 <f_mkfs+0x700>
 800f8e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8ea:	e00c      	b.n	800f906 <f_mkfs+0x702>
 800f8ec:	08011818 	.word	0x08011818
 800f8f0:	08011824 	.word	0x08011824
 800f8f4:	08011838 	.word	0x08011838
 800f8f8:	41615252 	.word	0x41615252
 800f8fc:	61417272 	.word	0x61417272
 800f900:	00fffff8 	.word	0x00fffff8
 800f904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f906:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800f908:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f90c:	4293      	cmp	r3, r2
 800f90e:	bf28      	it	cs
 800f910:	4613      	movcs	r3, r2
 800f912:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800f914:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f91a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f91c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f91e:	f7fd fa33 	bl	800cd88 <disk_write>
 800f922:	4603      	mov	r3, r0
 800f924:	2b00      	cmp	r3, #0
 800f926:	d001      	beq.n	800f92c <f_mkfs+0x728>
 800f928:	2301      	movs	r3, #1
 800f92a:	e091      	b.n	800fa50 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800f92c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f92e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f930:	4413      	add	r3, r2
 800f932:	667b      	str	r3, [r7, #100]	; 0x64
 800f934:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f936:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f938:	1ad3      	subs	r3, r2, r3
 800f93a:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800f93c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d1e2      	bne.n	800f908 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800f942:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f946:	2b03      	cmp	r3, #3
 800f948:	d103      	bne.n	800f952 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800f94a:	230c      	movs	r3, #12
 800f94c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800f950:	e010      	b.n	800f974 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800f952:	693b      	ldr	r3, [r7, #16]
 800f954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f958:	d303      	bcc.n	800f962 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800f95a:	2306      	movs	r3, #6
 800f95c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800f960:	e008      	b.n	800f974 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800f962:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f966:	2b02      	cmp	r3, #2
 800f968:	d101      	bne.n	800f96e <f_mkfs+0x76a>
 800f96a:	2304      	movs	r3, #4
 800f96c:	e000      	b.n	800f970 <f_mkfs+0x76c>
 800f96e:	2301      	movs	r3, #1
 800f970:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800f974:	7afb      	ldrb	r3, [r7, #11]
 800f976:	f003 0308 	and.w	r3, r3, #8
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d15b      	bne.n	800fa36 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800f97e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f980:	461a      	mov	r2, r3
 800f982:	2100      	movs	r1, #0
 800f984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f986:	f7fd fae0 	bl	800cf4a <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800f98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f98c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f990:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f994:	4618      	mov	r0, r3
 800f996:	f7fd fa70 	bl	800ce7a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800f99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f99c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f9a0:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800f9a2:	69bb      	ldr	r3, [r7, #24]
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800f9a8:	69bb      	ldr	r3, [r7, #24]
 800f9aa:	3301      	adds	r3, #1
 800f9ac:	2201      	movs	r2, #1
 800f9ae:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800f9b0:	69bb      	ldr	r3, [r7, #24]
 800f9b2:	3302      	adds	r3, #2
 800f9b4:	2201      	movs	r2, #1
 800f9b6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800f9b8:	69bb      	ldr	r3, [r7, #24]
 800f9ba:	3303      	adds	r3, #3
 800f9bc:	2200      	movs	r2, #0
 800f9be:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800f9c0:	69bb      	ldr	r3, [r7, #24]
 800f9c2:	3304      	adds	r3, #4
 800f9c4:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800f9c8:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800f9ca:	693a      	ldr	r2, [r7, #16]
 800f9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ce:	441a      	add	r2, r3
 800f9d0:	4b21      	ldr	r3, [pc, #132]	; (800fa58 <f_mkfs+0x854>)
 800f9d2:	fba3 1302 	umull	r1, r3, r3, r2
 800f9d6:	1ad2      	subs	r2, r2, r3
 800f9d8:	0852      	lsrs	r2, r2, #1
 800f9da:	4413      	add	r3, r2
 800f9dc:	0b5b      	lsrs	r3, r3, #13
 800f9de:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800f9e0:	69bb      	ldr	r3, [r7, #24]
 800f9e2:	3305      	adds	r3, #5
 800f9e4:	22fe      	movs	r2, #254	; 0xfe
 800f9e6:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800f9e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9ea:	089b      	lsrs	r3, r3, #2
 800f9ec:	b2da      	uxtb	r2, r3
 800f9ee:	69bb      	ldr	r3, [r7, #24]
 800f9f0:	3306      	adds	r3, #6
 800f9f2:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800f9f6:	b2d2      	uxtb	r2, r2
 800f9f8:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800f9fa:	69bb      	ldr	r3, [r7, #24]
 800f9fc:	3307      	adds	r3, #7
 800f9fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fa00:	b2d2      	uxtb	r2, r2
 800fa02:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800fa04:	69bb      	ldr	r3, [r7, #24]
 800fa06:	3308      	adds	r3, #8
 800fa08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7fd fa50 	bl	800ceb0 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800fa10:	69bb      	ldr	r3, [r7, #24]
 800fa12:	330c      	adds	r3, #12
 800fa14:	693a      	ldr	r2, [r7, #16]
 800fa16:	4611      	mov	r1, r2
 800fa18:	4618      	mov	r0, r3
 800fa1a:	f7fd fa49 	bl	800ceb0 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800fa1e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fa22:	2301      	movs	r3, #1
 800fa24:	2200      	movs	r2, #0
 800fa26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fa28:	f7fd f9ae 	bl	800cd88 <disk_write>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d001      	beq.n	800fa36 <f_mkfs+0x832>
 800fa32:	2301      	movs	r3, #1
 800fa34:	e00c      	b.n	800fa50 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800fa36:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	2100      	movs	r1, #0
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f7fd f9c2 	bl	800cdc8 <disk_ioctl>
 800fa44:	4603      	mov	r3, r0
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d001      	beq.n	800fa4e <f_mkfs+0x84a>
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	e000      	b.n	800fa50 <f_mkfs+0x84c>

	return FR_OK;
 800fa4e:	2300      	movs	r3, #0
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	3774      	adds	r7, #116	; 0x74
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd90      	pop	{r4, r7, pc}
 800fa58:	0515565b 	.word	0x0515565b

0800fa5c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fa5c:	b480      	push	{r7}
 800fa5e:	b087      	sub	sp, #28
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	60f8      	str	r0, [r7, #12]
 800fa64:	60b9      	str	r1, [r7, #8]
 800fa66:	4613      	mov	r3, r2
 800fa68:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fa72:	4b1f      	ldr	r3, [pc, #124]	; (800faf0 <FATFS_LinkDriverEx+0x94>)
 800fa74:	7a5b      	ldrb	r3, [r3, #9]
 800fa76:	b2db      	uxtb	r3, r3
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d131      	bne.n	800fae0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fa7c:	4b1c      	ldr	r3, [pc, #112]	; (800faf0 <FATFS_LinkDriverEx+0x94>)
 800fa7e:	7a5b      	ldrb	r3, [r3, #9]
 800fa80:	b2db      	uxtb	r3, r3
 800fa82:	461a      	mov	r2, r3
 800fa84:	4b1a      	ldr	r3, [pc, #104]	; (800faf0 <FATFS_LinkDriverEx+0x94>)
 800fa86:	2100      	movs	r1, #0
 800fa88:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fa8a:	4b19      	ldr	r3, [pc, #100]	; (800faf0 <FATFS_LinkDriverEx+0x94>)
 800fa8c:	7a5b      	ldrb	r3, [r3, #9]
 800fa8e:	b2db      	uxtb	r3, r3
 800fa90:	4a17      	ldr	r2, [pc, #92]	; (800faf0 <FATFS_LinkDriverEx+0x94>)
 800fa92:	009b      	lsls	r3, r3, #2
 800fa94:	4413      	add	r3, r2
 800fa96:	68fa      	ldr	r2, [r7, #12]
 800fa98:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fa9a:	4b15      	ldr	r3, [pc, #84]	; (800faf0 <FATFS_LinkDriverEx+0x94>)
 800fa9c:	7a5b      	ldrb	r3, [r3, #9]
 800fa9e:	b2db      	uxtb	r3, r3
 800faa0:	461a      	mov	r2, r3
 800faa2:	4b13      	ldr	r3, [pc, #76]	; (800faf0 <FATFS_LinkDriverEx+0x94>)
 800faa4:	4413      	add	r3, r2
 800faa6:	79fa      	ldrb	r2, [r7, #7]
 800faa8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800faaa:	4b11      	ldr	r3, [pc, #68]	; (800faf0 <FATFS_LinkDriverEx+0x94>)
 800faac:	7a5b      	ldrb	r3, [r3, #9]
 800faae:	b2db      	uxtb	r3, r3
 800fab0:	1c5a      	adds	r2, r3, #1
 800fab2:	b2d1      	uxtb	r1, r2
 800fab4:	4a0e      	ldr	r2, [pc, #56]	; (800faf0 <FATFS_LinkDriverEx+0x94>)
 800fab6:	7251      	strb	r1, [r2, #9]
 800fab8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800faba:	7dbb      	ldrb	r3, [r7, #22]
 800fabc:	3330      	adds	r3, #48	; 0x30
 800fabe:	b2da      	uxtb	r2, r3
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fac4:	68bb      	ldr	r3, [r7, #8]
 800fac6:	3301      	adds	r3, #1
 800fac8:	223a      	movs	r2, #58	; 0x3a
 800faca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	3302      	adds	r3, #2
 800fad0:	222f      	movs	r2, #47	; 0x2f
 800fad2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	3303      	adds	r3, #3
 800fad8:	2200      	movs	r2, #0
 800fada:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fadc:	2300      	movs	r3, #0
 800fade:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fae0:	7dfb      	ldrb	r3, [r7, #23]
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	371c      	adds	r7, #28
 800fae6:	46bd      	mov	sp, r7
 800fae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faec:	4770      	bx	lr
 800faee:	bf00      	nop
 800faf0:	200009a0 	.word	0x200009a0

0800faf4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b082      	sub	sp, #8
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
 800fafc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fafe:	2200      	movs	r2, #0
 800fb00:	6839      	ldr	r1, [r7, #0]
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	f7ff ffaa 	bl	800fa5c <FATFS_LinkDriverEx>
 800fb08:	4603      	mov	r3, r0
}
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	3708      	adds	r7, #8
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	bd80      	pop	{r7, pc}
	...

0800fb14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fb18:	2200      	movs	r2, #0
 800fb1a:	4912      	ldr	r1, [pc, #72]	; (800fb64 <MX_USB_DEVICE_Init+0x50>)
 800fb1c:	4812      	ldr	r0, [pc, #72]	; (800fb68 <MX_USB_DEVICE_Init+0x54>)
 800fb1e:	f7fb ff3f 	bl	800b9a0 <USBD_Init>
 800fb22:	4603      	mov	r3, r0
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d001      	beq.n	800fb2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fb28:	f7f1 f972 	bl	8000e10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fb2c:	490f      	ldr	r1, [pc, #60]	; (800fb6c <MX_USB_DEVICE_Init+0x58>)
 800fb2e:	480e      	ldr	r0, [pc, #56]	; (800fb68 <MX_USB_DEVICE_Init+0x54>)
 800fb30:	f7fb ff66 	bl	800ba00 <USBD_RegisterClass>
 800fb34:	4603      	mov	r3, r0
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d001      	beq.n	800fb3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fb3a:	f7f1 f969 	bl	8000e10 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fb3e:	490c      	ldr	r1, [pc, #48]	; (800fb70 <MX_USB_DEVICE_Init+0x5c>)
 800fb40:	4809      	ldr	r0, [pc, #36]	; (800fb68 <MX_USB_DEVICE_Init+0x54>)
 800fb42:	f7fb fe87 	bl	800b854 <USBD_CDC_RegisterInterface>
 800fb46:	4603      	mov	r3, r0
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d001      	beq.n	800fb50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fb4c:	f7f1 f960 	bl	8000e10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fb50:	4805      	ldr	r0, [pc, #20]	; (800fb68 <MX_USB_DEVICE_Init+0x54>)
 800fb52:	f7fb ff7c 	bl	800ba4e <USBD_Start>
 800fb56:	4603      	mov	r3, r0
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d001      	beq.n	800fb60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fb5c:	f7f1 f958 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fb60:	bf00      	nop
 800fb62:	bd80      	pop	{r7, pc}
 800fb64:	20000130 	.word	0x20000130
 800fb68:	200009ac 	.word	0x200009ac
 800fb6c:	20000018 	.word	0x20000018
 800fb70:	2000011c 	.word	0x2000011c

0800fb74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fb78:	2200      	movs	r2, #0
 800fb7a:	4905      	ldr	r1, [pc, #20]	; (800fb90 <CDC_Init_FS+0x1c>)
 800fb7c:	4805      	ldr	r0, [pc, #20]	; (800fb94 <CDC_Init_FS+0x20>)
 800fb7e:	f7fb fe7e 	bl	800b87e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fb82:	4905      	ldr	r1, [pc, #20]	; (800fb98 <CDC_Init_FS+0x24>)
 800fb84:	4803      	ldr	r0, [pc, #12]	; (800fb94 <CDC_Init_FS+0x20>)
 800fb86:	f7fb fe98 	bl	800b8ba <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fb8a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	bd80      	pop	{r7, pc}
 800fb90:	2000147c 	.word	0x2000147c
 800fb94:	200009ac 	.word	0x200009ac
 800fb98:	20000c7c 	.word	0x20000c7c

0800fb9c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fb9c:	b480      	push	{r7}
 800fb9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fba0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fba2:	4618      	mov	r0, r3
 800fba4:	46bd      	mov	sp, r7
 800fba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbaa:	4770      	bx	lr

0800fbac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fbac:	b480      	push	{r7}
 800fbae:	b083      	sub	sp, #12
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	6039      	str	r1, [r7, #0]
 800fbb6:	71fb      	strb	r3, [r7, #7]
 800fbb8:	4613      	mov	r3, r2
 800fbba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fbbc:	79fb      	ldrb	r3, [r7, #7]
 800fbbe:	2b23      	cmp	r3, #35	; 0x23
 800fbc0:	d84a      	bhi.n	800fc58 <CDC_Control_FS+0xac>
 800fbc2:	a201      	add	r2, pc, #4	; (adr r2, 800fbc8 <CDC_Control_FS+0x1c>)
 800fbc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbc8:	0800fc59 	.word	0x0800fc59
 800fbcc:	0800fc59 	.word	0x0800fc59
 800fbd0:	0800fc59 	.word	0x0800fc59
 800fbd4:	0800fc59 	.word	0x0800fc59
 800fbd8:	0800fc59 	.word	0x0800fc59
 800fbdc:	0800fc59 	.word	0x0800fc59
 800fbe0:	0800fc59 	.word	0x0800fc59
 800fbe4:	0800fc59 	.word	0x0800fc59
 800fbe8:	0800fc59 	.word	0x0800fc59
 800fbec:	0800fc59 	.word	0x0800fc59
 800fbf0:	0800fc59 	.word	0x0800fc59
 800fbf4:	0800fc59 	.word	0x0800fc59
 800fbf8:	0800fc59 	.word	0x0800fc59
 800fbfc:	0800fc59 	.word	0x0800fc59
 800fc00:	0800fc59 	.word	0x0800fc59
 800fc04:	0800fc59 	.word	0x0800fc59
 800fc08:	0800fc59 	.word	0x0800fc59
 800fc0c:	0800fc59 	.word	0x0800fc59
 800fc10:	0800fc59 	.word	0x0800fc59
 800fc14:	0800fc59 	.word	0x0800fc59
 800fc18:	0800fc59 	.word	0x0800fc59
 800fc1c:	0800fc59 	.word	0x0800fc59
 800fc20:	0800fc59 	.word	0x0800fc59
 800fc24:	0800fc59 	.word	0x0800fc59
 800fc28:	0800fc59 	.word	0x0800fc59
 800fc2c:	0800fc59 	.word	0x0800fc59
 800fc30:	0800fc59 	.word	0x0800fc59
 800fc34:	0800fc59 	.word	0x0800fc59
 800fc38:	0800fc59 	.word	0x0800fc59
 800fc3c:	0800fc59 	.word	0x0800fc59
 800fc40:	0800fc59 	.word	0x0800fc59
 800fc44:	0800fc59 	.word	0x0800fc59
 800fc48:	0800fc59 	.word	0x0800fc59
 800fc4c:	0800fc59 	.word	0x0800fc59
 800fc50:	0800fc59 	.word	0x0800fc59
 800fc54:	0800fc59 	.word	0x0800fc59
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fc58:	bf00      	nop
  }

  return (USBD_OK);
 800fc5a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	370c      	adds	r7, #12
 800fc60:	46bd      	mov	sp, r7
 800fc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc66:	4770      	bx	lr

0800fc68 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b082      	sub	sp, #8
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
 800fc70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fc72:	6879      	ldr	r1, [r7, #4]
 800fc74:	4805      	ldr	r0, [pc, #20]	; (800fc8c <CDC_Receive_FS+0x24>)
 800fc76:	f7fb fe20 	bl	800b8ba <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fc7a:	4804      	ldr	r0, [pc, #16]	; (800fc8c <CDC_Receive_FS+0x24>)
 800fc7c:	f7fb fe66 	bl	800b94c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fc80:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fc82:	4618      	mov	r0, r3
 800fc84:	3708      	adds	r7, #8
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}
 800fc8a:	bf00      	nop
 800fc8c:	200009ac 	.word	0x200009ac

0800fc90 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b084      	sub	sp, #16
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
 800fc98:	460b      	mov	r3, r1
 800fc9a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fca0:	4b0d      	ldr	r3, [pc, #52]	; (800fcd8 <CDC_Transmit_FS+0x48>)
 800fca2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fca6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fca8:	68bb      	ldr	r3, [r7, #8]
 800fcaa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d001      	beq.n	800fcb6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	e00b      	b.n	800fcce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fcb6:	887b      	ldrh	r3, [r7, #2]
 800fcb8:	461a      	mov	r2, r3
 800fcba:	6879      	ldr	r1, [r7, #4]
 800fcbc:	4806      	ldr	r0, [pc, #24]	; (800fcd8 <CDC_Transmit_FS+0x48>)
 800fcbe:	f7fb fdde 	bl	800b87e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fcc2:	4805      	ldr	r0, [pc, #20]	; (800fcd8 <CDC_Transmit_FS+0x48>)
 800fcc4:	f7fb fe12 	bl	800b8ec <USBD_CDC_TransmitPacket>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fccc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	3710      	adds	r7, #16
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}
 800fcd6:	bf00      	nop
 800fcd8:	200009ac 	.word	0x200009ac

0800fcdc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fcdc:	b480      	push	{r7}
 800fcde:	b087      	sub	sp, #28
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	60f8      	str	r0, [r7, #12]
 800fce4:	60b9      	str	r1, [r7, #8]
 800fce6:	4613      	mov	r3, r2
 800fce8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fcea:	2300      	movs	r3, #0
 800fcec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fcee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	371c      	adds	r7, #28
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfc:	4770      	bx	lr
	...

0800fd00 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd00:	b480      	push	{r7}
 800fd02:	b083      	sub	sp, #12
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	4603      	mov	r3, r0
 800fd08:	6039      	str	r1, [r7, #0]
 800fd0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	2212      	movs	r2, #18
 800fd10:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fd12:	4b03      	ldr	r3, [pc, #12]	; (800fd20 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	370c      	adds	r7, #12
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1e:	4770      	bx	lr
 800fd20:	20000150 	.word	0x20000150

0800fd24 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd24:	b480      	push	{r7}
 800fd26:	b083      	sub	sp, #12
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	6039      	str	r1, [r7, #0]
 800fd2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	2204      	movs	r2, #4
 800fd34:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fd36:	4b03      	ldr	r3, [pc, #12]	; (800fd44 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fd38:	4618      	mov	r0, r3
 800fd3a:	370c      	adds	r7, #12
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd42:	4770      	bx	lr
 800fd44:	20000170 	.word	0x20000170

0800fd48 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b082      	sub	sp, #8
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	4603      	mov	r3, r0
 800fd50:	6039      	str	r1, [r7, #0]
 800fd52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fd54:	79fb      	ldrb	r3, [r7, #7]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d105      	bne.n	800fd66 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fd5a:	683a      	ldr	r2, [r7, #0]
 800fd5c:	4907      	ldr	r1, [pc, #28]	; (800fd7c <USBD_FS_ProductStrDescriptor+0x34>)
 800fd5e:	4808      	ldr	r0, [pc, #32]	; (800fd80 <USBD_FS_ProductStrDescriptor+0x38>)
 800fd60:	f7fc fed1 	bl	800cb06 <USBD_GetString>
 800fd64:	e004      	b.n	800fd70 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fd66:	683a      	ldr	r2, [r7, #0]
 800fd68:	4904      	ldr	r1, [pc, #16]	; (800fd7c <USBD_FS_ProductStrDescriptor+0x34>)
 800fd6a:	4805      	ldr	r0, [pc, #20]	; (800fd80 <USBD_FS_ProductStrDescriptor+0x38>)
 800fd6c:	f7fc fecb 	bl	800cb06 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fd70:	4b02      	ldr	r3, [pc, #8]	; (800fd7c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	3708      	adds	r7, #8
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}
 800fd7a:	bf00      	nop
 800fd7c:	20001c7c 	.word	0x20001c7c
 800fd80:	0801184c 	.word	0x0801184c

0800fd84 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b082      	sub	sp, #8
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	6039      	str	r1, [r7, #0]
 800fd8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fd90:	683a      	ldr	r2, [r7, #0]
 800fd92:	4904      	ldr	r1, [pc, #16]	; (800fda4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fd94:	4804      	ldr	r0, [pc, #16]	; (800fda8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fd96:	f7fc feb6 	bl	800cb06 <USBD_GetString>
  return USBD_StrDesc;
 800fd9a:	4b02      	ldr	r3, [pc, #8]	; (800fda4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	3708      	adds	r7, #8
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}
 800fda4:	20001c7c 	.word	0x20001c7c
 800fda8:	08011864 	.word	0x08011864

0800fdac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b082      	sub	sp, #8
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	6039      	str	r1, [r7, #0]
 800fdb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	221a      	movs	r2, #26
 800fdbc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fdbe:	f000 f855 	bl	800fe6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fdc2:	4b02      	ldr	r3, [pc, #8]	; (800fdcc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	3708      	adds	r7, #8
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	20000174 	.word	0x20000174

0800fdd0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b082      	sub	sp, #8
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	6039      	str	r1, [r7, #0]
 800fdda:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fddc:	79fb      	ldrb	r3, [r7, #7]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d105      	bne.n	800fdee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fde2:	683a      	ldr	r2, [r7, #0]
 800fde4:	4907      	ldr	r1, [pc, #28]	; (800fe04 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fde6:	4808      	ldr	r0, [pc, #32]	; (800fe08 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fde8:	f7fc fe8d 	bl	800cb06 <USBD_GetString>
 800fdec:	e004      	b.n	800fdf8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fdee:	683a      	ldr	r2, [r7, #0]
 800fdf0:	4904      	ldr	r1, [pc, #16]	; (800fe04 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fdf2:	4805      	ldr	r0, [pc, #20]	; (800fe08 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fdf4:	f7fc fe87 	bl	800cb06 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fdf8:	4b02      	ldr	r3, [pc, #8]	; (800fe04 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	3708      	adds	r7, #8
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	bd80      	pop	{r7, pc}
 800fe02:	bf00      	nop
 800fe04:	20001c7c 	.word	0x20001c7c
 800fe08:	08011878 	.word	0x08011878

0800fe0c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b082      	sub	sp, #8
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	4603      	mov	r3, r0
 800fe14:	6039      	str	r1, [r7, #0]
 800fe16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fe18:	79fb      	ldrb	r3, [r7, #7]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d105      	bne.n	800fe2a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fe1e:	683a      	ldr	r2, [r7, #0]
 800fe20:	4907      	ldr	r1, [pc, #28]	; (800fe40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fe22:	4808      	ldr	r0, [pc, #32]	; (800fe44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fe24:	f7fc fe6f 	bl	800cb06 <USBD_GetString>
 800fe28:	e004      	b.n	800fe34 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fe2a:	683a      	ldr	r2, [r7, #0]
 800fe2c:	4904      	ldr	r1, [pc, #16]	; (800fe40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fe2e:	4805      	ldr	r0, [pc, #20]	; (800fe44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fe30:	f7fc fe69 	bl	800cb06 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fe34:	4b02      	ldr	r3, [pc, #8]	; (800fe40 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fe36:	4618      	mov	r0, r3
 800fe38:	3708      	adds	r7, #8
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	bd80      	pop	{r7, pc}
 800fe3e:	bf00      	nop
 800fe40:	20001c7c 	.word	0x20001c7c
 800fe44:	08011884 	.word	0x08011884

0800fe48 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe48:	b480      	push	{r7}
 800fe4a:	b083      	sub	sp, #12
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	4603      	mov	r3, r0
 800fe50:	6039      	str	r1, [r7, #0]
 800fe52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	220c      	movs	r2, #12
 800fe58:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800fe5a:	4b03      	ldr	r3, [pc, #12]	; (800fe68 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	370c      	adds	r7, #12
 800fe60:	46bd      	mov	sp, r7
 800fe62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe66:	4770      	bx	lr
 800fe68:	20000164 	.word	0x20000164

0800fe6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b084      	sub	sp, #16
 800fe70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fe72:	4b0f      	ldr	r3, [pc, #60]	; (800feb0 <Get_SerialNum+0x44>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fe78:	4b0e      	ldr	r3, [pc, #56]	; (800feb4 <Get_SerialNum+0x48>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fe7e:	4b0e      	ldr	r3, [pc, #56]	; (800feb8 <Get_SerialNum+0x4c>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fe84:	68fa      	ldr	r2, [r7, #12]
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	4413      	add	r3, r2
 800fe8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d009      	beq.n	800fea6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fe92:	2208      	movs	r2, #8
 800fe94:	4909      	ldr	r1, [pc, #36]	; (800febc <Get_SerialNum+0x50>)
 800fe96:	68f8      	ldr	r0, [r7, #12]
 800fe98:	f000 f814 	bl	800fec4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fe9c:	2204      	movs	r2, #4
 800fe9e:	4908      	ldr	r1, [pc, #32]	; (800fec0 <Get_SerialNum+0x54>)
 800fea0:	68b8      	ldr	r0, [r7, #8]
 800fea2:	f000 f80f 	bl	800fec4 <IntToUnicode>
  }
}
 800fea6:	bf00      	nop
 800fea8:	3710      	adds	r7, #16
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop
 800feb0:	1fff7590 	.word	0x1fff7590
 800feb4:	1fff7594 	.word	0x1fff7594
 800feb8:	1fff7598 	.word	0x1fff7598
 800febc:	20000176 	.word	0x20000176
 800fec0:	20000186 	.word	0x20000186

0800fec4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fec4:	b480      	push	{r7}
 800fec6:	b087      	sub	sp, #28
 800fec8:	af00      	add	r7, sp, #0
 800feca:	60f8      	str	r0, [r7, #12]
 800fecc:	60b9      	str	r1, [r7, #8]
 800fece:	4613      	mov	r3, r2
 800fed0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fed2:	2300      	movs	r3, #0
 800fed4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fed6:	2300      	movs	r3, #0
 800fed8:	75fb      	strb	r3, [r7, #23]
 800feda:	e027      	b.n	800ff2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	0f1b      	lsrs	r3, r3, #28
 800fee0:	2b09      	cmp	r3, #9
 800fee2:	d80b      	bhi.n	800fefc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	0f1b      	lsrs	r3, r3, #28
 800fee8:	b2da      	uxtb	r2, r3
 800feea:	7dfb      	ldrb	r3, [r7, #23]
 800feec:	005b      	lsls	r3, r3, #1
 800feee:	4619      	mov	r1, r3
 800fef0:	68bb      	ldr	r3, [r7, #8]
 800fef2:	440b      	add	r3, r1
 800fef4:	3230      	adds	r2, #48	; 0x30
 800fef6:	b2d2      	uxtb	r2, r2
 800fef8:	701a      	strb	r2, [r3, #0]
 800fefa:	e00a      	b.n	800ff12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	0f1b      	lsrs	r3, r3, #28
 800ff00:	b2da      	uxtb	r2, r3
 800ff02:	7dfb      	ldrb	r3, [r7, #23]
 800ff04:	005b      	lsls	r3, r3, #1
 800ff06:	4619      	mov	r1, r3
 800ff08:	68bb      	ldr	r3, [r7, #8]
 800ff0a:	440b      	add	r3, r1
 800ff0c:	3237      	adds	r2, #55	; 0x37
 800ff0e:	b2d2      	uxtb	r2, r2
 800ff10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	011b      	lsls	r3, r3, #4
 800ff16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ff18:	7dfb      	ldrb	r3, [r7, #23]
 800ff1a:	005b      	lsls	r3, r3, #1
 800ff1c:	3301      	adds	r3, #1
 800ff1e:	68ba      	ldr	r2, [r7, #8]
 800ff20:	4413      	add	r3, r2
 800ff22:	2200      	movs	r2, #0
 800ff24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ff26:	7dfb      	ldrb	r3, [r7, #23]
 800ff28:	3301      	adds	r3, #1
 800ff2a:	75fb      	strb	r3, [r7, #23]
 800ff2c:	7dfa      	ldrb	r2, [r7, #23]
 800ff2e:	79fb      	ldrb	r3, [r7, #7]
 800ff30:	429a      	cmp	r2, r3
 800ff32:	d3d3      	bcc.n	800fedc <IntToUnicode+0x18>
  }
}
 800ff34:	bf00      	nop
 800ff36:	bf00      	nop
 800ff38:	371c      	adds	r7, #28
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff40:	4770      	bx	lr
	...

0800ff44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b0b0      	sub	sp, #192	; 0xc0
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ff4c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800ff50:	2200      	movs	r2, #0
 800ff52:	601a      	str	r2, [r3, #0]
 800ff54:	605a      	str	r2, [r3, #4]
 800ff56:	609a      	str	r2, [r3, #8]
 800ff58:	60da      	str	r2, [r3, #12]
 800ff5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ff5c:	f107 0318 	add.w	r3, r7, #24
 800ff60:	2294      	movs	r2, #148	; 0x94
 800ff62:	2100      	movs	r1, #0
 800ff64:	4618      	mov	r0, r3
 800ff66:	f000 fc43 	bl	80107f0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ff72:	d163      	bne.n	801003c <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ff74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ff78:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ff80:	f107 0318 	add.w	r3, r7, #24
 800ff84:	4618      	mov	r0, r3
 800ff86:	f7f4 f85b 	bl	8004040 <HAL_RCCEx_PeriphCLKConfig>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d001      	beq.n	800ff94 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800ff90:	f7f0 ff3e 	bl	8000e10 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ff94:	4b2b      	ldr	r3, [pc, #172]	; (8010044 <HAL_PCD_MspInit+0x100>)
 800ff96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ff98:	4a2a      	ldr	r2, [pc, #168]	; (8010044 <HAL_PCD_MspInit+0x100>)
 800ff9a:	f043 0301 	orr.w	r3, r3, #1
 800ff9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ffa0:	4b28      	ldr	r3, [pc, #160]	; (8010044 <HAL_PCD_MspInit+0x100>)
 800ffa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ffa4:	f003 0301 	and.w	r3, r3, #1
 800ffa8:	617b      	str	r3, [r7, #20]
 800ffaa:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ffac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ffb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ffb4:	2302      	movs	r3, #2
 800ffb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ffba:	2300      	movs	r3, #0
 800ffbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ffc0:	2303      	movs	r3, #3
 800ffc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ffc6:	230a      	movs	r3, #10
 800ffc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ffcc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800ffd0:	4619      	mov	r1, r3
 800ffd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ffd6:	f7f1 fb99 	bl	800170c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ffda:	4b1a      	ldr	r3, [pc, #104]	; (8010044 <HAL_PCD_MspInit+0x100>)
 800ffdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ffde:	4a19      	ldr	r2, [pc, #100]	; (8010044 <HAL_PCD_MspInit+0x100>)
 800ffe0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ffe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ffe6:	4b17      	ldr	r3, [pc, #92]	; (8010044 <HAL_PCD_MspInit+0x100>)
 800ffe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ffea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ffee:	613b      	str	r3, [r7, #16]
 800fff0:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800fff2:	4b14      	ldr	r3, [pc, #80]	; (8010044 <HAL_PCD_MspInit+0x100>)
 800fff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d114      	bne.n	8010028 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fffe:	4b11      	ldr	r3, [pc, #68]	; (8010044 <HAL_PCD_MspInit+0x100>)
 8010000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010002:	4a10      	ldr	r2, [pc, #64]	; (8010044 <HAL_PCD_MspInit+0x100>)
 8010004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010008:	6593      	str	r3, [r2, #88]	; 0x58
 801000a:	4b0e      	ldr	r3, [pc, #56]	; (8010044 <HAL_PCD_MspInit+0x100>)
 801000c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801000e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010012:	60fb      	str	r3, [r7, #12]
 8010014:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8010016:	f7f3 f8ff 	bl	8003218 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 801001a:	4b0a      	ldr	r3, [pc, #40]	; (8010044 <HAL_PCD_MspInit+0x100>)
 801001c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801001e:	4a09      	ldr	r2, [pc, #36]	; (8010044 <HAL_PCD_MspInit+0x100>)
 8010020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010024:	6593      	str	r3, [r2, #88]	; 0x58
 8010026:	e001      	b.n	801002c <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8010028:	f7f3 f8f6 	bl	8003218 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801002c:	2200      	movs	r2, #0
 801002e:	2100      	movs	r1, #0
 8010030:	2043      	movs	r0, #67	; 0x43
 8010032:	f7f1 fb34 	bl	800169e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010036:	2043      	movs	r0, #67	; 0x43
 8010038:	f7f1 fb4d 	bl	80016d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801003c:	bf00      	nop
 801003e:	37c0      	adds	r7, #192	; 0xc0
 8010040:	46bd      	mov	sp, r7
 8010042:	bd80      	pop	{r7, pc}
 8010044:	40021000 	.word	0x40021000

08010048 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b082      	sub	sp, #8
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801005c:	4619      	mov	r1, r3
 801005e:	4610      	mov	r0, r2
 8010060:	f7fb fd40 	bl	800bae4 <USBD_LL_SetupStage>
}
 8010064:	bf00      	nop
 8010066:	3708      	adds	r7, #8
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}

0801006c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b082      	sub	sp, #8
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
 8010074:	460b      	mov	r3, r1
 8010076:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801007e:	78fa      	ldrb	r2, [r7, #3]
 8010080:	6879      	ldr	r1, [r7, #4]
 8010082:	4613      	mov	r3, r2
 8010084:	00db      	lsls	r3, r3, #3
 8010086:	4413      	add	r3, r2
 8010088:	009b      	lsls	r3, r3, #2
 801008a:	440b      	add	r3, r1
 801008c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010090:	681a      	ldr	r2, [r3, #0]
 8010092:	78fb      	ldrb	r3, [r7, #3]
 8010094:	4619      	mov	r1, r3
 8010096:	f7fb fd7a 	bl	800bb8e <USBD_LL_DataOutStage>
}
 801009a:	bf00      	nop
 801009c:	3708      	adds	r7, #8
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}

080100a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100a2:	b580      	push	{r7, lr}
 80100a4:	b082      	sub	sp, #8
 80100a6:	af00      	add	r7, sp, #0
 80100a8:	6078      	str	r0, [r7, #4]
 80100aa:	460b      	mov	r3, r1
 80100ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80100b4:	78fa      	ldrb	r2, [r7, #3]
 80100b6:	6879      	ldr	r1, [r7, #4]
 80100b8:	4613      	mov	r3, r2
 80100ba:	00db      	lsls	r3, r3, #3
 80100bc:	4413      	add	r3, r2
 80100be:	009b      	lsls	r3, r3, #2
 80100c0:	440b      	add	r3, r1
 80100c2:	334c      	adds	r3, #76	; 0x4c
 80100c4:	681a      	ldr	r2, [r3, #0]
 80100c6:	78fb      	ldrb	r3, [r7, #3]
 80100c8:	4619      	mov	r1, r3
 80100ca:	f7fb fdc3 	bl	800bc54 <USBD_LL_DataInStage>
}
 80100ce:	bf00      	nop
 80100d0:	3708      	adds	r7, #8
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd80      	pop	{r7, pc}

080100d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100d6:	b580      	push	{r7, lr}
 80100d8:	b082      	sub	sp, #8
 80100da:	af00      	add	r7, sp, #0
 80100dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80100e4:	4618      	mov	r0, r3
 80100e6:	f7fb fed7 	bl	800be98 <USBD_LL_SOF>
}
 80100ea:	bf00      	nop
 80100ec:	3708      	adds	r7, #8
 80100ee:	46bd      	mov	sp, r7
 80100f0:	bd80      	pop	{r7, pc}

080100f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100f2:	b580      	push	{r7, lr}
 80100f4:	b084      	sub	sp, #16
 80100f6:	af00      	add	r7, sp, #0
 80100f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80100fa:	2301      	movs	r3, #1
 80100fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	68db      	ldr	r3, [r3, #12]
 8010102:	2b02      	cmp	r3, #2
 8010104:	d001      	beq.n	801010a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010106:	f7f0 fe83 	bl	8000e10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010110:	7bfa      	ldrb	r2, [r7, #15]
 8010112:	4611      	mov	r1, r2
 8010114:	4618      	mov	r0, r3
 8010116:	f7fb fe81 	bl	800be1c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010120:	4618      	mov	r0, r3
 8010122:	f7fb fe2d 	bl	800bd80 <USBD_LL_Reset>
}
 8010126:	bf00      	nop
 8010128:	3710      	adds	r7, #16
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}
	...

08010130 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b082      	sub	sp, #8
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	687a      	ldr	r2, [r7, #4]
 8010144:	6812      	ldr	r2, [r2, #0]
 8010146:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801014a:	f043 0301 	orr.w	r3, r3, #1
 801014e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010156:	4618      	mov	r0, r3
 8010158:	f7fb fe70 	bl	800be3c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	6a1b      	ldr	r3, [r3, #32]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d005      	beq.n	8010170 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010164:	4b04      	ldr	r3, [pc, #16]	; (8010178 <HAL_PCD_SuspendCallback+0x48>)
 8010166:	691b      	ldr	r3, [r3, #16]
 8010168:	4a03      	ldr	r2, [pc, #12]	; (8010178 <HAL_PCD_SuspendCallback+0x48>)
 801016a:	f043 0306 	orr.w	r3, r3, #6
 801016e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010170:	bf00      	nop
 8010172:	3708      	adds	r7, #8
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}
 8010178:	e000ed00 	.word	0xe000ed00

0801017c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b082      	sub	sp, #8
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	687a      	ldr	r2, [r7, #4]
 8010190:	6812      	ldr	r2, [r2, #0]
 8010192:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010196:	f023 0301 	bic.w	r3, r3, #1
 801019a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	6a1b      	ldr	r3, [r3, #32]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d007      	beq.n	80101b4 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80101a4:	4b08      	ldr	r3, [pc, #32]	; (80101c8 <HAL_PCD_ResumeCallback+0x4c>)
 80101a6:	691b      	ldr	r3, [r3, #16]
 80101a8:	4a07      	ldr	r2, [pc, #28]	; (80101c8 <HAL_PCD_ResumeCallback+0x4c>)
 80101aa:	f023 0306 	bic.w	r3, r3, #6
 80101ae:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80101b0:	f000 faf4 	bl	801079c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80101ba:	4618      	mov	r0, r3
 80101bc:	f7fb fe54 	bl	800be68 <USBD_LL_Resume>
}
 80101c0:	bf00      	nop
 80101c2:	3708      	adds	r7, #8
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}
 80101c8:	e000ed00 	.word	0xe000ed00

080101cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b082      	sub	sp, #8
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
 80101d4:	460b      	mov	r3, r1
 80101d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80101de:	78fa      	ldrb	r2, [r7, #3]
 80101e0:	4611      	mov	r1, r2
 80101e2:	4618      	mov	r0, r3
 80101e4:	f7fb fea0 	bl	800bf28 <USBD_LL_IsoOUTIncomplete>
}
 80101e8:	bf00      	nop
 80101ea:	3708      	adds	r7, #8
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}

080101f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b082      	sub	sp, #8
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
 80101f8:	460b      	mov	r3, r1
 80101fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010202:	78fa      	ldrb	r2, [r7, #3]
 8010204:	4611      	mov	r1, r2
 8010206:	4618      	mov	r0, r3
 8010208:	f7fb fe68 	bl	800bedc <USBD_LL_IsoINIncomplete>
}
 801020c:	bf00      	nop
 801020e:	3708      	adds	r7, #8
 8010210:	46bd      	mov	sp, r7
 8010212:	bd80      	pop	{r7, pc}

08010214 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b082      	sub	sp, #8
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010222:	4618      	mov	r0, r3
 8010224:	f7fb fea6 	bl	800bf74 <USBD_LL_DevConnected>
}
 8010228:	bf00      	nop
 801022a:	3708      	adds	r7, #8
 801022c:	46bd      	mov	sp, r7
 801022e:	bd80      	pop	{r7, pc}

08010230 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b082      	sub	sp, #8
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801023e:	4618      	mov	r0, r3
 8010240:	f7fb fea3 	bl	800bf8a <USBD_LL_DevDisconnected>
}
 8010244:	bf00      	nop
 8010246:	3708      	adds	r7, #8
 8010248:	46bd      	mov	sp, r7
 801024a:	bd80      	pop	{r7, pc}

0801024c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b082      	sub	sp, #8
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	781b      	ldrb	r3, [r3, #0]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d139      	bne.n	80102d0 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801025c:	4a1f      	ldr	r2, [pc, #124]	; (80102dc <USBD_LL_Init+0x90>)
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	4a1d      	ldr	r2, [pc, #116]	; (80102dc <USBD_LL_Init+0x90>)
 8010268:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801026c:	4b1b      	ldr	r3, [pc, #108]	; (80102dc <USBD_LL_Init+0x90>)
 801026e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010272:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8010274:	4b19      	ldr	r3, [pc, #100]	; (80102dc <USBD_LL_Init+0x90>)
 8010276:	2206      	movs	r2, #6
 8010278:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801027a:	4b18      	ldr	r3, [pc, #96]	; (80102dc <USBD_LL_Init+0x90>)
 801027c:	2202      	movs	r2, #2
 801027e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010280:	4b16      	ldr	r3, [pc, #88]	; (80102dc <USBD_LL_Init+0x90>)
 8010282:	2200      	movs	r2, #0
 8010284:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010286:	4b15      	ldr	r3, [pc, #84]	; (80102dc <USBD_LL_Init+0x90>)
 8010288:	2200      	movs	r2, #0
 801028a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801028c:	4b13      	ldr	r3, [pc, #76]	; (80102dc <USBD_LL_Init+0x90>)
 801028e:	2200      	movs	r2, #0
 8010290:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8010292:	4b12      	ldr	r3, [pc, #72]	; (80102dc <USBD_LL_Init+0x90>)
 8010294:	2200      	movs	r2, #0
 8010296:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010298:	4b10      	ldr	r3, [pc, #64]	; (80102dc <USBD_LL_Init+0x90>)
 801029a:	2200      	movs	r2, #0
 801029c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801029e:	4b0f      	ldr	r3, [pc, #60]	; (80102dc <USBD_LL_Init+0x90>)
 80102a0:	2200      	movs	r2, #0
 80102a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80102a4:	480d      	ldr	r0, [pc, #52]	; (80102dc <USBD_LL_Init+0x90>)
 80102a6:	f7f1 fd33 	bl	8001d10 <HAL_PCD_Init>
 80102aa:	4603      	mov	r3, r0
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d001      	beq.n	80102b4 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 80102b0:	f7f0 fdae 	bl	8000e10 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80102b4:	2180      	movs	r1, #128	; 0x80
 80102b6:	4809      	ldr	r0, [pc, #36]	; (80102dc <USBD_LL_Init+0x90>)
 80102b8:	f7f2 feb5 	bl	8003026 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80102bc:	2240      	movs	r2, #64	; 0x40
 80102be:	2100      	movs	r1, #0
 80102c0:	4806      	ldr	r0, [pc, #24]	; (80102dc <USBD_LL_Init+0x90>)
 80102c2:	f7f2 fe69 	bl	8002f98 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80102c6:	2280      	movs	r2, #128	; 0x80
 80102c8:	2101      	movs	r1, #1
 80102ca:	4804      	ldr	r0, [pc, #16]	; (80102dc <USBD_LL_Init+0x90>)
 80102cc:	f7f2 fe64 	bl	8002f98 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80102d0:	2300      	movs	r3, #0
}
 80102d2:	4618      	mov	r0, r3
 80102d4:	3708      	adds	r7, #8
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd80      	pop	{r7, pc}
 80102da:	bf00      	nop
 80102dc:	20001e7c 	.word	0x20001e7c

080102e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b084      	sub	sp, #16
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80102e8:	2300      	movs	r3, #0
 80102ea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102ec:	2300      	movs	r3, #0
 80102ee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7f1 fe2e 	bl	8001f58 <HAL_PCD_Start>
 80102fc:	4603      	mov	r3, r0
 80102fe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010300:	7bbb      	ldrb	r3, [r7, #14]
 8010302:	2b03      	cmp	r3, #3
 8010304:	d816      	bhi.n	8010334 <USBD_LL_Start+0x54>
 8010306:	a201      	add	r2, pc, #4	; (adr r2, 801030c <USBD_LL_Start+0x2c>)
 8010308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801030c:	0801031d 	.word	0x0801031d
 8010310:	08010323 	.word	0x08010323
 8010314:	08010329 	.word	0x08010329
 8010318:	0801032f 	.word	0x0801032f
    case HAL_OK :
      usb_status = USBD_OK;
 801031c:	2300      	movs	r3, #0
 801031e:	73fb      	strb	r3, [r7, #15]
    break;
 8010320:	e00b      	b.n	801033a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010322:	2303      	movs	r3, #3
 8010324:	73fb      	strb	r3, [r7, #15]
    break;
 8010326:	e008      	b.n	801033a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010328:	2301      	movs	r3, #1
 801032a:	73fb      	strb	r3, [r7, #15]
    break;
 801032c:	e005      	b.n	801033a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801032e:	2303      	movs	r3, #3
 8010330:	73fb      	strb	r3, [r7, #15]
    break;
 8010332:	e002      	b.n	801033a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8010334:	2303      	movs	r3, #3
 8010336:	73fb      	strb	r3, [r7, #15]
    break;
 8010338:	bf00      	nop
  }
  return usb_status;
 801033a:	7bfb      	ldrb	r3, [r7, #15]
}
 801033c:	4618      	mov	r0, r3
 801033e:	3710      	adds	r7, #16
 8010340:	46bd      	mov	sp, r7
 8010342:	bd80      	pop	{r7, pc}

08010344 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b084      	sub	sp, #16
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	4608      	mov	r0, r1
 801034e:	4611      	mov	r1, r2
 8010350:	461a      	mov	r2, r3
 8010352:	4603      	mov	r3, r0
 8010354:	70fb      	strb	r3, [r7, #3]
 8010356:	460b      	mov	r3, r1
 8010358:	70bb      	strb	r3, [r7, #2]
 801035a:	4613      	mov	r3, r2
 801035c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801035e:	2300      	movs	r3, #0
 8010360:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010362:	2300      	movs	r3, #0
 8010364:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801036c:	78bb      	ldrb	r3, [r7, #2]
 801036e:	883a      	ldrh	r2, [r7, #0]
 8010370:	78f9      	ldrb	r1, [r7, #3]
 8010372:	f7f2 fad8 	bl	8002926 <HAL_PCD_EP_Open>
 8010376:	4603      	mov	r3, r0
 8010378:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801037a:	7bbb      	ldrb	r3, [r7, #14]
 801037c:	2b03      	cmp	r3, #3
 801037e:	d817      	bhi.n	80103b0 <USBD_LL_OpenEP+0x6c>
 8010380:	a201      	add	r2, pc, #4	; (adr r2, 8010388 <USBD_LL_OpenEP+0x44>)
 8010382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010386:	bf00      	nop
 8010388:	08010399 	.word	0x08010399
 801038c:	0801039f 	.word	0x0801039f
 8010390:	080103a5 	.word	0x080103a5
 8010394:	080103ab 	.word	0x080103ab
    case HAL_OK :
      usb_status = USBD_OK;
 8010398:	2300      	movs	r3, #0
 801039a:	73fb      	strb	r3, [r7, #15]
    break;
 801039c:	e00b      	b.n	80103b6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801039e:	2303      	movs	r3, #3
 80103a0:	73fb      	strb	r3, [r7, #15]
    break;
 80103a2:	e008      	b.n	80103b6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80103a4:	2301      	movs	r3, #1
 80103a6:	73fb      	strb	r3, [r7, #15]
    break;
 80103a8:	e005      	b.n	80103b6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80103aa:	2303      	movs	r3, #3
 80103ac:	73fb      	strb	r3, [r7, #15]
    break;
 80103ae:	e002      	b.n	80103b6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80103b0:	2303      	movs	r3, #3
 80103b2:	73fb      	strb	r3, [r7, #15]
    break;
 80103b4:	bf00      	nop
  }
  return usb_status;
 80103b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80103b8:	4618      	mov	r0, r3
 80103ba:	3710      	adds	r7, #16
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}

080103c0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b084      	sub	sp, #16
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
 80103c8:	460b      	mov	r3, r1
 80103ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103cc:	2300      	movs	r3, #0
 80103ce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103d0:	2300      	movs	r3, #0
 80103d2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80103da:	78fa      	ldrb	r2, [r7, #3]
 80103dc:	4611      	mov	r1, r2
 80103de:	4618      	mov	r0, r3
 80103e0:	f7f2 fb09 	bl	80029f6 <HAL_PCD_EP_Close>
 80103e4:	4603      	mov	r3, r0
 80103e6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80103e8:	7bbb      	ldrb	r3, [r7, #14]
 80103ea:	2b03      	cmp	r3, #3
 80103ec:	d816      	bhi.n	801041c <USBD_LL_CloseEP+0x5c>
 80103ee:	a201      	add	r2, pc, #4	; (adr r2, 80103f4 <USBD_LL_CloseEP+0x34>)
 80103f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103f4:	08010405 	.word	0x08010405
 80103f8:	0801040b 	.word	0x0801040b
 80103fc:	08010411 	.word	0x08010411
 8010400:	08010417 	.word	0x08010417
    case HAL_OK :
      usb_status = USBD_OK;
 8010404:	2300      	movs	r3, #0
 8010406:	73fb      	strb	r3, [r7, #15]
    break;
 8010408:	e00b      	b.n	8010422 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801040a:	2303      	movs	r3, #3
 801040c:	73fb      	strb	r3, [r7, #15]
    break;
 801040e:	e008      	b.n	8010422 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010410:	2301      	movs	r3, #1
 8010412:	73fb      	strb	r3, [r7, #15]
    break;
 8010414:	e005      	b.n	8010422 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010416:	2303      	movs	r3, #3
 8010418:	73fb      	strb	r3, [r7, #15]
    break;
 801041a:	e002      	b.n	8010422 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801041c:	2303      	movs	r3, #3
 801041e:	73fb      	strb	r3, [r7, #15]
    break;
 8010420:	bf00      	nop
  }
  return usb_status;
 8010422:	7bfb      	ldrb	r3, [r7, #15]
}
 8010424:	4618      	mov	r0, r3
 8010426:	3710      	adds	r7, #16
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}

0801042c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b084      	sub	sp, #16
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
 8010434:	460b      	mov	r3, r1
 8010436:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010438:	2300      	movs	r3, #0
 801043a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801043c:	2300      	movs	r3, #0
 801043e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010446:	78fa      	ldrb	r2, [r7, #3]
 8010448:	4611      	mov	r1, r2
 801044a:	4618      	mov	r0, r3
 801044c:	f7f2 fbb0 	bl	8002bb0 <HAL_PCD_EP_SetStall>
 8010450:	4603      	mov	r3, r0
 8010452:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010454:	7bbb      	ldrb	r3, [r7, #14]
 8010456:	2b03      	cmp	r3, #3
 8010458:	d816      	bhi.n	8010488 <USBD_LL_StallEP+0x5c>
 801045a:	a201      	add	r2, pc, #4	; (adr r2, 8010460 <USBD_LL_StallEP+0x34>)
 801045c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010460:	08010471 	.word	0x08010471
 8010464:	08010477 	.word	0x08010477
 8010468:	0801047d 	.word	0x0801047d
 801046c:	08010483 	.word	0x08010483
    case HAL_OK :
      usb_status = USBD_OK;
 8010470:	2300      	movs	r3, #0
 8010472:	73fb      	strb	r3, [r7, #15]
    break;
 8010474:	e00b      	b.n	801048e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010476:	2303      	movs	r3, #3
 8010478:	73fb      	strb	r3, [r7, #15]
    break;
 801047a:	e008      	b.n	801048e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801047c:	2301      	movs	r3, #1
 801047e:	73fb      	strb	r3, [r7, #15]
    break;
 8010480:	e005      	b.n	801048e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010482:	2303      	movs	r3, #3
 8010484:	73fb      	strb	r3, [r7, #15]
    break;
 8010486:	e002      	b.n	801048e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010488:	2303      	movs	r3, #3
 801048a:	73fb      	strb	r3, [r7, #15]
    break;
 801048c:	bf00      	nop
  }
  return usb_status;
 801048e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010490:	4618      	mov	r0, r3
 8010492:	3710      	adds	r7, #16
 8010494:	46bd      	mov	sp, r7
 8010496:	bd80      	pop	{r7, pc}

08010498 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b084      	sub	sp, #16
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
 80104a0:	460b      	mov	r3, r1
 80104a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104a4:	2300      	movs	r3, #0
 80104a6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104a8:	2300      	movs	r3, #0
 80104aa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80104b2:	78fa      	ldrb	r2, [r7, #3]
 80104b4:	4611      	mov	r1, r2
 80104b6:	4618      	mov	r0, r3
 80104b8:	f7f2 fbdc 	bl	8002c74 <HAL_PCD_EP_ClrStall>
 80104bc:	4603      	mov	r3, r0
 80104be:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80104c0:	7bbb      	ldrb	r3, [r7, #14]
 80104c2:	2b03      	cmp	r3, #3
 80104c4:	d816      	bhi.n	80104f4 <USBD_LL_ClearStallEP+0x5c>
 80104c6:	a201      	add	r2, pc, #4	; (adr r2, 80104cc <USBD_LL_ClearStallEP+0x34>)
 80104c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104cc:	080104dd 	.word	0x080104dd
 80104d0:	080104e3 	.word	0x080104e3
 80104d4:	080104e9 	.word	0x080104e9
 80104d8:	080104ef 	.word	0x080104ef
    case HAL_OK :
      usb_status = USBD_OK;
 80104dc:	2300      	movs	r3, #0
 80104de:	73fb      	strb	r3, [r7, #15]
    break;
 80104e0:	e00b      	b.n	80104fa <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80104e2:	2303      	movs	r3, #3
 80104e4:	73fb      	strb	r3, [r7, #15]
    break;
 80104e6:	e008      	b.n	80104fa <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80104e8:	2301      	movs	r3, #1
 80104ea:	73fb      	strb	r3, [r7, #15]
    break;
 80104ec:	e005      	b.n	80104fa <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80104ee:	2303      	movs	r3, #3
 80104f0:	73fb      	strb	r3, [r7, #15]
    break;
 80104f2:	e002      	b.n	80104fa <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80104f4:	2303      	movs	r3, #3
 80104f6:	73fb      	strb	r3, [r7, #15]
    break;
 80104f8:	bf00      	nop
  }
  return usb_status;
 80104fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80104fc:	4618      	mov	r0, r3
 80104fe:	3710      	adds	r7, #16
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}

08010504 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010504:	b480      	push	{r7}
 8010506:	b085      	sub	sp, #20
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
 801050c:	460b      	mov	r3, r1
 801050e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010516:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010518:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801051c:	2b00      	cmp	r3, #0
 801051e:	da0b      	bge.n	8010538 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010520:	78fb      	ldrb	r3, [r7, #3]
 8010522:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010526:	68f9      	ldr	r1, [r7, #12]
 8010528:	4613      	mov	r3, r2
 801052a:	00db      	lsls	r3, r3, #3
 801052c:	4413      	add	r3, r2
 801052e:	009b      	lsls	r3, r3, #2
 8010530:	440b      	add	r3, r1
 8010532:	333e      	adds	r3, #62	; 0x3e
 8010534:	781b      	ldrb	r3, [r3, #0]
 8010536:	e00b      	b.n	8010550 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010538:	78fb      	ldrb	r3, [r7, #3]
 801053a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801053e:	68f9      	ldr	r1, [r7, #12]
 8010540:	4613      	mov	r3, r2
 8010542:	00db      	lsls	r3, r3, #3
 8010544:	4413      	add	r3, r2
 8010546:	009b      	lsls	r3, r3, #2
 8010548:	440b      	add	r3, r1
 801054a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801054e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010550:	4618      	mov	r0, r3
 8010552:	3714      	adds	r7, #20
 8010554:	46bd      	mov	sp, r7
 8010556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055a:	4770      	bx	lr

0801055c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b084      	sub	sp, #16
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
 8010564:	460b      	mov	r3, r1
 8010566:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010568:	2300      	movs	r3, #0
 801056a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801056c:	2300      	movs	r3, #0
 801056e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010576:	78fa      	ldrb	r2, [r7, #3]
 8010578:	4611      	mov	r1, r2
 801057a:	4618      	mov	r0, r3
 801057c:	f7f2 f9ae 	bl	80028dc <HAL_PCD_SetAddress>
 8010580:	4603      	mov	r3, r0
 8010582:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010584:	7bbb      	ldrb	r3, [r7, #14]
 8010586:	2b03      	cmp	r3, #3
 8010588:	d816      	bhi.n	80105b8 <USBD_LL_SetUSBAddress+0x5c>
 801058a:	a201      	add	r2, pc, #4	; (adr r2, 8010590 <USBD_LL_SetUSBAddress+0x34>)
 801058c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010590:	080105a1 	.word	0x080105a1
 8010594:	080105a7 	.word	0x080105a7
 8010598:	080105ad 	.word	0x080105ad
 801059c:	080105b3 	.word	0x080105b3
    case HAL_OK :
      usb_status = USBD_OK;
 80105a0:	2300      	movs	r3, #0
 80105a2:	73fb      	strb	r3, [r7, #15]
    break;
 80105a4:	e00b      	b.n	80105be <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80105a6:	2303      	movs	r3, #3
 80105a8:	73fb      	strb	r3, [r7, #15]
    break;
 80105aa:	e008      	b.n	80105be <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80105ac:	2301      	movs	r3, #1
 80105ae:	73fb      	strb	r3, [r7, #15]
    break;
 80105b0:	e005      	b.n	80105be <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80105b2:	2303      	movs	r3, #3
 80105b4:	73fb      	strb	r3, [r7, #15]
    break;
 80105b6:	e002      	b.n	80105be <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80105b8:	2303      	movs	r3, #3
 80105ba:	73fb      	strb	r3, [r7, #15]
    break;
 80105bc:	bf00      	nop
  }
  return usb_status;
 80105be:	7bfb      	ldrb	r3, [r7, #15]
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3710      	adds	r7, #16
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}

080105c8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b086      	sub	sp, #24
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	60f8      	str	r0, [r7, #12]
 80105d0:	607a      	str	r2, [r7, #4]
 80105d2:	603b      	str	r3, [r7, #0]
 80105d4:	460b      	mov	r3, r1
 80105d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105d8:	2300      	movs	r3, #0
 80105da:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105dc:	2300      	movs	r3, #0
 80105de:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80105e6:	7af9      	ldrb	r1, [r7, #11]
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	687a      	ldr	r2, [r7, #4]
 80105ec:	f7f2 faa3 	bl	8002b36 <HAL_PCD_EP_Transmit>
 80105f0:	4603      	mov	r3, r0
 80105f2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80105f4:	7dbb      	ldrb	r3, [r7, #22]
 80105f6:	2b03      	cmp	r3, #3
 80105f8:	d816      	bhi.n	8010628 <USBD_LL_Transmit+0x60>
 80105fa:	a201      	add	r2, pc, #4	; (adr r2, 8010600 <USBD_LL_Transmit+0x38>)
 80105fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010600:	08010611 	.word	0x08010611
 8010604:	08010617 	.word	0x08010617
 8010608:	0801061d 	.word	0x0801061d
 801060c:	08010623 	.word	0x08010623
    case HAL_OK :
      usb_status = USBD_OK;
 8010610:	2300      	movs	r3, #0
 8010612:	75fb      	strb	r3, [r7, #23]
    break;
 8010614:	e00b      	b.n	801062e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010616:	2303      	movs	r3, #3
 8010618:	75fb      	strb	r3, [r7, #23]
    break;
 801061a:	e008      	b.n	801062e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801061c:	2301      	movs	r3, #1
 801061e:	75fb      	strb	r3, [r7, #23]
    break;
 8010620:	e005      	b.n	801062e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010622:	2303      	movs	r3, #3
 8010624:	75fb      	strb	r3, [r7, #23]
    break;
 8010626:	e002      	b.n	801062e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8010628:	2303      	movs	r3, #3
 801062a:	75fb      	strb	r3, [r7, #23]
    break;
 801062c:	bf00      	nop
  }
  return usb_status;
 801062e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010630:	4618      	mov	r0, r3
 8010632:	3718      	adds	r7, #24
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}

08010638 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b086      	sub	sp, #24
 801063c:	af00      	add	r7, sp, #0
 801063e:	60f8      	str	r0, [r7, #12]
 8010640:	607a      	str	r2, [r7, #4]
 8010642:	603b      	str	r3, [r7, #0]
 8010644:	460b      	mov	r3, r1
 8010646:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010648:	2300      	movs	r3, #0
 801064a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801064c:	2300      	movs	r3, #0
 801064e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010656:	7af9      	ldrb	r1, [r7, #11]
 8010658:	683b      	ldr	r3, [r7, #0]
 801065a:	687a      	ldr	r2, [r7, #4]
 801065c:	f7f2 fa15 	bl	8002a8a <HAL_PCD_EP_Receive>
 8010660:	4603      	mov	r3, r0
 8010662:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8010664:	7dbb      	ldrb	r3, [r7, #22]
 8010666:	2b03      	cmp	r3, #3
 8010668:	d816      	bhi.n	8010698 <USBD_LL_PrepareReceive+0x60>
 801066a:	a201      	add	r2, pc, #4	; (adr r2, 8010670 <USBD_LL_PrepareReceive+0x38>)
 801066c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010670:	08010681 	.word	0x08010681
 8010674:	08010687 	.word	0x08010687
 8010678:	0801068d 	.word	0x0801068d
 801067c:	08010693 	.word	0x08010693
    case HAL_OK :
      usb_status = USBD_OK;
 8010680:	2300      	movs	r3, #0
 8010682:	75fb      	strb	r3, [r7, #23]
    break;
 8010684:	e00b      	b.n	801069e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010686:	2303      	movs	r3, #3
 8010688:	75fb      	strb	r3, [r7, #23]
    break;
 801068a:	e008      	b.n	801069e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801068c:	2301      	movs	r3, #1
 801068e:	75fb      	strb	r3, [r7, #23]
    break;
 8010690:	e005      	b.n	801069e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010692:	2303      	movs	r3, #3
 8010694:	75fb      	strb	r3, [r7, #23]
    break;
 8010696:	e002      	b.n	801069e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8010698:	2303      	movs	r3, #3
 801069a:	75fb      	strb	r3, [r7, #23]
    break;
 801069c:	bf00      	nop
  }
  return usb_status;
 801069e:	7dfb      	ldrb	r3, [r7, #23]
}
 80106a0:	4618      	mov	r0, r3
 80106a2:	3718      	adds	r7, #24
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bd80      	pop	{r7, pc}

080106a8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b082      	sub	sp, #8
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
 80106b0:	460b      	mov	r3, r1
 80106b2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80106ba:	78fa      	ldrb	r2, [r7, #3]
 80106bc:	4611      	mov	r1, r2
 80106be:	4618      	mov	r0, r3
 80106c0:	f7f2 fa21 	bl	8002b06 <HAL_PCD_EP_GetRxCount>
 80106c4:	4603      	mov	r3, r0
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	3708      	adds	r7, #8
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bd80      	pop	{r7, pc}
	...

080106d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b082      	sub	sp, #8
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
 80106d8:	460b      	mov	r3, r1
 80106da:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80106dc:	78fb      	ldrb	r3, [r7, #3]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d002      	beq.n	80106e8 <HAL_PCDEx_LPM_Callback+0x18>
 80106e2:	2b01      	cmp	r3, #1
 80106e4:	d01f      	beq.n	8010726 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80106e6:	e03b      	b.n	8010760 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	6a1b      	ldr	r3, [r3, #32]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d007      	beq.n	8010700 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80106f0:	f000 f854 	bl	801079c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80106f4:	4b1c      	ldr	r3, [pc, #112]	; (8010768 <HAL_PCDEx_LPM_Callback+0x98>)
 80106f6:	691b      	ldr	r3, [r3, #16]
 80106f8:	4a1b      	ldr	r2, [pc, #108]	; (8010768 <HAL_PCDEx_LPM_Callback+0x98>)
 80106fa:	f023 0306 	bic.w	r3, r3, #6
 80106fe:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	687a      	ldr	r2, [r7, #4]
 801070c:	6812      	ldr	r2, [r2, #0]
 801070e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010712:	f023 0301 	bic.w	r3, r3, #1
 8010716:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801071e:	4618      	mov	r0, r3
 8010720:	f7fb fba2 	bl	800be68 <USBD_LL_Resume>
    break;
 8010724:	e01c      	b.n	8010760 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	687a      	ldr	r2, [r7, #4]
 8010732:	6812      	ldr	r2, [r2, #0]
 8010734:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010738:	f043 0301 	orr.w	r3, r3, #1
 801073c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010744:	4618      	mov	r0, r3
 8010746:	f7fb fb79 	bl	800be3c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6a1b      	ldr	r3, [r3, #32]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d005      	beq.n	801075e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010752:	4b05      	ldr	r3, [pc, #20]	; (8010768 <HAL_PCDEx_LPM_Callback+0x98>)
 8010754:	691b      	ldr	r3, [r3, #16]
 8010756:	4a04      	ldr	r2, [pc, #16]	; (8010768 <HAL_PCDEx_LPM_Callback+0x98>)
 8010758:	f043 0306 	orr.w	r3, r3, #6
 801075c:	6113      	str	r3, [r2, #16]
    break;
 801075e:	bf00      	nop
}
 8010760:	bf00      	nop
 8010762:	3708      	adds	r7, #8
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}
 8010768:	e000ed00 	.word	0xe000ed00

0801076c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801076c:	b480      	push	{r7}
 801076e:	b083      	sub	sp, #12
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010774:	4b03      	ldr	r3, [pc, #12]	; (8010784 <USBD_static_malloc+0x18>)
}
 8010776:	4618      	mov	r0, r3
 8010778:	370c      	adds	r7, #12
 801077a:	46bd      	mov	sp, r7
 801077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010780:	4770      	bx	lr
 8010782:	bf00      	nop
 8010784:	20002388 	.word	0x20002388

08010788 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010788:	b480      	push	{r7}
 801078a:	b083      	sub	sp, #12
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]

}
 8010790:	bf00      	nop
 8010792:	370c      	adds	r7, #12
 8010794:	46bd      	mov	sp, r7
 8010796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079a:	4770      	bx	lr

0801079c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80107a0:	f7f0 f80c 	bl	80007bc <SystemClock_Config>
}
 80107a4:	bf00      	nop
 80107a6:	bd80      	pop	{r7, pc}

080107a8 <__libc_init_array>:
 80107a8:	b570      	push	{r4, r5, r6, lr}
 80107aa:	4d0d      	ldr	r5, [pc, #52]	; (80107e0 <__libc_init_array+0x38>)
 80107ac:	4c0d      	ldr	r4, [pc, #52]	; (80107e4 <__libc_init_array+0x3c>)
 80107ae:	1b64      	subs	r4, r4, r5
 80107b0:	10a4      	asrs	r4, r4, #2
 80107b2:	2600      	movs	r6, #0
 80107b4:	42a6      	cmp	r6, r4
 80107b6:	d109      	bne.n	80107cc <__libc_init_array+0x24>
 80107b8:	4d0b      	ldr	r5, [pc, #44]	; (80107e8 <__libc_init_array+0x40>)
 80107ba:	4c0c      	ldr	r4, [pc, #48]	; (80107ec <__libc_init_array+0x44>)
 80107bc:	f000 ffec 	bl	8011798 <_init>
 80107c0:	1b64      	subs	r4, r4, r5
 80107c2:	10a4      	asrs	r4, r4, #2
 80107c4:	2600      	movs	r6, #0
 80107c6:	42a6      	cmp	r6, r4
 80107c8:	d105      	bne.n	80107d6 <__libc_init_array+0x2e>
 80107ca:	bd70      	pop	{r4, r5, r6, pc}
 80107cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80107d0:	4798      	blx	r3
 80107d2:	3601      	adds	r6, #1
 80107d4:	e7ee      	b.n	80107b4 <__libc_init_array+0xc>
 80107d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80107da:	4798      	blx	r3
 80107dc:	3601      	adds	r6, #1
 80107de:	e7f2      	b.n	80107c6 <__libc_init_array+0x1e>
 80107e0:	08011a58 	.word	0x08011a58
 80107e4:	08011a58 	.word	0x08011a58
 80107e8:	08011a58 	.word	0x08011a58
 80107ec:	08011a5c 	.word	0x08011a5c

080107f0 <memset>:
 80107f0:	4402      	add	r2, r0
 80107f2:	4603      	mov	r3, r0
 80107f4:	4293      	cmp	r3, r2
 80107f6:	d100      	bne.n	80107fa <memset+0xa>
 80107f8:	4770      	bx	lr
 80107fa:	f803 1b01 	strb.w	r1, [r3], #1
 80107fe:	e7f9      	b.n	80107f4 <memset+0x4>

08010800 <iprintf>:
 8010800:	b40f      	push	{r0, r1, r2, r3}
 8010802:	4b0a      	ldr	r3, [pc, #40]	; (801082c <iprintf+0x2c>)
 8010804:	b513      	push	{r0, r1, r4, lr}
 8010806:	681c      	ldr	r4, [r3, #0]
 8010808:	b124      	cbz	r4, 8010814 <iprintf+0x14>
 801080a:	69a3      	ldr	r3, [r4, #24]
 801080c:	b913      	cbnz	r3, 8010814 <iprintf+0x14>
 801080e:	4620      	mov	r0, r4
 8010810:	f000 f866 	bl	80108e0 <__sinit>
 8010814:	ab05      	add	r3, sp, #20
 8010816:	9a04      	ldr	r2, [sp, #16]
 8010818:	68a1      	ldr	r1, [r4, #8]
 801081a:	9301      	str	r3, [sp, #4]
 801081c:	4620      	mov	r0, r4
 801081e:	f000 f9bd 	bl	8010b9c <_vfiprintf_r>
 8010822:	b002      	add	sp, #8
 8010824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010828:	b004      	add	sp, #16
 801082a:	4770      	bx	lr
 801082c:	20000190 	.word	0x20000190

08010830 <std>:
 8010830:	2300      	movs	r3, #0
 8010832:	b510      	push	{r4, lr}
 8010834:	4604      	mov	r4, r0
 8010836:	e9c0 3300 	strd	r3, r3, [r0]
 801083a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801083e:	6083      	str	r3, [r0, #8]
 8010840:	8181      	strh	r1, [r0, #12]
 8010842:	6643      	str	r3, [r0, #100]	; 0x64
 8010844:	81c2      	strh	r2, [r0, #14]
 8010846:	6183      	str	r3, [r0, #24]
 8010848:	4619      	mov	r1, r3
 801084a:	2208      	movs	r2, #8
 801084c:	305c      	adds	r0, #92	; 0x5c
 801084e:	f7ff ffcf 	bl	80107f0 <memset>
 8010852:	4b05      	ldr	r3, [pc, #20]	; (8010868 <std+0x38>)
 8010854:	6263      	str	r3, [r4, #36]	; 0x24
 8010856:	4b05      	ldr	r3, [pc, #20]	; (801086c <std+0x3c>)
 8010858:	62a3      	str	r3, [r4, #40]	; 0x28
 801085a:	4b05      	ldr	r3, [pc, #20]	; (8010870 <std+0x40>)
 801085c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801085e:	4b05      	ldr	r3, [pc, #20]	; (8010874 <std+0x44>)
 8010860:	6224      	str	r4, [r4, #32]
 8010862:	6323      	str	r3, [r4, #48]	; 0x30
 8010864:	bd10      	pop	{r4, pc}
 8010866:	bf00      	nop
 8010868:	08011145 	.word	0x08011145
 801086c:	08011167 	.word	0x08011167
 8010870:	0801119f 	.word	0x0801119f
 8010874:	080111c3 	.word	0x080111c3

08010878 <_cleanup_r>:
 8010878:	4901      	ldr	r1, [pc, #4]	; (8010880 <_cleanup_r+0x8>)
 801087a:	f000 b8af 	b.w	80109dc <_fwalk_reent>
 801087e:	bf00      	nop
 8010880:	0801149d 	.word	0x0801149d

08010884 <__sfmoreglue>:
 8010884:	b570      	push	{r4, r5, r6, lr}
 8010886:	2268      	movs	r2, #104	; 0x68
 8010888:	1e4d      	subs	r5, r1, #1
 801088a:	4355      	muls	r5, r2
 801088c:	460e      	mov	r6, r1
 801088e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010892:	f000 f8e5 	bl	8010a60 <_malloc_r>
 8010896:	4604      	mov	r4, r0
 8010898:	b140      	cbz	r0, 80108ac <__sfmoreglue+0x28>
 801089a:	2100      	movs	r1, #0
 801089c:	e9c0 1600 	strd	r1, r6, [r0]
 80108a0:	300c      	adds	r0, #12
 80108a2:	60a0      	str	r0, [r4, #8]
 80108a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80108a8:	f7ff ffa2 	bl	80107f0 <memset>
 80108ac:	4620      	mov	r0, r4
 80108ae:	bd70      	pop	{r4, r5, r6, pc}

080108b0 <__sfp_lock_acquire>:
 80108b0:	4801      	ldr	r0, [pc, #4]	; (80108b8 <__sfp_lock_acquire+0x8>)
 80108b2:	f000 b8b3 	b.w	8010a1c <__retarget_lock_acquire_recursive>
 80108b6:	bf00      	nop
 80108b8:	200025a9 	.word	0x200025a9

080108bc <__sfp_lock_release>:
 80108bc:	4801      	ldr	r0, [pc, #4]	; (80108c4 <__sfp_lock_release+0x8>)
 80108be:	f000 b8ae 	b.w	8010a1e <__retarget_lock_release_recursive>
 80108c2:	bf00      	nop
 80108c4:	200025a9 	.word	0x200025a9

080108c8 <__sinit_lock_acquire>:
 80108c8:	4801      	ldr	r0, [pc, #4]	; (80108d0 <__sinit_lock_acquire+0x8>)
 80108ca:	f000 b8a7 	b.w	8010a1c <__retarget_lock_acquire_recursive>
 80108ce:	bf00      	nop
 80108d0:	200025aa 	.word	0x200025aa

080108d4 <__sinit_lock_release>:
 80108d4:	4801      	ldr	r0, [pc, #4]	; (80108dc <__sinit_lock_release+0x8>)
 80108d6:	f000 b8a2 	b.w	8010a1e <__retarget_lock_release_recursive>
 80108da:	bf00      	nop
 80108dc:	200025aa 	.word	0x200025aa

080108e0 <__sinit>:
 80108e0:	b510      	push	{r4, lr}
 80108e2:	4604      	mov	r4, r0
 80108e4:	f7ff fff0 	bl	80108c8 <__sinit_lock_acquire>
 80108e8:	69a3      	ldr	r3, [r4, #24]
 80108ea:	b11b      	cbz	r3, 80108f4 <__sinit+0x14>
 80108ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108f0:	f7ff bff0 	b.w	80108d4 <__sinit_lock_release>
 80108f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80108f8:	6523      	str	r3, [r4, #80]	; 0x50
 80108fa:	4b13      	ldr	r3, [pc, #76]	; (8010948 <__sinit+0x68>)
 80108fc:	4a13      	ldr	r2, [pc, #76]	; (801094c <__sinit+0x6c>)
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	62a2      	str	r2, [r4, #40]	; 0x28
 8010902:	42a3      	cmp	r3, r4
 8010904:	bf04      	itt	eq
 8010906:	2301      	moveq	r3, #1
 8010908:	61a3      	streq	r3, [r4, #24]
 801090a:	4620      	mov	r0, r4
 801090c:	f000 f820 	bl	8010950 <__sfp>
 8010910:	6060      	str	r0, [r4, #4]
 8010912:	4620      	mov	r0, r4
 8010914:	f000 f81c 	bl	8010950 <__sfp>
 8010918:	60a0      	str	r0, [r4, #8]
 801091a:	4620      	mov	r0, r4
 801091c:	f000 f818 	bl	8010950 <__sfp>
 8010920:	2200      	movs	r2, #0
 8010922:	60e0      	str	r0, [r4, #12]
 8010924:	2104      	movs	r1, #4
 8010926:	6860      	ldr	r0, [r4, #4]
 8010928:	f7ff ff82 	bl	8010830 <std>
 801092c:	68a0      	ldr	r0, [r4, #8]
 801092e:	2201      	movs	r2, #1
 8010930:	2109      	movs	r1, #9
 8010932:	f7ff ff7d 	bl	8010830 <std>
 8010936:	68e0      	ldr	r0, [r4, #12]
 8010938:	2202      	movs	r2, #2
 801093a:	2112      	movs	r1, #18
 801093c:	f7ff ff78 	bl	8010830 <std>
 8010940:	2301      	movs	r3, #1
 8010942:	61a3      	str	r3, [r4, #24]
 8010944:	e7d2      	b.n	80108ec <__sinit+0xc>
 8010946:	bf00      	nop
 8010948:	080119b8 	.word	0x080119b8
 801094c:	08010879 	.word	0x08010879

08010950 <__sfp>:
 8010950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010952:	4607      	mov	r7, r0
 8010954:	f7ff ffac 	bl	80108b0 <__sfp_lock_acquire>
 8010958:	4b1e      	ldr	r3, [pc, #120]	; (80109d4 <__sfp+0x84>)
 801095a:	681e      	ldr	r6, [r3, #0]
 801095c:	69b3      	ldr	r3, [r6, #24]
 801095e:	b913      	cbnz	r3, 8010966 <__sfp+0x16>
 8010960:	4630      	mov	r0, r6
 8010962:	f7ff ffbd 	bl	80108e0 <__sinit>
 8010966:	3648      	adds	r6, #72	; 0x48
 8010968:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801096c:	3b01      	subs	r3, #1
 801096e:	d503      	bpl.n	8010978 <__sfp+0x28>
 8010970:	6833      	ldr	r3, [r6, #0]
 8010972:	b30b      	cbz	r3, 80109b8 <__sfp+0x68>
 8010974:	6836      	ldr	r6, [r6, #0]
 8010976:	e7f7      	b.n	8010968 <__sfp+0x18>
 8010978:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801097c:	b9d5      	cbnz	r5, 80109b4 <__sfp+0x64>
 801097e:	4b16      	ldr	r3, [pc, #88]	; (80109d8 <__sfp+0x88>)
 8010980:	60e3      	str	r3, [r4, #12]
 8010982:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010986:	6665      	str	r5, [r4, #100]	; 0x64
 8010988:	f000 f847 	bl	8010a1a <__retarget_lock_init_recursive>
 801098c:	f7ff ff96 	bl	80108bc <__sfp_lock_release>
 8010990:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010994:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010998:	6025      	str	r5, [r4, #0]
 801099a:	61a5      	str	r5, [r4, #24]
 801099c:	2208      	movs	r2, #8
 801099e:	4629      	mov	r1, r5
 80109a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80109a4:	f7ff ff24 	bl	80107f0 <memset>
 80109a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80109ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80109b0:	4620      	mov	r0, r4
 80109b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109b4:	3468      	adds	r4, #104	; 0x68
 80109b6:	e7d9      	b.n	801096c <__sfp+0x1c>
 80109b8:	2104      	movs	r1, #4
 80109ba:	4638      	mov	r0, r7
 80109bc:	f7ff ff62 	bl	8010884 <__sfmoreglue>
 80109c0:	4604      	mov	r4, r0
 80109c2:	6030      	str	r0, [r6, #0]
 80109c4:	2800      	cmp	r0, #0
 80109c6:	d1d5      	bne.n	8010974 <__sfp+0x24>
 80109c8:	f7ff ff78 	bl	80108bc <__sfp_lock_release>
 80109cc:	230c      	movs	r3, #12
 80109ce:	603b      	str	r3, [r7, #0]
 80109d0:	e7ee      	b.n	80109b0 <__sfp+0x60>
 80109d2:	bf00      	nop
 80109d4:	080119b8 	.word	0x080119b8
 80109d8:	ffff0001 	.word	0xffff0001

080109dc <_fwalk_reent>:
 80109dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109e0:	4606      	mov	r6, r0
 80109e2:	4688      	mov	r8, r1
 80109e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80109e8:	2700      	movs	r7, #0
 80109ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80109ee:	f1b9 0901 	subs.w	r9, r9, #1
 80109f2:	d505      	bpl.n	8010a00 <_fwalk_reent+0x24>
 80109f4:	6824      	ldr	r4, [r4, #0]
 80109f6:	2c00      	cmp	r4, #0
 80109f8:	d1f7      	bne.n	80109ea <_fwalk_reent+0xe>
 80109fa:	4638      	mov	r0, r7
 80109fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a00:	89ab      	ldrh	r3, [r5, #12]
 8010a02:	2b01      	cmp	r3, #1
 8010a04:	d907      	bls.n	8010a16 <_fwalk_reent+0x3a>
 8010a06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010a0a:	3301      	adds	r3, #1
 8010a0c:	d003      	beq.n	8010a16 <_fwalk_reent+0x3a>
 8010a0e:	4629      	mov	r1, r5
 8010a10:	4630      	mov	r0, r6
 8010a12:	47c0      	blx	r8
 8010a14:	4307      	orrs	r7, r0
 8010a16:	3568      	adds	r5, #104	; 0x68
 8010a18:	e7e9      	b.n	80109ee <_fwalk_reent+0x12>

08010a1a <__retarget_lock_init_recursive>:
 8010a1a:	4770      	bx	lr

08010a1c <__retarget_lock_acquire_recursive>:
 8010a1c:	4770      	bx	lr

08010a1e <__retarget_lock_release_recursive>:
 8010a1e:	4770      	bx	lr

08010a20 <sbrk_aligned>:
 8010a20:	b570      	push	{r4, r5, r6, lr}
 8010a22:	4e0e      	ldr	r6, [pc, #56]	; (8010a5c <sbrk_aligned+0x3c>)
 8010a24:	460c      	mov	r4, r1
 8010a26:	6831      	ldr	r1, [r6, #0]
 8010a28:	4605      	mov	r5, r0
 8010a2a:	b911      	cbnz	r1, 8010a32 <sbrk_aligned+0x12>
 8010a2c:	f000 fb7a 	bl	8011124 <_sbrk_r>
 8010a30:	6030      	str	r0, [r6, #0]
 8010a32:	4621      	mov	r1, r4
 8010a34:	4628      	mov	r0, r5
 8010a36:	f000 fb75 	bl	8011124 <_sbrk_r>
 8010a3a:	1c43      	adds	r3, r0, #1
 8010a3c:	d00a      	beq.n	8010a54 <sbrk_aligned+0x34>
 8010a3e:	1cc4      	adds	r4, r0, #3
 8010a40:	f024 0403 	bic.w	r4, r4, #3
 8010a44:	42a0      	cmp	r0, r4
 8010a46:	d007      	beq.n	8010a58 <sbrk_aligned+0x38>
 8010a48:	1a21      	subs	r1, r4, r0
 8010a4a:	4628      	mov	r0, r5
 8010a4c:	f000 fb6a 	bl	8011124 <_sbrk_r>
 8010a50:	3001      	adds	r0, #1
 8010a52:	d101      	bne.n	8010a58 <sbrk_aligned+0x38>
 8010a54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010a58:	4620      	mov	r0, r4
 8010a5a:	bd70      	pop	{r4, r5, r6, pc}
 8010a5c:	200025b0 	.word	0x200025b0

08010a60 <_malloc_r>:
 8010a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a64:	1ccd      	adds	r5, r1, #3
 8010a66:	f025 0503 	bic.w	r5, r5, #3
 8010a6a:	3508      	adds	r5, #8
 8010a6c:	2d0c      	cmp	r5, #12
 8010a6e:	bf38      	it	cc
 8010a70:	250c      	movcc	r5, #12
 8010a72:	2d00      	cmp	r5, #0
 8010a74:	4607      	mov	r7, r0
 8010a76:	db01      	blt.n	8010a7c <_malloc_r+0x1c>
 8010a78:	42a9      	cmp	r1, r5
 8010a7a:	d905      	bls.n	8010a88 <_malloc_r+0x28>
 8010a7c:	230c      	movs	r3, #12
 8010a7e:	603b      	str	r3, [r7, #0]
 8010a80:	2600      	movs	r6, #0
 8010a82:	4630      	mov	r0, r6
 8010a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a88:	4e2e      	ldr	r6, [pc, #184]	; (8010b44 <_malloc_r+0xe4>)
 8010a8a:	f000 fdbb 	bl	8011604 <__malloc_lock>
 8010a8e:	6833      	ldr	r3, [r6, #0]
 8010a90:	461c      	mov	r4, r3
 8010a92:	bb34      	cbnz	r4, 8010ae2 <_malloc_r+0x82>
 8010a94:	4629      	mov	r1, r5
 8010a96:	4638      	mov	r0, r7
 8010a98:	f7ff ffc2 	bl	8010a20 <sbrk_aligned>
 8010a9c:	1c43      	adds	r3, r0, #1
 8010a9e:	4604      	mov	r4, r0
 8010aa0:	d14d      	bne.n	8010b3e <_malloc_r+0xde>
 8010aa2:	6834      	ldr	r4, [r6, #0]
 8010aa4:	4626      	mov	r6, r4
 8010aa6:	2e00      	cmp	r6, #0
 8010aa8:	d140      	bne.n	8010b2c <_malloc_r+0xcc>
 8010aaa:	6823      	ldr	r3, [r4, #0]
 8010aac:	4631      	mov	r1, r6
 8010aae:	4638      	mov	r0, r7
 8010ab0:	eb04 0803 	add.w	r8, r4, r3
 8010ab4:	f000 fb36 	bl	8011124 <_sbrk_r>
 8010ab8:	4580      	cmp	r8, r0
 8010aba:	d13a      	bne.n	8010b32 <_malloc_r+0xd2>
 8010abc:	6821      	ldr	r1, [r4, #0]
 8010abe:	3503      	adds	r5, #3
 8010ac0:	1a6d      	subs	r5, r5, r1
 8010ac2:	f025 0503 	bic.w	r5, r5, #3
 8010ac6:	3508      	adds	r5, #8
 8010ac8:	2d0c      	cmp	r5, #12
 8010aca:	bf38      	it	cc
 8010acc:	250c      	movcc	r5, #12
 8010ace:	4629      	mov	r1, r5
 8010ad0:	4638      	mov	r0, r7
 8010ad2:	f7ff ffa5 	bl	8010a20 <sbrk_aligned>
 8010ad6:	3001      	adds	r0, #1
 8010ad8:	d02b      	beq.n	8010b32 <_malloc_r+0xd2>
 8010ada:	6823      	ldr	r3, [r4, #0]
 8010adc:	442b      	add	r3, r5
 8010ade:	6023      	str	r3, [r4, #0]
 8010ae0:	e00e      	b.n	8010b00 <_malloc_r+0xa0>
 8010ae2:	6822      	ldr	r2, [r4, #0]
 8010ae4:	1b52      	subs	r2, r2, r5
 8010ae6:	d41e      	bmi.n	8010b26 <_malloc_r+0xc6>
 8010ae8:	2a0b      	cmp	r2, #11
 8010aea:	d916      	bls.n	8010b1a <_malloc_r+0xba>
 8010aec:	1961      	adds	r1, r4, r5
 8010aee:	42a3      	cmp	r3, r4
 8010af0:	6025      	str	r5, [r4, #0]
 8010af2:	bf18      	it	ne
 8010af4:	6059      	strne	r1, [r3, #4]
 8010af6:	6863      	ldr	r3, [r4, #4]
 8010af8:	bf08      	it	eq
 8010afa:	6031      	streq	r1, [r6, #0]
 8010afc:	5162      	str	r2, [r4, r5]
 8010afe:	604b      	str	r3, [r1, #4]
 8010b00:	4638      	mov	r0, r7
 8010b02:	f104 060b 	add.w	r6, r4, #11
 8010b06:	f000 fd83 	bl	8011610 <__malloc_unlock>
 8010b0a:	f026 0607 	bic.w	r6, r6, #7
 8010b0e:	1d23      	adds	r3, r4, #4
 8010b10:	1af2      	subs	r2, r6, r3
 8010b12:	d0b6      	beq.n	8010a82 <_malloc_r+0x22>
 8010b14:	1b9b      	subs	r3, r3, r6
 8010b16:	50a3      	str	r3, [r4, r2]
 8010b18:	e7b3      	b.n	8010a82 <_malloc_r+0x22>
 8010b1a:	6862      	ldr	r2, [r4, #4]
 8010b1c:	42a3      	cmp	r3, r4
 8010b1e:	bf0c      	ite	eq
 8010b20:	6032      	streq	r2, [r6, #0]
 8010b22:	605a      	strne	r2, [r3, #4]
 8010b24:	e7ec      	b.n	8010b00 <_malloc_r+0xa0>
 8010b26:	4623      	mov	r3, r4
 8010b28:	6864      	ldr	r4, [r4, #4]
 8010b2a:	e7b2      	b.n	8010a92 <_malloc_r+0x32>
 8010b2c:	4634      	mov	r4, r6
 8010b2e:	6876      	ldr	r6, [r6, #4]
 8010b30:	e7b9      	b.n	8010aa6 <_malloc_r+0x46>
 8010b32:	230c      	movs	r3, #12
 8010b34:	603b      	str	r3, [r7, #0]
 8010b36:	4638      	mov	r0, r7
 8010b38:	f000 fd6a 	bl	8011610 <__malloc_unlock>
 8010b3c:	e7a1      	b.n	8010a82 <_malloc_r+0x22>
 8010b3e:	6025      	str	r5, [r4, #0]
 8010b40:	e7de      	b.n	8010b00 <_malloc_r+0xa0>
 8010b42:	bf00      	nop
 8010b44:	200025ac 	.word	0x200025ac

08010b48 <__sfputc_r>:
 8010b48:	6893      	ldr	r3, [r2, #8]
 8010b4a:	3b01      	subs	r3, #1
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	b410      	push	{r4}
 8010b50:	6093      	str	r3, [r2, #8]
 8010b52:	da08      	bge.n	8010b66 <__sfputc_r+0x1e>
 8010b54:	6994      	ldr	r4, [r2, #24]
 8010b56:	42a3      	cmp	r3, r4
 8010b58:	db01      	blt.n	8010b5e <__sfputc_r+0x16>
 8010b5a:	290a      	cmp	r1, #10
 8010b5c:	d103      	bne.n	8010b66 <__sfputc_r+0x1e>
 8010b5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b62:	f000 bb33 	b.w	80111cc <__swbuf_r>
 8010b66:	6813      	ldr	r3, [r2, #0]
 8010b68:	1c58      	adds	r0, r3, #1
 8010b6a:	6010      	str	r0, [r2, #0]
 8010b6c:	7019      	strb	r1, [r3, #0]
 8010b6e:	4608      	mov	r0, r1
 8010b70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b74:	4770      	bx	lr

08010b76 <__sfputs_r>:
 8010b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b78:	4606      	mov	r6, r0
 8010b7a:	460f      	mov	r7, r1
 8010b7c:	4614      	mov	r4, r2
 8010b7e:	18d5      	adds	r5, r2, r3
 8010b80:	42ac      	cmp	r4, r5
 8010b82:	d101      	bne.n	8010b88 <__sfputs_r+0x12>
 8010b84:	2000      	movs	r0, #0
 8010b86:	e007      	b.n	8010b98 <__sfputs_r+0x22>
 8010b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b8c:	463a      	mov	r2, r7
 8010b8e:	4630      	mov	r0, r6
 8010b90:	f7ff ffda 	bl	8010b48 <__sfputc_r>
 8010b94:	1c43      	adds	r3, r0, #1
 8010b96:	d1f3      	bne.n	8010b80 <__sfputs_r+0xa>
 8010b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010b9c <_vfiprintf_r>:
 8010b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ba0:	460d      	mov	r5, r1
 8010ba2:	b09d      	sub	sp, #116	; 0x74
 8010ba4:	4614      	mov	r4, r2
 8010ba6:	4698      	mov	r8, r3
 8010ba8:	4606      	mov	r6, r0
 8010baa:	b118      	cbz	r0, 8010bb4 <_vfiprintf_r+0x18>
 8010bac:	6983      	ldr	r3, [r0, #24]
 8010bae:	b90b      	cbnz	r3, 8010bb4 <_vfiprintf_r+0x18>
 8010bb0:	f7ff fe96 	bl	80108e0 <__sinit>
 8010bb4:	4b89      	ldr	r3, [pc, #548]	; (8010ddc <_vfiprintf_r+0x240>)
 8010bb6:	429d      	cmp	r5, r3
 8010bb8:	d11b      	bne.n	8010bf2 <_vfiprintf_r+0x56>
 8010bba:	6875      	ldr	r5, [r6, #4]
 8010bbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010bbe:	07d9      	lsls	r1, r3, #31
 8010bc0:	d405      	bmi.n	8010bce <_vfiprintf_r+0x32>
 8010bc2:	89ab      	ldrh	r3, [r5, #12]
 8010bc4:	059a      	lsls	r2, r3, #22
 8010bc6:	d402      	bmi.n	8010bce <_vfiprintf_r+0x32>
 8010bc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010bca:	f7ff ff27 	bl	8010a1c <__retarget_lock_acquire_recursive>
 8010bce:	89ab      	ldrh	r3, [r5, #12]
 8010bd0:	071b      	lsls	r3, r3, #28
 8010bd2:	d501      	bpl.n	8010bd8 <_vfiprintf_r+0x3c>
 8010bd4:	692b      	ldr	r3, [r5, #16]
 8010bd6:	b9eb      	cbnz	r3, 8010c14 <_vfiprintf_r+0x78>
 8010bd8:	4629      	mov	r1, r5
 8010bda:	4630      	mov	r0, r6
 8010bdc:	f000 fb5a 	bl	8011294 <__swsetup_r>
 8010be0:	b1c0      	cbz	r0, 8010c14 <_vfiprintf_r+0x78>
 8010be2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010be4:	07dc      	lsls	r4, r3, #31
 8010be6:	d50e      	bpl.n	8010c06 <_vfiprintf_r+0x6a>
 8010be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010bec:	b01d      	add	sp, #116	; 0x74
 8010bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bf2:	4b7b      	ldr	r3, [pc, #492]	; (8010de0 <_vfiprintf_r+0x244>)
 8010bf4:	429d      	cmp	r5, r3
 8010bf6:	d101      	bne.n	8010bfc <_vfiprintf_r+0x60>
 8010bf8:	68b5      	ldr	r5, [r6, #8]
 8010bfa:	e7df      	b.n	8010bbc <_vfiprintf_r+0x20>
 8010bfc:	4b79      	ldr	r3, [pc, #484]	; (8010de4 <_vfiprintf_r+0x248>)
 8010bfe:	429d      	cmp	r5, r3
 8010c00:	bf08      	it	eq
 8010c02:	68f5      	ldreq	r5, [r6, #12]
 8010c04:	e7da      	b.n	8010bbc <_vfiprintf_r+0x20>
 8010c06:	89ab      	ldrh	r3, [r5, #12]
 8010c08:	0598      	lsls	r0, r3, #22
 8010c0a:	d4ed      	bmi.n	8010be8 <_vfiprintf_r+0x4c>
 8010c0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c0e:	f7ff ff06 	bl	8010a1e <__retarget_lock_release_recursive>
 8010c12:	e7e9      	b.n	8010be8 <_vfiprintf_r+0x4c>
 8010c14:	2300      	movs	r3, #0
 8010c16:	9309      	str	r3, [sp, #36]	; 0x24
 8010c18:	2320      	movs	r3, #32
 8010c1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c22:	2330      	movs	r3, #48	; 0x30
 8010c24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010de8 <_vfiprintf_r+0x24c>
 8010c28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010c2c:	f04f 0901 	mov.w	r9, #1
 8010c30:	4623      	mov	r3, r4
 8010c32:	469a      	mov	sl, r3
 8010c34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c38:	b10a      	cbz	r2, 8010c3e <_vfiprintf_r+0xa2>
 8010c3a:	2a25      	cmp	r2, #37	; 0x25
 8010c3c:	d1f9      	bne.n	8010c32 <_vfiprintf_r+0x96>
 8010c3e:	ebba 0b04 	subs.w	fp, sl, r4
 8010c42:	d00b      	beq.n	8010c5c <_vfiprintf_r+0xc0>
 8010c44:	465b      	mov	r3, fp
 8010c46:	4622      	mov	r2, r4
 8010c48:	4629      	mov	r1, r5
 8010c4a:	4630      	mov	r0, r6
 8010c4c:	f7ff ff93 	bl	8010b76 <__sfputs_r>
 8010c50:	3001      	adds	r0, #1
 8010c52:	f000 80aa 	beq.w	8010daa <_vfiprintf_r+0x20e>
 8010c56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c58:	445a      	add	r2, fp
 8010c5a:	9209      	str	r2, [sp, #36]	; 0x24
 8010c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	f000 80a2 	beq.w	8010daa <_vfiprintf_r+0x20e>
 8010c66:	2300      	movs	r3, #0
 8010c68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010c6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c70:	f10a 0a01 	add.w	sl, sl, #1
 8010c74:	9304      	str	r3, [sp, #16]
 8010c76:	9307      	str	r3, [sp, #28]
 8010c78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010c7c:	931a      	str	r3, [sp, #104]	; 0x68
 8010c7e:	4654      	mov	r4, sl
 8010c80:	2205      	movs	r2, #5
 8010c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c86:	4858      	ldr	r0, [pc, #352]	; (8010de8 <_vfiprintf_r+0x24c>)
 8010c88:	f7ef fac2 	bl	8000210 <memchr>
 8010c8c:	9a04      	ldr	r2, [sp, #16]
 8010c8e:	b9d8      	cbnz	r0, 8010cc8 <_vfiprintf_r+0x12c>
 8010c90:	06d1      	lsls	r1, r2, #27
 8010c92:	bf44      	itt	mi
 8010c94:	2320      	movmi	r3, #32
 8010c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010c9a:	0713      	lsls	r3, r2, #28
 8010c9c:	bf44      	itt	mi
 8010c9e:	232b      	movmi	r3, #43	; 0x2b
 8010ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8010ca8:	2b2a      	cmp	r3, #42	; 0x2a
 8010caa:	d015      	beq.n	8010cd8 <_vfiprintf_r+0x13c>
 8010cac:	9a07      	ldr	r2, [sp, #28]
 8010cae:	4654      	mov	r4, sl
 8010cb0:	2000      	movs	r0, #0
 8010cb2:	f04f 0c0a 	mov.w	ip, #10
 8010cb6:	4621      	mov	r1, r4
 8010cb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010cbc:	3b30      	subs	r3, #48	; 0x30
 8010cbe:	2b09      	cmp	r3, #9
 8010cc0:	d94e      	bls.n	8010d60 <_vfiprintf_r+0x1c4>
 8010cc2:	b1b0      	cbz	r0, 8010cf2 <_vfiprintf_r+0x156>
 8010cc4:	9207      	str	r2, [sp, #28]
 8010cc6:	e014      	b.n	8010cf2 <_vfiprintf_r+0x156>
 8010cc8:	eba0 0308 	sub.w	r3, r0, r8
 8010ccc:	fa09 f303 	lsl.w	r3, r9, r3
 8010cd0:	4313      	orrs	r3, r2
 8010cd2:	9304      	str	r3, [sp, #16]
 8010cd4:	46a2      	mov	sl, r4
 8010cd6:	e7d2      	b.n	8010c7e <_vfiprintf_r+0xe2>
 8010cd8:	9b03      	ldr	r3, [sp, #12]
 8010cda:	1d19      	adds	r1, r3, #4
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	9103      	str	r1, [sp, #12]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	bfbb      	ittet	lt
 8010ce4:	425b      	neglt	r3, r3
 8010ce6:	f042 0202 	orrlt.w	r2, r2, #2
 8010cea:	9307      	strge	r3, [sp, #28]
 8010cec:	9307      	strlt	r3, [sp, #28]
 8010cee:	bfb8      	it	lt
 8010cf0:	9204      	strlt	r2, [sp, #16]
 8010cf2:	7823      	ldrb	r3, [r4, #0]
 8010cf4:	2b2e      	cmp	r3, #46	; 0x2e
 8010cf6:	d10c      	bne.n	8010d12 <_vfiprintf_r+0x176>
 8010cf8:	7863      	ldrb	r3, [r4, #1]
 8010cfa:	2b2a      	cmp	r3, #42	; 0x2a
 8010cfc:	d135      	bne.n	8010d6a <_vfiprintf_r+0x1ce>
 8010cfe:	9b03      	ldr	r3, [sp, #12]
 8010d00:	1d1a      	adds	r2, r3, #4
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	9203      	str	r2, [sp, #12]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	bfb8      	it	lt
 8010d0a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010d0e:	3402      	adds	r4, #2
 8010d10:	9305      	str	r3, [sp, #20]
 8010d12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010df8 <_vfiprintf_r+0x25c>
 8010d16:	7821      	ldrb	r1, [r4, #0]
 8010d18:	2203      	movs	r2, #3
 8010d1a:	4650      	mov	r0, sl
 8010d1c:	f7ef fa78 	bl	8000210 <memchr>
 8010d20:	b140      	cbz	r0, 8010d34 <_vfiprintf_r+0x198>
 8010d22:	2340      	movs	r3, #64	; 0x40
 8010d24:	eba0 000a 	sub.w	r0, r0, sl
 8010d28:	fa03 f000 	lsl.w	r0, r3, r0
 8010d2c:	9b04      	ldr	r3, [sp, #16]
 8010d2e:	4303      	orrs	r3, r0
 8010d30:	3401      	adds	r4, #1
 8010d32:	9304      	str	r3, [sp, #16]
 8010d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d38:	482c      	ldr	r0, [pc, #176]	; (8010dec <_vfiprintf_r+0x250>)
 8010d3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010d3e:	2206      	movs	r2, #6
 8010d40:	f7ef fa66 	bl	8000210 <memchr>
 8010d44:	2800      	cmp	r0, #0
 8010d46:	d03f      	beq.n	8010dc8 <_vfiprintf_r+0x22c>
 8010d48:	4b29      	ldr	r3, [pc, #164]	; (8010df0 <_vfiprintf_r+0x254>)
 8010d4a:	bb1b      	cbnz	r3, 8010d94 <_vfiprintf_r+0x1f8>
 8010d4c:	9b03      	ldr	r3, [sp, #12]
 8010d4e:	3307      	adds	r3, #7
 8010d50:	f023 0307 	bic.w	r3, r3, #7
 8010d54:	3308      	adds	r3, #8
 8010d56:	9303      	str	r3, [sp, #12]
 8010d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d5a:	443b      	add	r3, r7
 8010d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8010d5e:	e767      	b.n	8010c30 <_vfiprintf_r+0x94>
 8010d60:	fb0c 3202 	mla	r2, ip, r2, r3
 8010d64:	460c      	mov	r4, r1
 8010d66:	2001      	movs	r0, #1
 8010d68:	e7a5      	b.n	8010cb6 <_vfiprintf_r+0x11a>
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	3401      	adds	r4, #1
 8010d6e:	9305      	str	r3, [sp, #20]
 8010d70:	4619      	mov	r1, r3
 8010d72:	f04f 0c0a 	mov.w	ip, #10
 8010d76:	4620      	mov	r0, r4
 8010d78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d7c:	3a30      	subs	r2, #48	; 0x30
 8010d7e:	2a09      	cmp	r2, #9
 8010d80:	d903      	bls.n	8010d8a <_vfiprintf_r+0x1ee>
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d0c5      	beq.n	8010d12 <_vfiprintf_r+0x176>
 8010d86:	9105      	str	r1, [sp, #20]
 8010d88:	e7c3      	b.n	8010d12 <_vfiprintf_r+0x176>
 8010d8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8010d8e:	4604      	mov	r4, r0
 8010d90:	2301      	movs	r3, #1
 8010d92:	e7f0      	b.n	8010d76 <_vfiprintf_r+0x1da>
 8010d94:	ab03      	add	r3, sp, #12
 8010d96:	9300      	str	r3, [sp, #0]
 8010d98:	462a      	mov	r2, r5
 8010d9a:	4b16      	ldr	r3, [pc, #88]	; (8010df4 <_vfiprintf_r+0x258>)
 8010d9c:	a904      	add	r1, sp, #16
 8010d9e:	4630      	mov	r0, r6
 8010da0:	f3af 8000 	nop.w
 8010da4:	4607      	mov	r7, r0
 8010da6:	1c78      	adds	r0, r7, #1
 8010da8:	d1d6      	bne.n	8010d58 <_vfiprintf_r+0x1bc>
 8010daa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010dac:	07d9      	lsls	r1, r3, #31
 8010dae:	d405      	bmi.n	8010dbc <_vfiprintf_r+0x220>
 8010db0:	89ab      	ldrh	r3, [r5, #12]
 8010db2:	059a      	lsls	r2, r3, #22
 8010db4:	d402      	bmi.n	8010dbc <_vfiprintf_r+0x220>
 8010db6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010db8:	f7ff fe31 	bl	8010a1e <__retarget_lock_release_recursive>
 8010dbc:	89ab      	ldrh	r3, [r5, #12]
 8010dbe:	065b      	lsls	r3, r3, #25
 8010dc0:	f53f af12 	bmi.w	8010be8 <_vfiprintf_r+0x4c>
 8010dc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010dc6:	e711      	b.n	8010bec <_vfiprintf_r+0x50>
 8010dc8:	ab03      	add	r3, sp, #12
 8010dca:	9300      	str	r3, [sp, #0]
 8010dcc:	462a      	mov	r2, r5
 8010dce:	4b09      	ldr	r3, [pc, #36]	; (8010df4 <_vfiprintf_r+0x258>)
 8010dd0:	a904      	add	r1, sp, #16
 8010dd2:	4630      	mov	r0, r6
 8010dd4:	f000 f880 	bl	8010ed8 <_printf_i>
 8010dd8:	e7e4      	b.n	8010da4 <_vfiprintf_r+0x208>
 8010dda:	bf00      	nop
 8010ddc:	080119dc 	.word	0x080119dc
 8010de0:	080119fc 	.word	0x080119fc
 8010de4:	080119bc 	.word	0x080119bc
 8010de8:	08011a1c 	.word	0x08011a1c
 8010dec:	08011a26 	.word	0x08011a26
 8010df0:	00000000 	.word	0x00000000
 8010df4:	08010b77 	.word	0x08010b77
 8010df8:	08011a22 	.word	0x08011a22

08010dfc <_printf_common>:
 8010dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e00:	4616      	mov	r6, r2
 8010e02:	4699      	mov	r9, r3
 8010e04:	688a      	ldr	r2, [r1, #8]
 8010e06:	690b      	ldr	r3, [r1, #16]
 8010e08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010e0c:	4293      	cmp	r3, r2
 8010e0e:	bfb8      	it	lt
 8010e10:	4613      	movlt	r3, r2
 8010e12:	6033      	str	r3, [r6, #0]
 8010e14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010e18:	4607      	mov	r7, r0
 8010e1a:	460c      	mov	r4, r1
 8010e1c:	b10a      	cbz	r2, 8010e22 <_printf_common+0x26>
 8010e1e:	3301      	adds	r3, #1
 8010e20:	6033      	str	r3, [r6, #0]
 8010e22:	6823      	ldr	r3, [r4, #0]
 8010e24:	0699      	lsls	r1, r3, #26
 8010e26:	bf42      	ittt	mi
 8010e28:	6833      	ldrmi	r3, [r6, #0]
 8010e2a:	3302      	addmi	r3, #2
 8010e2c:	6033      	strmi	r3, [r6, #0]
 8010e2e:	6825      	ldr	r5, [r4, #0]
 8010e30:	f015 0506 	ands.w	r5, r5, #6
 8010e34:	d106      	bne.n	8010e44 <_printf_common+0x48>
 8010e36:	f104 0a19 	add.w	sl, r4, #25
 8010e3a:	68e3      	ldr	r3, [r4, #12]
 8010e3c:	6832      	ldr	r2, [r6, #0]
 8010e3e:	1a9b      	subs	r3, r3, r2
 8010e40:	42ab      	cmp	r3, r5
 8010e42:	dc26      	bgt.n	8010e92 <_printf_common+0x96>
 8010e44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010e48:	1e13      	subs	r3, r2, #0
 8010e4a:	6822      	ldr	r2, [r4, #0]
 8010e4c:	bf18      	it	ne
 8010e4e:	2301      	movne	r3, #1
 8010e50:	0692      	lsls	r2, r2, #26
 8010e52:	d42b      	bmi.n	8010eac <_printf_common+0xb0>
 8010e54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010e58:	4649      	mov	r1, r9
 8010e5a:	4638      	mov	r0, r7
 8010e5c:	47c0      	blx	r8
 8010e5e:	3001      	adds	r0, #1
 8010e60:	d01e      	beq.n	8010ea0 <_printf_common+0xa4>
 8010e62:	6823      	ldr	r3, [r4, #0]
 8010e64:	68e5      	ldr	r5, [r4, #12]
 8010e66:	6832      	ldr	r2, [r6, #0]
 8010e68:	f003 0306 	and.w	r3, r3, #6
 8010e6c:	2b04      	cmp	r3, #4
 8010e6e:	bf08      	it	eq
 8010e70:	1aad      	subeq	r5, r5, r2
 8010e72:	68a3      	ldr	r3, [r4, #8]
 8010e74:	6922      	ldr	r2, [r4, #16]
 8010e76:	bf0c      	ite	eq
 8010e78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010e7c:	2500      	movne	r5, #0
 8010e7e:	4293      	cmp	r3, r2
 8010e80:	bfc4      	itt	gt
 8010e82:	1a9b      	subgt	r3, r3, r2
 8010e84:	18ed      	addgt	r5, r5, r3
 8010e86:	2600      	movs	r6, #0
 8010e88:	341a      	adds	r4, #26
 8010e8a:	42b5      	cmp	r5, r6
 8010e8c:	d11a      	bne.n	8010ec4 <_printf_common+0xc8>
 8010e8e:	2000      	movs	r0, #0
 8010e90:	e008      	b.n	8010ea4 <_printf_common+0xa8>
 8010e92:	2301      	movs	r3, #1
 8010e94:	4652      	mov	r2, sl
 8010e96:	4649      	mov	r1, r9
 8010e98:	4638      	mov	r0, r7
 8010e9a:	47c0      	blx	r8
 8010e9c:	3001      	adds	r0, #1
 8010e9e:	d103      	bne.n	8010ea8 <_printf_common+0xac>
 8010ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ea8:	3501      	adds	r5, #1
 8010eaa:	e7c6      	b.n	8010e3a <_printf_common+0x3e>
 8010eac:	18e1      	adds	r1, r4, r3
 8010eae:	1c5a      	adds	r2, r3, #1
 8010eb0:	2030      	movs	r0, #48	; 0x30
 8010eb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010eb6:	4422      	add	r2, r4
 8010eb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010ebc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010ec0:	3302      	adds	r3, #2
 8010ec2:	e7c7      	b.n	8010e54 <_printf_common+0x58>
 8010ec4:	2301      	movs	r3, #1
 8010ec6:	4622      	mov	r2, r4
 8010ec8:	4649      	mov	r1, r9
 8010eca:	4638      	mov	r0, r7
 8010ecc:	47c0      	blx	r8
 8010ece:	3001      	adds	r0, #1
 8010ed0:	d0e6      	beq.n	8010ea0 <_printf_common+0xa4>
 8010ed2:	3601      	adds	r6, #1
 8010ed4:	e7d9      	b.n	8010e8a <_printf_common+0x8e>
	...

08010ed8 <_printf_i>:
 8010ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010edc:	7e0f      	ldrb	r7, [r1, #24]
 8010ede:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010ee0:	2f78      	cmp	r7, #120	; 0x78
 8010ee2:	4691      	mov	r9, r2
 8010ee4:	4680      	mov	r8, r0
 8010ee6:	460c      	mov	r4, r1
 8010ee8:	469a      	mov	sl, r3
 8010eea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010eee:	d807      	bhi.n	8010f00 <_printf_i+0x28>
 8010ef0:	2f62      	cmp	r7, #98	; 0x62
 8010ef2:	d80a      	bhi.n	8010f0a <_printf_i+0x32>
 8010ef4:	2f00      	cmp	r7, #0
 8010ef6:	f000 80d8 	beq.w	80110aa <_printf_i+0x1d2>
 8010efa:	2f58      	cmp	r7, #88	; 0x58
 8010efc:	f000 80a3 	beq.w	8011046 <_printf_i+0x16e>
 8010f00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010f04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010f08:	e03a      	b.n	8010f80 <_printf_i+0xa8>
 8010f0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010f0e:	2b15      	cmp	r3, #21
 8010f10:	d8f6      	bhi.n	8010f00 <_printf_i+0x28>
 8010f12:	a101      	add	r1, pc, #4	; (adr r1, 8010f18 <_printf_i+0x40>)
 8010f14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010f18:	08010f71 	.word	0x08010f71
 8010f1c:	08010f85 	.word	0x08010f85
 8010f20:	08010f01 	.word	0x08010f01
 8010f24:	08010f01 	.word	0x08010f01
 8010f28:	08010f01 	.word	0x08010f01
 8010f2c:	08010f01 	.word	0x08010f01
 8010f30:	08010f85 	.word	0x08010f85
 8010f34:	08010f01 	.word	0x08010f01
 8010f38:	08010f01 	.word	0x08010f01
 8010f3c:	08010f01 	.word	0x08010f01
 8010f40:	08010f01 	.word	0x08010f01
 8010f44:	08011091 	.word	0x08011091
 8010f48:	08010fb5 	.word	0x08010fb5
 8010f4c:	08011073 	.word	0x08011073
 8010f50:	08010f01 	.word	0x08010f01
 8010f54:	08010f01 	.word	0x08010f01
 8010f58:	080110b3 	.word	0x080110b3
 8010f5c:	08010f01 	.word	0x08010f01
 8010f60:	08010fb5 	.word	0x08010fb5
 8010f64:	08010f01 	.word	0x08010f01
 8010f68:	08010f01 	.word	0x08010f01
 8010f6c:	0801107b 	.word	0x0801107b
 8010f70:	682b      	ldr	r3, [r5, #0]
 8010f72:	1d1a      	adds	r2, r3, #4
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	602a      	str	r2, [r5, #0]
 8010f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010f7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010f80:	2301      	movs	r3, #1
 8010f82:	e0a3      	b.n	80110cc <_printf_i+0x1f4>
 8010f84:	6820      	ldr	r0, [r4, #0]
 8010f86:	6829      	ldr	r1, [r5, #0]
 8010f88:	0606      	lsls	r6, r0, #24
 8010f8a:	f101 0304 	add.w	r3, r1, #4
 8010f8e:	d50a      	bpl.n	8010fa6 <_printf_i+0xce>
 8010f90:	680e      	ldr	r6, [r1, #0]
 8010f92:	602b      	str	r3, [r5, #0]
 8010f94:	2e00      	cmp	r6, #0
 8010f96:	da03      	bge.n	8010fa0 <_printf_i+0xc8>
 8010f98:	232d      	movs	r3, #45	; 0x2d
 8010f9a:	4276      	negs	r6, r6
 8010f9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010fa0:	485e      	ldr	r0, [pc, #376]	; (801111c <_printf_i+0x244>)
 8010fa2:	230a      	movs	r3, #10
 8010fa4:	e019      	b.n	8010fda <_printf_i+0x102>
 8010fa6:	680e      	ldr	r6, [r1, #0]
 8010fa8:	602b      	str	r3, [r5, #0]
 8010faa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010fae:	bf18      	it	ne
 8010fb0:	b236      	sxthne	r6, r6
 8010fb2:	e7ef      	b.n	8010f94 <_printf_i+0xbc>
 8010fb4:	682b      	ldr	r3, [r5, #0]
 8010fb6:	6820      	ldr	r0, [r4, #0]
 8010fb8:	1d19      	adds	r1, r3, #4
 8010fba:	6029      	str	r1, [r5, #0]
 8010fbc:	0601      	lsls	r1, r0, #24
 8010fbe:	d501      	bpl.n	8010fc4 <_printf_i+0xec>
 8010fc0:	681e      	ldr	r6, [r3, #0]
 8010fc2:	e002      	b.n	8010fca <_printf_i+0xf2>
 8010fc4:	0646      	lsls	r6, r0, #25
 8010fc6:	d5fb      	bpl.n	8010fc0 <_printf_i+0xe8>
 8010fc8:	881e      	ldrh	r6, [r3, #0]
 8010fca:	4854      	ldr	r0, [pc, #336]	; (801111c <_printf_i+0x244>)
 8010fcc:	2f6f      	cmp	r7, #111	; 0x6f
 8010fce:	bf0c      	ite	eq
 8010fd0:	2308      	moveq	r3, #8
 8010fd2:	230a      	movne	r3, #10
 8010fd4:	2100      	movs	r1, #0
 8010fd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010fda:	6865      	ldr	r5, [r4, #4]
 8010fdc:	60a5      	str	r5, [r4, #8]
 8010fde:	2d00      	cmp	r5, #0
 8010fe0:	bfa2      	ittt	ge
 8010fe2:	6821      	ldrge	r1, [r4, #0]
 8010fe4:	f021 0104 	bicge.w	r1, r1, #4
 8010fe8:	6021      	strge	r1, [r4, #0]
 8010fea:	b90e      	cbnz	r6, 8010ff0 <_printf_i+0x118>
 8010fec:	2d00      	cmp	r5, #0
 8010fee:	d04d      	beq.n	801108c <_printf_i+0x1b4>
 8010ff0:	4615      	mov	r5, r2
 8010ff2:	fbb6 f1f3 	udiv	r1, r6, r3
 8010ff6:	fb03 6711 	mls	r7, r3, r1, r6
 8010ffa:	5dc7      	ldrb	r7, [r0, r7]
 8010ffc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011000:	4637      	mov	r7, r6
 8011002:	42bb      	cmp	r3, r7
 8011004:	460e      	mov	r6, r1
 8011006:	d9f4      	bls.n	8010ff2 <_printf_i+0x11a>
 8011008:	2b08      	cmp	r3, #8
 801100a:	d10b      	bne.n	8011024 <_printf_i+0x14c>
 801100c:	6823      	ldr	r3, [r4, #0]
 801100e:	07de      	lsls	r6, r3, #31
 8011010:	d508      	bpl.n	8011024 <_printf_i+0x14c>
 8011012:	6923      	ldr	r3, [r4, #16]
 8011014:	6861      	ldr	r1, [r4, #4]
 8011016:	4299      	cmp	r1, r3
 8011018:	bfde      	ittt	le
 801101a:	2330      	movle	r3, #48	; 0x30
 801101c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011020:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011024:	1b52      	subs	r2, r2, r5
 8011026:	6122      	str	r2, [r4, #16]
 8011028:	f8cd a000 	str.w	sl, [sp]
 801102c:	464b      	mov	r3, r9
 801102e:	aa03      	add	r2, sp, #12
 8011030:	4621      	mov	r1, r4
 8011032:	4640      	mov	r0, r8
 8011034:	f7ff fee2 	bl	8010dfc <_printf_common>
 8011038:	3001      	adds	r0, #1
 801103a:	d14c      	bne.n	80110d6 <_printf_i+0x1fe>
 801103c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011040:	b004      	add	sp, #16
 8011042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011046:	4835      	ldr	r0, [pc, #212]	; (801111c <_printf_i+0x244>)
 8011048:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801104c:	6829      	ldr	r1, [r5, #0]
 801104e:	6823      	ldr	r3, [r4, #0]
 8011050:	f851 6b04 	ldr.w	r6, [r1], #4
 8011054:	6029      	str	r1, [r5, #0]
 8011056:	061d      	lsls	r5, r3, #24
 8011058:	d514      	bpl.n	8011084 <_printf_i+0x1ac>
 801105a:	07df      	lsls	r7, r3, #31
 801105c:	bf44      	itt	mi
 801105e:	f043 0320 	orrmi.w	r3, r3, #32
 8011062:	6023      	strmi	r3, [r4, #0]
 8011064:	b91e      	cbnz	r6, 801106e <_printf_i+0x196>
 8011066:	6823      	ldr	r3, [r4, #0]
 8011068:	f023 0320 	bic.w	r3, r3, #32
 801106c:	6023      	str	r3, [r4, #0]
 801106e:	2310      	movs	r3, #16
 8011070:	e7b0      	b.n	8010fd4 <_printf_i+0xfc>
 8011072:	6823      	ldr	r3, [r4, #0]
 8011074:	f043 0320 	orr.w	r3, r3, #32
 8011078:	6023      	str	r3, [r4, #0]
 801107a:	2378      	movs	r3, #120	; 0x78
 801107c:	4828      	ldr	r0, [pc, #160]	; (8011120 <_printf_i+0x248>)
 801107e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011082:	e7e3      	b.n	801104c <_printf_i+0x174>
 8011084:	0659      	lsls	r1, r3, #25
 8011086:	bf48      	it	mi
 8011088:	b2b6      	uxthmi	r6, r6
 801108a:	e7e6      	b.n	801105a <_printf_i+0x182>
 801108c:	4615      	mov	r5, r2
 801108e:	e7bb      	b.n	8011008 <_printf_i+0x130>
 8011090:	682b      	ldr	r3, [r5, #0]
 8011092:	6826      	ldr	r6, [r4, #0]
 8011094:	6961      	ldr	r1, [r4, #20]
 8011096:	1d18      	adds	r0, r3, #4
 8011098:	6028      	str	r0, [r5, #0]
 801109a:	0635      	lsls	r5, r6, #24
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	d501      	bpl.n	80110a4 <_printf_i+0x1cc>
 80110a0:	6019      	str	r1, [r3, #0]
 80110a2:	e002      	b.n	80110aa <_printf_i+0x1d2>
 80110a4:	0670      	lsls	r0, r6, #25
 80110a6:	d5fb      	bpl.n	80110a0 <_printf_i+0x1c8>
 80110a8:	8019      	strh	r1, [r3, #0]
 80110aa:	2300      	movs	r3, #0
 80110ac:	6123      	str	r3, [r4, #16]
 80110ae:	4615      	mov	r5, r2
 80110b0:	e7ba      	b.n	8011028 <_printf_i+0x150>
 80110b2:	682b      	ldr	r3, [r5, #0]
 80110b4:	1d1a      	adds	r2, r3, #4
 80110b6:	602a      	str	r2, [r5, #0]
 80110b8:	681d      	ldr	r5, [r3, #0]
 80110ba:	6862      	ldr	r2, [r4, #4]
 80110bc:	2100      	movs	r1, #0
 80110be:	4628      	mov	r0, r5
 80110c0:	f7ef f8a6 	bl	8000210 <memchr>
 80110c4:	b108      	cbz	r0, 80110ca <_printf_i+0x1f2>
 80110c6:	1b40      	subs	r0, r0, r5
 80110c8:	6060      	str	r0, [r4, #4]
 80110ca:	6863      	ldr	r3, [r4, #4]
 80110cc:	6123      	str	r3, [r4, #16]
 80110ce:	2300      	movs	r3, #0
 80110d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80110d4:	e7a8      	b.n	8011028 <_printf_i+0x150>
 80110d6:	6923      	ldr	r3, [r4, #16]
 80110d8:	462a      	mov	r2, r5
 80110da:	4649      	mov	r1, r9
 80110dc:	4640      	mov	r0, r8
 80110de:	47d0      	blx	sl
 80110e0:	3001      	adds	r0, #1
 80110e2:	d0ab      	beq.n	801103c <_printf_i+0x164>
 80110e4:	6823      	ldr	r3, [r4, #0]
 80110e6:	079b      	lsls	r3, r3, #30
 80110e8:	d413      	bmi.n	8011112 <_printf_i+0x23a>
 80110ea:	68e0      	ldr	r0, [r4, #12]
 80110ec:	9b03      	ldr	r3, [sp, #12]
 80110ee:	4298      	cmp	r0, r3
 80110f0:	bfb8      	it	lt
 80110f2:	4618      	movlt	r0, r3
 80110f4:	e7a4      	b.n	8011040 <_printf_i+0x168>
 80110f6:	2301      	movs	r3, #1
 80110f8:	4632      	mov	r2, r6
 80110fa:	4649      	mov	r1, r9
 80110fc:	4640      	mov	r0, r8
 80110fe:	47d0      	blx	sl
 8011100:	3001      	adds	r0, #1
 8011102:	d09b      	beq.n	801103c <_printf_i+0x164>
 8011104:	3501      	adds	r5, #1
 8011106:	68e3      	ldr	r3, [r4, #12]
 8011108:	9903      	ldr	r1, [sp, #12]
 801110a:	1a5b      	subs	r3, r3, r1
 801110c:	42ab      	cmp	r3, r5
 801110e:	dcf2      	bgt.n	80110f6 <_printf_i+0x21e>
 8011110:	e7eb      	b.n	80110ea <_printf_i+0x212>
 8011112:	2500      	movs	r5, #0
 8011114:	f104 0619 	add.w	r6, r4, #25
 8011118:	e7f5      	b.n	8011106 <_printf_i+0x22e>
 801111a:	bf00      	nop
 801111c:	08011a2d 	.word	0x08011a2d
 8011120:	08011a3e 	.word	0x08011a3e

08011124 <_sbrk_r>:
 8011124:	b538      	push	{r3, r4, r5, lr}
 8011126:	4d06      	ldr	r5, [pc, #24]	; (8011140 <_sbrk_r+0x1c>)
 8011128:	2300      	movs	r3, #0
 801112a:	4604      	mov	r4, r0
 801112c:	4608      	mov	r0, r1
 801112e:	602b      	str	r3, [r5, #0]
 8011130:	f000 fb1c 	bl	801176c <_sbrk>
 8011134:	1c43      	adds	r3, r0, #1
 8011136:	d102      	bne.n	801113e <_sbrk_r+0x1a>
 8011138:	682b      	ldr	r3, [r5, #0]
 801113a:	b103      	cbz	r3, 801113e <_sbrk_r+0x1a>
 801113c:	6023      	str	r3, [r4, #0]
 801113e:	bd38      	pop	{r3, r4, r5, pc}
 8011140:	200025b4 	.word	0x200025b4

08011144 <__sread>:
 8011144:	b510      	push	{r4, lr}
 8011146:	460c      	mov	r4, r1
 8011148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801114c:	f000 fab2 	bl	80116b4 <_read_r>
 8011150:	2800      	cmp	r0, #0
 8011152:	bfab      	itete	ge
 8011154:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011156:	89a3      	ldrhlt	r3, [r4, #12]
 8011158:	181b      	addge	r3, r3, r0
 801115a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801115e:	bfac      	ite	ge
 8011160:	6563      	strge	r3, [r4, #84]	; 0x54
 8011162:	81a3      	strhlt	r3, [r4, #12]
 8011164:	bd10      	pop	{r4, pc}

08011166 <__swrite>:
 8011166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801116a:	461f      	mov	r7, r3
 801116c:	898b      	ldrh	r3, [r1, #12]
 801116e:	05db      	lsls	r3, r3, #23
 8011170:	4605      	mov	r5, r0
 8011172:	460c      	mov	r4, r1
 8011174:	4616      	mov	r6, r2
 8011176:	d505      	bpl.n	8011184 <__swrite+0x1e>
 8011178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801117c:	2302      	movs	r3, #2
 801117e:	2200      	movs	r2, #0
 8011180:	f000 f9c8 	bl	8011514 <_lseek_r>
 8011184:	89a3      	ldrh	r3, [r4, #12]
 8011186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801118a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801118e:	81a3      	strh	r3, [r4, #12]
 8011190:	4632      	mov	r2, r6
 8011192:	463b      	mov	r3, r7
 8011194:	4628      	mov	r0, r5
 8011196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801119a:	f000 b869 	b.w	8011270 <_write_r>

0801119e <__sseek>:
 801119e:	b510      	push	{r4, lr}
 80111a0:	460c      	mov	r4, r1
 80111a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111a6:	f000 f9b5 	bl	8011514 <_lseek_r>
 80111aa:	1c43      	adds	r3, r0, #1
 80111ac:	89a3      	ldrh	r3, [r4, #12]
 80111ae:	bf15      	itete	ne
 80111b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80111b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80111b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80111ba:	81a3      	strheq	r3, [r4, #12]
 80111bc:	bf18      	it	ne
 80111be:	81a3      	strhne	r3, [r4, #12]
 80111c0:	bd10      	pop	{r4, pc}

080111c2 <__sclose>:
 80111c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111c6:	f000 b8d3 	b.w	8011370 <_close_r>
	...

080111cc <__swbuf_r>:
 80111cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111ce:	460e      	mov	r6, r1
 80111d0:	4614      	mov	r4, r2
 80111d2:	4605      	mov	r5, r0
 80111d4:	b118      	cbz	r0, 80111de <__swbuf_r+0x12>
 80111d6:	6983      	ldr	r3, [r0, #24]
 80111d8:	b90b      	cbnz	r3, 80111de <__swbuf_r+0x12>
 80111da:	f7ff fb81 	bl	80108e0 <__sinit>
 80111de:	4b21      	ldr	r3, [pc, #132]	; (8011264 <__swbuf_r+0x98>)
 80111e0:	429c      	cmp	r4, r3
 80111e2:	d12b      	bne.n	801123c <__swbuf_r+0x70>
 80111e4:	686c      	ldr	r4, [r5, #4]
 80111e6:	69a3      	ldr	r3, [r4, #24]
 80111e8:	60a3      	str	r3, [r4, #8]
 80111ea:	89a3      	ldrh	r3, [r4, #12]
 80111ec:	071a      	lsls	r2, r3, #28
 80111ee:	d52f      	bpl.n	8011250 <__swbuf_r+0x84>
 80111f0:	6923      	ldr	r3, [r4, #16]
 80111f2:	b36b      	cbz	r3, 8011250 <__swbuf_r+0x84>
 80111f4:	6923      	ldr	r3, [r4, #16]
 80111f6:	6820      	ldr	r0, [r4, #0]
 80111f8:	1ac0      	subs	r0, r0, r3
 80111fa:	6963      	ldr	r3, [r4, #20]
 80111fc:	b2f6      	uxtb	r6, r6
 80111fe:	4283      	cmp	r3, r0
 8011200:	4637      	mov	r7, r6
 8011202:	dc04      	bgt.n	801120e <__swbuf_r+0x42>
 8011204:	4621      	mov	r1, r4
 8011206:	4628      	mov	r0, r5
 8011208:	f000 f948 	bl	801149c <_fflush_r>
 801120c:	bb30      	cbnz	r0, 801125c <__swbuf_r+0x90>
 801120e:	68a3      	ldr	r3, [r4, #8]
 8011210:	3b01      	subs	r3, #1
 8011212:	60a3      	str	r3, [r4, #8]
 8011214:	6823      	ldr	r3, [r4, #0]
 8011216:	1c5a      	adds	r2, r3, #1
 8011218:	6022      	str	r2, [r4, #0]
 801121a:	701e      	strb	r6, [r3, #0]
 801121c:	6963      	ldr	r3, [r4, #20]
 801121e:	3001      	adds	r0, #1
 8011220:	4283      	cmp	r3, r0
 8011222:	d004      	beq.n	801122e <__swbuf_r+0x62>
 8011224:	89a3      	ldrh	r3, [r4, #12]
 8011226:	07db      	lsls	r3, r3, #31
 8011228:	d506      	bpl.n	8011238 <__swbuf_r+0x6c>
 801122a:	2e0a      	cmp	r6, #10
 801122c:	d104      	bne.n	8011238 <__swbuf_r+0x6c>
 801122e:	4621      	mov	r1, r4
 8011230:	4628      	mov	r0, r5
 8011232:	f000 f933 	bl	801149c <_fflush_r>
 8011236:	b988      	cbnz	r0, 801125c <__swbuf_r+0x90>
 8011238:	4638      	mov	r0, r7
 801123a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801123c:	4b0a      	ldr	r3, [pc, #40]	; (8011268 <__swbuf_r+0x9c>)
 801123e:	429c      	cmp	r4, r3
 8011240:	d101      	bne.n	8011246 <__swbuf_r+0x7a>
 8011242:	68ac      	ldr	r4, [r5, #8]
 8011244:	e7cf      	b.n	80111e6 <__swbuf_r+0x1a>
 8011246:	4b09      	ldr	r3, [pc, #36]	; (801126c <__swbuf_r+0xa0>)
 8011248:	429c      	cmp	r4, r3
 801124a:	bf08      	it	eq
 801124c:	68ec      	ldreq	r4, [r5, #12]
 801124e:	e7ca      	b.n	80111e6 <__swbuf_r+0x1a>
 8011250:	4621      	mov	r1, r4
 8011252:	4628      	mov	r0, r5
 8011254:	f000 f81e 	bl	8011294 <__swsetup_r>
 8011258:	2800      	cmp	r0, #0
 801125a:	d0cb      	beq.n	80111f4 <__swbuf_r+0x28>
 801125c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011260:	e7ea      	b.n	8011238 <__swbuf_r+0x6c>
 8011262:	bf00      	nop
 8011264:	080119dc 	.word	0x080119dc
 8011268:	080119fc 	.word	0x080119fc
 801126c:	080119bc 	.word	0x080119bc

08011270 <_write_r>:
 8011270:	b538      	push	{r3, r4, r5, lr}
 8011272:	4d07      	ldr	r5, [pc, #28]	; (8011290 <_write_r+0x20>)
 8011274:	4604      	mov	r4, r0
 8011276:	4608      	mov	r0, r1
 8011278:	4611      	mov	r1, r2
 801127a:	2200      	movs	r2, #0
 801127c:	602a      	str	r2, [r5, #0]
 801127e:	461a      	mov	r2, r3
 8011280:	f000 fa82 	bl	8011788 <_write>
 8011284:	1c43      	adds	r3, r0, #1
 8011286:	d102      	bne.n	801128e <_write_r+0x1e>
 8011288:	682b      	ldr	r3, [r5, #0]
 801128a:	b103      	cbz	r3, 801128e <_write_r+0x1e>
 801128c:	6023      	str	r3, [r4, #0]
 801128e:	bd38      	pop	{r3, r4, r5, pc}
 8011290:	200025b4 	.word	0x200025b4

08011294 <__swsetup_r>:
 8011294:	4b32      	ldr	r3, [pc, #200]	; (8011360 <__swsetup_r+0xcc>)
 8011296:	b570      	push	{r4, r5, r6, lr}
 8011298:	681d      	ldr	r5, [r3, #0]
 801129a:	4606      	mov	r6, r0
 801129c:	460c      	mov	r4, r1
 801129e:	b125      	cbz	r5, 80112aa <__swsetup_r+0x16>
 80112a0:	69ab      	ldr	r3, [r5, #24]
 80112a2:	b913      	cbnz	r3, 80112aa <__swsetup_r+0x16>
 80112a4:	4628      	mov	r0, r5
 80112a6:	f7ff fb1b 	bl	80108e0 <__sinit>
 80112aa:	4b2e      	ldr	r3, [pc, #184]	; (8011364 <__swsetup_r+0xd0>)
 80112ac:	429c      	cmp	r4, r3
 80112ae:	d10f      	bne.n	80112d0 <__swsetup_r+0x3c>
 80112b0:	686c      	ldr	r4, [r5, #4]
 80112b2:	89a3      	ldrh	r3, [r4, #12]
 80112b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80112b8:	0719      	lsls	r1, r3, #28
 80112ba:	d42c      	bmi.n	8011316 <__swsetup_r+0x82>
 80112bc:	06dd      	lsls	r5, r3, #27
 80112be:	d411      	bmi.n	80112e4 <__swsetup_r+0x50>
 80112c0:	2309      	movs	r3, #9
 80112c2:	6033      	str	r3, [r6, #0]
 80112c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80112c8:	81a3      	strh	r3, [r4, #12]
 80112ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80112ce:	e03e      	b.n	801134e <__swsetup_r+0xba>
 80112d0:	4b25      	ldr	r3, [pc, #148]	; (8011368 <__swsetup_r+0xd4>)
 80112d2:	429c      	cmp	r4, r3
 80112d4:	d101      	bne.n	80112da <__swsetup_r+0x46>
 80112d6:	68ac      	ldr	r4, [r5, #8]
 80112d8:	e7eb      	b.n	80112b2 <__swsetup_r+0x1e>
 80112da:	4b24      	ldr	r3, [pc, #144]	; (801136c <__swsetup_r+0xd8>)
 80112dc:	429c      	cmp	r4, r3
 80112de:	bf08      	it	eq
 80112e0:	68ec      	ldreq	r4, [r5, #12]
 80112e2:	e7e6      	b.n	80112b2 <__swsetup_r+0x1e>
 80112e4:	0758      	lsls	r0, r3, #29
 80112e6:	d512      	bpl.n	801130e <__swsetup_r+0x7a>
 80112e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80112ea:	b141      	cbz	r1, 80112fe <__swsetup_r+0x6a>
 80112ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80112f0:	4299      	cmp	r1, r3
 80112f2:	d002      	beq.n	80112fa <__swsetup_r+0x66>
 80112f4:	4630      	mov	r0, r6
 80112f6:	f000 f991 	bl	801161c <_free_r>
 80112fa:	2300      	movs	r3, #0
 80112fc:	6363      	str	r3, [r4, #52]	; 0x34
 80112fe:	89a3      	ldrh	r3, [r4, #12]
 8011300:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011304:	81a3      	strh	r3, [r4, #12]
 8011306:	2300      	movs	r3, #0
 8011308:	6063      	str	r3, [r4, #4]
 801130a:	6923      	ldr	r3, [r4, #16]
 801130c:	6023      	str	r3, [r4, #0]
 801130e:	89a3      	ldrh	r3, [r4, #12]
 8011310:	f043 0308 	orr.w	r3, r3, #8
 8011314:	81a3      	strh	r3, [r4, #12]
 8011316:	6923      	ldr	r3, [r4, #16]
 8011318:	b94b      	cbnz	r3, 801132e <__swsetup_r+0x9a>
 801131a:	89a3      	ldrh	r3, [r4, #12]
 801131c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011324:	d003      	beq.n	801132e <__swsetup_r+0x9a>
 8011326:	4621      	mov	r1, r4
 8011328:	4630      	mov	r0, r6
 801132a:	f000 f92b 	bl	8011584 <__smakebuf_r>
 801132e:	89a0      	ldrh	r0, [r4, #12]
 8011330:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011334:	f010 0301 	ands.w	r3, r0, #1
 8011338:	d00a      	beq.n	8011350 <__swsetup_r+0xbc>
 801133a:	2300      	movs	r3, #0
 801133c:	60a3      	str	r3, [r4, #8]
 801133e:	6963      	ldr	r3, [r4, #20]
 8011340:	425b      	negs	r3, r3
 8011342:	61a3      	str	r3, [r4, #24]
 8011344:	6923      	ldr	r3, [r4, #16]
 8011346:	b943      	cbnz	r3, 801135a <__swsetup_r+0xc6>
 8011348:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801134c:	d1ba      	bne.n	80112c4 <__swsetup_r+0x30>
 801134e:	bd70      	pop	{r4, r5, r6, pc}
 8011350:	0781      	lsls	r1, r0, #30
 8011352:	bf58      	it	pl
 8011354:	6963      	ldrpl	r3, [r4, #20]
 8011356:	60a3      	str	r3, [r4, #8]
 8011358:	e7f4      	b.n	8011344 <__swsetup_r+0xb0>
 801135a:	2000      	movs	r0, #0
 801135c:	e7f7      	b.n	801134e <__swsetup_r+0xba>
 801135e:	bf00      	nop
 8011360:	20000190 	.word	0x20000190
 8011364:	080119dc 	.word	0x080119dc
 8011368:	080119fc 	.word	0x080119fc
 801136c:	080119bc 	.word	0x080119bc

08011370 <_close_r>:
 8011370:	b538      	push	{r3, r4, r5, lr}
 8011372:	4d06      	ldr	r5, [pc, #24]	; (801138c <_close_r+0x1c>)
 8011374:	2300      	movs	r3, #0
 8011376:	4604      	mov	r4, r0
 8011378:	4608      	mov	r0, r1
 801137a:	602b      	str	r3, [r5, #0]
 801137c:	f000 f9ce 	bl	801171c <_close>
 8011380:	1c43      	adds	r3, r0, #1
 8011382:	d102      	bne.n	801138a <_close_r+0x1a>
 8011384:	682b      	ldr	r3, [r5, #0]
 8011386:	b103      	cbz	r3, 801138a <_close_r+0x1a>
 8011388:	6023      	str	r3, [r4, #0]
 801138a:	bd38      	pop	{r3, r4, r5, pc}
 801138c:	200025b4 	.word	0x200025b4

08011390 <__sflush_r>:
 8011390:	898a      	ldrh	r2, [r1, #12]
 8011392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011396:	4605      	mov	r5, r0
 8011398:	0710      	lsls	r0, r2, #28
 801139a:	460c      	mov	r4, r1
 801139c:	d458      	bmi.n	8011450 <__sflush_r+0xc0>
 801139e:	684b      	ldr	r3, [r1, #4]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	dc05      	bgt.n	80113b0 <__sflush_r+0x20>
 80113a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	dc02      	bgt.n	80113b0 <__sflush_r+0x20>
 80113aa:	2000      	movs	r0, #0
 80113ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80113b2:	2e00      	cmp	r6, #0
 80113b4:	d0f9      	beq.n	80113aa <__sflush_r+0x1a>
 80113b6:	2300      	movs	r3, #0
 80113b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80113bc:	682f      	ldr	r7, [r5, #0]
 80113be:	602b      	str	r3, [r5, #0]
 80113c0:	d032      	beq.n	8011428 <__sflush_r+0x98>
 80113c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80113c4:	89a3      	ldrh	r3, [r4, #12]
 80113c6:	075a      	lsls	r2, r3, #29
 80113c8:	d505      	bpl.n	80113d6 <__sflush_r+0x46>
 80113ca:	6863      	ldr	r3, [r4, #4]
 80113cc:	1ac0      	subs	r0, r0, r3
 80113ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80113d0:	b10b      	cbz	r3, 80113d6 <__sflush_r+0x46>
 80113d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80113d4:	1ac0      	subs	r0, r0, r3
 80113d6:	2300      	movs	r3, #0
 80113d8:	4602      	mov	r2, r0
 80113da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80113dc:	6a21      	ldr	r1, [r4, #32]
 80113de:	4628      	mov	r0, r5
 80113e0:	47b0      	blx	r6
 80113e2:	1c43      	adds	r3, r0, #1
 80113e4:	89a3      	ldrh	r3, [r4, #12]
 80113e6:	d106      	bne.n	80113f6 <__sflush_r+0x66>
 80113e8:	6829      	ldr	r1, [r5, #0]
 80113ea:	291d      	cmp	r1, #29
 80113ec:	d82c      	bhi.n	8011448 <__sflush_r+0xb8>
 80113ee:	4a2a      	ldr	r2, [pc, #168]	; (8011498 <__sflush_r+0x108>)
 80113f0:	40ca      	lsrs	r2, r1
 80113f2:	07d6      	lsls	r6, r2, #31
 80113f4:	d528      	bpl.n	8011448 <__sflush_r+0xb8>
 80113f6:	2200      	movs	r2, #0
 80113f8:	6062      	str	r2, [r4, #4]
 80113fa:	04d9      	lsls	r1, r3, #19
 80113fc:	6922      	ldr	r2, [r4, #16]
 80113fe:	6022      	str	r2, [r4, #0]
 8011400:	d504      	bpl.n	801140c <__sflush_r+0x7c>
 8011402:	1c42      	adds	r2, r0, #1
 8011404:	d101      	bne.n	801140a <__sflush_r+0x7a>
 8011406:	682b      	ldr	r3, [r5, #0]
 8011408:	b903      	cbnz	r3, 801140c <__sflush_r+0x7c>
 801140a:	6560      	str	r0, [r4, #84]	; 0x54
 801140c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801140e:	602f      	str	r7, [r5, #0]
 8011410:	2900      	cmp	r1, #0
 8011412:	d0ca      	beq.n	80113aa <__sflush_r+0x1a>
 8011414:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011418:	4299      	cmp	r1, r3
 801141a:	d002      	beq.n	8011422 <__sflush_r+0x92>
 801141c:	4628      	mov	r0, r5
 801141e:	f000 f8fd 	bl	801161c <_free_r>
 8011422:	2000      	movs	r0, #0
 8011424:	6360      	str	r0, [r4, #52]	; 0x34
 8011426:	e7c1      	b.n	80113ac <__sflush_r+0x1c>
 8011428:	6a21      	ldr	r1, [r4, #32]
 801142a:	2301      	movs	r3, #1
 801142c:	4628      	mov	r0, r5
 801142e:	47b0      	blx	r6
 8011430:	1c41      	adds	r1, r0, #1
 8011432:	d1c7      	bne.n	80113c4 <__sflush_r+0x34>
 8011434:	682b      	ldr	r3, [r5, #0]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d0c4      	beq.n	80113c4 <__sflush_r+0x34>
 801143a:	2b1d      	cmp	r3, #29
 801143c:	d001      	beq.n	8011442 <__sflush_r+0xb2>
 801143e:	2b16      	cmp	r3, #22
 8011440:	d101      	bne.n	8011446 <__sflush_r+0xb6>
 8011442:	602f      	str	r7, [r5, #0]
 8011444:	e7b1      	b.n	80113aa <__sflush_r+0x1a>
 8011446:	89a3      	ldrh	r3, [r4, #12]
 8011448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801144c:	81a3      	strh	r3, [r4, #12]
 801144e:	e7ad      	b.n	80113ac <__sflush_r+0x1c>
 8011450:	690f      	ldr	r7, [r1, #16]
 8011452:	2f00      	cmp	r7, #0
 8011454:	d0a9      	beq.n	80113aa <__sflush_r+0x1a>
 8011456:	0793      	lsls	r3, r2, #30
 8011458:	680e      	ldr	r6, [r1, #0]
 801145a:	bf08      	it	eq
 801145c:	694b      	ldreq	r3, [r1, #20]
 801145e:	600f      	str	r7, [r1, #0]
 8011460:	bf18      	it	ne
 8011462:	2300      	movne	r3, #0
 8011464:	eba6 0807 	sub.w	r8, r6, r7
 8011468:	608b      	str	r3, [r1, #8]
 801146a:	f1b8 0f00 	cmp.w	r8, #0
 801146e:	dd9c      	ble.n	80113aa <__sflush_r+0x1a>
 8011470:	6a21      	ldr	r1, [r4, #32]
 8011472:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011474:	4643      	mov	r3, r8
 8011476:	463a      	mov	r2, r7
 8011478:	4628      	mov	r0, r5
 801147a:	47b0      	blx	r6
 801147c:	2800      	cmp	r0, #0
 801147e:	dc06      	bgt.n	801148e <__sflush_r+0xfe>
 8011480:	89a3      	ldrh	r3, [r4, #12]
 8011482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011486:	81a3      	strh	r3, [r4, #12]
 8011488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801148c:	e78e      	b.n	80113ac <__sflush_r+0x1c>
 801148e:	4407      	add	r7, r0
 8011490:	eba8 0800 	sub.w	r8, r8, r0
 8011494:	e7e9      	b.n	801146a <__sflush_r+0xda>
 8011496:	bf00      	nop
 8011498:	20400001 	.word	0x20400001

0801149c <_fflush_r>:
 801149c:	b538      	push	{r3, r4, r5, lr}
 801149e:	690b      	ldr	r3, [r1, #16]
 80114a0:	4605      	mov	r5, r0
 80114a2:	460c      	mov	r4, r1
 80114a4:	b913      	cbnz	r3, 80114ac <_fflush_r+0x10>
 80114a6:	2500      	movs	r5, #0
 80114a8:	4628      	mov	r0, r5
 80114aa:	bd38      	pop	{r3, r4, r5, pc}
 80114ac:	b118      	cbz	r0, 80114b6 <_fflush_r+0x1a>
 80114ae:	6983      	ldr	r3, [r0, #24]
 80114b0:	b90b      	cbnz	r3, 80114b6 <_fflush_r+0x1a>
 80114b2:	f7ff fa15 	bl	80108e0 <__sinit>
 80114b6:	4b14      	ldr	r3, [pc, #80]	; (8011508 <_fflush_r+0x6c>)
 80114b8:	429c      	cmp	r4, r3
 80114ba:	d11b      	bne.n	80114f4 <_fflush_r+0x58>
 80114bc:	686c      	ldr	r4, [r5, #4]
 80114be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d0ef      	beq.n	80114a6 <_fflush_r+0xa>
 80114c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80114c8:	07d0      	lsls	r0, r2, #31
 80114ca:	d404      	bmi.n	80114d6 <_fflush_r+0x3a>
 80114cc:	0599      	lsls	r1, r3, #22
 80114ce:	d402      	bmi.n	80114d6 <_fflush_r+0x3a>
 80114d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80114d2:	f7ff faa3 	bl	8010a1c <__retarget_lock_acquire_recursive>
 80114d6:	4628      	mov	r0, r5
 80114d8:	4621      	mov	r1, r4
 80114da:	f7ff ff59 	bl	8011390 <__sflush_r>
 80114de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80114e0:	07da      	lsls	r2, r3, #31
 80114e2:	4605      	mov	r5, r0
 80114e4:	d4e0      	bmi.n	80114a8 <_fflush_r+0xc>
 80114e6:	89a3      	ldrh	r3, [r4, #12]
 80114e8:	059b      	lsls	r3, r3, #22
 80114ea:	d4dd      	bmi.n	80114a8 <_fflush_r+0xc>
 80114ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80114ee:	f7ff fa96 	bl	8010a1e <__retarget_lock_release_recursive>
 80114f2:	e7d9      	b.n	80114a8 <_fflush_r+0xc>
 80114f4:	4b05      	ldr	r3, [pc, #20]	; (801150c <_fflush_r+0x70>)
 80114f6:	429c      	cmp	r4, r3
 80114f8:	d101      	bne.n	80114fe <_fflush_r+0x62>
 80114fa:	68ac      	ldr	r4, [r5, #8]
 80114fc:	e7df      	b.n	80114be <_fflush_r+0x22>
 80114fe:	4b04      	ldr	r3, [pc, #16]	; (8011510 <_fflush_r+0x74>)
 8011500:	429c      	cmp	r4, r3
 8011502:	bf08      	it	eq
 8011504:	68ec      	ldreq	r4, [r5, #12]
 8011506:	e7da      	b.n	80114be <_fflush_r+0x22>
 8011508:	080119dc 	.word	0x080119dc
 801150c:	080119fc 	.word	0x080119fc
 8011510:	080119bc 	.word	0x080119bc

08011514 <_lseek_r>:
 8011514:	b538      	push	{r3, r4, r5, lr}
 8011516:	4d07      	ldr	r5, [pc, #28]	; (8011534 <_lseek_r+0x20>)
 8011518:	4604      	mov	r4, r0
 801151a:	4608      	mov	r0, r1
 801151c:	4611      	mov	r1, r2
 801151e:	2200      	movs	r2, #0
 8011520:	602a      	str	r2, [r5, #0]
 8011522:	461a      	mov	r2, r3
 8011524:	f000 f912 	bl	801174c <_lseek>
 8011528:	1c43      	adds	r3, r0, #1
 801152a:	d102      	bne.n	8011532 <_lseek_r+0x1e>
 801152c:	682b      	ldr	r3, [r5, #0]
 801152e:	b103      	cbz	r3, 8011532 <_lseek_r+0x1e>
 8011530:	6023      	str	r3, [r4, #0]
 8011532:	bd38      	pop	{r3, r4, r5, pc}
 8011534:	200025b4 	.word	0x200025b4

08011538 <__swhatbuf_r>:
 8011538:	b570      	push	{r4, r5, r6, lr}
 801153a:	460e      	mov	r6, r1
 801153c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011540:	2900      	cmp	r1, #0
 8011542:	b096      	sub	sp, #88	; 0x58
 8011544:	4614      	mov	r4, r2
 8011546:	461d      	mov	r5, r3
 8011548:	da08      	bge.n	801155c <__swhatbuf_r+0x24>
 801154a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801154e:	2200      	movs	r2, #0
 8011550:	602a      	str	r2, [r5, #0]
 8011552:	061a      	lsls	r2, r3, #24
 8011554:	d410      	bmi.n	8011578 <__swhatbuf_r+0x40>
 8011556:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801155a:	e00e      	b.n	801157a <__swhatbuf_r+0x42>
 801155c:	466a      	mov	r2, sp
 801155e:	f000 f8bb 	bl	80116d8 <_fstat_r>
 8011562:	2800      	cmp	r0, #0
 8011564:	dbf1      	blt.n	801154a <__swhatbuf_r+0x12>
 8011566:	9a01      	ldr	r2, [sp, #4]
 8011568:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801156c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011570:	425a      	negs	r2, r3
 8011572:	415a      	adcs	r2, r3
 8011574:	602a      	str	r2, [r5, #0]
 8011576:	e7ee      	b.n	8011556 <__swhatbuf_r+0x1e>
 8011578:	2340      	movs	r3, #64	; 0x40
 801157a:	2000      	movs	r0, #0
 801157c:	6023      	str	r3, [r4, #0]
 801157e:	b016      	add	sp, #88	; 0x58
 8011580:	bd70      	pop	{r4, r5, r6, pc}
	...

08011584 <__smakebuf_r>:
 8011584:	898b      	ldrh	r3, [r1, #12]
 8011586:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011588:	079d      	lsls	r5, r3, #30
 801158a:	4606      	mov	r6, r0
 801158c:	460c      	mov	r4, r1
 801158e:	d507      	bpl.n	80115a0 <__smakebuf_r+0x1c>
 8011590:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011594:	6023      	str	r3, [r4, #0]
 8011596:	6123      	str	r3, [r4, #16]
 8011598:	2301      	movs	r3, #1
 801159a:	6163      	str	r3, [r4, #20]
 801159c:	b002      	add	sp, #8
 801159e:	bd70      	pop	{r4, r5, r6, pc}
 80115a0:	ab01      	add	r3, sp, #4
 80115a2:	466a      	mov	r2, sp
 80115a4:	f7ff ffc8 	bl	8011538 <__swhatbuf_r>
 80115a8:	9900      	ldr	r1, [sp, #0]
 80115aa:	4605      	mov	r5, r0
 80115ac:	4630      	mov	r0, r6
 80115ae:	f7ff fa57 	bl	8010a60 <_malloc_r>
 80115b2:	b948      	cbnz	r0, 80115c8 <__smakebuf_r+0x44>
 80115b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115b8:	059a      	lsls	r2, r3, #22
 80115ba:	d4ef      	bmi.n	801159c <__smakebuf_r+0x18>
 80115bc:	f023 0303 	bic.w	r3, r3, #3
 80115c0:	f043 0302 	orr.w	r3, r3, #2
 80115c4:	81a3      	strh	r3, [r4, #12]
 80115c6:	e7e3      	b.n	8011590 <__smakebuf_r+0xc>
 80115c8:	4b0d      	ldr	r3, [pc, #52]	; (8011600 <__smakebuf_r+0x7c>)
 80115ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80115cc:	89a3      	ldrh	r3, [r4, #12]
 80115ce:	6020      	str	r0, [r4, #0]
 80115d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80115d4:	81a3      	strh	r3, [r4, #12]
 80115d6:	9b00      	ldr	r3, [sp, #0]
 80115d8:	6163      	str	r3, [r4, #20]
 80115da:	9b01      	ldr	r3, [sp, #4]
 80115dc:	6120      	str	r0, [r4, #16]
 80115de:	b15b      	cbz	r3, 80115f8 <__smakebuf_r+0x74>
 80115e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115e4:	4630      	mov	r0, r6
 80115e6:	f000 f889 	bl	80116fc <_isatty_r>
 80115ea:	b128      	cbz	r0, 80115f8 <__smakebuf_r+0x74>
 80115ec:	89a3      	ldrh	r3, [r4, #12]
 80115ee:	f023 0303 	bic.w	r3, r3, #3
 80115f2:	f043 0301 	orr.w	r3, r3, #1
 80115f6:	81a3      	strh	r3, [r4, #12]
 80115f8:	89a0      	ldrh	r0, [r4, #12]
 80115fa:	4305      	orrs	r5, r0
 80115fc:	81a5      	strh	r5, [r4, #12]
 80115fe:	e7cd      	b.n	801159c <__smakebuf_r+0x18>
 8011600:	08010879 	.word	0x08010879

08011604 <__malloc_lock>:
 8011604:	4801      	ldr	r0, [pc, #4]	; (801160c <__malloc_lock+0x8>)
 8011606:	f7ff ba09 	b.w	8010a1c <__retarget_lock_acquire_recursive>
 801160a:	bf00      	nop
 801160c:	200025a8 	.word	0x200025a8

08011610 <__malloc_unlock>:
 8011610:	4801      	ldr	r0, [pc, #4]	; (8011618 <__malloc_unlock+0x8>)
 8011612:	f7ff ba04 	b.w	8010a1e <__retarget_lock_release_recursive>
 8011616:	bf00      	nop
 8011618:	200025a8 	.word	0x200025a8

0801161c <_free_r>:
 801161c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801161e:	2900      	cmp	r1, #0
 8011620:	d044      	beq.n	80116ac <_free_r+0x90>
 8011622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011626:	9001      	str	r0, [sp, #4]
 8011628:	2b00      	cmp	r3, #0
 801162a:	f1a1 0404 	sub.w	r4, r1, #4
 801162e:	bfb8      	it	lt
 8011630:	18e4      	addlt	r4, r4, r3
 8011632:	f7ff ffe7 	bl	8011604 <__malloc_lock>
 8011636:	4a1e      	ldr	r2, [pc, #120]	; (80116b0 <_free_r+0x94>)
 8011638:	9801      	ldr	r0, [sp, #4]
 801163a:	6813      	ldr	r3, [r2, #0]
 801163c:	b933      	cbnz	r3, 801164c <_free_r+0x30>
 801163e:	6063      	str	r3, [r4, #4]
 8011640:	6014      	str	r4, [r2, #0]
 8011642:	b003      	add	sp, #12
 8011644:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011648:	f7ff bfe2 	b.w	8011610 <__malloc_unlock>
 801164c:	42a3      	cmp	r3, r4
 801164e:	d908      	bls.n	8011662 <_free_r+0x46>
 8011650:	6825      	ldr	r5, [r4, #0]
 8011652:	1961      	adds	r1, r4, r5
 8011654:	428b      	cmp	r3, r1
 8011656:	bf01      	itttt	eq
 8011658:	6819      	ldreq	r1, [r3, #0]
 801165a:	685b      	ldreq	r3, [r3, #4]
 801165c:	1949      	addeq	r1, r1, r5
 801165e:	6021      	streq	r1, [r4, #0]
 8011660:	e7ed      	b.n	801163e <_free_r+0x22>
 8011662:	461a      	mov	r2, r3
 8011664:	685b      	ldr	r3, [r3, #4]
 8011666:	b10b      	cbz	r3, 801166c <_free_r+0x50>
 8011668:	42a3      	cmp	r3, r4
 801166a:	d9fa      	bls.n	8011662 <_free_r+0x46>
 801166c:	6811      	ldr	r1, [r2, #0]
 801166e:	1855      	adds	r5, r2, r1
 8011670:	42a5      	cmp	r5, r4
 8011672:	d10b      	bne.n	801168c <_free_r+0x70>
 8011674:	6824      	ldr	r4, [r4, #0]
 8011676:	4421      	add	r1, r4
 8011678:	1854      	adds	r4, r2, r1
 801167a:	42a3      	cmp	r3, r4
 801167c:	6011      	str	r1, [r2, #0]
 801167e:	d1e0      	bne.n	8011642 <_free_r+0x26>
 8011680:	681c      	ldr	r4, [r3, #0]
 8011682:	685b      	ldr	r3, [r3, #4]
 8011684:	6053      	str	r3, [r2, #4]
 8011686:	4421      	add	r1, r4
 8011688:	6011      	str	r1, [r2, #0]
 801168a:	e7da      	b.n	8011642 <_free_r+0x26>
 801168c:	d902      	bls.n	8011694 <_free_r+0x78>
 801168e:	230c      	movs	r3, #12
 8011690:	6003      	str	r3, [r0, #0]
 8011692:	e7d6      	b.n	8011642 <_free_r+0x26>
 8011694:	6825      	ldr	r5, [r4, #0]
 8011696:	1961      	adds	r1, r4, r5
 8011698:	428b      	cmp	r3, r1
 801169a:	bf04      	itt	eq
 801169c:	6819      	ldreq	r1, [r3, #0]
 801169e:	685b      	ldreq	r3, [r3, #4]
 80116a0:	6063      	str	r3, [r4, #4]
 80116a2:	bf04      	itt	eq
 80116a4:	1949      	addeq	r1, r1, r5
 80116a6:	6021      	streq	r1, [r4, #0]
 80116a8:	6054      	str	r4, [r2, #4]
 80116aa:	e7ca      	b.n	8011642 <_free_r+0x26>
 80116ac:	b003      	add	sp, #12
 80116ae:	bd30      	pop	{r4, r5, pc}
 80116b0:	200025ac 	.word	0x200025ac

080116b4 <_read_r>:
 80116b4:	b538      	push	{r3, r4, r5, lr}
 80116b6:	4d07      	ldr	r5, [pc, #28]	; (80116d4 <_read_r+0x20>)
 80116b8:	4604      	mov	r4, r0
 80116ba:	4608      	mov	r0, r1
 80116bc:	4611      	mov	r1, r2
 80116be:	2200      	movs	r2, #0
 80116c0:	602a      	str	r2, [r5, #0]
 80116c2:	461a      	mov	r2, r3
 80116c4:	f000 f84a 	bl	801175c <_read>
 80116c8:	1c43      	adds	r3, r0, #1
 80116ca:	d102      	bne.n	80116d2 <_read_r+0x1e>
 80116cc:	682b      	ldr	r3, [r5, #0]
 80116ce:	b103      	cbz	r3, 80116d2 <_read_r+0x1e>
 80116d0:	6023      	str	r3, [r4, #0]
 80116d2:	bd38      	pop	{r3, r4, r5, pc}
 80116d4:	200025b4 	.word	0x200025b4

080116d8 <_fstat_r>:
 80116d8:	b538      	push	{r3, r4, r5, lr}
 80116da:	4d07      	ldr	r5, [pc, #28]	; (80116f8 <_fstat_r+0x20>)
 80116dc:	2300      	movs	r3, #0
 80116de:	4604      	mov	r4, r0
 80116e0:	4608      	mov	r0, r1
 80116e2:	4611      	mov	r1, r2
 80116e4:	602b      	str	r3, [r5, #0]
 80116e6:	f000 f821 	bl	801172c <_fstat>
 80116ea:	1c43      	adds	r3, r0, #1
 80116ec:	d102      	bne.n	80116f4 <_fstat_r+0x1c>
 80116ee:	682b      	ldr	r3, [r5, #0]
 80116f0:	b103      	cbz	r3, 80116f4 <_fstat_r+0x1c>
 80116f2:	6023      	str	r3, [r4, #0]
 80116f4:	bd38      	pop	{r3, r4, r5, pc}
 80116f6:	bf00      	nop
 80116f8:	200025b4 	.word	0x200025b4

080116fc <_isatty_r>:
 80116fc:	b538      	push	{r3, r4, r5, lr}
 80116fe:	4d06      	ldr	r5, [pc, #24]	; (8011718 <_isatty_r+0x1c>)
 8011700:	2300      	movs	r3, #0
 8011702:	4604      	mov	r4, r0
 8011704:	4608      	mov	r0, r1
 8011706:	602b      	str	r3, [r5, #0]
 8011708:	f000 f818 	bl	801173c <_isatty>
 801170c:	1c43      	adds	r3, r0, #1
 801170e:	d102      	bne.n	8011716 <_isatty_r+0x1a>
 8011710:	682b      	ldr	r3, [r5, #0]
 8011712:	b103      	cbz	r3, 8011716 <_isatty_r+0x1a>
 8011714:	6023      	str	r3, [r4, #0]
 8011716:	bd38      	pop	{r3, r4, r5, pc}
 8011718:	200025b4 	.word	0x200025b4

0801171c <_close>:
 801171c:	4b02      	ldr	r3, [pc, #8]	; (8011728 <_close+0xc>)
 801171e:	2258      	movs	r2, #88	; 0x58
 8011720:	601a      	str	r2, [r3, #0]
 8011722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011726:	4770      	bx	lr
 8011728:	200025b4 	.word	0x200025b4

0801172c <_fstat>:
 801172c:	4b02      	ldr	r3, [pc, #8]	; (8011738 <_fstat+0xc>)
 801172e:	2258      	movs	r2, #88	; 0x58
 8011730:	601a      	str	r2, [r3, #0]
 8011732:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011736:	4770      	bx	lr
 8011738:	200025b4 	.word	0x200025b4

0801173c <_isatty>:
 801173c:	4b02      	ldr	r3, [pc, #8]	; (8011748 <_isatty+0xc>)
 801173e:	2258      	movs	r2, #88	; 0x58
 8011740:	601a      	str	r2, [r3, #0]
 8011742:	2000      	movs	r0, #0
 8011744:	4770      	bx	lr
 8011746:	bf00      	nop
 8011748:	200025b4 	.word	0x200025b4

0801174c <_lseek>:
 801174c:	4b02      	ldr	r3, [pc, #8]	; (8011758 <_lseek+0xc>)
 801174e:	2258      	movs	r2, #88	; 0x58
 8011750:	601a      	str	r2, [r3, #0]
 8011752:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011756:	4770      	bx	lr
 8011758:	200025b4 	.word	0x200025b4

0801175c <_read>:
 801175c:	4b02      	ldr	r3, [pc, #8]	; (8011768 <_read+0xc>)
 801175e:	2258      	movs	r2, #88	; 0x58
 8011760:	601a      	str	r2, [r3, #0]
 8011762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011766:	4770      	bx	lr
 8011768:	200025b4 	.word	0x200025b4

0801176c <_sbrk>:
 801176c:	4a04      	ldr	r2, [pc, #16]	; (8011780 <_sbrk+0x14>)
 801176e:	6811      	ldr	r1, [r2, #0]
 8011770:	4603      	mov	r3, r0
 8011772:	b909      	cbnz	r1, 8011778 <_sbrk+0xc>
 8011774:	4903      	ldr	r1, [pc, #12]	; (8011784 <_sbrk+0x18>)
 8011776:	6011      	str	r1, [r2, #0]
 8011778:	6810      	ldr	r0, [r2, #0]
 801177a:	4403      	add	r3, r0
 801177c:	6013      	str	r3, [r2, #0]
 801177e:	4770      	bx	lr
 8011780:	200025b8 	.word	0x200025b8
 8011784:	200025c0 	.word	0x200025c0

08011788 <_write>:
 8011788:	4b02      	ldr	r3, [pc, #8]	; (8011794 <_write+0xc>)
 801178a:	2258      	movs	r2, #88	; 0x58
 801178c:	601a      	str	r2, [r3, #0]
 801178e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011792:	4770      	bx	lr
 8011794:	200025b4 	.word	0x200025b4

08011798 <_init>:
 8011798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801179a:	bf00      	nop
 801179c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801179e:	bc08      	pop	{r3}
 80117a0:	469e      	mov	lr, r3
 80117a2:	4770      	bx	lr

080117a4 <_fini>:
 80117a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117a6:	bf00      	nop
 80117a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80117aa:	bc08      	pop	{r3}
 80117ac:	469e      	mov	lr, r3
 80117ae:	4770      	bx	lr
