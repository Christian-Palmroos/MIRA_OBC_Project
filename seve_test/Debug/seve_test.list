
seve_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044ec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080045ac  080045ac  000145ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800463c  0800463c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800463c  0800463c  0001463c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004644  08004644  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004644  08004644  00014644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004648  08004648  00014648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800464c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000000c  08004658  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  2000017c  08004658  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c987  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df2  00000000  00000000  0002c9bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0002e7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002f1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001154d  00000000  00000000  0002fab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f223  00000000  00000000  00041005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000668b0  00000000  00000000  00050228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b6ad8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002304  00000000  00000000  000b6b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004594 	.word	0x08004594

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004594 	.word	0x08004594

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_ldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d115      	bne.n	8000250 <__aeabi_ldivmod+0x30>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d113      	bne.n	8000250 <__aeabi_ldivmod+0x30>
 8000228:	2900      	cmp	r1, #0
 800022a:	db06      	blt.n	800023a <__aeabi_ldivmod+0x1a>
 800022c:	dc01      	bgt.n	8000232 <__aeabi_ldivmod+0x12>
 800022e:	2800      	cmp	r0, #0
 8000230:	d006      	beq.n	8000240 <__aeabi_ldivmod+0x20>
 8000232:	2000      	movs	r0, #0
 8000234:	43c0      	mvns	r0, r0
 8000236:	0841      	lsrs	r1, r0, #1
 8000238:	e002      	b.n	8000240 <__aeabi_ldivmod+0x20>
 800023a:	2180      	movs	r1, #128	; 0x80
 800023c:	0609      	lsls	r1, r1, #24
 800023e:	2000      	movs	r0, #0
 8000240:	b407      	push	{r0, r1, r2}
 8000242:	4802      	ldr	r0, [pc, #8]	; (800024c <__aeabi_ldivmod+0x2c>)
 8000244:	a101      	add	r1, pc, #4	; (adr r1, 800024c <__aeabi_ldivmod+0x2c>)
 8000246:	1840      	adds	r0, r0, r1
 8000248:	9002      	str	r0, [sp, #8]
 800024a:	bd03      	pop	{r0, r1, pc}
 800024c:	ffffffd1 	.word	0xffffffd1
 8000250:	b403      	push	{r0, r1}
 8000252:	4668      	mov	r0, sp
 8000254:	b501      	push	{r0, lr}
 8000256:	9802      	ldr	r0, [sp, #8]
 8000258:	f000 f920 	bl	800049c <__gnu_ldivmod_helper>
 800025c:	9b01      	ldr	r3, [sp, #4]
 800025e:	469e      	mov	lr, r3
 8000260:	b002      	add	sp, #8
 8000262:	bc0c      	pop	{r2, r3}
 8000264:	4770      	bx	lr
 8000266:	46c0      	nop			; (mov r8, r8)

08000268 <__aeabi_uldivmod>:
 8000268:	2b00      	cmp	r3, #0
 800026a:	d111      	bne.n	8000290 <__aeabi_uldivmod+0x28>
 800026c:	2a00      	cmp	r2, #0
 800026e:	d10f      	bne.n	8000290 <__aeabi_uldivmod+0x28>
 8000270:	2900      	cmp	r1, #0
 8000272:	d100      	bne.n	8000276 <__aeabi_uldivmod+0xe>
 8000274:	2800      	cmp	r0, #0
 8000276:	d002      	beq.n	800027e <__aeabi_uldivmod+0x16>
 8000278:	2100      	movs	r1, #0
 800027a:	43c9      	mvns	r1, r1
 800027c:	0008      	movs	r0, r1
 800027e:	b407      	push	{r0, r1, r2}
 8000280:	4802      	ldr	r0, [pc, #8]	; (800028c <__aeabi_uldivmod+0x24>)
 8000282:	a102      	add	r1, pc, #8	; (adr r1, 800028c <__aeabi_uldivmod+0x24>)
 8000284:	1840      	adds	r0, r0, r1
 8000286:	9002      	str	r0, [sp, #8]
 8000288:	bd03      	pop	{r0, r1, pc}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	ffffff91 	.word	0xffffff91
 8000290:	b403      	push	{r0, r1}
 8000292:	4668      	mov	r0, sp
 8000294:	b501      	push	{r0, lr}
 8000296:	9802      	ldr	r0, [sp, #8]
 8000298:	f000 f834 	bl	8000304 <__udivmoddi4>
 800029c:	9b01      	ldr	r3, [sp, #4]
 800029e:	469e      	mov	lr, r3
 80002a0:	b002      	add	sp, #8
 80002a2:	bc0c      	pop	{r2, r3}
 80002a4:	4770      	bx	lr
 80002a6:	46c0      	nop			; (mov r8, r8)

080002a8 <__aeabi_lmul>:
 80002a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002aa:	46ce      	mov	lr, r9
 80002ac:	4647      	mov	r7, r8
 80002ae:	b580      	push	{r7, lr}
 80002b0:	0007      	movs	r7, r0
 80002b2:	4699      	mov	r9, r3
 80002b4:	0c3b      	lsrs	r3, r7, #16
 80002b6:	469c      	mov	ip, r3
 80002b8:	0413      	lsls	r3, r2, #16
 80002ba:	0c1b      	lsrs	r3, r3, #16
 80002bc:	001d      	movs	r5, r3
 80002be:	000e      	movs	r6, r1
 80002c0:	4661      	mov	r1, ip
 80002c2:	0400      	lsls	r0, r0, #16
 80002c4:	0c14      	lsrs	r4, r2, #16
 80002c6:	0c00      	lsrs	r0, r0, #16
 80002c8:	4345      	muls	r5, r0
 80002ca:	434b      	muls	r3, r1
 80002cc:	4360      	muls	r0, r4
 80002ce:	4361      	muls	r1, r4
 80002d0:	18c0      	adds	r0, r0, r3
 80002d2:	0c2c      	lsrs	r4, r5, #16
 80002d4:	1820      	adds	r0, r4, r0
 80002d6:	468c      	mov	ip, r1
 80002d8:	4283      	cmp	r3, r0
 80002da:	d903      	bls.n	80002e4 <__aeabi_lmul+0x3c>
 80002dc:	2380      	movs	r3, #128	; 0x80
 80002de:	025b      	lsls	r3, r3, #9
 80002e0:	4698      	mov	r8, r3
 80002e2:	44c4      	add	ip, r8
 80002e4:	4649      	mov	r1, r9
 80002e6:	4379      	muls	r1, r7
 80002e8:	4372      	muls	r2, r6
 80002ea:	0c03      	lsrs	r3, r0, #16
 80002ec:	4463      	add	r3, ip
 80002ee:	042d      	lsls	r5, r5, #16
 80002f0:	0c2d      	lsrs	r5, r5, #16
 80002f2:	18c9      	adds	r1, r1, r3
 80002f4:	0400      	lsls	r0, r0, #16
 80002f6:	1940      	adds	r0, r0, r5
 80002f8:	1889      	adds	r1, r1, r2
 80002fa:	bcc0      	pop	{r6, r7}
 80002fc:	46b9      	mov	r9, r7
 80002fe:	46b0      	mov	r8, r6
 8000300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000302:	46c0      	nop			; (mov r8, r8)

08000304 <__udivmoddi4>:
 8000304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000306:	4657      	mov	r7, sl
 8000308:	464e      	mov	r6, r9
 800030a:	4645      	mov	r5, r8
 800030c:	46de      	mov	lr, fp
 800030e:	b5e0      	push	{r5, r6, r7, lr}
 8000310:	0004      	movs	r4, r0
 8000312:	000d      	movs	r5, r1
 8000314:	4692      	mov	sl, r2
 8000316:	4699      	mov	r9, r3
 8000318:	b083      	sub	sp, #12
 800031a:	428b      	cmp	r3, r1
 800031c:	d830      	bhi.n	8000380 <__udivmoddi4+0x7c>
 800031e:	d02d      	beq.n	800037c <__udivmoddi4+0x78>
 8000320:	4649      	mov	r1, r9
 8000322:	4650      	mov	r0, sl
 8000324:	f000 f8f6 	bl	8000514 <__clzdi2>
 8000328:	0029      	movs	r1, r5
 800032a:	0006      	movs	r6, r0
 800032c:	0020      	movs	r0, r4
 800032e:	f000 f8f1 	bl	8000514 <__clzdi2>
 8000332:	1a33      	subs	r3, r6, r0
 8000334:	4698      	mov	r8, r3
 8000336:	3b20      	subs	r3, #32
 8000338:	469b      	mov	fp, r3
 800033a:	d433      	bmi.n	80003a4 <__udivmoddi4+0xa0>
 800033c:	465a      	mov	r2, fp
 800033e:	4653      	mov	r3, sl
 8000340:	4093      	lsls	r3, r2
 8000342:	4642      	mov	r2, r8
 8000344:	001f      	movs	r7, r3
 8000346:	4653      	mov	r3, sl
 8000348:	4093      	lsls	r3, r2
 800034a:	001e      	movs	r6, r3
 800034c:	42af      	cmp	r7, r5
 800034e:	d83a      	bhi.n	80003c6 <__udivmoddi4+0xc2>
 8000350:	42af      	cmp	r7, r5
 8000352:	d100      	bne.n	8000356 <__udivmoddi4+0x52>
 8000354:	e078      	b.n	8000448 <__udivmoddi4+0x144>
 8000356:	465b      	mov	r3, fp
 8000358:	1ba4      	subs	r4, r4, r6
 800035a:	41bd      	sbcs	r5, r7
 800035c:	2b00      	cmp	r3, #0
 800035e:	da00      	bge.n	8000362 <__udivmoddi4+0x5e>
 8000360:	e075      	b.n	800044e <__udivmoddi4+0x14a>
 8000362:	2200      	movs	r2, #0
 8000364:	2300      	movs	r3, #0
 8000366:	9200      	str	r2, [sp, #0]
 8000368:	9301      	str	r3, [sp, #4]
 800036a:	2301      	movs	r3, #1
 800036c:	465a      	mov	r2, fp
 800036e:	4093      	lsls	r3, r2
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	2301      	movs	r3, #1
 8000374:	4642      	mov	r2, r8
 8000376:	4093      	lsls	r3, r2
 8000378:	9300      	str	r3, [sp, #0]
 800037a:	e028      	b.n	80003ce <__udivmoddi4+0xca>
 800037c:	4282      	cmp	r2, r0
 800037e:	d9cf      	bls.n	8000320 <__udivmoddi4+0x1c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <__udivmoddi4+0x8e>
 800038e:	601c      	str	r4, [r3, #0]
 8000390:	605d      	str	r5, [r3, #4]
 8000392:	9800      	ldr	r0, [sp, #0]
 8000394:	9901      	ldr	r1, [sp, #4]
 8000396:	b003      	add	sp, #12
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	46bb      	mov	fp, r7
 800039c:	46b2      	mov	sl, r6
 800039e:	46a9      	mov	r9, r5
 80003a0:	46a0      	mov	r8, r4
 80003a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003a4:	4642      	mov	r2, r8
 80003a6:	2320      	movs	r3, #32
 80003a8:	1a9b      	subs	r3, r3, r2
 80003aa:	4652      	mov	r2, sl
 80003ac:	40da      	lsrs	r2, r3
 80003ae:	4641      	mov	r1, r8
 80003b0:	0013      	movs	r3, r2
 80003b2:	464a      	mov	r2, r9
 80003b4:	408a      	lsls	r2, r1
 80003b6:	0017      	movs	r7, r2
 80003b8:	4642      	mov	r2, r8
 80003ba:	431f      	orrs	r7, r3
 80003bc:	4653      	mov	r3, sl
 80003be:	4093      	lsls	r3, r2
 80003c0:	001e      	movs	r6, r3
 80003c2:	42af      	cmp	r7, r5
 80003c4:	d9c4      	bls.n	8000350 <__udivmoddi4+0x4c>
 80003c6:	2200      	movs	r2, #0
 80003c8:	2300      	movs	r3, #0
 80003ca:	9200      	str	r2, [sp, #0]
 80003cc:	9301      	str	r3, [sp, #4]
 80003ce:	4643      	mov	r3, r8
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d0d9      	beq.n	8000388 <__udivmoddi4+0x84>
 80003d4:	07fb      	lsls	r3, r7, #31
 80003d6:	0872      	lsrs	r2, r6, #1
 80003d8:	431a      	orrs	r2, r3
 80003da:	4646      	mov	r6, r8
 80003dc:	087b      	lsrs	r3, r7, #1
 80003de:	e00e      	b.n	80003fe <__udivmoddi4+0xfa>
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d101      	bne.n	80003e8 <__udivmoddi4+0xe4>
 80003e4:	42a2      	cmp	r2, r4
 80003e6:	d80c      	bhi.n	8000402 <__udivmoddi4+0xfe>
 80003e8:	1aa4      	subs	r4, r4, r2
 80003ea:	419d      	sbcs	r5, r3
 80003ec:	2001      	movs	r0, #1
 80003ee:	1924      	adds	r4, r4, r4
 80003f0:	416d      	adcs	r5, r5
 80003f2:	2100      	movs	r1, #0
 80003f4:	3e01      	subs	r6, #1
 80003f6:	1824      	adds	r4, r4, r0
 80003f8:	414d      	adcs	r5, r1
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d006      	beq.n	800040c <__udivmoddi4+0x108>
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d9ee      	bls.n	80003e0 <__udivmoddi4+0xdc>
 8000402:	3e01      	subs	r6, #1
 8000404:	1924      	adds	r4, r4, r4
 8000406:	416d      	adcs	r5, r5
 8000408:	2e00      	cmp	r6, #0
 800040a:	d1f8      	bne.n	80003fe <__udivmoddi4+0xfa>
 800040c:	9800      	ldr	r0, [sp, #0]
 800040e:	9901      	ldr	r1, [sp, #4]
 8000410:	465b      	mov	r3, fp
 8000412:	1900      	adds	r0, r0, r4
 8000414:	4169      	adcs	r1, r5
 8000416:	2b00      	cmp	r3, #0
 8000418:	db24      	blt.n	8000464 <__udivmoddi4+0x160>
 800041a:	002b      	movs	r3, r5
 800041c:	465a      	mov	r2, fp
 800041e:	4644      	mov	r4, r8
 8000420:	40d3      	lsrs	r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	40e2      	lsrs	r2, r4
 8000426:	001c      	movs	r4, r3
 8000428:	465b      	mov	r3, fp
 800042a:	0015      	movs	r5, r2
 800042c:	2b00      	cmp	r3, #0
 800042e:	db2a      	blt.n	8000486 <__udivmoddi4+0x182>
 8000430:	0026      	movs	r6, r4
 8000432:	409e      	lsls	r6, r3
 8000434:	0033      	movs	r3, r6
 8000436:	0026      	movs	r6, r4
 8000438:	4647      	mov	r7, r8
 800043a:	40be      	lsls	r6, r7
 800043c:	0032      	movs	r2, r6
 800043e:	1a80      	subs	r0, r0, r2
 8000440:	4199      	sbcs	r1, r3
 8000442:	9000      	str	r0, [sp, #0]
 8000444:	9101      	str	r1, [sp, #4]
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x84>
 8000448:	42a3      	cmp	r3, r4
 800044a:	d8bc      	bhi.n	80003c6 <__udivmoddi4+0xc2>
 800044c:	e783      	b.n	8000356 <__udivmoddi4+0x52>
 800044e:	4642      	mov	r2, r8
 8000450:	2320      	movs	r3, #32
 8000452:	2100      	movs	r1, #0
 8000454:	1a9b      	subs	r3, r3, r2
 8000456:	2200      	movs	r2, #0
 8000458:	9100      	str	r1, [sp, #0]
 800045a:	9201      	str	r2, [sp, #4]
 800045c:	2201      	movs	r2, #1
 800045e:	40da      	lsrs	r2, r3
 8000460:	9201      	str	r2, [sp, #4]
 8000462:	e786      	b.n	8000372 <__udivmoddi4+0x6e>
 8000464:	4642      	mov	r2, r8
 8000466:	2320      	movs	r3, #32
 8000468:	1a9b      	subs	r3, r3, r2
 800046a:	002a      	movs	r2, r5
 800046c:	4646      	mov	r6, r8
 800046e:	409a      	lsls	r2, r3
 8000470:	0023      	movs	r3, r4
 8000472:	40f3      	lsrs	r3, r6
 8000474:	4644      	mov	r4, r8
 8000476:	4313      	orrs	r3, r2
 8000478:	002a      	movs	r2, r5
 800047a:	40e2      	lsrs	r2, r4
 800047c:	001c      	movs	r4, r3
 800047e:	465b      	mov	r3, fp
 8000480:	0015      	movs	r5, r2
 8000482:	2b00      	cmp	r3, #0
 8000484:	dad4      	bge.n	8000430 <__udivmoddi4+0x12c>
 8000486:	4642      	mov	r2, r8
 8000488:	002f      	movs	r7, r5
 800048a:	2320      	movs	r3, #32
 800048c:	0026      	movs	r6, r4
 800048e:	4097      	lsls	r7, r2
 8000490:	1a9b      	subs	r3, r3, r2
 8000492:	40de      	lsrs	r6, r3
 8000494:	003b      	movs	r3, r7
 8000496:	4333      	orrs	r3, r6
 8000498:	e7cd      	b.n	8000436 <__udivmoddi4+0x132>
 800049a:	46c0      	nop			; (mov r8, r8)

0800049c <__gnu_ldivmod_helper>:
 800049c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049e:	46ce      	mov	lr, r9
 80004a0:	4647      	mov	r7, r8
 80004a2:	b580      	push	{r7, lr}
 80004a4:	4691      	mov	r9, r2
 80004a6:	4698      	mov	r8, r3
 80004a8:	0004      	movs	r4, r0
 80004aa:	000d      	movs	r5, r1
 80004ac:	f000 f83e 	bl	800052c <__divdi3>
 80004b0:	0007      	movs	r7, r0
 80004b2:	000e      	movs	r6, r1
 80004b4:	0002      	movs	r2, r0
 80004b6:	000b      	movs	r3, r1
 80004b8:	4648      	mov	r0, r9
 80004ba:	4641      	mov	r1, r8
 80004bc:	f7ff fef4 	bl	80002a8 <__aeabi_lmul>
 80004c0:	1a24      	subs	r4, r4, r0
 80004c2:	418d      	sbcs	r5, r1
 80004c4:	9b08      	ldr	r3, [sp, #32]
 80004c6:	0038      	movs	r0, r7
 80004c8:	0031      	movs	r1, r6
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	bcc0      	pop	{r6, r7}
 80004d0:	46b9      	mov	r9, r7
 80004d2:	46b0      	mov	r8, r6
 80004d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)

080004d8 <__clzsi2>:
 80004d8:	211c      	movs	r1, #28
 80004da:	2301      	movs	r3, #1
 80004dc:	041b      	lsls	r3, r3, #16
 80004de:	4298      	cmp	r0, r3
 80004e0:	d301      	bcc.n	80004e6 <__clzsi2+0xe>
 80004e2:	0c00      	lsrs	r0, r0, #16
 80004e4:	3910      	subs	r1, #16
 80004e6:	0a1b      	lsrs	r3, r3, #8
 80004e8:	4298      	cmp	r0, r3
 80004ea:	d301      	bcc.n	80004f0 <__clzsi2+0x18>
 80004ec:	0a00      	lsrs	r0, r0, #8
 80004ee:	3908      	subs	r1, #8
 80004f0:	091b      	lsrs	r3, r3, #4
 80004f2:	4298      	cmp	r0, r3
 80004f4:	d301      	bcc.n	80004fa <__clzsi2+0x22>
 80004f6:	0900      	lsrs	r0, r0, #4
 80004f8:	3904      	subs	r1, #4
 80004fa:	a202      	add	r2, pc, #8	; (adr r2, 8000504 <__clzsi2+0x2c>)
 80004fc:	5c10      	ldrb	r0, [r2, r0]
 80004fe:	1840      	adds	r0, r0, r1
 8000500:	4770      	bx	lr
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	02020304 	.word	0x02020304
 8000508:	01010101 	.word	0x01010101
	...

08000514 <__clzdi2>:
 8000514:	b510      	push	{r4, lr}
 8000516:	2900      	cmp	r1, #0
 8000518:	d103      	bne.n	8000522 <__clzdi2+0xe>
 800051a:	f7ff ffdd 	bl	80004d8 <__clzsi2>
 800051e:	3020      	adds	r0, #32
 8000520:	e002      	b.n	8000528 <__clzdi2+0x14>
 8000522:	0008      	movs	r0, r1
 8000524:	f7ff ffd8 	bl	80004d8 <__clzsi2>
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__divdi3>:
 800052c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800052e:	4657      	mov	r7, sl
 8000530:	464e      	mov	r6, r9
 8000532:	4645      	mov	r5, r8
 8000534:	46de      	mov	lr, fp
 8000536:	b5e0      	push	{r5, r6, r7, lr}
 8000538:	000f      	movs	r7, r1
 800053a:	0019      	movs	r1, r3
 800053c:	2300      	movs	r3, #0
 800053e:	0006      	movs	r6, r0
 8000540:	4698      	mov	r8, r3
 8000542:	0010      	movs	r0, r2
 8000544:	b083      	sub	sp, #12
 8000546:	2f00      	cmp	r7, #0
 8000548:	da07      	bge.n	800055a <__divdi3+0x2e>
 800054a:	0033      	movs	r3, r6
 800054c:	003c      	movs	r4, r7
 800054e:	2700      	movs	r7, #0
 8000550:	425e      	negs	r6, r3
 8000552:	41a7      	sbcs	r7, r4
 8000554:	2301      	movs	r3, #1
 8000556:	425b      	negs	r3, r3
 8000558:	4698      	mov	r8, r3
 800055a:	2900      	cmp	r1, #0
 800055c:	da07      	bge.n	800056e <__divdi3+0x42>
 800055e:	4643      	mov	r3, r8
 8000560:	43db      	mvns	r3, r3
 8000562:	000c      	movs	r4, r1
 8000564:	4698      	mov	r8, r3
 8000566:	0003      	movs	r3, r0
 8000568:	2100      	movs	r1, #0
 800056a:	4258      	negs	r0, r3
 800056c:	41a1      	sbcs	r1, r4
 800056e:	0034      	movs	r4, r6
 8000570:	003d      	movs	r5, r7
 8000572:	4682      	mov	sl, r0
 8000574:	4689      	mov	r9, r1
 8000576:	42b9      	cmp	r1, r7
 8000578:	d86a      	bhi.n	8000650 <__divdi3+0x124>
 800057a:	d067      	beq.n	800064c <__divdi3+0x120>
 800057c:	4649      	mov	r1, r9
 800057e:	4650      	mov	r0, sl
 8000580:	f7ff ffc8 	bl	8000514 <__clzdi2>
 8000584:	4683      	mov	fp, r0
 8000586:	0039      	movs	r1, r7
 8000588:	0030      	movs	r0, r6
 800058a:	f7ff ffc3 	bl	8000514 <__clzdi2>
 800058e:	465b      	mov	r3, fp
 8000590:	1a1b      	subs	r3, r3, r0
 8000592:	469c      	mov	ip, r3
 8000594:	3b20      	subs	r3, #32
 8000596:	469b      	mov	fp, r3
 8000598:	d46b      	bmi.n	8000672 <__divdi3+0x146>
 800059a:	4658      	mov	r0, fp
 800059c:	4651      	mov	r1, sl
 800059e:	4081      	lsls	r1, r0
 80005a0:	4660      	mov	r0, ip
 80005a2:	000b      	movs	r3, r1
 80005a4:	4651      	mov	r1, sl
 80005a6:	4081      	lsls	r1, r0
 80005a8:	000a      	movs	r2, r1
 80005aa:	42bb      	cmp	r3, r7
 80005ac:	d900      	bls.n	80005b0 <__divdi3+0x84>
 80005ae:	e072      	b.n	8000696 <__divdi3+0x16a>
 80005b0:	42bb      	cmp	r3, r7
 80005b2:	d100      	bne.n	80005b6 <__divdi3+0x8a>
 80005b4:	e079      	b.n	80006aa <__divdi3+0x17e>
 80005b6:	0034      	movs	r4, r6
 80005b8:	003d      	movs	r5, r7
 80005ba:	4659      	mov	r1, fp
 80005bc:	1aa4      	subs	r4, r4, r2
 80005be:	419d      	sbcs	r5, r3
 80005c0:	2900      	cmp	r1, #0
 80005c2:	da00      	bge.n	80005c6 <__divdi3+0x9a>
 80005c4:	e074      	b.n	80006b0 <__divdi3+0x184>
 80005c6:	2100      	movs	r1, #0
 80005c8:	2000      	movs	r0, #0
 80005ca:	2601      	movs	r6, #1
 80005cc:	9000      	str	r0, [sp, #0]
 80005ce:	9101      	str	r1, [sp, #4]
 80005d0:	4659      	mov	r1, fp
 80005d2:	408e      	lsls	r6, r1
 80005d4:	9601      	str	r6, [sp, #4]
 80005d6:	4661      	mov	r1, ip
 80005d8:	2601      	movs	r6, #1
 80005da:	408e      	lsls	r6, r1
 80005dc:	4661      	mov	r1, ip
 80005de:	9600      	str	r6, [sp, #0]
 80005e0:	2900      	cmp	r1, #0
 80005e2:	d05f      	beq.n	80006a4 <__divdi3+0x178>
 80005e4:	07d9      	lsls	r1, r3, #31
 80005e6:	0856      	lsrs	r6, r2, #1
 80005e8:	430e      	orrs	r6, r1
 80005ea:	085f      	lsrs	r7, r3, #1
 80005ec:	4661      	mov	r1, ip
 80005ee:	2201      	movs	r2, #1
 80005f0:	2300      	movs	r3, #0
 80005f2:	e00c      	b.n	800060e <__divdi3+0xe2>
 80005f4:	42af      	cmp	r7, r5
 80005f6:	d101      	bne.n	80005fc <__divdi3+0xd0>
 80005f8:	42a6      	cmp	r6, r4
 80005fa:	d80a      	bhi.n	8000612 <__divdi3+0xe6>
 80005fc:	1ba4      	subs	r4, r4, r6
 80005fe:	41bd      	sbcs	r5, r7
 8000600:	1924      	adds	r4, r4, r4
 8000602:	416d      	adcs	r5, r5
 8000604:	3901      	subs	r1, #1
 8000606:	18a4      	adds	r4, r4, r2
 8000608:	415d      	adcs	r5, r3
 800060a:	2900      	cmp	r1, #0
 800060c:	d006      	beq.n	800061c <__divdi3+0xf0>
 800060e:	42af      	cmp	r7, r5
 8000610:	d9f0      	bls.n	80005f4 <__divdi3+0xc8>
 8000612:	3901      	subs	r1, #1
 8000614:	1924      	adds	r4, r4, r4
 8000616:	416d      	adcs	r5, r5
 8000618:	2900      	cmp	r1, #0
 800061a:	d1f8      	bne.n	800060e <__divdi3+0xe2>
 800061c:	9800      	ldr	r0, [sp, #0]
 800061e:	9901      	ldr	r1, [sp, #4]
 8000620:	465b      	mov	r3, fp
 8000622:	1900      	adds	r0, r0, r4
 8000624:	4169      	adcs	r1, r5
 8000626:	2b00      	cmp	r3, #0
 8000628:	db4d      	blt.n	80006c6 <__divdi3+0x19a>
 800062a:	002e      	movs	r6, r5
 800062c:	002c      	movs	r4, r5
 800062e:	40de      	lsrs	r6, r3
 8000630:	4663      	mov	r3, ip
 8000632:	40dc      	lsrs	r4, r3
 8000634:	465b      	mov	r3, fp
 8000636:	2b00      	cmp	r3, #0
 8000638:	db55      	blt.n	80006e6 <__divdi3+0x1ba>
 800063a:	0034      	movs	r4, r6
 800063c:	409c      	lsls	r4, r3
 800063e:	0023      	movs	r3, r4
 8000640:	4664      	mov	r4, ip
 8000642:	40a6      	lsls	r6, r4
 8000644:	0032      	movs	r2, r6
 8000646:	1a80      	subs	r0, r0, r2
 8000648:	4199      	sbcs	r1, r3
 800064a:	e003      	b.n	8000654 <__divdi3+0x128>
 800064c:	42b0      	cmp	r0, r6
 800064e:	d995      	bls.n	800057c <__divdi3+0x50>
 8000650:	2000      	movs	r0, #0
 8000652:	2100      	movs	r1, #0
 8000654:	4643      	mov	r3, r8
 8000656:	2b00      	cmp	r3, #0
 8000658:	d004      	beq.n	8000664 <__divdi3+0x138>
 800065a:	0003      	movs	r3, r0
 800065c:	000c      	movs	r4, r1
 800065e:	2100      	movs	r1, #0
 8000660:	4258      	negs	r0, r3
 8000662:	41a1      	sbcs	r1, r4
 8000664:	b003      	add	sp, #12
 8000666:	bcf0      	pop	{r4, r5, r6, r7}
 8000668:	46bb      	mov	fp, r7
 800066a:	46b2      	mov	sl, r6
 800066c:	46a9      	mov	r9, r5
 800066e:	46a0      	mov	r8, r4
 8000670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000672:	4662      	mov	r2, ip
 8000674:	4648      	mov	r0, r9
 8000676:	2320      	movs	r3, #32
 8000678:	4651      	mov	r1, sl
 800067a:	4090      	lsls	r0, r2
 800067c:	1a9b      	subs	r3, r3, r2
 800067e:	40d9      	lsrs	r1, r3
 8000680:	0003      	movs	r3, r0
 8000682:	9100      	str	r1, [sp, #0]
 8000684:	9900      	ldr	r1, [sp, #0]
 8000686:	4660      	mov	r0, ip
 8000688:	430b      	orrs	r3, r1
 800068a:	4651      	mov	r1, sl
 800068c:	4081      	lsls	r1, r0
 800068e:	000a      	movs	r2, r1
 8000690:	42bb      	cmp	r3, r7
 8000692:	d800      	bhi.n	8000696 <__divdi3+0x16a>
 8000694:	e78c      	b.n	80005b0 <__divdi3+0x84>
 8000696:	2100      	movs	r1, #0
 8000698:	2000      	movs	r0, #0
 800069a:	9000      	str	r0, [sp, #0]
 800069c:	9101      	str	r1, [sp, #4]
 800069e:	4661      	mov	r1, ip
 80006a0:	2900      	cmp	r1, #0
 80006a2:	d19f      	bne.n	80005e4 <__divdi3+0xb8>
 80006a4:	9800      	ldr	r0, [sp, #0]
 80006a6:	9901      	ldr	r1, [sp, #4]
 80006a8:	e7d4      	b.n	8000654 <__divdi3+0x128>
 80006aa:	42b1      	cmp	r1, r6
 80006ac:	d8f3      	bhi.n	8000696 <__divdi3+0x16a>
 80006ae:	e782      	b.n	80005b6 <__divdi3+0x8a>
 80006b0:	4661      	mov	r1, ip
 80006b2:	2620      	movs	r6, #32
 80006b4:	2701      	movs	r7, #1
 80006b6:	1a76      	subs	r6, r6, r1
 80006b8:	2000      	movs	r0, #0
 80006ba:	2100      	movs	r1, #0
 80006bc:	40f7      	lsrs	r7, r6
 80006be:	9000      	str	r0, [sp, #0]
 80006c0:	9101      	str	r1, [sp, #4]
 80006c2:	9701      	str	r7, [sp, #4]
 80006c4:	e787      	b.n	80005d6 <__divdi3+0xaa>
 80006c6:	4662      	mov	r2, ip
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	002a      	movs	r2, r5
 80006ce:	409a      	lsls	r2, r3
 80006d0:	0026      	movs	r6, r4
 80006d2:	0013      	movs	r3, r2
 80006d4:	4662      	mov	r2, ip
 80006d6:	40d6      	lsrs	r6, r2
 80006d8:	002c      	movs	r4, r5
 80006da:	431e      	orrs	r6, r3
 80006dc:	4663      	mov	r3, ip
 80006de:	40dc      	lsrs	r4, r3
 80006e0:	465b      	mov	r3, fp
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	daa9      	bge.n	800063a <__divdi3+0x10e>
 80006e6:	4662      	mov	r2, ip
 80006e8:	2320      	movs	r3, #32
 80006ea:	0035      	movs	r5, r6
 80006ec:	4094      	lsls	r4, r2
 80006ee:	1a9b      	subs	r3, r3, r2
 80006f0:	40dd      	lsrs	r5, r3
 80006f2:	0023      	movs	r3, r4
 80006f4:	432b      	orrs	r3, r5
 80006f6:	e7a3      	b.n	8000640 <__divdi3+0x114>

080006f8 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2203      	movs	r2, #3
 8000704:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_16;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2204      	movs	r2, #4
 800070a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_ULTRA_HIGH_RES;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2205      	movs	r2, #5
 8000710:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_ULTRA_HIGH_RES;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2205      	movs	r2, #5
 8000716:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2203      	movs	r2, #3
 800071c:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_62;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2201      	movs	r2, #1
 8000722:	715a      	strb	r2, [r3, #5]
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	b002      	add	sp, #8
 800072a:	bd80      	pop	{r7, pc}

0800072c <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b08b      	sub	sp, #44	; 0x2c
 8000730:	af04      	add	r7, sp, #16
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	607a      	str	r2, [r7, #4]
 8000736:	240b      	movs	r4, #11
 8000738:	193b      	adds	r3, r7, r4
 800073a:	1c0a      	adds	r2, r1, #0
 800073c:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000742:	2116      	movs	r1, #22
 8000744:	187a      	adds	r2, r7, r1
 8000746:	18db      	adds	r3, r3, r3
 8000748:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800074e:	193b      	adds	r3, r7, r4
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	b29a      	uxth	r2, r3
 8000754:	187b      	adds	r3, r7, r1
 8000756:	8819      	ldrh	r1, [r3, #0]
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <read_register16+0x6c>)
 800075a:	9302      	str	r3, [sp, #8]
 800075c:	2302      	movs	r3, #2
 800075e:	9301      	str	r3, [sp, #4]
 8000760:	2414      	movs	r4, #20
 8000762:	193b      	adds	r3, r7, r4
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	2301      	movs	r3, #1
 8000768:	f001 fcd4 	bl	8002114 <HAL_I2C_Mem_Read>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d10e      	bne.n	800078e <read_register16+0x62>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000770:	0021      	movs	r1, r4
 8000772:	187b      	adds	r3, r7, r1
 8000774:	785b      	ldrb	r3, [r3, #1]
 8000776:	021b      	lsls	r3, r3, #8
 8000778:	b21a      	sxth	r2, r3
 800077a:	187b      	adds	r3, r7, r1
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	b21b      	sxth	r3, r3
 8000780:	4313      	orrs	r3, r2
 8000782:	b21b      	sxth	r3, r3
 8000784:	b29a      	uxth	r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	801a      	strh	r2, [r3, #0]
		return true;
 800078a:	2301      	movs	r3, #1
 800078c:	e000      	b.n	8000790 <read_register16+0x64>
	} else
		return false;
 800078e:	2300      	movs	r3, #0

}
 8000790:	0018      	movs	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	b007      	add	sp, #28
 8000796:	bd90      	pop	{r4, r7, pc}
 8000798:	00001388 	.word	0x00001388

0800079c <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 800079c:	b5b0      	push	{r4, r5, r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af04      	add	r7, sp, #16
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	0008      	movs	r0, r1
 80007a6:	607a      	str	r2, [r7, #4]
 80007a8:	0019      	movs	r1, r3
 80007aa:	240b      	movs	r4, #11
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	1c02      	adds	r2, r0, #0
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	250a      	movs	r5, #10
 80007b4:	197b      	adds	r3, r7, r5
 80007b6:	1c0a      	adds	r2, r1, #0
 80007b8:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80007be:	2116      	movs	r1, #22
 80007c0:	187a      	adds	r2, r7, r1
 80007c2:	18db      	adds	r3, r3, r3
 80007c4:	8013      	strh	r3, [r2, #0]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	b29c      	uxth	r4, r3
 80007d0:	197b      	adds	r3, r7, r5
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	187a      	adds	r2, r7, r1
 80007d8:	8811      	ldrh	r1, [r2, #0]
 80007da:	4a09      	ldr	r2, [pc, #36]	; (8000800 <read_data+0x64>)
 80007dc:	9202      	str	r2, [sp, #8]
 80007de:	9301      	str	r3, [sp, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2301      	movs	r3, #1
 80007e6:	0022      	movs	r2, r4
 80007e8:	f001 fc94 	bl	8002114 <HAL_I2C_Mem_Read>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d101      	bne.n	80007f4 <read_data+0x58>
		return 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	e000      	b.n	80007f6 <read_data+0x5a>
	else
		return 1;
 80007f4:	2301      	movs	r3, #1

}
 80007f6:	0018      	movs	r0, r3
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b006      	add	sp, #24
 80007fc:	bdb0      	pop	{r4, r5, r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	00001388 	.word	0x00001388

08000804 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2188      	movs	r1, #136	; 0x88
 8000812:	0018      	movs	r0, r3
 8000814:	f7ff ff8a 	bl	800072c <read_register16>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d100      	bne.n	800081e <read_calibration_data+0x1a>
 800081c:	e06d      	b.n	80008fa <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	1c9a      	adds	r2, r3, #2
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	218a      	movs	r1, #138	; 0x8a
 8000826:	0018      	movs	r0, r3
 8000828:	f7ff ff80 	bl	800072c <read_register16>
 800082c:	1e03      	subs	r3, r0, #0
 800082e:	d100      	bne.n	8000832 <read_calibration_data+0x2e>
 8000830:	e063      	b.n	80008fa <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	1d1a      	adds	r2, r3, #4
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	218c      	movs	r1, #140	; 0x8c
 800083a:	0018      	movs	r0, r3
 800083c:	f7ff ff76 	bl	800072c <read_register16>
 8000840:	1e03      	subs	r3, r0, #0
 8000842:	d05a      	beq.n	80008fa <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	1d9a      	adds	r2, r3, #6
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	218e      	movs	r1, #142	; 0x8e
 800084c:	0018      	movs	r0, r3
 800084e:	f7ff ff6d 	bl	800072c <read_register16>
 8000852:	1e03      	subs	r3, r0, #0
 8000854:	d051      	beq.n	80008fa <read_calibration_data+0xf6>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3308      	adds	r3, #8
 800085a:	001a      	movs	r2, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2190      	movs	r1, #144	; 0x90
 8000860:	0018      	movs	r0, r3
 8000862:	f7ff ff63 	bl	800072c <read_register16>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d047      	beq.n	80008fa <read_calibration_data+0xf6>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	330a      	adds	r3, #10
 800086e:	001a      	movs	r2, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2192      	movs	r1, #146	; 0x92
 8000874:	0018      	movs	r0, r3
 8000876:	f7ff ff59 	bl	800072c <read_register16>
 800087a:	1e03      	subs	r3, r0, #0
 800087c:	d03d      	beq.n	80008fa <read_calibration_data+0xf6>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	330c      	adds	r3, #12
 8000882:	001a      	movs	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2194      	movs	r1, #148	; 0x94
 8000888:	0018      	movs	r0, r3
 800088a:	f7ff ff4f 	bl	800072c <read_register16>
 800088e:	1e03      	subs	r3, r0, #0
 8000890:	d033      	beq.n	80008fa <read_calibration_data+0xf6>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	330e      	adds	r3, #14
 8000896:	001a      	movs	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2196      	movs	r1, #150	; 0x96
 800089c:	0018      	movs	r0, r3
 800089e:	f7ff ff45 	bl	800072c <read_register16>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d029      	beq.n	80008fa <read_calibration_data+0xf6>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3310      	adds	r3, #16
 80008aa:	001a      	movs	r2, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2198      	movs	r1, #152	; 0x98
 80008b0:	0018      	movs	r0, r3
 80008b2:	f7ff ff3b 	bl	800072c <read_register16>
 80008b6:	1e03      	subs	r3, r0, #0
 80008b8:	d01f      	beq.n	80008fa <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	3312      	adds	r3, #18
 80008be:	001a      	movs	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	219a      	movs	r1, #154	; 0x9a
 80008c4:	0018      	movs	r0, r3
 80008c6:	f7ff ff31 	bl	800072c <read_register16>
 80008ca:	1e03      	subs	r3, r0, #0
 80008cc:	d015      	beq.n	80008fa <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	3314      	adds	r3, #20
 80008d2:	001a      	movs	r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	219c      	movs	r1, #156	; 0x9c
 80008d8:	0018      	movs	r0, r3
 80008da:	f7ff ff27 	bl	800072c <read_register16>
 80008de:	1e03      	subs	r3, r0, #0
 80008e0:	d00b      	beq.n	80008fa <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3316      	adds	r3, #22
 80008e6:	001a      	movs	r2, r3
			&& read_register16(dev, 0x9e,
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	219e      	movs	r1, #158	; 0x9e
 80008ec:	0018      	movs	r0, r3
 80008ee:	f7ff ff1d 	bl	800072c <read_register16>
 80008f2:	1e03      	subs	r3, r0, #0
 80008f4:	d001      	beq.n	80008fa <read_calibration_data+0xf6>

		return true;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e000      	b.n	80008fc <read_calibration_data+0xf8>
	}

	return false;
 80008fa:	2300      	movs	r3, #0
}
 80008fc:	0018      	movs	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	b002      	add	sp, #8
 8000902:	bd80      	pop	{r7, pc}

08000904 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8000904:	b5b0      	push	{r4, r5, r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3318      	adds	r3, #24
 8000910:	001a      	movs	r2, r3
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	2301      	movs	r3, #1
 8000916:	21a1      	movs	r1, #161	; 0xa1
 8000918:	f7ff ff40 	bl	800079c <read_data>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d14b      	bne.n	80009b8 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	331a      	adds	r3, #26
 8000924:	001a      	movs	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	21e1      	movs	r1, #225	; 0xe1
 800092a:	0018      	movs	r0, r3
 800092c:	f7ff fefe 	bl	800072c <read_register16>
 8000930:	1e03      	subs	r3, r0, #0
 8000932:	d041      	beq.n	80009b8 <read_hum_calibration_data+0xb4>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	331c      	adds	r3, #28
 8000938:	001a      	movs	r2, r3
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	2301      	movs	r3, #1
 800093e:	21e3      	movs	r1, #227	; 0xe3
 8000940:	f7ff ff2c 	bl	800079c <read_data>
 8000944:	1e03      	subs	r3, r0, #0
 8000946:	d137      	bne.n	80009b8 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe4, &h4)
 8000948:	240e      	movs	r4, #14
 800094a:	193a      	adds	r2, r7, r4
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	21e4      	movs	r1, #228	; 0xe4
 8000950:	0018      	movs	r0, r3
 8000952:	f7ff feeb 	bl	800072c <read_register16>
 8000956:	1e03      	subs	r3, r0, #0
 8000958:	d02e      	beq.n	80009b8 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe5, &h5)
 800095a:	250c      	movs	r5, #12
 800095c:	197a      	adds	r2, r7, r5
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	21e5      	movs	r1, #229	; 0xe5
 8000962:	0018      	movs	r0, r3
 8000964:	f7ff fee2 	bl	800072c <read_register16>
 8000968:	1e03      	subs	r3, r0, #0
 800096a:	d025      	beq.n	80009b8 <read_hum_calibration_data+0xb4>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3322      	adds	r3, #34	; 0x22
 8000970:	001a      	movs	r2, r3
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	2301      	movs	r3, #1
 8000976:	21e7      	movs	r1, #231	; 0xe7
 8000978:	f7ff ff10 	bl	800079c <read_data>
 800097c:	1e03      	subs	r3, r0, #0
 800097e:	d11b      	bne.n	80009b8 <read_hum_calibration_data+0xb4>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8000980:	193b      	adds	r3, r7, r4
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	011b      	lsls	r3, r3, #4
 8000986:	b21a      	sxth	r2, r3
 8000988:	23ff      	movs	r3, #255	; 0xff
 800098a:	011b      	lsls	r3, r3, #4
 800098c:	4013      	ands	r3, r2
 800098e:	b21a      	sxth	r2, r3
 8000990:	193b      	adds	r3, r7, r4
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	121b      	asrs	r3, r3, #8
 8000996:	b21b      	sxth	r3, r3
 8000998:	210f      	movs	r1, #15
 800099a:	400b      	ands	r3, r1
 800099c:	b21b      	sxth	r3, r3
 800099e:	4313      	orrs	r3, r2
 80009a0:	b21a      	sxth	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80009a6:	197b      	adds	r3, r7, r5
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	091b      	lsrs	r3, r3, #4
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	b21a      	sxth	r2, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	841a      	strh	r2, [r3, #32]

		return true;
 80009b4:	2301      	movs	r3, #1
 80009b6:	e000      	b.n	80009ba <read_hum_calibration_data+0xb6>
	}

	return false;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	0018      	movs	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	b004      	add	sp, #16
 80009c0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080009c4 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af04      	add	r7, sp, #16
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	0008      	movs	r0, r1
 80009ce:	0011      	movs	r1, r2
 80009d0:	1cfb      	adds	r3, r7, #3
 80009d2:	1c02      	adds	r2, r0, #0
 80009d4:	701a      	strb	r2, [r3, #0]
 80009d6:	1cbb      	adds	r3, r7, #2
 80009d8:	1c0a      	adds	r2, r1, #0
 80009da:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80009e0:	210e      	movs	r1, #14
 80009e2:	187a      	adds	r2, r7, r1
 80009e4:	18db      	adds	r3, r3, r3
 80009e6:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80009ec:	1cfb      	adds	r3, r7, #3
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	8819      	ldrh	r1, [r3, #0]
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <write_register8+0x58>)
 80009f8:	9302      	str	r3, [sp, #8]
 80009fa:	2301      	movs	r3, #1
 80009fc:	9301      	str	r3, [sp, #4]
 80009fe:	1cbb      	adds	r3, r7, #2
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	2301      	movs	r3, #1
 8000a04:	f001 fa58 	bl	8001eb8 <HAL_I2C_Mem_Write>
 8000a08:	1e03      	subs	r3, r0, #0
 8000a0a:	d101      	bne.n	8000a10 <write_register8+0x4c>
		return false;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e000      	b.n	8000a12 <write_register8+0x4e>
	else
		return true;
 8000a10:	2301      	movs	r3, #1
}
 8000a12:	0018      	movs	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b004      	add	sp, #16
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	00002710 	.word	0x00002710

08000a20 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000a2e:	2b76      	cmp	r3, #118	; 0x76
 8000a30:	d005      	beq.n	8000a3e <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000a36:	2b77      	cmp	r3, #119	; 0x77
 8000a38:	d001      	beq.n	8000a3e <bmp280_init+0x1e>

		return false;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e0a3      	b.n	8000b86 <bmp280_init+0x166>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	3332      	adds	r3, #50	; 0x32
 8000a42:	001a      	movs	r2, r3
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	2301      	movs	r3, #1
 8000a48:	21d0      	movs	r1, #208	; 0xd0
 8000a4a:	f7ff fea7 	bl	800079c <read_data>
 8000a4e:	1e03      	subs	r3, r0, #0
 8000a50:	d001      	beq.n	8000a56 <bmp280_init+0x36>
		return false;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e097      	b.n	8000b86 <bmp280_init+0x166>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2232      	movs	r2, #50	; 0x32
 8000a5a:	5c9b      	ldrb	r3, [r3, r2]
 8000a5c:	2b58      	cmp	r3, #88	; 0x58
 8000a5e:	d006      	beq.n	8000a6e <bmp280_init+0x4e>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2232      	movs	r2, #50	; 0x32
 8000a64:	5c9b      	ldrb	r3, [r3, r2]
 8000a66:	2b60      	cmp	r3, #96	; 0x60
 8000a68:	d001      	beq.n	8000a6e <bmp280_init+0x4e>

		return false;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e08b      	b.n	8000b86 <bmp280_init+0x166>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	22b6      	movs	r2, #182	; 0xb6
 8000a72:	21e0      	movs	r1, #224	; 0xe0
 8000a74:	0018      	movs	r0, r3
 8000a76:	f7ff ffa5 	bl	80009c4 <write_register8>
 8000a7a:	1e03      	subs	r3, r0, #0
 8000a7c:	d001      	beq.n	8000a82 <bmp280_init+0x62>
		return false;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e081      	b.n	8000b86 <bmp280_init+0x166>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8000a82:	240c      	movs	r4, #12
 8000a84:	193a      	adds	r2, r7, r4
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	2301      	movs	r3, #1
 8000a8a:	21f3      	movs	r1, #243	; 0xf3
 8000a8c:	f7ff fe86 	bl	800079c <read_data>
 8000a90:	1e03      	subs	r3, r0, #0
 8000a92:	d1f6      	bne.n	8000a82 <bmp280_init+0x62>
				&& (status & 1) == 0)
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	001a      	movs	r2, r3
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	d1f0      	bne.n	8000a82 <bmp280_init+0x62>
			break;
	}

	if (!read_calibration_data(dev)) {
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f7ff feae 	bl	8000804 <read_calibration_data>
 8000aa8:	0003      	movs	r3, r0
 8000aaa:	001a      	movs	r2, r3
 8000aac:	2301      	movs	r3, #1
 8000aae:	4053      	eors	r3, r2
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d100      	bne.n	8000ab8 <bmp280_init+0x98>
 8000ab6:	e001      	b.n	8000abc <bmp280_init+0x9c>
		return false;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	e064      	b.n	8000b86 <bmp280_init+0x166>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2232      	movs	r2, #50	; 0x32
 8000ac0:	5c9b      	ldrb	r3, [r3, r2]
 8000ac2:	2b60      	cmp	r3, #96	; 0x60
 8000ac4:	d10c      	bne.n	8000ae0 <bmp280_init+0xc0>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f7ff ff1b 	bl	8000904 <read_hum_calibration_data>
 8000ace:	0003      	movs	r3, r0
 8000ad0:	001a      	movs	r2, r3
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	4053      	eors	r3, r2
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <bmp280_init+0xc0>
		return false;
 8000adc:	2300      	movs	r3, #0
 8000ade:	e052      	b.n	8000b86 <bmp280_init+0x166>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	795b      	ldrb	r3, [r3, #5]
 8000ae4:	015b      	lsls	r3, r3, #5
 8000ae6:	b25a      	sxtb	r2, r3
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	785b      	ldrb	r3, [r3, #1]
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	b25b      	sxtb	r3, r3
 8000af0:	4313      	orrs	r3, r2
 8000af2:	b25a      	sxtb	r2, r3
 8000af4:	210f      	movs	r1, #15
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	701a      	strb	r2, [r3, #0]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	781a      	ldrb	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	21f5      	movs	r1, #245	; 0xf5
 8000b02:	0018      	movs	r0, r3
 8000b04:	f7ff ff5e 	bl	80009c4 <write_register8>
 8000b08:	1e03      	subs	r3, r0, #0
 8000b0a:	d001      	beq.n	8000b10 <bmp280_init+0xf0>
		return false;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	e03a      	b.n	8000b86 <bmp280_init+0x166>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d102      	bne.n	8000b1e <bmp280_init+0xfe>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	78db      	ldrb	r3, [r3, #3]
 8000b22:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8000b24:	b25a      	sxtb	r2, r3
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	789b      	ldrb	r3, [r3, #2]
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	b25b      	sxtb	r3, r3
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	b25a      	sxtb	r2, r3
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b25b      	sxtb	r3, r3
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	b25a      	sxtb	r2, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000b3c:	230e      	movs	r3, #14
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	701a      	strb	r2, [r3, #0]

	if (dev->id == BME280_CHIP_ID) {
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2232      	movs	r2, #50	; 0x32
 8000b46:	5c9b      	ldrb	r3, [r3, r2]
 8000b48:	2b60      	cmp	r3, #96	; 0x60
 8000b4a:	d10f      	bne.n	8000b6c <bmp280_init+0x14c>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8000b4c:	210d      	movs	r1, #13
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	683a      	ldr	r2, [r7, #0]
 8000b52:	7912      	ldrb	r2, [r2, #4]
 8000b54:	701a      	strb	r2, [r3, #0]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	781a      	ldrb	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	21f2      	movs	r1, #242	; 0xf2
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f7ff ff30 	bl	80009c4 <write_register8>
 8000b64:	1e03      	subs	r3, r0, #0
 8000b66:	d001      	beq.n	8000b6c <bmp280_init+0x14c>
			return false;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	e00c      	b.n	8000b86 <bmp280_init+0x166>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8000b6c:	230e      	movs	r3, #14
 8000b6e:	18fb      	adds	r3, r7, r3
 8000b70:	781a      	ldrb	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	21f4      	movs	r1, #244	; 0xf4
 8000b76:	0018      	movs	r0, r3
 8000b78:	f7ff ff24 	bl	80009c4 <write_register8>
 8000b7c:	1e03      	subs	r3, r0, #0
 8000b7e:	d001      	beq.n	8000b84 <bmp280_init+0x164>
		return false;
 8000b80:	2300      	movs	r3, #0
 8000b82:	e000      	b.n	8000b86 <bmp280_init+0x166>
	}

	return true;
 8000b84:	2301      	movs	r3, #1
}
 8000b86:	0018      	movs	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b005      	add	sp, #20
 8000b8c:	bd90      	pop	{r4, r7, pc}

08000b8e <bmp280_is_measuring>:
		return false;
	}
	return true;
}

bool bmp280_is_measuring(BMP280_HandleTypedef *dev) {
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b084      	sub	sp, #16
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
	uint8_t status;
	if (read_data(dev, BMP280_REG_STATUS, &status, 1))
 8000b96:	230f      	movs	r3, #15
 8000b98:	18fa      	adds	r2, r7, r3
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	21f3      	movs	r1, #243	; 0xf3
 8000ba0:	f7ff fdfc 	bl	800079c <read_data>
 8000ba4:	1e03      	subs	r3, r0, #0
 8000ba6:	d001      	beq.n	8000bac <bmp280_is_measuring+0x1e>
		return false;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	e009      	b.n	8000bc0 <bmp280_is_measuring+0x32>
	if (status & (1 << 3)) {
 8000bac:	230f      	movs	r3, #15
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	001a      	movs	r2, r3
 8000bb4:	2308      	movs	r3, #8
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	d001      	beq.n	8000bbe <bmp280_is_measuring+0x30>
		return true;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e000      	b.n	8000bc0 <bmp280_is_measuring+0x32>
	}
	return false;
 8000bbe:	2300      	movs	r3, #0
}
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b004      	add	sp, #16
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	10da      	asrs	r2, r3, #3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8000be0:	68fa      	ldr	r2, [r7, #12]
 8000be2:	2102      	movs	r1, #2
 8000be4:	5e52      	ldrsh	r2, [r2, r1]
 8000be6:	4353      	muls	r3, r2
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000be8:	12db      	asrs	r3, r3, #11
 8000bea:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	111b      	asrs	r3, r3, #4
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	8812      	ldrh	r2, [r2, #0]
 8000bf4:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	1112      	asrs	r2, r2, #4
 8000bfa:	68f9      	ldr	r1, [r7, #12]
 8000bfc:	8809      	ldrh	r1, [r1, #0]
 8000bfe:	1a52      	subs	r2, r2, r1
 8000c00:	4353      	muls	r3, r2
 8000c02:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8000c04:	68fa      	ldr	r2, [r7, #12]
 8000c06:	2104      	movs	r1, #4
 8000c08:	5e52      	ldrsh	r2, [r2, r1]
 8000c0a:	4353      	muls	r3, r2
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000c0c:	139b      	asrs	r3, r3, #14
 8000c0e:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	18d2      	adds	r2, r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	0013      	movs	r3, r2
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	189b      	adds	r3, r3, r2
 8000c24:	3380      	adds	r3, #128	; 0x80
 8000c26:	121b      	asrs	r3, r3, #8
}
 8000c28:	0018      	movs	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b006      	add	sp, #24
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8000c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c32:	b0af      	sub	sp, #188	; 0xbc
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	239c      	movs	r3, #156	; 0x9c
 8000c38:	18fe      	adds	r6, r7, r3
 8000c3a:	6030      	str	r0, [r6, #0]
 8000c3c:	2098      	movs	r0, #152	; 0x98
 8000c3e:	1838      	adds	r0, r7, r0
 8000c40:	6001      	str	r1, [r0, #0]
 8000c42:	2194      	movs	r1, #148	; 0x94
 8000c44:	1878      	adds	r0, r7, r1
 8000c46:	6002      	str	r2, [r0, #0]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8000c48:	187a      	adds	r2, r7, r1
 8000c4a:	6813      	ldr	r3, [r2, #0]
 8000c4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8000c4e:	17db      	asrs	r3, r3, #31
 8000c50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000c52:	4ace      	ldr	r2, [pc, #824]	; (8000f8c <compensate_pressure+0x35c>)
 8000c54:	2301      	movs	r3, #1
 8000c56:	425b      	negs	r3, r3
 8000c58:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000c5a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000c5c:	1880      	adds	r0, r0, r2
 8000c5e:	4159      	adcs	r1, r3
 8000c60:	0002      	movs	r2, r0
 8000c62:	000b      	movs	r3, r1
 8000c64:	26b0      	movs	r6, #176	; 0xb0
 8000c66:	19b9      	adds	r1, r7, r6
 8000c68:	600a      	str	r2, [r1, #0]
 8000c6a:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8000c6c:	19ba      	adds	r2, r7, r6
 8000c6e:	6853      	ldr	r3, [r2, #4]
 8000c70:	6812      	ldr	r2, [r2, #0]
 8000c72:	19b9      	adds	r1, r7, r6
 8000c74:	6808      	ldr	r0, [r1, #0]
 8000c76:	6849      	ldr	r1, [r1, #4]
 8000c78:	f7ff fb16 	bl	80002a8 <__aeabi_lmul>
 8000c7c:	0002      	movs	r2, r0
 8000c7e:	000b      	movs	r3, r1
 8000c80:	0010      	movs	r0, r2
 8000c82:	0019      	movs	r1, r3
 8000c84:	239c      	movs	r3, #156	; 0x9c
 8000c86:	18fa      	adds	r2, r7, r3
 8000c88:	6813      	ldr	r3, [r2, #0]
 8000c8a:	2210      	movs	r2, #16
 8000c8c:	5e9b      	ldrsh	r3, [r3, r2]
 8000c8e:	653b      	str	r3, [r7, #80]	; 0x50
 8000c90:	17db      	asrs	r3, r3, #31
 8000c92:	657b      	str	r3, [r7, #84]	; 0x54
 8000c94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c98:	f7ff fb06 	bl	80002a8 <__aeabi_lmul>
 8000c9c:	0002      	movs	r2, r0
 8000c9e:	000b      	movs	r3, r1
 8000ca0:	21a8      	movs	r1, #168	; 0xa8
 8000ca2:	1878      	adds	r0, r7, r1
 8000ca4:	6002      	str	r2, [r0, #0]
 8000ca6:	6043      	str	r3, [r0, #4]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8000ca8:	239c      	movs	r3, #156	; 0x9c
 8000caa:	18fa      	adds	r2, r7, r3
 8000cac:	6813      	ldr	r3, [r2, #0]
 8000cae:	220e      	movs	r2, #14
 8000cb0:	5e9b      	ldrsh	r3, [r3, r2]
 8000cb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8000cb4:	17db      	asrs	r3, r3, #31
 8000cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000cb8:	19ba      	adds	r2, r7, r6
 8000cba:	6853      	ldr	r3, [r2, #4]
 8000cbc:	6812      	ldr	r2, [r2, #0]
 8000cbe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000cc0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000cc2:	f7ff faf1 	bl	80002a8 <__aeabi_lmul>
 8000cc6:	0002      	movs	r2, r0
 8000cc8:	000b      	movs	r3, r1
 8000cca:	0bd1      	lsrs	r1, r2, #15
 8000ccc:	045d      	lsls	r5, r3, #17
 8000cce:	430d      	orrs	r5, r1
 8000cd0:	0454      	lsls	r4, r2, #17
 8000cd2:	21a8      	movs	r1, #168	; 0xa8
 8000cd4:	187a      	adds	r2, r7, r1
 8000cd6:	6853      	ldr	r3, [r2, #4]
 8000cd8:	6812      	ldr	r2, [r2, #0]
 8000cda:	1912      	adds	r2, r2, r4
 8000cdc:	416b      	adcs	r3, r5
 8000cde:	1878      	adds	r0, r7, r1
 8000ce0:	6002      	str	r2, [r0, #0]
 8000ce2:	6043      	str	r3, [r0, #4]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8000ce4:	259c      	movs	r5, #156	; 0x9c
 8000ce6:	197b      	adds	r3, r7, r5
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	220c      	movs	r2, #12
 8000cec:	5e9b      	ldrsh	r3, [r3, r2]
 8000cee:	643b      	str	r3, [r7, #64]	; 0x40
 8000cf0:	17db      	asrs	r3, r3, #31
 8000cf2:	647b      	str	r3, [r7, #68]	; 0x44
 8000cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000cf6:	00db      	lsls	r3, r3, #3
 8000cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cfe:	000c      	movs	r4, r1
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000d08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000d0a:	1812      	adds	r2, r2, r0
 8000d0c:	414b      	adcs	r3, r1
 8000d0e:	1939      	adds	r1, r7, r4
 8000d10:	600a      	str	r2, [r1, #0]
 8000d12:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000d14:	0034      	movs	r4, r6
 8000d16:	193b      	adds	r3, r7, r4
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	1939      	adds	r1, r7, r4
 8000d1e:	6808      	ldr	r0, [r1, #0]
 8000d20:	6849      	ldr	r1, [r1, #4]
 8000d22:	f7ff fac1 	bl	80002a8 <__aeabi_lmul>
 8000d26:	0002      	movs	r2, r0
 8000d28:	000b      	movs	r3, r1
 8000d2a:	0010      	movs	r0, r2
 8000d2c:	0019      	movs	r1, r3
 8000d2e:	197b      	adds	r3, r7, r5
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	220a      	movs	r2, #10
 8000d34:	5e9b      	ldrsh	r3, [r3, r2]
 8000d36:	633b      	str	r3, [r7, #48]	; 0x30
 8000d38:	17db      	asrs	r3, r3, #31
 8000d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8000d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d40:	f7ff fab2 	bl	80002a8 <__aeabi_lmul>
 8000d44:	0002      	movs	r2, r0
 8000d46:	000b      	movs	r3, r1
 8000d48:	0619      	lsls	r1, r3, #24
 8000d4a:	468c      	mov	ip, r1
 8000d4c:	0a10      	lsrs	r0, r2, #8
 8000d4e:	2688      	movs	r6, #136	; 0x88
 8000d50:	19b9      	adds	r1, r7, r6
 8000d52:	6008      	str	r0, [r1, #0]
 8000d54:	19b8      	adds	r0, r7, r6
 8000d56:	6800      	ldr	r0, [r0, #0]
 8000d58:	4661      	mov	r1, ip
 8000d5a:	4308      	orrs	r0, r1
 8000d5c:	19b9      	adds	r1, r7, r6
 8000d5e:	6008      	str	r0, [r1, #0]
 8000d60:	121b      	asrs	r3, r3, #8
 8000d62:	228c      	movs	r2, #140	; 0x8c
 8000d64:	18ba      	adds	r2, r7, r2
 8000d66:	6013      	str	r3, [r2, #0]
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8000d68:	197b      	adds	r3, r7, r5
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2208      	movs	r2, #8
 8000d6e:	5e9b      	ldrsh	r3, [r3, r2]
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d72:	17db      	asrs	r3, r3, #31
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000d80:	f7ff fa92 	bl	80002a8 <__aeabi_lmul>
 8000d84:	0002      	movs	r2, r0
 8000d86:	000b      	movs	r3, r1
 8000d88:	0d11      	lsrs	r1, r2, #20
 8000d8a:	468c      	mov	ip, r1
 8000d8c:	0318      	lsls	r0, r3, #12
 8000d8e:	2184      	movs	r1, #132	; 0x84
 8000d90:	1879      	adds	r1, r7, r1
 8000d92:	6008      	str	r0, [r1, #0]
 8000d94:	2084      	movs	r0, #132	; 0x84
 8000d96:	1839      	adds	r1, r7, r0
 8000d98:	6808      	ldr	r0, [r1, #0]
 8000d9a:	4661      	mov	r1, ip
 8000d9c:	4308      	orrs	r0, r1
 8000d9e:	2184      	movs	r1, #132	; 0x84
 8000da0:	1879      	adds	r1, r7, r1
 8000da2:	6008      	str	r0, [r1, #0]
 8000da4:	0313      	lsls	r3, r2, #12
 8000da6:	2180      	movs	r1, #128	; 0x80
 8000da8:	187a      	adds	r2, r7, r1
 8000daa:	6013      	str	r3, [r2, #0]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000dac:	19bb      	adds	r3, r7, r6
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	1879      	adds	r1, r7, r1
 8000db4:	6808      	ldr	r0, [r1, #0]
 8000db6:	6849      	ldr	r1, [r1, #4]
 8000db8:	1812      	adds	r2, r2, r0
 8000dba:	414b      	adcs	r3, r1
 8000dbc:	1939      	adds	r1, r7, r4
 8000dbe:	600a      	str	r2, [r1, #0]
 8000dc0:	604b      	str	r3, [r1, #4]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8000dc2:	193b      	adds	r3, r7, r4
 8000dc4:	6818      	ldr	r0, [r3, #0]
 8000dc6:	6859      	ldr	r1, [r3, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	021b      	lsls	r3, r3, #8
 8000dce:	1880      	adds	r0, r0, r2
 8000dd0:	4159      	adcs	r1, r3
 8000dd2:	197b      	adds	r3, r7, r5
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	88db      	ldrh	r3, [r3, #6]
 8000dd8:	623b      	str	r3, [r7, #32]
 8000dda:	2300      	movs	r3, #0
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8000dde:	6a3a      	ldr	r2, [r7, #32]
 8000de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de2:	f7ff fa61 	bl	80002a8 <__aeabi_lmul>
 8000de6:	0002      	movs	r2, r0
 8000de8:	000b      	movs	r3, r1
 8000dea:	1059      	asrs	r1, r3, #1
 8000dec:	1938      	adds	r0, r7, r4
 8000dee:	6001      	str	r1, [r0, #0]
 8000df0:	17db      	asrs	r3, r3, #31
 8000df2:	21b4      	movs	r1, #180	; 0xb4
 8000df4:	187a      	adds	r2, r7, r1
 8000df6:	6013      	str	r3, [r2, #0]

	if (var1 == 0) {
 8000df8:	193b      	adds	r3, r7, r4
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	431a      	orrs	r2, r3
 8000e02:	d101      	bne.n	8000e08 <compensate_pressure+0x1d8>
		return 0;  // avoid exception caused by division by zero
 8000e04:	2300      	movs	r3, #0
 8000e06:	e0bc      	b.n	8000f82 <compensate_pressure+0x352>
	}

	p = 1048576 - adc_press;
 8000e08:	2398      	movs	r3, #152	; 0x98
 8000e0a:	18fb      	adds	r3, r7, r3
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	2380      	movs	r3, #128	; 0x80
 8000e10:	035b      	lsls	r3, r3, #13
 8000e12:	1a9b      	subs	r3, r3, r2
 8000e14:	24a0      	movs	r4, #160	; 0xa0
 8000e16:	193a      	adds	r2, r7, r4
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	17db      	asrs	r3, r3, #31
 8000e1c:	25a4      	movs	r5, #164	; 0xa4
 8000e1e:	197a      	adds	r2, r7, r5
 8000e20:	6013      	str	r3, [r2, #0]
	p = (((p << 31) - var2) * 3125) / var1;
 8000e22:	193b      	adds	r3, r7, r4
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	105b      	asrs	r3, r3, #1
 8000e28:	61fb      	str	r3, [r7, #28]
 8000e2a:	193b      	adds	r3, r7, r4
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	07db      	lsls	r3, r3, #31
 8000e30:	61bb      	str	r3, [r7, #24]
 8000e32:	20a8      	movs	r0, #168	; 0xa8
 8000e34:	183a      	adds	r2, r7, r0
 8000e36:	6853      	ldr	r3, [r2, #4]
 8000e38:	6812      	ldr	r2, [r2, #0]
 8000e3a:	69b8      	ldr	r0, [r7, #24]
 8000e3c:	69f9      	ldr	r1, [r7, #28]
 8000e3e:	1a80      	subs	r0, r0, r2
 8000e40:	4199      	sbcs	r1, r3
 8000e42:	4a53      	ldr	r2, [pc, #332]	; (8000f90 <compensate_pressure+0x360>)
 8000e44:	2300      	movs	r3, #0
 8000e46:	f7ff fa2f 	bl	80002a8 <__aeabi_lmul>
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	000b      	movs	r3, r1
 8000e4e:	0010      	movs	r0, r2
 8000e50:	0019      	movs	r1, r3
 8000e52:	23b0      	movs	r3, #176	; 0xb0
 8000e54:	18fa      	adds	r2, r7, r3
 8000e56:	6853      	ldr	r3, [r2, #4]
 8000e58:	6812      	ldr	r2, [r2, #0]
 8000e5a:	f7ff f9e1 	bl	8000220 <__aeabi_ldivmod>
 8000e5e:	0002      	movs	r2, r0
 8000e60:	000b      	movs	r3, r1
 8000e62:	1939      	adds	r1, r7, r4
 8000e64:	600a      	str	r2, [r1, #0]
 8000e66:	604b      	str	r3, [r1, #4]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8000e68:	269c      	movs	r6, #156	; 0x9c
 8000e6a:	19ba      	adds	r2, r7, r6
 8000e6c:	6813      	ldr	r3, [r2, #0]
 8000e6e:	2216      	movs	r2, #22
 8000e70:	5e9b      	ldrsh	r3, [r3, r2]
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	17db      	asrs	r3, r3, #31
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	197a      	adds	r2, r7, r5
 8000e7a:	6813      	ldr	r3, [r2, #0]
 8000e7c:	04da      	lsls	r2, r3, #19
 8000e7e:	1939      	adds	r1, r7, r4
 8000e80:	680b      	ldr	r3, [r1, #0]
 8000e82:	0b5b      	lsrs	r3, r3, #13
 8000e84:	67bb      	str	r3, [r7, #120]	; 0x78
 8000e86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8000e8c:	197a      	adds	r2, r7, r5
 8000e8e:	6813      	ldr	r3, [r2, #0]
 8000e90:	135b      	asrs	r3, r3, #13
 8000e92:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000e94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000e96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e98:	6938      	ldr	r0, [r7, #16]
 8000e9a:	6979      	ldr	r1, [r7, #20]
 8000e9c:	f7ff fa04 	bl	80002a8 <__aeabi_lmul>
 8000ea0:	0002      	movs	r2, r0
 8000ea2:	000b      	movs	r3, r1
 8000ea4:	0010      	movs	r0, r2
 8000ea6:	0019      	movs	r1, r3
 8000ea8:	197a      	adds	r2, r7, r5
 8000eaa:	6813      	ldr	r3, [r2, #0]
 8000eac:	04da      	lsls	r2, r3, #19
 8000eae:	193b      	adds	r3, r7, r4
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	0b5b      	lsrs	r3, r3, #13
 8000eb4:	673b      	str	r3, [r7, #112]	; 0x70
 8000eb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	673b      	str	r3, [r7, #112]	; 0x70
 8000ebc:	197a      	adds	r2, r7, r5
 8000ebe:	6813      	ldr	r3, [r2, #0]
 8000ec0:	135b      	asrs	r3, r3, #13
 8000ec2:	677b      	str	r3, [r7, #116]	; 0x74
 8000ec4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ec8:	f7ff f9ee 	bl	80002a8 <__aeabi_lmul>
 8000ecc:	0002      	movs	r2, r0
 8000ece:	000b      	movs	r3, r1
 8000ed0:	01d9      	lsls	r1, r3, #7
 8000ed2:	0e50      	lsrs	r0, r2, #25
 8000ed4:	4301      	orrs	r1, r0
 8000ed6:	25b0      	movs	r5, #176	; 0xb0
 8000ed8:	1978      	adds	r0, r7, r5
 8000eda:	6001      	str	r1, [r0, #0]
 8000edc:	165b      	asrs	r3, r3, #25
 8000ede:	22b4      	movs	r2, #180	; 0xb4
 8000ee0:	18ba      	adds	r2, r7, r2
 8000ee2:	6013      	str	r3, [r2, #0]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8000ee4:	19ba      	adds	r2, r7, r6
 8000ee6:	6813      	ldr	r3, [r2, #0]
 8000ee8:	2214      	movs	r2, #20
 8000eea:	5e9b      	ldrsh	r3, [r3, r2]
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	17db      	asrs	r3, r3, #31
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	193a      	adds	r2, r7, r4
 8000ef4:	6853      	ldr	r3, [r2, #4]
 8000ef6:	6812      	ldr	r2, [r2, #0]
 8000ef8:	68b8      	ldr	r0, [r7, #8]
 8000efa:	68f9      	ldr	r1, [r7, #12]
 8000efc:	f7ff f9d4 	bl	80002a8 <__aeabi_lmul>
 8000f00:	0002      	movs	r2, r0
 8000f02:	000b      	movs	r3, r1
 8000f04:	0359      	lsls	r1, r3, #13
 8000f06:	0cd0      	lsrs	r0, r2, #19
 8000f08:	4301      	orrs	r1, r0
 8000f0a:	20a8      	movs	r0, #168	; 0xa8
 8000f0c:	1838      	adds	r0, r7, r0
 8000f0e:	6001      	str	r1, [r0, #0]
 8000f10:	14db      	asrs	r3, r3, #19
 8000f12:	22ac      	movs	r2, #172	; 0xac
 8000f14:	18ba      	adds	r2, r7, r2
 8000f16:	6013      	str	r3, [r2, #0]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8000f18:	193a      	adds	r2, r7, r4
 8000f1a:	6810      	ldr	r0, [r2, #0]
 8000f1c:	6851      	ldr	r1, [r2, #4]
 8000f1e:	197a      	adds	r2, r7, r5
 8000f20:	6853      	ldr	r3, [r2, #4]
 8000f22:	6812      	ldr	r2, [r2, #0]
 8000f24:	1880      	adds	r0, r0, r2
 8000f26:	4159      	adcs	r1, r3
 8000f28:	23a8      	movs	r3, #168	; 0xa8
 8000f2a:	18fb      	adds	r3, r7, r3
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	1812      	adds	r2, r2, r0
 8000f32:	414b      	adcs	r3, r1
 8000f34:	0619      	lsls	r1, r3, #24
 8000f36:	0a10      	lsrs	r0, r2, #8
 8000f38:	66b8      	str	r0, [r7, #104]	; 0x68
 8000f3a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000f3c:	4308      	orrs	r0, r1
 8000f3e:	66b8      	str	r0, [r7, #104]	; 0x68
 8000f40:	121b      	asrs	r3, r3, #8
 8000f42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f44:	19bb      	adds	r3, r7, r6
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2212      	movs	r2, #18
 8000f4a:	5e9b      	ldrsh	r3, [r3, r2]
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	17db      	asrs	r3, r3, #31
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	6839      	ldr	r1, [r7, #0]
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	000b      	movs	r3, r1
 8000f58:	0f1b      	lsrs	r3, r3, #28
 8000f5a:	0010      	movs	r0, r2
 8000f5c:	0100      	lsls	r0, r0, #4
 8000f5e:	6678      	str	r0, [r7, #100]	; 0x64
 8000f60:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000f62:	4318      	orrs	r0, r3
 8000f64:	6678      	str	r0, [r7, #100]	; 0x64
 8000f66:	000b      	movs	r3, r1
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	663b      	str	r3, [r7, #96]	; 0x60
 8000f6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f70:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000f72:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000f74:	1812      	adds	r2, r2, r0
 8000f76:	414b      	adcs	r3, r1
 8000f78:	1939      	adds	r1, r7, r4
 8000f7a:	600a      	str	r2, [r1, #0]
 8000f7c:	604b      	str	r3, [r1, #4]
	return p;
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	681b      	ldr	r3, [r3, #0]
}
 8000f82:	0018      	movs	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b02f      	add	sp, #188	; 0xbc
 8000f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	fffe0c00 	.word	0xfffe0c00
 8000f90:	00000c35 	.word	0x00000c35

08000f94 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a2c      	ldr	r2, [pc, #176]	; (8001054 <compensate_humidity+0xc0>)
 8000fa4:	4694      	mov	ip, r2
 8000fa6:	4463      	add	r3, ip
 8000fa8:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	039a      	lsls	r2, r3, #14
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	211e      	movs	r1, #30
 8000fb2:	5e5b      	ldrsh	r3, [r3, r1]
 8000fb4:	051b      	lsls	r3, r3, #20
 8000fb6:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2120      	movs	r1, #32
 8000fbc:	5e5b      	ldrsh	r3, [r3, r1]
 8000fbe:	0019      	movs	r1, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	434b      	muls	r3, r1
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2280      	movs	r2, #128	; 0x80
 8000fc8:	01d2      	lsls	r2, r2, #7
 8000fca:	4694      	mov	ip, r2
 8000fcc:	4463      	add	r3, ip
 8000fce:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	2122      	movs	r1, #34	; 0x22
 8000fd4:	5652      	ldrsb	r2, [r2, r1]
 8000fd6:	0011      	movs	r1, r2
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	434a      	muls	r2, r1
 8000fdc:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8000fde:	68f9      	ldr	r1, [r7, #12]
 8000fe0:	7f09      	ldrb	r1, [r1, #28]
 8000fe2:	0008      	movs	r0, r1
 8000fe4:	6979      	ldr	r1, [r7, #20]
 8000fe6:	4341      	muls	r1, r0
 8000fe8:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8000fea:	2080      	movs	r0, #128	; 0x80
 8000fec:	0200      	lsls	r0, r0, #8
 8000fee:	4684      	mov	ip, r0
 8000ff0:	4461      	add	r1, ip
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8000ff2:	434a      	muls	r2, r1
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8000ff4:	1292      	asrs	r2, r2, #10
 8000ff6:	2180      	movs	r1, #128	; 0x80
 8000ff8:	0389      	lsls	r1, r1, #14
 8000ffa:	468c      	mov	ip, r1
 8000ffc:	4462      	add	r2, ip
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8000ffe:	68f9      	ldr	r1, [r7, #12]
 8001000:	201a      	movs	r0, #26
 8001002:	5e09      	ldrsh	r1, [r1, r0]
 8001004:	434a      	muls	r2, r1
 8001006:	2180      	movs	r1, #128	; 0x80
 8001008:	0189      	lsls	r1, r1, #6
 800100a:	468c      	mov	ip, r1
 800100c:	4462      	add	r2, ip
 800100e:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001010:	4353      	muls	r3, r2
 8001012:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	13db      	asrs	r3, r3, #15
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	13d2      	asrs	r2, r2, #15
 800101c:	4353      	muls	r3, r2
 800101e:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	7e12      	ldrb	r2, [r2, #24]
 8001024:	4353      	muls	r3, r2
 8001026:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	2b00      	cmp	r3, #0
 8001032:	da00      	bge.n	8001036 <compensate_humidity+0xa2>
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	22c8      	movs	r2, #200	; 0xc8
 800103c:	0552      	lsls	r2, r2, #21
 800103e:	4293      	cmp	r3, r2
 8001040:	dd01      	ble.n	8001046 <compensate_humidity+0xb2>
 8001042:	23c8      	movs	r3, #200	; 0xc8
 8001044:	055b      	lsls	r3, r3, #21
 8001046:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	131b      	asrs	r3, r3, #12
}
 800104c:	0018      	movs	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	b006      	add	sp, #24
 8001052:	bd80      	pop	{r7, pc}
 8001054:	fffed400 	.word	0xfffed400

08001058 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b08d      	sub	sp, #52	; 0x34
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2232      	movs	r2, #50	; 0x32
 800106a:	5c9b      	ldrb	r3, [r3, r2]
 800106c:	2b60      	cmp	r3, #96	; 0x60
 800106e:	d007      	beq.n	8001080 <bmp280_read_fixed+0x28>
		if (humidity)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 800107c:	2300      	movs	r3, #0
 800107e:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <bmp280_read_fixed+0x32>
 8001086:	2308      	movs	r3, #8
 8001088:	e000      	b.n	800108c <bmp280_read_fixed+0x34>
 800108a:	2306      	movs	r3, #6
 800108c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 800108e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2218      	movs	r2, #24
 8001094:	18ba      	adds	r2, r7, r2
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	21f7      	movs	r1, #247	; 0xf7
 800109a:	f7ff fb7f 	bl	800079c <read_data>
 800109e:	1e03      	subs	r3, r0, #0
 80010a0:	d001      	beq.n	80010a6 <bmp280_read_fixed+0x4e>
		return false;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e041      	b.n	800112a <bmp280_read_fixed+0xd2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80010a6:	2418      	movs	r4, #24
 80010a8:	193b      	adds	r3, r7, r4
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	031a      	lsls	r2, r3, #12
 80010ae:	193b      	adds	r3, r7, r4
 80010b0:	785b      	ldrb	r3, [r3, #1]
 80010b2:	011b      	lsls	r3, r3, #4
 80010b4:	4313      	orrs	r3, r2
 80010b6:	193a      	adds	r2, r7, r4
 80010b8:	7892      	ldrb	r2, [r2, #2]
 80010ba:	0912      	lsrs	r2, r2, #4
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	4313      	orrs	r3, r2
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80010c2:	193b      	adds	r3, r7, r4
 80010c4:	78db      	ldrb	r3, [r3, #3]
 80010c6:	031a      	lsls	r2, r3, #12
 80010c8:	193b      	adds	r3, r7, r4
 80010ca:	791b      	ldrb	r3, [r3, #4]
 80010cc:	011b      	lsls	r3, r3, #4
 80010ce:	4313      	orrs	r3, r2
 80010d0:	193a      	adds	r2, r7, r4
 80010d2:	7952      	ldrb	r2, [r2, #5]
 80010d4:	0912      	lsrs	r2, r2, #4
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	4313      	orrs	r3, r2
 80010da:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 80010dc:	2314      	movs	r3, #20
 80010de:	18fa      	adds	r2, r7, r3
 80010e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	0018      	movs	r0, r3
 80010e6:	f7ff fd6f 	bl	8000bc8 <compensate_temperature>
 80010ea:	0002      	movs	r2, r0
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	0018      	movs	r0, r3
 80010f8:	f7ff fd9a 	bl	8000c30 <compensate_pressure>
 80010fc:	0002      	movs	r2, r0
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d00f      	beq.n	8001128 <bmp280_read_fixed+0xd0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001108:	193b      	adds	r3, r7, r4
 800110a:	799b      	ldrb	r3, [r3, #6]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	193a      	adds	r2, r7, r4
 8001110:	79d2      	ldrb	r2, [r2, #7]
 8001112:	4313      	orrs	r3, r2
 8001114:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	6a39      	ldr	r1, [r7, #32]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	0018      	movs	r0, r3
 800111e:	f7ff ff39 	bl	8000f94 <compensate_humidity>
 8001122:	0002      	movs	r2, r0
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001128:	2301      	movs	r3, #1
}
 800112a:	0018      	movs	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	b00d      	add	sp, #52	; 0x34
 8001130:	bd90      	pop	{r4, r7, pc}
	...

08001134 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113a:	240c      	movs	r4, #12
 800113c:	193b      	adds	r3, r7, r4
 800113e:	0018      	movs	r0, r3
 8001140:	2314      	movs	r3, #20
 8001142:	001a      	movs	r2, r3
 8001144:	2100      	movs	r1, #0
 8001146:	f003 fa1d 	bl	8004584 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114a:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_GPIO_Init+0x84>)
 800114c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800114e:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <MX_GPIO_Init+0x84>)
 8001150:	2104      	movs	r1, #4
 8001152:	430a      	orrs	r2, r1
 8001154:	62da      	str	r2, [r3, #44]	; 0x2c
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <MX_GPIO_Init+0x84>)
 8001158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115a:	2204      	movs	r2, #4
 800115c:	4013      	ands	r3, r2
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_GPIO_Init+0x84>)
 8001164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_GPIO_Init+0x84>)
 8001168:	2101      	movs	r1, #1
 800116a:	430a      	orrs	r2, r1
 800116c:	62da      	str	r2, [r3, #44]	; 0x2c
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_GPIO_Init+0x84>)
 8001170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001172:	2201      	movs	r2, #1
 8001174:	4013      	ands	r3, r2
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800117a:	23a0      	movs	r3, #160	; 0xa0
 800117c:	05db      	lsls	r3, r3, #23
 800117e:	2200      	movs	r2, #0
 8001180:	2120      	movs	r1, #32
 8001182:	0018      	movs	r0, r3
 8001184:	f000 fdca 	bl	8001d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001188:	0021      	movs	r1, r4
 800118a:	187b      	adds	r3, r7, r1
 800118c:	2220      	movs	r2, #32
 800118e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001190:	187b      	adds	r3, r7, r1
 8001192:	2201      	movs	r2, #1
 8001194:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	187b      	adds	r3, r7, r1
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	187b      	adds	r3, r7, r1
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80011a2:	187a      	adds	r2, r7, r1
 80011a4:	23a0      	movs	r3, #160	; 0xa0
 80011a6:	05db      	lsls	r3, r3, #23
 80011a8:	0011      	movs	r1, r2
 80011aa:	0018      	movs	r0, r3
 80011ac:	f000 fc38 	bl	8001a20 <HAL_GPIO_Init>

}
 80011b0:	46c0      	nop			; (mov r8, r8)
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b009      	add	sp, #36	; 0x24
 80011b6:	bd90      	pop	{r4, r7, pc}
 80011b8:	40021000 	.word	0x40021000

080011bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <MX_I2C1_Init+0x74>)
 80011c2:	4a1c      	ldr	r2, [pc, #112]	; (8001234 <MX_I2C1_Init+0x78>)
 80011c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <MX_I2C1_Init+0x74>)
 80011c8:	4a1b      	ldr	r2, [pc, #108]	; (8001238 <MX_I2C1_Init+0x7c>)
 80011ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_I2C1_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <MX_I2C1_Init+0x74>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_I2C1_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_I2C1_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_I2C1_Init+0x74>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_I2C1_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_I2C1_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_I2C1_Init+0x74>)
 80011f8:	0018      	movs	r0, r3
 80011fa:	f000 fdc7 	bl	8001d8c <HAL_I2C_Init>
 80011fe:	1e03      	subs	r3, r0, #0
 8001200:	d001      	beq.n	8001206 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001202:	f000 f9db 	bl	80015bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <MX_I2C1_Init+0x74>)
 8001208:	2100      	movs	r1, #0
 800120a:	0018      	movs	r0, r3
 800120c:	f001 fcca 	bl	8002ba4 <HAL_I2CEx_ConfigAnalogFilter>
 8001210:	1e03      	subs	r3, r0, #0
 8001212:	d001      	beq.n	8001218 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001214:	f000 f9d2 	bl	80015bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <MX_I2C1_Init+0x74>)
 800121a:	2100      	movs	r1, #0
 800121c:	0018      	movs	r0, r3
 800121e:	f001 fd0d 	bl	8002c3c <HAL_I2CEx_ConfigDigitalFilter>
 8001222:	1e03      	subs	r3, r0, #0
 8001224:	d001      	beq.n	800122a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001226:	f000 f9c9 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000028 	.word	0x20000028
 8001234:	40005400 	.word	0x40005400
 8001238:	00303d5b 	.word	0x00303d5b

0800123c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b089      	sub	sp, #36	; 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	240c      	movs	r4, #12
 8001246:	193b      	adds	r3, r7, r4
 8001248:	0018      	movs	r0, r3
 800124a:	2314      	movs	r3, #20
 800124c:	001a      	movs	r2, r3
 800124e:	2100      	movs	r1, #0
 8001250:	f003 f998 	bl	8004584 <memset>
  if(i2cHandle->Instance==I2C1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a18      	ldr	r2, [pc, #96]	; (80012bc <HAL_I2C_MspInit+0x80>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d12a      	bne.n	80012b4 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <HAL_I2C_MspInit+0x84>)
 8001260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <HAL_I2C_MspInit+0x84>)
 8001264:	2101      	movs	r1, #1
 8001266:	430a      	orrs	r2, r1
 8001268:	62da      	str	r2, [r3, #44]	; 0x2c
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <HAL_I2C_MspInit+0x84>)
 800126c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126e:	2201      	movs	r2, #1
 8001270:	4013      	ands	r3, r2
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Altimeter_SCL_Pin|Altimeter_SDA_Pin;
 8001276:	193b      	adds	r3, r7, r4
 8001278:	22c0      	movs	r2, #192	; 0xc0
 800127a:	00d2      	lsls	r2, r2, #3
 800127c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800127e:	0021      	movs	r1, r4
 8001280:	187b      	adds	r3, r7, r1
 8001282:	2212      	movs	r2, #18
 8001284:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	187b      	adds	r3, r7, r1
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	187b      	adds	r3, r7, r1
 800128e:	2203      	movs	r2, #3
 8001290:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001292:	187b      	adds	r3, r7, r1
 8001294:	2206      	movs	r2, #6
 8001296:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001298:	187a      	adds	r2, r7, r1
 800129a:	23a0      	movs	r3, #160	; 0xa0
 800129c:	05db      	lsls	r3, r3, #23
 800129e:	0011      	movs	r1, r2
 80012a0:	0018      	movs	r0, r3
 80012a2:	f000 fbbd 	bl	8001a20 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_I2C_MspInit+0x84>)
 80012a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <HAL_I2C_MspInit+0x84>)
 80012ac:	2180      	movs	r1, #128	; 0x80
 80012ae:	0389      	lsls	r1, r1, #14
 80012b0:	430a      	orrs	r2, r1
 80012b2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012b4:	46c0      	nop			; (mov r8, r8)
 80012b6:	46bd      	mov	sp, r7
 80012b8:	b009      	add	sp, #36	; 0x24
 80012ba:	bd90      	pop	{r4, r7, pc}
 80012bc:	40005400 	.word	0x40005400
 80012c0:	40021000 	.word	0x40021000

080012c4 <hex_byte>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void hex_byte(uint8_t data, uint8_t p[]) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	0002      	movs	r2, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	1dfb      	adds	r3, r7, #7
 80012d0:	701a      	strb	r2, [r3, #0]
    uint8_t temp;

    temp = data >> 4;
 80012d2:	210f      	movs	r1, #15
 80012d4:	187b      	adds	r3, r7, r1
 80012d6:	1dfa      	adds	r2, r7, #7
 80012d8:	7812      	ldrb	r2, [r2, #0]
 80012da:	0912      	lsrs	r2, r2, #4
 80012dc:	701a      	strb	r2, [r3, #0]
    temp += '0';
 80012de:	187b      	adds	r3, r7, r1
 80012e0:	187a      	adds	r2, r7, r1
 80012e2:	7812      	ldrb	r2, [r2, #0]
 80012e4:	3230      	adds	r2, #48	; 0x30
 80012e6:	701a      	strb	r2, [r3, #0]
    if (temp >= (10 + '0')) {
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b39      	cmp	r3, #57	; 0x39
 80012ee:	d904      	bls.n	80012fa <hex_byte+0x36>
        temp += ('A' - 10 - '0');
 80012f0:	187b      	adds	r3, r7, r1
 80012f2:	187a      	adds	r2, r7, r1
 80012f4:	7812      	ldrb	r2, [r2, #0]
 80012f6:	3207      	adds	r2, #7
 80012f8:	701a      	strb	r2, [r3, #0]
    }
    p[0] = temp;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	200f      	movs	r0, #15
 80012fe:	183a      	adds	r2, r7, r0
 8001300:	7812      	ldrb	r2, [r2, #0]
 8001302:	701a      	strb	r2, [r3, #0]
    temp = data & 0x0F;
 8001304:	183b      	adds	r3, r7, r0
 8001306:	1dfa      	adds	r2, r7, #7
 8001308:	7812      	ldrb	r2, [r2, #0]
 800130a:	210f      	movs	r1, #15
 800130c:	400a      	ands	r2, r1
 800130e:	701a      	strb	r2, [r3, #0]
    temp += '0';
 8001310:	0001      	movs	r1, r0
 8001312:	187b      	adds	r3, r7, r1
 8001314:	187a      	adds	r2, r7, r1
 8001316:	7812      	ldrb	r2, [r2, #0]
 8001318:	3230      	adds	r2, #48	; 0x30
 800131a:	701a      	strb	r2, [r3, #0]
    if (temp >= (10 + '0')) {
 800131c:	187b      	adds	r3, r7, r1
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b39      	cmp	r3, #57	; 0x39
 8001322:	d904      	bls.n	800132e <hex_byte+0x6a>
        temp += ('A' - 10 - '0');
 8001324:	187b      	adds	r3, r7, r1
 8001326:	187a      	adds	r2, r7, r1
 8001328:	7812      	ldrb	r2, [r2, #0]
 800132a:	3207      	adds	r2, #7
 800132c:	701a      	strb	r2, [r3, #0]
    }
    p[1] = temp;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	3301      	adds	r3, #1
 8001332:	220f      	movs	r2, #15
 8001334:	18ba      	adds	r2, r7, r2
 8001336:	7812      	ldrb	r2, [r2, #0]
 8001338:	701a      	strb	r2, [r3, #0]
}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	46bd      	mov	sp, r7
 800133e:	b004      	add	sp, #16
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800134a:	f000 fa21 	bl	8001790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800134e:	f000 f8bf 	bl	80014d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001352:	f7ff feef 	bl	8001134 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001356:	f000 f967 	bl	8001628 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 800135a:	f7ff ff2f 	bl	80011bc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_MspInit(&hlpuart1);
 800135e:	4b4e      	ldr	r3, [pc, #312]	; (8001498 <main+0x154>)
 8001360:	0018      	movs	r0, r3
 8001362:	f000 f98f 	bl	8001684 <HAL_UART_MspInit>
  HAL_I2C_MspInit(&hi2c1);
 8001366:	4b4d      	ldr	r3, [pc, #308]	; (800149c <main+0x158>)
 8001368:	0018      	movs	r0, r3
 800136a:	f7ff ff67 	bl	800123c <HAL_I2C_MspInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit(&hlpuart1, "Hello!\n", 7, 100);
 800136e:	494c      	ldr	r1, [pc, #304]	; (80014a0 <main+0x15c>)
 8001370:	4849      	ldr	r0, [pc, #292]	; (8001498 <main+0x154>)
 8001372:	2364      	movs	r3, #100	; 0x64
 8001374:	2207      	movs	r2, #7
 8001376:	f002 fbcd 	bl	8003b14 <HAL_UART_Transmit>
  HAL_Delay (5000);
 800137a:	4b4a      	ldr	r3, [pc, #296]	; (80014a4 <main+0x160>)
 800137c:	0018      	movs	r0, r3
 800137e:	f000 fa77 	bl	8001870 <HAL_Delay>

  if (HAL_I2C_IsDeviceReady(&hi2c1, BMP280_ADDRESS, 10, 10) == HAL_OK) {
 8001382:	4846      	ldr	r0, [pc, #280]	; (800149c <main+0x158>)
 8001384:	230a      	movs	r3, #10
 8001386:	220a      	movs	r2, #10
 8001388:	21ee      	movs	r1, #238	; 0xee
 800138a:	f000 fff7 	bl	800237c <HAL_I2C_IsDeviceReady>
 800138e:	1e03      	subs	r3, r0, #0
 8001390:	d109      	bne.n	80013a6 <main+0x62>
	  bmp2_port = &hi2c1;
 8001392:	4b45      	ldr	r3, [pc, #276]	; (80014a8 <main+0x164>)
 8001394:	4a41      	ldr	r2, [pc, #260]	; (800149c <main+0x158>)
 8001396:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&hlpuart1, "BMP280\n", 7, 100);
 8001398:	4944      	ldr	r1, [pc, #272]	; (80014ac <main+0x168>)
 800139a:	483f      	ldr	r0, [pc, #252]	; (8001498 <main+0x154>)
 800139c:	2364      	movs	r3, #100	; 0x64
 800139e:	2207      	movs	r2, #7
 80013a0:	f002 fbb8 	bl	8003b14 <HAL_UART_Transmit>
 80013a4:	e017      	b.n	80013d6 <main+0x92>
  }
  else {
	  HAL_UART_Transmit(&hlpuart1, "ERRINIT\n", 8, 100);
 80013a6:	4942      	ldr	r1, [pc, #264]	; (80014b0 <main+0x16c>)
 80013a8:	483b      	ldr	r0, [pc, #236]	; (8001498 <main+0x154>)
 80013aa:	2364      	movs	r3, #100	; 0x64
 80013ac:	2208      	movs	r2, #8
 80013ae:	f002 fbb1 	bl	8003b14 <HAL_UART_Transmit>
	  for (int i = 0; i < 20; i++) {
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	e00b      	b.n	80013d0 <main+0x8c>
		  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 80013b8:	23a0      	movs	r3, #160	; 0xa0
 80013ba:	05db      	lsls	r3, r3, #23
 80013bc:	2120      	movs	r1, #32
 80013be:	0018      	movs	r0, r3
 80013c0:	f000 fcc9 	bl	8001d56 <HAL_GPIO_TogglePin>
		  HAL_Delay (100);
 80013c4:	2064      	movs	r0, #100	; 0x64
 80013c6:	f000 fa53 	bl	8001870 <HAL_Delay>
	  for (int i = 0; i < 20; i++) {
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3301      	adds	r3, #1
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b13      	cmp	r3, #19
 80013d4:	ddf0      	ble.n	80013b8 <main+0x74>
	  }
  }

  if (bmp2_port) {
 80013d6:	4b34      	ldr	r3, [pc, #208]	; (80014a8 <main+0x164>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d010      	beq.n	8001400 <main+0xbc>
	  bmp280_init_default_params(&bmp280.params);
 80013de:	4b35      	ldr	r3, [pc, #212]	; (80014b4 <main+0x170>)
 80013e0:	0018      	movs	r0, r3
 80013e2:	f7ff f989 	bl	80006f8 <bmp280_init_default_params>
	  bmp280.addr = BMP280_I2C_ADDRESS_0;
 80013e6:	4b34      	ldr	r3, [pc, #208]	; (80014b8 <main+0x174>)
 80013e8:	2276      	movs	r2, #118	; 0x76
 80013ea:	849a      	strh	r2, [r3, #36]	; 0x24
	  bmp280.i2c = bmp2_port;
 80013ec:	4b2e      	ldr	r3, [pc, #184]	; (80014a8 <main+0x164>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b31      	ldr	r3, [pc, #196]	; (80014b8 <main+0x174>)
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28
	  if (!bmp280_init(&bmp280, &bmp280.params)) {
 80013f4:	4a2f      	ldr	r2, [pc, #188]	; (80014b4 <main+0x170>)
 80013f6:	4b30      	ldr	r3, [pc, #192]	; (80014b8 <main+0x174>)
 80013f8:	0011      	movs	r1, r2
 80013fa:	0018      	movs	r0, r3
 80013fc:	f7ff fb10 	bl	8000a20 <bmp280_init>
	  }
  }

  while (1)
  {
    HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8001400:	23a0      	movs	r3, #160	; 0xa0
 8001402:	05db      	lsls	r3, r3, #23
 8001404:	2120      	movs	r1, #32
 8001406:	0018      	movs	r0, r3
 8001408:	f000 fca5 	bl	8001d56 <HAL_GPIO_TogglePin>

    if (bmp2_port) {
 800140c:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <main+0x164>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d02a      	beq.n	800146a <main+0x126>
		while (bmp280_is_measuring(&bmp280));
 8001414:	46c0      	nop			; (mov r8, r8)
 8001416:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <main+0x174>)
 8001418:	0018      	movs	r0, r3
 800141a:	f7ff fbb8 	bl	8000b8e <bmp280_is_measuring>
 800141e:	1e03      	subs	r3, r0, #0
 8001420:	d1f9      	bne.n	8001416 <main+0xd2>
		bmp280_read_fixed(&bmp280, &bmp_data.temperature, &bmp_data.pressure, &bmp_data.humidity);
 8001422:	4b26      	ldr	r3, [pc, #152]	; (80014bc <main+0x178>)
 8001424:	4a26      	ldr	r2, [pc, #152]	; (80014c0 <main+0x17c>)
 8001426:	4927      	ldr	r1, [pc, #156]	; (80014c4 <main+0x180>)
 8001428:	4823      	ldr	r0, [pc, #140]	; (80014b8 <main+0x174>)
 800142a:	f7ff fe15 	bl	8001058 <bmp280_read_fixed>
		for (uint32_t i = 0; i < sizeof(bmp_data); i++) {
 800142e:	2300      	movs	r3, #0
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	e00d      	b.n	8001450 <main+0x10c>
			hex_byte(*((uint8_t *) &bmp_data + i), output + i * 2);
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <main+0x17c>)
 8001438:	18d3      	adds	r3, r2, r3
 800143a:	7818      	ldrb	r0, [r3, #0]
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	005a      	lsls	r2, r3, #1
 8001440:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <main+0x184>)
 8001442:	18d3      	adds	r3, r2, r3
 8001444:	0019      	movs	r1, r3
 8001446:	f7ff ff3d 	bl	80012c4 <hex_byte>
		for (uint32_t i = 0; i < sizeof(bmp_data); i++) {
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	3301      	adds	r3, #1
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	2b0b      	cmp	r3, #11
 8001454:	d9ee      	bls.n	8001434 <main+0xf0>
		}
		output[sizeof(bmp_data)] = '\n';
 8001456:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <main+0x184>)
 8001458:	220a      	movs	r2, #10
 800145a:	731a      	strb	r2, [r3, #12]
		HAL_UART_Transmit(&hlpuart1, output, sizeof(bmp_data) + 1, 100);
 800145c:	491a      	ldr	r1, [pc, #104]	; (80014c8 <main+0x184>)
 800145e:	480e      	ldr	r0, [pc, #56]	; (8001498 <main+0x154>)
 8001460:	2364      	movs	r3, #100	; 0x64
 8001462:	220d      	movs	r2, #13
 8001464:	f002 fb56 	bl	8003b14 <HAL_UART_Transmit>
 8001468:	e00a      	b.n	8001480 <main+0x13c>
	} else {
		HAL_UART_Transmit(&hlpuart1, "Error\n", 6, 100);
 800146a:	4918      	ldr	r1, [pc, #96]	; (80014cc <main+0x188>)
 800146c:	480a      	ldr	r0, [pc, #40]	; (8001498 <main+0x154>)
 800146e:	2364      	movs	r3, #100	; 0x64
 8001470:	2206      	movs	r2, #6
 8001472:	f002 fb4f 	bl	8003b14 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8001476:	23fa      	movs	r3, #250	; 0xfa
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	0018      	movs	r0, r3
 800147c:	f000 f9f8 	bl	8001870 <HAL_Delay>
	}

    HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8001480:	23a0      	movs	r3, #160	; 0xa0
 8001482:	05db      	lsls	r3, r3, #23
 8001484:	2120      	movs	r1, #32
 8001486:	0018      	movs	r0, r3
 8001488:	f000 fc65 	bl	8001d56 <HAL_GPIO_TogglePin>
    HAL_Delay (1000);
 800148c:	23fa      	movs	r3, #250	; 0xfa
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	0018      	movs	r0, r3
 8001492:	f000 f9ed 	bl	8001870 <HAL_Delay>
    HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8001496:	e7b3      	b.n	8001400 <main+0xbc>
 8001498:	200000f0 	.word	0x200000f0
 800149c:	20000028 	.word	0x20000028
 80014a0:	080045ac 	.word	0x080045ac
 80014a4:	00001388 	.word	0x00001388
 80014a8:	200000b0 	.word	0x200000b0
 80014ac:	080045b4 	.word	0x080045b4
 80014b0:	080045bc 	.word	0x080045bc
 80014b4:	200000a8 	.word	0x200000a8
 80014b8:	2000007c 	.word	0x2000007c
 80014bc:	200000b8 	.word	0x200000b8
 80014c0:	200000b4 	.word	0x200000b4
 80014c4:	200000bc 	.word	0x200000bc
 80014c8:	200000c0 	.word	0x200000c0
 80014cc:	080045c8 	.word	0x080045c8

080014d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b099      	sub	sp, #100	; 0x64
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	242c      	movs	r4, #44	; 0x2c
 80014d8:	193b      	adds	r3, r7, r4
 80014da:	0018      	movs	r0, r3
 80014dc:	2334      	movs	r3, #52	; 0x34
 80014de:	001a      	movs	r2, r3
 80014e0:	2100      	movs	r1, #0
 80014e2:	f003 f84f 	bl	8004584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e6:	2318      	movs	r3, #24
 80014e8:	18fb      	adds	r3, r7, r3
 80014ea:	0018      	movs	r0, r3
 80014ec:	2314      	movs	r3, #20
 80014ee:	001a      	movs	r2, r3
 80014f0:	2100      	movs	r1, #0
 80014f2:	f003 f847 	bl	8004584 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f6:	003b      	movs	r3, r7
 80014f8:	0018      	movs	r0, r3
 80014fa:	2318      	movs	r3, #24
 80014fc:	001a      	movs	r2, r3
 80014fe:	2100      	movs	r1, #0
 8001500:	f003 f840 	bl	8004584 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001504:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <SystemClock_Config+0xe4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a2b      	ldr	r2, [pc, #172]	; (80015b8 <SystemClock_Config+0xe8>)
 800150a:	401a      	ands	r2, r3
 800150c:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <SystemClock_Config+0xe4>)
 800150e:	2180      	movs	r1, #128	; 0x80
 8001510:	0109      	lsls	r1, r1, #4
 8001512:	430a      	orrs	r2, r1
 8001514:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001516:	0021      	movs	r1, r4
 8001518:	187b      	adds	r3, r7, r1
 800151a:	2202      	movs	r2, #2
 800151c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800151e:	187b      	adds	r3, r7, r1
 8001520:	2201      	movs	r2, #1
 8001522:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001524:	187b      	adds	r3, r7, r1
 8001526:	2210      	movs	r2, #16
 8001528:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152a:	187b      	adds	r3, r7, r1
 800152c:	2202      	movs	r2, #2
 800152e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001530:	187b      	adds	r3, r7, r1
 8001532:	2200      	movs	r2, #0
 8001534:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001536:	187b      	adds	r3, r7, r1
 8001538:	2280      	movs	r2, #128	; 0x80
 800153a:	02d2      	lsls	r2, r2, #11
 800153c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800153e:	187b      	adds	r3, r7, r1
 8001540:	2280      	movs	r2, #128	; 0x80
 8001542:	03d2      	lsls	r2, r2, #15
 8001544:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001546:	187b      	adds	r3, r7, r1
 8001548:	0018      	movs	r0, r3
 800154a:	f001 fbc3 	bl	8002cd4 <HAL_RCC_OscConfig>
 800154e:	1e03      	subs	r3, r0, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001552:	f000 f833 	bl	80015bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001556:	2118      	movs	r1, #24
 8001558:	187b      	adds	r3, r7, r1
 800155a:	220f      	movs	r2, #15
 800155c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155e:	187b      	adds	r3, r7, r1
 8001560:	2203      	movs	r2, #3
 8001562:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001564:	187b      	adds	r3, r7, r1
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800156a:	187b      	adds	r3, r7, r1
 800156c:	2280      	movs	r2, #128	; 0x80
 800156e:	00d2      	lsls	r2, r2, #3
 8001570:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001572:	187b      	adds	r3, r7, r1
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001578:	187b      	adds	r3, r7, r1
 800157a:	2101      	movs	r1, #1
 800157c:	0018      	movs	r0, r3
 800157e:	f001 ff25 	bl	80033cc <HAL_RCC_ClockConfig>
 8001582:	1e03      	subs	r3, r0, #0
 8001584:	d001      	beq.n	800158a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001586:	f000 f819 	bl	80015bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 800158a:	003b      	movs	r3, r7
 800158c:	220c      	movs	r2, #12
 800158e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001590:	003b      	movs	r3, r7
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001596:	003b      	movs	r3, r7
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800159c:	003b      	movs	r3, r7
 800159e:	0018      	movs	r0, r3
 80015a0:	f002 f938 	bl	8003814 <HAL_RCCEx_PeriphCLKConfig>
 80015a4:	1e03      	subs	r3, r0, #0
 80015a6:	d001      	beq.n	80015ac <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80015a8:	f000 f808 	bl	80015bc <Error_Handler>
  }
}
 80015ac:	46c0      	nop			; (mov r8, r8)
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b019      	add	sp, #100	; 0x64
 80015b2:	bd90      	pop	{r4, r7, pc}
 80015b4:	40007000 	.word	0x40007000
 80015b8:	ffffe7ff 	.word	0xffffe7ff

080015bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c0:	b672      	cpsid	i
}
 80015c2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <Error_Handler+0x8>
	...

080015c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015cc:	4b07      	ldr	r3, [pc, #28]	; (80015ec <HAL_MspInit+0x24>)
 80015ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_MspInit+0x24>)
 80015d2:	2101      	movs	r1, #1
 80015d4:	430a      	orrs	r2, r1
 80015d6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <HAL_MspInit+0x24>)
 80015da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015dc:	4b03      	ldr	r3, [pc, #12]	; (80015ec <HAL_MspInit+0x24>)
 80015de:	2180      	movs	r1, #128	; 0x80
 80015e0:	0549      	lsls	r1, r1, #21
 80015e2:	430a      	orrs	r2, r1
 80015e4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40021000 	.word	0x40021000

080015f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <NMI_Handler+0x4>

080015f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <HardFault_Handler+0x4>

080015fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001600:	46c0      	nop			; (mov r8, r8)
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001614:	f000 f910 	bl	8001838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001618:	46c0      	nop			; (mov r8, r8)
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800162c:	4b13      	ldr	r3, [pc, #76]	; (800167c <MX_LPUART1_UART_Init+0x54>)
 800162e:	4a14      	ldr	r2, [pc, #80]	; (8001680 <MX_LPUART1_UART_Init+0x58>)
 8001630:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8001632:	4b12      	ldr	r3, [pc, #72]	; (800167c <MX_LPUART1_UART_Init+0x54>)
 8001634:	2296      	movs	r2, #150	; 0x96
 8001636:	0192      	lsls	r2, r2, #6
 8001638:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <MX_LPUART1_UART_Init+0x54>)
 800163c:	2280      	movs	r2, #128	; 0x80
 800163e:	0552      	lsls	r2, r2, #21
 8001640:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <MX_LPUART1_UART_Init+0x54>)
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <MX_LPUART1_UART_Init+0x54>)
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <MX_LPUART1_UART_Init+0x54>)
 8001650:	220c      	movs	r2, #12
 8001652:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <MX_LPUART1_UART_Init+0x54>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <MX_LPUART1_UART_Init+0x54>)
 800165c:	2200      	movs	r2, #0
 800165e:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <MX_LPUART1_UART_Init+0x54>)
 8001662:	2200      	movs	r2, #0
 8001664:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001666:	4b05      	ldr	r3, [pc, #20]	; (800167c <MX_LPUART1_UART_Init+0x54>)
 8001668:	0018      	movs	r0, r3
 800166a:	f002 f9ff 	bl	8003a6c <HAL_UART_Init>
 800166e:	1e03      	subs	r3, r0, #0
 8001670:	d001      	beq.n	8001676 <MX_LPUART1_UART_Init+0x4e>
  {
    Error_Handler();
 8001672:	f7ff ffa3 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	200000f0 	.word	0x200000f0
 8001680:	40004800 	.word	0x40004800

08001684 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b089      	sub	sp, #36	; 0x24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	240c      	movs	r4, #12
 800168e:	193b      	adds	r3, r7, r4
 8001690:	0018      	movs	r0, r3
 8001692:	2314      	movs	r3, #20
 8001694:	001a      	movs	r2, r3
 8001696:	2100      	movs	r1, #0
 8001698:	f002 ff74 	bl	8004584 <memset>
  if(uartHandle->Instance==LPUART1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a17      	ldr	r2, [pc, #92]	; (8001700 <HAL_UART_MspInit+0x7c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d128      	bne.n	80016f8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80016a6:	4b17      	ldr	r3, [pc, #92]	; (8001704 <HAL_UART_MspInit+0x80>)
 80016a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016aa:	4b16      	ldr	r3, [pc, #88]	; (8001704 <HAL_UART_MspInit+0x80>)
 80016ac:	2180      	movs	r1, #128	; 0x80
 80016ae:	02c9      	lsls	r1, r1, #11
 80016b0:	430a      	orrs	r2, r1
 80016b2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b4:	4b13      	ldr	r3, [pc, #76]	; (8001704 <HAL_UART_MspInit+0x80>)
 80016b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_UART_MspInit+0x80>)
 80016ba:	2104      	movs	r1, #4
 80016bc:	430a      	orrs	r2, r1
 80016be:	62da      	str	r2, [r3, #44]	; 0x2c
 80016c0:	4b10      	ldr	r3, [pc, #64]	; (8001704 <HAL_UART_MspInit+0x80>)
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	2204      	movs	r2, #4
 80016c6:	4013      	ands	r3, r2
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin;
 80016cc:	0021      	movs	r1, r4
 80016ce:	187b      	adds	r3, r7, r1
 80016d0:	2203      	movs	r2, #3
 80016d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	187b      	adds	r3, r7, r1
 80016d6:	2202      	movs	r2, #2
 80016d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	187b      	adds	r3, r7, r1
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	2203      	movs	r2, #3
 80016e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80016e6:	187b      	adds	r3, r7, r1
 80016e8:	2206      	movs	r2, #6
 80016ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	4a06      	ldr	r2, [pc, #24]	; (8001708 <HAL_UART_MspInit+0x84>)
 80016f0:	0019      	movs	r1, r3
 80016f2:	0010      	movs	r0, r2
 80016f4:	f000 f994 	bl	8001a20 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80016f8:	46c0      	nop			; (mov r8, r8)
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b009      	add	sp, #36	; 0x24
 80016fe:	bd90      	pop	{r4, r7, pc}
 8001700:	40004800 	.word	0x40004800
 8001704:	40021000 	.word	0x40021000
 8001708:	50000800 	.word	0x50000800

0800170c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800170c:	4813      	ldr	r0, [pc, #76]	; (800175c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800170e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001710:	f7ff ff85 	bl	800161e <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001714:	4812      	ldr	r0, [pc, #72]	; (8001760 <LoopForever+0x6>)
    LDR R1, [R0]
 8001716:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001718:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800171a:	4a12      	ldr	r2, [pc, #72]	; (8001764 <LoopForever+0xa>)
    CMP R1, R2
 800171c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800171e:	d105      	bne.n	800172c <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001720:	4811      	ldr	r0, [pc, #68]	; (8001768 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001722:	4912      	ldr	r1, [pc, #72]	; (800176c <LoopForever+0x12>)
    STR R1, [R0]
 8001724:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001726:	4812      	ldr	r0, [pc, #72]	; (8001770 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001728:	4912      	ldr	r1, [pc, #72]	; (8001774 <LoopForever+0x1a>)
    STR R1, [R0]
 800172a:	6001      	str	r1, [r0, #0]

0800172c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800172c:	4812      	ldr	r0, [pc, #72]	; (8001778 <LoopForever+0x1e>)
  ldr r1, =_edata
 800172e:	4913      	ldr	r1, [pc, #76]	; (800177c <LoopForever+0x22>)
  ldr r2, =_sidata
 8001730:	4a13      	ldr	r2, [pc, #76]	; (8001780 <LoopForever+0x26>)
  movs r3, #0
 8001732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001734:	e002      	b.n	800173c <LoopCopyDataInit>

08001736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173a:	3304      	adds	r3, #4

0800173c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800173c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001740:	d3f9      	bcc.n	8001736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001742:	4a10      	ldr	r2, [pc, #64]	; (8001784 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001744:	4c10      	ldr	r4, [pc, #64]	; (8001788 <LoopForever+0x2e>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001748:	e001      	b.n	800174e <LoopFillZerobss>

0800174a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800174c:	3204      	adds	r2, #4

0800174e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001750:	d3fb      	bcc.n	800174a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001752:	f002 fef3 	bl	800453c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001756:	f7ff fdf5 	bl	8001344 <main>

0800175a <LoopForever>:

LoopForever:
    b LoopForever
 800175a:	e7fe      	b.n	800175a <LoopForever>
   ldr   r0, =_estack
 800175c:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8001760:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001764:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001768:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 800176c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001770:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001774:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800177c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001780:	0800464c 	.word	0x0800464c
  ldr r2, =_sbss
 8001784:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001788:	2000017c 	.word	0x2000017c

0800178c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800178c:	e7fe      	b.n	800178c <ADC1_IRQHandler>
	...

08001790 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001796:	1dfb      	adds	r3, r7, #7
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <HAL_Init+0x3c>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <HAL_Init+0x3c>)
 80017a2:	2140      	movs	r1, #64	; 0x40
 80017a4:	430a      	orrs	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017a8:	2003      	movs	r0, #3
 80017aa:	f000 f811 	bl	80017d0 <HAL_InitTick>
 80017ae:	1e03      	subs	r3, r0, #0
 80017b0:	d003      	beq.n	80017ba <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80017b2:	1dfb      	adds	r3, r7, #7
 80017b4:	2201      	movs	r2, #1
 80017b6:	701a      	strb	r2, [r3, #0]
 80017b8:	e001      	b.n	80017be <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017ba:	f7ff ff05 	bl	80015c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017be:	1dfb      	adds	r3, r7, #7
 80017c0:	781b      	ldrb	r3, [r3, #0]
}
 80017c2:	0018      	movs	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	b002      	add	sp, #8
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	40022000 	.word	0x40022000

080017d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d0:	b590      	push	{r4, r7, lr}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <HAL_InitTick+0x5c>)
 80017da:	681c      	ldr	r4, [r3, #0]
 80017dc:	4b14      	ldr	r3, [pc, #80]	; (8001830 <HAL_InitTick+0x60>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	0019      	movs	r1, r3
 80017e2:	23fa      	movs	r3, #250	; 0xfa
 80017e4:	0098      	lsls	r0, r3, #2
 80017e6:	f7fe fc8f 	bl	8000108 <__udivsi3>
 80017ea:	0003      	movs	r3, r0
 80017ec:	0019      	movs	r1, r3
 80017ee:	0020      	movs	r0, r4
 80017f0:	f7fe fc8a 	bl	8000108 <__udivsi3>
 80017f4:	0003      	movs	r3, r0
 80017f6:	0018      	movs	r0, r3
 80017f8:	f000 f905 	bl	8001a06 <HAL_SYSTICK_Config>
 80017fc:	1e03      	subs	r3, r0, #0
 80017fe:	d001      	beq.n	8001804 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e00f      	b.n	8001824 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b03      	cmp	r3, #3
 8001808:	d80b      	bhi.n	8001822 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	2301      	movs	r3, #1
 800180e:	425b      	negs	r3, r3
 8001810:	2200      	movs	r2, #0
 8001812:	0018      	movs	r0, r3
 8001814:	f000 f8e2 	bl	80019dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_InitTick+0x64>)
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
 8001820:	e000      	b.n	8001824 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
}
 8001824:	0018      	movs	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	b003      	add	sp, #12
 800182a:	bd90      	pop	{r4, r7, pc}
 800182c:	20000000 	.word	0x20000000
 8001830:	20000008 	.word	0x20000008
 8001834:	20000004 	.word	0x20000004

08001838 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_IncTick+0x1c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	001a      	movs	r2, r3
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_IncTick+0x20>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	18d2      	adds	r2, r2, r3
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <HAL_IncTick+0x20>)
 800184a:	601a      	str	r2, [r3, #0]
}
 800184c:	46c0      	nop			; (mov r8, r8)
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	20000008 	.word	0x20000008
 8001858:	20000178 	.word	0x20000178

0800185c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  return uwTick;
 8001860:	4b02      	ldr	r3, [pc, #8]	; (800186c <HAL_GetTick+0x10>)
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	0018      	movs	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	20000178 	.word	0x20000178

08001870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001878:	f7ff fff0 	bl	800185c <HAL_GetTick>
 800187c:	0003      	movs	r3, r0
 800187e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	3301      	adds	r3, #1
 8001888:	d005      	beq.n	8001896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_Delay+0x44>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	001a      	movs	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	189b      	adds	r3, r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	f7ff ffe0 	bl	800185c <HAL_GetTick>
 800189c:	0002      	movs	r2, r0
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d8f7      	bhi.n	8001898 <HAL_Delay+0x28>
  {
  }
}
 80018a8:	46c0      	nop			; (mov r8, r8)
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	46bd      	mov	sp, r7
 80018ae:	b004      	add	sp, #16
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	20000008 	.word	0x20000008

080018b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b8:	b590      	push	{r4, r7, lr}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	0002      	movs	r2, r0
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	1dfb      	adds	r3, r7, #7
 80018c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018c6:	1dfb      	adds	r3, r7, #7
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b7f      	cmp	r3, #127	; 0x7f
 80018cc:	d828      	bhi.n	8001920 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018ce:	4a2f      	ldr	r2, [pc, #188]	; (800198c <__NVIC_SetPriority+0xd4>)
 80018d0:	1dfb      	adds	r3, r7, #7
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	b25b      	sxtb	r3, r3
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	33c0      	adds	r3, #192	; 0xc0
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	589b      	ldr	r3, [r3, r2]
 80018de:	1dfa      	adds	r2, r7, #7
 80018e0:	7812      	ldrb	r2, [r2, #0]
 80018e2:	0011      	movs	r1, r2
 80018e4:	2203      	movs	r2, #3
 80018e6:	400a      	ands	r2, r1
 80018e8:	00d2      	lsls	r2, r2, #3
 80018ea:	21ff      	movs	r1, #255	; 0xff
 80018ec:	4091      	lsls	r1, r2
 80018ee:	000a      	movs	r2, r1
 80018f0:	43d2      	mvns	r2, r2
 80018f2:	401a      	ands	r2, r3
 80018f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	019b      	lsls	r3, r3, #6
 80018fa:	22ff      	movs	r2, #255	; 0xff
 80018fc:	401a      	ands	r2, r3
 80018fe:	1dfb      	adds	r3, r7, #7
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	0018      	movs	r0, r3
 8001904:	2303      	movs	r3, #3
 8001906:	4003      	ands	r3, r0
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800190c:	481f      	ldr	r0, [pc, #124]	; (800198c <__NVIC_SetPriority+0xd4>)
 800190e:	1dfb      	adds	r3, r7, #7
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	b25b      	sxtb	r3, r3
 8001914:	089b      	lsrs	r3, r3, #2
 8001916:	430a      	orrs	r2, r1
 8001918:	33c0      	adds	r3, #192	; 0xc0
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800191e:	e031      	b.n	8001984 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001920:	4a1b      	ldr	r2, [pc, #108]	; (8001990 <__NVIC_SetPriority+0xd8>)
 8001922:	1dfb      	adds	r3, r7, #7
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	0019      	movs	r1, r3
 8001928:	230f      	movs	r3, #15
 800192a:	400b      	ands	r3, r1
 800192c:	3b08      	subs	r3, #8
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	3306      	adds	r3, #6
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	18d3      	adds	r3, r2, r3
 8001936:	3304      	adds	r3, #4
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	1dfa      	adds	r2, r7, #7
 800193c:	7812      	ldrb	r2, [r2, #0]
 800193e:	0011      	movs	r1, r2
 8001940:	2203      	movs	r2, #3
 8001942:	400a      	ands	r2, r1
 8001944:	00d2      	lsls	r2, r2, #3
 8001946:	21ff      	movs	r1, #255	; 0xff
 8001948:	4091      	lsls	r1, r2
 800194a:	000a      	movs	r2, r1
 800194c:	43d2      	mvns	r2, r2
 800194e:	401a      	ands	r2, r3
 8001950:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	019b      	lsls	r3, r3, #6
 8001956:	22ff      	movs	r2, #255	; 0xff
 8001958:	401a      	ands	r2, r3
 800195a:	1dfb      	adds	r3, r7, #7
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	0018      	movs	r0, r3
 8001960:	2303      	movs	r3, #3
 8001962:	4003      	ands	r3, r0
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001968:	4809      	ldr	r0, [pc, #36]	; (8001990 <__NVIC_SetPriority+0xd8>)
 800196a:	1dfb      	adds	r3, r7, #7
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	001c      	movs	r4, r3
 8001970:	230f      	movs	r3, #15
 8001972:	4023      	ands	r3, r4
 8001974:	3b08      	subs	r3, #8
 8001976:	089b      	lsrs	r3, r3, #2
 8001978:	430a      	orrs	r2, r1
 800197a:	3306      	adds	r3, #6
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	18c3      	adds	r3, r0, r3
 8001980:	3304      	adds	r3, #4
 8001982:	601a      	str	r2, [r3, #0]
}
 8001984:	46c0      	nop			; (mov r8, r8)
 8001986:	46bd      	mov	sp, r7
 8001988:	b003      	add	sp, #12
 800198a:	bd90      	pop	{r4, r7, pc}
 800198c:	e000e100 	.word	0xe000e100
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	1e5a      	subs	r2, r3, #1
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	045b      	lsls	r3, r3, #17
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d301      	bcc.n	80019ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a8:	2301      	movs	r3, #1
 80019aa:	e010      	b.n	80019ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <SysTick_Config+0x44>)
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	3a01      	subs	r2, #1
 80019b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b4:	2301      	movs	r3, #1
 80019b6:	425b      	negs	r3, r3
 80019b8:	2103      	movs	r1, #3
 80019ba:	0018      	movs	r0, r3
 80019bc:	f7ff ff7c 	bl	80018b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <SysTick_Config+0x44>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c6:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <SysTick_Config+0x44>)
 80019c8:	2207      	movs	r2, #7
 80019ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	0018      	movs	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	b002      	add	sp, #8
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	e000e010 	.word	0xe000e010

080019dc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	210f      	movs	r1, #15
 80019e8:	187b      	adds	r3, r7, r1
 80019ea:	1c02      	adds	r2, r0, #0
 80019ec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	187b      	adds	r3, r7, r1
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	b25b      	sxtb	r3, r3
 80019f6:	0011      	movs	r1, r2
 80019f8:	0018      	movs	r0, r3
 80019fa:	f7ff ff5d 	bl	80018b8 <__NVIC_SetPriority>
}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	46bd      	mov	sp, r7
 8001a02:	b004      	add	sp, #16
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	0018      	movs	r0, r3
 8001a12:	f7ff ffbf 	bl	8001994 <SysTick_Config>
 8001a16:	0003      	movs	r3, r0
}
 8001a18:	0018      	movs	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	b002      	add	sp, #8
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a36:	e155      	b.n	8001ce4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	4091      	lsls	r1, r2
 8001a42:	000a      	movs	r2, r1
 8001a44:	4013      	ands	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d100      	bne.n	8001a50 <HAL_GPIO_Init+0x30>
 8001a4e:	e146      	b.n	8001cde <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2203      	movs	r2, #3
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d005      	beq.n	8001a68 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2203      	movs	r2, #3
 8001a62:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d130      	bne.n	8001aca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	409a      	lsls	r2, r3
 8001a76:	0013      	movs	r3, r2
 8001a78:	43da      	mvns	r2, r3
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	409a      	lsls	r2, r3
 8001a8a:	0013      	movs	r3, r2
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	0013      	movs	r3, r2
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	091b      	lsrs	r3, r3, #4
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	409a      	lsls	r2, r3
 8001abc:	0013      	movs	r3, r2
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2203      	movs	r2, #3
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d017      	beq.n	8001b06 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	0013      	movs	r3, r2
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	409a      	lsls	r2, r3
 8001af8:	0013      	movs	r3, r2
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d123      	bne.n	8001b5a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	08da      	lsrs	r2, r3, #3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3208      	adds	r2, #8
 8001b1a:	0092      	lsls	r2, r2, #2
 8001b1c:	58d3      	ldr	r3, [r2, r3]
 8001b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	2207      	movs	r2, #7
 8001b24:	4013      	ands	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	220f      	movs	r2, #15
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	0013      	movs	r3, r2
 8001b2e:	43da      	mvns	r2, r3
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	691a      	ldr	r2, [r3, #16]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2107      	movs	r1, #7
 8001b3e:	400b      	ands	r3, r1
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	409a      	lsls	r2, r3
 8001b44:	0013      	movs	r3, r2
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	08da      	lsrs	r2, r3, #3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3208      	adds	r2, #8
 8001b54:	0092      	lsls	r2, r2, #2
 8001b56:	6939      	ldr	r1, [r7, #16]
 8001b58:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2203      	movs	r2, #3
 8001b66:	409a      	lsls	r2, r3
 8001b68:	0013      	movs	r3, r2
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2203      	movs	r2, #3
 8001b78:	401a      	ands	r2, r3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	0013      	movs	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	23c0      	movs	r3, #192	; 0xc0
 8001b94:	029b      	lsls	r3, r3, #10
 8001b96:	4013      	ands	r3, r2
 8001b98:	d100      	bne.n	8001b9c <HAL_GPIO_Init+0x17c>
 8001b9a:	e0a0      	b.n	8001cde <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9c:	4b57      	ldr	r3, [pc, #348]	; (8001cfc <HAL_GPIO_Init+0x2dc>)
 8001b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ba0:	4b56      	ldr	r3, [pc, #344]	; (8001cfc <HAL_GPIO_Init+0x2dc>)
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ba8:	4a55      	ldr	r2, [pc, #340]	; (8001d00 <HAL_GPIO_Init+0x2e0>)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	3302      	adds	r3, #2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	589b      	ldr	r3, [r3, r2]
 8001bb4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	2203      	movs	r2, #3
 8001bba:	4013      	ands	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	220f      	movs	r2, #15
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	0013      	movs	r3, r2
 8001bc4:	43da      	mvns	r2, r3
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	23a0      	movs	r3, #160	; 0xa0
 8001bd0:	05db      	lsls	r3, r3, #23
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d01f      	beq.n	8001c16 <HAL_GPIO_Init+0x1f6>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a4a      	ldr	r2, [pc, #296]	; (8001d04 <HAL_GPIO_Init+0x2e4>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d019      	beq.n	8001c12 <HAL_GPIO_Init+0x1f2>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a49      	ldr	r2, [pc, #292]	; (8001d08 <HAL_GPIO_Init+0x2e8>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d013      	beq.n	8001c0e <HAL_GPIO_Init+0x1ee>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a48      	ldr	r2, [pc, #288]	; (8001d0c <HAL_GPIO_Init+0x2ec>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00d      	beq.n	8001c0a <HAL_GPIO_Init+0x1ea>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a47      	ldr	r2, [pc, #284]	; (8001d10 <HAL_GPIO_Init+0x2f0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d007      	beq.n	8001c06 <HAL_GPIO_Init+0x1e6>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a46      	ldr	r2, [pc, #280]	; (8001d14 <HAL_GPIO_Init+0x2f4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_GPIO_Init+0x1e2>
 8001bfe:	2305      	movs	r3, #5
 8001c00:	e00a      	b.n	8001c18 <HAL_GPIO_Init+0x1f8>
 8001c02:	2306      	movs	r3, #6
 8001c04:	e008      	b.n	8001c18 <HAL_GPIO_Init+0x1f8>
 8001c06:	2304      	movs	r3, #4
 8001c08:	e006      	b.n	8001c18 <HAL_GPIO_Init+0x1f8>
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e004      	b.n	8001c18 <HAL_GPIO_Init+0x1f8>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e002      	b.n	8001c18 <HAL_GPIO_Init+0x1f8>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <HAL_GPIO_Init+0x1f8>
 8001c16:	2300      	movs	r3, #0
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	2103      	movs	r1, #3
 8001c1c:	400a      	ands	r2, r1
 8001c1e:	0092      	lsls	r2, r2, #2
 8001c20:	4093      	lsls	r3, r2
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c28:	4935      	ldr	r1, [pc, #212]	; (8001d00 <HAL_GPIO_Init+0x2e0>)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	089b      	lsrs	r3, r3, #2
 8001c2e:	3302      	adds	r3, #2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c36:	4b38      	ldr	r3, [pc, #224]	; (8001d18 <HAL_GPIO_Init+0x2f8>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	43da      	mvns	r2, r3
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	4013      	ands	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	035b      	lsls	r3, r3, #13
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c5a:	4b2f      	ldr	r3, [pc, #188]	; (8001d18 <HAL_GPIO_Init+0x2f8>)
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001c60:	4b2d      	ldr	r3, [pc, #180]	; (8001d18 <HAL_GPIO_Init+0x2f8>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	43da      	mvns	r2, r3
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	039b      	lsls	r3, r3, #14
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c84:	4b24      	ldr	r3, [pc, #144]	; (8001d18 <HAL_GPIO_Init+0x2f8>)
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001c8a:	4b23      	ldr	r3, [pc, #140]	; (8001d18 <HAL_GPIO_Init+0x2f8>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	43da      	mvns	r2, r3
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4013      	ands	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	2380      	movs	r3, #128	; 0x80
 8001ca0:	029b      	lsls	r3, r3, #10
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cae:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <HAL_GPIO_Init+0x2f8>)
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cb4:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <HAL_GPIO_Init+0x2f8>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	43da      	mvns	r2, r3
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	025b      	lsls	r3, r3, #9
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <HAL_GPIO_Init+0x2f8>)
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	40da      	lsrs	r2, r3
 8001cec:	1e13      	subs	r3, r2, #0
 8001cee:	d000      	beq.n	8001cf2 <HAL_GPIO_Init+0x2d2>
 8001cf0:	e6a2      	b.n	8001a38 <HAL_GPIO_Init+0x18>
  }
}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	46c0      	nop			; (mov r8, r8)
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b006      	add	sp, #24
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40010000 	.word	0x40010000
 8001d04:	50000400 	.word	0x50000400
 8001d08:	50000800 	.word	0x50000800
 8001d0c:	50000c00 	.word	0x50000c00
 8001d10:	50001000 	.word	0x50001000
 8001d14:	50001c00 	.word	0x50001c00
 8001d18:	40010400 	.word	0x40010400

08001d1c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	0008      	movs	r0, r1
 8001d26:	0011      	movs	r1, r2
 8001d28:	1cbb      	adds	r3, r7, #2
 8001d2a:	1c02      	adds	r2, r0, #0
 8001d2c:	801a      	strh	r2, [r3, #0]
 8001d2e:	1c7b      	adds	r3, r7, #1
 8001d30:	1c0a      	adds	r2, r1, #0
 8001d32:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d34:	1c7b      	adds	r3, r7, #1
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d004      	beq.n	8001d46 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d3c:	1cbb      	adds	r3, r7, #2
 8001d3e:	881a      	ldrh	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001d44:	e003      	b.n	8001d4e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001d46:	1cbb      	adds	r3, r7, #2
 8001d48:	881a      	ldrh	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	46bd      	mov	sp, r7
 8001d52:	b002      	add	sp, #8
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b084      	sub	sp, #16
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	000a      	movs	r2, r1
 8001d60:	1cbb      	adds	r3, r7, #2
 8001d62:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d6a:	1cbb      	adds	r3, r7, #2
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	4013      	ands	r3, r2
 8001d72:	041a      	lsls	r2, r3, #16
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	1cb9      	adds	r1, r7, #2
 8001d7a:	8809      	ldrh	r1, [r1, #0]
 8001d7c:	400b      	ands	r3, r1
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	619a      	str	r2, [r3, #24]
}
 8001d84:	46c0      	nop			; (mov r8, r8)
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b004      	add	sp, #16
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e082      	b.n	8001ea4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2241      	movs	r2, #65	; 0x41
 8001da2:	5c9b      	ldrb	r3, [r3, r2]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d107      	bne.n	8001dba <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2240      	movs	r2, #64	; 0x40
 8001dae:	2100      	movs	r1, #0
 8001db0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	0018      	movs	r0, r3
 8001db6:	f7ff fa41 	bl	800123c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2241      	movs	r2, #65	; 0x41
 8001dbe:	2124      	movs	r1, #36	; 0x24
 8001dc0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2101      	movs	r1, #1
 8001dce:	438a      	bics	r2, r1
 8001dd0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4934      	ldr	r1, [pc, #208]	; (8001eac <HAL_I2C_Init+0x120>)
 8001ddc:	400a      	ands	r2, r1
 8001dde:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4931      	ldr	r1, [pc, #196]	; (8001eb0 <HAL_I2C_Init+0x124>)
 8001dec:	400a      	ands	r2, r1
 8001dee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d108      	bne.n	8001e0a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2180      	movs	r1, #128	; 0x80
 8001e02:	0209      	lsls	r1, r1, #8
 8001e04:	430a      	orrs	r2, r1
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	e007      	b.n	8001e1a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2184      	movs	r1, #132	; 0x84
 8001e14:	0209      	lsls	r1, r1, #8
 8001e16:	430a      	orrs	r2, r1
 8001e18:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d104      	bne.n	8001e2c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2280      	movs	r2, #128	; 0x80
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	491f      	ldr	r1, [pc, #124]	; (8001eb4 <HAL_I2C_Init+0x128>)
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	491a      	ldr	r1, [pc, #104]	; (8001eb0 <HAL_I2C_Init+0x124>)
 8001e48:	400a      	ands	r2, r1
 8001e4a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	431a      	orrs	r2, r3
 8001e56:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69d9      	ldr	r1, [r3, #28]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a1a      	ldr	r2, [r3, #32]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2101      	movs	r1, #1
 8001e82:	430a      	orrs	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2241      	movs	r2, #65	; 0x41
 8001e90:	2120      	movs	r1, #32
 8001e92:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2242      	movs	r2, #66	; 0x42
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	b002      	add	sp, #8
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	f0ffffff 	.word	0xf0ffffff
 8001eb0:	ffff7fff 	.word	0xffff7fff
 8001eb4:	02008000 	.word	0x02008000

08001eb8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eb8:	b590      	push	{r4, r7, lr}
 8001eba:	b089      	sub	sp, #36	; 0x24
 8001ebc:	af02      	add	r7, sp, #8
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	000c      	movs	r4, r1
 8001ec2:	0010      	movs	r0, r2
 8001ec4:	0019      	movs	r1, r3
 8001ec6:	230a      	movs	r3, #10
 8001ec8:	18fb      	adds	r3, r7, r3
 8001eca:	1c22      	adds	r2, r4, #0
 8001ecc:	801a      	strh	r2, [r3, #0]
 8001ece:	2308      	movs	r3, #8
 8001ed0:	18fb      	adds	r3, r7, r3
 8001ed2:	1c02      	adds	r2, r0, #0
 8001ed4:	801a      	strh	r2, [r3, #0]
 8001ed6:	1dbb      	adds	r3, r7, #6
 8001ed8:	1c0a      	adds	r2, r1, #0
 8001eda:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2241      	movs	r2, #65	; 0x41
 8001ee0:	5c9b      	ldrb	r3, [r3, r2]
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b20      	cmp	r3, #32
 8001ee6:	d000      	beq.n	8001eea <HAL_I2C_Mem_Write+0x32>
 8001ee8:	e10c      	b.n	8002104 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d004      	beq.n	8001efa <HAL_I2C_Mem_Write+0x42>
 8001ef0:	232c      	movs	r3, #44	; 0x2c
 8001ef2:	18fb      	adds	r3, r7, r3
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d105      	bne.n	8001f06 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2280      	movs	r2, #128	; 0x80
 8001efe:	0092      	lsls	r2, r2, #2
 8001f00:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e0ff      	b.n	8002106 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2240      	movs	r2, #64	; 0x40
 8001f0a:	5c9b      	ldrb	r3, [r3, r2]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <HAL_I2C_Mem_Write+0x5c>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e0f8      	b.n	8002106 <HAL_I2C_Mem_Write+0x24e>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2240      	movs	r2, #64	; 0x40
 8001f18:	2101      	movs	r1, #1
 8001f1a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f1c:	f7ff fc9e 	bl	800185c <HAL_GetTick>
 8001f20:	0003      	movs	r3, r0
 8001f22:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	0219      	lsls	r1, r3, #8
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	2319      	movs	r3, #25
 8001f30:	2201      	movs	r2, #1
 8001f32:	f000 fc25 	bl	8002780 <I2C_WaitOnFlagUntilTimeout>
 8001f36:	1e03      	subs	r3, r0, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e0e3      	b.n	8002106 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2241      	movs	r2, #65	; 0x41
 8001f42:	2121      	movs	r1, #33	; 0x21
 8001f44:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2242      	movs	r2, #66	; 0x42
 8001f4a:	2140      	movs	r1, #64	; 0x40
 8001f4c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	222c      	movs	r2, #44	; 0x2c
 8001f5e:	18ba      	adds	r2, r7, r2
 8001f60:	8812      	ldrh	r2, [r2, #0]
 8001f62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f6a:	1dbb      	adds	r3, r7, #6
 8001f6c:	881c      	ldrh	r4, [r3, #0]
 8001f6e:	2308      	movs	r3, #8
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	881a      	ldrh	r2, [r3, #0]
 8001f74:	230a      	movs	r3, #10
 8001f76:	18fb      	adds	r3, r7, r3
 8001f78:	8819      	ldrh	r1, [r3, #0]
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	0023      	movs	r3, r4
 8001f86:	f000 fb13 	bl	80025b0 <I2C_RequestMemoryWrite>
 8001f8a:	1e03      	subs	r3, r0, #0
 8001f8c:	d005      	beq.n	8001f9a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2240      	movs	r2, #64	; 0x40
 8001f92:	2100      	movs	r1, #0
 8001f94:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e0b5      	b.n	8002106 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	2bff      	cmp	r3, #255	; 0xff
 8001fa2:	d911      	bls.n	8001fc8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	22ff      	movs	r2, #255	; 0xff
 8001fa8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	045c      	lsls	r4, r3, #17
 8001fb4:	230a      	movs	r3, #10
 8001fb6:	18fb      	adds	r3, r7, r3
 8001fb8:	8819      	ldrh	r1, [r3, #0]
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	0023      	movs	r3, r4
 8001fc2:	f000 fdb5 	bl	8002b30 <I2C_TransferConfig>
 8001fc6:	e012      	b.n	8001fee <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	049c      	lsls	r4, r3, #18
 8001fdc:	230a      	movs	r3, #10
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	8819      	ldrh	r1, [r3, #0]
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	0023      	movs	r3, r4
 8001fea:	f000 fda1 	bl	8002b30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	f000 fc11 	bl	800281c <I2C_WaitOnTXISFlagUntilTimeout>
 8001ffa:	1e03      	subs	r3, r0, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e081      	b.n	8002106 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	781a      	ldrb	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201c:	b29b      	uxth	r3, r3
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202a:	3b01      	subs	r3, #1
 800202c:	b29a      	uxth	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002036:	b29b      	uxth	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d03a      	beq.n	80020b2 <HAL_I2C_Mem_Write+0x1fa>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002040:	2b00      	cmp	r3, #0
 8002042:	d136      	bne.n	80020b2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	0013      	movs	r3, r2
 800204e:	2200      	movs	r2, #0
 8002050:	2180      	movs	r1, #128	; 0x80
 8002052:	f000 fb95 	bl	8002780 <I2C_WaitOnFlagUntilTimeout>
 8002056:	1e03      	subs	r3, r0, #0
 8002058:	d001      	beq.n	800205e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e053      	b.n	8002106 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002062:	b29b      	uxth	r3, r3
 8002064:	2bff      	cmp	r3, #255	; 0xff
 8002066:	d911      	bls.n	800208c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	22ff      	movs	r2, #255	; 0xff
 800206c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002072:	b2da      	uxtb	r2, r3
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	045c      	lsls	r4, r3, #17
 8002078:	230a      	movs	r3, #10
 800207a:	18fb      	adds	r3, r7, r3
 800207c:	8819      	ldrh	r1, [r3, #0]
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	2300      	movs	r3, #0
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	0023      	movs	r3, r4
 8002086:	f000 fd53 	bl	8002b30 <I2C_TransferConfig>
 800208a:	e012      	b.n	80020b2 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209a:	b2da      	uxtb	r2, r3
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	049c      	lsls	r4, r3, #18
 80020a0:	230a      	movs	r3, #10
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	8819      	ldrh	r1, [r3, #0]
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	2300      	movs	r3, #0
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	0023      	movs	r3, r4
 80020ae:	f000 fd3f 	bl	8002b30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d198      	bne.n	8001fee <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	0018      	movs	r0, r3
 80020c4:	f000 fbf0 	bl	80028a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020c8:	1e03      	subs	r3, r0, #0
 80020ca:	d001      	beq.n	80020d0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e01a      	b.n	8002106 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2220      	movs	r2, #32
 80020d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	490b      	ldr	r1, [pc, #44]	; (8002110 <HAL_I2C_Mem_Write+0x258>)
 80020e4:	400a      	ands	r2, r1
 80020e6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2241      	movs	r2, #65	; 0x41
 80020ec:	2120      	movs	r1, #32
 80020ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2242      	movs	r2, #66	; 0x42
 80020f4:	2100      	movs	r1, #0
 80020f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2240      	movs	r2, #64	; 0x40
 80020fc:	2100      	movs	r1, #0
 80020fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	e000      	b.n	8002106 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002104:	2302      	movs	r3, #2
  }
}
 8002106:	0018      	movs	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	b007      	add	sp, #28
 800210c:	bd90      	pop	{r4, r7, pc}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	fe00e800 	.word	0xfe00e800

08002114 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002114:	b590      	push	{r4, r7, lr}
 8002116:	b089      	sub	sp, #36	; 0x24
 8002118:	af02      	add	r7, sp, #8
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	000c      	movs	r4, r1
 800211e:	0010      	movs	r0, r2
 8002120:	0019      	movs	r1, r3
 8002122:	230a      	movs	r3, #10
 8002124:	18fb      	adds	r3, r7, r3
 8002126:	1c22      	adds	r2, r4, #0
 8002128:	801a      	strh	r2, [r3, #0]
 800212a:	2308      	movs	r3, #8
 800212c:	18fb      	adds	r3, r7, r3
 800212e:	1c02      	adds	r2, r0, #0
 8002130:	801a      	strh	r2, [r3, #0]
 8002132:	1dbb      	adds	r3, r7, #6
 8002134:	1c0a      	adds	r2, r1, #0
 8002136:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2241      	movs	r2, #65	; 0x41
 800213c:	5c9b      	ldrb	r3, [r3, r2]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b20      	cmp	r3, #32
 8002142:	d000      	beq.n	8002146 <HAL_I2C_Mem_Read+0x32>
 8002144:	e110      	b.n	8002368 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8002146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002148:	2b00      	cmp	r3, #0
 800214a:	d004      	beq.n	8002156 <HAL_I2C_Mem_Read+0x42>
 800214c:	232c      	movs	r3, #44	; 0x2c
 800214e:	18fb      	adds	r3, r7, r3
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d105      	bne.n	8002162 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2280      	movs	r2, #128	; 0x80
 800215a:	0092      	lsls	r2, r2, #2
 800215c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e103      	b.n	800236a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2240      	movs	r2, #64	; 0x40
 8002166:	5c9b      	ldrb	r3, [r3, r2]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_I2C_Mem_Read+0x5c>
 800216c:	2302      	movs	r3, #2
 800216e:	e0fc      	b.n	800236a <HAL_I2C_Mem_Read+0x256>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2240      	movs	r2, #64	; 0x40
 8002174:	2101      	movs	r1, #1
 8002176:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002178:	f7ff fb70 	bl	800185c <HAL_GetTick>
 800217c:	0003      	movs	r3, r0
 800217e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	0219      	lsls	r1, r3, #8
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	2319      	movs	r3, #25
 800218c:	2201      	movs	r2, #1
 800218e:	f000 faf7 	bl	8002780 <I2C_WaitOnFlagUntilTimeout>
 8002192:	1e03      	subs	r3, r0, #0
 8002194:	d001      	beq.n	800219a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e0e7      	b.n	800236a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2241      	movs	r2, #65	; 0x41
 800219e:	2122      	movs	r1, #34	; 0x22
 80021a0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2242      	movs	r2, #66	; 0x42
 80021a6:	2140      	movs	r1, #64	; 0x40
 80021a8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	222c      	movs	r2, #44	; 0x2c
 80021ba:	18ba      	adds	r2, r7, r2
 80021bc:	8812      	ldrh	r2, [r2, #0]
 80021be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021c6:	1dbb      	adds	r3, r7, #6
 80021c8:	881c      	ldrh	r4, [r3, #0]
 80021ca:	2308      	movs	r3, #8
 80021cc:	18fb      	adds	r3, r7, r3
 80021ce:	881a      	ldrh	r2, [r3, #0]
 80021d0:	230a      	movs	r3, #10
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	8819      	ldrh	r1, [r3, #0]
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	9301      	str	r3, [sp, #4]
 80021dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	0023      	movs	r3, r4
 80021e2:	f000 fa49 	bl	8002678 <I2C_RequestMemoryRead>
 80021e6:	1e03      	subs	r3, r0, #0
 80021e8:	d005      	beq.n	80021f6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2240      	movs	r2, #64	; 0x40
 80021ee:	2100      	movs	r1, #0
 80021f0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e0b9      	b.n	800236a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	2bff      	cmp	r3, #255	; 0xff
 80021fe:	d911      	bls.n	8002224 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	22ff      	movs	r2, #255	; 0xff
 8002204:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220a:	b2da      	uxtb	r2, r3
 800220c:	2380      	movs	r3, #128	; 0x80
 800220e:	045c      	lsls	r4, r3, #17
 8002210:	230a      	movs	r3, #10
 8002212:	18fb      	adds	r3, r7, r3
 8002214:	8819      	ldrh	r1, [r3, #0]
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	4b56      	ldr	r3, [pc, #344]	; (8002374 <HAL_I2C_Mem_Read+0x260>)
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	0023      	movs	r3, r4
 800221e:	f000 fc87 	bl	8002b30 <I2C_TransferConfig>
 8002222:	e012      	b.n	800224a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002228:	b29a      	uxth	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002232:	b2da      	uxtb	r2, r3
 8002234:	2380      	movs	r3, #128	; 0x80
 8002236:	049c      	lsls	r4, r3, #18
 8002238:	230a      	movs	r3, #10
 800223a:	18fb      	adds	r3, r7, r3
 800223c:	8819      	ldrh	r1, [r3, #0]
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	4b4c      	ldr	r3, [pc, #304]	; (8002374 <HAL_I2C_Mem_Read+0x260>)
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	0023      	movs	r3, r4
 8002246:	f000 fc73 	bl	8002b30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800224a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	0013      	movs	r3, r2
 8002254:	2200      	movs	r2, #0
 8002256:	2104      	movs	r1, #4
 8002258:	f000 fa92 	bl	8002780 <I2C_WaitOnFlagUntilTimeout>
 800225c:	1e03      	subs	r3, r0, #0
 800225e:	d001      	beq.n	8002264 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e082      	b.n	800236a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002280:	3b01      	subs	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228c:	b29b      	uxth	r3, r3
 800228e:	3b01      	subs	r3, #1
 8002290:	b29a      	uxth	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229a:	b29b      	uxth	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d03a      	beq.n	8002316 <HAL_I2C_Mem_Read+0x202>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d136      	bne.n	8002316 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	0013      	movs	r3, r2
 80022b2:	2200      	movs	r2, #0
 80022b4:	2180      	movs	r1, #128	; 0x80
 80022b6:	f000 fa63 	bl	8002780 <I2C_WaitOnFlagUntilTimeout>
 80022ba:	1e03      	subs	r3, r0, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e053      	b.n	800236a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	2bff      	cmp	r3, #255	; 0xff
 80022ca:	d911      	bls.n	80022f0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	22ff      	movs	r2, #255	; 0xff
 80022d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	045c      	lsls	r4, r3, #17
 80022dc:	230a      	movs	r3, #10
 80022de:	18fb      	adds	r3, r7, r3
 80022e0:	8819      	ldrh	r1, [r3, #0]
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	2300      	movs	r3, #0
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	0023      	movs	r3, r4
 80022ea:	f000 fc21 	bl	8002b30 <I2C_TransferConfig>
 80022ee:	e012      	b.n	8002316 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	049c      	lsls	r4, r3, #18
 8002304:	230a      	movs	r3, #10
 8002306:	18fb      	adds	r3, r7, r3
 8002308:	8819      	ldrh	r1, [r3, #0]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	2300      	movs	r3, #0
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	0023      	movs	r3, r4
 8002312:	f000 fc0d 	bl	8002b30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231a:	b29b      	uxth	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d194      	bne.n	800224a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	0018      	movs	r0, r3
 8002328:	f000 fabe 	bl	80028a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800232c:	1e03      	subs	r3, r0, #0
 800232e:	d001      	beq.n	8002334 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e01a      	b.n	800236a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2220      	movs	r2, #32
 800233a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	490c      	ldr	r1, [pc, #48]	; (8002378 <HAL_I2C_Mem_Read+0x264>)
 8002348:	400a      	ands	r2, r1
 800234a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2241      	movs	r2, #65	; 0x41
 8002350:	2120      	movs	r1, #32
 8002352:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2242      	movs	r2, #66	; 0x42
 8002358:	2100      	movs	r1, #0
 800235a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2240      	movs	r2, #64	; 0x40
 8002360:	2100      	movs	r1, #0
 8002362:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002364:	2300      	movs	r3, #0
 8002366:	e000      	b.n	800236a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8002368:	2302      	movs	r3, #2
  }
}
 800236a:	0018      	movs	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	b007      	add	sp, #28
 8002370:	bd90      	pop	{r4, r7, pc}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	80002400 	.word	0x80002400
 8002378:	fe00e800 	.word	0xfe00e800

0800237c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08a      	sub	sp, #40	; 0x28
 8002380:	af02      	add	r7, sp, #8
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	607a      	str	r2, [r7, #4]
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	230a      	movs	r3, #10
 800238a:	18fb      	adds	r3, r7, r3
 800238c:	1c0a      	adds	r2, r1, #0
 800238e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2241      	movs	r2, #65	; 0x41
 8002398:	5c9b      	ldrb	r3, [r3, r2]
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b20      	cmp	r3, #32
 800239e:	d000      	beq.n	80023a2 <HAL_I2C_IsDeviceReady+0x26>
 80023a0:	e0fd      	b.n	800259e <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	699a      	ldr	r2, [r3, #24]
 80023a8:	2380      	movs	r3, #128	; 0x80
 80023aa:	021b      	lsls	r3, r3, #8
 80023ac:	401a      	ands	r2, r3
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	021b      	lsls	r3, r3, #8
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d101      	bne.n	80023ba <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80023b6:	2302      	movs	r3, #2
 80023b8:	e0f2      	b.n	80025a0 <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2240      	movs	r2, #64	; 0x40
 80023be:	5c9b      	ldrb	r3, [r3, r2]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_I2C_IsDeviceReady+0x4c>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e0eb      	b.n	80025a0 <HAL_I2C_IsDeviceReady+0x224>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2240      	movs	r2, #64	; 0x40
 80023cc:	2101      	movs	r1, #1
 80023ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2241      	movs	r2, #65	; 0x41
 80023d4:	2124      	movs	r1, #36	; 0x24
 80023d6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d107      	bne.n	80023f6 <HAL_I2C_IsDeviceReady+0x7a>
 80023e6:	230a      	movs	r3, #10
 80023e8:	18fb      	adds	r3, r7, r3
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	059b      	lsls	r3, r3, #22
 80023ee:	0d9b      	lsrs	r3, r3, #22
 80023f0:	4a6d      	ldr	r2, [pc, #436]	; (80025a8 <HAL_I2C_IsDeviceReady+0x22c>)
 80023f2:	431a      	orrs	r2, r3
 80023f4:	e006      	b.n	8002404 <HAL_I2C_IsDeviceReady+0x88>
 80023f6:	230a      	movs	r3, #10
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	059b      	lsls	r3, r3, #22
 80023fe:	0d9b      	lsrs	r3, r3, #22
 8002400:	4a6a      	ldr	r2, [pc, #424]	; (80025ac <HAL_I2C_IsDeviceReady+0x230>)
 8002402:	431a      	orrs	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800240a:	f7ff fa27 	bl	800185c <HAL_GetTick>
 800240e:	0003      	movs	r3, r0
 8002410:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	2220      	movs	r2, #32
 800241a:	4013      	ands	r3, r2
 800241c:	3b20      	subs	r3, #32
 800241e:	425a      	negs	r2, r3
 8002420:	4153      	adcs	r3, r2
 8002422:	b2da      	uxtb	r2, r3
 8002424:	231f      	movs	r3, #31
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	2210      	movs	r2, #16
 8002432:	4013      	ands	r3, r2
 8002434:	3b10      	subs	r3, #16
 8002436:	425a      	negs	r2, r3
 8002438:	4153      	adcs	r3, r2
 800243a:	b2da      	uxtb	r2, r3
 800243c:	231e      	movs	r3, #30
 800243e:	18fb      	adds	r3, r7, r3
 8002440:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002442:	e035      	b.n	80024b0 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	3301      	adds	r3, #1
 8002448:	d01a      	beq.n	8002480 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800244a:	f7ff fa07 	bl	800185c <HAL_GetTick>
 800244e:	0002      	movs	r2, r0
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d302      	bcc.n	8002460 <HAL_I2C_IsDeviceReady+0xe4>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10f      	bne.n	8002480 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2241      	movs	r2, #65	; 0x41
 8002464:	2120      	movs	r1, #32
 8002466:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246c:	2220      	movs	r2, #32
 800246e:	431a      	orrs	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2240      	movs	r2, #64	; 0x40
 8002478:	2100      	movs	r1, #0
 800247a:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e08f      	b.n	80025a0 <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2220      	movs	r2, #32
 8002488:	4013      	ands	r3, r2
 800248a:	3b20      	subs	r3, #32
 800248c:	425a      	negs	r2, r3
 800248e:	4153      	adcs	r3, r2
 8002490:	b2da      	uxtb	r2, r3
 8002492:	231f      	movs	r3, #31
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	2210      	movs	r2, #16
 80024a0:	4013      	ands	r3, r2
 80024a2:	3b10      	subs	r3, #16
 80024a4:	425a      	negs	r2, r3
 80024a6:	4153      	adcs	r3, r2
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	231e      	movs	r3, #30
 80024ac:	18fb      	adds	r3, r7, r3
 80024ae:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80024b0:	231f      	movs	r3, #31
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d104      	bne.n	80024c4 <HAL_I2C_IsDeviceReady+0x148>
 80024ba:	231e      	movs	r3, #30
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0bf      	beq.n	8002444 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	2210      	movs	r2, #16
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b10      	cmp	r3, #16
 80024d0:	d01a      	beq.n	8002508 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	0013      	movs	r3, r2
 80024dc:	2200      	movs	r2, #0
 80024de:	2120      	movs	r1, #32
 80024e0:	f000 f94e 	bl	8002780 <I2C_WaitOnFlagUntilTimeout>
 80024e4:	1e03      	subs	r3, r0, #0
 80024e6:	d001      	beq.n	80024ec <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e059      	b.n	80025a0 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2220      	movs	r2, #32
 80024f2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2241      	movs	r2, #65	; 0x41
 80024f8:	2120      	movs	r1, #32
 80024fa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2240      	movs	r2, #64	; 0x40
 8002500:	2100      	movs	r1, #0
 8002502:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	e04b      	b.n	80025a0 <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	0013      	movs	r3, r2
 8002512:	2200      	movs	r2, #0
 8002514:	2120      	movs	r1, #32
 8002516:	f000 f933 	bl	8002780 <I2C_WaitOnFlagUntilTimeout>
 800251a:	1e03      	subs	r3, r0, #0
 800251c:	d001      	beq.n	8002522 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e03e      	b.n	80025a0 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2210      	movs	r2, #16
 8002528:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2220      	movs	r2, #32
 8002530:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	429a      	cmp	r2, r3
 8002538:	d119      	bne.n	800256e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2180      	movs	r1, #128	; 0x80
 8002546:	01c9      	lsls	r1, r1, #7
 8002548:	430a      	orrs	r2, r1
 800254a:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	0013      	movs	r3, r2
 8002556:	2200      	movs	r2, #0
 8002558:	2120      	movs	r1, #32
 800255a:	f000 f911 	bl	8002780 <I2C_WaitOnFlagUntilTimeout>
 800255e:	1e03      	subs	r3, r0, #0
 8002560:	d001      	beq.n	8002566 <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e01c      	b.n	80025a0 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2220      	movs	r2, #32
 800256c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	3301      	adds	r3, #1
 8002572:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	429a      	cmp	r2, r3
 800257a:	d900      	bls.n	800257e <HAL_I2C_IsDeviceReady+0x202>
 800257c:	e72f      	b.n	80023de <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2241      	movs	r2, #65	; 0x41
 8002582:	2120      	movs	r1, #32
 8002584:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	2220      	movs	r2, #32
 800258c:	431a      	orrs	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2240      	movs	r2, #64	; 0x40
 8002596:	2100      	movs	r1, #0
 8002598:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 800259e:	2302      	movs	r3, #2
  }
}
 80025a0:	0018      	movs	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b008      	add	sp, #32
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	02002000 	.word	0x02002000
 80025ac:	02002800 	.word	0x02002800

080025b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80025b0:	b5b0      	push	{r4, r5, r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	000c      	movs	r4, r1
 80025ba:	0010      	movs	r0, r2
 80025bc:	0019      	movs	r1, r3
 80025be:	250a      	movs	r5, #10
 80025c0:	197b      	adds	r3, r7, r5
 80025c2:	1c22      	adds	r2, r4, #0
 80025c4:	801a      	strh	r2, [r3, #0]
 80025c6:	2308      	movs	r3, #8
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	1c02      	adds	r2, r0, #0
 80025cc:	801a      	strh	r2, [r3, #0]
 80025ce:	1dbb      	adds	r3, r7, #6
 80025d0:	1c0a      	adds	r2, r1, #0
 80025d2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80025d4:	1dbb      	adds	r3, r7, #6
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	045c      	lsls	r4, r3, #17
 80025de:	197b      	adds	r3, r7, r5
 80025e0:	8819      	ldrh	r1, [r3, #0]
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	4b23      	ldr	r3, [pc, #140]	; (8002674 <I2C_RequestMemoryWrite+0xc4>)
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	0023      	movs	r3, r4
 80025ea:	f000 faa1 	bl	8002b30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f0:	6a39      	ldr	r1, [r7, #32]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	0018      	movs	r0, r3
 80025f6:	f000 f911 	bl	800281c <I2C_WaitOnTXISFlagUntilTimeout>
 80025fa:	1e03      	subs	r3, r0, #0
 80025fc:	d001      	beq.n	8002602 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e033      	b.n	800266a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002602:	1dbb      	adds	r3, r7, #6
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d107      	bne.n	800261a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800260a:	2308      	movs	r3, #8
 800260c:	18fb      	adds	r3, r7, r3
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	629a      	str	r2, [r3, #40]	; 0x28
 8002618:	e019      	b.n	800264e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800261a:	2308      	movs	r3, #8
 800261c:	18fb      	adds	r3, r7, r3
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	b29b      	uxth	r3, r3
 8002624:	b2da      	uxtb	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800262c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800262e:	6a39      	ldr	r1, [r7, #32]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	0018      	movs	r0, r3
 8002634:	f000 f8f2 	bl	800281c <I2C_WaitOnTXISFlagUntilTimeout>
 8002638:	1e03      	subs	r3, r0, #0
 800263a:	d001      	beq.n	8002640 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e014      	b.n	800266a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002640:	2308      	movs	r3, #8
 8002642:	18fb      	adds	r3, r7, r3
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	b2da      	uxtb	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800264e:	6a3a      	ldr	r2, [r7, #32]
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	0013      	movs	r3, r2
 8002658:	2200      	movs	r2, #0
 800265a:	2180      	movs	r1, #128	; 0x80
 800265c:	f000 f890 	bl	8002780 <I2C_WaitOnFlagUntilTimeout>
 8002660:	1e03      	subs	r3, r0, #0
 8002662:	d001      	beq.n	8002668 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e000      	b.n	800266a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	0018      	movs	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	b004      	add	sp, #16
 8002670:	bdb0      	pop	{r4, r5, r7, pc}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	80002000 	.word	0x80002000

08002678 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002678:	b5b0      	push	{r4, r5, r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af02      	add	r7, sp, #8
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	000c      	movs	r4, r1
 8002682:	0010      	movs	r0, r2
 8002684:	0019      	movs	r1, r3
 8002686:	250a      	movs	r5, #10
 8002688:	197b      	adds	r3, r7, r5
 800268a:	1c22      	adds	r2, r4, #0
 800268c:	801a      	strh	r2, [r3, #0]
 800268e:	2308      	movs	r3, #8
 8002690:	18fb      	adds	r3, r7, r3
 8002692:	1c02      	adds	r2, r0, #0
 8002694:	801a      	strh	r2, [r3, #0]
 8002696:	1dbb      	adds	r3, r7, #6
 8002698:	1c0a      	adds	r2, r1, #0
 800269a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800269c:	1dbb      	adds	r3, r7, #6
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	197b      	adds	r3, r7, r5
 80026a4:	8819      	ldrh	r1, [r3, #0]
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	4b23      	ldr	r3, [pc, #140]	; (8002738 <I2C_RequestMemoryRead+0xc0>)
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	2300      	movs	r3, #0
 80026ae:	f000 fa3f 	bl	8002b30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b4:	6a39      	ldr	r1, [r7, #32]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	0018      	movs	r0, r3
 80026ba:	f000 f8af 	bl	800281c <I2C_WaitOnTXISFlagUntilTimeout>
 80026be:	1e03      	subs	r3, r0, #0
 80026c0:	d001      	beq.n	80026c6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e033      	b.n	800272e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026c6:	1dbb      	adds	r3, r7, #6
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d107      	bne.n	80026de <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026ce:	2308      	movs	r3, #8
 80026d0:	18fb      	adds	r3, r7, r3
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	629a      	str	r2, [r3, #40]	; 0x28
 80026dc:	e019      	b.n	8002712 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80026de:	2308      	movs	r3, #8
 80026e0:	18fb      	adds	r3, r7, r3
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	0a1b      	lsrs	r3, r3, #8
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f2:	6a39      	ldr	r1, [r7, #32]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	0018      	movs	r0, r3
 80026f8:	f000 f890 	bl	800281c <I2C_WaitOnTXISFlagUntilTimeout>
 80026fc:	1e03      	subs	r3, r0, #0
 80026fe:	d001      	beq.n	8002704 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e014      	b.n	800272e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002704:	2308      	movs	r3, #8
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	b2da      	uxtb	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002712:	6a3a      	ldr	r2, [r7, #32]
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	0013      	movs	r3, r2
 800271c:	2200      	movs	r2, #0
 800271e:	2140      	movs	r1, #64	; 0x40
 8002720:	f000 f82e 	bl	8002780 <I2C_WaitOnFlagUntilTimeout>
 8002724:	1e03      	subs	r3, r0, #0
 8002726:	d001      	beq.n	800272c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e000      	b.n	800272e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	0018      	movs	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	b004      	add	sp, #16
 8002734:	bdb0      	pop	{r4, r5, r7, pc}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	80002000 	.word	0x80002000

0800273c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	2202      	movs	r2, #2
 800274c:	4013      	ands	r3, r2
 800274e:	2b02      	cmp	r3, #2
 8002750:	d103      	bne.n	800275a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2200      	movs	r2, #0
 8002758:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	2201      	movs	r2, #1
 8002762:	4013      	ands	r3, r2
 8002764:	2b01      	cmp	r3, #1
 8002766:	d007      	beq.n	8002778 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699a      	ldr	r2, [r3, #24]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2101      	movs	r1, #1
 8002774:	430a      	orrs	r2, r1
 8002776:	619a      	str	r2, [r3, #24]
  }
}
 8002778:	46c0      	nop			; (mov r8, r8)
 800277a:	46bd      	mov	sp, r7
 800277c:	b002      	add	sp, #8
 800277e:	bd80      	pop	{r7, pc}

08002780 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	1dfb      	adds	r3, r7, #7
 800278e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002790:	e030      	b.n	80027f4 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	3301      	adds	r3, #1
 8002796:	d02d      	beq.n	80027f4 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002798:	f7ff f860 	bl	800185c <HAL_GetTick>
 800279c:	0002      	movs	r2, r0
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d302      	bcc.n	80027ae <I2C_WaitOnFlagUntilTimeout+0x2e>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d122      	bne.n	80027f4 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	4013      	ands	r3, r2
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	425a      	negs	r2, r3
 80027be:	4153      	adcs	r3, r2
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	001a      	movs	r2, r3
 80027c4:	1dfb      	adds	r3, r7, #7
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d113      	bne.n	80027f4 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d0:	2220      	movs	r2, #32
 80027d2:	431a      	orrs	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2241      	movs	r2, #65	; 0x41
 80027dc:	2120      	movs	r1, #32
 80027de:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2242      	movs	r2, #66	; 0x42
 80027e4:	2100      	movs	r1, #0
 80027e6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2240      	movs	r2, #64	; 0x40
 80027ec:	2100      	movs	r1, #0
 80027ee:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e00f      	b.n	8002814 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	4013      	ands	r3, r2
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	425a      	negs	r2, r3
 8002804:	4153      	adcs	r3, r2
 8002806:	b2db      	uxtb	r3, r3
 8002808:	001a      	movs	r2, r3
 800280a:	1dfb      	adds	r3, r7, #7
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d0bf      	beq.n	8002792 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	0018      	movs	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	b004      	add	sp, #16
 800281a:	bd80      	pop	{r7, pc}

0800281c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002828:	e032      	b.n	8002890 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	68b9      	ldr	r1, [r7, #8]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	0018      	movs	r0, r3
 8002832:	f000 f87d 	bl	8002930 <I2C_IsErrorOccurred>
 8002836:	1e03      	subs	r3, r0, #0
 8002838:	d001      	beq.n	800283e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e030      	b.n	80028a0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	3301      	adds	r3, #1
 8002842:	d025      	beq.n	8002890 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002844:	f7ff f80a 	bl	800185c <HAL_GetTick>
 8002848:	0002      	movs	r2, r0
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	429a      	cmp	r2, r3
 8002852:	d302      	bcc.n	800285a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d11a      	bne.n	8002890 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	2202      	movs	r2, #2
 8002862:	4013      	ands	r3, r2
 8002864:	2b02      	cmp	r3, #2
 8002866:	d013      	beq.n	8002890 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286c:	2220      	movs	r2, #32
 800286e:	431a      	orrs	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2241      	movs	r2, #65	; 0x41
 8002878:	2120      	movs	r1, #32
 800287a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2242      	movs	r2, #66	; 0x42
 8002880:	2100      	movs	r1, #0
 8002882:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2240      	movs	r2, #64	; 0x40
 8002888:	2100      	movs	r1, #0
 800288a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e007      	b.n	80028a0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	2202      	movs	r2, #2
 8002898:	4013      	ands	r3, r2
 800289a:	2b02      	cmp	r3, #2
 800289c:	d1c5      	bne.n	800282a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	0018      	movs	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	b004      	add	sp, #16
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028b4:	e02f      	b.n	8002916 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68b9      	ldr	r1, [r7, #8]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	0018      	movs	r0, r3
 80028be:	f000 f837 	bl	8002930 <I2C_IsErrorOccurred>
 80028c2:	1e03      	subs	r3, r0, #0
 80028c4:	d001      	beq.n	80028ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e02d      	b.n	8002926 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ca:	f7fe ffc7 	bl	800185c <HAL_GetTick>
 80028ce:	0002      	movs	r2, r0
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d302      	bcc.n	80028e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d11a      	bne.n	8002916 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	2220      	movs	r2, #32
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	d013      	beq.n	8002916 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	2220      	movs	r2, #32
 80028f4:	431a      	orrs	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2241      	movs	r2, #65	; 0x41
 80028fe:	2120      	movs	r1, #32
 8002900:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2242      	movs	r2, #66	; 0x42
 8002906:	2100      	movs	r1, #0
 8002908:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2240      	movs	r2, #64	; 0x40
 800290e:	2100      	movs	r1, #0
 8002910:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e007      	b.n	8002926 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	2220      	movs	r2, #32
 800291e:	4013      	ands	r3, r2
 8002920:	2b20      	cmp	r3, #32
 8002922:	d1c8      	bne.n	80028b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	0018      	movs	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	b004      	add	sp, #16
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002930:	b590      	push	{r4, r7, lr}
 8002932:	b08b      	sub	sp, #44	; 0x2c
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800293c:	2327      	movs	r3, #39	; 0x27
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	2210      	movs	r2, #16
 8002958:	4013      	ands	r3, r2
 800295a:	d100      	bne.n	800295e <I2C_IsErrorOccurred+0x2e>
 800295c:	e082      	b.n	8002a64 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2210      	movs	r2, #16
 8002964:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002966:	e060      	b.n	8002a2a <I2C_IsErrorOccurred+0xfa>
 8002968:	2427      	movs	r4, #39	; 0x27
 800296a:	193b      	adds	r3, r7, r4
 800296c:	193a      	adds	r2, r7, r4
 800296e:	7812      	ldrb	r2, [r2, #0]
 8002970:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	3301      	adds	r3, #1
 8002976:	d058      	beq.n	8002a2a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002978:	f7fe ff70 	bl	800185c <HAL_GetTick>
 800297c:	0002      	movs	r2, r0
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	429a      	cmp	r2, r3
 8002986:	d306      	bcc.n	8002996 <I2C_IsErrorOccurred+0x66>
 8002988:	193b      	adds	r3, r7, r4
 800298a:	193a      	adds	r2, r7, r4
 800298c:	7812      	ldrb	r2, [r2, #0]
 800298e:	701a      	strb	r2, [r3, #0]
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d149      	bne.n	8002a2a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	01db      	lsls	r3, r3, #7
 80029a0:	4013      	ands	r3, r2
 80029a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80029a4:	2013      	movs	r0, #19
 80029a6:	183b      	adds	r3, r7, r0
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	2142      	movs	r1, #66	; 0x42
 80029ac:	5c52      	ldrb	r2, [r2, r1]
 80029ae:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699a      	ldr	r2, [r3, #24]
 80029b6:	2380      	movs	r3, #128	; 0x80
 80029b8:	021b      	lsls	r3, r3, #8
 80029ba:	401a      	ands	r2, r3
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	021b      	lsls	r3, r3, #8
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d126      	bne.n	8002a12 <I2C_IsErrorOccurred+0xe2>
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	01db      	lsls	r3, r3, #7
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d021      	beq.n	8002a12 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80029ce:	183b      	adds	r3, r7, r0
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b20      	cmp	r3, #32
 80029d4:	d01d      	beq.n	8002a12 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2180      	movs	r1, #128	; 0x80
 80029e2:	01c9      	lsls	r1, r1, #7
 80029e4:	430a      	orrs	r2, r1
 80029e6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80029e8:	f7fe ff38 	bl	800185c <HAL_GetTick>
 80029ec:	0003      	movs	r3, r0
 80029ee:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029f0:	e00f      	b.n	8002a12 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80029f2:	f7fe ff33 	bl	800185c <HAL_GetTick>
 80029f6:	0002      	movs	r2, r0
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b19      	cmp	r3, #25
 80029fe:	d908      	bls.n	8002a12 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	2220      	movs	r2, #32
 8002a04:	4313      	orrs	r3, r2
 8002a06:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002a08:	2327      	movs	r3, #39	; 0x27
 8002a0a:	18fb      	adds	r3, r7, r3
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	701a      	strb	r2, [r3, #0]

              break;
 8002a10:	e00b      	b.n	8002a2a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2127      	movs	r1, #39	; 0x27
 8002a1e:	187a      	adds	r2, r7, r1
 8002a20:	1879      	adds	r1, r7, r1
 8002a22:	7809      	ldrb	r1, [r1, #0]
 8002a24:	7011      	strb	r1, [r2, #0]
 8002a26:	2b20      	cmp	r3, #32
 8002a28:	d1e3      	bne.n	80029f2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	2220      	movs	r2, #32
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b20      	cmp	r3, #32
 8002a36:	d004      	beq.n	8002a42 <I2C_IsErrorOccurred+0x112>
 8002a38:	2327      	movs	r3, #39	; 0x27
 8002a3a:	18fb      	adds	r3, r7, r3
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d092      	beq.n	8002968 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002a42:	2327      	movs	r3, #39	; 0x27
 8002a44:	18fb      	adds	r3, r7, r3
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d103      	bne.n	8002a54 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2220      	movs	r2, #32
 8002a52:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	2204      	movs	r2, #4
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002a5c:	2327      	movs	r3, #39	; 0x27
 8002a5e:	18fb      	adds	r3, r7, r3
 8002a60:	2201      	movs	r2, #1
 8002a62:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	2380      	movs	r3, #128	; 0x80
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	4013      	ands	r3, r2
 8002a74:	d00c      	beq.n	8002a90 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2280      	movs	r2, #128	; 0x80
 8002a84:	0052      	lsls	r2, r2, #1
 8002a86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a88:	2327      	movs	r3, #39	; 0x27
 8002a8a:	18fb      	adds	r3, r7, r3
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	2380      	movs	r3, #128	; 0x80
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	4013      	ands	r3, r2
 8002a98:	d00c      	beq.n	8002ab4 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a9a:	6a3b      	ldr	r3, [r7, #32]
 8002a9c:	2208      	movs	r2, #8
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2280      	movs	r2, #128	; 0x80
 8002aa8:	00d2      	lsls	r2, r2, #3
 8002aaa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002aac:	2327      	movs	r3, #39	; 0x27
 8002aae:	18fb      	adds	r3, r7, r3
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	2380      	movs	r3, #128	; 0x80
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4013      	ands	r3, r2
 8002abc:	d00c      	beq.n	8002ad8 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2280      	movs	r2, #128	; 0x80
 8002acc:	0092      	lsls	r2, r2, #2
 8002ace:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ad0:	2327      	movs	r3, #39	; 0x27
 8002ad2:	18fb      	adds	r3, r7, r3
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002ad8:	2327      	movs	r3, #39	; 0x27
 8002ada:	18fb      	adds	r3, r7, r3
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d01d      	beq.n	8002b1e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f7ff fe29 	bl	800273c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	490d      	ldr	r1, [pc, #52]	; (8002b2c <I2C_IsErrorOccurred+0x1fc>)
 8002af6:	400a      	ands	r2, r1
 8002af8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	431a      	orrs	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2241      	movs	r2, #65	; 0x41
 8002b0a:	2120      	movs	r1, #32
 8002b0c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2242      	movs	r2, #66	; 0x42
 8002b12:	2100      	movs	r1, #0
 8002b14:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2240      	movs	r2, #64	; 0x40
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002b1e:	2327      	movs	r3, #39	; 0x27
 8002b20:	18fb      	adds	r3, r7, r3
 8002b22:	781b      	ldrb	r3, [r3, #0]
}
 8002b24:	0018      	movs	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b00b      	add	sp, #44	; 0x2c
 8002b2a:	bd90      	pop	{r4, r7, pc}
 8002b2c:	fe00e800 	.word	0xfe00e800

08002b30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b30:	b590      	push	{r4, r7, lr}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	0008      	movs	r0, r1
 8002b3a:	0011      	movs	r1, r2
 8002b3c:	607b      	str	r3, [r7, #4]
 8002b3e:	240a      	movs	r4, #10
 8002b40:	193b      	adds	r3, r7, r4
 8002b42:	1c02      	adds	r2, r0, #0
 8002b44:	801a      	strh	r2, [r3, #0]
 8002b46:	2009      	movs	r0, #9
 8002b48:	183b      	adds	r3, r7, r0
 8002b4a:	1c0a      	adds	r2, r1, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b4e:	193b      	adds	r3, r7, r4
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	059b      	lsls	r3, r3, #22
 8002b54:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b56:	183b      	adds	r3, r7, r0
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	0419      	lsls	r1, r3, #16
 8002b5c:	23ff      	movs	r3, #255	; 0xff
 8002b5e:	041b      	lsls	r3, r3, #16
 8002b60:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b62:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	085b      	lsrs	r3, r3, #1
 8002b70:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b7a:	0d51      	lsrs	r1, r2, #21
 8002b7c:	2280      	movs	r2, #128	; 0x80
 8002b7e:	00d2      	lsls	r2, r2, #3
 8002b80:	400a      	ands	r2, r1
 8002b82:	4907      	ldr	r1, [pc, #28]	; (8002ba0 <I2C_TransferConfig+0x70>)
 8002b84:	430a      	orrs	r2, r1
 8002b86:	43d2      	mvns	r2, r2
 8002b88:	401a      	ands	r2, r3
 8002b8a:	0011      	movs	r1, r2
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b007      	add	sp, #28
 8002b9c:	bd90      	pop	{r4, r7, pc}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	03ff63ff 	.word	0x03ff63ff

08002ba4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2241      	movs	r2, #65	; 0x41
 8002bb2:	5c9b      	ldrb	r3, [r3, r2]
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b20      	cmp	r3, #32
 8002bb8:	d138      	bne.n	8002c2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2240      	movs	r2, #64	; 0x40
 8002bbe:	5c9b      	ldrb	r3, [r3, r2]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e032      	b.n	8002c2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2240      	movs	r2, #64	; 0x40
 8002bcc:	2101      	movs	r1, #1
 8002bce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2241      	movs	r2, #65	; 0x41
 8002bd4:	2124      	movs	r1, #36	; 0x24
 8002bd6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2101      	movs	r1, #1
 8002be4:	438a      	bics	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4911      	ldr	r1, [pc, #68]	; (8002c38 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002bf4:	400a      	ands	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6819      	ldr	r1, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2101      	movs	r1, #1
 8002c14:	430a      	orrs	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2241      	movs	r2, #65	; 0x41
 8002c1c:	2120      	movs	r1, #32
 8002c1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2240      	movs	r2, #64	; 0x40
 8002c24:	2100      	movs	r1, #0
 8002c26:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	e000      	b.n	8002c2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c2c:	2302      	movs	r3, #2
  }
}
 8002c2e:	0018      	movs	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b002      	add	sp, #8
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	ffffefff 	.word	0xffffefff

08002c3c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2241      	movs	r2, #65	; 0x41
 8002c4a:	5c9b      	ldrb	r3, [r3, r2]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	d139      	bne.n	8002cc6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2240      	movs	r2, #64	; 0x40
 8002c56:	5c9b      	ldrb	r3, [r3, r2]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e033      	b.n	8002cc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2240      	movs	r2, #64	; 0x40
 8002c64:	2101      	movs	r1, #1
 8002c66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2241      	movs	r2, #65	; 0x41
 8002c6c:	2124      	movs	r1, #36	; 0x24
 8002c6e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	438a      	bics	r2, r1
 8002c7e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4a11      	ldr	r2, [pc, #68]	; (8002cd0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	021b      	lsls	r3, r3, #8
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2101      	movs	r1, #1
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2241      	movs	r2, #65	; 0x41
 8002cb6:	2120      	movs	r1, #32
 8002cb8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2240      	movs	r2, #64	; 0x40
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e000      	b.n	8002cc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002cc6:	2302      	movs	r3, #2
  }
}
 8002cc8:	0018      	movs	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b004      	add	sp, #16
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	fffff0ff 	.word	0xfffff0ff

08002cd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd4:	b5b0      	push	{r4, r5, r7, lr}
 8002cd6:	b08a      	sub	sp, #40	; 0x28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d102      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	f000 fb6c 	bl	80033c0 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ce8:	4bc8      	ldr	r3, [pc, #800]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	220c      	movs	r2, #12
 8002cee:	4013      	ands	r3, r2
 8002cf0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cf2:	4bc6      	ldr	r3, [pc, #792]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	2380      	movs	r3, #128	; 0x80
 8002cf8:	025b      	lsls	r3, r3, #9
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2201      	movs	r2, #1
 8002d04:	4013      	ands	r3, r2
 8002d06:	d100      	bne.n	8002d0a <HAL_RCC_OscConfig+0x36>
 8002d08:	e07d      	b.n	8002e06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d007      	beq.n	8002d20 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	2b0c      	cmp	r3, #12
 8002d14:	d112      	bne.n	8002d3c <HAL_RCC_OscConfig+0x68>
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	025b      	lsls	r3, r3, #9
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d10d      	bne.n	8002d3c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d20:	4bba      	ldr	r3, [pc, #744]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	2380      	movs	r3, #128	; 0x80
 8002d26:	029b      	lsls	r3, r3, #10
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d100      	bne.n	8002d2e <HAL_RCC_OscConfig+0x5a>
 8002d2c:	e06a      	b.n	8002e04 <HAL_RCC_OscConfig+0x130>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d166      	bne.n	8002e04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	f000 fb42 	bl	80033c0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	025b      	lsls	r3, r3, #9
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d107      	bne.n	8002d58 <HAL_RCC_OscConfig+0x84>
 8002d48:	4bb0      	ldr	r3, [pc, #704]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4baf      	ldr	r3, [pc, #700]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002d4e:	2180      	movs	r1, #128	; 0x80
 8002d50:	0249      	lsls	r1, r1, #9
 8002d52:	430a      	orrs	r2, r1
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	e027      	b.n	8002da8 <HAL_RCC_OscConfig+0xd4>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	23a0      	movs	r3, #160	; 0xa0
 8002d5e:	02db      	lsls	r3, r3, #11
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d10e      	bne.n	8002d82 <HAL_RCC_OscConfig+0xae>
 8002d64:	4ba9      	ldr	r3, [pc, #676]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4ba8      	ldr	r3, [pc, #672]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002d6a:	2180      	movs	r1, #128	; 0x80
 8002d6c:	02c9      	lsls	r1, r1, #11
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	4ba6      	ldr	r3, [pc, #664]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	4ba5      	ldr	r3, [pc, #660]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002d78:	2180      	movs	r1, #128	; 0x80
 8002d7a:	0249      	lsls	r1, r1, #9
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	e012      	b.n	8002da8 <HAL_RCC_OscConfig+0xd4>
 8002d82:	4ba2      	ldr	r3, [pc, #648]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	4ba1      	ldr	r3, [pc, #644]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002d88:	49a1      	ldr	r1, [pc, #644]	; (8003010 <HAL_RCC_OscConfig+0x33c>)
 8002d8a:	400a      	ands	r2, r1
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	4b9f      	ldr	r3, [pc, #636]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	2380      	movs	r3, #128	; 0x80
 8002d94:	025b      	lsls	r3, r3, #9
 8002d96:	4013      	ands	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4b9b      	ldr	r3, [pc, #620]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	4b9a      	ldr	r3, [pc, #616]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002da2:	499c      	ldr	r1, [pc, #624]	; (8003014 <HAL_RCC_OscConfig+0x340>)
 8002da4:	400a      	ands	r2, r1
 8002da6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d014      	beq.n	8002dda <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7fe fd54 	bl	800185c <HAL_GetTick>
 8002db4:	0003      	movs	r3, r0
 8002db6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dba:	f7fe fd4f 	bl	800185c <HAL_GetTick>
 8002dbe:	0002      	movs	r2, r0
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b64      	cmp	r3, #100	; 0x64
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e2f9      	b.n	80033c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dcc:	4b8f      	ldr	r3, [pc, #572]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	029b      	lsls	r3, r3, #10
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0xe6>
 8002dd8:	e015      	b.n	8002e06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dda:	f7fe fd3f 	bl	800185c <HAL_GetTick>
 8002dde:	0003      	movs	r3, r0
 8002de0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de4:	f7fe fd3a 	bl	800185c <HAL_GetTick>
 8002de8:	0002      	movs	r2, r0
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	; 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e2e4      	b.n	80033c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002df6:	4b85      	ldr	r3, [pc, #532]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	2380      	movs	r3, #128	; 0x80
 8002dfc:	029b      	lsls	r3, r3, #10
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x110>
 8002e02:	e000      	b.n	8002e06 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e04:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d100      	bne.n	8002e12 <HAL_RCC_OscConfig+0x13e>
 8002e10:	e099      	b.n	8002f46 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d009      	beq.n	8002e34 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002e20:	4b7a      	ldr	r3, [pc, #488]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4b79      	ldr	r3, [pc, #484]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002e26:	2120      	movs	r1, #32
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	2220      	movs	r2, #32
 8002e30:	4393      	bics	r3, r2
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d005      	beq.n	8002e46 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	2b0c      	cmp	r3, #12
 8002e3e:	d13e      	bne.n	8002ebe <HAL_RCC_OscConfig+0x1ea>
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d13b      	bne.n	8002ebe <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002e46:	4b71      	ldr	r3, [pc, #452]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2204      	movs	r2, #4
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d004      	beq.n	8002e5a <HAL_RCC_OscConfig+0x186>
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e2b2      	b.n	80033c0 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5a:	4b6c      	ldr	r3, [pc, #432]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	4a6e      	ldr	r2, [pc, #440]	; (8003018 <HAL_RCC_OscConfig+0x344>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	0019      	movs	r1, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	021a      	lsls	r2, r3, #8
 8002e6a:	4b68      	ldr	r3, [pc, #416]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002e70:	4b66      	ldr	r3, [pc, #408]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2209      	movs	r2, #9
 8002e76:	4393      	bics	r3, r2
 8002e78:	0019      	movs	r1, r3
 8002e7a:	4b64      	ldr	r3, [pc, #400]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e82:	f000 fbeb 	bl	800365c <HAL_RCC_GetSysClockFreq>
 8002e86:	0001      	movs	r1, r0
 8002e88:	4b60      	ldr	r3, [pc, #384]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	091b      	lsrs	r3, r3, #4
 8002e8e:	220f      	movs	r2, #15
 8002e90:	4013      	ands	r3, r2
 8002e92:	4a62      	ldr	r2, [pc, #392]	; (800301c <HAL_RCC_OscConfig+0x348>)
 8002e94:	5cd3      	ldrb	r3, [r2, r3]
 8002e96:	000a      	movs	r2, r1
 8002e98:	40da      	lsrs	r2, r3
 8002e9a:	4b61      	ldr	r3, [pc, #388]	; (8003020 <HAL_RCC_OscConfig+0x34c>)
 8002e9c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002e9e:	4b61      	ldr	r3, [pc, #388]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2513      	movs	r5, #19
 8002ea4:	197c      	adds	r4, r7, r5
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f7fe fc92 	bl	80017d0 <HAL_InitTick>
 8002eac:	0003      	movs	r3, r0
 8002eae:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002eb0:	197b      	adds	r3, r7, r5
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d046      	beq.n	8002f46 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002eb8:	197b      	adds	r3, r7, r5
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	e280      	b.n	80033c0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d027      	beq.n	8002f14 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002ec4:	4b51      	ldr	r3, [pc, #324]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2209      	movs	r2, #9
 8002eca:	4393      	bics	r3, r2
 8002ecc:	0019      	movs	r1, r3
 8002ece:	4b4f      	ldr	r3, [pc, #316]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed6:	f7fe fcc1 	bl	800185c <HAL_GetTick>
 8002eda:	0003      	movs	r3, r0
 8002edc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee0:	f7fe fcbc 	bl	800185c <HAL_GetTick>
 8002ee4:	0002      	movs	r2, r0
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e266      	b.n	80033c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ef2:	4b46      	ldr	r3, [pc, #280]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2204      	movs	r2, #4
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d0f1      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efc:	4b43      	ldr	r3, [pc, #268]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	4a45      	ldr	r2, [pc, #276]	; (8003018 <HAL_RCC_OscConfig+0x344>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	0019      	movs	r1, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	021a      	lsls	r2, r3, #8
 8002f0c:	4b3f      	ldr	r3, [pc, #252]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	e018      	b.n	8002f46 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f14:	4b3d      	ldr	r3, [pc, #244]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	4b3c      	ldr	r3, [pc, #240]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	438a      	bics	r2, r1
 8002f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f20:	f7fe fc9c 	bl	800185c <HAL_GetTick>
 8002f24:	0003      	movs	r3, r0
 8002f26:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f2a:	f7fe fc97 	bl	800185c <HAL_GetTick>
 8002f2e:	0002      	movs	r2, r0
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e241      	b.n	80033c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f3c:	4b33      	ldr	r3, [pc, #204]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2204      	movs	r2, #4
 8002f42:	4013      	ands	r3, r2
 8002f44:	d1f1      	bne.n	8002f2a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2210      	movs	r2, #16
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	d100      	bne.n	8002f52 <HAL_RCC_OscConfig+0x27e>
 8002f50:	e0a1      	b.n	8003096 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d140      	bne.n	8002fda <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f58:	4b2c      	ldr	r3, [pc, #176]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	2380      	movs	r3, #128	; 0x80
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4013      	ands	r3, r2
 8002f62:	d005      	beq.n	8002f70 <HAL_RCC_OscConfig+0x29c>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e227      	b.n	80033c0 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f70:	4b26      	ldr	r3, [pc, #152]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	4a2c      	ldr	r2, [pc, #176]	; (8003028 <HAL_RCC_OscConfig+0x354>)
 8002f76:	4013      	ands	r3, r2
 8002f78:	0019      	movs	r1, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1a      	ldr	r2, [r3, #32]
 8002f7e:	4b23      	ldr	r3, [pc, #140]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002f80:	430a      	orrs	r2, r1
 8002f82:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f84:	4b21      	ldr	r3, [pc, #132]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	021b      	lsls	r3, r3, #8
 8002f8a:	0a19      	lsrs	r1, r3, #8
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	061a      	lsls	r2, r3, #24
 8002f92:	4b1e      	ldr	r3, [pc, #120]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002f94:	430a      	orrs	r2, r1
 8002f96:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	0b5b      	lsrs	r3, r3, #13
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	2280      	movs	r2, #128	; 0x80
 8002fa2:	0212      	lsls	r2, r2, #8
 8002fa4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002fa6:	4b19      	ldr	r3, [pc, #100]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	091b      	lsrs	r3, r3, #4
 8002fac:	210f      	movs	r1, #15
 8002fae:	400b      	ands	r3, r1
 8002fb0:	491a      	ldr	r1, [pc, #104]	; (800301c <HAL_RCC_OscConfig+0x348>)
 8002fb2:	5ccb      	ldrb	r3, [r1, r3]
 8002fb4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002fb6:	4b1a      	ldr	r3, [pc, #104]	; (8003020 <HAL_RCC_OscConfig+0x34c>)
 8002fb8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002fba:	4b1a      	ldr	r3, [pc, #104]	; (8003024 <HAL_RCC_OscConfig+0x350>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2513      	movs	r5, #19
 8002fc0:	197c      	adds	r4, r7, r5
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f7fe fc04 	bl	80017d0 <HAL_InitTick>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002fcc:	197b      	adds	r3, r7, r5
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d060      	beq.n	8003096 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002fd4:	197b      	adds	r3, r7, r5
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	e1f2      	b.n	80033c0 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d03f      	beq.n	8003062 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fe2:	4b0a      	ldr	r3, [pc, #40]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	4b09      	ldr	r3, [pc, #36]	; (800300c <HAL_RCC_OscConfig+0x338>)
 8002fe8:	2180      	movs	r1, #128	; 0x80
 8002fea:	0049      	lsls	r1, r1, #1
 8002fec:	430a      	orrs	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff0:	f7fe fc34 	bl	800185c <HAL_GetTick>
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ff8:	e018      	b.n	800302c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ffa:	f7fe fc2f 	bl	800185c <HAL_GetTick>
 8002ffe:	0002      	movs	r2, r0
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d911      	bls.n	800302c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e1d9      	b.n	80033c0 <HAL_RCC_OscConfig+0x6ec>
 800300c:	40021000 	.word	0x40021000
 8003010:	fffeffff 	.word	0xfffeffff
 8003014:	fffbffff 	.word	0xfffbffff
 8003018:	ffffe0ff 	.word	0xffffe0ff
 800301c:	080045d0 	.word	0x080045d0
 8003020:	20000000 	.word	0x20000000
 8003024:	20000004 	.word	0x20000004
 8003028:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800302c:	4bc9      	ldr	r3, [pc, #804]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	2380      	movs	r3, #128	; 0x80
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4013      	ands	r3, r2
 8003036:	d0e0      	beq.n	8002ffa <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003038:	4bc6      	ldr	r3, [pc, #792]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	4ac6      	ldr	r2, [pc, #792]	; (8003358 <HAL_RCC_OscConfig+0x684>)
 800303e:	4013      	ands	r3, r2
 8003040:	0019      	movs	r1, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1a      	ldr	r2, [r3, #32]
 8003046:	4bc3      	ldr	r3, [pc, #780]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 8003048:	430a      	orrs	r2, r1
 800304a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800304c:	4bc1      	ldr	r3, [pc, #772]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	021b      	lsls	r3, r3, #8
 8003052:	0a19      	lsrs	r1, r3, #8
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	061a      	lsls	r2, r3, #24
 800305a:	4bbe      	ldr	r3, [pc, #760]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 800305c:	430a      	orrs	r2, r1
 800305e:	605a      	str	r2, [r3, #4]
 8003060:	e019      	b.n	8003096 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003062:	4bbc      	ldr	r3, [pc, #752]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	4bbb      	ldr	r3, [pc, #748]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 8003068:	49bc      	ldr	r1, [pc, #752]	; (800335c <HAL_RCC_OscConfig+0x688>)
 800306a:	400a      	ands	r2, r1
 800306c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306e:	f7fe fbf5 	bl	800185c <HAL_GetTick>
 8003072:	0003      	movs	r3, r0
 8003074:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003078:	f7fe fbf0 	bl	800185c <HAL_GetTick>
 800307c:	0002      	movs	r2, r0
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e19a      	b.n	80033c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800308a:	4bb2      	ldr	r3, [pc, #712]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	2380      	movs	r3, #128	; 0x80
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4013      	ands	r3, r2
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2208      	movs	r2, #8
 800309c:	4013      	ands	r3, r2
 800309e:	d036      	beq.n	800310e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d019      	beq.n	80030dc <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a8:	4baa      	ldr	r3, [pc, #680]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 80030aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030ac:	4ba9      	ldr	r3, [pc, #676]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 80030ae:	2101      	movs	r1, #1
 80030b0:	430a      	orrs	r2, r1
 80030b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b4:	f7fe fbd2 	bl	800185c <HAL_GetTick>
 80030b8:	0003      	movs	r3, r0
 80030ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030be:	f7fe fbcd 	bl	800185c <HAL_GetTick>
 80030c2:	0002      	movs	r2, r0
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e177      	b.n	80033c0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030d0:	4ba0      	ldr	r3, [pc, #640]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 80030d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d4:	2202      	movs	r2, #2
 80030d6:	4013      	ands	r3, r2
 80030d8:	d0f1      	beq.n	80030be <HAL_RCC_OscConfig+0x3ea>
 80030da:	e018      	b.n	800310e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030dc:	4b9d      	ldr	r3, [pc, #628]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 80030de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030e0:	4b9c      	ldr	r3, [pc, #624]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 80030e2:	2101      	movs	r1, #1
 80030e4:	438a      	bics	r2, r1
 80030e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e8:	f7fe fbb8 	bl	800185c <HAL_GetTick>
 80030ec:	0003      	movs	r3, r0
 80030ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030f2:	f7fe fbb3 	bl	800185c <HAL_GetTick>
 80030f6:	0002      	movs	r2, r0
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e15d      	b.n	80033c0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003104:	4b93      	ldr	r3, [pc, #588]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 8003106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003108:	2202      	movs	r2, #2
 800310a:	4013      	ands	r3, r2
 800310c:	d1f1      	bne.n	80030f2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2204      	movs	r2, #4
 8003114:	4013      	ands	r3, r2
 8003116:	d100      	bne.n	800311a <HAL_RCC_OscConfig+0x446>
 8003118:	e0ae      	b.n	8003278 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800311a:	2023      	movs	r0, #35	; 0x23
 800311c:	183b      	adds	r3, r7, r0
 800311e:	2200      	movs	r2, #0
 8003120:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003122:	4b8c      	ldr	r3, [pc, #560]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 8003124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003126:	2380      	movs	r3, #128	; 0x80
 8003128:	055b      	lsls	r3, r3, #21
 800312a:	4013      	ands	r3, r2
 800312c:	d109      	bne.n	8003142 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312e:	4b89      	ldr	r3, [pc, #548]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 8003130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003132:	4b88      	ldr	r3, [pc, #544]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 8003134:	2180      	movs	r1, #128	; 0x80
 8003136:	0549      	lsls	r1, r1, #21
 8003138:	430a      	orrs	r2, r1
 800313a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800313c:	183b      	adds	r3, r7, r0
 800313e:	2201      	movs	r2, #1
 8003140:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003142:	4b87      	ldr	r3, [pc, #540]	; (8003360 <HAL_RCC_OscConfig+0x68c>)
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	2380      	movs	r3, #128	; 0x80
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	4013      	ands	r3, r2
 800314c:	d11a      	bne.n	8003184 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800314e:	4b84      	ldr	r3, [pc, #528]	; (8003360 <HAL_RCC_OscConfig+0x68c>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	4b83      	ldr	r3, [pc, #524]	; (8003360 <HAL_RCC_OscConfig+0x68c>)
 8003154:	2180      	movs	r1, #128	; 0x80
 8003156:	0049      	lsls	r1, r1, #1
 8003158:	430a      	orrs	r2, r1
 800315a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800315c:	f7fe fb7e 	bl	800185c <HAL_GetTick>
 8003160:	0003      	movs	r3, r0
 8003162:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003166:	f7fe fb79 	bl	800185c <HAL_GetTick>
 800316a:	0002      	movs	r2, r0
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b64      	cmp	r3, #100	; 0x64
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e123      	b.n	80033c0 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003178:	4b79      	ldr	r3, [pc, #484]	; (8003360 <HAL_RCC_OscConfig+0x68c>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	2380      	movs	r3, #128	; 0x80
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	4013      	ands	r3, r2
 8003182:	d0f0      	beq.n	8003166 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	2380      	movs	r3, #128	; 0x80
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	429a      	cmp	r2, r3
 800318e:	d107      	bne.n	80031a0 <HAL_RCC_OscConfig+0x4cc>
 8003190:	4b70      	ldr	r3, [pc, #448]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 8003192:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003194:	4b6f      	ldr	r3, [pc, #444]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 8003196:	2180      	movs	r1, #128	; 0x80
 8003198:	0049      	lsls	r1, r1, #1
 800319a:	430a      	orrs	r2, r1
 800319c:	651a      	str	r2, [r3, #80]	; 0x50
 800319e:	e031      	b.n	8003204 <HAL_RCC_OscConfig+0x530>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10c      	bne.n	80031c2 <HAL_RCC_OscConfig+0x4ee>
 80031a8:	4b6a      	ldr	r3, [pc, #424]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 80031aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031ac:	4b69      	ldr	r3, [pc, #420]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 80031ae:	496b      	ldr	r1, [pc, #428]	; (800335c <HAL_RCC_OscConfig+0x688>)
 80031b0:	400a      	ands	r2, r1
 80031b2:	651a      	str	r2, [r3, #80]	; 0x50
 80031b4:	4b67      	ldr	r3, [pc, #412]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 80031b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031b8:	4b66      	ldr	r3, [pc, #408]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 80031ba:	496a      	ldr	r1, [pc, #424]	; (8003364 <HAL_RCC_OscConfig+0x690>)
 80031bc:	400a      	ands	r2, r1
 80031be:	651a      	str	r2, [r3, #80]	; 0x50
 80031c0:	e020      	b.n	8003204 <HAL_RCC_OscConfig+0x530>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	23a0      	movs	r3, #160	; 0xa0
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d10e      	bne.n	80031ec <HAL_RCC_OscConfig+0x518>
 80031ce:	4b61      	ldr	r3, [pc, #388]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 80031d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031d2:	4b60      	ldr	r3, [pc, #384]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 80031d4:	2180      	movs	r1, #128	; 0x80
 80031d6:	00c9      	lsls	r1, r1, #3
 80031d8:	430a      	orrs	r2, r1
 80031da:	651a      	str	r2, [r3, #80]	; 0x50
 80031dc:	4b5d      	ldr	r3, [pc, #372]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 80031de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031e0:	4b5c      	ldr	r3, [pc, #368]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 80031e2:	2180      	movs	r1, #128	; 0x80
 80031e4:	0049      	lsls	r1, r1, #1
 80031e6:	430a      	orrs	r2, r1
 80031e8:	651a      	str	r2, [r3, #80]	; 0x50
 80031ea:	e00b      	b.n	8003204 <HAL_RCC_OscConfig+0x530>
 80031ec:	4b59      	ldr	r3, [pc, #356]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 80031ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031f0:	4b58      	ldr	r3, [pc, #352]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 80031f2:	495a      	ldr	r1, [pc, #360]	; (800335c <HAL_RCC_OscConfig+0x688>)
 80031f4:	400a      	ands	r2, r1
 80031f6:	651a      	str	r2, [r3, #80]	; 0x50
 80031f8:	4b56      	ldr	r3, [pc, #344]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 80031fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031fc:	4b55      	ldr	r3, [pc, #340]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 80031fe:	4959      	ldr	r1, [pc, #356]	; (8003364 <HAL_RCC_OscConfig+0x690>)
 8003200:	400a      	ands	r2, r1
 8003202:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d015      	beq.n	8003238 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320c:	f7fe fb26 	bl	800185c <HAL_GetTick>
 8003210:	0003      	movs	r3, r0
 8003212:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003214:	e009      	b.n	800322a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003216:	f7fe fb21 	bl	800185c <HAL_GetTick>
 800321a:	0002      	movs	r2, r0
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	4a51      	ldr	r2, [pc, #324]	; (8003368 <HAL_RCC_OscConfig+0x694>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e0ca      	b.n	80033c0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800322a:	4b4a      	ldr	r3, [pc, #296]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 800322c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800322e:	2380      	movs	r3, #128	; 0x80
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4013      	ands	r3, r2
 8003234:	d0ef      	beq.n	8003216 <HAL_RCC_OscConfig+0x542>
 8003236:	e014      	b.n	8003262 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003238:	f7fe fb10 	bl	800185c <HAL_GetTick>
 800323c:	0003      	movs	r3, r0
 800323e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003240:	e009      	b.n	8003256 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003242:	f7fe fb0b 	bl	800185c <HAL_GetTick>
 8003246:	0002      	movs	r2, r0
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	4a46      	ldr	r2, [pc, #280]	; (8003368 <HAL_RCC_OscConfig+0x694>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e0b4      	b.n	80033c0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003256:	4b3f      	ldr	r3, [pc, #252]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 8003258:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800325a:	2380      	movs	r3, #128	; 0x80
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4013      	ands	r3, r2
 8003260:	d1ef      	bne.n	8003242 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003262:	2323      	movs	r3, #35	; 0x23
 8003264:	18fb      	adds	r3, r7, r3
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d105      	bne.n	8003278 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326c:	4b39      	ldr	r3, [pc, #228]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 800326e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003270:	4b38      	ldr	r3, [pc, #224]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 8003272:	493e      	ldr	r1, [pc, #248]	; (800336c <HAL_RCC_OscConfig+0x698>)
 8003274:	400a      	ands	r2, r1
 8003276:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	2b00      	cmp	r3, #0
 800327e:	d100      	bne.n	8003282 <HAL_RCC_OscConfig+0x5ae>
 8003280:	e09d      	b.n	80033be <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	2b0c      	cmp	r3, #12
 8003286:	d100      	bne.n	800328a <HAL_RCC_OscConfig+0x5b6>
 8003288:	e076      	b.n	8003378 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	2b02      	cmp	r3, #2
 8003290:	d145      	bne.n	800331e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003292:	4b30      	ldr	r3, [pc, #192]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	4b2f      	ldr	r3, [pc, #188]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 8003298:	4935      	ldr	r1, [pc, #212]	; (8003370 <HAL_RCC_OscConfig+0x69c>)
 800329a:	400a      	ands	r2, r1
 800329c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329e:	f7fe fadd 	bl	800185c <HAL_GetTick>
 80032a2:	0003      	movs	r3, r0
 80032a4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a8:	f7fe fad8 	bl	800185c <HAL_GetTick>
 80032ac:	0002      	movs	r2, r0
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e082      	b.n	80033c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032ba:	4b26      	ldr	r3, [pc, #152]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	2380      	movs	r3, #128	; 0x80
 80032c0:	049b      	lsls	r3, r3, #18
 80032c2:	4013      	ands	r3, r2
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032c6:	4b23      	ldr	r3, [pc, #140]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	4a2a      	ldr	r2, [pc, #168]	; (8003374 <HAL_RCC_OscConfig+0x6a0>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	0019      	movs	r1, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	431a      	orrs	r2, r3
 80032e0:	4b1c      	ldr	r3, [pc, #112]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 80032e2:	430a      	orrs	r2, r1
 80032e4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032e6:	4b1b      	ldr	r3, [pc, #108]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 80032ec:	2180      	movs	r1, #128	; 0x80
 80032ee:	0449      	lsls	r1, r1, #17
 80032f0:	430a      	orrs	r2, r1
 80032f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f4:	f7fe fab2 	bl	800185c <HAL_GetTick>
 80032f8:	0003      	movs	r3, r0
 80032fa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fe:	f7fe faad 	bl	800185c <HAL_GetTick>
 8003302:	0002      	movs	r2, r0
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e057      	b.n	80033c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003310:	4b10      	ldr	r3, [pc, #64]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	049b      	lsls	r3, r3, #18
 8003318:	4013      	ands	r3, r2
 800331a:	d0f0      	beq.n	80032fe <HAL_RCC_OscConfig+0x62a>
 800331c:	e04f      	b.n	80033be <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800331e:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 8003324:	4912      	ldr	r1, [pc, #72]	; (8003370 <HAL_RCC_OscConfig+0x69c>)
 8003326:	400a      	ands	r2, r1
 8003328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332a:	f7fe fa97 	bl	800185c <HAL_GetTick>
 800332e:	0003      	movs	r3, r0
 8003330:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003334:	f7fe fa92 	bl	800185c <HAL_GetTick>
 8003338:	0002      	movs	r2, r0
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e03c      	b.n	80033c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003346:	4b03      	ldr	r3, [pc, #12]	; (8003354 <HAL_RCC_OscConfig+0x680>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	2380      	movs	r3, #128	; 0x80
 800334c:	049b      	lsls	r3, r3, #18
 800334e:	4013      	ands	r3, r2
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x660>
 8003352:	e034      	b.n	80033be <HAL_RCC_OscConfig+0x6ea>
 8003354:	40021000 	.word	0x40021000
 8003358:	ffff1fff 	.word	0xffff1fff
 800335c:	fffffeff 	.word	0xfffffeff
 8003360:	40007000 	.word	0x40007000
 8003364:	fffffbff 	.word	0xfffffbff
 8003368:	00001388 	.word	0x00001388
 800336c:	efffffff 	.word	0xefffffff
 8003370:	feffffff 	.word	0xfeffffff
 8003374:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	2b01      	cmp	r3, #1
 800337e:	d101      	bne.n	8003384 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e01d      	b.n	80033c0 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003384:	4b10      	ldr	r3, [pc, #64]	; (80033c8 <HAL_RCC_OscConfig+0x6f4>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	2380      	movs	r3, #128	; 0x80
 800338e:	025b      	lsls	r3, r3, #9
 8003390:	401a      	ands	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003396:	429a      	cmp	r2, r3
 8003398:	d10f      	bne.n	80033ba <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	23f0      	movs	r3, #240	; 0xf0
 800339e:	039b      	lsls	r3, r3, #14
 80033a0:	401a      	ands	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d107      	bne.n	80033ba <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	23c0      	movs	r3, #192	; 0xc0
 80033ae:	041b      	lsls	r3, r3, #16
 80033b0:	401a      	ands	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d001      	beq.n	80033be <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	0018      	movs	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b00a      	add	sp, #40	; 0x28
 80033c6:	bdb0      	pop	{r4, r5, r7, pc}
 80033c8:	40021000 	.word	0x40021000

080033cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033cc:	b5b0      	push	{r4, r5, r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e128      	b.n	8003632 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033e0:	4b96      	ldr	r3, [pc, #600]	; (800363c <HAL_RCC_ClockConfig+0x270>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2201      	movs	r2, #1
 80033e6:	4013      	ands	r3, r2
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d91e      	bls.n	800342c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ee:	4b93      	ldr	r3, [pc, #588]	; (800363c <HAL_RCC_ClockConfig+0x270>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2201      	movs	r2, #1
 80033f4:	4393      	bics	r3, r2
 80033f6:	0019      	movs	r1, r3
 80033f8:	4b90      	ldr	r3, [pc, #576]	; (800363c <HAL_RCC_ClockConfig+0x270>)
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003400:	f7fe fa2c 	bl	800185c <HAL_GetTick>
 8003404:	0003      	movs	r3, r0
 8003406:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003408:	e009      	b.n	800341e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800340a:	f7fe fa27 	bl	800185c <HAL_GetTick>
 800340e:	0002      	movs	r2, r0
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	4a8a      	ldr	r2, [pc, #552]	; (8003640 <HAL_RCC_ClockConfig+0x274>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e109      	b.n	8003632 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800341e:	4b87      	ldr	r3, [pc, #540]	; (800363c <HAL_RCC_ClockConfig+0x270>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2201      	movs	r2, #1
 8003424:	4013      	ands	r3, r2
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d1ee      	bne.n	800340a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2202      	movs	r2, #2
 8003432:	4013      	ands	r3, r2
 8003434:	d009      	beq.n	800344a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003436:	4b83      	ldr	r3, [pc, #524]	; (8003644 <HAL_RCC_ClockConfig+0x278>)
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	22f0      	movs	r2, #240	; 0xf0
 800343c:	4393      	bics	r3, r2
 800343e:	0019      	movs	r1, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	4b7f      	ldr	r3, [pc, #508]	; (8003644 <HAL_RCC_ClockConfig+0x278>)
 8003446:	430a      	orrs	r2, r1
 8003448:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2201      	movs	r2, #1
 8003450:	4013      	ands	r3, r2
 8003452:	d100      	bne.n	8003456 <HAL_RCC_ClockConfig+0x8a>
 8003454:	e089      	b.n	800356a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d107      	bne.n	800346e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800345e:	4b79      	ldr	r3, [pc, #484]	; (8003644 <HAL_RCC_ClockConfig+0x278>)
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	2380      	movs	r3, #128	; 0x80
 8003464:	029b      	lsls	r3, r3, #10
 8003466:	4013      	ands	r3, r2
 8003468:	d120      	bne.n	80034ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e0e1      	b.n	8003632 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b03      	cmp	r3, #3
 8003474:	d107      	bne.n	8003486 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003476:	4b73      	ldr	r3, [pc, #460]	; (8003644 <HAL_RCC_ClockConfig+0x278>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	2380      	movs	r3, #128	; 0x80
 800347c:	049b      	lsls	r3, r3, #18
 800347e:	4013      	ands	r3, r2
 8003480:	d114      	bne.n	80034ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e0d5      	b.n	8003632 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d106      	bne.n	800349c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800348e:	4b6d      	ldr	r3, [pc, #436]	; (8003644 <HAL_RCC_ClockConfig+0x278>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2204      	movs	r2, #4
 8003494:	4013      	ands	r3, r2
 8003496:	d109      	bne.n	80034ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0ca      	b.n	8003632 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800349c:	4b69      	ldr	r3, [pc, #420]	; (8003644 <HAL_RCC_ClockConfig+0x278>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	2380      	movs	r3, #128	; 0x80
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4013      	ands	r3, r2
 80034a6:	d101      	bne.n	80034ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e0c2      	b.n	8003632 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ac:	4b65      	ldr	r3, [pc, #404]	; (8003644 <HAL_RCC_ClockConfig+0x278>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	2203      	movs	r2, #3
 80034b2:	4393      	bics	r3, r2
 80034b4:	0019      	movs	r1, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	4b62      	ldr	r3, [pc, #392]	; (8003644 <HAL_RCC_ClockConfig+0x278>)
 80034bc:	430a      	orrs	r2, r1
 80034be:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034c0:	f7fe f9cc 	bl	800185c <HAL_GetTick>
 80034c4:	0003      	movs	r3, r0
 80034c6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d111      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034d0:	e009      	b.n	80034e6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d2:	f7fe f9c3 	bl	800185c <HAL_GetTick>
 80034d6:	0002      	movs	r2, r0
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	4a58      	ldr	r2, [pc, #352]	; (8003640 <HAL_RCC_ClockConfig+0x274>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e0a5      	b.n	8003632 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034e6:	4b57      	ldr	r3, [pc, #348]	; (8003644 <HAL_RCC_ClockConfig+0x278>)
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	220c      	movs	r2, #12
 80034ec:	4013      	ands	r3, r2
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d1ef      	bne.n	80034d2 <HAL_RCC_ClockConfig+0x106>
 80034f2:	e03a      	b.n	800356a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d111      	bne.n	8003520 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034fc:	e009      	b.n	8003512 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034fe:	f7fe f9ad 	bl	800185c <HAL_GetTick>
 8003502:	0002      	movs	r2, r0
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	4a4d      	ldr	r2, [pc, #308]	; (8003640 <HAL_RCC_ClockConfig+0x274>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e08f      	b.n	8003632 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003512:	4b4c      	ldr	r3, [pc, #304]	; (8003644 <HAL_RCC_ClockConfig+0x278>)
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	220c      	movs	r2, #12
 8003518:	4013      	ands	r3, r2
 800351a:	2b0c      	cmp	r3, #12
 800351c:	d1ef      	bne.n	80034fe <HAL_RCC_ClockConfig+0x132>
 800351e:	e024      	b.n	800356a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d11b      	bne.n	8003560 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003528:	e009      	b.n	800353e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800352a:	f7fe f997 	bl	800185c <HAL_GetTick>
 800352e:	0002      	movs	r2, r0
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	4a42      	ldr	r2, [pc, #264]	; (8003640 <HAL_RCC_ClockConfig+0x274>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d901      	bls.n	800353e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e079      	b.n	8003632 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800353e:	4b41      	ldr	r3, [pc, #260]	; (8003644 <HAL_RCC_ClockConfig+0x278>)
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	220c      	movs	r2, #12
 8003544:	4013      	ands	r3, r2
 8003546:	2b04      	cmp	r3, #4
 8003548:	d1ef      	bne.n	800352a <HAL_RCC_ClockConfig+0x15e>
 800354a:	e00e      	b.n	800356a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800354c:	f7fe f986 	bl	800185c <HAL_GetTick>
 8003550:	0002      	movs	r2, r0
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	4a3a      	ldr	r2, [pc, #232]	; (8003640 <HAL_RCC_ClockConfig+0x274>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e068      	b.n	8003632 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003560:	4b38      	ldr	r3, [pc, #224]	; (8003644 <HAL_RCC_ClockConfig+0x278>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	220c      	movs	r2, #12
 8003566:	4013      	ands	r3, r2
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800356a:	4b34      	ldr	r3, [pc, #208]	; (800363c <HAL_RCC_ClockConfig+0x270>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2201      	movs	r2, #1
 8003570:	4013      	ands	r3, r2
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d21e      	bcs.n	80035b6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003578:	4b30      	ldr	r3, [pc, #192]	; (800363c <HAL_RCC_ClockConfig+0x270>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2201      	movs	r2, #1
 800357e:	4393      	bics	r3, r2
 8003580:	0019      	movs	r1, r3
 8003582:	4b2e      	ldr	r3, [pc, #184]	; (800363c <HAL_RCC_ClockConfig+0x270>)
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800358a:	f7fe f967 	bl	800185c <HAL_GetTick>
 800358e:	0003      	movs	r3, r0
 8003590:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003592:	e009      	b.n	80035a8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003594:	f7fe f962 	bl	800185c <HAL_GetTick>
 8003598:	0002      	movs	r2, r0
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	4a28      	ldr	r2, [pc, #160]	; (8003640 <HAL_RCC_ClockConfig+0x274>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e044      	b.n	8003632 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a8:	4b24      	ldr	r3, [pc, #144]	; (800363c <HAL_RCC_ClockConfig+0x270>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2201      	movs	r2, #1
 80035ae:	4013      	ands	r3, r2
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d1ee      	bne.n	8003594 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2204      	movs	r2, #4
 80035bc:	4013      	ands	r3, r2
 80035be:	d009      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c0:	4b20      	ldr	r3, [pc, #128]	; (8003644 <HAL_RCC_ClockConfig+0x278>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4a20      	ldr	r2, [pc, #128]	; (8003648 <HAL_RCC_ClockConfig+0x27c>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	0019      	movs	r1, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	4b1d      	ldr	r3, [pc, #116]	; (8003644 <HAL_RCC_ClockConfig+0x278>)
 80035d0:	430a      	orrs	r2, r1
 80035d2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2208      	movs	r2, #8
 80035da:	4013      	ands	r3, r2
 80035dc:	d00a      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035de:	4b19      	ldr	r3, [pc, #100]	; (8003644 <HAL_RCC_ClockConfig+0x278>)
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	4a1a      	ldr	r2, [pc, #104]	; (800364c <HAL_RCC_ClockConfig+0x280>)
 80035e4:	4013      	ands	r3, r2
 80035e6:	0019      	movs	r1, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	00da      	lsls	r2, r3, #3
 80035ee:	4b15      	ldr	r3, [pc, #84]	; (8003644 <HAL_RCC_ClockConfig+0x278>)
 80035f0:	430a      	orrs	r2, r1
 80035f2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035f4:	f000 f832 	bl	800365c <HAL_RCC_GetSysClockFreq>
 80035f8:	0001      	movs	r1, r0
 80035fa:	4b12      	ldr	r3, [pc, #72]	; (8003644 <HAL_RCC_ClockConfig+0x278>)
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	091b      	lsrs	r3, r3, #4
 8003600:	220f      	movs	r2, #15
 8003602:	4013      	ands	r3, r2
 8003604:	4a12      	ldr	r2, [pc, #72]	; (8003650 <HAL_RCC_ClockConfig+0x284>)
 8003606:	5cd3      	ldrb	r3, [r2, r3]
 8003608:	000a      	movs	r2, r1
 800360a:	40da      	lsrs	r2, r3
 800360c:	4b11      	ldr	r3, [pc, #68]	; (8003654 <HAL_RCC_ClockConfig+0x288>)
 800360e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003610:	4b11      	ldr	r3, [pc, #68]	; (8003658 <HAL_RCC_ClockConfig+0x28c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	250b      	movs	r5, #11
 8003616:	197c      	adds	r4, r7, r5
 8003618:	0018      	movs	r0, r3
 800361a:	f7fe f8d9 	bl	80017d0 <HAL_InitTick>
 800361e:	0003      	movs	r3, r0
 8003620:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003622:	197b      	adds	r3, r7, r5
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800362a:	197b      	adds	r3, r7, r5
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	e000      	b.n	8003632 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	0018      	movs	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	b004      	add	sp, #16
 8003638:	bdb0      	pop	{r4, r5, r7, pc}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	40022000 	.word	0x40022000
 8003640:	00001388 	.word	0x00001388
 8003644:	40021000 	.word	0x40021000
 8003648:	fffff8ff 	.word	0xfffff8ff
 800364c:	ffffc7ff 	.word	0xffffc7ff
 8003650:	080045d0 	.word	0x080045d0
 8003654:	20000000 	.word	0x20000000
 8003658:	20000004 	.word	0x20000004

0800365c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800365c:	b5b0      	push	{r4, r5, r7, lr}
 800365e:	b08e      	sub	sp, #56	; 0x38
 8003660:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003662:	4b4c      	ldr	r3, [pc, #304]	; (8003794 <HAL_RCC_GetSysClockFreq+0x138>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800366a:	230c      	movs	r3, #12
 800366c:	4013      	ands	r3, r2
 800366e:	2b0c      	cmp	r3, #12
 8003670:	d014      	beq.n	800369c <HAL_RCC_GetSysClockFreq+0x40>
 8003672:	d900      	bls.n	8003676 <HAL_RCC_GetSysClockFreq+0x1a>
 8003674:	e07b      	b.n	800376e <HAL_RCC_GetSysClockFreq+0x112>
 8003676:	2b04      	cmp	r3, #4
 8003678:	d002      	beq.n	8003680 <HAL_RCC_GetSysClockFreq+0x24>
 800367a:	2b08      	cmp	r3, #8
 800367c:	d00b      	beq.n	8003696 <HAL_RCC_GetSysClockFreq+0x3a>
 800367e:	e076      	b.n	800376e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003680:	4b44      	ldr	r3, [pc, #272]	; (8003794 <HAL_RCC_GetSysClockFreq+0x138>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2210      	movs	r2, #16
 8003686:	4013      	ands	r3, r2
 8003688:	d002      	beq.n	8003690 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800368a:	4b43      	ldr	r3, [pc, #268]	; (8003798 <HAL_RCC_GetSysClockFreq+0x13c>)
 800368c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800368e:	e07c      	b.n	800378a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003690:	4b42      	ldr	r3, [pc, #264]	; (800379c <HAL_RCC_GetSysClockFreq+0x140>)
 8003692:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003694:	e079      	b.n	800378a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003696:	4b42      	ldr	r3, [pc, #264]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x144>)
 8003698:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800369a:	e076      	b.n	800378a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369e:	0c9a      	lsrs	r2, r3, #18
 80036a0:	230f      	movs	r3, #15
 80036a2:	401a      	ands	r2, r3
 80036a4:	4b3f      	ldr	r3, [pc, #252]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x148>)
 80036a6:	5c9b      	ldrb	r3, [r3, r2]
 80036a8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80036aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ac:	0d9a      	lsrs	r2, r3, #22
 80036ae:	2303      	movs	r3, #3
 80036b0:	4013      	ands	r3, r2
 80036b2:	3301      	adds	r3, #1
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036b6:	4b37      	ldr	r3, [pc, #220]	; (8003794 <HAL_RCC_GetSysClockFreq+0x138>)
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	2380      	movs	r3, #128	; 0x80
 80036bc:	025b      	lsls	r3, r3, #9
 80036be:	4013      	ands	r3, r2
 80036c0:	d01a      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80036c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c4:	61bb      	str	r3, [r7, #24]
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
 80036ca:	4a35      	ldr	r2, [pc, #212]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x144>)
 80036cc:	2300      	movs	r3, #0
 80036ce:	69b8      	ldr	r0, [r7, #24]
 80036d0:	69f9      	ldr	r1, [r7, #28]
 80036d2:	f7fc fde9 	bl	80002a8 <__aeabi_lmul>
 80036d6:	0002      	movs	r2, r0
 80036d8:	000b      	movs	r3, r1
 80036da:	0010      	movs	r0, r2
 80036dc:	0019      	movs	r1, r3
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f7fc fdbd 	bl	8000268 <__aeabi_uldivmod>
 80036ee:	0002      	movs	r2, r0
 80036f0:	000b      	movs	r3, r1
 80036f2:	0013      	movs	r3, r2
 80036f4:	637b      	str	r3, [r7, #52]	; 0x34
 80036f6:	e037      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80036f8:	4b26      	ldr	r3, [pc, #152]	; (8003794 <HAL_RCC_GetSysClockFreq+0x138>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2210      	movs	r2, #16
 80036fe:	4013      	ands	r3, r2
 8003700:	d01a      	beq.n	8003738 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	4a23      	ldr	r2, [pc, #140]	; (8003798 <HAL_RCC_GetSysClockFreq+0x13c>)
 800370c:	2300      	movs	r3, #0
 800370e:	68b8      	ldr	r0, [r7, #8]
 8003710:	68f9      	ldr	r1, [r7, #12]
 8003712:	f7fc fdc9 	bl	80002a8 <__aeabi_lmul>
 8003716:	0002      	movs	r2, r0
 8003718:	000b      	movs	r3, r1
 800371a:	0010      	movs	r0, r2
 800371c:	0019      	movs	r1, r3
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	603b      	str	r3, [r7, #0]
 8003722:	2300      	movs	r3, #0
 8003724:	607b      	str	r3, [r7, #4]
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f7fc fd9d 	bl	8000268 <__aeabi_uldivmod>
 800372e:	0002      	movs	r2, r0
 8003730:	000b      	movs	r3, r1
 8003732:	0013      	movs	r3, r2
 8003734:	637b      	str	r3, [r7, #52]	; 0x34
 8003736:	e017      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373a:	0018      	movs	r0, r3
 800373c:	2300      	movs	r3, #0
 800373e:	0019      	movs	r1, r3
 8003740:	4a16      	ldr	r2, [pc, #88]	; (800379c <HAL_RCC_GetSysClockFreq+0x140>)
 8003742:	2300      	movs	r3, #0
 8003744:	f7fc fdb0 	bl	80002a8 <__aeabi_lmul>
 8003748:	0002      	movs	r2, r0
 800374a:	000b      	movs	r3, r1
 800374c:	0010      	movs	r0, r2
 800374e:	0019      	movs	r1, r3
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	001c      	movs	r4, r3
 8003754:	2300      	movs	r3, #0
 8003756:	001d      	movs	r5, r3
 8003758:	0022      	movs	r2, r4
 800375a:	002b      	movs	r3, r5
 800375c:	f7fc fd84 	bl	8000268 <__aeabi_uldivmod>
 8003760:	0002      	movs	r2, r0
 8003762:	000b      	movs	r3, r1
 8003764:	0013      	movs	r3, r2
 8003766:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800376a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800376c:	e00d      	b.n	800378a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800376e:	4b09      	ldr	r3, [pc, #36]	; (8003794 <HAL_RCC_GetSysClockFreq+0x138>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	0b5b      	lsrs	r3, r3, #13
 8003774:	2207      	movs	r2, #7
 8003776:	4013      	ands	r3, r2
 8003778:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	3301      	adds	r3, #1
 800377e:	2280      	movs	r2, #128	; 0x80
 8003780:	0212      	lsls	r2, r2, #8
 8003782:	409a      	lsls	r2, r3
 8003784:	0013      	movs	r3, r2
 8003786:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003788:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800378c:	0018      	movs	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	b00e      	add	sp, #56	; 0x38
 8003792:	bdb0      	pop	{r4, r5, r7, pc}
 8003794:	40021000 	.word	0x40021000
 8003798:	003d0900 	.word	0x003d0900
 800379c:	00f42400 	.word	0x00f42400
 80037a0:	007a1200 	.word	0x007a1200
 80037a4:	080045e8 	.word	0x080045e8

080037a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037ac:	4b02      	ldr	r3, [pc, #8]	; (80037b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80037ae:	681b      	ldr	r3, [r3, #0]
}
 80037b0:	0018      	movs	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	20000000 	.word	0x20000000

080037bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037c0:	f7ff fff2 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 80037c4:	0001      	movs	r1, r0
 80037c6:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	0a1b      	lsrs	r3, r3, #8
 80037cc:	2207      	movs	r2, #7
 80037ce:	4013      	ands	r3, r2
 80037d0:	4a04      	ldr	r2, [pc, #16]	; (80037e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037d2:	5cd3      	ldrb	r3, [r2, r3]
 80037d4:	40d9      	lsrs	r1, r3
 80037d6:	000b      	movs	r3, r1
}
 80037d8:	0018      	movs	r0, r3
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	46c0      	nop			; (mov r8, r8)
 80037e0:	40021000 	.word	0x40021000
 80037e4:	080045e0 	.word	0x080045e0

080037e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037ec:	f7ff ffdc 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 80037f0:	0001      	movs	r1, r0
 80037f2:	4b06      	ldr	r3, [pc, #24]	; (800380c <HAL_RCC_GetPCLK2Freq+0x24>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	0adb      	lsrs	r3, r3, #11
 80037f8:	2207      	movs	r2, #7
 80037fa:	4013      	ands	r3, r2
 80037fc:	4a04      	ldr	r2, [pc, #16]	; (8003810 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037fe:	5cd3      	ldrb	r3, [r2, r3]
 8003800:	40d9      	lsrs	r1, r3
 8003802:	000b      	movs	r3, r1
}
 8003804:	0018      	movs	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	40021000 	.word	0x40021000
 8003810:	080045e0 	.word	0x080045e0

08003814 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800381c:	2017      	movs	r0, #23
 800381e:	183b      	adds	r3, r7, r0
 8003820:	2200      	movs	r2, #0
 8003822:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2220      	movs	r2, #32
 800382a:	4013      	ands	r3, r2
 800382c:	d100      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800382e:	e0c7      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003830:	4b84      	ldr	r3, [pc, #528]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003834:	2380      	movs	r3, #128	; 0x80
 8003836:	055b      	lsls	r3, r3, #21
 8003838:	4013      	ands	r3, r2
 800383a:	d109      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800383c:	4b81      	ldr	r3, [pc, #516]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800383e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003840:	4b80      	ldr	r3, [pc, #512]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003842:	2180      	movs	r1, #128	; 0x80
 8003844:	0549      	lsls	r1, r1, #21
 8003846:	430a      	orrs	r2, r1
 8003848:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800384a:	183b      	adds	r3, r7, r0
 800384c:	2201      	movs	r2, #1
 800384e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003850:	4b7d      	ldr	r3, [pc, #500]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	2380      	movs	r3, #128	; 0x80
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	4013      	ands	r3, r2
 800385a:	d11a      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800385c:	4b7a      	ldr	r3, [pc, #488]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	4b79      	ldr	r3, [pc, #484]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003862:	2180      	movs	r1, #128	; 0x80
 8003864:	0049      	lsls	r1, r1, #1
 8003866:	430a      	orrs	r2, r1
 8003868:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800386a:	f7fd fff7 	bl	800185c <HAL_GetTick>
 800386e:	0003      	movs	r3, r0
 8003870:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003872:	e008      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003874:	f7fd fff2 	bl	800185c <HAL_GetTick>
 8003878:	0002      	movs	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b64      	cmp	r3, #100	; 0x64
 8003880:	d901      	bls.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e0d9      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003886:	4b70      	ldr	r3, [pc, #448]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	2380      	movs	r3, #128	; 0x80
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	4013      	ands	r3, r2
 8003890:	d0f0      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003892:	4b6c      	ldr	r3, [pc, #432]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	23c0      	movs	r3, #192	; 0xc0
 8003898:	039b      	lsls	r3, r3, #14
 800389a:	4013      	ands	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	23c0      	movs	r3, #192	; 0xc0
 80038a4:	039b      	lsls	r3, r3, #14
 80038a6:	4013      	ands	r3, r2
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d013      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	23c0      	movs	r3, #192	; 0xc0
 80038b4:	029b      	lsls	r3, r3, #10
 80038b6:	401a      	ands	r2, r3
 80038b8:	23c0      	movs	r3, #192	; 0xc0
 80038ba:	029b      	lsls	r3, r3, #10
 80038bc:	429a      	cmp	r2, r3
 80038be:	d10a      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80038c0:	4b60      	ldr	r3, [pc, #384]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	2380      	movs	r3, #128	; 0x80
 80038c6:	029b      	lsls	r3, r3, #10
 80038c8:	401a      	ands	r2, r3
 80038ca:	2380      	movs	r3, #128	; 0x80
 80038cc:	029b      	lsls	r3, r3, #10
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d101      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e0b1      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80038d6:	4b5b      	ldr	r3, [pc, #364]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038da:	23c0      	movs	r3, #192	; 0xc0
 80038dc:	029b      	lsls	r3, r3, #10
 80038de:	4013      	ands	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d03b      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	23c0      	movs	r3, #192	; 0xc0
 80038ee:	029b      	lsls	r3, r3, #10
 80038f0:	4013      	ands	r3, r2
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d033      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2220      	movs	r2, #32
 80038fe:	4013      	ands	r3, r2
 8003900:	d02e      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003902:	4b50      	ldr	r3, [pc, #320]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003906:	4a51      	ldr	r2, [pc, #324]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003908:	4013      	ands	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800390c:	4b4d      	ldr	r3, [pc, #308]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800390e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003910:	4b4c      	ldr	r3, [pc, #304]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003912:	2180      	movs	r1, #128	; 0x80
 8003914:	0309      	lsls	r1, r1, #12
 8003916:	430a      	orrs	r2, r1
 8003918:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800391a:	4b4a      	ldr	r3, [pc, #296]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800391c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800391e:	4b49      	ldr	r3, [pc, #292]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003920:	494b      	ldr	r1, [pc, #300]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003922:	400a      	ands	r2, r1
 8003924:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003926:	4b47      	ldr	r3, [pc, #284]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	4013      	ands	r3, r2
 8003934:	d014      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003936:	f7fd ff91 	bl	800185c <HAL_GetTick>
 800393a:	0003      	movs	r3, r0
 800393c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800393e:	e009      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003940:	f7fd ff8c 	bl	800185c <HAL_GetTick>
 8003944:	0002      	movs	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	4a42      	ldr	r2, [pc, #264]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d901      	bls.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e072      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003954:	4b3b      	ldr	r3, [pc, #236]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003956:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003958:	2380      	movs	r3, #128	; 0x80
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4013      	ands	r3, r2
 800395e:	d0ef      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2220      	movs	r2, #32
 8003966:	4013      	ands	r3, r2
 8003968:	d01f      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	23c0      	movs	r3, #192	; 0xc0
 8003970:	029b      	lsls	r3, r3, #10
 8003972:	401a      	ands	r2, r3
 8003974:	23c0      	movs	r3, #192	; 0xc0
 8003976:	029b      	lsls	r3, r3, #10
 8003978:	429a      	cmp	r2, r3
 800397a:	d10c      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800397c:	4b31      	ldr	r3, [pc, #196]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a35      	ldr	r2, [pc, #212]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003982:	4013      	ands	r3, r2
 8003984:	0019      	movs	r1, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	23c0      	movs	r3, #192	; 0xc0
 800398c:	039b      	lsls	r3, r3, #14
 800398e:	401a      	ands	r2, r3
 8003990:	4b2c      	ldr	r3, [pc, #176]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003992:	430a      	orrs	r2, r1
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	4b2b      	ldr	r3, [pc, #172]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003998:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	23c0      	movs	r3, #192	; 0xc0
 80039a0:	029b      	lsls	r3, r3, #10
 80039a2:	401a      	ands	r2, r3
 80039a4:	4b27      	ldr	r3, [pc, #156]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039a6:	430a      	orrs	r2, r1
 80039a8:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039aa:	2317      	movs	r3, #23
 80039ac:	18fb      	adds	r3, r7, r3
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d105      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039b4:	4b23      	ldr	r3, [pc, #140]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039b8:	4b22      	ldr	r3, [pc, #136]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039ba:	4928      	ldr	r1, [pc, #160]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80039bc:	400a      	ands	r2, r1
 80039be:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2202      	movs	r2, #2
 80039c6:	4013      	ands	r3, r2
 80039c8:	d009      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039ca:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ce:	220c      	movs	r2, #12
 80039d0:	4393      	bics	r3, r2
 80039d2:	0019      	movs	r1, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	4b1a      	ldr	r3, [pc, #104]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039da:	430a      	orrs	r2, r1
 80039dc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2204      	movs	r2, #4
 80039e4:	4013      	ands	r3, r2
 80039e6:	d009      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039e8:	4b16      	ldr	r3, [pc, #88]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ec:	4a1c      	ldr	r2, [pc, #112]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80039ee:	4013      	ands	r3, r2
 80039f0:	0019      	movs	r1, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	4b13      	ldr	r3, [pc, #76]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039f8:	430a      	orrs	r2, r1
 80039fa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2208      	movs	r2, #8
 8003a02:	4013      	ands	r3, r2
 8003a04:	d009      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a06:	4b0f      	ldr	r3, [pc, #60]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0a:	4a16      	ldr	r2, [pc, #88]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	0019      	movs	r1, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a16:	430a      	orrs	r2, r1
 8003a18:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2280      	movs	r2, #128	; 0x80
 8003a20:	4013      	ands	r3, r2
 8003a22:	d009      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003a24:	4b07      	ldr	r3, [pc, #28]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a28:	4a0f      	ldr	r2, [pc, #60]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	0019      	movs	r1, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695a      	ldr	r2, [r3, #20]
 8003a32:	4b04      	ldr	r3, [pc, #16]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a34:	430a      	orrs	r2, r1
 8003a36:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	b006      	add	sp, #24
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40007000 	.word	0x40007000
 8003a4c:	fffcffff 	.word	0xfffcffff
 8003a50:	fff7ffff 	.word	0xfff7ffff
 8003a54:	00001388 	.word	0x00001388
 8003a58:	ffcfffff 	.word	0xffcfffff
 8003a5c:	efffffff 	.word	0xefffffff
 8003a60:	fffff3ff 	.word	0xfffff3ff
 8003a64:	ffffcfff 	.word	0xffffcfff
 8003a68:	fff3ffff 	.word	0xfff3ffff

08003a6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e044      	b.n	8003b08 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d107      	bne.n	8003a96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2278      	movs	r2, #120	; 0x78
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	0018      	movs	r0, r3
 8003a92:	f7fd fdf7 	bl	8001684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2224      	movs	r2, #36	; 0x24
 8003a9a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	438a      	bics	r2, r1
 8003aaa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f000 f8d0 	bl	8003c54 <UART_SetConfig>
 8003ab4:	0003      	movs	r3, r0
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d101      	bne.n	8003abe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e024      	b.n	8003b08 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f000 fb0d 	bl	80040e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	490d      	ldr	r1, [pc, #52]	; (8003b10 <HAL_UART_Init+0xa4>)
 8003ada:	400a      	ands	r2, r1
 8003adc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	212a      	movs	r1, #42	; 0x2a
 8003aea:	438a      	bics	r2, r1
 8003aec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2101      	movs	r1, #1
 8003afa:	430a      	orrs	r2, r1
 8003afc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	0018      	movs	r0, r3
 8003b02:	f000 fba5 	bl	8004250 <UART_CheckIdleState>
 8003b06:	0003      	movs	r3, r0
}
 8003b08:	0018      	movs	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	b002      	add	sp, #8
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	ffffb7ff 	.word	0xffffb7ff

08003b14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b08a      	sub	sp, #40	; 0x28
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	603b      	str	r3, [r7, #0]
 8003b20:	1dbb      	adds	r3, r7, #6
 8003b22:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b28:	2b20      	cmp	r3, #32
 8003b2a:	d000      	beq.n	8003b2e <HAL_UART_Transmit+0x1a>
 8003b2c:	e08c      	b.n	8003c48 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_UART_Transmit+0x28>
 8003b34:	1dbb      	adds	r3, r7, #6
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e084      	b.n	8003c4a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	2380      	movs	r3, #128	; 0x80
 8003b46:	015b      	lsls	r3, r3, #5
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d109      	bne.n	8003b60 <HAL_UART_Transmit+0x4c>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d105      	bne.n	8003b60 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2201      	movs	r2, #1
 8003b58:	4013      	ands	r3, r2
 8003b5a:	d001      	beq.n	8003b60 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e074      	b.n	8003c4a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2284      	movs	r2, #132	; 0x84
 8003b64:	2100      	movs	r1, #0
 8003b66:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2221      	movs	r2, #33	; 0x21
 8003b6c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b6e:	f7fd fe75 	bl	800185c <HAL_GetTick>
 8003b72:	0003      	movs	r3, r0
 8003b74:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1dba      	adds	r2, r7, #6
 8003b7a:	2150      	movs	r1, #80	; 0x50
 8003b7c:	8812      	ldrh	r2, [r2, #0]
 8003b7e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	1dba      	adds	r2, r7, #6
 8003b84:	2152      	movs	r1, #82	; 0x52
 8003b86:	8812      	ldrh	r2, [r2, #0]
 8003b88:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	2380      	movs	r3, #128	; 0x80
 8003b90:	015b      	lsls	r3, r3, #5
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d108      	bne.n	8003ba8 <HAL_UART_Transmit+0x94>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d104      	bne.n	8003ba8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	61bb      	str	r3, [r7, #24]
 8003ba6:	e003      	b.n	8003bb0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bb0:	e02f      	b.n	8003c12 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	0013      	movs	r3, r2
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	2180      	movs	r1, #128	; 0x80
 8003bc0:	f000 fbee 	bl	80043a0 <UART_WaitOnFlagUntilTimeout>
 8003bc4:	1e03      	subs	r3, r0, #0
 8003bc6:	d004      	beq.n	8003bd2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e03b      	b.n	8003c4a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10b      	bne.n	8003bf0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	001a      	movs	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	05d2      	lsls	r2, r2, #23
 8003be4:	0dd2      	lsrs	r2, r2, #23
 8003be6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	3302      	adds	r3, #2
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	e007      	b.n	8003c00 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	781a      	ldrb	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2252      	movs	r2, #82	; 0x52
 8003c04:	5a9b      	ldrh	r3, [r3, r2]
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b299      	uxth	r1, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2252      	movs	r2, #82	; 0x52
 8003c10:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2252      	movs	r2, #82	; 0x52
 8003c16:	5a9b      	ldrh	r3, [r3, r2]
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1c9      	bne.n	8003bb2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	0013      	movs	r3, r2
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2140      	movs	r1, #64	; 0x40
 8003c2c:	f000 fbb8 	bl	80043a0 <UART_WaitOnFlagUntilTimeout>
 8003c30:	1e03      	subs	r3, r0, #0
 8003c32:	d004      	beq.n	8003c3e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2220      	movs	r2, #32
 8003c38:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e005      	b.n	8003c4a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2220      	movs	r2, #32
 8003c42:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	e000      	b.n	8003c4a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003c48:	2302      	movs	r3, #2
  }
}
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	b008      	add	sp, #32
 8003c50:	bd80      	pop	{r7, pc}
	...

08003c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c54:	b5b0      	push	{r4, r5, r7, lr}
 8003c56:	b08e      	sub	sp, #56	; 0x38
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c5c:	231a      	movs	r3, #26
 8003c5e:	2218      	movs	r2, #24
 8003c60:	189b      	adds	r3, r3, r2
 8003c62:	19db      	adds	r3, r3, r7
 8003c64:	2200      	movs	r2, #0
 8003c66:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	431a      	orrs	r2, r3
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	431a      	orrs	r2, r3
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4ab4      	ldr	r2, [pc, #720]	; (8003f58 <UART_SetConfig+0x304>)
 8003c88:	4013      	ands	r3, r2
 8003c8a:	0019      	movs	r1, r3
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c92:	430a      	orrs	r2, r1
 8003c94:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	4aaf      	ldr	r2, [pc, #700]	; (8003f5c <UART_SetConfig+0x308>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	0019      	movs	r1, r3
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4aa9      	ldr	r2, [pc, #676]	; (8003f60 <UART_SetConfig+0x30c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d004      	beq.n	8003cc8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	4aa5      	ldr	r2, [pc, #660]	; (8003f64 <UART_SetConfig+0x310>)
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	0019      	movs	r1, r3
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4aa1      	ldr	r2, [pc, #644]	; (8003f68 <UART_SetConfig+0x314>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d131      	bne.n	8003d4c <UART_SetConfig+0xf8>
 8003ce8:	4ba0      	ldr	r3, [pc, #640]	; (8003f6c <UART_SetConfig+0x318>)
 8003cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cec:	220c      	movs	r2, #12
 8003cee:	4013      	ands	r3, r2
 8003cf0:	2b0c      	cmp	r3, #12
 8003cf2:	d01d      	beq.n	8003d30 <UART_SetConfig+0xdc>
 8003cf4:	d823      	bhi.n	8003d3e <UART_SetConfig+0xea>
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d00c      	beq.n	8003d14 <UART_SetConfig+0xc0>
 8003cfa:	d820      	bhi.n	8003d3e <UART_SetConfig+0xea>
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <UART_SetConfig+0xb2>
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d00e      	beq.n	8003d22 <UART_SetConfig+0xce>
 8003d04:	e01b      	b.n	8003d3e <UART_SetConfig+0xea>
 8003d06:	231b      	movs	r3, #27
 8003d08:	2218      	movs	r2, #24
 8003d0a:	189b      	adds	r3, r3, r2
 8003d0c:	19db      	adds	r3, r3, r7
 8003d0e:	2200      	movs	r2, #0
 8003d10:	701a      	strb	r2, [r3, #0]
 8003d12:	e065      	b.n	8003de0 <UART_SetConfig+0x18c>
 8003d14:	231b      	movs	r3, #27
 8003d16:	2218      	movs	r2, #24
 8003d18:	189b      	adds	r3, r3, r2
 8003d1a:	19db      	adds	r3, r3, r7
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	701a      	strb	r2, [r3, #0]
 8003d20:	e05e      	b.n	8003de0 <UART_SetConfig+0x18c>
 8003d22:	231b      	movs	r3, #27
 8003d24:	2218      	movs	r2, #24
 8003d26:	189b      	adds	r3, r3, r2
 8003d28:	19db      	adds	r3, r3, r7
 8003d2a:	2204      	movs	r2, #4
 8003d2c:	701a      	strb	r2, [r3, #0]
 8003d2e:	e057      	b.n	8003de0 <UART_SetConfig+0x18c>
 8003d30:	231b      	movs	r3, #27
 8003d32:	2218      	movs	r2, #24
 8003d34:	189b      	adds	r3, r3, r2
 8003d36:	19db      	adds	r3, r3, r7
 8003d38:	2208      	movs	r2, #8
 8003d3a:	701a      	strb	r2, [r3, #0]
 8003d3c:	e050      	b.n	8003de0 <UART_SetConfig+0x18c>
 8003d3e:	231b      	movs	r3, #27
 8003d40:	2218      	movs	r2, #24
 8003d42:	189b      	adds	r3, r3, r2
 8003d44:	19db      	adds	r3, r3, r7
 8003d46:	2210      	movs	r2, #16
 8003d48:	701a      	strb	r2, [r3, #0]
 8003d4a:	e049      	b.n	8003de0 <UART_SetConfig+0x18c>
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a83      	ldr	r2, [pc, #524]	; (8003f60 <UART_SetConfig+0x30c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d13e      	bne.n	8003dd4 <UART_SetConfig+0x180>
 8003d56:	4b85      	ldr	r3, [pc, #532]	; (8003f6c <UART_SetConfig+0x318>)
 8003d58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d5a:	23c0      	movs	r3, #192	; 0xc0
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	4013      	ands	r3, r2
 8003d60:	22c0      	movs	r2, #192	; 0xc0
 8003d62:	0112      	lsls	r2, r2, #4
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d027      	beq.n	8003db8 <UART_SetConfig+0x164>
 8003d68:	22c0      	movs	r2, #192	; 0xc0
 8003d6a:	0112      	lsls	r2, r2, #4
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d82a      	bhi.n	8003dc6 <UART_SetConfig+0x172>
 8003d70:	2280      	movs	r2, #128	; 0x80
 8003d72:	0112      	lsls	r2, r2, #4
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d011      	beq.n	8003d9c <UART_SetConfig+0x148>
 8003d78:	2280      	movs	r2, #128	; 0x80
 8003d7a:	0112      	lsls	r2, r2, #4
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d822      	bhi.n	8003dc6 <UART_SetConfig+0x172>
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d004      	beq.n	8003d8e <UART_SetConfig+0x13a>
 8003d84:	2280      	movs	r2, #128	; 0x80
 8003d86:	00d2      	lsls	r2, r2, #3
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d00e      	beq.n	8003daa <UART_SetConfig+0x156>
 8003d8c:	e01b      	b.n	8003dc6 <UART_SetConfig+0x172>
 8003d8e:	231b      	movs	r3, #27
 8003d90:	2218      	movs	r2, #24
 8003d92:	189b      	adds	r3, r3, r2
 8003d94:	19db      	adds	r3, r3, r7
 8003d96:	2200      	movs	r2, #0
 8003d98:	701a      	strb	r2, [r3, #0]
 8003d9a:	e021      	b.n	8003de0 <UART_SetConfig+0x18c>
 8003d9c:	231b      	movs	r3, #27
 8003d9e:	2218      	movs	r2, #24
 8003da0:	189b      	adds	r3, r3, r2
 8003da2:	19db      	adds	r3, r3, r7
 8003da4:	2202      	movs	r2, #2
 8003da6:	701a      	strb	r2, [r3, #0]
 8003da8:	e01a      	b.n	8003de0 <UART_SetConfig+0x18c>
 8003daa:	231b      	movs	r3, #27
 8003dac:	2218      	movs	r2, #24
 8003dae:	189b      	adds	r3, r3, r2
 8003db0:	19db      	adds	r3, r3, r7
 8003db2:	2204      	movs	r2, #4
 8003db4:	701a      	strb	r2, [r3, #0]
 8003db6:	e013      	b.n	8003de0 <UART_SetConfig+0x18c>
 8003db8:	231b      	movs	r3, #27
 8003dba:	2218      	movs	r2, #24
 8003dbc:	189b      	adds	r3, r3, r2
 8003dbe:	19db      	adds	r3, r3, r7
 8003dc0:	2208      	movs	r2, #8
 8003dc2:	701a      	strb	r2, [r3, #0]
 8003dc4:	e00c      	b.n	8003de0 <UART_SetConfig+0x18c>
 8003dc6:	231b      	movs	r3, #27
 8003dc8:	2218      	movs	r2, #24
 8003dca:	189b      	adds	r3, r3, r2
 8003dcc:	19db      	adds	r3, r3, r7
 8003dce:	2210      	movs	r2, #16
 8003dd0:	701a      	strb	r2, [r3, #0]
 8003dd2:	e005      	b.n	8003de0 <UART_SetConfig+0x18c>
 8003dd4:	231b      	movs	r3, #27
 8003dd6:	2218      	movs	r2, #24
 8003dd8:	189b      	adds	r3, r3, r2
 8003dda:	19db      	adds	r3, r3, r7
 8003ddc:	2210      	movs	r2, #16
 8003dde:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a5e      	ldr	r2, [pc, #376]	; (8003f60 <UART_SetConfig+0x30c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d000      	beq.n	8003dec <UART_SetConfig+0x198>
 8003dea:	e084      	b.n	8003ef6 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dec:	231b      	movs	r3, #27
 8003dee:	2218      	movs	r2, #24
 8003df0:	189b      	adds	r3, r3, r2
 8003df2:	19db      	adds	r3, r3, r7
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d01d      	beq.n	8003e36 <UART_SetConfig+0x1e2>
 8003dfa:	dc20      	bgt.n	8003e3e <UART_SetConfig+0x1ea>
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d015      	beq.n	8003e2c <UART_SetConfig+0x1d8>
 8003e00:	dc1d      	bgt.n	8003e3e <UART_SetConfig+0x1ea>
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <UART_SetConfig+0x1b8>
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d005      	beq.n	8003e16 <UART_SetConfig+0x1c2>
 8003e0a:	e018      	b.n	8003e3e <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e0c:	f7ff fcd6 	bl	80037bc <HAL_RCC_GetPCLK1Freq>
 8003e10:	0003      	movs	r3, r0
 8003e12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e14:	e01c      	b.n	8003e50 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e16:	4b55      	ldr	r3, [pc, #340]	; (8003f6c <UART_SetConfig+0x318>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2210      	movs	r2, #16
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	d002      	beq.n	8003e26 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003e20:	4b53      	ldr	r3, [pc, #332]	; (8003f70 <UART_SetConfig+0x31c>)
 8003e22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003e24:	e014      	b.n	8003e50 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8003e26:	4b53      	ldr	r3, [pc, #332]	; (8003f74 <UART_SetConfig+0x320>)
 8003e28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e2a:	e011      	b.n	8003e50 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e2c:	f7ff fc16 	bl	800365c <HAL_RCC_GetSysClockFreq>
 8003e30:	0003      	movs	r3, r0
 8003e32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e34:	e00c      	b.n	8003e50 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e36:	2380      	movs	r3, #128	; 0x80
 8003e38:	021b      	lsls	r3, r3, #8
 8003e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e3c:	e008      	b.n	8003e50 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003e42:	231a      	movs	r3, #26
 8003e44:	2218      	movs	r2, #24
 8003e46:	189b      	adds	r3, r3, r2
 8003e48:	19db      	adds	r3, r3, r7
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	701a      	strb	r2, [r3, #0]
        break;
 8003e4e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d100      	bne.n	8003e58 <UART_SetConfig+0x204>
 8003e56:	e12f      	b.n	80040b8 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	0013      	movs	r3, r2
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	189b      	adds	r3, r3, r2
 8003e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d305      	bcc.n	8003e74 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d906      	bls.n	8003e82 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8003e74:	231a      	movs	r3, #26
 8003e76:	2218      	movs	r2, #24
 8003e78:	189b      	adds	r3, r3, r2
 8003e7a:	19db      	adds	r3, r3, r7
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e11a      	b.n	80040b8 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	2300      	movs	r3, #0
 8003e88:	617b      	str	r3, [r7, #20]
 8003e8a:	6939      	ldr	r1, [r7, #16]
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	000b      	movs	r3, r1
 8003e90:	0e1b      	lsrs	r3, r3, #24
 8003e92:	0010      	movs	r0, r2
 8003e94:	0205      	lsls	r5, r0, #8
 8003e96:	431d      	orrs	r5, r3
 8003e98:	000b      	movs	r3, r1
 8003e9a:	021c      	lsls	r4, r3, #8
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	085b      	lsrs	r3, r3, #1
 8003ea2:	60bb      	str	r3, [r7, #8]
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	68b8      	ldr	r0, [r7, #8]
 8003eaa:	68f9      	ldr	r1, [r7, #12]
 8003eac:	1900      	adds	r0, r0, r4
 8003eae:	4169      	adcs	r1, r5
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	603b      	str	r3, [r7, #0]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	607b      	str	r3, [r7, #4]
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f7fc f9d3 	bl	8000268 <__aeabi_uldivmod>
 8003ec2:	0002      	movs	r2, r0
 8003ec4:	000b      	movs	r3, r1
 8003ec6:	0013      	movs	r3, r2
 8003ec8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ecc:	23c0      	movs	r3, #192	; 0xc0
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d309      	bcc.n	8003ee8 <UART_SetConfig+0x294>
 8003ed4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ed6:	2380      	movs	r3, #128	; 0x80
 8003ed8:	035b      	lsls	r3, r3, #13
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d204      	bcs.n	8003ee8 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ee4:	60da      	str	r2, [r3, #12]
 8003ee6:	e0e7      	b.n	80040b8 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8003ee8:	231a      	movs	r3, #26
 8003eea:	2218      	movs	r2, #24
 8003eec:	189b      	adds	r3, r3, r2
 8003eee:	19db      	adds	r3, r3, r7
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	701a      	strb	r2, [r3, #0]
 8003ef4:	e0e0      	b.n	80040b8 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	69da      	ldr	r2, [r3, #28]
 8003efa:	2380      	movs	r3, #128	; 0x80
 8003efc:	021b      	lsls	r3, r3, #8
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d000      	beq.n	8003f04 <UART_SetConfig+0x2b0>
 8003f02:	e082      	b.n	800400a <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8003f04:	231b      	movs	r3, #27
 8003f06:	2218      	movs	r2, #24
 8003f08:	189b      	adds	r3, r3, r2
 8003f0a:	19db      	adds	r3, r3, r7
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d834      	bhi.n	8003f7c <UART_SetConfig+0x328>
 8003f12:	009a      	lsls	r2, r3, #2
 8003f14:	4b18      	ldr	r3, [pc, #96]	; (8003f78 <UART_SetConfig+0x324>)
 8003f16:	18d3      	adds	r3, r2, r3
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f1c:	f7ff fc4e 	bl	80037bc <HAL_RCC_GetPCLK1Freq>
 8003f20:	0003      	movs	r3, r0
 8003f22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f24:	e033      	b.n	8003f8e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f26:	f7ff fc5f 	bl	80037e8 <HAL_RCC_GetPCLK2Freq>
 8003f2a:	0003      	movs	r3, r0
 8003f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f2e:	e02e      	b.n	8003f8e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f30:	4b0e      	ldr	r3, [pc, #56]	; (8003f6c <UART_SetConfig+0x318>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2210      	movs	r2, #16
 8003f36:	4013      	ands	r3, r2
 8003f38:	d002      	beq.n	8003f40 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003f3a:	4b0d      	ldr	r3, [pc, #52]	; (8003f70 <UART_SetConfig+0x31c>)
 8003f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003f3e:	e026      	b.n	8003f8e <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8003f40:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <UART_SetConfig+0x320>)
 8003f42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f44:	e023      	b.n	8003f8e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f46:	f7ff fb89 	bl	800365c <HAL_RCC_GetSysClockFreq>
 8003f4a:	0003      	movs	r3, r0
 8003f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f4e:	e01e      	b.n	8003f8e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f50:	2380      	movs	r3, #128	; 0x80
 8003f52:	021b      	lsls	r3, r3, #8
 8003f54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f56:	e01a      	b.n	8003f8e <UART_SetConfig+0x33a>
 8003f58:	efff69f3 	.word	0xefff69f3
 8003f5c:	ffffcfff 	.word	0xffffcfff
 8003f60:	40004800 	.word	0x40004800
 8003f64:	fffff4ff 	.word	0xfffff4ff
 8003f68:	40004400 	.word	0x40004400
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	003d0900 	.word	0x003d0900
 8003f74:	00f42400 	.word	0x00f42400
 8003f78:	080045f4 	.word	0x080045f4
      default:
        pclk = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003f80:	231a      	movs	r3, #26
 8003f82:	2218      	movs	r2, #24
 8003f84:	189b      	adds	r3, r3, r2
 8003f86:	19db      	adds	r3, r3, r7
 8003f88:	2201      	movs	r2, #1
 8003f8a:	701a      	strb	r2, [r3, #0]
        break;
 8003f8c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d100      	bne.n	8003f96 <UART_SetConfig+0x342>
 8003f94:	e090      	b.n	80040b8 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f98:	005a      	lsls	r2, r3, #1
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	085b      	lsrs	r3, r3, #1
 8003fa0:	18d2      	adds	r2, r2, r3
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	0019      	movs	r1, r3
 8003fa8:	0010      	movs	r0, r2
 8003faa:	f7fc f8ad 	bl	8000108 <__udivsi3>
 8003fae:	0003      	movs	r3, r0
 8003fb0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb4:	2b0f      	cmp	r3, #15
 8003fb6:	d921      	bls.n	8003ffc <UART_SetConfig+0x3a8>
 8003fb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fba:	2380      	movs	r3, #128	; 0x80
 8003fbc:	025b      	lsls	r3, r3, #9
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d21c      	bcs.n	8003ffc <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	200e      	movs	r0, #14
 8003fc8:	2418      	movs	r4, #24
 8003fca:	1903      	adds	r3, r0, r4
 8003fcc:	19db      	adds	r3, r3, r7
 8003fce:	210f      	movs	r1, #15
 8003fd0:	438a      	bics	r2, r1
 8003fd2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd6:	085b      	lsrs	r3, r3, #1
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2207      	movs	r2, #7
 8003fdc:	4013      	ands	r3, r2
 8003fde:	b299      	uxth	r1, r3
 8003fe0:	1903      	adds	r3, r0, r4
 8003fe2:	19db      	adds	r3, r3, r7
 8003fe4:	1902      	adds	r2, r0, r4
 8003fe6:	19d2      	adds	r2, r2, r7
 8003fe8:	8812      	ldrh	r2, [r2, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	1902      	adds	r2, r0, r4
 8003ff4:	19d2      	adds	r2, r2, r7
 8003ff6:	8812      	ldrh	r2, [r2, #0]
 8003ff8:	60da      	str	r2, [r3, #12]
 8003ffa:	e05d      	b.n	80040b8 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003ffc:	231a      	movs	r3, #26
 8003ffe:	2218      	movs	r2, #24
 8004000:	189b      	adds	r3, r3, r2
 8004002:	19db      	adds	r3, r3, r7
 8004004:	2201      	movs	r2, #1
 8004006:	701a      	strb	r2, [r3, #0]
 8004008:	e056      	b.n	80040b8 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 800400a:	231b      	movs	r3, #27
 800400c:	2218      	movs	r2, #24
 800400e:	189b      	adds	r3, r3, r2
 8004010:	19db      	adds	r3, r3, r7
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b08      	cmp	r3, #8
 8004016:	d822      	bhi.n	800405e <UART_SetConfig+0x40a>
 8004018:	009a      	lsls	r2, r3, #2
 800401a:	4b2f      	ldr	r3, [pc, #188]	; (80040d8 <UART_SetConfig+0x484>)
 800401c:	18d3      	adds	r3, r2, r3
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004022:	f7ff fbcb 	bl	80037bc <HAL_RCC_GetPCLK1Freq>
 8004026:	0003      	movs	r3, r0
 8004028:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800402a:	e021      	b.n	8004070 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800402c:	f7ff fbdc 	bl	80037e8 <HAL_RCC_GetPCLK2Freq>
 8004030:	0003      	movs	r3, r0
 8004032:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004034:	e01c      	b.n	8004070 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004036:	4b29      	ldr	r3, [pc, #164]	; (80040dc <UART_SetConfig+0x488>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2210      	movs	r2, #16
 800403c:	4013      	ands	r3, r2
 800403e:	d002      	beq.n	8004046 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004040:	4b27      	ldr	r3, [pc, #156]	; (80040e0 <UART_SetConfig+0x48c>)
 8004042:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004044:	e014      	b.n	8004070 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8004046:	4b27      	ldr	r3, [pc, #156]	; (80040e4 <UART_SetConfig+0x490>)
 8004048:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800404a:	e011      	b.n	8004070 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800404c:	f7ff fb06 	bl	800365c <HAL_RCC_GetSysClockFreq>
 8004050:	0003      	movs	r3, r0
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004054:	e00c      	b.n	8004070 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004056:	2380      	movs	r3, #128	; 0x80
 8004058:	021b      	lsls	r3, r3, #8
 800405a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800405c:	e008      	b.n	8004070 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004062:	231a      	movs	r3, #26
 8004064:	2218      	movs	r2, #24
 8004066:	189b      	adds	r3, r3, r2
 8004068:	19db      	adds	r3, r3, r7
 800406a:	2201      	movs	r2, #1
 800406c:	701a      	strb	r2, [r3, #0]
        break;
 800406e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004072:	2b00      	cmp	r3, #0
 8004074:	d020      	beq.n	80040b8 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	085a      	lsrs	r2, r3, #1
 800407c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407e:	18d2      	adds	r2, r2, r3
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	0019      	movs	r1, r3
 8004086:	0010      	movs	r0, r2
 8004088:	f7fc f83e 	bl	8000108 <__udivsi3>
 800408c:	0003      	movs	r3, r0
 800408e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004092:	2b0f      	cmp	r3, #15
 8004094:	d90a      	bls.n	80040ac <UART_SetConfig+0x458>
 8004096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004098:	2380      	movs	r3, #128	; 0x80
 800409a:	025b      	lsls	r3, r3, #9
 800409c:	429a      	cmp	r2, r3
 800409e:	d205      	bcs.n	80040ac <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	60da      	str	r2, [r3, #12]
 80040aa:	e005      	b.n	80040b8 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80040ac:	231a      	movs	r3, #26
 80040ae:	2218      	movs	r2, #24
 80040b0:	189b      	adds	r3, r3, r2
 80040b2:	19db      	adds	r3, r3, r7
 80040b4:	2201      	movs	r2, #1
 80040b6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	2200      	movs	r2, #0
 80040bc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	2200      	movs	r2, #0
 80040c2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80040c4:	231a      	movs	r3, #26
 80040c6:	2218      	movs	r2, #24
 80040c8:	189b      	adds	r3, r3, r2
 80040ca:	19db      	adds	r3, r3, r7
 80040cc:	781b      	ldrb	r3, [r3, #0]
}
 80040ce:	0018      	movs	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	b00e      	add	sp, #56	; 0x38
 80040d4:	bdb0      	pop	{r4, r5, r7, pc}
 80040d6:	46c0      	nop			; (mov r8, r8)
 80040d8:	08004618 	.word	0x08004618
 80040dc:	40021000 	.word	0x40021000
 80040e0:	003d0900 	.word	0x003d0900
 80040e4:	00f42400 	.word	0x00f42400

080040e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	2201      	movs	r2, #1
 80040f6:	4013      	ands	r3, r2
 80040f8:	d00b      	beq.n	8004112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	4a4a      	ldr	r2, [pc, #296]	; (800422c <UART_AdvFeatureConfig+0x144>)
 8004102:	4013      	ands	r3, r2
 8004104:	0019      	movs	r1, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	2202      	movs	r2, #2
 8004118:	4013      	ands	r3, r2
 800411a:	d00b      	beq.n	8004134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	4a43      	ldr	r2, [pc, #268]	; (8004230 <UART_AdvFeatureConfig+0x148>)
 8004124:	4013      	ands	r3, r2
 8004126:	0019      	movs	r1, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	2204      	movs	r2, #4
 800413a:	4013      	ands	r3, r2
 800413c:	d00b      	beq.n	8004156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	4a3b      	ldr	r2, [pc, #236]	; (8004234 <UART_AdvFeatureConfig+0x14c>)
 8004146:	4013      	ands	r3, r2
 8004148:	0019      	movs	r1, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	2208      	movs	r2, #8
 800415c:	4013      	ands	r3, r2
 800415e:	d00b      	beq.n	8004178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	4a34      	ldr	r2, [pc, #208]	; (8004238 <UART_AdvFeatureConfig+0x150>)
 8004168:	4013      	ands	r3, r2
 800416a:	0019      	movs	r1, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	2210      	movs	r2, #16
 800417e:	4013      	ands	r3, r2
 8004180:	d00b      	beq.n	800419a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	4a2c      	ldr	r2, [pc, #176]	; (800423c <UART_AdvFeatureConfig+0x154>)
 800418a:	4013      	ands	r3, r2
 800418c:	0019      	movs	r1, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	2220      	movs	r2, #32
 80041a0:	4013      	ands	r3, r2
 80041a2:	d00b      	beq.n	80041bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	4a25      	ldr	r2, [pc, #148]	; (8004240 <UART_AdvFeatureConfig+0x158>)
 80041ac:	4013      	ands	r3, r2
 80041ae:	0019      	movs	r1, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	2240      	movs	r2, #64	; 0x40
 80041c2:	4013      	ands	r3, r2
 80041c4:	d01d      	beq.n	8004202 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	4a1d      	ldr	r2, [pc, #116]	; (8004244 <UART_AdvFeatureConfig+0x15c>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041e2:	2380      	movs	r3, #128	; 0x80
 80041e4:	035b      	lsls	r3, r3, #13
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d10b      	bne.n	8004202 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	4a15      	ldr	r2, [pc, #84]	; (8004248 <UART_AdvFeatureConfig+0x160>)
 80041f2:	4013      	ands	r3, r2
 80041f4:	0019      	movs	r1, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	2280      	movs	r2, #128	; 0x80
 8004208:	4013      	ands	r3, r2
 800420a:	d00b      	beq.n	8004224 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	4a0e      	ldr	r2, [pc, #56]	; (800424c <UART_AdvFeatureConfig+0x164>)
 8004214:	4013      	ands	r3, r2
 8004216:	0019      	movs	r1, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	605a      	str	r2, [r3, #4]
  }
}
 8004224:	46c0      	nop			; (mov r8, r8)
 8004226:	46bd      	mov	sp, r7
 8004228:	b002      	add	sp, #8
 800422a:	bd80      	pop	{r7, pc}
 800422c:	fffdffff 	.word	0xfffdffff
 8004230:	fffeffff 	.word	0xfffeffff
 8004234:	fffbffff 	.word	0xfffbffff
 8004238:	ffff7fff 	.word	0xffff7fff
 800423c:	ffffefff 	.word	0xffffefff
 8004240:	ffffdfff 	.word	0xffffdfff
 8004244:	ffefffff 	.word	0xffefffff
 8004248:	ff9fffff 	.word	0xff9fffff
 800424c:	fff7ffff 	.word	0xfff7ffff

08004250 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b092      	sub	sp, #72	; 0x48
 8004254:	af02      	add	r7, sp, #8
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2284      	movs	r2, #132	; 0x84
 800425c:	2100      	movs	r1, #0
 800425e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004260:	f7fd fafc 	bl	800185c <HAL_GetTick>
 8004264:	0003      	movs	r3, r0
 8004266:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2208      	movs	r2, #8
 8004270:	4013      	ands	r3, r2
 8004272:	2b08      	cmp	r3, #8
 8004274:	d12c      	bne.n	80042d0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004278:	2280      	movs	r2, #128	; 0x80
 800427a:	0391      	lsls	r1, r2, #14
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	4a46      	ldr	r2, [pc, #280]	; (8004398 <UART_CheckIdleState+0x148>)
 8004280:	9200      	str	r2, [sp, #0]
 8004282:	2200      	movs	r2, #0
 8004284:	f000 f88c 	bl	80043a0 <UART_WaitOnFlagUntilTimeout>
 8004288:	1e03      	subs	r3, r0, #0
 800428a:	d021      	beq.n	80042d0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800428c:	f3ef 8310 	mrs	r3, PRIMASK
 8004290:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004294:	63bb      	str	r3, [r7, #56]	; 0x38
 8004296:	2301      	movs	r3, #1
 8004298:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800429a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429c:	f383 8810 	msr	PRIMASK, r3
}
 80042a0:	46c0      	nop			; (mov r8, r8)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2180      	movs	r1, #128	; 0x80
 80042ae:	438a      	bics	r2, r1
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b8:	f383 8810 	msr	PRIMASK, r3
}
 80042bc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2220      	movs	r2, #32
 80042c2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2278      	movs	r2, #120	; 0x78
 80042c8:	2100      	movs	r1, #0
 80042ca:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e05f      	b.n	8004390 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2204      	movs	r2, #4
 80042d8:	4013      	ands	r3, r2
 80042da:	2b04      	cmp	r3, #4
 80042dc:	d146      	bne.n	800436c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e0:	2280      	movs	r2, #128	; 0x80
 80042e2:	03d1      	lsls	r1, r2, #15
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	4a2c      	ldr	r2, [pc, #176]	; (8004398 <UART_CheckIdleState+0x148>)
 80042e8:	9200      	str	r2, [sp, #0]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f000 f858 	bl	80043a0 <UART_WaitOnFlagUntilTimeout>
 80042f0:	1e03      	subs	r3, r0, #0
 80042f2:	d03b      	beq.n	800436c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042f4:	f3ef 8310 	mrs	r3, PRIMASK
 80042f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80042fa:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042fc:	637b      	str	r3, [r7, #52]	; 0x34
 80042fe:	2301      	movs	r3, #1
 8004300:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f383 8810 	msr	PRIMASK, r3
}
 8004308:	46c0      	nop			; (mov r8, r8)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4921      	ldr	r1, [pc, #132]	; (800439c <UART_CheckIdleState+0x14c>)
 8004316:	400a      	ands	r2, r1
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800431c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f383 8810 	msr	PRIMASK, r3
}
 8004324:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004326:	f3ef 8310 	mrs	r3, PRIMASK
 800432a:	61bb      	str	r3, [r7, #24]
  return(result);
 800432c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432e:	633b      	str	r3, [r7, #48]	; 0x30
 8004330:	2301      	movs	r3, #1
 8004332:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f383 8810 	msr	PRIMASK, r3
}
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689a      	ldr	r2, [r3, #8]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2101      	movs	r1, #1
 8004348:	438a      	bics	r2, r1
 800434a:	609a      	str	r2, [r3, #8]
 800434c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	f383 8810 	msr	PRIMASK, r3
}
 8004356:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2280      	movs	r2, #128	; 0x80
 800435c:	2120      	movs	r1, #32
 800435e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2278      	movs	r2, #120	; 0x78
 8004364:	2100      	movs	r1, #0
 8004366:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e011      	b.n	8004390 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2220      	movs	r2, #32
 8004370:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2280      	movs	r2, #128	; 0x80
 8004376:	2120      	movs	r1, #32
 8004378:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2278      	movs	r2, #120	; 0x78
 800438a:	2100      	movs	r1, #0
 800438c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	0018      	movs	r0, r3
 8004392:	46bd      	mov	sp, r7
 8004394:	b010      	add	sp, #64	; 0x40
 8004396:	bd80      	pop	{r7, pc}
 8004398:	01ffffff 	.word	0x01ffffff
 800439c:	fffffedf 	.word	0xfffffedf

080043a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	603b      	str	r3, [r7, #0]
 80043ac:	1dfb      	adds	r3, r7, #7
 80043ae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b0:	e04b      	b.n	800444a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	3301      	adds	r3, #1
 80043b6:	d048      	beq.n	800444a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b8:	f7fd fa50 	bl	800185c <HAL_GetTick>
 80043bc:	0002      	movs	r2, r0
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d302      	bcc.n	80043ce <UART_WaitOnFlagUntilTimeout+0x2e>
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e04b      	b.n	800446a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2204      	movs	r2, #4
 80043da:	4013      	ands	r3, r2
 80043dc:	d035      	beq.n	800444a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	2208      	movs	r2, #8
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d111      	bne.n	8004410 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2208      	movs	r2, #8
 80043f2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	0018      	movs	r0, r3
 80043f8:	f000 f83c 	bl	8004474 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2284      	movs	r2, #132	; 0x84
 8004400:	2108      	movs	r1, #8
 8004402:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2278      	movs	r2, #120	; 0x78
 8004408:	2100      	movs	r1, #0
 800440a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e02c      	b.n	800446a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	69da      	ldr	r2, [r3, #28]
 8004416:	2380      	movs	r3, #128	; 0x80
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	401a      	ands	r2, r3
 800441c:	2380      	movs	r3, #128	; 0x80
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	429a      	cmp	r2, r3
 8004422:	d112      	bne.n	800444a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2280      	movs	r2, #128	; 0x80
 800442a:	0112      	lsls	r2, r2, #4
 800442c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	0018      	movs	r0, r3
 8004432:	f000 f81f 	bl	8004474 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2284      	movs	r2, #132	; 0x84
 800443a:	2120      	movs	r1, #32
 800443c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2278      	movs	r2, #120	; 0x78
 8004442:	2100      	movs	r1, #0
 8004444:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e00f      	b.n	800446a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	4013      	ands	r3, r2
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	425a      	negs	r2, r3
 800445a:	4153      	adcs	r3, r2
 800445c:	b2db      	uxtb	r3, r3
 800445e:	001a      	movs	r2, r3
 8004460:	1dfb      	adds	r3, r7, #7
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	429a      	cmp	r2, r3
 8004466:	d0a4      	beq.n	80043b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	0018      	movs	r0, r3
 800446c:	46bd      	mov	sp, r7
 800446e:	b004      	add	sp, #16
 8004470:	bd80      	pop	{r7, pc}
	...

08004474 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08e      	sub	sp, #56	; 0x38
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800447c:	f3ef 8310 	mrs	r3, PRIMASK
 8004480:	617b      	str	r3, [r7, #20]
  return(result);
 8004482:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004484:	637b      	str	r3, [r7, #52]	; 0x34
 8004486:	2301      	movs	r3, #1
 8004488:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	f383 8810 	msr	PRIMASK, r3
}
 8004490:	46c0      	nop			; (mov r8, r8)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4926      	ldr	r1, [pc, #152]	; (8004538 <UART_EndRxTransfer+0xc4>)
 800449e:	400a      	ands	r2, r1
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	f383 8810 	msr	PRIMASK, r3
}
 80044ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ae:	f3ef 8310 	mrs	r3, PRIMASK
 80044b2:	623b      	str	r3, [r7, #32]
  return(result);
 80044b4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b6:	633b      	str	r3, [r7, #48]	; 0x30
 80044b8:	2301      	movs	r3, #1
 80044ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	f383 8810 	msr	PRIMASK, r3
}
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2101      	movs	r1, #1
 80044d0:	438a      	bics	r2, r1
 80044d2:	609a      	str	r2, [r3, #8]
 80044d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044da:	f383 8810 	msr	PRIMASK, r3
}
 80044de:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d118      	bne.n	800451a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044e8:	f3ef 8310 	mrs	r3, PRIMASK
 80044ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80044ee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044f2:	2301      	movs	r3, #1
 80044f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f383 8810 	msr	PRIMASK, r3
}
 80044fc:	46c0      	nop			; (mov r8, r8)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2110      	movs	r1, #16
 800450a:	438a      	bics	r2, r1
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004510:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f383 8810 	msr	PRIMASK, r3
}
 8004518:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2280      	movs	r2, #128	; 0x80
 800451e:	2120      	movs	r1, #32
 8004520:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	46bd      	mov	sp, r7
 8004532:	b00e      	add	sp, #56	; 0x38
 8004534:	bd80      	pop	{r7, pc}
 8004536:	46c0      	nop			; (mov r8, r8)
 8004538:	fffffedf 	.word	0xfffffedf

0800453c <__libc_init_array>:
 800453c:	b570      	push	{r4, r5, r6, lr}
 800453e:	2600      	movs	r6, #0
 8004540:	4d0c      	ldr	r5, [pc, #48]	; (8004574 <__libc_init_array+0x38>)
 8004542:	4c0d      	ldr	r4, [pc, #52]	; (8004578 <__libc_init_array+0x3c>)
 8004544:	1b64      	subs	r4, r4, r5
 8004546:	10a4      	asrs	r4, r4, #2
 8004548:	42a6      	cmp	r6, r4
 800454a:	d109      	bne.n	8004560 <__libc_init_array+0x24>
 800454c:	2600      	movs	r6, #0
 800454e:	f000 f821 	bl	8004594 <_init>
 8004552:	4d0a      	ldr	r5, [pc, #40]	; (800457c <__libc_init_array+0x40>)
 8004554:	4c0a      	ldr	r4, [pc, #40]	; (8004580 <__libc_init_array+0x44>)
 8004556:	1b64      	subs	r4, r4, r5
 8004558:	10a4      	asrs	r4, r4, #2
 800455a:	42a6      	cmp	r6, r4
 800455c:	d105      	bne.n	800456a <__libc_init_array+0x2e>
 800455e:	bd70      	pop	{r4, r5, r6, pc}
 8004560:	00b3      	lsls	r3, r6, #2
 8004562:	58eb      	ldr	r3, [r5, r3]
 8004564:	4798      	blx	r3
 8004566:	3601      	adds	r6, #1
 8004568:	e7ee      	b.n	8004548 <__libc_init_array+0xc>
 800456a:	00b3      	lsls	r3, r6, #2
 800456c:	58eb      	ldr	r3, [r5, r3]
 800456e:	4798      	blx	r3
 8004570:	3601      	adds	r6, #1
 8004572:	e7f2      	b.n	800455a <__libc_init_array+0x1e>
 8004574:	08004644 	.word	0x08004644
 8004578:	08004644 	.word	0x08004644
 800457c:	08004644 	.word	0x08004644
 8004580:	08004648 	.word	0x08004648

08004584 <memset>:
 8004584:	0003      	movs	r3, r0
 8004586:	1882      	adds	r2, r0, r2
 8004588:	4293      	cmp	r3, r2
 800458a:	d100      	bne.n	800458e <memset+0xa>
 800458c:	4770      	bx	lr
 800458e:	7019      	strb	r1, [r3, #0]
 8004590:	3301      	adds	r3, #1
 8004592:	e7f9      	b.n	8004588 <memset+0x4>

08004594 <_init>:
 8004594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800459a:	bc08      	pop	{r3}
 800459c:	469e      	mov	lr, r3
 800459e:	4770      	bx	lr

080045a0 <_fini>:
 80045a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a2:	46c0      	nop			; (mov r8, r8)
 80045a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045a6:	bc08      	pop	{r3}
 80045a8:	469e      	mov	lr, r3
 80045aa:	4770      	bx	lr
