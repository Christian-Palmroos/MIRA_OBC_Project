
stm32_serial_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  08008378  08008378  00018378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008898  08008898  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008898  08008898  00018898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088a0  080088a0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088a0  080088a0  000188a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088a4  080088a4  000188a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080088a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000434  200001e0  08008a88  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  08008a88  00020614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d51  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a55  00000000  00000000  00029f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  0002b9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000730  00000000  00000000  0002c190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000166ba  00000000  00000000  0002c8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ff7  00000000  00000000  00042f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000872fa  00000000  00000000  0004cf71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d426b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003358  00000000  00000000  000d42bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800835c 	.word	0x0800835c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800835c 	.word	0x0800835c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b9aa 	b.w	8000fb4 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f83c 	bl	8000ce4 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2lz>:
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	4604      	mov	r4, r0
 8000c80:	460d      	mov	r5, r1
 8000c82:	f7ff ff33 	bl	8000aec <__aeabi_dcmplt>
 8000c86:	b928      	cbnz	r0, 8000c94 <__aeabi_d2lz+0x1c>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	4629      	mov	r1, r5
 8000c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c90:	f000 b80a 	b.w	8000ca8 <__aeabi_d2ulz>
 8000c94:	4620      	mov	r0, r4
 8000c96:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c9a:	f000 f805 	bl	8000ca8 <__aeabi_d2ulz>
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca4:	bd38      	pop	{r3, r4, r5, pc}
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2ulz>:
 8000ca8:	b5d0      	push	{r4, r6, r7, lr}
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <__aeabi_d2ulz+0x34>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	4606      	mov	r6, r0
 8000cb0:	460f      	mov	r7, r1
 8000cb2:	f7ff fca9 	bl	8000608 <__aeabi_dmul>
 8000cb6:	f7ff ff57 	bl	8000b68 <__aeabi_d2uiz>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	f7ff fc2a 	bl	8000514 <__aeabi_ui2d>
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <__aeabi_d2ulz+0x38>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f7ff fca0 	bl	8000608 <__aeabi_dmul>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4630      	mov	r0, r6
 8000cce:	4639      	mov	r1, r7
 8000cd0:	f7ff fae2 	bl	8000298 <__aeabi_dsub>
 8000cd4:	f7ff ff48 	bl	8000b68 <__aeabi_d2uiz>
 8000cd8:	4621      	mov	r1, r4
 8000cda:	bdd0      	pop	{r4, r6, r7, pc}
 8000cdc:	3df00000 	.word	0x3df00000
 8000ce0:	41f00000 	.word	0x41f00000

08000ce4 <__udivmoddi4>:
 8000ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce8:	9d08      	ldr	r5, [sp, #32]
 8000cea:	4604      	mov	r4, r0
 8000cec:	468e      	mov	lr, r1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d14d      	bne.n	8000d8e <__udivmoddi4+0xaa>
 8000cf2:	428a      	cmp	r2, r1
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	d969      	bls.n	8000dcc <__udivmoddi4+0xe8>
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	b152      	cbz	r2, 8000d14 <__udivmoddi4+0x30>
 8000cfe:	fa01 f302 	lsl.w	r3, r1, r2
 8000d02:	f1c2 0120 	rsb	r1, r2, #32
 8000d06:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d12:	4094      	lsls	r4, r2
 8000d14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d18:	0c21      	lsrs	r1, r4, #16
 8000d1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d1e:	fa1f f78c 	uxth.w	r7, ip
 8000d22:	fb08 e316 	mls	r3, r8, r6, lr
 8000d26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2a:	fb06 f107 	mul.w	r1, r6, r7
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x64>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d3a:	f080 811f 	bcs.w	8000f7c <__udivmoddi4+0x298>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 811c 	bls.w	8000f7c <__udivmoddi4+0x298>
 8000d44:	3e02      	subs	r6, #2
 8000d46:	4463      	add	r3, ip
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d50:	fb08 3310 	mls	r3, r8, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 f707 	mul.w	r7, r0, r7
 8000d5c:	42a7      	cmp	r7, r4
 8000d5e:	d90a      	bls.n	8000d76 <__udivmoddi4+0x92>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d68:	f080 810a 	bcs.w	8000f80 <__udivmoddi4+0x29c>
 8000d6c:	42a7      	cmp	r7, r4
 8000d6e:	f240 8107 	bls.w	8000f80 <__udivmoddi4+0x29c>
 8000d72:	4464      	add	r4, ip
 8000d74:	3802      	subs	r0, #2
 8000d76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7a:	1be4      	subs	r4, r4, r7
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	b11d      	cbz	r5, 8000d88 <__udivmoddi4+0xa4>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c5 4300 	strd	r4, r3, [r5]
 8000d88:	4631      	mov	r1, r6
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xc2>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80ef 	beq.w	8000f76 <__udivmoddi4+0x292>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x160>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd4>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80f9 	bhi.w	8000faa <__udivmoddi4+0x2c6>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	469e      	mov	lr, r3
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa4>
 8000dc6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa4>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xec>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 8092 	bne.w	8000efe <__udivmoddi4+0x21a>
 8000dda:	eba1 010c 	sub.w	r1, r1, ip
 8000dde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de2:	fa1f fe8c 	uxth.w	lr, ip
 8000de6:	2601      	movs	r6, #1
 8000de8:	0c20      	lsrs	r0, r4, #16
 8000dea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dee:	fb07 1113 	mls	r1, r7, r3, r1
 8000df2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000df6:	fb0e f003 	mul.w	r0, lr, r3
 8000dfa:	4288      	cmp	r0, r1
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x12c>
 8000dfe:	eb1c 0101 	adds.w	r1, ip, r1
 8000e02:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x12a>
 8000e08:	4288      	cmp	r0, r1
 8000e0a:	f200 80cb 	bhi.w	8000fa4 <__udivmoddi4+0x2c0>
 8000e0e:	4643      	mov	r3, r8
 8000e10:	1a09      	subs	r1, r1, r0
 8000e12:	b2a4      	uxth	r4, r4
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1110 	mls	r1, r7, r0, r1
 8000e1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e20:	fb0e fe00 	mul.w	lr, lr, r0
 8000e24:	45a6      	cmp	lr, r4
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x156>
 8000e28:	eb1c 0404 	adds.w	r4, ip, r4
 8000e2c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e30:	d202      	bcs.n	8000e38 <__udivmoddi4+0x154>
 8000e32:	45a6      	cmp	lr, r4
 8000e34:	f200 80bb 	bhi.w	8000fae <__udivmoddi4+0x2ca>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	eba4 040e 	sub.w	r4, r4, lr
 8000e3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e42:	e79c      	b.n	8000d7e <__udivmoddi4+0x9a>
 8000e44:	f1c6 0720 	rsb	r7, r6, #32
 8000e48:	40b3      	lsls	r3, r6
 8000e4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e52:	fa20 f407 	lsr.w	r4, r0, r7
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	431c      	orrs	r4, r3
 8000e5c:	40f9      	lsrs	r1, r7
 8000e5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e62:	fa00 f306 	lsl.w	r3, r0, r6
 8000e66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6a:	0c20      	lsrs	r0, r4, #16
 8000e6c:	fa1f fe8c 	uxth.w	lr, ip
 8000e70:	fb09 1118 	mls	r1, r9, r8, r1
 8000e74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e78:	fb08 f00e 	mul.w	r0, r8, lr
 8000e7c:	4288      	cmp	r0, r1
 8000e7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e82:	d90b      	bls.n	8000e9c <__udivmoddi4+0x1b8>
 8000e84:	eb1c 0101 	adds.w	r1, ip, r1
 8000e88:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e8c:	f080 8088 	bcs.w	8000fa0 <__udivmoddi4+0x2bc>
 8000e90:	4288      	cmp	r0, r1
 8000e92:	f240 8085 	bls.w	8000fa0 <__udivmoddi4+0x2bc>
 8000e96:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	1a09      	subs	r1, r1, r0
 8000e9e:	b2a4      	uxth	r4, r4
 8000ea0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ea8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb0:	458e      	cmp	lr, r1
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x1e2>
 8000eb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ebc:	d26c      	bcs.n	8000f98 <__udivmoddi4+0x2b4>
 8000ebe:	458e      	cmp	lr, r1
 8000ec0:	d96a      	bls.n	8000f98 <__udivmoddi4+0x2b4>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	4461      	add	r1, ip
 8000ec6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eca:	fba0 9402 	umull	r9, r4, r0, r2
 8000ece:	eba1 010e 	sub.w	r1, r1, lr
 8000ed2:	42a1      	cmp	r1, r4
 8000ed4:	46c8      	mov	r8, r9
 8000ed6:	46a6      	mov	lr, r4
 8000ed8:	d356      	bcc.n	8000f88 <__udivmoddi4+0x2a4>
 8000eda:	d053      	beq.n	8000f84 <__udivmoddi4+0x2a0>
 8000edc:	b15d      	cbz	r5, 8000ef6 <__udivmoddi4+0x212>
 8000ede:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ee6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eea:	fa22 f306 	lsr.w	r3, r2, r6
 8000eee:	40f1      	lsrs	r1, r6
 8000ef0:	431f      	orrs	r7, r3
 8000ef2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ef6:	2600      	movs	r6, #0
 8000ef8:	4631      	mov	r1, r6
 8000efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efe:	f1c2 0320 	rsb	r3, r2, #32
 8000f02:	40d8      	lsrs	r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0c:	4091      	lsls	r1, r2
 8000f0e:	4301      	orrs	r1, r0
 8000f10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f14:	fa1f fe8c 	uxth.w	lr, ip
 8000f18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f20:	0c0b      	lsrs	r3, r1, #16
 8000f22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f26:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2a:	429e      	cmp	r6, r3
 8000f2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x260>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f3a:	d22f      	bcs.n	8000f9c <__udivmoddi4+0x2b8>
 8000f3c:	429e      	cmp	r6, r3
 8000f3e:	d92d      	bls.n	8000f9c <__udivmoddi4+0x2b8>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1b9b      	subs	r3, r3, r6
 8000f46:	b289      	uxth	r1, r1
 8000f48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f54:	fb06 f30e 	mul.w	r3, r6, lr
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x28a>
 8000f5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f60:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f64:	d216      	bcs.n	8000f94 <__udivmoddi4+0x2b0>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	d914      	bls.n	8000f94 <__udivmoddi4+0x2b0>
 8000f6a:	3e02      	subs	r6, #2
 8000f6c:	4461      	add	r1, ip
 8000f6e:	1ac9      	subs	r1, r1, r3
 8000f70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f74:	e738      	b.n	8000de8 <__udivmoddi4+0x104>
 8000f76:	462e      	mov	r6, r5
 8000f78:	4628      	mov	r0, r5
 8000f7a:	e705      	b.n	8000d88 <__udivmoddi4+0xa4>
 8000f7c:	4606      	mov	r6, r0
 8000f7e:	e6e3      	b.n	8000d48 <__udivmoddi4+0x64>
 8000f80:	4618      	mov	r0, r3
 8000f82:	e6f8      	b.n	8000d76 <__udivmoddi4+0x92>
 8000f84:	454b      	cmp	r3, r9
 8000f86:	d2a9      	bcs.n	8000edc <__udivmoddi4+0x1f8>
 8000f88:	ebb9 0802 	subs.w	r8, r9, r2
 8000f8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f90:	3801      	subs	r0, #1
 8000f92:	e7a3      	b.n	8000edc <__udivmoddi4+0x1f8>
 8000f94:	4646      	mov	r6, r8
 8000f96:	e7ea      	b.n	8000f6e <__udivmoddi4+0x28a>
 8000f98:	4620      	mov	r0, r4
 8000f9a:	e794      	b.n	8000ec6 <__udivmoddi4+0x1e2>
 8000f9c:	4640      	mov	r0, r8
 8000f9e:	e7d1      	b.n	8000f44 <__udivmoddi4+0x260>
 8000fa0:	46d0      	mov	r8, sl
 8000fa2:	e77b      	b.n	8000e9c <__udivmoddi4+0x1b8>
 8000fa4:	3b02      	subs	r3, #2
 8000fa6:	4461      	add	r1, ip
 8000fa8:	e732      	b.n	8000e10 <__udivmoddi4+0x12c>
 8000faa:	4630      	mov	r0, r6
 8000fac:	e709      	b.n	8000dc2 <__udivmoddi4+0xde>
 8000fae:	4464      	add	r4, ip
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	e742      	b.n	8000e3a <__udivmoddi4+0x156>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <HAL_UARTEx_RxEventCallback>:
/*
 * UART buffer handler based on the DMA receive function, every implementation is valid,
 * as long as you pass a sufficiently long receive buffer to the library.
 * */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
    oldPos = newPos; //keep track of the last position in the buffer
 8000fc4:	4b28      	ldr	r3, [pc, #160]	; (8001068 <HAL_UARTEx_RxEventCallback+0xb0>)
 8000fc6:	881a      	ldrh	r2, [r3, #0]
 8000fc8:	4b28      	ldr	r3, [pc, #160]	; (800106c <HAL_UARTEx_RxEventCallback+0xb4>)
 8000fca:	801a      	strh	r2, [r3, #0]
    if(oldPos + Size > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 8000fcc:	4b27      	ldr	r3, [pc, #156]	; (800106c <HAL_UARTEx_RxEventCallback+0xb4>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	887b      	ldrh	r3, [r7, #2]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fda:	dd22      	ble.n	8001022 <HAL_UARTEx_RxEventCallback+0x6a>

        uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 8000fdc:	4b23      	ldr	r3, [pc, #140]	; (800106c <HAL_UARTEx_RxEventCallback+0xb4>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8000fe4:	81fb      	strh	r3, [r7, #14]
        memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 8000fe6:	4b21      	ldr	r3, [pc, #132]	; (800106c <HAL_UARTEx_RxEventCallback+0xb4>)
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	4b20      	ldr	r3, [pc, #128]	; (8001070 <HAL_UARTEx_RxEventCallback+0xb8>)
 8000fee:	4413      	add	r3, r2
 8000ff0:	89fa      	ldrh	r2, [r7, #14]
 8000ff2:	4920      	ldr	r1, [pc, #128]	; (8001074 <HAL_UARTEx_RxEventCallback+0xbc>)
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f003 ffcf 	bl	8004f98 <memcpy>

        oldPos = 0;  // point to the start of the buffer
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	; (800106c <HAL_UARTEx_RxEventCallback+0xb4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	801a      	strh	r2, [r3, #0]
        memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (Size-datatocopy));  // copy the remaining data
 8001000:	89fb      	ldrh	r3, [r7, #14]
 8001002:	4a1c      	ldr	r2, [pc, #112]	; (8001074 <HAL_UARTEx_RxEventCallback+0xbc>)
 8001004:	1899      	adds	r1, r3, r2
 8001006:	887a      	ldrh	r2, [r7, #2]
 8001008:	89fb      	ldrh	r3, [r7, #14]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	461a      	mov	r2, r3
 800100e:	4818      	ldr	r0, [pc, #96]	; (8001070 <HAL_UARTEx_RxEventCallback+0xb8>)
 8001010:	f003 ffc2 	bl	8004f98 <memcpy>
        newPos = (Size-datatocopy);  // update the position
 8001014:	887a      	ldrh	r2, [r7, #2]
 8001016:	89fb      	ldrh	r3, [r7, #14]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	b29a      	uxth	r2, r3
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_UARTEx_RxEventCallback+0xb0>)
 800101e:	801a      	strh	r2, [r3, #0]
 8001020:	e010      	b.n	8001044 <HAL_UARTEx_RxEventCallback+0x8c>
    }
    else{
        memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, Size); //copy received data to the buffer
 8001022:	4b12      	ldr	r3, [pc, #72]	; (800106c <HAL_UARTEx_RxEventCallback+0xb4>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <HAL_UARTEx_RxEventCallback+0xb8>)
 800102a:	4413      	add	r3, r2
 800102c:	887a      	ldrh	r2, [r7, #2]
 800102e:	4911      	ldr	r1, [pc, #68]	; (8001074 <HAL_UARTEx_RxEventCallback+0xbc>)
 8001030:	4618      	mov	r0, r3
 8001032:	f003 ffb1 	bl	8004f98 <memcpy>
        newPos = Size+oldPos; //update buffer position
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <HAL_UARTEx_RxEventCallback+0xb4>)
 8001038:	881a      	ldrh	r2, [r3, #0]
 800103a:	887b      	ldrh	r3, [r7, #2]
 800103c:	4413      	add	r3, r2
 800103e:	b29a      	uxth	r2, r3
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_UARTEx_RxEventCallback+0xb0>)
 8001042:	801a      	strh	r2, [r3, #0]

    }
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)RxBuffer, RxBuffer_SIZE); //re-enable the DMA interrupt
 8001044:	2240      	movs	r2, #64	; 0x40
 8001046:	490b      	ldr	r1, [pc, #44]	; (8001074 <HAL_UARTEx_RxEventCallback+0xbc>)
 8001048:	480b      	ldr	r0, [pc, #44]	; (8001078 <HAL_UARTEx_RxEventCallback+0xc0>)
 800104a:	f002 fe16 	bl	8003c7a <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT); //disable the half transfer interrupt
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <HAL_UARTEx_RxEventCallback+0xc4>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <HAL_UARTEx_RxEventCallback+0xc4>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f022 0208 	bic.w	r2, r2, #8
 800105c:	601a      	str	r2, [r3, #0]
}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000346 	.word	0x20000346
 800106c:	20000344 	.word	0x20000344
 8001070:	20000388 	.word	0x20000388
 8001074:	20000348 	.word	0x20000348
 8001078:	200001fc 	.word	0x200001fc
 800107c:	20000284 	.word	0x20000284

08001080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001084:	b095      	sub	sp, #84	; 0x54
 8001086:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001088:	f001 f938 	bl	80022fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108c:	f000 f8a2 	bl	80011d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001090:	f000 f994 	bl	80013bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001094:	f000 f95c 	bl	8001350 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001098:	f000 f930 	bl	80012fc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800109c:	f000 f904 	bl	80012a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 80010a0:	2240      	movs	r2, #64	; 0x40
 80010a2:	4943      	ldr	r1, [pc, #268]	; (80011b0 <main+0x130>)
 80010a4:	4843      	ldr	r0, [pc, #268]	; (80011b4 <main+0x134>)
 80010a6:	f002 fde8 	bl	8003c7a <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80010aa:	4b43      	ldr	r3, [pc, #268]	; (80011b8 <main+0x138>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b41      	ldr	r3, [pc, #260]	; (80011b8 <main+0x138>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0208 	bic.w	r2, r2, #8
 80010b8:	601a      	str	r2, [r3, #0]
  int Serialcnt = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    nmea_parse(&myData, DataBuffer);
 80010be:	493f      	ldr	r1, [pc, #252]	; (80011bc <main+0x13c>)
 80010c0:	483f      	ldr	r0, [pc, #252]	; (80011c0 <main+0x140>)
 80010c2:	f000 fdff 	bl	8001cc4 <nmea_parse>

    if(myData.fix == 1){ //if the GPS has a fix, print the data
 80010c6:	4b3e      	ldr	r3, [pc, #248]	; (80011c0 <main+0x140>)
 80010c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d150      	bne.n	8001170 <main+0xf0>
        char * str = (char*)malloc(sizeof(char)*200);
 80010ce:	20c8      	movs	r0, #200	; 0xc8
 80010d0:	f003 ff52 	bl	8004f78 <malloc>
 80010d4:	4603      	mov	r3, r0
 80010d6:	60fb      	str	r3, [r7, #12]
        sprintf(str, "\r\n%d: Lat: %f %c, Lon: %f %c, Alt: %f m, Satellites: %d HDOP: %f\r\n",
 80010d8:	4b39      	ldr	r3, [pc, #228]	; (80011c0 <main+0x140>)
 80010da:	e9d3 4500 	ldrd	r4, r5, [r3]
                Serialcnt, myData.latitude, myData.latSide, myData.longitude, myData.lonSide, myData.altitude, myData.satelliteCount, myData.hdop);
 80010de:	4b38      	ldr	r3, [pc, #224]	; (80011c0 <main+0x140>)
 80010e0:	7a1b      	ldrb	r3, [r3, #8]
        sprintf(str, "\r\n%d: Lat: %f %c, Lon: %f %c, Alt: %f m, Satellites: %d HDOP: %f\r\n",
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	4b36      	ldr	r3, [pc, #216]	; (80011c0 <main+0x140>)
 80010e6:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
                Serialcnt, myData.latitude, myData.latSide, myData.longitude, myData.lonSide, myData.altitude, myData.satelliteCount, myData.hdop);
 80010ea:	4b35      	ldr	r3, [pc, #212]	; (80011c0 <main+0x140>)
 80010ec:	7e1b      	ldrb	r3, [r3, #24]
        sprintf(str, "\r\n%d: Lat: %f %c, Lon: %f %c, Alt: %f m, Satellites: %d HDOP: %f\r\n",
 80010ee:	603b      	str	r3, [r7, #0]
                Serialcnt, myData.latitude, myData.latSide, myData.longitude, myData.lonSide, myData.altitude, myData.satelliteCount, myData.hdop);
 80010f0:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <main+0x140>)
 80010f2:	69db      	ldr	r3, [r3, #28]
        sprintf(str, "\r\n%d: Lat: %f %c, Lon: %f %c, Alt: %f m, Satellites: %d HDOP: %f\r\n",
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fa2f 	bl	8000558 <__aeabi_f2d>
 80010fa:	4682      	mov	sl, r0
 80010fc:	468b      	mov	fp, r1
 80010fe:	4b30      	ldr	r3, [pc, #192]	; (80011c0 <main+0x140>)
 8001100:	6a5e      	ldr	r6, [r3, #36]	; 0x24
                Serialcnt, myData.latitude, myData.latSide, myData.longitude, myData.lonSide, myData.altitude, myData.satelliteCount, myData.hdop);
 8001102:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <main+0x140>)
 8001104:	6a1b      	ldr	r3, [r3, #32]
        sprintf(str, "\r\n%d: Lat: %f %c, Lon: %f %c, Alt: %f m, Satellites: %d HDOP: %f\r\n",
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fa26 	bl	8000558 <__aeabi_f2d>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001114:	960a      	str	r6, [sp, #40]	; 0x28
 8001116:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	9206      	str	r2, [sp, #24]
 800111e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	9302      	str	r3, [sp, #8]
 8001126:	e9cd 4500 	strd	r4, r5, [sp]
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	4925      	ldr	r1, [pc, #148]	; (80011c4 <main+0x144>)
 800112e:	68f8      	ldr	r0, [r7, #12]
 8001130:	f004 f838 	bl	80051a4 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f7ff f853 	bl	80001e0 <strlen>
 800113a:	4603      	mov	r3, r0
 800113c:	b29a      	uxth	r2, r3
 800113e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001142:	68f9      	ldr	r1, [r7, #12]
 8001144:	4820      	ldr	r0, [pc, #128]	; (80011c8 <main+0x148>)
 8001146:	f002 fd06 	bl	8003b56 <HAL_UART_Transmit>
        //Transmit last measure time for troubleshooting
        HAL_UART_Transmit(&huart2, (uint8_t *)myData.lastMeasure, strlen(myData.lastMeasure), 1000);
 800114a:	4820      	ldr	r0, [pc, #128]	; (80011cc <main+0x14c>)
 800114c:	f7ff f848 	bl	80001e0 <strlen>
 8001150:	4603      	mov	r3, r0
 8001152:	b29a      	uxth	r2, r3
 8001154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001158:	491c      	ldr	r1, [pc, #112]	; (80011cc <main+0x14c>)
 800115a:	481b      	ldr	r0, [pc, #108]	; (80011c8 <main+0x148>)
 800115c:	f002 fcfb 	bl	8003b56 <HAL_UART_Transmit>
        HAL_Delay(1000);
 8001160:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001164:	f001 f93c 	bl	80023e0 <HAL_Delay>
        free(str);
 8001168:	68f8      	ldr	r0, [r7, #12]
 800116a:	f003 ff0d 	bl	8004f88 <free>
 800116e:	e01b      	b.n	80011a8 <main+0x128>
    }
    else{ //if the GPS doesn't have a fix, print a message
        char *str = (char*)malloc(sizeof(char)*15);
 8001170:	200f      	movs	r0, #15
 8001172:	f003 ff01 	bl	8004f78 <malloc>
 8001176:	4603      	mov	r3, r0
 8001178:	613b      	str	r3, [r7, #16]
        sprintf(str, "%d: No fix\r\n", Serialcnt);
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	4914      	ldr	r1, [pc, #80]	; (80011d0 <main+0x150>)
 800117e:	6938      	ldr	r0, [r7, #16]
 8001180:	f004 f810 	bl	80051a4 <siprintf>
        HAL_UART_Transmit(&huart2, str, strlen(str), 1000);
 8001184:	6938      	ldr	r0, [r7, #16]
 8001186:	f7ff f82b 	bl	80001e0 <strlen>
 800118a:	4603      	mov	r3, r0
 800118c:	b29a      	uxth	r2, r3
 800118e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001192:	6939      	ldr	r1, [r7, #16]
 8001194:	480c      	ldr	r0, [pc, #48]	; (80011c8 <main+0x148>)
 8001196:	f002 fcde 	bl	8003b56 <HAL_UART_Transmit>
        HAL_Delay(5000);
 800119a:	f241 3088 	movw	r0, #5000	; 0x1388
 800119e:	f001 f91f 	bl	80023e0 <HAL_Delay>
        free(str);
 80011a2:	6938      	ldr	r0, [r7, #16]
 80011a4:	f003 fef0 	bl	8004f88 <free>
    }
    Serialcnt++;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	3301      	adds	r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
    nmea_parse(&myData, DataBuffer);
 80011ae:	e786      	b.n	80010be <main+0x3e>
 80011b0:	20000348 	.word	0x20000348
 80011b4:	200001fc 	.word	0x200001fc
 80011b8:	20000284 	.word	0x20000284
 80011bc:	20000388 	.word	0x20000388
 80011c0:	20000588 	.word	0x20000588
 80011c4:	08008378 	.word	0x08008378
 80011c8:	20000240 	.word	0x20000240
 80011cc:	200005b4 	.word	0x200005b4
 80011d0:	080083bc 	.word	0x080083bc

080011d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b094      	sub	sp, #80	; 0x50
 80011d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011da:	f107 0320 	add.w	r3, r7, #32
 80011de:	2230      	movs	r2, #48	; 0x30
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f003 fee6 	bl	8004fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <SystemClock_Config+0xcc>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	4a27      	ldr	r2, [pc, #156]	; (80012a0 <SystemClock_Config+0xcc>)
 8001202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001206:	6413      	str	r3, [r2, #64]	; 0x40
 8001208:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <SystemClock_Config+0xcc>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001214:	2300      	movs	r3, #0
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	4b22      	ldr	r3, [pc, #136]	; (80012a4 <SystemClock_Config+0xd0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a21      	ldr	r2, [pc, #132]	; (80012a4 <SystemClock_Config+0xd0>)
 800121e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <SystemClock_Config+0xd0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001230:	2302      	movs	r3, #2
 8001232:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001234:	2301      	movs	r3, #1
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001238:	2310      	movs	r3, #16
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123c:	2302      	movs	r3, #2
 800123e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001240:	2300      	movs	r3, #0
 8001242:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001244:	2310      	movs	r3, #16
 8001246:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001248:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800124c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800124e:	2304      	movs	r3, #4
 8001250:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001252:	2304      	movs	r3, #4
 8001254:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001256:	f107 0320 	add.w	r3, r7, #32
 800125a:	4618      	mov	r0, r3
 800125c:	f001 ff96 	bl	800318c <HAL_RCC_OscConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001266:	f000 f917 	bl	8001498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126a:	230f      	movs	r3, #15
 800126c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126e:	2302      	movs	r3, #2
 8001270:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	2102      	movs	r1, #2
 8001286:	4618      	mov	r0, r3
 8001288:	f002 f9f8 	bl	800367c <HAL_RCC_ClockConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001292:	f000 f901 	bl	8001498 <Error_Handler>
  }
}
 8001296:	bf00      	nop
 8001298:	3750      	adds	r7, #80	; 0x50
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40007000 	.word	0x40007000

080012a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_USART1_UART_Init+0x4c>)
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <MX_USART1_UART_Init+0x50>)
 80012b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <MX_USART1_UART_Init+0x4c>)
 80012b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_USART1_UART_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_USART1_UART_Init+0x4c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <MX_USART1_UART_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_USART1_UART_Init+0x4c>)
 80012ce:	220c      	movs	r2, #12
 80012d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <MX_USART1_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_USART1_UART_Init+0x4c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_USART1_UART_Init+0x4c>)
 80012e0:	f002 fbec 	bl	8003abc <HAL_UART_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012ea:	f000 f8d5 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200001fc 	.word	0x200001fc
 80012f8:	40011000 	.word	0x40011000

080012fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 8001302:	4a12      	ldr	r2, [pc, #72]	; (800134c <MX_USART2_UART_Init+0x50>)
 8001304:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 8001308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800130c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 8001322:	220c      	movs	r2, #12
 8001324:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 8001334:	f002 fbc2 	bl	8003abc <HAL_UART_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800133e:	f000 f8ab 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000240 	.word	0x20000240
 800134c:	40004400 	.word	0x40004400

08001350 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <MX_DMA_Init+0x68>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a16      	ldr	r2, [pc, #88]	; (80013b8 <MX_DMA_Init+0x68>)
 8001360:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <MX_DMA_Init+0x68>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	603b      	str	r3, [r7, #0]
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <MX_DMA_Init+0x68>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a0f      	ldr	r2, [pc, #60]	; (80013b8 <MX_DMA_Init+0x68>)
 800137c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <MX_DMA_Init+0x68>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2100      	movs	r1, #0
 8001392:	2010      	movs	r0, #16
 8001394:	f001 f923 	bl	80025de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001398:	2010      	movs	r0, #16
 800139a:	f001 f93c 	bl	8002616 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	2100      	movs	r1, #0
 80013a2:	203a      	movs	r0, #58	; 0x3a
 80013a4:	f001 f91b 	bl	80025de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80013a8:	203a      	movs	r0, #58	; 0x3a
 80013aa:	f001 f934 	bl	8002616 <HAL_NVIC_EnableIRQ>

}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800

080013bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	4b2d      	ldr	r3, [pc, #180]	; (800148c <MX_GPIO_Init+0xd0>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a2c      	ldr	r2, [pc, #176]	; (800148c <MX_GPIO_Init+0xd0>)
 80013dc:	f043 0304 	orr.w	r3, r3, #4
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b2a      	ldr	r3, [pc, #168]	; (800148c <MX_GPIO_Init+0xd0>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b26      	ldr	r3, [pc, #152]	; (800148c <MX_GPIO_Init+0xd0>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a25      	ldr	r2, [pc, #148]	; (800148c <MX_GPIO_Init+0xd0>)
 80013f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b23      	ldr	r3, [pc, #140]	; (800148c <MX_GPIO_Init+0xd0>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	4b1f      	ldr	r3, [pc, #124]	; (800148c <MX_GPIO_Init+0xd0>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a1e      	ldr	r2, [pc, #120]	; (800148c <MX_GPIO_Init+0xd0>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b1c      	ldr	r3, [pc, #112]	; (800148c <MX_GPIO_Init+0xd0>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4b18      	ldr	r3, [pc, #96]	; (800148c <MX_GPIO_Init+0xd0>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a17      	ldr	r2, [pc, #92]	; (800148c <MX_GPIO_Init+0xd0>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <MX_GPIO_Init+0xd0>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	2120      	movs	r1, #32
 8001446:	4812      	ldr	r0, [pc, #72]	; (8001490 <MX_GPIO_Init+0xd4>)
 8001448:	f001 fe86 	bl	8003158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800144c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001452:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4619      	mov	r1, r3
 8001462:	480c      	ldr	r0, [pc, #48]	; (8001494 <MX_GPIO_Init+0xd8>)
 8001464:	f001 fcf4 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001468:	2320      	movs	r3, #32
 800146a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146c:	2301      	movs	r3, #1
 800146e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	4804      	ldr	r0, [pc, #16]	; (8001490 <MX_GPIO_Init+0xd4>)
 8001480:	f001 fce6 	bl	8002e50 <HAL_GPIO_Init>

}
 8001484:	bf00      	nop
 8001486:	3728      	adds	r7, #40	; 0x28
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40023800 	.word	0x40023800
 8001490:	40020000 	.word	0x40020000
 8001494:	40020800 	.word	0x40020800

08001498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800149c:	b672      	cpsid	i
}
 800149e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <Error_Handler+0x8>

080014a2 <gps_checksum>:


char *data[15];

int gps_checksum(char *nmea_data)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7fe fe98 	bl	80001e0 <strlen>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	d801      	bhi.n	80014ba <gps_checksum+0x18>
 80014b6:	2300      	movs	r3, #0
 80014b8:	e038      	b.n	800152c <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7fe fe90 	bl	80001e0 <strlen>
 80014c0:	4603      	mov	r3, r0
 80014c2:	3b04      	subs	r3, #4
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7fe fe87 	bl	80001e0 <strlen>
 80014d2:	4603      	mov	r3, r0
 80014d4:	3b03      	subs	r3, #3
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	e00a      	b.n	80014fe <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	4053      	eors	r3, r2
 80014f6:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	3301      	adds	r3, #1
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7fe fe6e 	bl	80001e0 <strlen>
 8001504:	4603      	mov	r3, r0
 8001506:	1f5a      	subs	r2, r3, #5
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	429a      	cmp	r2, r3
 800150c:	d8ec      	bhi.n	80014e8 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 800150e:	f107 0308 	add.w	r3, r7, #8
 8001512:	2210      	movs	r2, #16
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f004 fdde 	bl	80060d8 <strtol>
 800151c:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	429a      	cmp	r2, r3
 8001524:	d101      	bne.n	800152a <gps_checksum+0x88>
        return 1;
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <gps_checksum+0x8a>
    }
    else{
        return 0;
 800152a:	2300      	movs	r3, #0
    }
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8001534:	b590      	push	{r4, r7, lr}
 8001536:	b0b7      	sub	sp, #220	; 0xdc
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 8001544:	f107 0320 	add.w	r3, r7, #32
 8001548:	2264      	movs	r2, #100	; 0x64
 800154a:	2100      	movs	r1, #0
 800154c:	4618      	mov	r0, r3
 800154e:	f003 fd31 	bl	8004fb4 <memset>
    char *marker = strtok(inputString, ",");
 8001552:	49c2      	ldr	r1, [pc, #776]	; (800185c <nmea_GPGGA+0x328>)
 8001554:	6838      	ldr	r0, [r7, #0]
 8001556:	f004 fce1 	bl	8005f1c <strtok>
 800155a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 800155e:	e027      	b.n	80015b0 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001560:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001564:	f7fe fe3c 	bl	80001e0 <strlen>
 8001568:	4603      	mov	r3, r0
 800156a:	1c5a      	adds	r2, r3, #1
 800156c:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8001570:	1c63      	adds	r3, r4, #1
 8001572:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001576:	4610      	mov	r0, r2
 8001578:	f003 fcfe 	bl	8004f78 <malloc>
 800157c:	4603      	mov	r3, r0
 800157e:	461a      	mov	r2, r3
 8001580:	00a3      	lsls	r3, r4, #2
 8001582:	33d8      	adds	r3, #216	; 0xd8
 8001584:	443b      	add	r3, r7
 8001586:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 800158a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800158e:	3b01      	subs	r3, #1
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	33d8      	adds	r3, #216	; 0xd8
 8001594:	443b      	add	r3, r7
 8001596:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 800159a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800159e:	4618      	mov	r0, r3
 80015a0:	f003 fe20 	bl	80051e4 <strcpy>
        marker = strtok(NULL, ",");
 80015a4:	49ad      	ldr	r1, [pc, #692]	; (800185c <nmea_GPGGA+0x328>)
 80015a6:	2000      	movs	r0, #0
 80015a8:	f004 fcb8 	bl	8005f1c <strtok>
 80015ac:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 80015b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1d3      	bne.n	8001560 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 80015b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 80015c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	332c      	adds	r3, #44	; 0x2c
 80015cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f003 fe07 	bl	80051e4 <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 80015d6:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80015da:	2b53      	cmp	r3, #83	; 0x53
 80015dc:	d004      	beq.n	80015e8 <nmea_GPGGA+0xb4>
 80015de:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80015e2:	2b4e      	cmp	r3, #78	; 0x4e
 80015e4:	f040 8159 	bne.w	800189a <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 80015e8:	2300      	movs	r3, #0
 80015ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80015ee:	e010      	b.n	8001612 <nmea_GPGGA+0xde>
 80015f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80015f6:	4413      	add	r3, r2
 80015f8:	7819      	ldrb	r1, [r3, #0]
 80015fa:	f107 021c 	add.w	r2, r7, #28
 80015fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001602:	4413      	add	r3, r2
 8001604:	460a      	mov	r2, r1
 8001606:	701a      	strb	r2, [r3, #0]
 8001608:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800160c:	3301      	adds	r3, #1
 800160e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001612:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001616:	2b01      	cmp	r3, #1
 8001618:	ddea      	ble.n	80015f0 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001620:	e011      	b.n	8001646 <nmea_GPGGA+0x112>
 8001622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001624:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001628:	3302      	adds	r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	7819      	ldrb	r1, [r3, #0]
 800162e:	f107 0214 	add.w	r2, r7, #20
 8001632:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001636:	4413      	add	r3, r2
 8001638:	460a      	mov	r2, r1
 800163a:	701a      	strb	r2, [r3, #0]
 800163c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001640:	3301      	adds	r3, #1
 8001642:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001646:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800164a:	2b05      	cmp	r3, #5
 800164c:	dde9      	ble.n	8001622 <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 800164e:	f107 031c 	add.w	r3, r7, #28
 8001652:	220a      	movs	r2, #10
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f004 fd3e 	bl	80060d8 <strtol>
 800165c:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f004 fbfc 	bl	8005e64 <strtof>
 800166c:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8001670:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001674:	ee07 3a90 	vmov	s15, r3
 8001678:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800167c:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8001680:	ed9f 6a77 	vldr	s12, [pc, #476]	; 8001860 <nmea_GPGGA+0x32c>
 8001684:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168c:	ee17 0a90 	vmov	r0, s15
 8001690:	f7fe ff62 	bl	8000558 <__aeabi_f2d>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 800169c:	2300      	movs	r3, #0
 800169e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80016a2:	e010      	b.n	80016c6 <nmea_GPGGA+0x192>
 80016a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016aa:	4413      	add	r3, r2
 80016ac:	7819      	ldrb	r1, [r3, #0]
 80016ae:	f107 0210 	add.w	r2, r7, #16
 80016b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016b6:	4413      	add	r3, r2
 80016b8:	460a      	mov	r2, r1
 80016ba:	701a      	strb	r2, [r3, #0]
 80016bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016c0:	3301      	adds	r3, #1
 80016c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80016c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	ddea      	ble.n	80016a4 <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 80016ce:	2300      	movs	r3, #0
 80016d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80016d4:	e011      	b.n	80016fa <nmea_GPGGA+0x1c6>
 80016d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016dc:	3303      	adds	r3, #3
 80016de:	4413      	add	r3, r2
 80016e0:	7819      	ldrb	r1, [r3, #0]
 80016e2:	f107 0208 	add.w	r2, r7, #8
 80016e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016ea:	4413      	add	r3, r2
 80016ec:	460a      	mov	r2, r1
 80016ee:	701a      	strb	r2, [r3, #0]
 80016f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016f4:	3301      	adds	r3, #1
 80016f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80016fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016fe:	2b05      	cmp	r3, #5
 8001700:	dde9      	ble.n	80016d6 <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8001702:	f107 0310 	add.w	r3, r7, #16
 8001706:	220a      	movs	r2, #10
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f004 fce4 	bl	80060d8 <strtol>
 8001710:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8001714:	f107 0308 	add.w	r3, r7, #8
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f004 fba2 	bl	8005e64 <strtof>
 8001720:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8001724:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001728:	ee07 3a90 	vmov	s15, r3
 800172c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001730:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8001734:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 8001860 <nmea_GPGGA+0x32c>
 8001738:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800173c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001740:	ee17 0a90 	vmov	r0, s15
 8001744:	f7fe ff08 	bl	8000558 <__aeabi_f2d>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800175c:	f7ff f9bc 	bl	8000ad8 <__aeabi_dcmpeq>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d176      	bne.n	8001854 <nmea_GPGGA+0x320>
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001772:	f7ff f9b1 	bl	8000ad8 <__aeabi_dcmpeq>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d16b      	bne.n	8001854 <nmea_GPGGA+0x320>
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	4b38      	ldr	r3, [pc, #224]	; (8001864 <nmea_GPGGA+0x330>)
 8001782:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001786:	f7ff f9b1 	bl	8000aec <__aeabi_dcmplt>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d061      	beq.n	8001854 <nmea_GPGGA+0x320>
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	4b34      	ldr	r3, [pc, #208]	; (8001868 <nmea_GPGGA+0x334>)
 8001796:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800179a:	f7ff f9a7 	bl	8000aec <__aeabi_dcmplt>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d057      	beq.n	8001854 <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80017aa:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 80017b4:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80017bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 80017c6:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 80017c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017ca:	2100      	movs	r1, #0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f004 fb49 	bl	8005e64 <strtof>
 80017d2:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 80017d6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80017da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e2:	d102      	bne.n	80017ea <nmea_GPGGA+0x2b6>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	69db      	ldr	r3, [r3, #28]
 80017e8:	e001      	b.n	80017ee <nmea_GPGGA+0x2ba>
 80017ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 80017f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017f4:	220a      	movs	r2, #10
 80017f6:	2100      	movs	r1, #0
 80017f8:	4618      	mov	r0, r3
 80017fa:	f004 fc6d 	bl	80060d8 <strtol>
 80017fe:	4602      	mov	r2, r0
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8001804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001806:	220a      	movs	r2, #10
 8001808:	2100      	movs	r1, #0
 800180a:	4618      	mov	r0, r3
 800180c:	f004 fc64 	bl	80060d8 <strtol>
 8001810:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8001814:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001818:	2b00      	cmp	r3, #0
 800181a:	bfcc      	ite	gt
 800181c:	2301      	movgt	r3, #1
 800181e:	2300      	movle	r3, #0
 8001820:	b2db      	uxtb	r3, r3
 8001822:	461a      	mov	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 8001828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f004 fb19 	bl	8005e64 <strtof>
 8001832:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8001836:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800183a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800183e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001842:	d102      	bne.n	800184a <nmea_GPGGA+0x316>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	e001      	b.n	800184e <nmea_GPGGA+0x31a>
 800184a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001852:	e022      	b.n	800189a <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8001854:	2300      	movs	r3, #0
 8001856:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800185a:	e016      	b.n	800188a <nmea_GPGGA+0x356>
 800185c:	080083cc 	.word	0x080083cc
 8001860:	42700000 	.word	0x42700000
 8001864:	40568000 	.word	0x40568000
 8001868:	40668000 	.word	0x40668000
 800186c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	33d8      	adds	r3, #216	; 0xd8
 8001874:	443b      	add	r3, r7
 8001876:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 800187a:	4618      	mov	r0, r3
 800187c:	f003 fb84 	bl	8004f88 <free>
 8001880:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001884:	3301      	adds	r3, #1
 8001886:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800188a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800188e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001892:	429a      	cmp	r2, r3
 8001894:	dbea      	blt.n	800186c <nmea_GPGGA+0x338>
            return 0;
 8001896:	2300      	movs	r3, #0
 8001898:	e019      	b.n	80018ce <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 800189a:	2300      	movs	r3, #0
 800189c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80018a0:	e00e      	b.n	80018c0 <nmea_GPGGA+0x38c>
 80018a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	33d8      	adds	r3, #216	; 0xd8
 80018aa:	443b      	add	r3, r7
 80018ac:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f003 fb69 	bl	8004f88 <free>
 80018b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80018ba:	3301      	adds	r3, #1
 80018bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80018c0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80018c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80018c8:	429a      	cmp	r2, r3
 80018ca:	dbea      	blt.n	80018a2 <nmea_GPGGA+0x36e>
    return 1;
 80018cc:	2301      	movs	r3, #1
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	37dc      	adds	r7, #220	; 0xdc
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd90      	pop	{r4, r7, pc}
 80018d6:	bf00      	nop

080018d8 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b0a3      	sub	sp, #140	; 0x8c
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	2264      	movs	r2, #100	; 0x64
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f003 fb5f 	bl	8004fb4 <memset>
    char *marker = strtok(inputString, ",");
 80018f6:	493b      	ldr	r1, [pc, #236]	; (80019e4 <nmea_GPGSA+0x10c>)
 80018f8:	6838      	ldr	r0, [r7, #0]
 80018fa:	f004 fb0f 	bl	8005f1c <strtok>
 80018fe:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001902:	e027      	b.n	8001954 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001904:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001908:	f7fe fc6a 	bl	80001e0 <strlen>
 800190c:	4603      	mov	r3, r0
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8001914:	1c63      	adds	r3, r4, #1
 8001916:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800191a:	4610      	mov	r0, r2
 800191c:	f003 fb2c 	bl	8004f78 <malloc>
 8001920:	4603      	mov	r3, r0
 8001922:	461a      	mov	r2, r3
 8001924:	00a3      	lsls	r3, r4, #2
 8001926:	3388      	adds	r3, #136	; 0x88
 8001928:	443b      	add	r3, r7
 800192a:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 800192e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001932:	3b01      	subs	r3, #1
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	3388      	adds	r3, #136	; 0x88
 8001938:	443b      	add	r3, r7
 800193a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800193e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001942:	4618      	mov	r0, r3
 8001944:	f003 fc4e 	bl	80051e4 <strcpy>
        marker = strtok(NULL, ",");
 8001948:	4926      	ldr	r1, [pc, #152]	; (80019e4 <nmea_GPGSA+0x10c>)
 800194a:	2000      	movs	r0, #0
 800194c:	f004 fae6 	bl	8005f1c <strtok>
 8001950:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001954:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1d3      	bne.n	8001904 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	220a      	movs	r2, #10
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f004 fbb8 	bl	80060d8 <strtol>
 8001968:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 800196a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800196c:	2b01      	cmp	r3, #1
 800196e:	bfcc      	ite	gt
 8001970:	2301      	movgt	r3, #1
 8001972:	2300      	movle	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	461a      	mov	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001980:	2303      	movs	r3, #3
 8001982:	67bb      	str	r3, [r7, #120]	; 0x78
 8001984:	e00e      	b.n	80019a4 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8001986:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	3388      	adds	r3, #136	; 0x88
 800198c:	443b      	add	r3, r7
 800198e:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d002      	beq.n	800199e <nmea_GPGSA+0xc6>
            satelliteCount++;
 8001998:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800199a:	3301      	adds	r3, #1
 800199c:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 800199e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019a0:	3301      	adds	r3, #1
 80019a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80019a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019a6:	2b0e      	cmp	r3, #14
 80019a8:	dded      	ble.n	8001986 <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80019ae:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 80019b0:	2300      	movs	r3, #0
 80019b2:	677b      	str	r3, [r7, #116]	; 0x74
 80019b4:	e00b      	b.n	80019ce <nmea_GPGSA+0xf6>
 80019b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	3388      	adds	r3, #136	; 0x88
 80019bc:	443b      	add	r3, r7
 80019be:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f003 fae0 	bl	8004f88 <free>
 80019c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019ca:	3301      	adds	r3, #1
 80019cc:	677b      	str	r3, [r7, #116]	; 0x74
 80019ce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80019d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019d4:	429a      	cmp	r2, r3
 80019d6:	dbee      	blt.n	80019b6 <nmea_GPGSA+0xde>
    return 1;
 80019d8:	2301      	movs	r3, #1
}
 80019da:	4618      	mov	r0, r3
 80019dc:	378c      	adds	r7, #140	; 0x8c
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd90      	pop	{r4, r7, pc}
 80019e2:	bf00      	nop
 80019e4:	080083cc 	.word	0x080083cc

080019e8 <nmea_GPGLL>:



int nmea_GPGLL(GPS *gps_data, char*inputString) {
 80019e8:	b590      	push	{r4, r7, lr}
 80019ea:	b0b7      	sub	sp, #220	; 0xdc
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]

    char *values[25];
    int counter = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 80019f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fc:	2264      	movs	r2, #100	; 0x64
 80019fe:	2100      	movs	r1, #0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f003 fad7 	bl	8004fb4 <memset>
    char *marker = strtok(inputString, ",");
 8001a06:	49ad      	ldr	r1, [pc, #692]	; (8001cbc <nmea_GPGLL+0x2d4>)
 8001a08:	6838      	ldr	r0, [r7, #0]
 8001a0a:	f004 fa87 	bl	8005f1c <strtok>
 8001a0e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001a12:	e027      	b.n	8001a64 <nmea_GPGLL+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001a14:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001a18:	f7fe fbe2 	bl	80001e0 <strlen>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8001a24:	1c63      	adds	r3, r4, #1
 8001a26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	f003 faa4 	bl	8004f78 <malloc>
 8001a30:	4603      	mov	r3, r0
 8001a32:	461a      	mov	r2, r3
 8001a34:	00a3      	lsls	r3, r4, #2
 8001a36:	33d8      	adds	r3, #216	; 0xd8
 8001a38:	443b      	add	r3, r7
 8001a3a:	f843 2cb4 	str.w	r2, [r3, #-180]
        strcpy(values[counter - 1], marker);
 8001a3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001a42:	3b01      	subs	r3, #1
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	33d8      	adds	r3, #216	; 0xd8
 8001a48:	443b      	add	r3, r7
 8001a4a:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8001a4e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001a52:	4618      	mov	r0, r3
 8001a54:	f003 fbc6 	bl	80051e4 <strcpy>
        marker = strtok(NULL, ",");
 8001a58:	4998      	ldr	r1, [pc, #608]	; (8001cbc <nmea_GPGLL+0x2d4>)
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f004 fa5e 	bl	8005f1c <strtok>
 8001a60:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001a64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1d3      	bne.n	8001a14 <nmea_GPGLL+0x2c>
    }
    char latSide = values[2][0];
 8001a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    if (latSide == 'S' || latSide == 'N') { //check if data is sorta intact
 8001a74:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001a78:	2b53      	cmp	r3, #83	; 0x53
 8001a7a:	d004      	beq.n	8001a86 <nmea_GPGLL+0x9e>
 8001a7c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001a80:	2b4e      	cmp	r3, #78	; 0x4e
 8001a82:	f040 8116 	bne.w	8001cb2 <nmea_GPGLL+0x2ca>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[1][z];
 8001a86:	2300      	movs	r3, #0
 8001a88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a8c:	e010      	b.n	8001ab0 <nmea_GPGLL+0xc8>
 8001a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a94:	4413      	add	r3, r2
 8001a96:	7819      	ldrb	r1, [r3, #0]
 8001a98:	f107 0220 	add.w	r2, r7, #32
 8001a9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001aa0:	4413      	add	r3, r2
 8001aa2:	460a      	mov	r2, r1
 8001aa4:	701a      	strb	r2, [r3, #0]
 8001aa6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001aaa:	3301      	adds	r3, #1
 8001aac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001ab0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	ddea      	ble.n	8001a8e <nmea_GPGLL+0xa6>
        for (int z = 0; z < 6; z++) lat_m[z] = values[1][z + 2];
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001abe:	e011      	b.n	8001ae4 <nmea_GPGLL+0xfc>
 8001ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ac2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	7819      	ldrb	r1, [r3, #0]
 8001acc:	f107 0218 	add.w	r2, r7, #24
 8001ad0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ad4:	4413      	add	r3, r2
 8001ad6:	460a      	mov	r2, r1
 8001ad8:	701a      	strb	r2, [r3, #0]
 8001ada:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ade:	3301      	adds	r3, #1
 8001ae0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ae4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ae8:	2b05      	cmp	r3, #5
 8001aea:	dde9      	ble.n	8001ac0 <nmea_GPGLL+0xd8>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8001aec:	f107 0320 	add.w	r3, r7, #32
 8001af0:	220a      	movs	r2, #10
 8001af2:	2100      	movs	r1, #0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f004 faef 	bl	80060d8 <strtol>
 8001afa:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8001afe:	f107 0318 	add.w	r3, r7, #24
 8001b02:	2100      	movs	r1, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f004 f9ad 	bl	8005e64 <strtof>
 8001b0a:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8001b0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b12:	ee07 3a90 	vmov	s15, r3
 8001b16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b1a:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8001b1e:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8001cc0 <nmea_GPGLL+0x2d8>
 8001b22:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b2a:	ee17 0a90 	vmov	r0, s15
 8001b2e:	f7fe fd13 	bl	8000558 <__aeabi_f2d>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];
        char lonSide = values[4][0];
 8001b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
        for (int z = 0; z < 3; z++) lon_d[z] = values[3][z];
 8001b42:	2300      	movs	r3, #0
 8001b44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001b48:	e010      	b.n	8001b6c <nmea_GPGLL+0x184>
 8001b4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b50:	4413      	add	r3, r2
 8001b52:	7819      	ldrb	r1, [r3, #0]
 8001b54:	f107 0214 	add.w	r2, r7, #20
 8001b58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b5c:	4413      	add	r3, r2
 8001b5e:	460a      	mov	r2, r1
 8001b60:	701a      	strb	r2, [r3, #0]
 8001b62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b66:	3301      	adds	r3, #1
 8001b68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001b6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	ddea      	ble.n	8001b4a <nmea_GPGLL+0x162>
        for (int z = 0; z < 6; z++) lon_m[z] = values[3][z + 3];
 8001b74:	2300      	movs	r3, #0
 8001b76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001b7a:	e011      	b.n	8001ba0 <nmea_GPGLL+0x1b8>
 8001b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b82:	3303      	adds	r3, #3
 8001b84:	4413      	add	r3, r2
 8001b86:	7819      	ldrb	r1, [r3, #0]
 8001b88:	f107 020c 	add.w	r2, r7, #12
 8001b8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b90:	4413      	add	r3, r2
 8001b92:	460a      	mov	r2, r1
 8001b94:	701a      	strb	r2, [r3, #0]
 8001b96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001ba0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ba4:	2b05      	cmp	r3, #5
 8001ba6:	dde9      	ble.n	8001b7c <nmea_GPGLL+0x194>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	220a      	movs	r2, #10
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f004 fa91 	bl	80060d8 <strtol>
 8001bb6:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        float lon_min_strtof = strtof(lon_m, NULL);
 8001bba:	f107 030c 	add.w	r3, r7, #12
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f004 f94f 	bl	8005e64 <strtof>
 8001bc6:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8001bca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bce:	ee07 3a90 	vmov	s15, r3
 8001bd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bd6:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8001bda:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8001cc0 <nmea_GPGLL+0x2d8>
 8001bde:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be6:	ee17 0a90 	vmov	r0, s15
 8001bea:	f7fe fcb5 	bl	8000558 <__aeabi_f2d>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        //confirm that we aren't on null island
        if(lon_deg_strtol == 0 || lon_min_strtof == 0 || lat_deg_strtol == 0 || lat_min_strtof == 0) {
 8001bf6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d011      	beq.n	8001c22 <nmea_GPGLL+0x23a>
 8001bfe:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001c02:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0a:	d00a      	beq.n	8001c22 <nmea_GPGLL+0x23a>
 8001c0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d006      	beq.n	8001c22 <nmea_GPGLL+0x23a>
 8001c14:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001c18:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c20:	d11a      	bne.n	8001c58 <nmea_GPGLL+0x270>
            for(int i = 0; i<counter; i++) free(values[i]);
 8001c22:	2300      	movs	r3, #0
 8001c24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001c28:	e00e      	b.n	8001c48 <nmea_GPGLL+0x260>
 8001c2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	33d8      	adds	r3, #216	; 0xd8
 8001c32:	443b      	add	r3, r7
 8001c34:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f003 f9a5 	bl	8004f88 <free>
 8001c3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c42:	3301      	adds	r3, #1
 8001c44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001c48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c50:	429a      	cmp	r2, r3
 8001c52:	dbea      	blt.n	8001c2a <nmea_GPGLL+0x242>
            return 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	e02d      	b.n	8001cb4 <nmea_GPGLL+0x2cc>
        }
        else{
            gps_data->latitude = lat_deg;
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001c5e:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->longitude = lon_deg;
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001c68:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->latSide = latSide;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8001c72:	721a      	strb	r2, [r3, #8]
            gps_data->lonSide = lonSide;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8001c7a:	761a      	strb	r2, [r3, #24]
            for(int i = 0; i<counter; i++) free(values[i]);
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c82:	e00e      	b.n	8001ca2 <nmea_GPGLL+0x2ba>
 8001c84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	33d8      	adds	r3, #216	; 0xd8
 8001c8c:	443b      	add	r3, r7
 8001c8e:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 f978 	bl	8004f88 <free>
 8001c98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ca2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001ca6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001caa:	429a      	cmp	r2, r3
 8001cac:	dbea      	blt.n	8001c84 <nmea_GPGLL+0x29c>
            return 1;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <nmea_GPGLL+0x2cc>
        }
    }
    else return 0;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	37dc      	adds	r7, #220	; 0xdc
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd90      	pop	{r4, r7, pc}
 8001cbc:	080083cc 	.word	0x080083cc
 8001cc0:	42700000 	.word	0x42700000

08001cc4 <nmea_parse>:

void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b087      	sub	sp, #28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8001cce:	223c      	movs	r2, #60	; 0x3c
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	484e      	ldr	r0, [pc, #312]	; (8001e0c <nmea_parse+0x148>)
 8001cd4:	f003 f96e 	bl	8004fb4 <memset>
    char * token = strtok(buffer, "$");
 8001cd8:	494d      	ldr	r1, [pc, #308]	; (8001e10 <nmea_parse+0x14c>)
 8001cda:	6838      	ldr	r0, [r7, #0]
 8001cdc:	f004 f91e 	bl	8005f1c <strtok>
 8001ce0:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8001ce6:	e01d      	b.n	8001d24 <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8001ce8:	6978      	ldr	r0, [r7, #20]
 8001cea:	f7fe fa79 	bl	80001e0 <strlen>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	1c5a      	adds	r2, r3, #1
 8001cf2:	693c      	ldr	r4, [r7, #16]
 8001cf4:	1c63      	adds	r3, r4, #1
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	f003 f93d 	bl	8004f78 <malloc>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b42      	ldr	r3, [pc, #264]	; (8001e0c <nmea_parse+0x148>)
 8001d04:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	4a3f      	ldr	r2, [pc, #252]	; (8001e0c <nmea_parse+0x148>)
 8001d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d12:	6979      	ldr	r1, [r7, #20]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f003 fa65 	bl	80051e4 <strcpy>
        token = strtok(NULL, "$");
 8001d1a:	493d      	ldr	r1, [pc, #244]	; (8001e10 <nmea_parse+0x14c>)
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f004 f8fd 	bl	8005f1c <strtok>
 8001d22:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1de      	bne.n	8001ce8 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	e052      	b.n	8001dd6 <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8001d30:	4a36      	ldr	r2, [pc, #216]	; (8001e0c <nmea_parse+0x148>)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d38:	4936      	ldr	r1, [pc, #216]	; (8001e14 <nmea_parse+0x150>)
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f003 fa5a 	bl	80051f4 <strstr>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d044      	beq.n	8001dd0 <nmea_parse+0x10c>
 8001d46:	4a31      	ldr	r2, [pc, #196]	; (8001e0c <nmea_parse+0x148>)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fba7 	bl	80014a2 <gps_checksum>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d03a      	beq.n	8001dd0 <nmea_parse+0x10c>
           if(strstr(data[i], "GPGLL")!=NULL){
 8001d5a:	4a2c      	ldr	r2, [pc, #176]	; (8001e0c <nmea_parse+0x148>)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d62:	492d      	ldr	r1, [pc, #180]	; (8001e18 <nmea_parse+0x154>)
 8001d64:	4618      	mov	r0, r3
 8001d66:	f003 fa45 	bl	80051f4 <strstr>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d008      	beq.n	8001d82 <nmea_parse+0xbe>
               nmea_GPGLL(gps_data, data[i]);
 8001d70:	4a26      	ldr	r2, [pc, #152]	; (8001e0c <nmea_parse+0x148>)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff fe34 	bl	80019e8 <nmea_GPGLL>
 8001d80:	e026      	b.n	8001dd0 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GPGSA")!=NULL){
 8001d82:	4a22      	ldr	r2, [pc, #136]	; (8001e0c <nmea_parse+0x148>)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8a:	4924      	ldr	r1, [pc, #144]	; (8001e1c <nmea_parse+0x158>)
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f003 fa31 	bl	80051f4 <strstr>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 8001d98:	4a1c      	ldr	r2, [pc, #112]	; (8001e0c <nmea_parse+0x148>)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da0:	4619      	mov	r1, r3
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff fd98 	bl	80018d8 <nmea_GPGSA>
 8001da8:	e012      	b.n	8001dd0 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GPGGA")!=NULL){
 8001daa:	4a18      	ldr	r2, [pc, #96]	; (8001e0c <nmea_parse+0x148>)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db2:	491b      	ldr	r1, [pc, #108]	; (8001e20 <nmea_parse+0x15c>)
 8001db4:	4618      	mov	r0, r3
 8001db6:	f003 fa1d 	bl	80051f4 <strstr>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d007      	beq.n	8001dd0 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 8001dc0:	4a12      	ldr	r2, [pc, #72]	; (8001e0c <nmea_parse+0x148>)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff fbb2 	bl	8001534 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	dba8      	blt.n	8001d30 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	e009      	b.n	8001df8 <nmea_parse+0x134>
 8001de4:	4a09      	ldr	r2, [pc, #36]	; (8001e0c <nmea_parse+0x148>)
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f003 f8cb 	bl	8004f88 <free>
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	3301      	adds	r3, #1
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	dbf1      	blt.n	8001de4 <nmea_parse+0x120>


 8001e00:	bf00      	nop
 8001e02:	bf00      	nop
 8001e04:	371c      	adds	r7, #28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd90      	pop	{r4, r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200005c0 	.word	0x200005c0
 8001e10:	080083d0 	.word	0x080083d0
 8001e14:	080083d4 	.word	0x080083d4
 8001e18:	080083d8 	.word	0x080083d8
 8001e1c:	080083e0 	.word	0x080083e0
 8001e20:	080083e8 	.word	0x080083e8

08001e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <HAL_MspInit+0x4c>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	4a0f      	ldr	r2, [pc, #60]	; (8001e70 <HAL_MspInit+0x4c>)
 8001e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e38:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <HAL_MspInit+0x4c>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	603b      	str	r3, [r7, #0]
 8001e4a:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <HAL_MspInit+0x4c>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	4a08      	ldr	r2, [pc, #32]	; (8001e70 <HAL_MspInit+0x4c>)
 8001e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e54:	6413      	str	r3, [r2, #64]	; 0x40
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_MspInit+0x4c>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e62:	2007      	movs	r0, #7
 8001e64:	f000 fbb0 	bl	80025c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40023800 	.word	0x40023800

08001e74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08c      	sub	sp, #48	; 0x30
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 031c 	add.w	r3, r7, #28
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a68      	ldr	r2, [pc, #416]	; (8002034 <HAL_UART_MspInit+0x1c0>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d163      	bne.n	8001f5e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
 8001e9a:	4b67      	ldr	r3, [pc, #412]	; (8002038 <HAL_UART_MspInit+0x1c4>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	4a66      	ldr	r2, [pc, #408]	; (8002038 <HAL_UART_MspInit+0x1c4>)
 8001ea0:	f043 0310 	orr.w	r3, r3, #16
 8001ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea6:	4b64      	ldr	r3, [pc, #400]	; (8002038 <HAL_UART_MspInit+0x1c4>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	61bb      	str	r3, [r7, #24]
 8001eb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	4b60      	ldr	r3, [pc, #384]	; (8002038 <HAL_UART_MspInit+0x1c4>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a5f      	ldr	r2, [pc, #380]	; (8002038 <HAL_UART_MspInit+0x1c4>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b5d      	ldr	r3, [pc, #372]	; (8002038 <HAL_UART_MspInit+0x1c4>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ece:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001edc:	2303      	movs	r3, #3
 8001ede:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ee0:	2307      	movs	r3, #7
 8001ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee4:	f107 031c 	add.w	r3, r7, #28
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4854      	ldr	r0, [pc, #336]	; (800203c <HAL_UART_MspInit+0x1c8>)
 8001eec:	f000 ffb0 	bl	8002e50 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001ef0:	4b53      	ldr	r3, [pc, #332]	; (8002040 <HAL_UART_MspInit+0x1cc>)
 8001ef2:	4a54      	ldr	r2, [pc, #336]	; (8002044 <HAL_UART_MspInit+0x1d0>)
 8001ef4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001ef6:	4b52      	ldr	r3, [pc, #328]	; (8002040 <HAL_UART_MspInit+0x1cc>)
 8001ef8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001efc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001efe:	4b50      	ldr	r3, [pc, #320]	; (8002040 <HAL_UART_MspInit+0x1cc>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f04:	4b4e      	ldr	r3, [pc, #312]	; (8002040 <HAL_UART_MspInit+0x1cc>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f0a:	4b4d      	ldr	r3, [pc, #308]	; (8002040 <HAL_UART_MspInit+0x1cc>)
 8001f0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f10:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f12:	4b4b      	ldr	r3, [pc, #300]	; (8002040 <HAL_UART_MspInit+0x1cc>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f18:	4b49      	ldr	r3, [pc, #292]	; (8002040 <HAL_UART_MspInit+0x1cc>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001f1e:	4b48      	ldr	r3, [pc, #288]	; (8002040 <HAL_UART_MspInit+0x1cc>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f24:	4b46      	ldr	r3, [pc, #280]	; (8002040 <HAL_UART_MspInit+0x1cc>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f2a:	4b45      	ldr	r3, [pc, #276]	; (8002040 <HAL_UART_MspInit+0x1cc>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001f30:	4843      	ldr	r0, [pc, #268]	; (8002040 <HAL_UART_MspInit+0x1cc>)
 8001f32:	f000 fb8b 	bl	800264c <HAL_DMA_Init>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001f3c:	f7ff faac 	bl	8001498 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a3f      	ldr	r2, [pc, #252]	; (8002040 <HAL_UART_MspInit+0x1cc>)
 8001f44:	639a      	str	r2, [r3, #56]	; 0x38
 8001f46:	4a3e      	ldr	r2, [pc, #248]	; (8002040 <HAL_UART_MspInit+0x1cc>)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2100      	movs	r1, #0
 8001f50:	2025      	movs	r0, #37	; 0x25
 8001f52:	f000 fb44 	bl	80025de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f56:	2025      	movs	r0, #37	; 0x25
 8001f58:	f000 fb5d 	bl	8002616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f5c:	e066      	b.n	800202c <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART2)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a39      	ldr	r2, [pc, #228]	; (8002048 <HAL_UART_MspInit+0x1d4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d161      	bne.n	800202c <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f68:	2300      	movs	r3, #0
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	4b32      	ldr	r3, [pc, #200]	; (8002038 <HAL_UART_MspInit+0x1c4>)
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	4a31      	ldr	r2, [pc, #196]	; (8002038 <HAL_UART_MspInit+0x1c4>)
 8001f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f76:	6413      	str	r3, [r2, #64]	; 0x40
 8001f78:	4b2f      	ldr	r3, [pc, #188]	; (8002038 <HAL_UART_MspInit+0x1c4>)
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	4b2b      	ldr	r3, [pc, #172]	; (8002038 <HAL_UART_MspInit+0x1c4>)
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8c:	4a2a      	ldr	r2, [pc, #168]	; (8002038 <HAL_UART_MspInit+0x1c4>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6313      	str	r3, [r2, #48]	; 0x30
 8001f94:	4b28      	ldr	r3, [pc, #160]	; (8002038 <HAL_UART_MspInit+0x1c4>)
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fa0:	230c      	movs	r3, #12
 8001fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fac:	2303      	movs	r3, #3
 8001fae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fb0:	2307      	movs	r3, #7
 8001fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb4:	f107 031c 	add.w	r3, r7, #28
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4820      	ldr	r0, [pc, #128]	; (800203c <HAL_UART_MspInit+0x1c8>)
 8001fbc:	f000 ff48 	bl	8002e50 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001fc0:	4b22      	ldr	r3, [pc, #136]	; (800204c <HAL_UART_MspInit+0x1d8>)
 8001fc2:	4a23      	ldr	r2, [pc, #140]	; (8002050 <HAL_UART_MspInit+0x1dc>)
 8001fc4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001fc6:	4b21      	ldr	r3, [pc, #132]	; (800204c <HAL_UART_MspInit+0x1d8>)
 8001fc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fcc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fce:	4b1f      	ldr	r3, [pc, #124]	; (800204c <HAL_UART_MspInit+0x1d8>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fd4:	4b1d      	ldr	r3, [pc, #116]	; (800204c <HAL_UART_MspInit+0x1d8>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fda:	4b1c      	ldr	r3, [pc, #112]	; (800204c <HAL_UART_MspInit+0x1d8>)
 8001fdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fe0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fe2:	4b1a      	ldr	r3, [pc, #104]	; (800204c <HAL_UART_MspInit+0x1d8>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fe8:	4b18      	ldr	r3, [pc, #96]	; (800204c <HAL_UART_MspInit+0x1d8>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001fee:	4b17      	ldr	r3, [pc, #92]	; (800204c <HAL_UART_MspInit+0x1d8>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ff4:	4b15      	ldr	r3, [pc, #84]	; (800204c <HAL_UART_MspInit+0x1d8>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ffa:	4b14      	ldr	r3, [pc, #80]	; (800204c <HAL_UART_MspInit+0x1d8>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002000:	4812      	ldr	r0, [pc, #72]	; (800204c <HAL_UART_MspInit+0x1d8>)
 8002002:	f000 fb23 	bl	800264c <HAL_DMA_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 800200c:	f7ff fa44 	bl	8001498 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a0e      	ldr	r2, [pc, #56]	; (800204c <HAL_UART_MspInit+0x1d8>)
 8002014:	639a      	str	r2, [r3, #56]	; 0x38
 8002016:	4a0d      	ldr	r2, [pc, #52]	; (800204c <HAL_UART_MspInit+0x1d8>)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800201c:	2200      	movs	r2, #0
 800201e:	2100      	movs	r1, #0
 8002020:	2026      	movs	r0, #38	; 0x26
 8002022:	f000 fadc 	bl	80025de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002026:	2026      	movs	r0, #38	; 0x26
 8002028:	f000 faf5 	bl	8002616 <HAL_NVIC_EnableIRQ>
}
 800202c:	bf00      	nop
 800202e:	3730      	adds	r7, #48	; 0x30
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40011000 	.word	0x40011000
 8002038:	40023800 	.word	0x40023800
 800203c:	40020000 	.word	0x40020000
 8002040:	20000284 	.word	0x20000284
 8002044:	40026440 	.word	0x40026440
 8002048:	40004400 	.word	0x40004400
 800204c:	200002e4 	.word	0x200002e4
 8002050:	40026088 	.word	0x40026088

08002054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <NMI_Handler+0x4>

0800205a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800205e:	e7fe      	b.n	800205e <HardFault_Handler+0x4>

08002060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002064:	e7fe      	b.n	8002064 <MemManage_Handler+0x4>

08002066 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800206a:	e7fe      	b.n	800206a <BusFault_Handler+0x4>

0800206c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002070:	e7fe      	b.n	8002070 <UsageFault_Handler+0x4>

08002072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020a0:	f000 f97e 	bl	80023a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020a4:	bf00      	nop
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80020ac:	4802      	ldr	r0, [pc, #8]	; (80020b8 <DMA1_Stream5_IRQHandler+0x10>)
 80020ae:	f000 fc65 	bl	800297c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	200002e4 	.word	0x200002e4

080020bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020c0:	4802      	ldr	r0, [pc, #8]	; (80020cc <USART1_IRQHandler+0x10>)
 80020c2:	f001 fe3f 	bl	8003d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	200001fc 	.word	0x200001fc

080020d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020d4:	4802      	ldr	r0, [pc, #8]	; (80020e0 <USART2_IRQHandler+0x10>)
 80020d6:	f001 fe35 	bl	8003d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000240 	.word	0x20000240

080020e4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <DMA2_Stream2_IRQHandler+0x10>)
 80020ea:	f000 fc47 	bl	800297c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000284 	.word	0x20000284

080020f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return 1;
 80020fc:	2301      	movs	r3, #1
}
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <_kill>:

int _kill(int pid, int sig)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002112:	f002 ff07 	bl	8004f24 <__errno>
 8002116:	4603      	mov	r3, r0
 8002118:	2216      	movs	r2, #22
 800211a:	601a      	str	r2, [r3, #0]
  return -1;
 800211c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <_exit>:

void _exit (int status)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002130:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff ffe7 	bl	8002108 <_kill>
  while (1) {}    /* Make sure we hang here */
 800213a:	e7fe      	b.n	800213a <_exit+0x12>

0800213c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	e00a      	b.n	8002164 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800214e:	f3af 8000 	nop.w
 8002152:	4601      	mov	r1, r0
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	60ba      	str	r2, [r7, #8]
 800215a:	b2ca      	uxtb	r2, r1
 800215c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	3301      	adds	r3, #1
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	429a      	cmp	r2, r3
 800216a:	dbf0      	blt.n	800214e <_read+0x12>
  }

  return len;
 800216c:	687b      	ldr	r3, [r7, #4]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b086      	sub	sp, #24
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	e009      	b.n	800219c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	60ba      	str	r2, [r7, #8]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	3301      	adds	r3, #1
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	dbf1      	blt.n	8002188 <_write+0x12>
  }
  return len;
 80021a4:	687b      	ldr	r3, [r7, #4]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <_close>:

int _close(int file)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021d6:	605a      	str	r2, [r3, #4]
  return 0;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <_isatty>:

int _isatty(int file)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021ee:	2301      	movs	r3, #1
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002220:	4a14      	ldr	r2, [pc, #80]	; (8002274 <_sbrk+0x5c>)
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <_sbrk+0x60>)
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800222c:	4b13      	ldr	r3, [pc, #76]	; (800227c <_sbrk+0x64>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d102      	bne.n	800223a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <_sbrk+0x64>)
 8002236:	4a12      	ldr	r2, [pc, #72]	; (8002280 <_sbrk+0x68>)
 8002238:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <_sbrk+0x64>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	429a      	cmp	r2, r3
 8002246:	d207      	bcs.n	8002258 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002248:	f002 fe6c 	bl	8004f24 <__errno>
 800224c:	4603      	mov	r3, r0
 800224e:	220c      	movs	r2, #12
 8002250:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002256:	e009      	b.n	800226c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002258:	4b08      	ldr	r3, [pc, #32]	; (800227c <_sbrk+0x64>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800225e:	4b07      	ldr	r3, [pc, #28]	; (800227c <_sbrk+0x64>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	4a05      	ldr	r2, [pc, #20]	; (800227c <_sbrk+0x64>)
 8002268:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800226a:	68fb      	ldr	r3, [r7, #12]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20020000 	.word	0x20020000
 8002278:	00000400 	.word	0x00000400
 800227c:	200005fc 	.word	0x200005fc
 8002280:	20000618 	.word	0x20000618

08002284 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <SystemInit+0x20>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	4a05      	ldr	r2, [pc, #20]	; (80022a4 <SystemInit+0x20>)
 8002290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002294:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022ac:	480d      	ldr	r0, [pc, #52]	; (80022e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022ae:	490e      	ldr	r1, [pc, #56]	; (80022e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022b0:	4a0e      	ldr	r2, [pc, #56]	; (80022ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022b4:	e002      	b.n	80022bc <LoopCopyDataInit>

080022b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ba:	3304      	adds	r3, #4

080022bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022c0:	d3f9      	bcc.n	80022b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022c2:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022c4:	4c0b      	ldr	r4, [pc, #44]	; (80022f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c8:	e001      	b.n	80022ce <LoopFillZerobss>

080022ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022cc:	3204      	adds	r2, #4

080022ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022d0:	d3fb      	bcc.n	80022ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022d2:	f7ff ffd7 	bl	8002284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022d6:	f002 fe2b 	bl	8004f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022da:	f7fe fed1 	bl	8001080 <main>
  bx  lr    
 80022de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80022ec:	080088a8 	.word	0x080088a8
  ldr r2, =_sbss
 80022f0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80022f4:	20000614 	.word	0x20000614

080022f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022f8:	e7fe      	b.n	80022f8 <ADC_IRQHandler>
	...

080022fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002300:	4b0e      	ldr	r3, [pc, #56]	; (800233c <HAL_Init+0x40>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0d      	ldr	r2, [pc, #52]	; (800233c <HAL_Init+0x40>)
 8002306:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800230a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_Init+0x40>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a0a      	ldr	r2, [pc, #40]	; (800233c <HAL_Init+0x40>)
 8002312:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002316:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <HAL_Init+0x40>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a07      	ldr	r2, [pc, #28]	; (800233c <HAL_Init+0x40>)
 800231e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002322:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002324:	2003      	movs	r0, #3
 8002326:	f000 f94f 	bl	80025c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800232a:	2000      	movs	r0, #0
 800232c:	f000 f808 	bl	8002340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002330:	f7ff fd78 	bl	8001e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023c00 	.word	0x40023c00

08002340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_InitTick+0x54>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_InitTick+0x58>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	4619      	mov	r1, r3
 8002352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002356:	fbb3 f3f1 	udiv	r3, r3, r1
 800235a:	fbb2 f3f3 	udiv	r3, r2, r3
 800235e:	4618      	mov	r0, r3
 8002360:	f000 f967 	bl	8002632 <HAL_SYSTICK_Config>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e00e      	b.n	800238c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b0f      	cmp	r3, #15
 8002372:	d80a      	bhi.n	800238a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002374:	2200      	movs	r2, #0
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800237c:	f000 f92f 	bl	80025de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002380:	4a06      	ldr	r2, [pc, #24]	; (800239c <HAL_InitTick+0x5c>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	e000      	b.n	800238c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20000000 	.word	0x20000000
 8002398:	20000008 	.word	0x20000008
 800239c:	20000004 	.word	0x20000004

080023a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_IncTick+0x20>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_IncTick+0x24>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <HAL_IncTick+0x24>)
 80023b2:	6013      	str	r3, [r2, #0]
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20000008 	.word	0x20000008
 80023c4:	20000600 	.word	0x20000600

080023c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return uwTick;
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <HAL_GetTick+0x14>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20000600 	.word	0x20000600

080023e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023e8:	f7ff ffee 	bl	80023c8 <HAL_GetTick>
 80023ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023f8:	d005      	beq.n	8002406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023fa:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <HAL_Delay+0x44>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4413      	add	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002406:	bf00      	nop
 8002408:	f7ff ffde 	bl	80023c8 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	429a      	cmp	r2, r3
 8002416:	d8f7      	bhi.n	8002408 <HAL_Delay+0x28>
  {
  }
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000008 	.word	0x20000008

08002428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <__NVIC_SetPriorityGrouping+0x44>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002444:	4013      	ands	r3, r2
 8002446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002450:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245a:	4a04      	ldr	r2, [pc, #16]	; (800246c <__NVIC_SetPriorityGrouping+0x44>)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	60d3      	str	r3, [r2, #12]
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002474:	4b04      	ldr	r3, [pc, #16]	; (8002488 <__NVIC_GetPriorityGrouping+0x18>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	0a1b      	lsrs	r3, r3, #8
 800247a:	f003 0307 	and.w	r3, r3, #7
}
 800247e:	4618      	mov	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	2b00      	cmp	r3, #0
 800249c:	db0b      	blt.n	80024b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	f003 021f 	and.w	r2, r3, #31
 80024a4:	4907      	ldr	r1, [pc, #28]	; (80024c4 <__NVIC_EnableIRQ+0x38>)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	2001      	movs	r0, #1
 80024ae:	fa00 f202 	lsl.w	r2, r0, r2
 80024b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	e000e100 	.word	0xe000e100

080024c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	6039      	str	r1, [r7, #0]
 80024d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	db0a      	blt.n	80024f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	490c      	ldr	r1, [pc, #48]	; (8002514 <__NVIC_SetPriority+0x4c>)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	0112      	lsls	r2, r2, #4
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	440b      	add	r3, r1
 80024ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f0:	e00a      	b.n	8002508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4908      	ldr	r1, [pc, #32]	; (8002518 <__NVIC_SetPriority+0x50>)
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	3b04      	subs	r3, #4
 8002500:	0112      	lsls	r2, r2, #4
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	440b      	add	r3, r1
 8002506:	761a      	strb	r2, [r3, #24]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000e100 	.word	0xe000e100
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	; 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f1c3 0307 	rsb	r3, r3, #7
 8002536:	2b04      	cmp	r3, #4
 8002538:	bf28      	it	cs
 800253a:	2304      	movcs	r3, #4
 800253c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3304      	adds	r3, #4
 8002542:	2b06      	cmp	r3, #6
 8002544:	d902      	bls.n	800254c <NVIC_EncodePriority+0x30>
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3b03      	subs	r3, #3
 800254a:	e000      	b.n	800254e <NVIC_EncodePriority+0x32>
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43da      	mvns	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	401a      	ands	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002564:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	43d9      	mvns	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002574:	4313      	orrs	r3, r2
         );
}
 8002576:	4618      	mov	r0, r3
 8002578:	3724      	adds	r7, #36	; 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3b01      	subs	r3, #1
 8002590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002594:	d301      	bcc.n	800259a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002596:	2301      	movs	r3, #1
 8002598:	e00f      	b.n	80025ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800259a:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <SysTick_Config+0x40>)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3b01      	subs	r3, #1
 80025a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025a2:	210f      	movs	r1, #15
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025a8:	f7ff ff8e 	bl	80024c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <SysTick_Config+0x40>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025b2:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <SysTick_Config+0x40>)
 80025b4:	2207      	movs	r2, #7
 80025b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	e000e010 	.word	0xe000e010

080025c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff ff29 	bl	8002428 <__NVIC_SetPriorityGrouping>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025de:	b580      	push	{r7, lr}
 80025e0:	b086      	sub	sp, #24
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	4603      	mov	r3, r0
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	607a      	str	r2, [r7, #4]
 80025ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f0:	f7ff ff3e 	bl	8002470 <__NVIC_GetPriorityGrouping>
 80025f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	6978      	ldr	r0, [r7, #20]
 80025fc:	f7ff ff8e 	bl	800251c <NVIC_EncodePriority>
 8002600:	4602      	mov	r2, r0
 8002602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002606:	4611      	mov	r1, r2
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff5d 	bl	80024c8 <__NVIC_SetPriority>
}
 800260e:	bf00      	nop
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	4603      	mov	r3, r0
 800261e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff31 	bl	800248c <__NVIC_EnableIRQ>
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff ffa2 	bl	8002584 <SysTick_Config>
 8002640:	4603      	mov	r3, r0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002658:	f7ff feb6 	bl	80023c8 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e099      	b.n	800279c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2202      	movs	r2, #2
 800266c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0201 	bic.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002688:	e00f      	b.n	80026aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800268a:	f7ff fe9d 	bl	80023c8 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b05      	cmp	r3, #5
 8002696:	d908      	bls.n	80026aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2220      	movs	r2, #32
 800269c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2203      	movs	r2, #3
 80026a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e078      	b.n	800279c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1e8      	bne.n	800268a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	4b38      	ldr	r3, [pc, #224]	; (80027a4 <HAL_DMA_Init+0x158>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	2b04      	cmp	r3, #4
 8002702:	d107      	bne.n	8002714 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270c:	4313      	orrs	r3, r2
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4313      	orrs	r3, r2
 8002712:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f023 0307 	bic.w	r3, r3, #7
 800272a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	4313      	orrs	r3, r2
 8002734:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	2b04      	cmp	r3, #4
 800273c:	d117      	bne.n	800276e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	4313      	orrs	r3, r2
 8002746:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00e      	beq.n	800276e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 fb01 	bl	8002d58 <DMA_CheckFifoParam>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d008      	beq.n	800276e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2240      	movs	r2, #64	; 0x40
 8002760:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800276a:	2301      	movs	r3, #1
 800276c:	e016      	b.n	800279c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fab8 	bl	8002cec <DMA_CalcBaseAndBitshift>
 800277c:	4603      	mov	r3, r0
 800277e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002784:	223f      	movs	r2, #63	; 0x3f
 8002786:	409a      	lsls	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	f010803f 	.word	0xf010803f

080027a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_DMA_Start_IT+0x26>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e040      	b.n	8002850 <HAL_DMA_Start_IT+0xa8>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d12f      	bne.n	8002842 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2202      	movs	r2, #2
 80027e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68b9      	ldr	r1, [r7, #8]
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 fa4a 	bl	8002c90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002800:	223f      	movs	r2, #63	; 0x3f
 8002802:	409a      	lsls	r2, r3
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0216 	orr.w	r2, r2, #22
 8002816:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	2b00      	cmp	r3, #0
 800281e:	d007      	beq.n	8002830 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0208 	orr.w	r2, r2, #8
 800282e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	e005      	b.n	800284e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800284a:	2302      	movs	r3, #2
 800284c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800284e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002864:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002866:	f7ff fdaf 	bl	80023c8 <HAL_GetTick>
 800286a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d008      	beq.n	800288a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e052      	b.n	8002930 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0216 	bic.w	r2, r2, #22
 8002898:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695a      	ldr	r2, [r3, #20]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d103      	bne.n	80028ba <HAL_DMA_Abort+0x62>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d007      	beq.n	80028ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0208 	bic.w	r2, r2, #8
 80028c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0201 	bic.w	r2, r2, #1
 80028d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028da:	e013      	b.n	8002904 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028dc:	f7ff fd74 	bl	80023c8 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b05      	cmp	r3, #5
 80028e8:	d90c      	bls.n	8002904 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2220      	movs	r2, #32
 80028ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2203      	movs	r2, #3
 80028f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e015      	b.n	8002930 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1e4      	bne.n	80028dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002916:	223f      	movs	r2, #63	; 0x3f
 8002918:	409a      	lsls	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d004      	beq.n	8002956 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e00c      	b.n	8002970 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2205      	movs	r2, #5
 800295a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0201 	bic.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002988:	4b8e      	ldr	r3, [pc, #568]	; (8002bc4 <HAL_DMA_IRQHandler+0x248>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a8e      	ldr	r2, [pc, #568]	; (8002bc8 <HAL_DMA_IRQHandler+0x24c>)
 800298e:	fba2 2303 	umull	r2, r3, r2, r3
 8002992:	0a9b      	lsrs	r3, r3, #10
 8002994:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a6:	2208      	movs	r2, #8
 80029a8:	409a      	lsls	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d01a      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0204 	bic.w	r2, r2, #4
 80029ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d4:	2208      	movs	r2, #8
 80029d6:	409a      	lsls	r2, r3
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e0:	f043 0201 	orr.w	r2, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ec:	2201      	movs	r2, #1
 80029ee:	409a      	lsls	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4013      	ands	r3, r2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d012      	beq.n	8002a1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00b      	beq.n	8002a1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a16:	f043 0202 	orr.w	r2, r3, #2
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a22:	2204      	movs	r2, #4
 8002a24:	409a      	lsls	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d012      	beq.n	8002a54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00b      	beq.n	8002a54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a40:	2204      	movs	r2, #4
 8002a42:	409a      	lsls	r2, r3
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4c:	f043 0204 	orr.w	r2, r3, #4
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a58:	2210      	movs	r2, #16
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d043      	beq.n	8002aec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d03c      	beq.n	8002aec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a76:	2210      	movs	r2, #16
 8002a78:	409a      	lsls	r2, r3
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d018      	beq.n	8002abe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d108      	bne.n	8002aac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d024      	beq.n	8002aec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	4798      	blx	r3
 8002aaa:	e01f      	b.n	8002aec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01b      	beq.n	8002aec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	4798      	blx	r3
 8002abc:	e016      	b.n	8002aec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d107      	bne.n	8002adc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0208 	bic.w	r2, r2, #8
 8002ada:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af0:	2220      	movs	r2, #32
 8002af2:	409a      	lsls	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 808f 	beq.w	8002c1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 8087 	beq.w	8002c1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b12:	2220      	movs	r2, #32
 8002b14:	409a      	lsls	r2, r3
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b05      	cmp	r3, #5
 8002b24:	d136      	bne.n	8002b94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0216 	bic.w	r2, r2, #22
 8002b34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695a      	ldr	r2, [r3, #20]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d103      	bne.n	8002b56 <HAL_DMA_IRQHandler+0x1da>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d007      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0208 	bic.w	r2, r2, #8
 8002b64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6a:	223f      	movs	r2, #63	; 0x3f
 8002b6c:	409a      	lsls	r2, r3
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d07e      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	4798      	blx	r3
        }
        return;
 8002b92:	e079      	b.n	8002c88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d01d      	beq.n	8002bde <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10d      	bne.n	8002bcc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d031      	beq.n	8002c1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	4798      	blx	r3
 8002bc0:	e02c      	b.n	8002c1c <HAL_DMA_IRQHandler+0x2a0>
 8002bc2:	bf00      	nop
 8002bc4:	20000000 	.word	0x20000000
 8002bc8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d023      	beq.n	8002c1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	4798      	blx	r3
 8002bdc:	e01e      	b.n	8002c1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10f      	bne.n	8002c0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0210 	bic.w	r2, r2, #16
 8002bfa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d032      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d022      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2205      	movs	r2, #5
 8002c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0201 	bic.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d307      	bcc.n	8002c64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f2      	bne.n	8002c48 <HAL_DMA_IRQHandler+0x2cc>
 8002c62:	e000      	b.n	8002c66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d005      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	4798      	blx	r3
 8002c86:	e000      	b.n	8002c8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c88:	bf00      	nop
    }
  }
}
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2b40      	cmp	r3, #64	; 0x40
 8002cbc:	d108      	bne.n	8002cd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002cce:	e007      	b.n	8002ce0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	60da      	str	r2, [r3, #12]
}
 8002ce0:	bf00      	nop
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	3b10      	subs	r3, #16
 8002cfc:	4a14      	ldr	r2, [pc, #80]	; (8002d50 <DMA_CalcBaseAndBitshift+0x64>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	091b      	lsrs	r3, r3, #4
 8002d04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d06:	4a13      	ldr	r2, [pc, #76]	; (8002d54 <DMA_CalcBaseAndBitshift+0x68>)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d909      	bls.n	8002d2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d22:	f023 0303 	bic.w	r3, r3, #3
 8002d26:	1d1a      	adds	r2, r3, #4
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	659a      	str	r2, [r3, #88]	; 0x58
 8002d2c:	e007      	b.n	8002d3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d36:	f023 0303 	bic.w	r3, r3, #3
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	aaaaaaab 	.word	0xaaaaaaab
 8002d54:	08008408 	.word	0x08008408

08002d58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d60:	2300      	movs	r3, #0
 8002d62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d11f      	bne.n	8002db2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d856      	bhi.n	8002e26 <DMA_CheckFifoParam+0xce>
 8002d78:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <DMA_CheckFifoParam+0x28>)
 8002d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7e:	bf00      	nop
 8002d80:	08002d91 	.word	0x08002d91
 8002d84:	08002da3 	.word	0x08002da3
 8002d88:	08002d91 	.word	0x08002d91
 8002d8c:	08002e27 	.word	0x08002e27
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d046      	beq.n	8002e2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002da0:	e043      	b.n	8002e2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002daa:	d140      	bne.n	8002e2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db0:	e03d      	b.n	8002e2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dba:	d121      	bne.n	8002e00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d837      	bhi.n	8002e32 <DMA_CheckFifoParam+0xda>
 8002dc2:	a201      	add	r2, pc, #4	; (adr r2, 8002dc8 <DMA_CheckFifoParam+0x70>)
 8002dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc8:	08002dd9 	.word	0x08002dd9
 8002dcc:	08002ddf 	.word	0x08002ddf
 8002dd0:	08002dd9 	.word	0x08002dd9
 8002dd4:	08002df1 	.word	0x08002df1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
      break;
 8002ddc:	e030      	b.n	8002e40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d025      	beq.n	8002e36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dee:	e022      	b.n	8002e36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002df8:	d11f      	bne.n	8002e3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dfe:	e01c      	b.n	8002e3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d903      	bls.n	8002e0e <DMA_CheckFifoParam+0xb6>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d003      	beq.n	8002e14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e0c:	e018      	b.n	8002e40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	73fb      	strb	r3, [r7, #15]
      break;
 8002e12:	e015      	b.n	8002e40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00e      	beq.n	8002e3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
      break;
 8002e24:	e00b      	b.n	8002e3e <DMA_CheckFifoParam+0xe6>
      break;
 8002e26:	bf00      	nop
 8002e28:	e00a      	b.n	8002e40 <DMA_CheckFifoParam+0xe8>
      break;
 8002e2a:	bf00      	nop
 8002e2c:	e008      	b.n	8002e40 <DMA_CheckFifoParam+0xe8>
      break;
 8002e2e:	bf00      	nop
 8002e30:	e006      	b.n	8002e40 <DMA_CheckFifoParam+0xe8>
      break;
 8002e32:	bf00      	nop
 8002e34:	e004      	b.n	8002e40 <DMA_CheckFifoParam+0xe8>
      break;
 8002e36:	bf00      	nop
 8002e38:	e002      	b.n	8002e40 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e3a:	bf00      	nop
 8002e3c:	e000      	b.n	8002e40 <DMA_CheckFifoParam+0xe8>
      break;
 8002e3e:	bf00      	nop
    }
  } 
  
  return status; 
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop

08002e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b089      	sub	sp, #36	; 0x24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e66:	2300      	movs	r3, #0
 8002e68:	61fb      	str	r3, [r7, #28]
 8002e6a:	e159      	b.n	8003120 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	f040 8148 	bne.w	800311a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d005      	beq.n	8002ea2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d130      	bne.n	8002f04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	2203      	movs	r2, #3
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ed8:	2201      	movs	r2, #1
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	091b      	lsrs	r3, r3, #4
 8002eee:	f003 0201 	and.w	r2, r3, #1
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 0303 	and.w	r3, r3, #3
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d017      	beq.n	8002f40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4013      	ands	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 0303 	and.w	r3, r3, #3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d123      	bne.n	8002f94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	08da      	lsrs	r2, r3, #3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3208      	adds	r2, #8
 8002f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	220f      	movs	r2, #15
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	08da      	lsrs	r2, r3, #3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3208      	adds	r2, #8
 8002f8e:	69b9      	ldr	r1, [r7, #24]
 8002f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 0203 	and.w	r2, r3, #3
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 80a2 	beq.w	800311a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	4b57      	ldr	r3, [pc, #348]	; (8003138 <HAL_GPIO_Init+0x2e8>)
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fde:	4a56      	ldr	r2, [pc, #344]	; (8003138 <HAL_GPIO_Init+0x2e8>)
 8002fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fe6:	4b54      	ldr	r3, [pc, #336]	; (8003138 <HAL_GPIO_Init+0x2e8>)
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ff2:	4a52      	ldr	r2, [pc, #328]	; (800313c <HAL_GPIO_Init+0x2ec>)
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	089b      	lsrs	r3, r3, #2
 8002ff8:	3302      	adds	r3, #2
 8002ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	220f      	movs	r2, #15
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4013      	ands	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a49      	ldr	r2, [pc, #292]	; (8003140 <HAL_GPIO_Init+0x2f0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d019      	beq.n	8003052 <HAL_GPIO_Init+0x202>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a48      	ldr	r2, [pc, #288]	; (8003144 <HAL_GPIO_Init+0x2f4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d013      	beq.n	800304e <HAL_GPIO_Init+0x1fe>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a47      	ldr	r2, [pc, #284]	; (8003148 <HAL_GPIO_Init+0x2f8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d00d      	beq.n	800304a <HAL_GPIO_Init+0x1fa>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a46      	ldr	r2, [pc, #280]	; (800314c <HAL_GPIO_Init+0x2fc>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d007      	beq.n	8003046 <HAL_GPIO_Init+0x1f6>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a45      	ldr	r2, [pc, #276]	; (8003150 <HAL_GPIO_Init+0x300>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d101      	bne.n	8003042 <HAL_GPIO_Init+0x1f2>
 800303e:	2304      	movs	r3, #4
 8003040:	e008      	b.n	8003054 <HAL_GPIO_Init+0x204>
 8003042:	2307      	movs	r3, #7
 8003044:	e006      	b.n	8003054 <HAL_GPIO_Init+0x204>
 8003046:	2303      	movs	r3, #3
 8003048:	e004      	b.n	8003054 <HAL_GPIO_Init+0x204>
 800304a:	2302      	movs	r3, #2
 800304c:	e002      	b.n	8003054 <HAL_GPIO_Init+0x204>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_GPIO_Init+0x204>
 8003052:	2300      	movs	r3, #0
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	f002 0203 	and.w	r2, r2, #3
 800305a:	0092      	lsls	r2, r2, #2
 800305c:	4093      	lsls	r3, r2
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003064:	4935      	ldr	r1, [pc, #212]	; (800313c <HAL_GPIO_Init+0x2ec>)
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	089b      	lsrs	r3, r3, #2
 800306a:	3302      	adds	r3, #2
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003072:	4b38      	ldr	r3, [pc, #224]	; (8003154 <HAL_GPIO_Init+0x304>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	43db      	mvns	r3, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4013      	ands	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003096:	4a2f      	ldr	r2, [pc, #188]	; (8003154 <HAL_GPIO_Init+0x304>)
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800309c:	4b2d      	ldr	r3, [pc, #180]	; (8003154 <HAL_GPIO_Init+0x304>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030c0:	4a24      	ldr	r2, [pc, #144]	; (8003154 <HAL_GPIO_Init+0x304>)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030c6:	4b23      	ldr	r3, [pc, #140]	; (8003154 <HAL_GPIO_Init+0x304>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030ea:	4a1a      	ldr	r2, [pc, #104]	; (8003154 <HAL_GPIO_Init+0x304>)
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030f0:	4b18      	ldr	r3, [pc, #96]	; (8003154 <HAL_GPIO_Init+0x304>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003114:	4a0f      	ldr	r2, [pc, #60]	; (8003154 <HAL_GPIO_Init+0x304>)
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3301      	adds	r3, #1
 800311e:	61fb      	str	r3, [r7, #28]
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	2b0f      	cmp	r3, #15
 8003124:	f67f aea2 	bls.w	8002e6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	3724      	adds	r7, #36	; 0x24
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800
 800313c:	40013800 	.word	0x40013800
 8003140:	40020000 	.word	0x40020000
 8003144:	40020400 	.word	0x40020400
 8003148:	40020800 	.word	0x40020800
 800314c:	40020c00 	.word	0x40020c00
 8003150:	40021000 	.word	0x40021000
 8003154:	40013c00 	.word	0x40013c00

08003158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	807b      	strh	r3, [r7, #2]
 8003164:	4613      	mov	r3, r2
 8003166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003168:	787b      	ldrb	r3, [r7, #1]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800316e:	887a      	ldrh	r2, [r7, #2]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003174:	e003      	b.n	800317e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003176:	887b      	ldrh	r3, [r7, #2]
 8003178:	041a      	lsls	r2, r3, #16
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	619a      	str	r2, [r3, #24]
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
	...

0800318c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e267      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d075      	beq.n	8003296 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031aa:	4b88      	ldr	r3, [pc, #544]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d00c      	beq.n	80031d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031b6:	4b85      	ldr	r3, [pc, #532]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d112      	bne.n	80031e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031c2:	4b82      	ldr	r3, [pc, #520]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ce:	d10b      	bne.n	80031e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d0:	4b7e      	ldr	r3, [pc, #504]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d05b      	beq.n	8003294 <HAL_RCC_OscConfig+0x108>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d157      	bne.n	8003294 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e242      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f0:	d106      	bne.n	8003200 <HAL_RCC_OscConfig+0x74>
 80031f2:	4b76      	ldr	r3, [pc, #472]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a75      	ldr	r2, [pc, #468]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80031f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	e01d      	b.n	800323c <HAL_RCC_OscConfig+0xb0>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003208:	d10c      	bne.n	8003224 <HAL_RCC_OscConfig+0x98>
 800320a:	4b70      	ldr	r3, [pc, #448]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a6f      	ldr	r2, [pc, #444]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	4b6d      	ldr	r3, [pc, #436]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a6c      	ldr	r2, [pc, #432]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 800321c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	e00b      	b.n	800323c <HAL_RCC_OscConfig+0xb0>
 8003224:	4b69      	ldr	r3, [pc, #420]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a68      	ldr	r2, [pc, #416]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 800322a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	4b66      	ldr	r3, [pc, #408]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a65      	ldr	r2, [pc, #404]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800323a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d013      	beq.n	800326c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003244:	f7ff f8c0 	bl	80023c8 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800324c:	f7ff f8bc 	bl	80023c8 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b64      	cmp	r3, #100	; 0x64
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e207      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325e:	4b5b      	ldr	r3, [pc, #364]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0f0      	beq.n	800324c <HAL_RCC_OscConfig+0xc0>
 800326a:	e014      	b.n	8003296 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7ff f8ac 	bl	80023c8 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003274:	f7ff f8a8 	bl	80023c8 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	; 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e1f3      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003286:	4b51      	ldr	r3, [pc, #324]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0xe8>
 8003292:	e000      	b.n	8003296 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d063      	beq.n	800336a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032a2:	4b4a      	ldr	r3, [pc, #296]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 030c 	and.w	r3, r3, #12
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00b      	beq.n	80032c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ae:	4b47      	ldr	r3, [pc, #284]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d11c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ba:	4b44      	ldr	r3, [pc, #272]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d116      	bne.n	80032f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c6:	4b41      	ldr	r3, [pc, #260]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <HAL_RCC_OscConfig+0x152>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d001      	beq.n	80032de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e1c7      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032de:	4b3b      	ldr	r3, [pc, #236]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4937      	ldr	r1, [pc, #220]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f2:	e03a      	b.n	800336a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d020      	beq.n	800333e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032fc:	4b34      	ldr	r3, [pc, #208]	; (80033d0 <HAL_RCC_OscConfig+0x244>)
 80032fe:	2201      	movs	r2, #1
 8003300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003302:	f7ff f861 	bl	80023c8 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800330a:	f7ff f85d 	bl	80023c8 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e1a8      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331c:	4b2b      	ldr	r3, [pc, #172]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0f0      	beq.n	800330a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003328:	4b28      	ldr	r3, [pc, #160]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	4925      	ldr	r1, [pc, #148]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003338:	4313      	orrs	r3, r2
 800333a:	600b      	str	r3, [r1, #0]
 800333c:	e015      	b.n	800336a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800333e:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <HAL_RCC_OscConfig+0x244>)
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7ff f840 	bl	80023c8 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800334c:	f7ff f83c 	bl	80023c8 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e187      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335e:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d036      	beq.n	80033e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d016      	beq.n	80033ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800337e:	4b15      	ldr	r3, [pc, #84]	; (80033d4 <HAL_RCC_OscConfig+0x248>)
 8003380:	2201      	movs	r2, #1
 8003382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003384:	f7ff f820 	bl	80023c8 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800338c:	f7ff f81c 	bl	80023c8 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e167      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80033a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0x200>
 80033aa:	e01b      	b.n	80033e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ac:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <HAL_RCC_OscConfig+0x248>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b2:	f7ff f809 	bl	80023c8 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b8:	e00e      	b.n	80033d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ba:	f7ff f805 	bl	80023c8 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d907      	bls.n	80033d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e150      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
 80033cc:	40023800 	.word	0x40023800
 80033d0:	42470000 	.word	0x42470000
 80033d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d8:	4b88      	ldr	r3, [pc, #544]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 80033da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1ea      	bne.n	80033ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 8097 	beq.w	8003520 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f2:	2300      	movs	r3, #0
 80033f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033f6:	4b81      	ldr	r3, [pc, #516]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10f      	bne.n	8003422 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003402:	2300      	movs	r3, #0
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	4b7d      	ldr	r3, [pc, #500]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	4a7c      	ldr	r2, [pc, #496]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800340c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003410:	6413      	str	r3, [r2, #64]	; 0x40
 8003412:	4b7a      	ldr	r3, [pc, #488]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341a:	60bb      	str	r3, [r7, #8]
 800341c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800341e:	2301      	movs	r3, #1
 8003420:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003422:	4b77      	ldr	r3, [pc, #476]	; (8003600 <HAL_RCC_OscConfig+0x474>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342a:	2b00      	cmp	r3, #0
 800342c:	d118      	bne.n	8003460 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800342e:	4b74      	ldr	r3, [pc, #464]	; (8003600 <HAL_RCC_OscConfig+0x474>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a73      	ldr	r2, [pc, #460]	; (8003600 <HAL_RCC_OscConfig+0x474>)
 8003434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800343a:	f7fe ffc5 	bl	80023c8 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003442:	f7fe ffc1 	bl	80023c8 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e10c      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003454:	4b6a      	ldr	r3, [pc, #424]	; (8003600 <HAL_RCC_OscConfig+0x474>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d106      	bne.n	8003476 <HAL_RCC_OscConfig+0x2ea>
 8003468:	4b64      	ldr	r3, [pc, #400]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800346a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346c:	4a63      	ldr	r2, [pc, #396]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	6713      	str	r3, [r2, #112]	; 0x70
 8003474:	e01c      	b.n	80034b0 <HAL_RCC_OscConfig+0x324>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b05      	cmp	r3, #5
 800347c:	d10c      	bne.n	8003498 <HAL_RCC_OscConfig+0x30c>
 800347e:	4b5f      	ldr	r3, [pc, #380]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003482:	4a5e      	ldr	r2, [pc, #376]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003484:	f043 0304 	orr.w	r3, r3, #4
 8003488:	6713      	str	r3, [r2, #112]	; 0x70
 800348a:	4b5c      	ldr	r3, [pc, #368]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348e:	4a5b      	ldr	r2, [pc, #364]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	6713      	str	r3, [r2, #112]	; 0x70
 8003496:	e00b      	b.n	80034b0 <HAL_RCC_OscConfig+0x324>
 8003498:	4b58      	ldr	r3, [pc, #352]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800349a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349c:	4a57      	ldr	r2, [pc, #348]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800349e:	f023 0301 	bic.w	r3, r3, #1
 80034a2:	6713      	str	r3, [r2, #112]	; 0x70
 80034a4:	4b55      	ldr	r3, [pc, #340]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a8:	4a54      	ldr	r2, [pc, #336]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 80034aa:	f023 0304 	bic.w	r3, r3, #4
 80034ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d015      	beq.n	80034e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b8:	f7fe ff86 	bl	80023c8 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034be:	e00a      	b.n	80034d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c0:	f7fe ff82 	bl	80023c8 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e0cb      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d6:	4b49      	ldr	r3, [pc, #292]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0ee      	beq.n	80034c0 <HAL_RCC_OscConfig+0x334>
 80034e2:	e014      	b.n	800350e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e4:	f7fe ff70 	bl	80023c8 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ea:	e00a      	b.n	8003502 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ec:	f7fe ff6c 	bl	80023c8 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e0b5      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003502:	4b3e      	ldr	r3, [pc, #248]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1ee      	bne.n	80034ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800350e:	7dfb      	ldrb	r3, [r7, #23]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d105      	bne.n	8003520 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003514:	4b39      	ldr	r3, [pc, #228]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	4a38      	ldr	r2, [pc, #224]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800351a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800351e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 80a1 	beq.w	800366c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800352a:	4b34      	ldr	r3, [pc, #208]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	2b08      	cmp	r3, #8
 8003534:	d05c      	beq.n	80035f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d141      	bne.n	80035c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353e:	4b31      	ldr	r3, [pc, #196]	; (8003604 <HAL_RCC_OscConfig+0x478>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003544:	f7fe ff40 	bl	80023c8 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354c:	f7fe ff3c 	bl	80023c8 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e087      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355e:	4b27      	ldr	r3, [pc, #156]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69da      	ldr	r2, [r3, #28]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	019b      	lsls	r3, r3, #6
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	085b      	lsrs	r3, r3, #1
 8003582:	3b01      	subs	r3, #1
 8003584:	041b      	lsls	r3, r3, #16
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	061b      	lsls	r3, r3, #24
 800358e:	491b      	ldr	r1, [pc, #108]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003590:	4313      	orrs	r3, r2
 8003592:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003594:	4b1b      	ldr	r3, [pc, #108]	; (8003604 <HAL_RCC_OscConfig+0x478>)
 8003596:	2201      	movs	r2, #1
 8003598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359a:	f7fe ff15 	bl	80023c8 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a2:	f7fe ff11 	bl	80023c8 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e05c      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b4:	4b11      	ldr	r3, [pc, #68]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f0      	beq.n	80035a2 <HAL_RCC_OscConfig+0x416>
 80035c0:	e054      	b.n	800366c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c2:	4b10      	ldr	r3, [pc, #64]	; (8003604 <HAL_RCC_OscConfig+0x478>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c8:	f7fe fefe 	bl	80023c8 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d0:	f7fe fefa 	bl	80023c8 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e045      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e2:	4b06      	ldr	r3, [pc, #24]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0x444>
 80035ee:	e03d      	b.n	800366c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d107      	bne.n	8003608 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e038      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
 80035fc:	40023800 	.word	0x40023800
 8003600:	40007000 	.word	0x40007000
 8003604:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003608:	4b1b      	ldr	r3, [pc, #108]	; (8003678 <HAL_RCC_OscConfig+0x4ec>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d028      	beq.n	8003668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003620:	429a      	cmp	r2, r3
 8003622:	d121      	bne.n	8003668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362e:	429a      	cmp	r2, r3
 8003630:	d11a      	bne.n	8003668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003638:	4013      	ands	r3, r2
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800363e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003640:	4293      	cmp	r3, r2
 8003642:	d111      	bne.n	8003668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364e:	085b      	lsrs	r3, r3, #1
 8003650:	3b01      	subs	r3, #1
 8003652:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003654:	429a      	cmp	r2, r3
 8003656:	d107      	bne.n	8003668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003662:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003664:	429a      	cmp	r2, r3
 8003666:	d001      	beq.n	800366c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e000      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800

0800367c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0cc      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003690:	4b68      	ldr	r3, [pc, #416]	; (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d90c      	bls.n	80036b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369e:	4b65      	ldr	r3, [pc, #404]	; (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a6:	4b63      	ldr	r3, [pc, #396]	; (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d001      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0b8      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d020      	beq.n	8003706 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036d0:	4b59      	ldr	r3, [pc, #356]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	4a58      	ldr	r2, [pc, #352]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d005      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036e8:	4b53      	ldr	r3, [pc, #332]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	4a52      	ldr	r2, [pc, #328]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f4:	4b50      	ldr	r3, [pc, #320]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	494d      	ldr	r1, [pc, #308]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	4313      	orrs	r3, r2
 8003704:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d044      	beq.n	800379c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d107      	bne.n	800372a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371a:	4b47      	ldr	r3, [pc, #284]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d119      	bne.n	800375a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e07f      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b02      	cmp	r3, #2
 8003730:	d003      	beq.n	800373a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003736:	2b03      	cmp	r3, #3
 8003738:	d107      	bne.n	800374a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373a:	4b3f      	ldr	r3, [pc, #252]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e06f      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374a:	4b3b      	ldr	r3, [pc, #236]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e067      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800375a:	4b37      	ldr	r3, [pc, #220]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f023 0203 	bic.w	r2, r3, #3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	4934      	ldr	r1, [pc, #208]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 8003768:	4313      	orrs	r3, r2
 800376a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800376c:	f7fe fe2c 	bl	80023c8 <HAL_GetTick>
 8003770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003772:	e00a      	b.n	800378a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003774:	f7fe fe28 	bl	80023c8 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003782:	4293      	cmp	r3, r2
 8003784:	d901      	bls.n	800378a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e04f      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378a:	4b2b      	ldr	r3, [pc, #172]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 020c 	and.w	r2, r3, #12
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	429a      	cmp	r2, r3
 800379a:	d1eb      	bne.n	8003774 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800379c:	4b25      	ldr	r3, [pc, #148]	; (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d20c      	bcs.n	80037c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037aa:	4b22      	ldr	r3, [pc, #136]	; (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b2:	4b20      	ldr	r3, [pc, #128]	; (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d001      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e032      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d0:	4b19      	ldr	r3, [pc, #100]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4916      	ldr	r1, [pc, #88]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d009      	beq.n	8003802 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ee:	4b12      	ldr	r3, [pc, #72]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	490e      	ldr	r1, [pc, #56]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003802:	f000 f821 	bl	8003848 <HAL_RCC_GetSysClockFreq>
 8003806:	4602      	mov	r2, r0
 8003808:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	490a      	ldr	r1, [pc, #40]	; (800383c <HAL_RCC_ClockConfig+0x1c0>)
 8003814:	5ccb      	ldrb	r3, [r1, r3]
 8003816:	fa22 f303 	lsr.w	r3, r2, r3
 800381a:	4a09      	ldr	r2, [pc, #36]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 800381c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800381e:	4b09      	ldr	r3, [pc, #36]	; (8003844 <HAL_RCC_ClockConfig+0x1c8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f7fe fd8c 	bl	8002340 <HAL_InitTick>

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40023c00 	.word	0x40023c00
 8003838:	40023800 	.word	0x40023800
 800383c:	080083f0 	.word	0x080083f0
 8003840:	20000000 	.word	0x20000000
 8003844:	20000004 	.word	0x20000004

08003848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800384c:	b094      	sub	sp, #80	; 0x50
 800384e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	647b      	str	r3, [r7, #68]	; 0x44
 8003854:	2300      	movs	r3, #0
 8003856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003858:	2300      	movs	r3, #0
 800385a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003860:	4b79      	ldr	r3, [pc, #484]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 030c 	and.w	r3, r3, #12
 8003868:	2b08      	cmp	r3, #8
 800386a:	d00d      	beq.n	8003888 <HAL_RCC_GetSysClockFreq+0x40>
 800386c:	2b08      	cmp	r3, #8
 800386e:	f200 80e1 	bhi.w	8003a34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <HAL_RCC_GetSysClockFreq+0x34>
 8003876:	2b04      	cmp	r3, #4
 8003878:	d003      	beq.n	8003882 <HAL_RCC_GetSysClockFreq+0x3a>
 800387a:	e0db      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800387c:	4b73      	ldr	r3, [pc, #460]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x204>)
 800387e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003880:	e0db      	b.n	8003a3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003882:	4b73      	ldr	r3, [pc, #460]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x208>)
 8003884:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003886:	e0d8      	b.n	8003a3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003888:	4b6f      	ldr	r3, [pc, #444]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x200>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003890:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003892:	4b6d      	ldr	r3, [pc, #436]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d063      	beq.n	8003966 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800389e:	4b6a      	ldr	r3, [pc, #424]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x200>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	099b      	lsrs	r3, r3, #6
 80038a4:	2200      	movs	r2, #0
 80038a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80038a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b0:	633b      	str	r3, [r7, #48]	; 0x30
 80038b2:	2300      	movs	r3, #0
 80038b4:	637b      	str	r3, [r7, #52]	; 0x34
 80038b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038ba:	4622      	mov	r2, r4
 80038bc:	462b      	mov	r3, r5
 80038be:	f04f 0000 	mov.w	r0, #0
 80038c2:	f04f 0100 	mov.w	r1, #0
 80038c6:	0159      	lsls	r1, r3, #5
 80038c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038cc:	0150      	lsls	r0, r2, #5
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	4621      	mov	r1, r4
 80038d4:	1a51      	subs	r1, r2, r1
 80038d6:	6139      	str	r1, [r7, #16]
 80038d8:	4629      	mov	r1, r5
 80038da:	eb63 0301 	sbc.w	r3, r3, r1
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	f04f 0300 	mov.w	r3, #0
 80038e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038ec:	4659      	mov	r1, fp
 80038ee:	018b      	lsls	r3, r1, #6
 80038f0:	4651      	mov	r1, sl
 80038f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038f6:	4651      	mov	r1, sl
 80038f8:	018a      	lsls	r2, r1, #6
 80038fa:	4651      	mov	r1, sl
 80038fc:	ebb2 0801 	subs.w	r8, r2, r1
 8003900:	4659      	mov	r1, fp
 8003902:	eb63 0901 	sbc.w	r9, r3, r1
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003912:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003916:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800391a:	4690      	mov	r8, r2
 800391c:	4699      	mov	r9, r3
 800391e:	4623      	mov	r3, r4
 8003920:	eb18 0303 	adds.w	r3, r8, r3
 8003924:	60bb      	str	r3, [r7, #8]
 8003926:	462b      	mov	r3, r5
 8003928:	eb49 0303 	adc.w	r3, r9, r3
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800393a:	4629      	mov	r1, r5
 800393c:	024b      	lsls	r3, r1, #9
 800393e:	4621      	mov	r1, r4
 8003940:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003944:	4621      	mov	r1, r4
 8003946:	024a      	lsls	r2, r1, #9
 8003948:	4610      	mov	r0, r2
 800394a:	4619      	mov	r1, r3
 800394c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800394e:	2200      	movs	r2, #0
 8003950:	62bb      	str	r3, [r7, #40]	; 0x28
 8003952:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003954:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003958:	f7fd f976 	bl	8000c48 <__aeabi_uldivmod>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4613      	mov	r3, r2
 8003962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003964:	e058      	b.n	8003a18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003966:	4b38      	ldr	r3, [pc, #224]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	099b      	lsrs	r3, r3, #6
 800396c:	2200      	movs	r2, #0
 800396e:	4618      	mov	r0, r3
 8003970:	4611      	mov	r1, r2
 8003972:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003976:	623b      	str	r3, [r7, #32]
 8003978:	2300      	movs	r3, #0
 800397a:	627b      	str	r3, [r7, #36]	; 0x24
 800397c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003980:	4642      	mov	r2, r8
 8003982:	464b      	mov	r3, r9
 8003984:	f04f 0000 	mov.w	r0, #0
 8003988:	f04f 0100 	mov.w	r1, #0
 800398c:	0159      	lsls	r1, r3, #5
 800398e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003992:	0150      	lsls	r0, r2, #5
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	4641      	mov	r1, r8
 800399a:	ebb2 0a01 	subs.w	sl, r2, r1
 800399e:	4649      	mov	r1, r9
 80039a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	f04f 0300 	mov.w	r3, #0
 80039ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039b8:	ebb2 040a 	subs.w	r4, r2, sl
 80039bc:	eb63 050b 	sbc.w	r5, r3, fp
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	00eb      	lsls	r3, r5, #3
 80039ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ce:	00e2      	lsls	r2, r4, #3
 80039d0:	4614      	mov	r4, r2
 80039d2:	461d      	mov	r5, r3
 80039d4:	4643      	mov	r3, r8
 80039d6:	18e3      	adds	r3, r4, r3
 80039d8:	603b      	str	r3, [r7, #0]
 80039da:	464b      	mov	r3, r9
 80039dc:	eb45 0303 	adc.w	r3, r5, r3
 80039e0:	607b      	str	r3, [r7, #4]
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039ee:	4629      	mov	r1, r5
 80039f0:	028b      	lsls	r3, r1, #10
 80039f2:	4621      	mov	r1, r4
 80039f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039f8:	4621      	mov	r1, r4
 80039fa:	028a      	lsls	r2, r1, #10
 80039fc:	4610      	mov	r0, r2
 80039fe:	4619      	mov	r1, r3
 8003a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a02:	2200      	movs	r2, #0
 8003a04:	61bb      	str	r3, [r7, #24]
 8003a06:	61fa      	str	r2, [r7, #28]
 8003a08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a0c:	f7fd f91c 	bl	8000c48 <__aeabi_uldivmod>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	4613      	mov	r3, r2
 8003a16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a18:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	0c1b      	lsrs	r3, r3, #16
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	3301      	adds	r3, #1
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a32:	e002      	b.n	8003a3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a34:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x204>)
 8003a36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3750      	adds	r7, #80	; 0x50
 8003a40:	46bd      	mov	sp, r7
 8003a42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a46:	bf00      	nop
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	00f42400 	.word	0x00f42400
 8003a50:	007a1200 	.word	0x007a1200

08003a54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a58:	4b03      	ldr	r3, [pc, #12]	; (8003a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	20000000 	.word	0x20000000

08003a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a70:	f7ff fff0 	bl	8003a54 <HAL_RCC_GetHCLKFreq>
 8003a74:	4602      	mov	r2, r0
 8003a76:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	0a9b      	lsrs	r3, r3, #10
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	4903      	ldr	r1, [pc, #12]	; (8003a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a82:	5ccb      	ldrb	r3, [r1, r3]
 8003a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	08008400 	.word	0x08008400

08003a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a98:	f7ff ffdc 	bl	8003a54 <HAL_RCC_GetHCLKFreq>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	0b5b      	lsrs	r3, r3, #13
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	4903      	ldr	r1, [pc, #12]	; (8003ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aaa:	5ccb      	ldrb	r3, [r1, r3]
 8003aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	08008400 	.word	0x08008400

08003abc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e03f      	b.n	8003b4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d106      	bne.n	8003ae8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7fe f9c6 	bl	8001e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2224      	movs	r2, #36	; 0x24
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003afe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 ff9b 	bl	8004a3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695a      	ldr	r2, [r3, #20]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b08a      	sub	sp, #40	; 0x28
 8003b5a:	af02      	add	r7, sp, #8
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	603b      	str	r3, [r7, #0]
 8003b62:	4613      	mov	r3, r2
 8003b64:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b20      	cmp	r3, #32
 8003b74:	d17c      	bne.n	8003c70 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <HAL_UART_Transmit+0x2c>
 8003b7c:	88fb      	ldrh	r3, [r7, #6]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e075      	b.n	8003c72 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_UART_Transmit+0x3e>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e06e      	b.n	8003c72 <HAL_UART_Transmit+0x11c>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2221      	movs	r2, #33	; 0x21
 8003ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003baa:	f7fe fc0d 	bl	80023c8 <HAL_GetTick>
 8003bae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	88fa      	ldrh	r2, [r7, #6]
 8003bb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	88fa      	ldrh	r2, [r7, #6]
 8003bba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc4:	d108      	bne.n	8003bd8 <HAL_UART_Transmit+0x82>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d104      	bne.n	8003bd8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	61bb      	str	r3, [r7, #24]
 8003bd6:	e003      	b.n	8003be0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003be8:	e02a      	b.n	8003c40 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	2180      	movs	r1, #128	; 0x80
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 fc53 	bl	80044a0 <UART_WaitOnFlagUntilTimeout>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e036      	b.n	8003c72 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10b      	bne.n	8003c22 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	3302      	adds	r3, #2
 8003c1e:	61bb      	str	r3, [r7, #24]
 8003c20:	e007      	b.n	8003c32 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	781a      	ldrb	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1cf      	bne.n	8003bea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2200      	movs	r2, #0
 8003c52:	2140      	movs	r1, #64	; 0x40
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 fc23 	bl	80044a0 <UART_WaitOnFlagUntilTimeout>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e006      	b.n	8003c72 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	e000      	b.n	8003c72 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c70:	2302      	movs	r3, #2
  }
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3720      	adds	r7, #32
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b08c      	sub	sp, #48	; 0x30
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	60f8      	str	r0, [r7, #12]
 8003c82:	60b9      	str	r1, [r7, #8]
 8003c84:	4613      	mov	r3, r2
 8003c86:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b20      	cmp	r3, #32
 8003c92:	d152      	bne.n	8003d3a <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003c9a:	88fb      	ldrh	r3, [r7, #6]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e04b      	b.n	8003d3c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e044      	b.n	8003d3c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003cc0:	88fb      	ldrh	r3, [r7, #6]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	68b9      	ldr	r1, [r7, #8]
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 fc58 	bl	800457c <UART_Start_Receive_DMA>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003cd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d12c      	bne.n	8003d34 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d125      	bne.n	8003d2e <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	613b      	str	r3, [r7, #16]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	613b      	str	r3, [r7, #16]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	613b      	str	r3, [r7, #16]
 8003cf6:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	330c      	adds	r3, #12
 8003cfe:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	617b      	str	r3, [r7, #20]
   return(result);
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f043 0310 	orr.w	r3, r3, #16
 8003d0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	330c      	adds	r3, #12
 8003d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d18:	627a      	str	r2, [r7, #36]	; 0x24
 8003d1a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	6a39      	ldr	r1, [r7, #32]
 8003d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e5      	bne.n	8003cf8 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8003d2c:	e002      	b.n	8003d34 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003d34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d38:	e000      	b.n	8003d3c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8003d3a:	2302      	movs	r3, #2
  }
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3730      	adds	r7, #48	; 0x30
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b0ba      	sub	sp, #232	; 0xe8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003d82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10f      	bne.n	8003daa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d009      	beq.n	8003daa <HAL_UART_IRQHandler+0x66>
 8003d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 fd8f 	bl	80048c6 <UART_Receive_IT>
      return;
 8003da8:	e256      	b.n	8004258 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003daa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 80de 	beq.w	8003f70 <HAL_UART_IRQHandler+0x22c>
 8003db4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d106      	bne.n	8003dce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dc4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 80d1 	beq.w	8003f70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00b      	beq.n	8003df2 <HAL_UART_IRQHandler+0xae>
 8003dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d005      	beq.n	8003df2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	f043 0201 	orr.w	r2, r3, #1
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00b      	beq.n	8003e16 <HAL_UART_IRQHandler+0xd2>
 8003dfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d005      	beq.n	8003e16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	f043 0202 	orr.w	r2, r3, #2
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00b      	beq.n	8003e3a <HAL_UART_IRQHandler+0xf6>
 8003e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f043 0204 	orr.w	r2, r3, #4
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d011      	beq.n	8003e6a <HAL_UART_IRQHandler+0x126>
 8003e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e4a:	f003 0320 	and.w	r3, r3, #32
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d105      	bne.n	8003e5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f043 0208 	orr.w	r2, r3, #8
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 81ed 	beq.w	800424e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_UART_IRQHandler+0x14e>
 8003e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e84:	f003 0320 	and.w	r3, r3, #32
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 fd1a 	bl	80048c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9c:	2b40      	cmp	r3, #64	; 0x40
 8003e9e:	bf0c      	ite	eq
 8003ea0:	2301      	moveq	r3, #1
 8003ea2:	2300      	movne	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f003 0308 	and.w	r3, r3, #8
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d103      	bne.n	8003ebe <HAL_UART_IRQHandler+0x17a>
 8003eb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d04f      	beq.n	8003f5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 fc22 	bl	8004708 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ece:	2b40      	cmp	r3, #64	; 0x40
 8003ed0:	d141      	bne.n	8003f56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3314      	adds	r3, #20
 8003ed8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003edc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ee0:	e853 3f00 	ldrex	r3, [r3]
 8003ee4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ee8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3314      	adds	r3, #20
 8003efa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003efe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1d9      	bne.n	8003ed2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d013      	beq.n	8003f4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2a:	4a7d      	ldr	r2, [pc, #500]	; (8004120 <HAL_UART_IRQHandler+0x3dc>)
 8003f2c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fe fd00 	bl	8002938 <HAL_DMA_Abort_IT>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d016      	beq.n	8003f6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f48:	4610      	mov	r0, r2
 8003f4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f4c:	e00e      	b.n	8003f6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f9a4 	bl	800429c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f54:	e00a      	b.n	8003f6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f9a0 	bl	800429c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f5c:	e006      	b.n	8003f6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f99c 	bl	800429c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f6a:	e170      	b.n	800424e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f6c:	bf00      	nop
    return;
 8003f6e:	e16e      	b.n	800424e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	f040 814a 	bne.w	800420e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f7e:	f003 0310 	and.w	r3, r3, #16
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 8143 	beq.w	800420e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f8c:	f003 0310 	and.w	r3, r3, #16
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 813c 	beq.w	800420e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f96:	2300      	movs	r3, #0
 8003f98:	60bb      	str	r3, [r7, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	60bb      	str	r3, [r7, #8]
 8003faa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb6:	2b40      	cmp	r3, #64	; 0x40
 8003fb8:	f040 80b4 	bne.w	8004124 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 8140 	beq.w	8004252 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	f080 8139 	bcs.w	8004252 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fe6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff2:	f000 8088 	beq.w	8004106 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	330c      	adds	r3, #12
 8003ffc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004004:	e853 3f00 	ldrex	r3, [r3]
 8004008:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800400c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004014:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	330c      	adds	r3, #12
 800401e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004022:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004026:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800402e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004032:	e841 2300 	strex	r3, r2, [r1]
 8004036:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800403a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1d9      	bne.n	8003ff6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	3314      	adds	r3, #20
 8004048:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800404c:	e853 3f00 	ldrex	r3, [r3]
 8004050:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004052:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004054:	f023 0301 	bic.w	r3, r3, #1
 8004058:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	3314      	adds	r3, #20
 8004062:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004066:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800406a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800406e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004072:	e841 2300 	strex	r3, r2, [r1]
 8004076:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004078:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1e1      	bne.n	8004042 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3314      	adds	r3, #20
 8004084:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004086:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004088:	e853 3f00 	ldrex	r3, [r3]
 800408c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800408e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004094:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3314      	adds	r3, #20
 800409e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040aa:	e841 2300 	strex	r3, r2, [r1]
 80040ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80040b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1e3      	bne.n	800407e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	330c      	adds	r3, #12
 80040ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ce:	e853 3f00 	ldrex	r3, [r3]
 80040d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040d6:	f023 0310 	bic.w	r3, r3, #16
 80040da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	330c      	adds	r3, #12
 80040e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80040e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80040ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040f0:	e841 2300 	strex	r3, r2, [r1]
 80040f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e3      	bne.n	80040c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004100:	4618      	mov	r0, r3
 8004102:	f7fe fba9 	bl	8002858 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800410e:	b29b      	uxth	r3, r3
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	b29b      	uxth	r3, r3
 8004114:	4619      	mov	r1, r3
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7fc ff4e 	bl	8000fb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800411c:	e099      	b.n	8004252 <HAL_UART_IRQHandler+0x50e>
 800411e:	bf00      	nop
 8004120:	080047cf 	.word	0x080047cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800412c:	b29b      	uxth	r3, r3
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004138:	b29b      	uxth	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 808b 	beq.w	8004256 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004140:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 8086 	beq.w	8004256 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	330c      	adds	r3, #12
 8004150:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004154:	e853 3f00 	ldrex	r3, [r3]
 8004158:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800415a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004160:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	330c      	adds	r3, #12
 800416a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800416e:	647a      	str	r2, [r7, #68]	; 0x44
 8004170:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004172:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004174:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004176:	e841 2300 	strex	r3, r2, [r1]
 800417a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800417c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1e3      	bne.n	800414a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3314      	adds	r3, #20
 8004188:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	623b      	str	r3, [r7, #32]
   return(result);
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	f023 0301 	bic.w	r3, r3, #1
 8004198:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3314      	adds	r3, #20
 80041a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041a6:	633a      	str	r2, [r7, #48]	; 0x30
 80041a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ae:	e841 2300 	strex	r3, r2, [r1]
 80041b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e3      	bne.n	8004182 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	330c      	adds	r3, #12
 80041ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	e853 3f00 	ldrex	r3, [r3]
 80041d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0310 	bic.w	r3, r3, #16
 80041de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	330c      	adds	r3, #12
 80041e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80041ec:	61fa      	str	r2, [r7, #28]
 80041ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f0:	69b9      	ldr	r1, [r7, #24]
 80041f2:	69fa      	ldr	r2, [r7, #28]
 80041f4:	e841 2300 	strex	r3, r2, [r1]
 80041f8:	617b      	str	r3, [r7, #20]
   return(result);
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e3      	bne.n	80041c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004200:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004204:	4619      	mov	r1, r3
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fc fed6 	bl	8000fb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800420c:	e023      	b.n	8004256 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800420e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004216:	2b00      	cmp	r3, #0
 8004218:	d009      	beq.n	800422e <HAL_UART_IRQHandler+0x4ea>
 800421a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800421e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fae5 	bl	80047f6 <UART_Transmit_IT>
    return;
 800422c:	e014      	b.n	8004258 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800422e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00e      	beq.n	8004258 <HAL_UART_IRQHandler+0x514>
 800423a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800423e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004242:	2b00      	cmp	r3, #0
 8004244:	d008      	beq.n	8004258 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fb25 	bl	8004896 <UART_EndTransmit_IT>
    return;
 800424c:	e004      	b.n	8004258 <HAL_UART_IRQHandler+0x514>
    return;
 800424e:	bf00      	nop
 8004250:	e002      	b.n	8004258 <HAL_UART_IRQHandler+0x514>
      return;
 8004252:	bf00      	nop
 8004254:	e000      	b.n	8004258 <HAL_UART_IRQHandler+0x514>
      return;
 8004256:	bf00      	nop
  }
}
 8004258:	37e8      	adds	r7, #232	; 0xe8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop

08004260 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b09c      	sub	sp, #112	; 0x70
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d172      	bne.n	80043b2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80042cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ce:	2200      	movs	r2, #0
 80042d0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	330c      	adds	r3, #12
 80042d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042dc:	e853 3f00 	ldrex	r3, [r3]
 80042e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80042e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80042ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	330c      	adds	r3, #12
 80042f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80042f2:	65ba      	str	r2, [r7, #88]	; 0x58
 80042f4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042fa:	e841 2300 	strex	r3, r2, [r1]
 80042fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1e5      	bne.n	80042d2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	3314      	adds	r3, #20
 800430c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004310:	e853 3f00 	ldrex	r3, [r3]
 8004314:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004318:	f023 0301 	bic.w	r3, r3, #1
 800431c:	667b      	str	r3, [r7, #100]	; 0x64
 800431e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3314      	adds	r3, #20
 8004324:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004326:	647a      	str	r2, [r7, #68]	; 0x44
 8004328:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800432c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800432e:	e841 2300 	strex	r3, r2, [r1]
 8004332:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1e5      	bne.n	8004306 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800433a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3314      	adds	r3, #20
 8004340:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	e853 3f00 	ldrex	r3, [r3]
 8004348:	623b      	str	r3, [r7, #32]
   return(result);
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004350:	663b      	str	r3, [r7, #96]	; 0x60
 8004352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3314      	adds	r3, #20
 8004358:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800435a:	633a      	str	r2, [r7, #48]	; 0x30
 800435c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004362:	e841 2300 	strex	r3, r2, [r1]
 8004366:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1e5      	bne.n	800433a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800436e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004370:	2220      	movs	r2, #32
 8004372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437a:	2b01      	cmp	r3, #1
 800437c:	d119      	bne.n	80043b2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800437e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	330c      	adds	r3, #12
 8004384:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	e853 3f00 	ldrex	r3, [r3]
 800438c:	60fb      	str	r3, [r7, #12]
   return(result);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f023 0310 	bic.w	r3, r3, #16
 8004394:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	330c      	adds	r3, #12
 800439c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800439e:	61fa      	str	r2, [r7, #28]
 80043a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a2:	69b9      	ldr	r1, [r7, #24]
 80043a4:	69fa      	ldr	r2, [r7, #28]
 80043a6:	e841 2300 	strex	r3, r2, [r1]
 80043aa:	617b      	str	r3, [r7, #20]
   return(result);
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1e5      	bne.n	800437e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d106      	bne.n	80043c8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043be:	4619      	mov	r1, r3
 80043c0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80043c2:	f7fc fdf9 	bl	8000fb8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80043c6:	e002      	b.n	80043ce <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80043c8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80043ca:	f7ff ff53 	bl	8004274 <HAL_UART_RxCpltCallback>
}
 80043ce:	bf00      	nop
 80043d0:	3770      	adds	r7, #112	; 0x70
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b084      	sub	sp, #16
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d108      	bne.n	80043fe <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043f0:	085b      	lsrs	r3, r3, #1
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	4619      	mov	r1, r3
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f7fc fdde 	bl	8000fb8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80043fc:	e002      	b.n	8004404 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f7ff ff42 	bl	8004288 <HAL_UART_RxHalfCpltCallback>
}
 8004404:	bf00      	nop
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004414:	2300      	movs	r3, #0
 8004416:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004428:	2b80      	cmp	r3, #128	; 0x80
 800442a:	bf0c      	ite	eq
 800442c:	2301      	moveq	r3, #1
 800442e:	2300      	movne	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b21      	cmp	r3, #33	; 0x21
 800443e:	d108      	bne.n	8004452 <UART_DMAError+0x46>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d005      	beq.n	8004452 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2200      	movs	r2, #0
 800444a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800444c:	68b8      	ldr	r0, [r7, #8]
 800444e:	f000 f933 	bl	80046b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445c:	2b40      	cmp	r3, #64	; 0x40
 800445e:	bf0c      	ite	eq
 8004460:	2301      	moveq	r3, #1
 8004462:	2300      	movne	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b22      	cmp	r3, #34	; 0x22
 8004472:	d108      	bne.n	8004486 <UART_DMAError+0x7a>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d005      	beq.n	8004486 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2200      	movs	r2, #0
 800447e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004480:	68b8      	ldr	r0, [r7, #8]
 8004482:	f000 f941 	bl	8004708 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	f043 0210 	orr.w	r2, r3, #16
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004492:	68b8      	ldr	r0, [r7, #8]
 8004494:	f7ff ff02 	bl	800429c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004498:	bf00      	nop
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b090      	sub	sp, #64	; 0x40
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	4613      	mov	r3, r2
 80044ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b0:	e050      	b.n	8004554 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044b8:	d04c      	beq.n	8004554 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d007      	beq.n	80044d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80044c0:	f7fd ff82 	bl	80023c8 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d241      	bcs.n	8004554 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	330c      	adds	r3, #12
 80044d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044da:	e853 3f00 	ldrex	r3, [r3]
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	330c      	adds	r3, #12
 80044ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044f0:	637a      	str	r2, [r7, #52]	; 0x34
 80044f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044f8:	e841 2300 	strex	r3, r2, [r1]
 80044fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1e5      	bne.n	80044d0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3314      	adds	r3, #20
 800450a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	e853 3f00 	ldrex	r3, [r3]
 8004512:	613b      	str	r3, [r7, #16]
   return(result);
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	f023 0301 	bic.w	r3, r3, #1
 800451a:	63bb      	str	r3, [r7, #56]	; 0x38
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3314      	adds	r3, #20
 8004522:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004524:	623a      	str	r2, [r7, #32]
 8004526:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004528:	69f9      	ldr	r1, [r7, #28]
 800452a:	6a3a      	ldr	r2, [r7, #32]
 800452c:	e841 2300 	strex	r3, r2, [r1]
 8004530:	61bb      	str	r3, [r7, #24]
   return(result);
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1e5      	bne.n	8004504 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e00f      	b.n	8004574 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	4013      	ands	r3, r2
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	429a      	cmp	r2, r3
 8004562:	bf0c      	ite	eq
 8004564:	2301      	moveq	r3, #1
 8004566:	2300      	movne	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	461a      	mov	r2, r3
 800456c:	79fb      	ldrb	r3, [r7, #7]
 800456e:	429a      	cmp	r2, r3
 8004570:	d09f      	beq.n	80044b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3740      	adds	r7, #64	; 0x40
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b098      	sub	sp, #96	; 0x60
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	4613      	mov	r3, r2
 8004588:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	88fa      	ldrh	r2, [r7, #6]
 8004594:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2222      	movs	r2, #34	; 0x22
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a8:	4a40      	ldr	r2, [pc, #256]	; (80046ac <UART_Start_Receive_DMA+0x130>)
 80045aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b0:	4a3f      	ldr	r2, [pc, #252]	; (80046b0 <UART_Start_Receive_DMA+0x134>)
 80045b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b8:	4a3e      	ldr	r2, [pc, #248]	; (80046b4 <UART_Start_Receive_DMA+0x138>)
 80045ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c0:	2200      	movs	r2, #0
 80045c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80045c4:	f107 0308 	add.w	r3, r7, #8
 80045c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3304      	adds	r3, #4
 80045d4:	4619      	mov	r1, r3
 80045d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	88fb      	ldrh	r3, [r7, #6]
 80045dc:	f7fe f8e4 	bl	80027a8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80045e0:	2300      	movs	r3, #0
 80045e2:	613b      	str	r3, [r7, #16]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	613b      	str	r3, [r7, #16]
 80045f4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d019      	beq.n	800463a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	330c      	adds	r3, #12
 800460c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004610:	e853 3f00 	ldrex	r3, [r3]
 8004614:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800461c:	65bb      	str	r3, [r7, #88]	; 0x58
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	330c      	adds	r3, #12
 8004624:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004626:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004628:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800462c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800462e:	e841 2300 	strex	r3, r2, [r1]
 8004632:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1e5      	bne.n	8004606 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3314      	adds	r3, #20
 8004640:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004644:	e853 3f00 	ldrex	r3, [r3]
 8004648:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464c:	f043 0301 	orr.w	r3, r3, #1
 8004650:	657b      	str	r3, [r7, #84]	; 0x54
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3314      	adds	r3, #20
 8004658:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800465a:	63ba      	str	r2, [r7, #56]	; 0x38
 800465c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004660:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004662:	e841 2300 	strex	r3, r2, [r1]
 8004666:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1e5      	bne.n	800463a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3314      	adds	r3, #20
 8004674:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	e853 3f00 	ldrex	r3, [r3]
 800467c:	617b      	str	r3, [r7, #20]
   return(result);
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004684:	653b      	str	r3, [r7, #80]	; 0x50
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3314      	adds	r3, #20
 800468c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800468e:	627a      	str	r2, [r7, #36]	; 0x24
 8004690:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004692:	6a39      	ldr	r1, [r7, #32]
 8004694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004696:	e841 2300 	strex	r3, r2, [r1]
 800469a:	61fb      	str	r3, [r7, #28]
   return(result);
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1e5      	bne.n	800466e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3760      	adds	r7, #96	; 0x60
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	080042b1 	.word	0x080042b1
 80046b0:	080043d7 	.word	0x080043d7
 80046b4:	0800440d 	.word	0x0800440d

080046b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b089      	sub	sp, #36	; 0x24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	330c      	adds	r3, #12
 80046c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	e853 3f00 	ldrex	r3, [r3]
 80046ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	330c      	adds	r3, #12
 80046de:	69fa      	ldr	r2, [r7, #28]
 80046e0:	61ba      	str	r2, [r7, #24]
 80046e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e4:	6979      	ldr	r1, [r7, #20]
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	e841 2300 	strex	r3, r2, [r1]
 80046ec:	613b      	str	r3, [r7, #16]
   return(result);
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1e5      	bne.n	80046c0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80046fc:	bf00      	nop
 80046fe:	3724      	adds	r7, #36	; 0x24
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004708:	b480      	push	{r7}
 800470a:	b095      	sub	sp, #84	; 0x54
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	330c      	adds	r3, #12
 8004716:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800471a:	e853 3f00 	ldrex	r3, [r3]
 800471e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004722:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	330c      	adds	r3, #12
 800472e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004730:	643a      	str	r2, [r7, #64]	; 0x40
 8004732:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004734:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004736:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004738:	e841 2300 	strex	r3, r2, [r1]
 800473c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800473e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1e5      	bne.n	8004710 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3314      	adds	r3, #20
 800474a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	e853 3f00 	ldrex	r3, [r3]
 8004752:	61fb      	str	r3, [r7, #28]
   return(result);
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f023 0301 	bic.w	r3, r3, #1
 800475a:	64bb      	str	r3, [r7, #72]	; 0x48
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3314      	adds	r3, #20
 8004762:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004764:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004766:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004768:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800476a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800476c:	e841 2300 	strex	r3, r2, [r1]
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1e5      	bne.n	8004744 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	2b01      	cmp	r3, #1
 800477e:	d119      	bne.n	80047b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	330c      	adds	r3, #12
 8004786:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	e853 3f00 	ldrex	r3, [r3]
 800478e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	f023 0310 	bic.w	r3, r3, #16
 8004796:	647b      	str	r3, [r7, #68]	; 0x44
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	330c      	adds	r3, #12
 800479e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047a0:	61ba      	str	r2, [r7, #24]
 80047a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a4:	6979      	ldr	r1, [r7, #20]
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	e841 2300 	strex	r3, r2, [r1]
 80047ac:	613b      	str	r3, [r7, #16]
   return(result);
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1e5      	bne.n	8004780 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80047c2:	bf00      	nop
 80047c4:	3754      	adds	r7, #84	; 0x54
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b084      	sub	sp, #16
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f7ff fd57 	bl	800429c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047ee:	bf00      	nop
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b085      	sub	sp, #20
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b21      	cmp	r3, #33	; 0x21
 8004808:	d13e      	bne.n	8004888 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004812:	d114      	bne.n	800483e <UART_Transmit_IT+0x48>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d110      	bne.n	800483e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	461a      	mov	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004830:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	1c9a      	adds	r2, r3, #2
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	621a      	str	r2, [r3, #32]
 800483c:	e008      	b.n	8004850 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	1c59      	adds	r1, r3, #1
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6211      	str	r1, [r2, #32]
 8004848:	781a      	ldrb	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004854:	b29b      	uxth	r3, r3
 8004856:	3b01      	subs	r3, #1
 8004858:	b29b      	uxth	r3, r3
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	4619      	mov	r1, r3
 800485e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10f      	bne.n	8004884 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004872:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004882:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004884:	2300      	movs	r3, #0
 8004886:	e000      	b.n	800488a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004888:	2302      	movs	r3, #2
  }
}
 800488a:	4618      	mov	r0, r3
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b082      	sub	sp, #8
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68da      	ldr	r2, [r3, #12]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff fcd2 	bl	8004260 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b08c      	sub	sp, #48	; 0x30
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b22      	cmp	r3, #34	; 0x22
 80048d8:	f040 80ab 	bne.w	8004a32 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048e4:	d117      	bne.n	8004916 <UART_Receive_IT+0x50>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d113      	bne.n	8004916 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80048ee:	2300      	movs	r3, #0
 80048f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004904:	b29a      	uxth	r2, r3
 8004906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004908:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490e:	1c9a      	adds	r2, r3, #2
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	629a      	str	r2, [r3, #40]	; 0x28
 8004914:	e026      	b.n	8004964 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800491c:	2300      	movs	r3, #0
 800491e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004928:	d007      	beq.n	800493a <UART_Receive_IT+0x74>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10a      	bne.n	8004948 <UART_Receive_IT+0x82>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d106      	bne.n	8004948 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	b2da      	uxtb	r2, r3
 8004942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004944:	701a      	strb	r2, [r3, #0]
 8004946:	e008      	b.n	800495a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	b2db      	uxtb	r3, r3
 8004950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004954:	b2da      	uxtb	r2, r3
 8004956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004958:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004968:	b29b      	uxth	r3, r3
 800496a:	3b01      	subs	r3, #1
 800496c:	b29b      	uxth	r3, r3
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	4619      	mov	r1, r3
 8004972:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004974:	2b00      	cmp	r3, #0
 8004976:	d15a      	bne.n	8004a2e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 0220 	bic.w	r2, r2, #32
 8004986:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004996:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695a      	ldr	r2, [r3, #20]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0201 	bic.w	r2, r2, #1
 80049a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d135      	bne.n	8004a24 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	330c      	adds	r3, #12
 80049c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	e853 3f00 	ldrex	r3, [r3]
 80049cc:	613b      	str	r3, [r7, #16]
   return(result);
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f023 0310 	bic.w	r3, r3, #16
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	330c      	adds	r3, #12
 80049dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049de:	623a      	str	r2, [r7, #32]
 80049e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	69f9      	ldr	r1, [r7, #28]
 80049e4:	6a3a      	ldr	r2, [r7, #32]
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e5      	bne.n	80049be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	2b10      	cmp	r3, #16
 80049fe:	d10a      	bne.n	8004a16 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a00:	2300      	movs	r3, #0
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7fc facb 	bl	8000fb8 <HAL_UARTEx_RxEventCallback>
 8004a22:	e002      	b.n	8004a2a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7ff fc25 	bl	8004274 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	e002      	b.n	8004a34 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	e000      	b.n	8004a34 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004a32:	2302      	movs	r3, #2
  }
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3730      	adds	r7, #48	; 0x30
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a40:	b0c0      	sub	sp, #256	; 0x100
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a58:	68d9      	ldr	r1, [r3, #12]
 8004a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	ea40 0301 	orr.w	r3, r0, r1
 8004a64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	431a      	orrs	r2, r3
 8004a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a94:	f021 010c 	bic.w	r1, r1, #12
 8004a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004aa2:	430b      	orrs	r3, r1
 8004aa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab6:	6999      	ldr	r1, [r3, #24]
 8004ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	ea40 0301 	orr.w	r3, r0, r1
 8004ac2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	4b8f      	ldr	r3, [pc, #572]	; (8004d08 <UART_SetConfig+0x2cc>)
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d005      	beq.n	8004adc <UART_SetConfig+0xa0>
 8004ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4b8d      	ldr	r3, [pc, #564]	; (8004d0c <UART_SetConfig+0x2d0>)
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d104      	bne.n	8004ae6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004adc:	f7fe ffda 	bl	8003a94 <HAL_RCC_GetPCLK2Freq>
 8004ae0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ae4:	e003      	b.n	8004aee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ae6:	f7fe ffc1 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8004aea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af8:	f040 810c 	bne.w	8004d14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004afc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b00:	2200      	movs	r2, #0
 8004b02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b0e:	4622      	mov	r2, r4
 8004b10:	462b      	mov	r3, r5
 8004b12:	1891      	adds	r1, r2, r2
 8004b14:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b16:	415b      	adcs	r3, r3
 8004b18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b1e:	4621      	mov	r1, r4
 8004b20:	eb12 0801 	adds.w	r8, r2, r1
 8004b24:	4629      	mov	r1, r5
 8004b26:	eb43 0901 	adc.w	r9, r3, r1
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b3e:	4690      	mov	r8, r2
 8004b40:	4699      	mov	r9, r3
 8004b42:	4623      	mov	r3, r4
 8004b44:	eb18 0303 	adds.w	r3, r8, r3
 8004b48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b4c:	462b      	mov	r3, r5
 8004b4e:	eb49 0303 	adc.w	r3, r9, r3
 8004b52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	18db      	adds	r3, r3, r3
 8004b6e:	653b      	str	r3, [r7, #80]	; 0x50
 8004b70:	4613      	mov	r3, r2
 8004b72:	eb42 0303 	adc.w	r3, r2, r3
 8004b76:	657b      	str	r3, [r7, #84]	; 0x54
 8004b78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b80:	f7fc f862 	bl	8000c48 <__aeabi_uldivmod>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4b61      	ldr	r3, [pc, #388]	; (8004d10 <UART_SetConfig+0x2d4>)
 8004b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b8e:	095b      	lsrs	r3, r3, #5
 8004b90:	011c      	lsls	r4, r3, #4
 8004b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b96:	2200      	movs	r2, #0
 8004b98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ba0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ba4:	4642      	mov	r2, r8
 8004ba6:	464b      	mov	r3, r9
 8004ba8:	1891      	adds	r1, r2, r2
 8004baa:	64b9      	str	r1, [r7, #72]	; 0x48
 8004bac:	415b      	adcs	r3, r3
 8004bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004bb4:	4641      	mov	r1, r8
 8004bb6:	eb12 0a01 	adds.w	sl, r2, r1
 8004bba:	4649      	mov	r1, r9
 8004bbc:	eb43 0b01 	adc.w	fp, r3, r1
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bcc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bd4:	4692      	mov	sl, r2
 8004bd6:	469b      	mov	fp, r3
 8004bd8:	4643      	mov	r3, r8
 8004bda:	eb1a 0303 	adds.w	r3, sl, r3
 8004bde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004be2:	464b      	mov	r3, r9
 8004be4:	eb4b 0303 	adc.w	r3, fp, r3
 8004be8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bf8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004bfc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c00:	460b      	mov	r3, r1
 8004c02:	18db      	adds	r3, r3, r3
 8004c04:	643b      	str	r3, [r7, #64]	; 0x40
 8004c06:	4613      	mov	r3, r2
 8004c08:	eb42 0303 	adc.w	r3, r2, r3
 8004c0c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c16:	f7fc f817 	bl	8000c48 <__aeabi_uldivmod>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4611      	mov	r1, r2
 8004c20:	4b3b      	ldr	r3, [pc, #236]	; (8004d10 <UART_SetConfig+0x2d4>)
 8004c22:	fba3 2301 	umull	r2, r3, r3, r1
 8004c26:	095b      	lsrs	r3, r3, #5
 8004c28:	2264      	movs	r2, #100	; 0x64
 8004c2a:	fb02 f303 	mul.w	r3, r2, r3
 8004c2e:	1acb      	subs	r3, r1, r3
 8004c30:	00db      	lsls	r3, r3, #3
 8004c32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c36:	4b36      	ldr	r3, [pc, #216]	; (8004d10 <UART_SetConfig+0x2d4>)
 8004c38:	fba3 2302 	umull	r2, r3, r3, r2
 8004c3c:	095b      	lsrs	r3, r3, #5
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c44:	441c      	add	r4, r3
 8004c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c58:	4642      	mov	r2, r8
 8004c5a:	464b      	mov	r3, r9
 8004c5c:	1891      	adds	r1, r2, r2
 8004c5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c60:	415b      	adcs	r3, r3
 8004c62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c68:	4641      	mov	r1, r8
 8004c6a:	1851      	adds	r1, r2, r1
 8004c6c:	6339      	str	r1, [r7, #48]	; 0x30
 8004c6e:	4649      	mov	r1, r9
 8004c70:	414b      	adcs	r3, r1
 8004c72:	637b      	str	r3, [r7, #52]	; 0x34
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c80:	4659      	mov	r1, fp
 8004c82:	00cb      	lsls	r3, r1, #3
 8004c84:	4651      	mov	r1, sl
 8004c86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c8a:	4651      	mov	r1, sl
 8004c8c:	00ca      	lsls	r2, r1, #3
 8004c8e:	4610      	mov	r0, r2
 8004c90:	4619      	mov	r1, r3
 8004c92:	4603      	mov	r3, r0
 8004c94:	4642      	mov	r2, r8
 8004c96:	189b      	adds	r3, r3, r2
 8004c98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c9c:	464b      	mov	r3, r9
 8004c9e:	460a      	mov	r2, r1
 8004ca0:	eb42 0303 	adc.w	r3, r2, r3
 8004ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004cb4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004cb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	18db      	adds	r3, r3, r3
 8004cc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	eb42 0303 	adc.w	r3, r2, r3
 8004cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004cd2:	f7fb ffb9 	bl	8000c48 <__aeabi_uldivmod>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	460b      	mov	r3, r1
 8004cda:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <UART_SetConfig+0x2d4>)
 8004cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ce0:	095b      	lsrs	r3, r3, #5
 8004ce2:	2164      	movs	r1, #100	; 0x64
 8004ce4:	fb01 f303 	mul.w	r3, r1, r3
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	3332      	adds	r3, #50	; 0x32
 8004cee:	4a08      	ldr	r2, [pc, #32]	; (8004d10 <UART_SetConfig+0x2d4>)
 8004cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf4:	095b      	lsrs	r3, r3, #5
 8004cf6:	f003 0207 	and.w	r2, r3, #7
 8004cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4422      	add	r2, r4
 8004d02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d04:	e105      	b.n	8004f12 <UART_SetConfig+0x4d6>
 8004d06:	bf00      	nop
 8004d08:	40011000 	.word	0x40011000
 8004d0c:	40011400 	.word	0x40011400
 8004d10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d26:	4642      	mov	r2, r8
 8004d28:	464b      	mov	r3, r9
 8004d2a:	1891      	adds	r1, r2, r2
 8004d2c:	6239      	str	r1, [r7, #32]
 8004d2e:	415b      	adcs	r3, r3
 8004d30:	627b      	str	r3, [r7, #36]	; 0x24
 8004d32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d36:	4641      	mov	r1, r8
 8004d38:	1854      	adds	r4, r2, r1
 8004d3a:	4649      	mov	r1, r9
 8004d3c:	eb43 0501 	adc.w	r5, r3, r1
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	00eb      	lsls	r3, r5, #3
 8004d4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d4e:	00e2      	lsls	r2, r4, #3
 8004d50:	4614      	mov	r4, r2
 8004d52:	461d      	mov	r5, r3
 8004d54:	4643      	mov	r3, r8
 8004d56:	18e3      	adds	r3, r4, r3
 8004d58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d5c:	464b      	mov	r3, r9
 8004d5e:	eb45 0303 	adc.w	r3, r5, r3
 8004d62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d82:	4629      	mov	r1, r5
 8004d84:	008b      	lsls	r3, r1, #2
 8004d86:	4621      	mov	r1, r4
 8004d88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d8c:	4621      	mov	r1, r4
 8004d8e:	008a      	lsls	r2, r1, #2
 8004d90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d94:	f7fb ff58 	bl	8000c48 <__aeabi_uldivmod>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4b60      	ldr	r3, [pc, #384]	; (8004f20 <UART_SetConfig+0x4e4>)
 8004d9e:	fba3 2302 	umull	r2, r3, r3, r2
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	011c      	lsls	r4, r3, #4
 8004da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004daa:	2200      	movs	r2, #0
 8004dac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004db0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004db4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004db8:	4642      	mov	r2, r8
 8004dba:	464b      	mov	r3, r9
 8004dbc:	1891      	adds	r1, r2, r2
 8004dbe:	61b9      	str	r1, [r7, #24]
 8004dc0:	415b      	adcs	r3, r3
 8004dc2:	61fb      	str	r3, [r7, #28]
 8004dc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dc8:	4641      	mov	r1, r8
 8004dca:	1851      	adds	r1, r2, r1
 8004dcc:	6139      	str	r1, [r7, #16]
 8004dce:	4649      	mov	r1, r9
 8004dd0:	414b      	adcs	r3, r1
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	f04f 0200 	mov.w	r2, #0
 8004dd8:	f04f 0300 	mov.w	r3, #0
 8004ddc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004de0:	4659      	mov	r1, fp
 8004de2:	00cb      	lsls	r3, r1, #3
 8004de4:	4651      	mov	r1, sl
 8004de6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dea:	4651      	mov	r1, sl
 8004dec:	00ca      	lsls	r2, r1, #3
 8004dee:	4610      	mov	r0, r2
 8004df0:	4619      	mov	r1, r3
 8004df2:	4603      	mov	r3, r0
 8004df4:	4642      	mov	r2, r8
 8004df6:	189b      	adds	r3, r3, r2
 8004df8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004dfc:	464b      	mov	r3, r9
 8004dfe:	460a      	mov	r2, r1
 8004e00:	eb42 0303 	adc.w	r3, r2, r3
 8004e04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	f04f 0300 	mov.w	r3, #0
 8004e1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e20:	4649      	mov	r1, r9
 8004e22:	008b      	lsls	r3, r1, #2
 8004e24:	4641      	mov	r1, r8
 8004e26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e2a:	4641      	mov	r1, r8
 8004e2c:	008a      	lsls	r2, r1, #2
 8004e2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e32:	f7fb ff09 	bl	8000c48 <__aeabi_uldivmod>
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4b39      	ldr	r3, [pc, #228]	; (8004f20 <UART_SetConfig+0x4e4>)
 8004e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e40:	095b      	lsrs	r3, r3, #5
 8004e42:	2164      	movs	r1, #100	; 0x64
 8004e44:	fb01 f303 	mul.w	r3, r1, r3
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	3332      	adds	r3, #50	; 0x32
 8004e4e:	4a34      	ldr	r2, [pc, #208]	; (8004f20 <UART_SetConfig+0x4e4>)
 8004e50:	fba2 2303 	umull	r2, r3, r2, r3
 8004e54:	095b      	lsrs	r3, r3, #5
 8004e56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e5a:	441c      	add	r4, r3
 8004e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e60:	2200      	movs	r2, #0
 8004e62:	673b      	str	r3, [r7, #112]	; 0x70
 8004e64:	677a      	str	r2, [r7, #116]	; 0x74
 8004e66:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e6a:	4642      	mov	r2, r8
 8004e6c:	464b      	mov	r3, r9
 8004e6e:	1891      	adds	r1, r2, r2
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	415b      	adcs	r3, r3
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e7a:	4641      	mov	r1, r8
 8004e7c:	1851      	adds	r1, r2, r1
 8004e7e:	6039      	str	r1, [r7, #0]
 8004e80:	4649      	mov	r1, r9
 8004e82:	414b      	adcs	r3, r1
 8004e84:	607b      	str	r3, [r7, #4]
 8004e86:	f04f 0200 	mov.w	r2, #0
 8004e8a:	f04f 0300 	mov.w	r3, #0
 8004e8e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e92:	4659      	mov	r1, fp
 8004e94:	00cb      	lsls	r3, r1, #3
 8004e96:	4651      	mov	r1, sl
 8004e98:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e9c:	4651      	mov	r1, sl
 8004e9e:	00ca      	lsls	r2, r1, #3
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	4642      	mov	r2, r8
 8004ea8:	189b      	adds	r3, r3, r2
 8004eaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eac:	464b      	mov	r3, r9
 8004eae:	460a      	mov	r2, r1
 8004eb0:	eb42 0303 	adc.w	r3, r2, r3
 8004eb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	663b      	str	r3, [r7, #96]	; 0x60
 8004ec0:	667a      	str	r2, [r7, #100]	; 0x64
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	f04f 0300 	mov.w	r3, #0
 8004eca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ece:	4649      	mov	r1, r9
 8004ed0:	008b      	lsls	r3, r1, #2
 8004ed2:	4641      	mov	r1, r8
 8004ed4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ed8:	4641      	mov	r1, r8
 8004eda:	008a      	lsls	r2, r1, #2
 8004edc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ee0:	f7fb feb2 	bl	8000c48 <__aeabi_uldivmod>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4b0d      	ldr	r3, [pc, #52]	; (8004f20 <UART_SetConfig+0x4e4>)
 8004eea:	fba3 1302 	umull	r1, r3, r3, r2
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	2164      	movs	r1, #100	; 0x64
 8004ef2:	fb01 f303 	mul.w	r3, r1, r3
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	3332      	adds	r3, #50	; 0x32
 8004efc:	4a08      	ldr	r2, [pc, #32]	; (8004f20 <UART_SetConfig+0x4e4>)
 8004efe:	fba2 2303 	umull	r2, r3, r2, r3
 8004f02:	095b      	lsrs	r3, r3, #5
 8004f04:	f003 020f 	and.w	r2, r3, #15
 8004f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4422      	add	r2, r4
 8004f10:	609a      	str	r2, [r3, #8]
}
 8004f12:	bf00      	nop
 8004f14:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f1e:	bf00      	nop
 8004f20:	51eb851f 	.word	0x51eb851f

08004f24 <__errno>:
 8004f24:	4b01      	ldr	r3, [pc, #4]	; (8004f2c <__errno+0x8>)
 8004f26:	6818      	ldr	r0, [r3, #0]
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	2000000c 	.word	0x2000000c

08004f30 <__libc_init_array>:
 8004f30:	b570      	push	{r4, r5, r6, lr}
 8004f32:	4d0d      	ldr	r5, [pc, #52]	; (8004f68 <__libc_init_array+0x38>)
 8004f34:	4c0d      	ldr	r4, [pc, #52]	; (8004f6c <__libc_init_array+0x3c>)
 8004f36:	1b64      	subs	r4, r4, r5
 8004f38:	10a4      	asrs	r4, r4, #2
 8004f3a:	2600      	movs	r6, #0
 8004f3c:	42a6      	cmp	r6, r4
 8004f3e:	d109      	bne.n	8004f54 <__libc_init_array+0x24>
 8004f40:	4d0b      	ldr	r5, [pc, #44]	; (8004f70 <__libc_init_array+0x40>)
 8004f42:	4c0c      	ldr	r4, [pc, #48]	; (8004f74 <__libc_init_array+0x44>)
 8004f44:	f003 fa0a 	bl	800835c <_init>
 8004f48:	1b64      	subs	r4, r4, r5
 8004f4a:	10a4      	asrs	r4, r4, #2
 8004f4c:	2600      	movs	r6, #0
 8004f4e:	42a6      	cmp	r6, r4
 8004f50:	d105      	bne.n	8004f5e <__libc_init_array+0x2e>
 8004f52:	bd70      	pop	{r4, r5, r6, pc}
 8004f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f58:	4798      	blx	r3
 8004f5a:	3601      	adds	r6, #1
 8004f5c:	e7ee      	b.n	8004f3c <__libc_init_array+0xc>
 8004f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f62:	4798      	blx	r3
 8004f64:	3601      	adds	r6, #1
 8004f66:	e7f2      	b.n	8004f4e <__libc_init_array+0x1e>
 8004f68:	080088a0 	.word	0x080088a0
 8004f6c:	080088a0 	.word	0x080088a0
 8004f70:	080088a0 	.word	0x080088a0
 8004f74:	080088a4 	.word	0x080088a4

08004f78 <malloc>:
 8004f78:	4b02      	ldr	r3, [pc, #8]	; (8004f84 <malloc+0xc>)
 8004f7a:	4601      	mov	r1, r0
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	f000 b88d 	b.w	800509c <_malloc_r>
 8004f82:	bf00      	nop
 8004f84:	2000000c 	.word	0x2000000c

08004f88 <free>:
 8004f88:	4b02      	ldr	r3, [pc, #8]	; (8004f94 <free+0xc>)
 8004f8a:	4601      	mov	r1, r0
 8004f8c:	6818      	ldr	r0, [r3, #0]
 8004f8e:	f000 b819 	b.w	8004fc4 <_free_r>
 8004f92:	bf00      	nop
 8004f94:	2000000c 	.word	0x2000000c

08004f98 <memcpy>:
 8004f98:	440a      	add	r2, r1
 8004f9a:	4291      	cmp	r1, r2
 8004f9c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004fa0:	d100      	bne.n	8004fa4 <memcpy+0xc>
 8004fa2:	4770      	bx	lr
 8004fa4:	b510      	push	{r4, lr}
 8004fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004faa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fae:	4291      	cmp	r1, r2
 8004fb0:	d1f9      	bne.n	8004fa6 <memcpy+0xe>
 8004fb2:	bd10      	pop	{r4, pc}

08004fb4 <memset>:
 8004fb4:	4402      	add	r2, r0
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d100      	bne.n	8004fbe <memset+0xa>
 8004fbc:	4770      	bx	lr
 8004fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8004fc2:	e7f9      	b.n	8004fb8 <memset+0x4>

08004fc4 <_free_r>:
 8004fc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fc6:	2900      	cmp	r1, #0
 8004fc8:	d044      	beq.n	8005054 <_free_r+0x90>
 8004fca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fce:	9001      	str	r0, [sp, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f1a1 0404 	sub.w	r4, r1, #4
 8004fd6:	bfb8      	it	lt
 8004fd8:	18e4      	addlt	r4, r4, r3
 8004fda:	f001 fc39 	bl	8006850 <__malloc_lock>
 8004fde:	4a1e      	ldr	r2, [pc, #120]	; (8005058 <_free_r+0x94>)
 8004fe0:	9801      	ldr	r0, [sp, #4]
 8004fe2:	6813      	ldr	r3, [r2, #0]
 8004fe4:	b933      	cbnz	r3, 8004ff4 <_free_r+0x30>
 8004fe6:	6063      	str	r3, [r4, #4]
 8004fe8:	6014      	str	r4, [r2, #0]
 8004fea:	b003      	add	sp, #12
 8004fec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ff0:	f001 bc34 	b.w	800685c <__malloc_unlock>
 8004ff4:	42a3      	cmp	r3, r4
 8004ff6:	d908      	bls.n	800500a <_free_r+0x46>
 8004ff8:	6825      	ldr	r5, [r4, #0]
 8004ffa:	1961      	adds	r1, r4, r5
 8004ffc:	428b      	cmp	r3, r1
 8004ffe:	bf01      	itttt	eq
 8005000:	6819      	ldreq	r1, [r3, #0]
 8005002:	685b      	ldreq	r3, [r3, #4]
 8005004:	1949      	addeq	r1, r1, r5
 8005006:	6021      	streq	r1, [r4, #0]
 8005008:	e7ed      	b.n	8004fe6 <_free_r+0x22>
 800500a:	461a      	mov	r2, r3
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	b10b      	cbz	r3, 8005014 <_free_r+0x50>
 8005010:	42a3      	cmp	r3, r4
 8005012:	d9fa      	bls.n	800500a <_free_r+0x46>
 8005014:	6811      	ldr	r1, [r2, #0]
 8005016:	1855      	adds	r5, r2, r1
 8005018:	42a5      	cmp	r5, r4
 800501a:	d10b      	bne.n	8005034 <_free_r+0x70>
 800501c:	6824      	ldr	r4, [r4, #0]
 800501e:	4421      	add	r1, r4
 8005020:	1854      	adds	r4, r2, r1
 8005022:	42a3      	cmp	r3, r4
 8005024:	6011      	str	r1, [r2, #0]
 8005026:	d1e0      	bne.n	8004fea <_free_r+0x26>
 8005028:	681c      	ldr	r4, [r3, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	6053      	str	r3, [r2, #4]
 800502e:	4421      	add	r1, r4
 8005030:	6011      	str	r1, [r2, #0]
 8005032:	e7da      	b.n	8004fea <_free_r+0x26>
 8005034:	d902      	bls.n	800503c <_free_r+0x78>
 8005036:	230c      	movs	r3, #12
 8005038:	6003      	str	r3, [r0, #0]
 800503a:	e7d6      	b.n	8004fea <_free_r+0x26>
 800503c:	6825      	ldr	r5, [r4, #0]
 800503e:	1961      	adds	r1, r4, r5
 8005040:	428b      	cmp	r3, r1
 8005042:	bf04      	itt	eq
 8005044:	6819      	ldreq	r1, [r3, #0]
 8005046:	685b      	ldreq	r3, [r3, #4]
 8005048:	6063      	str	r3, [r4, #4]
 800504a:	bf04      	itt	eq
 800504c:	1949      	addeq	r1, r1, r5
 800504e:	6021      	streq	r1, [r4, #0]
 8005050:	6054      	str	r4, [r2, #4]
 8005052:	e7ca      	b.n	8004fea <_free_r+0x26>
 8005054:	b003      	add	sp, #12
 8005056:	bd30      	pop	{r4, r5, pc}
 8005058:	20000604 	.word	0x20000604

0800505c <sbrk_aligned>:
 800505c:	b570      	push	{r4, r5, r6, lr}
 800505e:	4e0e      	ldr	r6, [pc, #56]	; (8005098 <sbrk_aligned+0x3c>)
 8005060:	460c      	mov	r4, r1
 8005062:	6831      	ldr	r1, [r6, #0]
 8005064:	4605      	mov	r5, r0
 8005066:	b911      	cbnz	r1, 800506e <sbrk_aligned+0x12>
 8005068:	f000 f88c 	bl	8005184 <_sbrk_r>
 800506c:	6030      	str	r0, [r6, #0]
 800506e:	4621      	mov	r1, r4
 8005070:	4628      	mov	r0, r5
 8005072:	f000 f887 	bl	8005184 <_sbrk_r>
 8005076:	1c43      	adds	r3, r0, #1
 8005078:	d00a      	beq.n	8005090 <sbrk_aligned+0x34>
 800507a:	1cc4      	adds	r4, r0, #3
 800507c:	f024 0403 	bic.w	r4, r4, #3
 8005080:	42a0      	cmp	r0, r4
 8005082:	d007      	beq.n	8005094 <sbrk_aligned+0x38>
 8005084:	1a21      	subs	r1, r4, r0
 8005086:	4628      	mov	r0, r5
 8005088:	f000 f87c 	bl	8005184 <_sbrk_r>
 800508c:	3001      	adds	r0, #1
 800508e:	d101      	bne.n	8005094 <sbrk_aligned+0x38>
 8005090:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005094:	4620      	mov	r0, r4
 8005096:	bd70      	pop	{r4, r5, r6, pc}
 8005098:	20000608 	.word	0x20000608

0800509c <_malloc_r>:
 800509c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050a0:	1ccd      	adds	r5, r1, #3
 80050a2:	f025 0503 	bic.w	r5, r5, #3
 80050a6:	3508      	adds	r5, #8
 80050a8:	2d0c      	cmp	r5, #12
 80050aa:	bf38      	it	cc
 80050ac:	250c      	movcc	r5, #12
 80050ae:	2d00      	cmp	r5, #0
 80050b0:	4607      	mov	r7, r0
 80050b2:	db01      	blt.n	80050b8 <_malloc_r+0x1c>
 80050b4:	42a9      	cmp	r1, r5
 80050b6:	d905      	bls.n	80050c4 <_malloc_r+0x28>
 80050b8:	230c      	movs	r3, #12
 80050ba:	603b      	str	r3, [r7, #0]
 80050bc:	2600      	movs	r6, #0
 80050be:	4630      	mov	r0, r6
 80050c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050c4:	4e2e      	ldr	r6, [pc, #184]	; (8005180 <_malloc_r+0xe4>)
 80050c6:	f001 fbc3 	bl	8006850 <__malloc_lock>
 80050ca:	6833      	ldr	r3, [r6, #0]
 80050cc:	461c      	mov	r4, r3
 80050ce:	bb34      	cbnz	r4, 800511e <_malloc_r+0x82>
 80050d0:	4629      	mov	r1, r5
 80050d2:	4638      	mov	r0, r7
 80050d4:	f7ff ffc2 	bl	800505c <sbrk_aligned>
 80050d8:	1c43      	adds	r3, r0, #1
 80050da:	4604      	mov	r4, r0
 80050dc:	d14d      	bne.n	800517a <_malloc_r+0xde>
 80050de:	6834      	ldr	r4, [r6, #0]
 80050e0:	4626      	mov	r6, r4
 80050e2:	2e00      	cmp	r6, #0
 80050e4:	d140      	bne.n	8005168 <_malloc_r+0xcc>
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	4631      	mov	r1, r6
 80050ea:	4638      	mov	r0, r7
 80050ec:	eb04 0803 	add.w	r8, r4, r3
 80050f0:	f000 f848 	bl	8005184 <_sbrk_r>
 80050f4:	4580      	cmp	r8, r0
 80050f6:	d13a      	bne.n	800516e <_malloc_r+0xd2>
 80050f8:	6821      	ldr	r1, [r4, #0]
 80050fa:	3503      	adds	r5, #3
 80050fc:	1a6d      	subs	r5, r5, r1
 80050fe:	f025 0503 	bic.w	r5, r5, #3
 8005102:	3508      	adds	r5, #8
 8005104:	2d0c      	cmp	r5, #12
 8005106:	bf38      	it	cc
 8005108:	250c      	movcc	r5, #12
 800510a:	4629      	mov	r1, r5
 800510c:	4638      	mov	r0, r7
 800510e:	f7ff ffa5 	bl	800505c <sbrk_aligned>
 8005112:	3001      	adds	r0, #1
 8005114:	d02b      	beq.n	800516e <_malloc_r+0xd2>
 8005116:	6823      	ldr	r3, [r4, #0]
 8005118:	442b      	add	r3, r5
 800511a:	6023      	str	r3, [r4, #0]
 800511c:	e00e      	b.n	800513c <_malloc_r+0xa0>
 800511e:	6822      	ldr	r2, [r4, #0]
 8005120:	1b52      	subs	r2, r2, r5
 8005122:	d41e      	bmi.n	8005162 <_malloc_r+0xc6>
 8005124:	2a0b      	cmp	r2, #11
 8005126:	d916      	bls.n	8005156 <_malloc_r+0xba>
 8005128:	1961      	adds	r1, r4, r5
 800512a:	42a3      	cmp	r3, r4
 800512c:	6025      	str	r5, [r4, #0]
 800512e:	bf18      	it	ne
 8005130:	6059      	strne	r1, [r3, #4]
 8005132:	6863      	ldr	r3, [r4, #4]
 8005134:	bf08      	it	eq
 8005136:	6031      	streq	r1, [r6, #0]
 8005138:	5162      	str	r2, [r4, r5]
 800513a:	604b      	str	r3, [r1, #4]
 800513c:	4638      	mov	r0, r7
 800513e:	f104 060b 	add.w	r6, r4, #11
 8005142:	f001 fb8b 	bl	800685c <__malloc_unlock>
 8005146:	f026 0607 	bic.w	r6, r6, #7
 800514a:	1d23      	adds	r3, r4, #4
 800514c:	1af2      	subs	r2, r6, r3
 800514e:	d0b6      	beq.n	80050be <_malloc_r+0x22>
 8005150:	1b9b      	subs	r3, r3, r6
 8005152:	50a3      	str	r3, [r4, r2]
 8005154:	e7b3      	b.n	80050be <_malloc_r+0x22>
 8005156:	6862      	ldr	r2, [r4, #4]
 8005158:	42a3      	cmp	r3, r4
 800515a:	bf0c      	ite	eq
 800515c:	6032      	streq	r2, [r6, #0]
 800515e:	605a      	strne	r2, [r3, #4]
 8005160:	e7ec      	b.n	800513c <_malloc_r+0xa0>
 8005162:	4623      	mov	r3, r4
 8005164:	6864      	ldr	r4, [r4, #4]
 8005166:	e7b2      	b.n	80050ce <_malloc_r+0x32>
 8005168:	4634      	mov	r4, r6
 800516a:	6876      	ldr	r6, [r6, #4]
 800516c:	e7b9      	b.n	80050e2 <_malloc_r+0x46>
 800516e:	230c      	movs	r3, #12
 8005170:	603b      	str	r3, [r7, #0]
 8005172:	4638      	mov	r0, r7
 8005174:	f001 fb72 	bl	800685c <__malloc_unlock>
 8005178:	e7a1      	b.n	80050be <_malloc_r+0x22>
 800517a:	6025      	str	r5, [r4, #0]
 800517c:	e7de      	b.n	800513c <_malloc_r+0xa0>
 800517e:	bf00      	nop
 8005180:	20000604 	.word	0x20000604

08005184 <_sbrk_r>:
 8005184:	b538      	push	{r3, r4, r5, lr}
 8005186:	4d06      	ldr	r5, [pc, #24]	; (80051a0 <_sbrk_r+0x1c>)
 8005188:	2300      	movs	r3, #0
 800518a:	4604      	mov	r4, r0
 800518c:	4608      	mov	r0, r1
 800518e:	602b      	str	r3, [r5, #0]
 8005190:	f7fd f842 	bl	8002218 <_sbrk>
 8005194:	1c43      	adds	r3, r0, #1
 8005196:	d102      	bne.n	800519e <_sbrk_r+0x1a>
 8005198:	682b      	ldr	r3, [r5, #0]
 800519a:	b103      	cbz	r3, 800519e <_sbrk_r+0x1a>
 800519c:	6023      	str	r3, [r4, #0]
 800519e:	bd38      	pop	{r3, r4, r5, pc}
 80051a0:	2000060c 	.word	0x2000060c

080051a4 <siprintf>:
 80051a4:	b40e      	push	{r1, r2, r3}
 80051a6:	b500      	push	{lr}
 80051a8:	b09c      	sub	sp, #112	; 0x70
 80051aa:	ab1d      	add	r3, sp, #116	; 0x74
 80051ac:	9002      	str	r0, [sp, #8]
 80051ae:	9006      	str	r0, [sp, #24]
 80051b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051b4:	4809      	ldr	r0, [pc, #36]	; (80051dc <siprintf+0x38>)
 80051b6:	9107      	str	r1, [sp, #28]
 80051b8:	9104      	str	r1, [sp, #16]
 80051ba:	4909      	ldr	r1, [pc, #36]	; (80051e0 <siprintf+0x3c>)
 80051bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80051c0:	9105      	str	r1, [sp, #20]
 80051c2:	6800      	ldr	r0, [r0, #0]
 80051c4:	9301      	str	r3, [sp, #4]
 80051c6:	a902      	add	r1, sp, #8
 80051c8:	f002 f880 	bl	80072cc <_svfiprintf_r>
 80051cc:	9b02      	ldr	r3, [sp, #8]
 80051ce:	2200      	movs	r2, #0
 80051d0:	701a      	strb	r2, [r3, #0]
 80051d2:	b01c      	add	sp, #112	; 0x70
 80051d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80051d8:	b003      	add	sp, #12
 80051da:	4770      	bx	lr
 80051dc:	2000000c 	.word	0x2000000c
 80051e0:	ffff0208 	.word	0xffff0208

080051e4 <strcpy>:
 80051e4:	4603      	mov	r3, r0
 80051e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051ea:	f803 2b01 	strb.w	r2, [r3], #1
 80051ee:	2a00      	cmp	r2, #0
 80051f0:	d1f9      	bne.n	80051e6 <strcpy+0x2>
 80051f2:	4770      	bx	lr

080051f4 <strstr>:
 80051f4:	780a      	ldrb	r2, [r1, #0]
 80051f6:	b570      	push	{r4, r5, r6, lr}
 80051f8:	b96a      	cbnz	r2, 8005216 <strstr+0x22>
 80051fa:	bd70      	pop	{r4, r5, r6, pc}
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d109      	bne.n	8005214 <strstr+0x20>
 8005200:	460c      	mov	r4, r1
 8005202:	4605      	mov	r5, r0
 8005204:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005208:	2b00      	cmp	r3, #0
 800520a:	d0f6      	beq.n	80051fa <strstr+0x6>
 800520c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005210:	429e      	cmp	r6, r3
 8005212:	d0f7      	beq.n	8005204 <strstr+0x10>
 8005214:	3001      	adds	r0, #1
 8005216:	7803      	ldrb	r3, [r0, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1ef      	bne.n	80051fc <strstr+0x8>
 800521c:	4618      	mov	r0, r3
 800521e:	e7ec      	b.n	80051fa <strstr+0x6>

08005220 <sulp>:
 8005220:	b570      	push	{r4, r5, r6, lr}
 8005222:	4604      	mov	r4, r0
 8005224:	460d      	mov	r5, r1
 8005226:	ec45 4b10 	vmov	d0, r4, r5
 800522a:	4616      	mov	r6, r2
 800522c:	f001 fe8e 	bl	8006f4c <__ulp>
 8005230:	ec51 0b10 	vmov	r0, r1, d0
 8005234:	b17e      	cbz	r6, 8005256 <sulp+0x36>
 8005236:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800523a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800523e:	2b00      	cmp	r3, #0
 8005240:	dd09      	ble.n	8005256 <sulp+0x36>
 8005242:	051b      	lsls	r3, r3, #20
 8005244:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005248:	2400      	movs	r4, #0
 800524a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800524e:	4622      	mov	r2, r4
 8005250:	462b      	mov	r3, r5
 8005252:	f7fb f9d9 	bl	8000608 <__aeabi_dmul>
 8005256:	bd70      	pop	{r4, r5, r6, pc}

08005258 <_strtod_l>:
 8005258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525c:	ed2d 8b02 	vpush	{d8}
 8005260:	b09d      	sub	sp, #116	; 0x74
 8005262:	461f      	mov	r7, r3
 8005264:	2300      	movs	r3, #0
 8005266:	9318      	str	r3, [sp, #96]	; 0x60
 8005268:	4ba2      	ldr	r3, [pc, #648]	; (80054f4 <_strtod_l+0x29c>)
 800526a:	9213      	str	r2, [sp, #76]	; 0x4c
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	9305      	str	r3, [sp, #20]
 8005270:	4604      	mov	r4, r0
 8005272:	4618      	mov	r0, r3
 8005274:	4688      	mov	r8, r1
 8005276:	f7fa ffb3 	bl	80001e0 <strlen>
 800527a:	f04f 0a00 	mov.w	sl, #0
 800527e:	4605      	mov	r5, r0
 8005280:	f04f 0b00 	mov.w	fp, #0
 8005284:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005288:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800528a:	781a      	ldrb	r2, [r3, #0]
 800528c:	2a2b      	cmp	r2, #43	; 0x2b
 800528e:	d04e      	beq.n	800532e <_strtod_l+0xd6>
 8005290:	d83b      	bhi.n	800530a <_strtod_l+0xb2>
 8005292:	2a0d      	cmp	r2, #13
 8005294:	d834      	bhi.n	8005300 <_strtod_l+0xa8>
 8005296:	2a08      	cmp	r2, #8
 8005298:	d834      	bhi.n	8005304 <_strtod_l+0xac>
 800529a:	2a00      	cmp	r2, #0
 800529c:	d03e      	beq.n	800531c <_strtod_l+0xc4>
 800529e:	2300      	movs	r3, #0
 80052a0:	930a      	str	r3, [sp, #40]	; 0x28
 80052a2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80052a4:	7833      	ldrb	r3, [r6, #0]
 80052a6:	2b30      	cmp	r3, #48	; 0x30
 80052a8:	f040 80b0 	bne.w	800540c <_strtod_l+0x1b4>
 80052ac:	7873      	ldrb	r3, [r6, #1]
 80052ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80052b2:	2b58      	cmp	r3, #88	; 0x58
 80052b4:	d168      	bne.n	8005388 <_strtod_l+0x130>
 80052b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052b8:	9301      	str	r3, [sp, #4]
 80052ba:	ab18      	add	r3, sp, #96	; 0x60
 80052bc:	9702      	str	r7, [sp, #8]
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	4a8d      	ldr	r2, [pc, #564]	; (80054f8 <_strtod_l+0x2a0>)
 80052c2:	ab19      	add	r3, sp, #100	; 0x64
 80052c4:	a917      	add	r1, sp, #92	; 0x5c
 80052c6:	4620      	mov	r0, r4
 80052c8:	f000 ffa8 	bl	800621c <__gethex>
 80052cc:	f010 0707 	ands.w	r7, r0, #7
 80052d0:	4605      	mov	r5, r0
 80052d2:	d005      	beq.n	80052e0 <_strtod_l+0x88>
 80052d4:	2f06      	cmp	r7, #6
 80052d6:	d12c      	bne.n	8005332 <_strtod_l+0xda>
 80052d8:	3601      	adds	r6, #1
 80052da:	2300      	movs	r3, #0
 80052dc:	9617      	str	r6, [sp, #92]	; 0x5c
 80052de:	930a      	str	r3, [sp, #40]	; 0x28
 80052e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f040 8590 	bne.w	8005e08 <_strtod_l+0xbb0>
 80052e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052ea:	b1eb      	cbz	r3, 8005328 <_strtod_l+0xd0>
 80052ec:	4652      	mov	r2, sl
 80052ee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80052f2:	ec43 2b10 	vmov	d0, r2, r3
 80052f6:	b01d      	add	sp, #116	; 0x74
 80052f8:	ecbd 8b02 	vpop	{d8}
 80052fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005300:	2a20      	cmp	r2, #32
 8005302:	d1cc      	bne.n	800529e <_strtod_l+0x46>
 8005304:	3301      	adds	r3, #1
 8005306:	9317      	str	r3, [sp, #92]	; 0x5c
 8005308:	e7be      	b.n	8005288 <_strtod_l+0x30>
 800530a:	2a2d      	cmp	r2, #45	; 0x2d
 800530c:	d1c7      	bne.n	800529e <_strtod_l+0x46>
 800530e:	2201      	movs	r2, #1
 8005310:	920a      	str	r2, [sp, #40]	; 0x28
 8005312:	1c5a      	adds	r2, r3, #1
 8005314:	9217      	str	r2, [sp, #92]	; 0x5c
 8005316:	785b      	ldrb	r3, [r3, #1]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1c2      	bne.n	80052a2 <_strtod_l+0x4a>
 800531c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800531e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005322:	2b00      	cmp	r3, #0
 8005324:	f040 856e 	bne.w	8005e04 <_strtod_l+0xbac>
 8005328:	4652      	mov	r2, sl
 800532a:	465b      	mov	r3, fp
 800532c:	e7e1      	b.n	80052f2 <_strtod_l+0x9a>
 800532e:	2200      	movs	r2, #0
 8005330:	e7ee      	b.n	8005310 <_strtod_l+0xb8>
 8005332:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005334:	b13a      	cbz	r2, 8005346 <_strtod_l+0xee>
 8005336:	2135      	movs	r1, #53	; 0x35
 8005338:	a81a      	add	r0, sp, #104	; 0x68
 800533a:	f001 ff12 	bl	8007162 <__copybits>
 800533e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005340:	4620      	mov	r0, r4
 8005342:	f001 fad1 	bl	80068e8 <_Bfree>
 8005346:	3f01      	subs	r7, #1
 8005348:	2f04      	cmp	r7, #4
 800534a:	d806      	bhi.n	800535a <_strtod_l+0x102>
 800534c:	e8df f007 	tbb	[pc, r7]
 8005350:	1714030a 	.word	0x1714030a
 8005354:	0a          	.byte	0x0a
 8005355:	00          	.byte	0x00
 8005356:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800535a:	0728      	lsls	r0, r5, #28
 800535c:	d5c0      	bpl.n	80052e0 <_strtod_l+0x88>
 800535e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005362:	e7bd      	b.n	80052e0 <_strtod_l+0x88>
 8005364:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005368:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800536a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800536e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005372:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005376:	e7f0      	b.n	800535a <_strtod_l+0x102>
 8005378:	f8df b180 	ldr.w	fp, [pc, #384]	; 80054fc <_strtod_l+0x2a4>
 800537c:	e7ed      	b.n	800535a <_strtod_l+0x102>
 800537e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005382:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005386:	e7e8      	b.n	800535a <_strtod_l+0x102>
 8005388:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	9217      	str	r2, [sp, #92]	; 0x5c
 800538e:	785b      	ldrb	r3, [r3, #1]
 8005390:	2b30      	cmp	r3, #48	; 0x30
 8005392:	d0f9      	beq.n	8005388 <_strtod_l+0x130>
 8005394:	2b00      	cmp	r3, #0
 8005396:	d0a3      	beq.n	80052e0 <_strtod_l+0x88>
 8005398:	2301      	movs	r3, #1
 800539a:	f04f 0900 	mov.w	r9, #0
 800539e:	9304      	str	r3, [sp, #16]
 80053a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80053a2:	9308      	str	r3, [sp, #32]
 80053a4:	f8cd 901c 	str.w	r9, [sp, #28]
 80053a8:	464f      	mov	r7, r9
 80053aa:	220a      	movs	r2, #10
 80053ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80053ae:	7806      	ldrb	r6, [r0, #0]
 80053b0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80053b4:	b2d9      	uxtb	r1, r3
 80053b6:	2909      	cmp	r1, #9
 80053b8:	d92a      	bls.n	8005410 <_strtod_l+0x1b8>
 80053ba:	9905      	ldr	r1, [sp, #20]
 80053bc:	462a      	mov	r2, r5
 80053be:	f002 fb81 	bl	8007ac4 <strncmp>
 80053c2:	b398      	cbz	r0, 800542c <_strtod_l+0x1d4>
 80053c4:	2000      	movs	r0, #0
 80053c6:	4632      	mov	r2, r6
 80053c8:	463d      	mov	r5, r7
 80053ca:	9005      	str	r0, [sp, #20]
 80053cc:	4603      	mov	r3, r0
 80053ce:	2a65      	cmp	r2, #101	; 0x65
 80053d0:	d001      	beq.n	80053d6 <_strtod_l+0x17e>
 80053d2:	2a45      	cmp	r2, #69	; 0x45
 80053d4:	d118      	bne.n	8005408 <_strtod_l+0x1b0>
 80053d6:	b91d      	cbnz	r5, 80053e0 <_strtod_l+0x188>
 80053d8:	9a04      	ldr	r2, [sp, #16]
 80053da:	4302      	orrs	r2, r0
 80053dc:	d09e      	beq.n	800531c <_strtod_l+0xc4>
 80053de:	2500      	movs	r5, #0
 80053e0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80053e4:	f108 0201 	add.w	r2, r8, #1
 80053e8:	9217      	str	r2, [sp, #92]	; 0x5c
 80053ea:	f898 2001 	ldrb.w	r2, [r8, #1]
 80053ee:	2a2b      	cmp	r2, #43	; 0x2b
 80053f0:	d075      	beq.n	80054de <_strtod_l+0x286>
 80053f2:	2a2d      	cmp	r2, #45	; 0x2d
 80053f4:	d07b      	beq.n	80054ee <_strtod_l+0x296>
 80053f6:	f04f 0c00 	mov.w	ip, #0
 80053fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80053fe:	2909      	cmp	r1, #9
 8005400:	f240 8082 	bls.w	8005508 <_strtod_l+0x2b0>
 8005404:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005408:	2600      	movs	r6, #0
 800540a:	e09d      	b.n	8005548 <_strtod_l+0x2f0>
 800540c:	2300      	movs	r3, #0
 800540e:	e7c4      	b.n	800539a <_strtod_l+0x142>
 8005410:	2f08      	cmp	r7, #8
 8005412:	bfd8      	it	le
 8005414:	9907      	ldrle	r1, [sp, #28]
 8005416:	f100 0001 	add.w	r0, r0, #1
 800541a:	bfda      	itte	le
 800541c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005420:	9307      	strle	r3, [sp, #28]
 8005422:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005426:	3701      	adds	r7, #1
 8005428:	9017      	str	r0, [sp, #92]	; 0x5c
 800542a:	e7bf      	b.n	80053ac <_strtod_l+0x154>
 800542c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800542e:	195a      	adds	r2, r3, r5
 8005430:	9217      	str	r2, [sp, #92]	; 0x5c
 8005432:	5d5a      	ldrb	r2, [r3, r5]
 8005434:	2f00      	cmp	r7, #0
 8005436:	d037      	beq.n	80054a8 <_strtod_l+0x250>
 8005438:	9005      	str	r0, [sp, #20]
 800543a:	463d      	mov	r5, r7
 800543c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005440:	2b09      	cmp	r3, #9
 8005442:	d912      	bls.n	800546a <_strtod_l+0x212>
 8005444:	2301      	movs	r3, #1
 8005446:	e7c2      	b.n	80053ce <_strtod_l+0x176>
 8005448:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	9217      	str	r2, [sp, #92]	; 0x5c
 800544e:	785a      	ldrb	r2, [r3, #1]
 8005450:	3001      	adds	r0, #1
 8005452:	2a30      	cmp	r2, #48	; 0x30
 8005454:	d0f8      	beq.n	8005448 <_strtod_l+0x1f0>
 8005456:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800545a:	2b08      	cmp	r3, #8
 800545c:	f200 84d9 	bhi.w	8005e12 <_strtod_l+0xbba>
 8005460:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005462:	9005      	str	r0, [sp, #20]
 8005464:	2000      	movs	r0, #0
 8005466:	9308      	str	r3, [sp, #32]
 8005468:	4605      	mov	r5, r0
 800546a:	3a30      	subs	r2, #48	; 0x30
 800546c:	f100 0301 	add.w	r3, r0, #1
 8005470:	d014      	beq.n	800549c <_strtod_l+0x244>
 8005472:	9905      	ldr	r1, [sp, #20]
 8005474:	4419      	add	r1, r3
 8005476:	9105      	str	r1, [sp, #20]
 8005478:	462b      	mov	r3, r5
 800547a:	eb00 0e05 	add.w	lr, r0, r5
 800547e:	210a      	movs	r1, #10
 8005480:	4573      	cmp	r3, lr
 8005482:	d113      	bne.n	80054ac <_strtod_l+0x254>
 8005484:	182b      	adds	r3, r5, r0
 8005486:	2b08      	cmp	r3, #8
 8005488:	f105 0501 	add.w	r5, r5, #1
 800548c:	4405      	add	r5, r0
 800548e:	dc1c      	bgt.n	80054ca <_strtod_l+0x272>
 8005490:	9907      	ldr	r1, [sp, #28]
 8005492:	230a      	movs	r3, #10
 8005494:	fb03 2301 	mla	r3, r3, r1, r2
 8005498:	9307      	str	r3, [sp, #28]
 800549a:	2300      	movs	r3, #0
 800549c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800549e:	1c51      	adds	r1, r2, #1
 80054a0:	9117      	str	r1, [sp, #92]	; 0x5c
 80054a2:	7852      	ldrb	r2, [r2, #1]
 80054a4:	4618      	mov	r0, r3
 80054a6:	e7c9      	b.n	800543c <_strtod_l+0x1e4>
 80054a8:	4638      	mov	r0, r7
 80054aa:	e7d2      	b.n	8005452 <_strtod_l+0x1fa>
 80054ac:	2b08      	cmp	r3, #8
 80054ae:	dc04      	bgt.n	80054ba <_strtod_l+0x262>
 80054b0:	9e07      	ldr	r6, [sp, #28]
 80054b2:	434e      	muls	r6, r1
 80054b4:	9607      	str	r6, [sp, #28]
 80054b6:	3301      	adds	r3, #1
 80054b8:	e7e2      	b.n	8005480 <_strtod_l+0x228>
 80054ba:	f103 0c01 	add.w	ip, r3, #1
 80054be:	f1bc 0f10 	cmp.w	ip, #16
 80054c2:	bfd8      	it	le
 80054c4:	fb01 f909 	mulle.w	r9, r1, r9
 80054c8:	e7f5      	b.n	80054b6 <_strtod_l+0x25e>
 80054ca:	2d10      	cmp	r5, #16
 80054cc:	bfdc      	itt	le
 80054ce:	230a      	movle	r3, #10
 80054d0:	fb03 2909 	mlale	r9, r3, r9, r2
 80054d4:	e7e1      	b.n	800549a <_strtod_l+0x242>
 80054d6:	2300      	movs	r3, #0
 80054d8:	9305      	str	r3, [sp, #20]
 80054da:	2301      	movs	r3, #1
 80054dc:	e77c      	b.n	80053d8 <_strtod_l+0x180>
 80054de:	f04f 0c00 	mov.w	ip, #0
 80054e2:	f108 0202 	add.w	r2, r8, #2
 80054e6:	9217      	str	r2, [sp, #92]	; 0x5c
 80054e8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80054ec:	e785      	b.n	80053fa <_strtod_l+0x1a2>
 80054ee:	f04f 0c01 	mov.w	ip, #1
 80054f2:	e7f6      	b.n	80054e2 <_strtod_l+0x28a>
 80054f4:	08008698 	.word	0x08008698
 80054f8:	08008420 	.word	0x08008420
 80054fc:	7ff00000 	.word	0x7ff00000
 8005500:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005502:	1c51      	adds	r1, r2, #1
 8005504:	9117      	str	r1, [sp, #92]	; 0x5c
 8005506:	7852      	ldrb	r2, [r2, #1]
 8005508:	2a30      	cmp	r2, #48	; 0x30
 800550a:	d0f9      	beq.n	8005500 <_strtod_l+0x2a8>
 800550c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005510:	2908      	cmp	r1, #8
 8005512:	f63f af79 	bhi.w	8005408 <_strtod_l+0x1b0>
 8005516:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800551a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800551c:	9206      	str	r2, [sp, #24]
 800551e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005520:	1c51      	adds	r1, r2, #1
 8005522:	9117      	str	r1, [sp, #92]	; 0x5c
 8005524:	7852      	ldrb	r2, [r2, #1]
 8005526:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800552a:	2e09      	cmp	r6, #9
 800552c:	d937      	bls.n	800559e <_strtod_l+0x346>
 800552e:	9e06      	ldr	r6, [sp, #24]
 8005530:	1b89      	subs	r1, r1, r6
 8005532:	2908      	cmp	r1, #8
 8005534:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005538:	dc02      	bgt.n	8005540 <_strtod_l+0x2e8>
 800553a:	4576      	cmp	r6, lr
 800553c:	bfa8      	it	ge
 800553e:	4676      	movge	r6, lr
 8005540:	f1bc 0f00 	cmp.w	ip, #0
 8005544:	d000      	beq.n	8005548 <_strtod_l+0x2f0>
 8005546:	4276      	negs	r6, r6
 8005548:	2d00      	cmp	r5, #0
 800554a:	d14d      	bne.n	80055e8 <_strtod_l+0x390>
 800554c:	9904      	ldr	r1, [sp, #16]
 800554e:	4301      	orrs	r1, r0
 8005550:	f47f aec6 	bne.w	80052e0 <_strtod_l+0x88>
 8005554:	2b00      	cmp	r3, #0
 8005556:	f47f aee1 	bne.w	800531c <_strtod_l+0xc4>
 800555a:	2a69      	cmp	r2, #105	; 0x69
 800555c:	d027      	beq.n	80055ae <_strtod_l+0x356>
 800555e:	dc24      	bgt.n	80055aa <_strtod_l+0x352>
 8005560:	2a49      	cmp	r2, #73	; 0x49
 8005562:	d024      	beq.n	80055ae <_strtod_l+0x356>
 8005564:	2a4e      	cmp	r2, #78	; 0x4e
 8005566:	f47f aed9 	bne.w	800531c <_strtod_l+0xc4>
 800556a:	499f      	ldr	r1, [pc, #636]	; (80057e8 <_strtod_l+0x590>)
 800556c:	a817      	add	r0, sp, #92	; 0x5c
 800556e:	f001 f8ad 	bl	80066cc <__match>
 8005572:	2800      	cmp	r0, #0
 8005574:	f43f aed2 	beq.w	800531c <_strtod_l+0xc4>
 8005578:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	2b28      	cmp	r3, #40	; 0x28
 800557e:	d12d      	bne.n	80055dc <_strtod_l+0x384>
 8005580:	499a      	ldr	r1, [pc, #616]	; (80057ec <_strtod_l+0x594>)
 8005582:	aa1a      	add	r2, sp, #104	; 0x68
 8005584:	a817      	add	r0, sp, #92	; 0x5c
 8005586:	f001 f8b5 	bl	80066f4 <__hexnan>
 800558a:	2805      	cmp	r0, #5
 800558c:	d126      	bne.n	80055dc <_strtod_l+0x384>
 800558e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005590:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005594:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005598:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800559c:	e6a0      	b.n	80052e0 <_strtod_l+0x88>
 800559e:	210a      	movs	r1, #10
 80055a0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80055a4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80055a8:	e7b9      	b.n	800551e <_strtod_l+0x2c6>
 80055aa:	2a6e      	cmp	r2, #110	; 0x6e
 80055ac:	e7db      	b.n	8005566 <_strtod_l+0x30e>
 80055ae:	4990      	ldr	r1, [pc, #576]	; (80057f0 <_strtod_l+0x598>)
 80055b0:	a817      	add	r0, sp, #92	; 0x5c
 80055b2:	f001 f88b 	bl	80066cc <__match>
 80055b6:	2800      	cmp	r0, #0
 80055b8:	f43f aeb0 	beq.w	800531c <_strtod_l+0xc4>
 80055bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80055be:	498d      	ldr	r1, [pc, #564]	; (80057f4 <_strtod_l+0x59c>)
 80055c0:	3b01      	subs	r3, #1
 80055c2:	a817      	add	r0, sp, #92	; 0x5c
 80055c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80055c6:	f001 f881 	bl	80066cc <__match>
 80055ca:	b910      	cbnz	r0, 80055d2 <_strtod_l+0x37a>
 80055cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80055ce:	3301      	adds	r3, #1
 80055d0:	9317      	str	r3, [sp, #92]	; 0x5c
 80055d2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005804 <_strtod_l+0x5ac>
 80055d6:	f04f 0a00 	mov.w	sl, #0
 80055da:	e681      	b.n	80052e0 <_strtod_l+0x88>
 80055dc:	4886      	ldr	r0, [pc, #536]	; (80057f8 <_strtod_l+0x5a0>)
 80055de:	f002 fa63 	bl	8007aa8 <nan>
 80055e2:	ec5b ab10 	vmov	sl, fp, d0
 80055e6:	e67b      	b.n	80052e0 <_strtod_l+0x88>
 80055e8:	9b05      	ldr	r3, [sp, #20]
 80055ea:	9807      	ldr	r0, [sp, #28]
 80055ec:	1af3      	subs	r3, r6, r3
 80055ee:	2f00      	cmp	r7, #0
 80055f0:	bf08      	it	eq
 80055f2:	462f      	moveq	r7, r5
 80055f4:	2d10      	cmp	r5, #16
 80055f6:	9306      	str	r3, [sp, #24]
 80055f8:	46a8      	mov	r8, r5
 80055fa:	bfa8      	it	ge
 80055fc:	f04f 0810 	movge.w	r8, #16
 8005600:	f7fa ff88 	bl	8000514 <__aeabi_ui2d>
 8005604:	2d09      	cmp	r5, #9
 8005606:	4682      	mov	sl, r0
 8005608:	468b      	mov	fp, r1
 800560a:	dd13      	ble.n	8005634 <_strtod_l+0x3dc>
 800560c:	4b7b      	ldr	r3, [pc, #492]	; (80057fc <_strtod_l+0x5a4>)
 800560e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005612:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005616:	f7fa fff7 	bl	8000608 <__aeabi_dmul>
 800561a:	4682      	mov	sl, r0
 800561c:	4648      	mov	r0, r9
 800561e:	468b      	mov	fp, r1
 8005620:	f7fa ff78 	bl	8000514 <__aeabi_ui2d>
 8005624:	4602      	mov	r2, r0
 8005626:	460b      	mov	r3, r1
 8005628:	4650      	mov	r0, sl
 800562a:	4659      	mov	r1, fp
 800562c:	f7fa fe36 	bl	800029c <__adddf3>
 8005630:	4682      	mov	sl, r0
 8005632:	468b      	mov	fp, r1
 8005634:	2d0f      	cmp	r5, #15
 8005636:	dc38      	bgt.n	80056aa <_strtod_l+0x452>
 8005638:	9b06      	ldr	r3, [sp, #24]
 800563a:	2b00      	cmp	r3, #0
 800563c:	f43f ae50 	beq.w	80052e0 <_strtod_l+0x88>
 8005640:	dd24      	ble.n	800568c <_strtod_l+0x434>
 8005642:	2b16      	cmp	r3, #22
 8005644:	dc0b      	bgt.n	800565e <_strtod_l+0x406>
 8005646:	496d      	ldr	r1, [pc, #436]	; (80057fc <_strtod_l+0x5a4>)
 8005648:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800564c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005650:	4652      	mov	r2, sl
 8005652:	465b      	mov	r3, fp
 8005654:	f7fa ffd8 	bl	8000608 <__aeabi_dmul>
 8005658:	4682      	mov	sl, r0
 800565a:	468b      	mov	fp, r1
 800565c:	e640      	b.n	80052e0 <_strtod_l+0x88>
 800565e:	9a06      	ldr	r2, [sp, #24]
 8005660:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005664:	4293      	cmp	r3, r2
 8005666:	db20      	blt.n	80056aa <_strtod_l+0x452>
 8005668:	4c64      	ldr	r4, [pc, #400]	; (80057fc <_strtod_l+0x5a4>)
 800566a:	f1c5 050f 	rsb	r5, r5, #15
 800566e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005672:	4652      	mov	r2, sl
 8005674:	465b      	mov	r3, fp
 8005676:	e9d1 0100 	ldrd	r0, r1, [r1]
 800567a:	f7fa ffc5 	bl	8000608 <__aeabi_dmul>
 800567e:	9b06      	ldr	r3, [sp, #24]
 8005680:	1b5d      	subs	r5, r3, r5
 8005682:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005686:	e9d4 2300 	ldrd	r2, r3, [r4]
 800568a:	e7e3      	b.n	8005654 <_strtod_l+0x3fc>
 800568c:	9b06      	ldr	r3, [sp, #24]
 800568e:	3316      	adds	r3, #22
 8005690:	db0b      	blt.n	80056aa <_strtod_l+0x452>
 8005692:	9b05      	ldr	r3, [sp, #20]
 8005694:	1b9e      	subs	r6, r3, r6
 8005696:	4b59      	ldr	r3, [pc, #356]	; (80057fc <_strtod_l+0x5a4>)
 8005698:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800569c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80056a0:	4650      	mov	r0, sl
 80056a2:	4659      	mov	r1, fp
 80056a4:	f7fb f8da 	bl	800085c <__aeabi_ddiv>
 80056a8:	e7d6      	b.n	8005658 <_strtod_l+0x400>
 80056aa:	9b06      	ldr	r3, [sp, #24]
 80056ac:	eba5 0808 	sub.w	r8, r5, r8
 80056b0:	4498      	add	r8, r3
 80056b2:	f1b8 0f00 	cmp.w	r8, #0
 80056b6:	dd74      	ble.n	80057a2 <_strtod_l+0x54a>
 80056b8:	f018 030f 	ands.w	r3, r8, #15
 80056bc:	d00a      	beq.n	80056d4 <_strtod_l+0x47c>
 80056be:	494f      	ldr	r1, [pc, #316]	; (80057fc <_strtod_l+0x5a4>)
 80056c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80056c4:	4652      	mov	r2, sl
 80056c6:	465b      	mov	r3, fp
 80056c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056cc:	f7fa ff9c 	bl	8000608 <__aeabi_dmul>
 80056d0:	4682      	mov	sl, r0
 80056d2:	468b      	mov	fp, r1
 80056d4:	f038 080f 	bics.w	r8, r8, #15
 80056d8:	d04f      	beq.n	800577a <_strtod_l+0x522>
 80056da:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80056de:	dd22      	ble.n	8005726 <_strtod_l+0x4ce>
 80056e0:	2500      	movs	r5, #0
 80056e2:	462e      	mov	r6, r5
 80056e4:	9507      	str	r5, [sp, #28]
 80056e6:	9505      	str	r5, [sp, #20]
 80056e8:	2322      	movs	r3, #34	; 0x22
 80056ea:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005804 <_strtod_l+0x5ac>
 80056ee:	6023      	str	r3, [r4, #0]
 80056f0:	f04f 0a00 	mov.w	sl, #0
 80056f4:	9b07      	ldr	r3, [sp, #28]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f43f adf2 	beq.w	80052e0 <_strtod_l+0x88>
 80056fc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80056fe:	4620      	mov	r0, r4
 8005700:	f001 f8f2 	bl	80068e8 <_Bfree>
 8005704:	9905      	ldr	r1, [sp, #20]
 8005706:	4620      	mov	r0, r4
 8005708:	f001 f8ee 	bl	80068e8 <_Bfree>
 800570c:	4631      	mov	r1, r6
 800570e:	4620      	mov	r0, r4
 8005710:	f001 f8ea 	bl	80068e8 <_Bfree>
 8005714:	9907      	ldr	r1, [sp, #28]
 8005716:	4620      	mov	r0, r4
 8005718:	f001 f8e6 	bl	80068e8 <_Bfree>
 800571c:	4629      	mov	r1, r5
 800571e:	4620      	mov	r0, r4
 8005720:	f001 f8e2 	bl	80068e8 <_Bfree>
 8005724:	e5dc      	b.n	80052e0 <_strtod_l+0x88>
 8005726:	4b36      	ldr	r3, [pc, #216]	; (8005800 <_strtod_l+0x5a8>)
 8005728:	9304      	str	r3, [sp, #16]
 800572a:	2300      	movs	r3, #0
 800572c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005730:	4650      	mov	r0, sl
 8005732:	4659      	mov	r1, fp
 8005734:	4699      	mov	r9, r3
 8005736:	f1b8 0f01 	cmp.w	r8, #1
 800573a:	dc21      	bgt.n	8005780 <_strtod_l+0x528>
 800573c:	b10b      	cbz	r3, 8005742 <_strtod_l+0x4ea>
 800573e:	4682      	mov	sl, r0
 8005740:	468b      	mov	fp, r1
 8005742:	4b2f      	ldr	r3, [pc, #188]	; (8005800 <_strtod_l+0x5a8>)
 8005744:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005748:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800574c:	4652      	mov	r2, sl
 800574e:	465b      	mov	r3, fp
 8005750:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005754:	f7fa ff58 	bl	8000608 <__aeabi_dmul>
 8005758:	4b2a      	ldr	r3, [pc, #168]	; (8005804 <_strtod_l+0x5ac>)
 800575a:	460a      	mov	r2, r1
 800575c:	400b      	ands	r3, r1
 800575e:	492a      	ldr	r1, [pc, #168]	; (8005808 <_strtod_l+0x5b0>)
 8005760:	428b      	cmp	r3, r1
 8005762:	4682      	mov	sl, r0
 8005764:	d8bc      	bhi.n	80056e0 <_strtod_l+0x488>
 8005766:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800576a:	428b      	cmp	r3, r1
 800576c:	bf86      	itte	hi
 800576e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800580c <_strtod_l+0x5b4>
 8005772:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8005776:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800577a:	2300      	movs	r3, #0
 800577c:	9304      	str	r3, [sp, #16]
 800577e:	e084      	b.n	800588a <_strtod_l+0x632>
 8005780:	f018 0f01 	tst.w	r8, #1
 8005784:	d005      	beq.n	8005792 <_strtod_l+0x53a>
 8005786:	9b04      	ldr	r3, [sp, #16]
 8005788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578c:	f7fa ff3c 	bl	8000608 <__aeabi_dmul>
 8005790:	2301      	movs	r3, #1
 8005792:	9a04      	ldr	r2, [sp, #16]
 8005794:	3208      	adds	r2, #8
 8005796:	f109 0901 	add.w	r9, r9, #1
 800579a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800579e:	9204      	str	r2, [sp, #16]
 80057a0:	e7c9      	b.n	8005736 <_strtod_l+0x4de>
 80057a2:	d0ea      	beq.n	800577a <_strtod_l+0x522>
 80057a4:	f1c8 0800 	rsb	r8, r8, #0
 80057a8:	f018 020f 	ands.w	r2, r8, #15
 80057ac:	d00a      	beq.n	80057c4 <_strtod_l+0x56c>
 80057ae:	4b13      	ldr	r3, [pc, #76]	; (80057fc <_strtod_l+0x5a4>)
 80057b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057b4:	4650      	mov	r0, sl
 80057b6:	4659      	mov	r1, fp
 80057b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057bc:	f7fb f84e 	bl	800085c <__aeabi_ddiv>
 80057c0:	4682      	mov	sl, r0
 80057c2:	468b      	mov	fp, r1
 80057c4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80057c8:	d0d7      	beq.n	800577a <_strtod_l+0x522>
 80057ca:	f1b8 0f1f 	cmp.w	r8, #31
 80057ce:	dd1f      	ble.n	8005810 <_strtod_l+0x5b8>
 80057d0:	2500      	movs	r5, #0
 80057d2:	462e      	mov	r6, r5
 80057d4:	9507      	str	r5, [sp, #28]
 80057d6:	9505      	str	r5, [sp, #20]
 80057d8:	2322      	movs	r3, #34	; 0x22
 80057da:	f04f 0a00 	mov.w	sl, #0
 80057de:	f04f 0b00 	mov.w	fp, #0
 80057e2:	6023      	str	r3, [r4, #0]
 80057e4:	e786      	b.n	80056f4 <_strtod_l+0x49c>
 80057e6:	bf00      	nop
 80057e8:	0800841d 	.word	0x0800841d
 80057ec:	08008434 	.word	0x08008434
 80057f0:	08008414 	.word	0x08008414
 80057f4:	08008417 	.word	0x08008417
 80057f8:	0800851f 	.word	0x0800851f
 80057fc:	08008730 	.word	0x08008730
 8005800:	08008708 	.word	0x08008708
 8005804:	7ff00000 	.word	0x7ff00000
 8005808:	7ca00000 	.word	0x7ca00000
 800580c:	7fefffff 	.word	0x7fefffff
 8005810:	f018 0310 	ands.w	r3, r8, #16
 8005814:	bf18      	it	ne
 8005816:	236a      	movne	r3, #106	; 0x6a
 8005818:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8005bc8 <_strtod_l+0x970>
 800581c:	9304      	str	r3, [sp, #16]
 800581e:	4650      	mov	r0, sl
 8005820:	4659      	mov	r1, fp
 8005822:	2300      	movs	r3, #0
 8005824:	f018 0f01 	tst.w	r8, #1
 8005828:	d004      	beq.n	8005834 <_strtod_l+0x5dc>
 800582a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800582e:	f7fa feeb 	bl	8000608 <__aeabi_dmul>
 8005832:	2301      	movs	r3, #1
 8005834:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005838:	f109 0908 	add.w	r9, r9, #8
 800583c:	d1f2      	bne.n	8005824 <_strtod_l+0x5cc>
 800583e:	b10b      	cbz	r3, 8005844 <_strtod_l+0x5ec>
 8005840:	4682      	mov	sl, r0
 8005842:	468b      	mov	fp, r1
 8005844:	9b04      	ldr	r3, [sp, #16]
 8005846:	b1c3      	cbz	r3, 800587a <_strtod_l+0x622>
 8005848:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800584c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005850:	2b00      	cmp	r3, #0
 8005852:	4659      	mov	r1, fp
 8005854:	dd11      	ble.n	800587a <_strtod_l+0x622>
 8005856:	2b1f      	cmp	r3, #31
 8005858:	f340 8124 	ble.w	8005aa4 <_strtod_l+0x84c>
 800585c:	2b34      	cmp	r3, #52	; 0x34
 800585e:	bfde      	ittt	le
 8005860:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005864:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8005868:	fa03 f202 	lslle.w	r2, r3, r2
 800586c:	f04f 0a00 	mov.w	sl, #0
 8005870:	bfcc      	ite	gt
 8005872:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005876:	ea02 0b01 	andle.w	fp, r2, r1
 800587a:	2200      	movs	r2, #0
 800587c:	2300      	movs	r3, #0
 800587e:	4650      	mov	r0, sl
 8005880:	4659      	mov	r1, fp
 8005882:	f7fb f929 	bl	8000ad8 <__aeabi_dcmpeq>
 8005886:	2800      	cmp	r0, #0
 8005888:	d1a2      	bne.n	80057d0 <_strtod_l+0x578>
 800588a:	9b07      	ldr	r3, [sp, #28]
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	9908      	ldr	r1, [sp, #32]
 8005890:	462b      	mov	r3, r5
 8005892:	463a      	mov	r2, r7
 8005894:	4620      	mov	r0, r4
 8005896:	f001 f88f 	bl	80069b8 <__s2b>
 800589a:	9007      	str	r0, [sp, #28]
 800589c:	2800      	cmp	r0, #0
 800589e:	f43f af1f 	beq.w	80056e0 <_strtod_l+0x488>
 80058a2:	9b05      	ldr	r3, [sp, #20]
 80058a4:	1b9e      	subs	r6, r3, r6
 80058a6:	9b06      	ldr	r3, [sp, #24]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	bfb4      	ite	lt
 80058ac:	4633      	movlt	r3, r6
 80058ae:	2300      	movge	r3, #0
 80058b0:	930c      	str	r3, [sp, #48]	; 0x30
 80058b2:	9b06      	ldr	r3, [sp, #24]
 80058b4:	2500      	movs	r5, #0
 80058b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80058ba:	9312      	str	r3, [sp, #72]	; 0x48
 80058bc:	462e      	mov	r6, r5
 80058be:	9b07      	ldr	r3, [sp, #28]
 80058c0:	4620      	mov	r0, r4
 80058c2:	6859      	ldr	r1, [r3, #4]
 80058c4:	f000 ffd0 	bl	8006868 <_Balloc>
 80058c8:	9005      	str	r0, [sp, #20]
 80058ca:	2800      	cmp	r0, #0
 80058cc:	f43f af0c 	beq.w	80056e8 <_strtod_l+0x490>
 80058d0:	9b07      	ldr	r3, [sp, #28]
 80058d2:	691a      	ldr	r2, [r3, #16]
 80058d4:	3202      	adds	r2, #2
 80058d6:	f103 010c 	add.w	r1, r3, #12
 80058da:	0092      	lsls	r2, r2, #2
 80058dc:	300c      	adds	r0, #12
 80058de:	f7ff fb5b 	bl	8004f98 <memcpy>
 80058e2:	ec4b ab10 	vmov	d0, sl, fp
 80058e6:	aa1a      	add	r2, sp, #104	; 0x68
 80058e8:	a919      	add	r1, sp, #100	; 0x64
 80058ea:	4620      	mov	r0, r4
 80058ec:	f001 fbaa 	bl	8007044 <__d2b>
 80058f0:	ec4b ab18 	vmov	d8, sl, fp
 80058f4:	9018      	str	r0, [sp, #96]	; 0x60
 80058f6:	2800      	cmp	r0, #0
 80058f8:	f43f aef6 	beq.w	80056e8 <_strtod_l+0x490>
 80058fc:	2101      	movs	r1, #1
 80058fe:	4620      	mov	r0, r4
 8005900:	f001 f8f4 	bl	8006aec <__i2b>
 8005904:	4606      	mov	r6, r0
 8005906:	2800      	cmp	r0, #0
 8005908:	f43f aeee 	beq.w	80056e8 <_strtod_l+0x490>
 800590c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800590e:	9904      	ldr	r1, [sp, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	bfab      	itete	ge
 8005914:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005916:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005918:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800591a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800591e:	bfac      	ite	ge
 8005920:	eb03 0902 	addge.w	r9, r3, r2
 8005924:	1ad7      	sublt	r7, r2, r3
 8005926:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005928:	eba3 0801 	sub.w	r8, r3, r1
 800592c:	4490      	add	r8, r2
 800592e:	4ba1      	ldr	r3, [pc, #644]	; (8005bb4 <_strtod_l+0x95c>)
 8005930:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005934:	4598      	cmp	r8, r3
 8005936:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800593a:	f280 80c7 	bge.w	8005acc <_strtod_l+0x874>
 800593e:	eba3 0308 	sub.w	r3, r3, r8
 8005942:	2b1f      	cmp	r3, #31
 8005944:	eba2 0203 	sub.w	r2, r2, r3
 8005948:	f04f 0101 	mov.w	r1, #1
 800594c:	f300 80b1 	bgt.w	8005ab2 <_strtod_l+0x85a>
 8005950:	fa01 f303 	lsl.w	r3, r1, r3
 8005954:	930d      	str	r3, [sp, #52]	; 0x34
 8005956:	2300      	movs	r3, #0
 8005958:	9308      	str	r3, [sp, #32]
 800595a:	eb09 0802 	add.w	r8, r9, r2
 800595e:	9b04      	ldr	r3, [sp, #16]
 8005960:	45c1      	cmp	r9, r8
 8005962:	4417      	add	r7, r2
 8005964:	441f      	add	r7, r3
 8005966:	464b      	mov	r3, r9
 8005968:	bfa8      	it	ge
 800596a:	4643      	movge	r3, r8
 800596c:	42bb      	cmp	r3, r7
 800596e:	bfa8      	it	ge
 8005970:	463b      	movge	r3, r7
 8005972:	2b00      	cmp	r3, #0
 8005974:	bfc2      	ittt	gt
 8005976:	eba8 0803 	subgt.w	r8, r8, r3
 800597a:	1aff      	subgt	r7, r7, r3
 800597c:	eba9 0903 	subgt.w	r9, r9, r3
 8005980:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005982:	2b00      	cmp	r3, #0
 8005984:	dd17      	ble.n	80059b6 <_strtod_l+0x75e>
 8005986:	4631      	mov	r1, r6
 8005988:	461a      	mov	r2, r3
 800598a:	4620      	mov	r0, r4
 800598c:	f001 f96e 	bl	8006c6c <__pow5mult>
 8005990:	4606      	mov	r6, r0
 8005992:	2800      	cmp	r0, #0
 8005994:	f43f aea8 	beq.w	80056e8 <_strtod_l+0x490>
 8005998:	4601      	mov	r1, r0
 800599a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800599c:	4620      	mov	r0, r4
 800599e:	f001 f8bb 	bl	8006b18 <__multiply>
 80059a2:	900b      	str	r0, [sp, #44]	; 0x2c
 80059a4:	2800      	cmp	r0, #0
 80059a6:	f43f ae9f 	beq.w	80056e8 <_strtod_l+0x490>
 80059aa:	9918      	ldr	r1, [sp, #96]	; 0x60
 80059ac:	4620      	mov	r0, r4
 80059ae:	f000 ff9b 	bl	80068e8 <_Bfree>
 80059b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059b4:	9318      	str	r3, [sp, #96]	; 0x60
 80059b6:	f1b8 0f00 	cmp.w	r8, #0
 80059ba:	f300 808c 	bgt.w	8005ad6 <_strtod_l+0x87e>
 80059be:	9b06      	ldr	r3, [sp, #24]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	dd08      	ble.n	80059d6 <_strtod_l+0x77e>
 80059c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80059c6:	9905      	ldr	r1, [sp, #20]
 80059c8:	4620      	mov	r0, r4
 80059ca:	f001 f94f 	bl	8006c6c <__pow5mult>
 80059ce:	9005      	str	r0, [sp, #20]
 80059d0:	2800      	cmp	r0, #0
 80059d2:	f43f ae89 	beq.w	80056e8 <_strtod_l+0x490>
 80059d6:	2f00      	cmp	r7, #0
 80059d8:	dd08      	ble.n	80059ec <_strtod_l+0x794>
 80059da:	9905      	ldr	r1, [sp, #20]
 80059dc:	463a      	mov	r2, r7
 80059de:	4620      	mov	r0, r4
 80059e0:	f001 f99e 	bl	8006d20 <__lshift>
 80059e4:	9005      	str	r0, [sp, #20]
 80059e6:	2800      	cmp	r0, #0
 80059e8:	f43f ae7e 	beq.w	80056e8 <_strtod_l+0x490>
 80059ec:	f1b9 0f00 	cmp.w	r9, #0
 80059f0:	dd08      	ble.n	8005a04 <_strtod_l+0x7ac>
 80059f2:	4631      	mov	r1, r6
 80059f4:	464a      	mov	r2, r9
 80059f6:	4620      	mov	r0, r4
 80059f8:	f001 f992 	bl	8006d20 <__lshift>
 80059fc:	4606      	mov	r6, r0
 80059fe:	2800      	cmp	r0, #0
 8005a00:	f43f ae72 	beq.w	80056e8 <_strtod_l+0x490>
 8005a04:	9a05      	ldr	r2, [sp, #20]
 8005a06:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005a08:	4620      	mov	r0, r4
 8005a0a:	f001 fa15 	bl	8006e38 <__mdiff>
 8005a0e:	4605      	mov	r5, r0
 8005a10:	2800      	cmp	r0, #0
 8005a12:	f43f ae69 	beq.w	80056e8 <_strtod_l+0x490>
 8005a16:	68c3      	ldr	r3, [r0, #12]
 8005a18:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60c3      	str	r3, [r0, #12]
 8005a1e:	4631      	mov	r1, r6
 8005a20:	f001 f9ee 	bl	8006e00 <__mcmp>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	da60      	bge.n	8005aea <_strtod_l+0x892>
 8005a28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a2a:	ea53 030a 	orrs.w	r3, r3, sl
 8005a2e:	f040 8082 	bne.w	8005b36 <_strtod_l+0x8de>
 8005a32:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d17d      	bne.n	8005b36 <_strtod_l+0x8de>
 8005a3a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005a3e:	0d1b      	lsrs	r3, r3, #20
 8005a40:	051b      	lsls	r3, r3, #20
 8005a42:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005a46:	d976      	bls.n	8005b36 <_strtod_l+0x8de>
 8005a48:	696b      	ldr	r3, [r5, #20]
 8005a4a:	b913      	cbnz	r3, 8005a52 <_strtod_l+0x7fa>
 8005a4c:	692b      	ldr	r3, [r5, #16]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	dd71      	ble.n	8005b36 <_strtod_l+0x8de>
 8005a52:	4629      	mov	r1, r5
 8005a54:	2201      	movs	r2, #1
 8005a56:	4620      	mov	r0, r4
 8005a58:	f001 f962 	bl	8006d20 <__lshift>
 8005a5c:	4631      	mov	r1, r6
 8005a5e:	4605      	mov	r5, r0
 8005a60:	f001 f9ce 	bl	8006e00 <__mcmp>
 8005a64:	2800      	cmp	r0, #0
 8005a66:	dd66      	ble.n	8005b36 <_strtod_l+0x8de>
 8005a68:	9904      	ldr	r1, [sp, #16]
 8005a6a:	4a53      	ldr	r2, [pc, #332]	; (8005bb8 <_strtod_l+0x960>)
 8005a6c:	465b      	mov	r3, fp
 8005a6e:	2900      	cmp	r1, #0
 8005a70:	f000 8081 	beq.w	8005b76 <_strtod_l+0x91e>
 8005a74:	ea02 010b 	and.w	r1, r2, fp
 8005a78:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005a7c:	dc7b      	bgt.n	8005b76 <_strtod_l+0x91e>
 8005a7e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005a82:	f77f aea9 	ble.w	80057d8 <_strtod_l+0x580>
 8005a86:	4b4d      	ldr	r3, [pc, #308]	; (8005bbc <_strtod_l+0x964>)
 8005a88:	4650      	mov	r0, sl
 8005a8a:	4659      	mov	r1, fp
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f7fa fdbb 	bl	8000608 <__aeabi_dmul>
 8005a92:	460b      	mov	r3, r1
 8005a94:	4303      	orrs	r3, r0
 8005a96:	bf08      	it	eq
 8005a98:	2322      	moveq	r3, #34	; 0x22
 8005a9a:	4682      	mov	sl, r0
 8005a9c:	468b      	mov	fp, r1
 8005a9e:	bf08      	it	eq
 8005aa0:	6023      	streq	r3, [r4, #0]
 8005aa2:	e62b      	b.n	80056fc <_strtod_l+0x4a4>
 8005aa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aac:	ea03 0a0a 	and.w	sl, r3, sl
 8005ab0:	e6e3      	b.n	800587a <_strtod_l+0x622>
 8005ab2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005ab6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005aba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005abe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005ac2:	fa01 f308 	lsl.w	r3, r1, r8
 8005ac6:	9308      	str	r3, [sp, #32]
 8005ac8:	910d      	str	r1, [sp, #52]	; 0x34
 8005aca:	e746      	b.n	800595a <_strtod_l+0x702>
 8005acc:	2300      	movs	r3, #0
 8005ace:	9308      	str	r3, [sp, #32]
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	930d      	str	r3, [sp, #52]	; 0x34
 8005ad4:	e741      	b.n	800595a <_strtod_l+0x702>
 8005ad6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005ad8:	4642      	mov	r2, r8
 8005ada:	4620      	mov	r0, r4
 8005adc:	f001 f920 	bl	8006d20 <__lshift>
 8005ae0:	9018      	str	r0, [sp, #96]	; 0x60
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	f47f af6b 	bne.w	80059be <_strtod_l+0x766>
 8005ae8:	e5fe      	b.n	80056e8 <_strtod_l+0x490>
 8005aea:	465f      	mov	r7, fp
 8005aec:	d16e      	bne.n	8005bcc <_strtod_l+0x974>
 8005aee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005af0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005af4:	b342      	cbz	r2, 8005b48 <_strtod_l+0x8f0>
 8005af6:	4a32      	ldr	r2, [pc, #200]	; (8005bc0 <_strtod_l+0x968>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d128      	bne.n	8005b4e <_strtod_l+0x8f6>
 8005afc:	9b04      	ldr	r3, [sp, #16]
 8005afe:	4651      	mov	r1, sl
 8005b00:	b1eb      	cbz	r3, 8005b3e <_strtod_l+0x8e6>
 8005b02:	4b2d      	ldr	r3, [pc, #180]	; (8005bb8 <_strtod_l+0x960>)
 8005b04:	403b      	ands	r3, r7
 8005b06:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005b0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b0e:	d819      	bhi.n	8005b44 <_strtod_l+0x8ec>
 8005b10:	0d1b      	lsrs	r3, r3, #20
 8005b12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005b16:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1a:	4299      	cmp	r1, r3
 8005b1c:	d117      	bne.n	8005b4e <_strtod_l+0x8f6>
 8005b1e:	4b29      	ldr	r3, [pc, #164]	; (8005bc4 <_strtod_l+0x96c>)
 8005b20:	429f      	cmp	r7, r3
 8005b22:	d102      	bne.n	8005b2a <_strtod_l+0x8d2>
 8005b24:	3101      	adds	r1, #1
 8005b26:	f43f addf 	beq.w	80056e8 <_strtod_l+0x490>
 8005b2a:	4b23      	ldr	r3, [pc, #140]	; (8005bb8 <_strtod_l+0x960>)
 8005b2c:	403b      	ands	r3, r7
 8005b2e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005b32:	f04f 0a00 	mov.w	sl, #0
 8005b36:	9b04      	ldr	r3, [sp, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1a4      	bne.n	8005a86 <_strtod_l+0x82e>
 8005b3c:	e5de      	b.n	80056fc <_strtod_l+0x4a4>
 8005b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b42:	e7ea      	b.n	8005b1a <_strtod_l+0x8c2>
 8005b44:	4613      	mov	r3, r2
 8005b46:	e7e8      	b.n	8005b1a <_strtod_l+0x8c2>
 8005b48:	ea53 030a 	orrs.w	r3, r3, sl
 8005b4c:	d08c      	beq.n	8005a68 <_strtod_l+0x810>
 8005b4e:	9b08      	ldr	r3, [sp, #32]
 8005b50:	b1db      	cbz	r3, 8005b8a <_strtod_l+0x932>
 8005b52:	423b      	tst	r3, r7
 8005b54:	d0ef      	beq.n	8005b36 <_strtod_l+0x8de>
 8005b56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b58:	9a04      	ldr	r2, [sp, #16]
 8005b5a:	4650      	mov	r0, sl
 8005b5c:	4659      	mov	r1, fp
 8005b5e:	b1c3      	cbz	r3, 8005b92 <_strtod_l+0x93a>
 8005b60:	f7ff fb5e 	bl	8005220 <sulp>
 8005b64:	4602      	mov	r2, r0
 8005b66:	460b      	mov	r3, r1
 8005b68:	ec51 0b18 	vmov	r0, r1, d8
 8005b6c:	f7fa fb96 	bl	800029c <__adddf3>
 8005b70:	4682      	mov	sl, r0
 8005b72:	468b      	mov	fp, r1
 8005b74:	e7df      	b.n	8005b36 <_strtod_l+0x8de>
 8005b76:	4013      	ands	r3, r2
 8005b78:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005b7c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005b80:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005b84:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005b88:	e7d5      	b.n	8005b36 <_strtod_l+0x8de>
 8005b8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b8c:	ea13 0f0a 	tst.w	r3, sl
 8005b90:	e7e0      	b.n	8005b54 <_strtod_l+0x8fc>
 8005b92:	f7ff fb45 	bl	8005220 <sulp>
 8005b96:	4602      	mov	r2, r0
 8005b98:	460b      	mov	r3, r1
 8005b9a:	ec51 0b18 	vmov	r0, r1, d8
 8005b9e:	f7fa fb7b 	bl	8000298 <__aeabi_dsub>
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	4682      	mov	sl, r0
 8005ba8:	468b      	mov	fp, r1
 8005baa:	f7fa ff95 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	d0c1      	beq.n	8005b36 <_strtod_l+0x8de>
 8005bb2:	e611      	b.n	80057d8 <_strtod_l+0x580>
 8005bb4:	fffffc02 	.word	0xfffffc02
 8005bb8:	7ff00000 	.word	0x7ff00000
 8005bbc:	39500000 	.word	0x39500000
 8005bc0:	000fffff 	.word	0x000fffff
 8005bc4:	7fefffff 	.word	0x7fefffff
 8005bc8:	08008448 	.word	0x08008448
 8005bcc:	4631      	mov	r1, r6
 8005bce:	4628      	mov	r0, r5
 8005bd0:	f001 fa94 	bl	80070fc <__ratio>
 8005bd4:	ec59 8b10 	vmov	r8, r9, d0
 8005bd8:	ee10 0a10 	vmov	r0, s0
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005be2:	4649      	mov	r1, r9
 8005be4:	f7fa ff8c 	bl	8000b00 <__aeabi_dcmple>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	d07a      	beq.n	8005ce2 <_strtod_l+0xa8a>
 8005bec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d04a      	beq.n	8005c88 <_strtod_l+0xa30>
 8005bf2:	4b95      	ldr	r3, [pc, #596]	; (8005e48 <_strtod_l+0xbf0>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005bfa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005e48 <_strtod_l+0xbf0>
 8005bfe:	f04f 0800 	mov.w	r8, #0
 8005c02:	4b92      	ldr	r3, [pc, #584]	; (8005e4c <_strtod_l+0xbf4>)
 8005c04:	403b      	ands	r3, r7
 8005c06:	930d      	str	r3, [sp, #52]	; 0x34
 8005c08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c0a:	4b91      	ldr	r3, [pc, #580]	; (8005e50 <_strtod_l+0xbf8>)
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	f040 80b0 	bne.w	8005d72 <_strtod_l+0xb1a>
 8005c12:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005c16:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005c1a:	ec4b ab10 	vmov	d0, sl, fp
 8005c1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005c22:	f001 f993 	bl	8006f4c <__ulp>
 8005c26:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005c2a:	ec53 2b10 	vmov	r2, r3, d0
 8005c2e:	f7fa fceb 	bl	8000608 <__aeabi_dmul>
 8005c32:	4652      	mov	r2, sl
 8005c34:	465b      	mov	r3, fp
 8005c36:	f7fa fb31 	bl	800029c <__adddf3>
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4983      	ldr	r1, [pc, #524]	; (8005e4c <_strtod_l+0xbf4>)
 8005c3e:	4a85      	ldr	r2, [pc, #532]	; (8005e54 <_strtod_l+0xbfc>)
 8005c40:	4019      	ands	r1, r3
 8005c42:	4291      	cmp	r1, r2
 8005c44:	4682      	mov	sl, r0
 8005c46:	d960      	bls.n	8005d0a <_strtod_l+0xab2>
 8005c48:	ee18 3a90 	vmov	r3, s17
 8005c4c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d104      	bne.n	8005c5e <_strtod_l+0xa06>
 8005c54:	ee18 3a10 	vmov	r3, s16
 8005c58:	3301      	adds	r3, #1
 8005c5a:	f43f ad45 	beq.w	80056e8 <_strtod_l+0x490>
 8005c5e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8005e60 <_strtod_l+0xc08>
 8005c62:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005c66:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f000 fe3d 	bl	80068e8 <_Bfree>
 8005c6e:	9905      	ldr	r1, [sp, #20]
 8005c70:	4620      	mov	r0, r4
 8005c72:	f000 fe39 	bl	80068e8 <_Bfree>
 8005c76:	4631      	mov	r1, r6
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f000 fe35 	bl	80068e8 <_Bfree>
 8005c7e:	4629      	mov	r1, r5
 8005c80:	4620      	mov	r0, r4
 8005c82:	f000 fe31 	bl	80068e8 <_Bfree>
 8005c86:	e61a      	b.n	80058be <_strtod_l+0x666>
 8005c88:	f1ba 0f00 	cmp.w	sl, #0
 8005c8c:	d11b      	bne.n	8005cc6 <_strtod_l+0xa6e>
 8005c8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005c92:	b9f3      	cbnz	r3, 8005cd2 <_strtod_l+0xa7a>
 8005c94:	4b6c      	ldr	r3, [pc, #432]	; (8005e48 <_strtod_l+0xbf0>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	4640      	mov	r0, r8
 8005c9a:	4649      	mov	r1, r9
 8005c9c:	f7fa ff26 	bl	8000aec <__aeabi_dcmplt>
 8005ca0:	b9d0      	cbnz	r0, 8005cd8 <_strtod_l+0xa80>
 8005ca2:	4640      	mov	r0, r8
 8005ca4:	4649      	mov	r1, r9
 8005ca6:	4b6c      	ldr	r3, [pc, #432]	; (8005e58 <_strtod_l+0xc00>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f7fa fcad 	bl	8000608 <__aeabi_dmul>
 8005cae:	4680      	mov	r8, r0
 8005cb0:	4689      	mov	r9, r1
 8005cb2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005cb6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8005cba:	9315      	str	r3, [sp, #84]	; 0x54
 8005cbc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005cc0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005cc4:	e79d      	b.n	8005c02 <_strtod_l+0x9aa>
 8005cc6:	f1ba 0f01 	cmp.w	sl, #1
 8005cca:	d102      	bne.n	8005cd2 <_strtod_l+0xa7a>
 8005ccc:	2f00      	cmp	r7, #0
 8005cce:	f43f ad83 	beq.w	80057d8 <_strtod_l+0x580>
 8005cd2:	4b62      	ldr	r3, [pc, #392]	; (8005e5c <_strtod_l+0xc04>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	e78e      	b.n	8005bf6 <_strtod_l+0x99e>
 8005cd8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8005e58 <_strtod_l+0xc00>
 8005cdc:	f04f 0800 	mov.w	r8, #0
 8005ce0:	e7e7      	b.n	8005cb2 <_strtod_l+0xa5a>
 8005ce2:	4b5d      	ldr	r3, [pc, #372]	; (8005e58 <_strtod_l+0xc00>)
 8005ce4:	4640      	mov	r0, r8
 8005ce6:	4649      	mov	r1, r9
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f7fa fc8d 	bl	8000608 <__aeabi_dmul>
 8005cee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cf0:	4680      	mov	r8, r0
 8005cf2:	4689      	mov	r9, r1
 8005cf4:	b933      	cbnz	r3, 8005d04 <_strtod_l+0xaac>
 8005cf6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005cfa:	900e      	str	r0, [sp, #56]	; 0x38
 8005cfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cfe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005d02:	e7dd      	b.n	8005cc0 <_strtod_l+0xa68>
 8005d04:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8005d08:	e7f9      	b.n	8005cfe <_strtod_l+0xaa6>
 8005d0a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005d0e:	9b04      	ldr	r3, [sp, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1a8      	bne.n	8005c66 <_strtod_l+0xa0e>
 8005d14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005d18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d1a:	0d1b      	lsrs	r3, r3, #20
 8005d1c:	051b      	lsls	r3, r3, #20
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d1a1      	bne.n	8005c66 <_strtod_l+0xa0e>
 8005d22:	4640      	mov	r0, r8
 8005d24:	4649      	mov	r1, r9
 8005d26:	f7fa ffa7 	bl	8000c78 <__aeabi_d2lz>
 8005d2a:	f7fa fc3f 	bl	80005ac <__aeabi_l2d>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	460b      	mov	r3, r1
 8005d32:	4640      	mov	r0, r8
 8005d34:	4649      	mov	r1, r9
 8005d36:	f7fa faaf 	bl	8000298 <__aeabi_dsub>
 8005d3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d40:	ea43 030a 	orr.w	r3, r3, sl
 8005d44:	4313      	orrs	r3, r2
 8005d46:	4680      	mov	r8, r0
 8005d48:	4689      	mov	r9, r1
 8005d4a:	d055      	beq.n	8005df8 <_strtod_l+0xba0>
 8005d4c:	a336      	add	r3, pc, #216	; (adr r3, 8005e28 <_strtod_l+0xbd0>)
 8005d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d52:	f7fa fecb 	bl	8000aec <__aeabi_dcmplt>
 8005d56:	2800      	cmp	r0, #0
 8005d58:	f47f acd0 	bne.w	80056fc <_strtod_l+0x4a4>
 8005d5c:	a334      	add	r3, pc, #208	; (adr r3, 8005e30 <_strtod_l+0xbd8>)
 8005d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d62:	4640      	mov	r0, r8
 8005d64:	4649      	mov	r1, r9
 8005d66:	f7fa fedf 	bl	8000b28 <__aeabi_dcmpgt>
 8005d6a:	2800      	cmp	r0, #0
 8005d6c:	f43f af7b 	beq.w	8005c66 <_strtod_l+0xa0e>
 8005d70:	e4c4      	b.n	80056fc <_strtod_l+0x4a4>
 8005d72:	9b04      	ldr	r3, [sp, #16]
 8005d74:	b333      	cbz	r3, 8005dc4 <_strtod_l+0xb6c>
 8005d76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d78:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005d7c:	d822      	bhi.n	8005dc4 <_strtod_l+0xb6c>
 8005d7e:	a32e      	add	r3, pc, #184	; (adr r3, 8005e38 <_strtod_l+0xbe0>)
 8005d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d84:	4640      	mov	r0, r8
 8005d86:	4649      	mov	r1, r9
 8005d88:	f7fa feba 	bl	8000b00 <__aeabi_dcmple>
 8005d8c:	b1a0      	cbz	r0, 8005db8 <_strtod_l+0xb60>
 8005d8e:	4649      	mov	r1, r9
 8005d90:	4640      	mov	r0, r8
 8005d92:	f7fa fee9 	bl	8000b68 <__aeabi_d2uiz>
 8005d96:	2801      	cmp	r0, #1
 8005d98:	bf38      	it	cc
 8005d9a:	2001      	movcc	r0, #1
 8005d9c:	f7fa fbba 	bl	8000514 <__aeabi_ui2d>
 8005da0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005da2:	4680      	mov	r8, r0
 8005da4:	4689      	mov	r9, r1
 8005da6:	bb23      	cbnz	r3, 8005df2 <_strtod_l+0xb9a>
 8005da8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005dac:	9010      	str	r0, [sp, #64]	; 0x40
 8005dae:	9311      	str	r3, [sp, #68]	; 0x44
 8005db0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005db4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005dbc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005dc0:	1a9b      	subs	r3, r3, r2
 8005dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8005dc4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005dc8:	eeb0 0a48 	vmov.f32	s0, s16
 8005dcc:	eef0 0a68 	vmov.f32	s1, s17
 8005dd0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005dd4:	f001 f8ba 	bl	8006f4c <__ulp>
 8005dd8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005ddc:	ec53 2b10 	vmov	r2, r3, d0
 8005de0:	f7fa fc12 	bl	8000608 <__aeabi_dmul>
 8005de4:	ec53 2b18 	vmov	r2, r3, d8
 8005de8:	f7fa fa58 	bl	800029c <__adddf3>
 8005dec:	4682      	mov	sl, r0
 8005dee:	468b      	mov	fp, r1
 8005df0:	e78d      	b.n	8005d0e <_strtod_l+0xab6>
 8005df2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8005df6:	e7db      	b.n	8005db0 <_strtod_l+0xb58>
 8005df8:	a311      	add	r3, pc, #68	; (adr r3, 8005e40 <_strtod_l+0xbe8>)
 8005dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfe:	f7fa fe75 	bl	8000aec <__aeabi_dcmplt>
 8005e02:	e7b2      	b.n	8005d6a <_strtod_l+0xb12>
 8005e04:	2300      	movs	r3, #0
 8005e06:	930a      	str	r3, [sp, #40]	; 0x28
 8005e08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005e0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e0c:	6013      	str	r3, [r2, #0]
 8005e0e:	f7ff ba6b 	b.w	80052e8 <_strtod_l+0x90>
 8005e12:	2a65      	cmp	r2, #101	; 0x65
 8005e14:	f43f ab5f 	beq.w	80054d6 <_strtod_l+0x27e>
 8005e18:	2a45      	cmp	r2, #69	; 0x45
 8005e1a:	f43f ab5c 	beq.w	80054d6 <_strtod_l+0x27e>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	f7ff bb94 	b.w	800554c <_strtod_l+0x2f4>
 8005e24:	f3af 8000 	nop.w
 8005e28:	94a03595 	.word	0x94a03595
 8005e2c:	3fdfffff 	.word	0x3fdfffff
 8005e30:	35afe535 	.word	0x35afe535
 8005e34:	3fe00000 	.word	0x3fe00000
 8005e38:	ffc00000 	.word	0xffc00000
 8005e3c:	41dfffff 	.word	0x41dfffff
 8005e40:	94a03595 	.word	0x94a03595
 8005e44:	3fcfffff 	.word	0x3fcfffff
 8005e48:	3ff00000 	.word	0x3ff00000
 8005e4c:	7ff00000 	.word	0x7ff00000
 8005e50:	7fe00000 	.word	0x7fe00000
 8005e54:	7c9fffff 	.word	0x7c9fffff
 8005e58:	3fe00000 	.word	0x3fe00000
 8005e5c:	bff00000 	.word	0xbff00000
 8005e60:	7fefffff 	.word	0x7fefffff

08005e64 <strtof>:
 8005e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e68:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8005f18 <strtof+0xb4>
 8005e6c:	4b26      	ldr	r3, [pc, #152]	; (8005f08 <strtof+0xa4>)
 8005e6e:	460a      	mov	r2, r1
 8005e70:	ed2d 8b02 	vpush	{d8}
 8005e74:	4601      	mov	r1, r0
 8005e76:	f8d8 0000 	ldr.w	r0, [r8]
 8005e7a:	f7ff f9ed 	bl	8005258 <_strtod_l>
 8005e7e:	ec55 4b10 	vmov	r4, r5, d0
 8005e82:	ee10 2a10 	vmov	r2, s0
 8005e86:	ee10 0a10 	vmov	r0, s0
 8005e8a:	462b      	mov	r3, r5
 8005e8c:	4629      	mov	r1, r5
 8005e8e:	f7fa fe55 	bl	8000b3c <__aeabi_dcmpun>
 8005e92:	b190      	cbz	r0, 8005eba <strtof+0x56>
 8005e94:	2d00      	cmp	r5, #0
 8005e96:	481d      	ldr	r0, [pc, #116]	; (8005f0c <strtof+0xa8>)
 8005e98:	da09      	bge.n	8005eae <strtof+0x4a>
 8005e9a:	f001 fe0d 	bl	8007ab8 <nanf>
 8005e9e:	eeb1 8a40 	vneg.f32	s16, s0
 8005ea2:	eeb0 0a48 	vmov.f32	s0, s16
 8005ea6:	ecbd 8b02 	vpop	{d8}
 8005eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eae:	ecbd 8b02 	vpop	{d8}
 8005eb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005eb6:	f001 bdff 	b.w	8007ab8 <nanf>
 8005eba:	4620      	mov	r0, r4
 8005ebc:	4629      	mov	r1, r5
 8005ebe:	f7fa fe73 	bl	8000ba8 <__aeabi_d2f>
 8005ec2:	ee08 0a10 	vmov	s16, r0
 8005ec6:	eddf 7a12 	vldr	s15, [pc, #72]	; 8005f10 <strtof+0xac>
 8005eca:	eeb0 7ac8 	vabs.f32	s14, s16
 8005ece:	eeb4 7a67 	vcmp.f32	s14, s15
 8005ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ed6:	dde4      	ble.n	8005ea2 <strtof+0x3e>
 8005ed8:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8005edc:	4b0d      	ldr	r3, [pc, #52]	; (8005f14 <strtof+0xb0>)
 8005ede:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	4639      	mov	r1, r7
 8005ee6:	f7fa fe29 	bl	8000b3c <__aeabi_dcmpun>
 8005eea:	b940      	cbnz	r0, 8005efe <strtof+0x9a>
 8005eec:	4b09      	ldr	r3, [pc, #36]	; (8005f14 <strtof+0xb0>)
 8005eee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	4639      	mov	r1, r7
 8005ef6:	f7fa fe03 	bl	8000b00 <__aeabi_dcmple>
 8005efa:	2800      	cmp	r0, #0
 8005efc:	d0d1      	beq.n	8005ea2 <strtof+0x3e>
 8005efe:	f8d8 3000 	ldr.w	r3, [r8]
 8005f02:	2222      	movs	r2, #34	; 0x22
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	e7cc      	b.n	8005ea2 <strtof+0x3e>
 8005f08:	20000074 	.word	0x20000074
 8005f0c:	0800851f 	.word	0x0800851f
 8005f10:	7f7fffff 	.word	0x7f7fffff
 8005f14:	7fefffff 	.word	0x7fefffff
 8005f18:	2000000c 	.word	0x2000000c

08005f1c <strtok>:
 8005f1c:	4b16      	ldr	r3, [pc, #88]	; (8005f78 <strtok+0x5c>)
 8005f1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f20:	681e      	ldr	r6, [r3, #0]
 8005f22:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8005f24:	4605      	mov	r5, r0
 8005f26:	b9fc      	cbnz	r4, 8005f68 <strtok+0x4c>
 8005f28:	2050      	movs	r0, #80	; 0x50
 8005f2a:	9101      	str	r1, [sp, #4]
 8005f2c:	f7ff f824 	bl	8004f78 <malloc>
 8005f30:	9901      	ldr	r1, [sp, #4]
 8005f32:	65b0      	str	r0, [r6, #88]	; 0x58
 8005f34:	4602      	mov	r2, r0
 8005f36:	b920      	cbnz	r0, 8005f42 <strtok+0x26>
 8005f38:	4b10      	ldr	r3, [pc, #64]	; (8005f7c <strtok+0x60>)
 8005f3a:	4811      	ldr	r0, [pc, #68]	; (8005f80 <strtok+0x64>)
 8005f3c:	2157      	movs	r1, #87	; 0x57
 8005f3e:	f000 f8d5 	bl	80060ec <__assert_func>
 8005f42:	e9c0 4400 	strd	r4, r4, [r0]
 8005f46:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005f4a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005f4e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005f52:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005f56:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005f5a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005f5e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005f62:	6184      	str	r4, [r0, #24]
 8005f64:	7704      	strb	r4, [r0, #28]
 8005f66:	6244      	str	r4, [r0, #36]	; 0x24
 8005f68:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	b002      	add	sp, #8
 8005f70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005f74:	f000 b806 	b.w	8005f84 <__strtok_r>
 8005f78:	2000000c 	.word	0x2000000c
 8005f7c:	08008470 	.word	0x08008470
 8005f80:	08008487 	.word	0x08008487

08005f84 <__strtok_r>:
 8005f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f86:	b908      	cbnz	r0, 8005f8c <__strtok_r+0x8>
 8005f88:	6810      	ldr	r0, [r2, #0]
 8005f8a:	b188      	cbz	r0, 8005fb0 <__strtok_r+0x2c>
 8005f8c:	4604      	mov	r4, r0
 8005f8e:	4620      	mov	r0, r4
 8005f90:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005f94:	460f      	mov	r7, r1
 8005f96:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005f9a:	b91e      	cbnz	r6, 8005fa4 <__strtok_r+0x20>
 8005f9c:	b965      	cbnz	r5, 8005fb8 <__strtok_r+0x34>
 8005f9e:	6015      	str	r5, [r2, #0]
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	e005      	b.n	8005fb0 <__strtok_r+0x2c>
 8005fa4:	42b5      	cmp	r5, r6
 8005fa6:	d1f6      	bne.n	8005f96 <__strtok_r+0x12>
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1f0      	bne.n	8005f8e <__strtok_r+0xa>
 8005fac:	6014      	str	r4, [r2, #0]
 8005fae:	7003      	strb	r3, [r0, #0]
 8005fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fb2:	461c      	mov	r4, r3
 8005fb4:	e00c      	b.n	8005fd0 <__strtok_r+0x4c>
 8005fb6:	b915      	cbnz	r5, 8005fbe <__strtok_r+0x3a>
 8005fb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005fbc:	460e      	mov	r6, r1
 8005fbe:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005fc2:	42ab      	cmp	r3, r5
 8005fc4:	d1f7      	bne.n	8005fb6 <__strtok_r+0x32>
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d0f3      	beq.n	8005fb2 <__strtok_r+0x2e>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005fd0:	6014      	str	r4, [r2, #0]
 8005fd2:	e7ed      	b.n	8005fb0 <__strtok_r+0x2c>

08005fd4 <_strtol_l.constprop.0>:
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fda:	d001      	beq.n	8005fe0 <_strtol_l.constprop.0+0xc>
 8005fdc:	2b24      	cmp	r3, #36	; 0x24
 8005fde:	d906      	bls.n	8005fee <_strtol_l.constprop.0+0x1a>
 8005fe0:	f7fe ffa0 	bl	8004f24 <__errno>
 8005fe4:	2316      	movs	r3, #22
 8005fe6:	6003      	str	r3, [r0, #0]
 8005fe8:	2000      	movs	r0, #0
 8005fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80060d4 <_strtol_l.constprop.0+0x100>
 8005ff2:	460d      	mov	r5, r1
 8005ff4:	462e      	mov	r6, r5
 8005ff6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ffa:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005ffe:	f017 0708 	ands.w	r7, r7, #8
 8006002:	d1f7      	bne.n	8005ff4 <_strtol_l.constprop.0+0x20>
 8006004:	2c2d      	cmp	r4, #45	; 0x2d
 8006006:	d132      	bne.n	800606e <_strtol_l.constprop.0+0x9a>
 8006008:	782c      	ldrb	r4, [r5, #0]
 800600a:	2701      	movs	r7, #1
 800600c:	1cb5      	adds	r5, r6, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d05b      	beq.n	80060ca <_strtol_l.constprop.0+0xf6>
 8006012:	2b10      	cmp	r3, #16
 8006014:	d109      	bne.n	800602a <_strtol_l.constprop.0+0x56>
 8006016:	2c30      	cmp	r4, #48	; 0x30
 8006018:	d107      	bne.n	800602a <_strtol_l.constprop.0+0x56>
 800601a:	782c      	ldrb	r4, [r5, #0]
 800601c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006020:	2c58      	cmp	r4, #88	; 0x58
 8006022:	d14d      	bne.n	80060c0 <_strtol_l.constprop.0+0xec>
 8006024:	786c      	ldrb	r4, [r5, #1]
 8006026:	2310      	movs	r3, #16
 8006028:	3502      	adds	r5, #2
 800602a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800602e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006032:	f04f 0c00 	mov.w	ip, #0
 8006036:	fbb8 f9f3 	udiv	r9, r8, r3
 800603a:	4666      	mov	r6, ip
 800603c:	fb03 8a19 	mls	sl, r3, r9, r8
 8006040:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006044:	f1be 0f09 	cmp.w	lr, #9
 8006048:	d816      	bhi.n	8006078 <_strtol_l.constprop.0+0xa4>
 800604a:	4674      	mov	r4, lr
 800604c:	42a3      	cmp	r3, r4
 800604e:	dd24      	ble.n	800609a <_strtol_l.constprop.0+0xc6>
 8006050:	f1bc 0f00 	cmp.w	ip, #0
 8006054:	db1e      	blt.n	8006094 <_strtol_l.constprop.0+0xc0>
 8006056:	45b1      	cmp	r9, r6
 8006058:	d31c      	bcc.n	8006094 <_strtol_l.constprop.0+0xc0>
 800605a:	d101      	bne.n	8006060 <_strtol_l.constprop.0+0x8c>
 800605c:	45a2      	cmp	sl, r4
 800605e:	db19      	blt.n	8006094 <_strtol_l.constprop.0+0xc0>
 8006060:	fb06 4603 	mla	r6, r6, r3, r4
 8006064:	f04f 0c01 	mov.w	ip, #1
 8006068:	f815 4b01 	ldrb.w	r4, [r5], #1
 800606c:	e7e8      	b.n	8006040 <_strtol_l.constprop.0+0x6c>
 800606e:	2c2b      	cmp	r4, #43	; 0x2b
 8006070:	bf04      	itt	eq
 8006072:	782c      	ldrbeq	r4, [r5, #0]
 8006074:	1cb5      	addeq	r5, r6, #2
 8006076:	e7ca      	b.n	800600e <_strtol_l.constprop.0+0x3a>
 8006078:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800607c:	f1be 0f19 	cmp.w	lr, #25
 8006080:	d801      	bhi.n	8006086 <_strtol_l.constprop.0+0xb2>
 8006082:	3c37      	subs	r4, #55	; 0x37
 8006084:	e7e2      	b.n	800604c <_strtol_l.constprop.0+0x78>
 8006086:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800608a:	f1be 0f19 	cmp.w	lr, #25
 800608e:	d804      	bhi.n	800609a <_strtol_l.constprop.0+0xc6>
 8006090:	3c57      	subs	r4, #87	; 0x57
 8006092:	e7db      	b.n	800604c <_strtol_l.constprop.0+0x78>
 8006094:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8006098:	e7e6      	b.n	8006068 <_strtol_l.constprop.0+0x94>
 800609a:	f1bc 0f00 	cmp.w	ip, #0
 800609e:	da05      	bge.n	80060ac <_strtol_l.constprop.0+0xd8>
 80060a0:	2322      	movs	r3, #34	; 0x22
 80060a2:	6003      	str	r3, [r0, #0]
 80060a4:	4646      	mov	r6, r8
 80060a6:	b942      	cbnz	r2, 80060ba <_strtol_l.constprop.0+0xe6>
 80060a8:	4630      	mov	r0, r6
 80060aa:	e79e      	b.n	8005fea <_strtol_l.constprop.0+0x16>
 80060ac:	b107      	cbz	r7, 80060b0 <_strtol_l.constprop.0+0xdc>
 80060ae:	4276      	negs	r6, r6
 80060b0:	2a00      	cmp	r2, #0
 80060b2:	d0f9      	beq.n	80060a8 <_strtol_l.constprop.0+0xd4>
 80060b4:	f1bc 0f00 	cmp.w	ip, #0
 80060b8:	d000      	beq.n	80060bc <_strtol_l.constprop.0+0xe8>
 80060ba:	1e69      	subs	r1, r5, #1
 80060bc:	6011      	str	r1, [r2, #0]
 80060be:	e7f3      	b.n	80060a8 <_strtol_l.constprop.0+0xd4>
 80060c0:	2430      	movs	r4, #48	; 0x30
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1b1      	bne.n	800602a <_strtol_l.constprop.0+0x56>
 80060c6:	2308      	movs	r3, #8
 80060c8:	e7af      	b.n	800602a <_strtol_l.constprop.0+0x56>
 80060ca:	2c30      	cmp	r4, #48	; 0x30
 80060cc:	d0a5      	beq.n	800601a <_strtol_l.constprop.0+0x46>
 80060ce:	230a      	movs	r3, #10
 80060d0:	e7ab      	b.n	800602a <_strtol_l.constprop.0+0x56>
 80060d2:	bf00      	nop
 80060d4:	08008521 	.word	0x08008521

080060d8 <strtol>:
 80060d8:	4613      	mov	r3, r2
 80060da:	460a      	mov	r2, r1
 80060dc:	4601      	mov	r1, r0
 80060de:	4802      	ldr	r0, [pc, #8]	; (80060e8 <strtol+0x10>)
 80060e0:	6800      	ldr	r0, [r0, #0]
 80060e2:	f7ff bf77 	b.w	8005fd4 <_strtol_l.constprop.0>
 80060e6:	bf00      	nop
 80060e8:	2000000c 	.word	0x2000000c

080060ec <__assert_func>:
 80060ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80060ee:	4614      	mov	r4, r2
 80060f0:	461a      	mov	r2, r3
 80060f2:	4b09      	ldr	r3, [pc, #36]	; (8006118 <__assert_func+0x2c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4605      	mov	r5, r0
 80060f8:	68d8      	ldr	r0, [r3, #12]
 80060fa:	b14c      	cbz	r4, 8006110 <__assert_func+0x24>
 80060fc:	4b07      	ldr	r3, [pc, #28]	; (800611c <__assert_func+0x30>)
 80060fe:	9100      	str	r1, [sp, #0]
 8006100:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006104:	4906      	ldr	r1, [pc, #24]	; (8006120 <__assert_func+0x34>)
 8006106:	462b      	mov	r3, r5
 8006108:	f000 f80e 	bl	8006128 <fiprintf>
 800610c:	f001 fdbc 	bl	8007c88 <abort>
 8006110:	4b04      	ldr	r3, [pc, #16]	; (8006124 <__assert_func+0x38>)
 8006112:	461c      	mov	r4, r3
 8006114:	e7f3      	b.n	80060fe <__assert_func+0x12>
 8006116:	bf00      	nop
 8006118:	2000000c 	.word	0x2000000c
 800611c:	080084e4 	.word	0x080084e4
 8006120:	080084f1 	.word	0x080084f1
 8006124:	0800851f 	.word	0x0800851f

08006128 <fiprintf>:
 8006128:	b40e      	push	{r1, r2, r3}
 800612a:	b503      	push	{r0, r1, lr}
 800612c:	4601      	mov	r1, r0
 800612e:	ab03      	add	r3, sp, #12
 8006130:	4805      	ldr	r0, [pc, #20]	; (8006148 <fiprintf+0x20>)
 8006132:	f853 2b04 	ldr.w	r2, [r3], #4
 8006136:	6800      	ldr	r0, [r0, #0]
 8006138:	9301      	str	r3, [sp, #4]
 800613a:	f001 f9f1 	bl	8007520 <_vfiprintf_r>
 800613e:	b002      	add	sp, #8
 8006140:	f85d eb04 	ldr.w	lr, [sp], #4
 8006144:	b003      	add	sp, #12
 8006146:	4770      	bx	lr
 8006148:	2000000c 	.word	0x2000000c

0800614c <rshift>:
 800614c:	6903      	ldr	r3, [r0, #16]
 800614e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006152:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006156:	ea4f 1261 	mov.w	r2, r1, asr #5
 800615a:	f100 0414 	add.w	r4, r0, #20
 800615e:	dd45      	ble.n	80061ec <rshift+0xa0>
 8006160:	f011 011f 	ands.w	r1, r1, #31
 8006164:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006168:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800616c:	d10c      	bne.n	8006188 <rshift+0x3c>
 800616e:	f100 0710 	add.w	r7, r0, #16
 8006172:	4629      	mov	r1, r5
 8006174:	42b1      	cmp	r1, r6
 8006176:	d334      	bcc.n	80061e2 <rshift+0x96>
 8006178:	1a9b      	subs	r3, r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	1eea      	subs	r2, r5, #3
 800617e:	4296      	cmp	r6, r2
 8006180:	bf38      	it	cc
 8006182:	2300      	movcc	r3, #0
 8006184:	4423      	add	r3, r4
 8006186:	e015      	b.n	80061b4 <rshift+0x68>
 8006188:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800618c:	f1c1 0820 	rsb	r8, r1, #32
 8006190:	40cf      	lsrs	r7, r1
 8006192:	f105 0e04 	add.w	lr, r5, #4
 8006196:	46a1      	mov	r9, r4
 8006198:	4576      	cmp	r6, lr
 800619a:	46f4      	mov	ip, lr
 800619c:	d815      	bhi.n	80061ca <rshift+0x7e>
 800619e:	1a9a      	subs	r2, r3, r2
 80061a0:	0092      	lsls	r2, r2, #2
 80061a2:	3a04      	subs	r2, #4
 80061a4:	3501      	adds	r5, #1
 80061a6:	42ae      	cmp	r6, r5
 80061a8:	bf38      	it	cc
 80061aa:	2200      	movcc	r2, #0
 80061ac:	18a3      	adds	r3, r4, r2
 80061ae:	50a7      	str	r7, [r4, r2]
 80061b0:	b107      	cbz	r7, 80061b4 <rshift+0x68>
 80061b2:	3304      	adds	r3, #4
 80061b4:	1b1a      	subs	r2, r3, r4
 80061b6:	42a3      	cmp	r3, r4
 80061b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80061bc:	bf08      	it	eq
 80061be:	2300      	moveq	r3, #0
 80061c0:	6102      	str	r2, [r0, #16]
 80061c2:	bf08      	it	eq
 80061c4:	6143      	streq	r3, [r0, #20]
 80061c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061ca:	f8dc c000 	ldr.w	ip, [ip]
 80061ce:	fa0c fc08 	lsl.w	ip, ip, r8
 80061d2:	ea4c 0707 	orr.w	r7, ip, r7
 80061d6:	f849 7b04 	str.w	r7, [r9], #4
 80061da:	f85e 7b04 	ldr.w	r7, [lr], #4
 80061de:	40cf      	lsrs	r7, r1
 80061e0:	e7da      	b.n	8006198 <rshift+0x4c>
 80061e2:	f851 cb04 	ldr.w	ip, [r1], #4
 80061e6:	f847 cf04 	str.w	ip, [r7, #4]!
 80061ea:	e7c3      	b.n	8006174 <rshift+0x28>
 80061ec:	4623      	mov	r3, r4
 80061ee:	e7e1      	b.n	80061b4 <rshift+0x68>

080061f0 <__hexdig_fun>:
 80061f0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80061f4:	2b09      	cmp	r3, #9
 80061f6:	d802      	bhi.n	80061fe <__hexdig_fun+0xe>
 80061f8:	3820      	subs	r0, #32
 80061fa:	b2c0      	uxtb	r0, r0
 80061fc:	4770      	bx	lr
 80061fe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006202:	2b05      	cmp	r3, #5
 8006204:	d801      	bhi.n	800620a <__hexdig_fun+0x1a>
 8006206:	3847      	subs	r0, #71	; 0x47
 8006208:	e7f7      	b.n	80061fa <__hexdig_fun+0xa>
 800620a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800620e:	2b05      	cmp	r3, #5
 8006210:	d801      	bhi.n	8006216 <__hexdig_fun+0x26>
 8006212:	3827      	subs	r0, #39	; 0x27
 8006214:	e7f1      	b.n	80061fa <__hexdig_fun+0xa>
 8006216:	2000      	movs	r0, #0
 8006218:	4770      	bx	lr
	...

0800621c <__gethex>:
 800621c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006220:	ed2d 8b02 	vpush	{d8}
 8006224:	b089      	sub	sp, #36	; 0x24
 8006226:	ee08 0a10 	vmov	s16, r0
 800622a:	9304      	str	r3, [sp, #16]
 800622c:	4bb4      	ldr	r3, [pc, #720]	; (8006500 <__gethex+0x2e4>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	9301      	str	r3, [sp, #4]
 8006232:	4618      	mov	r0, r3
 8006234:	468b      	mov	fp, r1
 8006236:	4690      	mov	r8, r2
 8006238:	f7f9 ffd2 	bl	80001e0 <strlen>
 800623c:	9b01      	ldr	r3, [sp, #4]
 800623e:	f8db 2000 	ldr.w	r2, [fp]
 8006242:	4403      	add	r3, r0
 8006244:	4682      	mov	sl, r0
 8006246:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800624a:	9305      	str	r3, [sp, #20]
 800624c:	1c93      	adds	r3, r2, #2
 800624e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006252:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006256:	32fe      	adds	r2, #254	; 0xfe
 8006258:	18d1      	adds	r1, r2, r3
 800625a:	461f      	mov	r7, r3
 800625c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006260:	9100      	str	r1, [sp, #0]
 8006262:	2830      	cmp	r0, #48	; 0x30
 8006264:	d0f8      	beq.n	8006258 <__gethex+0x3c>
 8006266:	f7ff ffc3 	bl	80061f0 <__hexdig_fun>
 800626a:	4604      	mov	r4, r0
 800626c:	2800      	cmp	r0, #0
 800626e:	d13a      	bne.n	80062e6 <__gethex+0xca>
 8006270:	9901      	ldr	r1, [sp, #4]
 8006272:	4652      	mov	r2, sl
 8006274:	4638      	mov	r0, r7
 8006276:	f001 fc25 	bl	8007ac4 <strncmp>
 800627a:	4605      	mov	r5, r0
 800627c:	2800      	cmp	r0, #0
 800627e:	d168      	bne.n	8006352 <__gethex+0x136>
 8006280:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006284:	eb07 060a 	add.w	r6, r7, sl
 8006288:	f7ff ffb2 	bl	80061f0 <__hexdig_fun>
 800628c:	2800      	cmp	r0, #0
 800628e:	d062      	beq.n	8006356 <__gethex+0x13a>
 8006290:	4633      	mov	r3, r6
 8006292:	7818      	ldrb	r0, [r3, #0]
 8006294:	2830      	cmp	r0, #48	; 0x30
 8006296:	461f      	mov	r7, r3
 8006298:	f103 0301 	add.w	r3, r3, #1
 800629c:	d0f9      	beq.n	8006292 <__gethex+0x76>
 800629e:	f7ff ffa7 	bl	80061f0 <__hexdig_fun>
 80062a2:	2301      	movs	r3, #1
 80062a4:	fab0 f480 	clz	r4, r0
 80062a8:	0964      	lsrs	r4, r4, #5
 80062aa:	4635      	mov	r5, r6
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	463a      	mov	r2, r7
 80062b0:	4616      	mov	r6, r2
 80062b2:	3201      	adds	r2, #1
 80062b4:	7830      	ldrb	r0, [r6, #0]
 80062b6:	f7ff ff9b 	bl	80061f0 <__hexdig_fun>
 80062ba:	2800      	cmp	r0, #0
 80062bc:	d1f8      	bne.n	80062b0 <__gethex+0x94>
 80062be:	9901      	ldr	r1, [sp, #4]
 80062c0:	4652      	mov	r2, sl
 80062c2:	4630      	mov	r0, r6
 80062c4:	f001 fbfe 	bl	8007ac4 <strncmp>
 80062c8:	b980      	cbnz	r0, 80062ec <__gethex+0xd0>
 80062ca:	b94d      	cbnz	r5, 80062e0 <__gethex+0xc4>
 80062cc:	eb06 050a 	add.w	r5, r6, sl
 80062d0:	462a      	mov	r2, r5
 80062d2:	4616      	mov	r6, r2
 80062d4:	3201      	adds	r2, #1
 80062d6:	7830      	ldrb	r0, [r6, #0]
 80062d8:	f7ff ff8a 	bl	80061f0 <__hexdig_fun>
 80062dc:	2800      	cmp	r0, #0
 80062de:	d1f8      	bne.n	80062d2 <__gethex+0xb6>
 80062e0:	1bad      	subs	r5, r5, r6
 80062e2:	00ad      	lsls	r5, r5, #2
 80062e4:	e004      	b.n	80062f0 <__gethex+0xd4>
 80062e6:	2400      	movs	r4, #0
 80062e8:	4625      	mov	r5, r4
 80062ea:	e7e0      	b.n	80062ae <__gethex+0x92>
 80062ec:	2d00      	cmp	r5, #0
 80062ee:	d1f7      	bne.n	80062e0 <__gethex+0xc4>
 80062f0:	7833      	ldrb	r3, [r6, #0]
 80062f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80062f6:	2b50      	cmp	r3, #80	; 0x50
 80062f8:	d13b      	bne.n	8006372 <__gethex+0x156>
 80062fa:	7873      	ldrb	r3, [r6, #1]
 80062fc:	2b2b      	cmp	r3, #43	; 0x2b
 80062fe:	d02c      	beq.n	800635a <__gethex+0x13e>
 8006300:	2b2d      	cmp	r3, #45	; 0x2d
 8006302:	d02e      	beq.n	8006362 <__gethex+0x146>
 8006304:	1c71      	adds	r1, r6, #1
 8006306:	f04f 0900 	mov.w	r9, #0
 800630a:	7808      	ldrb	r0, [r1, #0]
 800630c:	f7ff ff70 	bl	80061f0 <__hexdig_fun>
 8006310:	1e43      	subs	r3, r0, #1
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b18      	cmp	r3, #24
 8006316:	d82c      	bhi.n	8006372 <__gethex+0x156>
 8006318:	f1a0 0210 	sub.w	r2, r0, #16
 800631c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006320:	f7ff ff66 	bl	80061f0 <__hexdig_fun>
 8006324:	1e43      	subs	r3, r0, #1
 8006326:	b2db      	uxtb	r3, r3
 8006328:	2b18      	cmp	r3, #24
 800632a:	d91d      	bls.n	8006368 <__gethex+0x14c>
 800632c:	f1b9 0f00 	cmp.w	r9, #0
 8006330:	d000      	beq.n	8006334 <__gethex+0x118>
 8006332:	4252      	negs	r2, r2
 8006334:	4415      	add	r5, r2
 8006336:	f8cb 1000 	str.w	r1, [fp]
 800633a:	b1e4      	cbz	r4, 8006376 <__gethex+0x15a>
 800633c:	9b00      	ldr	r3, [sp, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	bf14      	ite	ne
 8006342:	2700      	movne	r7, #0
 8006344:	2706      	moveq	r7, #6
 8006346:	4638      	mov	r0, r7
 8006348:	b009      	add	sp, #36	; 0x24
 800634a:	ecbd 8b02 	vpop	{d8}
 800634e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006352:	463e      	mov	r6, r7
 8006354:	4625      	mov	r5, r4
 8006356:	2401      	movs	r4, #1
 8006358:	e7ca      	b.n	80062f0 <__gethex+0xd4>
 800635a:	f04f 0900 	mov.w	r9, #0
 800635e:	1cb1      	adds	r1, r6, #2
 8006360:	e7d3      	b.n	800630a <__gethex+0xee>
 8006362:	f04f 0901 	mov.w	r9, #1
 8006366:	e7fa      	b.n	800635e <__gethex+0x142>
 8006368:	230a      	movs	r3, #10
 800636a:	fb03 0202 	mla	r2, r3, r2, r0
 800636e:	3a10      	subs	r2, #16
 8006370:	e7d4      	b.n	800631c <__gethex+0x100>
 8006372:	4631      	mov	r1, r6
 8006374:	e7df      	b.n	8006336 <__gethex+0x11a>
 8006376:	1bf3      	subs	r3, r6, r7
 8006378:	3b01      	subs	r3, #1
 800637a:	4621      	mov	r1, r4
 800637c:	2b07      	cmp	r3, #7
 800637e:	dc0b      	bgt.n	8006398 <__gethex+0x17c>
 8006380:	ee18 0a10 	vmov	r0, s16
 8006384:	f000 fa70 	bl	8006868 <_Balloc>
 8006388:	4604      	mov	r4, r0
 800638a:	b940      	cbnz	r0, 800639e <__gethex+0x182>
 800638c:	4b5d      	ldr	r3, [pc, #372]	; (8006504 <__gethex+0x2e8>)
 800638e:	4602      	mov	r2, r0
 8006390:	21de      	movs	r1, #222	; 0xde
 8006392:	485d      	ldr	r0, [pc, #372]	; (8006508 <__gethex+0x2ec>)
 8006394:	f7ff feaa 	bl	80060ec <__assert_func>
 8006398:	3101      	adds	r1, #1
 800639a:	105b      	asrs	r3, r3, #1
 800639c:	e7ee      	b.n	800637c <__gethex+0x160>
 800639e:	f100 0914 	add.w	r9, r0, #20
 80063a2:	f04f 0b00 	mov.w	fp, #0
 80063a6:	f1ca 0301 	rsb	r3, sl, #1
 80063aa:	f8cd 9008 	str.w	r9, [sp, #8]
 80063ae:	f8cd b000 	str.w	fp, [sp]
 80063b2:	9306      	str	r3, [sp, #24]
 80063b4:	42b7      	cmp	r7, r6
 80063b6:	d340      	bcc.n	800643a <__gethex+0x21e>
 80063b8:	9802      	ldr	r0, [sp, #8]
 80063ba:	9b00      	ldr	r3, [sp, #0]
 80063bc:	f840 3b04 	str.w	r3, [r0], #4
 80063c0:	eba0 0009 	sub.w	r0, r0, r9
 80063c4:	1080      	asrs	r0, r0, #2
 80063c6:	0146      	lsls	r6, r0, #5
 80063c8:	6120      	str	r0, [r4, #16]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 fb3e 	bl	8006a4c <__hi0bits>
 80063d0:	1a30      	subs	r0, r6, r0
 80063d2:	f8d8 6000 	ldr.w	r6, [r8]
 80063d6:	42b0      	cmp	r0, r6
 80063d8:	dd63      	ble.n	80064a2 <__gethex+0x286>
 80063da:	1b87      	subs	r7, r0, r6
 80063dc:	4639      	mov	r1, r7
 80063de:	4620      	mov	r0, r4
 80063e0:	f000 fee2 	bl	80071a8 <__any_on>
 80063e4:	4682      	mov	sl, r0
 80063e6:	b1a8      	cbz	r0, 8006414 <__gethex+0x1f8>
 80063e8:	1e7b      	subs	r3, r7, #1
 80063ea:	1159      	asrs	r1, r3, #5
 80063ec:	f003 021f 	and.w	r2, r3, #31
 80063f0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80063f4:	f04f 0a01 	mov.w	sl, #1
 80063f8:	fa0a f202 	lsl.w	r2, sl, r2
 80063fc:	420a      	tst	r2, r1
 80063fe:	d009      	beq.n	8006414 <__gethex+0x1f8>
 8006400:	4553      	cmp	r3, sl
 8006402:	dd05      	ble.n	8006410 <__gethex+0x1f4>
 8006404:	1eb9      	subs	r1, r7, #2
 8006406:	4620      	mov	r0, r4
 8006408:	f000 fece 	bl	80071a8 <__any_on>
 800640c:	2800      	cmp	r0, #0
 800640e:	d145      	bne.n	800649c <__gethex+0x280>
 8006410:	f04f 0a02 	mov.w	sl, #2
 8006414:	4639      	mov	r1, r7
 8006416:	4620      	mov	r0, r4
 8006418:	f7ff fe98 	bl	800614c <rshift>
 800641c:	443d      	add	r5, r7
 800641e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006422:	42ab      	cmp	r3, r5
 8006424:	da4c      	bge.n	80064c0 <__gethex+0x2a4>
 8006426:	ee18 0a10 	vmov	r0, s16
 800642a:	4621      	mov	r1, r4
 800642c:	f000 fa5c 	bl	80068e8 <_Bfree>
 8006430:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006432:	2300      	movs	r3, #0
 8006434:	6013      	str	r3, [r2, #0]
 8006436:	27a3      	movs	r7, #163	; 0xa3
 8006438:	e785      	b.n	8006346 <__gethex+0x12a>
 800643a:	1e73      	subs	r3, r6, #1
 800643c:	9a05      	ldr	r2, [sp, #20]
 800643e:	9303      	str	r3, [sp, #12]
 8006440:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006444:	4293      	cmp	r3, r2
 8006446:	d019      	beq.n	800647c <__gethex+0x260>
 8006448:	f1bb 0f20 	cmp.w	fp, #32
 800644c:	d107      	bne.n	800645e <__gethex+0x242>
 800644e:	9b02      	ldr	r3, [sp, #8]
 8006450:	9a00      	ldr	r2, [sp, #0]
 8006452:	f843 2b04 	str.w	r2, [r3], #4
 8006456:	9302      	str	r3, [sp, #8]
 8006458:	2300      	movs	r3, #0
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	469b      	mov	fp, r3
 800645e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006462:	f7ff fec5 	bl	80061f0 <__hexdig_fun>
 8006466:	9b00      	ldr	r3, [sp, #0]
 8006468:	f000 000f 	and.w	r0, r0, #15
 800646c:	fa00 f00b 	lsl.w	r0, r0, fp
 8006470:	4303      	orrs	r3, r0
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	f10b 0b04 	add.w	fp, fp, #4
 8006478:	9b03      	ldr	r3, [sp, #12]
 800647a:	e00d      	b.n	8006498 <__gethex+0x27c>
 800647c:	9b03      	ldr	r3, [sp, #12]
 800647e:	9a06      	ldr	r2, [sp, #24]
 8006480:	4413      	add	r3, r2
 8006482:	42bb      	cmp	r3, r7
 8006484:	d3e0      	bcc.n	8006448 <__gethex+0x22c>
 8006486:	4618      	mov	r0, r3
 8006488:	9901      	ldr	r1, [sp, #4]
 800648a:	9307      	str	r3, [sp, #28]
 800648c:	4652      	mov	r2, sl
 800648e:	f001 fb19 	bl	8007ac4 <strncmp>
 8006492:	9b07      	ldr	r3, [sp, #28]
 8006494:	2800      	cmp	r0, #0
 8006496:	d1d7      	bne.n	8006448 <__gethex+0x22c>
 8006498:	461e      	mov	r6, r3
 800649a:	e78b      	b.n	80063b4 <__gethex+0x198>
 800649c:	f04f 0a03 	mov.w	sl, #3
 80064a0:	e7b8      	b.n	8006414 <__gethex+0x1f8>
 80064a2:	da0a      	bge.n	80064ba <__gethex+0x29e>
 80064a4:	1a37      	subs	r7, r6, r0
 80064a6:	4621      	mov	r1, r4
 80064a8:	ee18 0a10 	vmov	r0, s16
 80064ac:	463a      	mov	r2, r7
 80064ae:	f000 fc37 	bl	8006d20 <__lshift>
 80064b2:	1bed      	subs	r5, r5, r7
 80064b4:	4604      	mov	r4, r0
 80064b6:	f100 0914 	add.w	r9, r0, #20
 80064ba:	f04f 0a00 	mov.w	sl, #0
 80064be:	e7ae      	b.n	800641e <__gethex+0x202>
 80064c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80064c4:	42a8      	cmp	r0, r5
 80064c6:	dd72      	ble.n	80065ae <__gethex+0x392>
 80064c8:	1b45      	subs	r5, r0, r5
 80064ca:	42ae      	cmp	r6, r5
 80064cc:	dc36      	bgt.n	800653c <__gethex+0x320>
 80064ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d02a      	beq.n	800652c <__gethex+0x310>
 80064d6:	2b03      	cmp	r3, #3
 80064d8:	d02c      	beq.n	8006534 <__gethex+0x318>
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d11c      	bne.n	8006518 <__gethex+0x2fc>
 80064de:	42ae      	cmp	r6, r5
 80064e0:	d11a      	bne.n	8006518 <__gethex+0x2fc>
 80064e2:	2e01      	cmp	r6, #1
 80064e4:	d112      	bne.n	800650c <__gethex+0x2f0>
 80064e6:	9a04      	ldr	r2, [sp, #16]
 80064e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80064ec:	6013      	str	r3, [r2, #0]
 80064ee:	2301      	movs	r3, #1
 80064f0:	6123      	str	r3, [r4, #16]
 80064f2:	f8c9 3000 	str.w	r3, [r9]
 80064f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80064f8:	2762      	movs	r7, #98	; 0x62
 80064fa:	601c      	str	r4, [r3, #0]
 80064fc:	e723      	b.n	8006346 <__gethex+0x12a>
 80064fe:	bf00      	nop
 8006500:	08008698 	.word	0x08008698
 8006504:	08008621 	.word	0x08008621
 8006508:	08008632 	.word	0x08008632
 800650c:	1e71      	subs	r1, r6, #1
 800650e:	4620      	mov	r0, r4
 8006510:	f000 fe4a 	bl	80071a8 <__any_on>
 8006514:	2800      	cmp	r0, #0
 8006516:	d1e6      	bne.n	80064e6 <__gethex+0x2ca>
 8006518:	ee18 0a10 	vmov	r0, s16
 800651c:	4621      	mov	r1, r4
 800651e:	f000 f9e3 	bl	80068e8 <_Bfree>
 8006522:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006524:	2300      	movs	r3, #0
 8006526:	6013      	str	r3, [r2, #0]
 8006528:	2750      	movs	r7, #80	; 0x50
 800652a:	e70c      	b.n	8006346 <__gethex+0x12a>
 800652c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1f2      	bne.n	8006518 <__gethex+0x2fc>
 8006532:	e7d8      	b.n	80064e6 <__gethex+0x2ca>
 8006534:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1d5      	bne.n	80064e6 <__gethex+0x2ca>
 800653a:	e7ed      	b.n	8006518 <__gethex+0x2fc>
 800653c:	1e6f      	subs	r7, r5, #1
 800653e:	f1ba 0f00 	cmp.w	sl, #0
 8006542:	d131      	bne.n	80065a8 <__gethex+0x38c>
 8006544:	b127      	cbz	r7, 8006550 <__gethex+0x334>
 8006546:	4639      	mov	r1, r7
 8006548:	4620      	mov	r0, r4
 800654a:	f000 fe2d 	bl	80071a8 <__any_on>
 800654e:	4682      	mov	sl, r0
 8006550:	117b      	asrs	r3, r7, #5
 8006552:	2101      	movs	r1, #1
 8006554:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006558:	f007 071f 	and.w	r7, r7, #31
 800655c:	fa01 f707 	lsl.w	r7, r1, r7
 8006560:	421f      	tst	r7, r3
 8006562:	4629      	mov	r1, r5
 8006564:	4620      	mov	r0, r4
 8006566:	bf18      	it	ne
 8006568:	f04a 0a02 	orrne.w	sl, sl, #2
 800656c:	1b76      	subs	r6, r6, r5
 800656e:	f7ff fded 	bl	800614c <rshift>
 8006572:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006576:	2702      	movs	r7, #2
 8006578:	f1ba 0f00 	cmp.w	sl, #0
 800657c:	d048      	beq.n	8006610 <__gethex+0x3f4>
 800657e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006582:	2b02      	cmp	r3, #2
 8006584:	d015      	beq.n	80065b2 <__gethex+0x396>
 8006586:	2b03      	cmp	r3, #3
 8006588:	d017      	beq.n	80065ba <__gethex+0x39e>
 800658a:	2b01      	cmp	r3, #1
 800658c:	d109      	bne.n	80065a2 <__gethex+0x386>
 800658e:	f01a 0f02 	tst.w	sl, #2
 8006592:	d006      	beq.n	80065a2 <__gethex+0x386>
 8006594:	f8d9 0000 	ldr.w	r0, [r9]
 8006598:	ea4a 0a00 	orr.w	sl, sl, r0
 800659c:	f01a 0f01 	tst.w	sl, #1
 80065a0:	d10e      	bne.n	80065c0 <__gethex+0x3a4>
 80065a2:	f047 0710 	orr.w	r7, r7, #16
 80065a6:	e033      	b.n	8006610 <__gethex+0x3f4>
 80065a8:	f04f 0a01 	mov.w	sl, #1
 80065ac:	e7d0      	b.n	8006550 <__gethex+0x334>
 80065ae:	2701      	movs	r7, #1
 80065b0:	e7e2      	b.n	8006578 <__gethex+0x35c>
 80065b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80065b4:	f1c3 0301 	rsb	r3, r3, #1
 80065b8:	9315      	str	r3, [sp, #84]	; 0x54
 80065ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d0f0      	beq.n	80065a2 <__gethex+0x386>
 80065c0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80065c4:	f104 0314 	add.w	r3, r4, #20
 80065c8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80065cc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80065d0:	f04f 0c00 	mov.w	ip, #0
 80065d4:	4618      	mov	r0, r3
 80065d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80065da:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80065de:	d01c      	beq.n	800661a <__gethex+0x3fe>
 80065e0:	3201      	adds	r2, #1
 80065e2:	6002      	str	r2, [r0, #0]
 80065e4:	2f02      	cmp	r7, #2
 80065e6:	f104 0314 	add.w	r3, r4, #20
 80065ea:	d13f      	bne.n	800666c <__gethex+0x450>
 80065ec:	f8d8 2000 	ldr.w	r2, [r8]
 80065f0:	3a01      	subs	r2, #1
 80065f2:	42b2      	cmp	r2, r6
 80065f4:	d10a      	bne.n	800660c <__gethex+0x3f0>
 80065f6:	1171      	asrs	r1, r6, #5
 80065f8:	2201      	movs	r2, #1
 80065fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80065fe:	f006 061f 	and.w	r6, r6, #31
 8006602:	fa02 f606 	lsl.w	r6, r2, r6
 8006606:	421e      	tst	r6, r3
 8006608:	bf18      	it	ne
 800660a:	4617      	movne	r7, r2
 800660c:	f047 0720 	orr.w	r7, r7, #32
 8006610:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006612:	601c      	str	r4, [r3, #0]
 8006614:	9b04      	ldr	r3, [sp, #16]
 8006616:	601d      	str	r5, [r3, #0]
 8006618:	e695      	b.n	8006346 <__gethex+0x12a>
 800661a:	4299      	cmp	r1, r3
 800661c:	f843 cc04 	str.w	ip, [r3, #-4]
 8006620:	d8d8      	bhi.n	80065d4 <__gethex+0x3b8>
 8006622:	68a3      	ldr	r3, [r4, #8]
 8006624:	459b      	cmp	fp, r3
 8006626:	db19      	blt.n	800665c <__gethex+0x440>
 8006628:	6861      	ldr	r1, [r4, #4]
 800662a:	ee18 0a10 	vmov	r0, s16
 800662e:	3101      	adds	r1, #1
 8006630:	f000 f91a 	bl	8006868 <_Balloc>
 8006634:	4681      	mov	r9, r0
 8006636:	b918      	cbnz	r0, 8006640 <__gethex+0x424>
 8006638:	4b1a      	ldr	r3, [pc, #104]	; (80066a4 <__gethex+0x488>)
 800663a:	4602      	mov	r2, r0
 800663c:	2184      	movs	r1, #132	; 0x84
 800663e:	e6a8      	b.n	8006392 <__gethex+0x176>
 8006640:	6922      	ldr	r2, [r4, #16]
 8006642:	3202      	adds	r2, #2
 8006644:	f104 010c 	add.w	r1, r4, #12
 8006648:	0092      	lsls	r2, r2, #2
 800664a:	300c      	adds	r0, #12
 800664c:	f7fe fca4 	bl	8004f98 <memcpy>
 8006650:	4621      	mov	r1, r4
 8006652:	ee18 0a10 	vmov	r0, s16
 8006656:	f000 f947 	bl	80068e8 <_Bfree>
 800665a:	464c      	mov	r4, r9
 800665c:	6923      	ldr	r3, [r4, #16]
 800665e:	1c5a      	adds	r2, r3, #1
 8006660:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006664:	6122      	str	r2, [r4, #16]
 8006666:	2201      	movs	r2, #1
 8006668:	615a      	str	r2, [r3, #20]
 800666a:	e7bb      	b.n	80065e4 <__gethex+0x3c8>
 800666c:	6922      	ldr	r2, [r4, #16]
 800666e:	455a      	cmp	r2, fp
 8006670:	dd0b      	ble.n	800668a <__gethex+0x46e>
 8006672:	2101      	movs	r1, #1
 8006674:	4620      	mov	r0, r4
 8006676:	f7ff fd69 	bl	800614c <rshift>
 800667a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800667e:	3501      	adds	r5, #1
 8006680:	42ab      	cmp	r3, r5
 8006682:	f6ff aed0 	blt.w	8006426 <__gethex+0x20a>
 8006686:	2701      	movs	r7, #1
 8006688:	e7c0      	b.n	800660c <__gethex+0x3f0>
 800668a:	f016 061f 	ands.w	r6, r6, #31
 800668e:	d0fa      	beq.n	8006686 <__gethex+0x46a>
 8006690:	4453      	add	r3, sl
 8006692:	f1c6 0620 	rsb	r6, r6, #32
 8006696:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800669a:	f000 f9d7 	bl	8006a4c <__hi0bits>
 800669e:	42b0      	cmp	r0, r6
 80066a0:	dbe7      	blt.n	8006672 <__gethex+0x456>
 80066a2:	e7f0      	b.n	8006686 <__gethex+0x46a>
 80066a4:	08008621 	.word	0x08008621

080066a8 <L_shift>:
 80066a8:	f1c2 0208 	rsb	r2, r2, #8
 80066ac:	0092      	lsls	r2, r2, #2
 80066ae:	b570      	push	{r4, r5, r6, lr}
 80066b0:	f1c2 0620 	rsb	r6, r2, #32
 80066b4:	6843      	ldr	r3, [r0, #4]
 80066b6:	6804      	ldr	r4, [r0, #0]
 80066b8:	fa03 f506 	lsl.w	r5, r3, r6
 80066bc:	432c      	orrs	r4, r5
 80066be:	40d3      	lsrs	r3, r2
 80066c0:	6004      	str	r4, [r0, #0]
 80066c2:	f840 3f04 	str.w	r3, [r0, #4]!
 80066c6:	4288      	cmp	r0, r1
 80066c8:	d3f4      	bcc.n	80066b4 <L_shift+0xc>
 80066ca:	bd70      	pop	{r4, r5, r6, pc}

080066cc <__match>:
 80066cc:	b530      	push	{r4, r5, lr}
 80066ce:	6803      	ldr	r3, [r0, #0]
 80066d0:	3301      	adds	r3, #1
 80066d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066d6:	b914      	cbnz	r4, 80066de <__match+0x12>
 80066d8:	6003      	str	r3, [r0, #0]
 80066da:	2001      	movs	r0, #1
 80066dc:	bd30      	pop	{r4, r5, pc}
 80066de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80066e6:	2d19      	cmp	r5, #25
 80066e8:	bf98      	it	ls
 80066ea:	3220      	addls	r2, #32
 80066ec:	42a2      	cmp	r2, r4
 80066ee:	d0f0      	beq.n	80066d2 <__match+0x6>
 80066f0:	2000      	movs	r0, #0
 80066f2:	e7f3      	b.n	80066dc <__match+0x10>

080066f4 <__hexnan>:
 80066f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f8:	680b      	ldr	r3, [r1, #0]
 80066fa:	115e      	asrs	r6, r3, #5
 80066fc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006700:	f013 031f 	ands.w	r3, r3, #31
 8006704:	b087      	sub	sp, #28
 8006706:	bf18      	it	ne
 8006708:	3604      	addne	r6, #4
 800670a:	2500      	movs	r5, #0
 800670c:	1f37      	subs	r7, r6, #4
 800670e:	4690      	mov	r8, r2
 8006710:	6802      	ldr	r2, [r0, #0]
 8006712:	9301      	str	r3, [sp, #4]
 8006714:	4682      	mov	sl, r0
 8006716:	f846 5c04 	str.w	r5, [r6, #-4]
 800671a:	46b9      	mov	r9, r7
 800671c:	463c      	mov	r4, r7
 800671e:	9502      	str	r5, [sp, #8]
 8006720:	46ab      	mov	fp, r5
 8006722:	7851      	ldrb	r1, [r2, #1]
 8006724:	1c53      	adds	r3, r2, #1
 8006726:	9303      	str	r3, [sp, #12]
 8006728:	b341      	cbz	r1, 800677c <__hexnan+0x88>
 800672a:	4608      	mov	r0, r1
 800672c:	9205      	str	r2, [sp, #20]
 800672e:	9104      	str	r1, [sp, #16]
 8006730:	f7ff fd5e 	bl	80061f0 <__hexdig_fun>
 8006734:	2800      	cmp	r0, #0
 8006736:	d14f      	bne.n	80067d8 <__hexnan+0xe4>
 8006738:	9904      	ldr	r1, [sp, #16]
 800673a:	9a05      	ldr	r2, [sp, #20]
 800673c:	2920      	cmp	r1, #32
 800673e:	d818      	bhi.n	8006772 <__hexnan+0x7e>
 8006740:	9b02      	ldr	r3, [sp, #8]
 8006742:	459b      	cmp	fp, r3
 8006744:	dd13      	ble.n	800676e <__hexnan+0x7a>
 8006746:	454c      	cmp	r4, r9
 8006748:	d206      	bcs.n	8006758 <__hexnan+0x64>
 800674a:	2d07      	cmp	r5, #7
 800674c:	dc04      	bgt.n	8006758 <__hexnan+0x64>
 800674e:	462a      	mov	r2, r5
 8006750:	4649      	mov	r1, r9
 8006752:	4620      	mov	r0, r4
 8006754:	f7ff ffa8 	bl	80066a8 <L_shift>
 8006758:	4544      	cmp	r4, r8
 800675a:	d950      	bls.n	80067fe <__hexnan+0x10a>
 800675c:	2300      	movs	r3, #0
 800675e:	f1a4 0904 	sub.w	r9, r4, #4
 8006762:	f844 3c04 	str.w	r3, [r4, #-4]
 8006766:	f8cd b008 	str.w	fp, [sp, #8]
 800676a:	464c      	mov	r4, r9
 800676c:	461d      	mov	r5, r3
 800676e:	9a03      	ldr	r2, [sp, #12]
 8006770:	e7d7      	b.n	8006722 <__hexnan+0x2e>
 8006772:	2929      	cmp	r1, #41	; 0x29
 8006774:	d156      	bne.n	8006824 <__hexnan+0x130>
 8006776:	3202      	adds	r2, #2
 8006778:	f8ca 2000 	str.w	r2, [sl]
 800677c:	f1bb 0f00 	cmp.w	fp, #0
 8006780:	d050      	beq.n	8006824 <__hexnan+0x130>
 8006782:	454c      	cmp	r4, r9
 8006784:	d206      	bcs.n	8006794 <__hexnan+0xa0>
 8006786:	2d07      	cmp	r5, #7
 8006788:	dc04      	bgt.n	8006794 <__hexnan+0xa0>
 800678a:	462a      	mov	r2, r5
 800678c:	4649      	mov	r1, r9
 800678e:	4620      	mov	r0, r4
 8006790:	f7ff ff8a 	bl	80066a8 <L_shift>
 8006794:	4544      	cmp	r4, r8
 8006796:	d934      	bls.n	8006802 <__hexnan+0x10e>
 8006798:	f1a8 0204 	sub.w	r2, r8, #4
 800679c:	4623      	mov	r3, r4
 800679e:	f853 1b04 	ldr.w	r1, [r3], #4
 80067a2:	f842 1f04 	str.w	r1, [r2, #4]!
 80067a6:	429f      	cmp	r7, r3
 80067a8:	d2f9      	bcs.n	800679e <__hexnan+0xaa>
 80067aa:	1b3b      	subs	r3, r7, r4
 80067ac:	f023 0303 	bic.w	r3, r3, #3
 80067b0:	3304      	adds	r3, #4
 80067b2:	3401      	adds	r4, #1
 80067b4:	3e03      	subs	r6, #3
 80067b6:	42b4      	cmp	r4, r6
 80067b8:	bf88      	it	hi
 80067ba:	2304      	movhi	r3, #4
 80067bc:	4443      	add	r3, r8
 80067be:	2200      	movs	r2, #0
 80067c0:	f843 2b04 	str.w	r2, [r3], #4
 80067c4:	429f      	cmp	r7, r3
 80067c6:	d2fb      	bcs.n	80067c0 <__hexnan+0xcc>
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	b91b      	cbnz	r3, 80067d4 <__hexnan+0xe0>
 80067cc:	4547      	cmp	r7, r8
 80067ce:	d127      	bne.n	8006820 <__hexnan+0x12c>
 80067d0:	2301      	movs	r3, #1
 80067d2:	603b      	str	r3, [r7, #0]
 80067d4:	2005      	movs	r0, #5
 80067d6:	e026      	b.n	8006826 <__hexnan+0x132>
 80067d8:	3501      	adds	r5, #1
 80067da:	2d08      	cmp	r5, #8
 80067dc:	f10b 0b01 	add.w	fp, fp, #1
 80067e0:	dd06      	ble.n	80067f0 <__hexnan+0xfc>
 80067e2:	4544      	cmp	r4, r8
 80067e4:	d9c3      	bls.n	800676e <__hexnan+0x7a>
 80067e6:	2300      	movs	r3, #0
 80067e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80067ec:	2501      	movs	r5, #1
 80067ee:	3c04      	subs	r4, #4
 80067f0:	6822      	ldr	r2, [r4, #0]
 80067f2:	f000 000f 	and.w	r0, r0, #15
 80067f6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80067fa:	6022      	str	r2, [r4, #0]
 80067fc:	e7b7      	b.n	800676e <__hexnan+0x7a>
 80067fe:	2508      	movs	r5, #8
 8006800:	e7b5      	b.n	800676e <__hexnan+0x7a>
 8006802:	9b01      	ldr	r3, [sp, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d0df      	beq.n	80067c8 <__hexnan+0xd4>
 8006808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800680c:	f1c3 0320 	rsb	r3, r3, #32
 8006810:	fa22 f303 	lsr.w	r3, r2, r3
 8006814:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006818:	401a      	ands	r2, r3
 800681a:	f846 2c04 	str.w	r2, [r6, #-4]
 800681e:	e7d3      	b.n	80067c8 <__hexnan+0xd4>
 8006820:	3f04      	subs	r7, #4
 8006822:	e7d1      	b.n	80067c8 <__hexnan+0xd4>
 8006824:	2004      	movs	r0, #4
 8006826:	b007      	add	sp, #28
 8006828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800682c <__ascii_mbtowc>:
 800682c:	b082      	sub	sp, #8
 800682e:	b901      	cbnz	r1, 8006832 <__ascii_mbtowc+0x6>
 8006830:	a901      	add	r1, sp, #4
 8006832:	b142      	cbz	r2, 8006846 <__ascii_mbtowc+0x1a>
 8006834:	b14b      	cbz	r3, 800684a <__ascii_mbtowc+0x1e>
 8006836:	7813      	ldrb	r3, [r2, #0]
 8006838:	600b      	str	r3, [r1, #0]
 800683a:	7812      	ldrb	r2, [r2, #0]
 800683c:	1e10      	subs	r0, r2, #0
 800683e:	bf18      	it	ne
 8006840:	2001      	movne	r0, #1
 8006842:	b002      	add	sp, #8
 8006844:	4770      	bx	lr
 8006846:	4610      	mov	r0, r2
 8006848:	e7fb      	b.n	8006842 <__ascii_mbtowc+0x16>
 800684a:	f06f 0001 	mvn.w	r0, #1
 800684e:	e7f8      	b.n	8006842 <__ascii_mbtowc+0x16>

08006850 <__malloc_lock>:
 8006850:	4801      	ldr	r0, [pc, #4]	; (8006858 <__malloc_lock+0x8>)
 8006852:	f001 bbd9 	b.w	8008008 <__retarget_lock_acquire_recursive>
 8006856:	bf00      	nop
 8006858:	20000610 	.word	0x20000610

0800685c <__malloc_unlock>:
 800685c:	4801      	ldr	r0, [pc, #4]	; (8006864 <__malloc_unlock+0x8>)
 800685e:	f001 bbd4 	b.w	800800a <__retarget_lock_release_recursive>
 8006862:	bf00      	nop
 8006864:	20000610 	.word	0x20000610

08006868 <_Balloc>:
 8006868:	b570      	push	{r4, r5, r6, lr}
 800686a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800686c:	4604      	mov	r4, r0
 800686e:	460d      	mov	r5, r1
 8006870:	b976      	cbnz	r6, 8006890 <_Balloc+0x28>
 8006872:	2010      	movs	r0, #16
 8006874:	f7fe fb80 	bl	8004f78 <malloc>
 8006878:	4602      	mov	r2, r0
 800687a:	6260      	str	r0, [r4, #36]	; 0x24
 800687c:	b920      	cbnz	r0, 8006888 <_Balloc+0x20>
 800687e:	4b18      	ldr	r3, [pc, #96]	; (80068e0 <_Balloc+0x78>)
 8006880:	4818      	ldr	r0, [pc, #96]	; (80068e4 <_Balloc+0x7c>)
 8006882:	2166      	movs	r1, #102	; 0x66
 8006884:	f7ff fc32 	bl	80060ec <__assert_func>
 8006888:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800688c:	6006      	str	r6, [r0, #0]
 800688e:	60c6      	str	r6, [r0, #12]
 8006890:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006892:	68f3      	ldr	r3, [r6, #12]
 8006894:	b183      	cbz	r3, 80068b8 <_Balloc+0x50>
 8006896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800689e:	b9b8      	cbnz	r0, 80068d0 <_Balloc+0x68>
 80068a0:	2101      	movs	r1, #1
 80068a2:	fa01 f605 	lsl.w	r6, r1, r5
 80068a6:	1d72      	adds	r2, r6, #5
 80068a8:	0092      	lsls	r2, r2, #2
 80068aa:	4620      	mov	r0, r4
 80068ac:	f000 fc9d 	bl	80071ea <_calloc_r>
 80068b0:	b160      	cbz	r0, 80068cc <_Balloc+0x64>
 80068b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80068b6:	e00e      	b.n	80068d6 <_Balloc+0x6e>
 80068b8:	2221      	movs	r2, #33	; 0x21
 80068ba:	2104      	movs	r1, #4
 80068bc:	4620      	mov	r0, r4
 80068be:	f000 fc94 	bl	80071ea <_calloc_r>
 80068c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068c4:	60f0      	str	r0, [r6, #12]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1e4      	bne.n	8006896 <_Balloc+0x2e>
 80068cc:	2000      	movs	r0, #0
 80068ce:	bd70      	pop	{r4, r5, r6, pc}
 80068d0:	6802      	ldr	r2, [r0, #0]
 80068d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80068d6:	2300      	movs	r3, #0
 80068d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80068dc:	e7f7      	b.n	80068ce <_Balloc+0x66>
 80068de:	bf00      	nop
 80068e0:	08008470 	.word	0x08008470
 80068e4:	080086ac 	.word	0x080086ac

080068e8 <_Bfree>:
 80068e8:	b570      	push	{r4, r5, r6, lr}
 80068ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80068ec:	4605      	mov	r5, r0
 80068ee:	460c      	mov	r4, r1
 80068f0:	b976      	cbnz	r6, 8006910 <_Bfree+0x28>
 80068f2:	2010      	movs	r0, #16
 80068f4:	f7fe fb40 	bl	8004f78 <malloc>
 80068f8:	4602      	mov	r2, r0
 80068fa:	6268      	str	r0, [r5, #36]	; 0x24
 80068fc:	b920      	cbnz	r0, 8006908 <_Bfree+0x20>
 80068fe:	4b09      	ldr	r3, [pc, #36]	; (8006924 <_Bfree+0x3c>)
 8006900:	4809      	ldr	r0, [pc, #36]	; (8006928 <_Bfree+0x40>)
 8006902:	218a      	movs	r1, #138	; 0x8a
 8006904:	f7ff fbf2 	bl	80060ec <__assert_func>
 8006908:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800690c:	6006      	str	r6, [r0, #0]
 800690e:	60c6      	str	r6, [r0, #12]
 8006910:	b13c      	cbz	r4, 8006922 <_Bfree+0x3a>
 8006912:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006914:	6862      	ldr	r2, [r4, #4]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800691c:	6021      	str	r1, [r4, #0]
 800691e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006922:	bd70      	pop	{r4, r5, r6, pc}
 8006924:	08008470 	.word	0x08008470
 8006928:	080086ac 	.word	0x080086ac

0800692c <__multadd>:
 800692c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006930:	690d      	ldr	r5, [r1, #16]
 8006932:	4607      	mov	r7, r0
 8006934:	460c      	mov	r4, r1
 8006936:	461e      	mov	r6, r3
 8006938:	f101 0c14 	add.w	ip, r1, #20
 800693c:	2000      	movs	r0, #0
 800693e:	f8dc 3000 	ldr.w	r3, [ip]
 8006942:	b299      	uxth	r1, r3
 8006944:	fb02 6101 	mla	r1, r2, r1, r6
 8006948:	0c1e      	lsrs	r6, r3, #16
 800694a:	0c0b      	lsrs	r3, r1, #16
 800694c:	fb02 3306 	mla	r3, r2, r6, r3
 8006950:	b289      	uxth	r1, r1
 8006952:	3001      	adds	r0, #1
 8006954:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006958:	4285      	cmp	r5, r0
 800695a:	f84c 1b04 	str.w	r1, [ip], #4
 800695e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006962:	dcec      	bgt.n	800693e <__multadd+0x12>
 8006964:	b30e      	cbz	r6, 80069aa <__multadd+0x7e>
 8006966:	68a3      	ldr	r3, [r4, #8]
 8006968:	42ab      	cmp	r3, r5
 800696a:	dc19      	bgt.n	80069a0 <__multadd+0x74>
 800696c:	6861      	ldr	r1, [r4, #4]
 800696e:	4638      	mov	r0, r7
 8006970:	3101      	adds	r1, #1
 8006972:	f7ff ff79 	bl	8006868 <_Balloc>
 8006976:	4680      	mov	r8, r0
 8006978:	b928      	cbnz	r0, 8006986 <__multadd+0x5a>
 800697a:	4602      	mov	r2, r0
 800697c:	4b0c      	ldr	r3, [pc, #48]	; (80069b0 <__multadd+0x84>)
 800697e:	480d      	ldr	r0, [pc, #52]	; (80069b4 <__multadd+0x88>)
 8006980:	21b5      	movs	r1, #181	; 0xb5
 8006982:	f7ff fbb3 	bl	80060ec <__assert_func>
 8006986:	6922      	ldr	r2, [r4, #16]
 8006988:	3202      	adds	r2, #2
 800698a:	f104 010c 	add.w	r1, r4, #12
 800698e:	0092      	lsls	r2, r2, #2
 8006990:	300c      	adds	r0, #12
 8006992:	f7fe fb01 	bl	8004f98 <memcpy>
 8006996:	4621      	mov	r1, r4
 8006998:	4638      	mov	r0, r7
 800699a:	f7ff ffa5 	bl	80068e8 <_Bfree>
 800699e:	4644      	mov	r4, r8
 80069a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80069a4:	3501      	adds	r5, #1
 80069a6:	615e      	str	r6, [r3, #20]
 80069a8:	6125      	str	r5, [r4, #16]
 80069aa:	4620      	mov	r0, r4
 80069ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069b0:	08008621 	.word	0x08008621
 80069b4:	080086ac 	.word	0x080086ac

080069b8 <__s2b>:
 80069b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069bc:	460c      	mov	r4, r1
 80069be:	4615      	mov	r5, r2
 80069c0:	461f      	mov	r7, r3
 80069c2:	2209      	movs	r2, #9
 80069c4:	3308      	adds	r3, #8
 80069c6:	4606      	mov	r6, r0
 80069c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80069cc:	2100      	movs	r1, #0
 80069ce:	2201      	movs	r2, #1
 80069d0:	429a      	cmp	r2, r3
 80069d2:	db09      	blt.n	80069e8 <__s2b+0x30>
 80069d4:	4630      	mov	r0, r6
 80069d6:	f7ff ff47 	bl	8006868 <_Balloc>
 80069da:	b940      	cbnz	r0, 80069ee <__s2b+0x36>
 80069dc:	4602      	mov	r2, r0
 80069de:	4b19      	ldr	r3, [pc, #100]	; (8006a44 <__s2b+0x8c>)
 80069e0:	4819      	ldr	r0, [pc, #100]	; (8006a48 <__s2b+0x90>)
 80069e2:	21ce      	movs	r1, #206	; 0xce
 80069e4:	f7ff fb82 	bl	80060ec <__assert_func>
 80069e8:	0052      	lsls	r2, r2, #1
 80069ea:	3101      	adds	r1, #1
 80069ec:	e7f0      	b.n	80069d0 <__s2b+0x18>
 80069ee:	9b08      	ldr	r3, [sp, #32]
 80069f0:	6143      	str	r3, [r0, #20]
 80069f2:	2d09      	cmp	r5, #9
 80069f4:	f04f 0301 	mov.w	r3, #1
 80069f8:	6103      	str	r3, [r0, #16]
 80069fa:	dd16      	ble.n	8006a2a <__s2b+0x72>
 80069fc:	f104 0909 	add.w	r9, r4, #9
 8006a00:	46c8      	mov	r8, r9
 8006a02:	442c      	add	r4, r5
 8006a04:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006a08:	4601      	mov	r1, r0
 8006a0a:	3b30      	subs	r3, #48	; 0x30
 8006a0c:	220a      	movs	r2, #10
 8006a0e:	4630      	mov	r0, r6
 8006a10:	f7ff ff8c 	bl	800692c <__multadd>
 8006a14:	45a0      	cmp	r8, r4
 8006a16:	d1f5      	bne.n	8006a04 <__s2b+0x4c>
 8006a18:	f1a5 0408 	sub.w	r4, r5, #8
 8006a1c:	444c      	add	r4, r9
 8006a1e:	1b2d      	subs	r5, r5, r4
 8006a20:	1963      	adds	r3, r4, r5
 8006a22:	42bb      	cmp	r3, r7
 8006a24:	db04      	blt.n	8006a30 <__s2b+0x78>
 8006a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a2a:	340a      	adds	r4, #10
 8006a2c:	2509      	movs	r5, #9
 8006a2e:	e7f6      	b.n	8006a1e <__s2b+0x66>
 8006a30:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006a34:	4601      	mov	r1, r0
 8006a36:	3b30      	subs	r3, #48	; 0x30
 8006a38:	220a      	movs	r2, #10
 8006a3a:	4630      	mov	r0, r6
 8006a3c:	f7ff ff76 	bl	800692c <__multadd>
 8006a40:	e7ee      	b.n	8006a20 <__s2b+0x68>
 8006a42:	bf00      	nop
 8006a44:	08008621 	.word	0x08008621
 8006a48:	080086ac 	.word	0x080086ac

08006a4c <__hi0bits>:
 8006a4c:	0c03      	lsrs	r3, r0, #16
 8006a4e:	041b      	lsls	r3, r3, #16
 8006a50:	b9d3      	cbnz	r3, 8006a88 <__hi0bits+0x3c>
 8006a52:	0400      	lsls	r0, r0, #16
 8006a54:	2310      	movs	r3, #16
 8006a56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006a5a:	bf04      	itt	eq
 8006a5c:	0200      	lsleq	r0, r0, #8
 8006a5e:	3308      	addeq	r3, #8
 8006a60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006a64:	bf04      	itt	eq
 8006a66:	0100      	lsleq	r0, r0, #4
 8006a68:	3304      	addeq	r3, #4
 8006a6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006a6e:	bf04      	itt	eq
 8006a70:	0080      	lsleq	r0, r0, #2
 8006a72:	3302      	addeq	r3, #2
 8006a74:	2800      	cmp	r0, #0
 8006a76:	db05      	blt.n	8006a84 <__hi0bits+0x38>
 8006a78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006a7c:	f103 0301 	add.w	r3, r3, #1
 8006a80:	bf08      	it	eq
 8006a82:	2320      	moveq	r3, #32
 8006a84:	4618      	mov	r0, r3
 8006a86:	4770      	bx	lr
 8006a88:	2300      	movs	r3, #0
 8006a8a:	e7e4      	b.n	8006a56 <__hi0bits+0xa>

08006a8c <__lo0bits>:
 8006a8c:	6803      	ldr	r3, [r0, #0]
 8006a8e:	f013 0207 	ands.w	r2, r3, #7
 8006a92:	4601      	mov	r1, r0
 8006a94:	d00b      	beq.n	8006aae <__lo0bits+0x22>
 8006a96:	07da      	lsls	r2, r3, #31
 8006a98:	d423      	bmi.n	8006ae2 <__lo0bits+0x56>
 8006a9a:	0798      	lsls	r0, r3, #30
 8006a9c:	bf49      	itett	mi
 8006a9e:	085b      	lsrmi	r3, r3, #1
 8006aa0:	089b      	lsrpl	r3, r3, #2
 8006aa2:	2001      	movmi	r0, #1
 8006aa4:	600b      	strmi	r3, [r1, #0]
 8006aa6:	bf5c      	itt	pl
 8006aa8:	600b      	strpl	r3, [r1, #0]
 8006aaa:	2002      	movpl	r0, #2
 8006aac:	4770      	bx	lr
 8006aae:	b298      	uxth	r0, r3
 8006ab0:	b9a8      	cbnz	r0, 8006ade <__lo0bits+0x52>
 8006ab2:	0c1b      	lsrs	r3, r3, #16
 8006ab4:	2010      	movs	r0, #16
 8006ab6:	b2da      	uxtb	r2, r3
 8006ab8:	b90a      	cbnz	r2, 8006abe <__lo0bits+0x32>
 8006aba:	3008      	adds	r0, #8
 8006abc:	0a1b      	lsrs	r3, r3, #8
 8006abe:	071a      	lsls	r2, r3, #28
 8006ac0:	bf04      	itt	eq
 8006ac2:	091b      	lsreq	r3, r3, #4
 8006ac4:	3004      	addeq	r0, #4
 8006ac6:	079a      	lsls	r2, r3, #30
 8006ac8:	bf04      	itt	eq
 8006aca:	089b      	lsreq	r3, r3, #2
 8006acc:	3002      	addeq	r0, #2
 8006ace:	07da      	lsls	r2, r3, #31
 8006ad0:	d403      	bmi.n	8006ada <__lo0bits+0x4e>
 8006ad2:	085b      	lsrs	r3, r3, #1
 8006ad4:	f100 0001 	add.w	r0, r0, #1
 8006ad8:	d005      	beq.n	8006ae6 <__lo0bits+0x5a>
 8006ada:	600b      	str	r3, [r1, #0]
 8006adc:	4770      	bx	lr
 8006ade:	4610      	mov	r0, r2
 8006ae0:	e7e9      	b.n	8006ab6 <__lo0bits+0x2a>
 8006ae2:	2000      	movs	r0, #0
 8006ae4:	4770      	bx	lr
 8006ae6:	2020      	movs	r0, #32
 8006ae8:	4770      	bx	lr
	...

08006aec <__i2b>:
 8006aec:	b510      	push	{r4, lr}
 8006aee:	460c      	mov	r4, r1
 8006af0:	2101      	movs	r1, #1
 8006af2:	f7ff feb9 	bl	8006868 <_Balloc>
 8006af6:	4602      	mov	r2, r0
 8006af8:	b928      	cbnz	r0, 8006b06 <__i2b+0x1a>
 8006afa:	4b05      	ldr	r3, [pc, #20]	; (8006b10 <__i2b+0x24>)
 8006afc:	4805      	ldr	r0, [pc, #20]	; (8006b14 <__i2b+0x28>)
 8006afe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006b02:	f7ff faf3 	bl	80060ec <__assert_func>
 8006b06:	2301      	movs	r3, #1
 8006b08:	6144      	str	r4, [r0, #20]
 8006b0a:	6103      	str	r3, [r0, #16]
 8006b0c:	bd10      	pop	{r4, pc}
 8006b0e:	bf00      	nop
 8006b10:	08008621 	.word	0x08008621
 8006b14:	080086ac 	.word	0x080086ac

08006b18 <__multiply>:
 8006b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b1c:	4691      	mov	r9, r2
 8006b1e:	690a      	ldr	r2, [r1, #16]
 8006b20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	bfb8      	it	lt
 8006b28:	460b      	movlt	r3, r1
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	bfbc      	itt	lt
 8006b2e:	464c      	movlt	r4, r9
 8006b30:	4699      	movlt	r9, r3
 8006b32:	6927      	ldr	r7, [r4, #16]
 8006b34:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006b38:	68a3      	ldr	r3, [r4, #8]
 8006b3a:	6861      	ldr	r1, [r4, #4]
 8006b3c:	eb07 060a 	add.w	r6, r7, sl
 8006b40:	42b3      	cmp	r3, r6
 8006b42:	b085      	sub	sp, #20
 8006b44:	bfb8      	it	lt
 8006b46:	3101      	addlt	r1, #1
 8006b48:	f7ff fe8e 	bl	8006868 <_Balloc>
 8006b4c:	b930      	cbnz	r0, 8006b5c <__multiply+0x44>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	4b44      	ldr	r3, [pc, #272]	; (8006c64 <__multiply+0x14c>)
 8006b52:	4845      	ldr	r0, [pc, #276]	; (8006c68 <__multiply+0x150>)
 8006b54:	f240 115d 	movw	r1, #349	; 0x15d
 8006b58:	f7ff fac8 	bl	80060ec <__assert_func>
 8006b5c:	f100 0514 	add.w	r5, r0, #20
 8006b60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b64:	462b      	mov	r3, r5
 8006b66:	2200      	movs	r2, #0
 8006b68:	4543      	cmp	r3, r8
 8006b6a:	d321      	bcc.n	8006bb0 <__multiply+0x98>
 8006b6c:	f104 0314 	add.w	r3, r4, #20
 8006b70:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006b74:	f109 0314 	add.w	r3, r9, #20
 8006b78:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006b7c:	9202      	str	r2, [sp, #8]
 8006b7e:	1b3a      	subs	r2, r7, r4
 8006b80:	3a15      	subs	r2, #21
 8006b82:	f022 0203 	bic.w	r2, r2, #3
 8006b86:	3204      	adds	r2, #4
 8006b88:	f104 0115 	add.w	r1, r4, #21
 8006b8c:	428f      	cmp	r7, r1
 8006b8e:	bf38      	it	cc
 8006b90:	2204      	movcc	r2, #4
 8006b92:	9201      	str	r2, [sp, #4]
 8006b94:	9a02      	ldr	r2, [sp, #8]
 8006b96:	9303      	str	r3, [sp, #12]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d80c      	bhi.n	8006bb6 <__multiply+0x9e>
 8006b9c:	2e00      	cmp	r6, #0
 8006b9e:	dd03      	ble.n	8006ba8 <__multiply+0x90>
 8006ba0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d05a      	beq.n	8006c5e <__multiply+0x146>
 8006ba8:	6106      	str	r6, [r0, #16]
 8006baa:	b005      	add	sp, #20
 8006bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb0:	f843 2b04 	str.w	r2, [r3], #4
 8006bb4:	e7d8      	b.n	8006b68 <__multiply+0x50>
 8006bb6:	f8b3 a000 	ldrh.w	sl, [r3]
 8006bba:	f1ba 0f00 	cmp.w	sl, #0
 8006bbe:	d024      	beq.n	8006c0a <__multiply+0xf2>
 8006bc0:	f104 0e14 	add.w	lr, r4, #20
 8006bc4:	46a9      	mov	r9, r5
 8006bc6:	f04f 0c00 	mov.w	ip, #0
 8006bca:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006bce:	f8d9 1000 	ldr.w	r1, [r9]
 8006bd2:	fa1f fb82 	uxth.w	fp, r2
 8006bd6:	b289      	uxth	r1, r1
 8006bd8:	fb0a 110b 	mla	r1, sl, fp, r1
 8006bdc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006be0:	f8d9 2000 	ldr.w	r2, [r9]
 8006be4:	4461      	add	r1, ip
 8006be6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006bea:	fb0a c20b 	mla	r2, sl, fp, ip
 8006bee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006bf2:	b289      	uxth	r1, r1
 8006bf4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006bf8:	4577      	cmp	r7, lr
 8006bfa:	f849 1b04 	str.w	r1, [r9], #4
 8006bfe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006c02:	d8e2      	bhi.n	8006bca <__multiply+0xb2>
 8006c04:	9a01      	ldr	r2, [sp, #4]
 8006c06:	f845 c002 	str.w	ip, [r5, r2]
 8006c0a:	9a03      	ldr	r2, [sp, #12]
 8006c0c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006c10:	3304      	adds	r3, #4
 8006c12:	f1b9 0f00 	cmp.w	r9, #0
 8006c16:	d020      	beq.n	8006c5a <__multiply+0x142>
 8006c18:	6829      	ldr	r1, [r5, #0]
 8006c1a:	f104 0c14 	add.w	ip, r4, #20
 8006c1e:	46ae      	mov	lr, r5
 8006c20:	f04f 0a00 	mov.w	sl, #0
 8006c24:	f8bc b000 	ldrh.w	fp, [ip]
 8006c28:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006c2c:	fb09 220b 	mla	r2, r9, fp, r2
 8006c30:	4492      	add	sl, r2
 8006c32:	b289      	uxth	r1, r1
 8006c34:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006c38:	f84e 1b04 	str.w	r1, [lr], #4
 8006c3c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006c40:	f8be 1000 	ldrh.w	r1, [lr]
 8006c44:	0c12      	lsrs	r2, r2, #16
 8006c46:	fb09 1102 	mla	r1, r9, r2, r1
 8006c4a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006c4e:	4567      	cmp	r7, ip
 8006c50:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006c54:	d8e6      	bhi.n	8006c24 <__multiply+0x10c>
 8006c56:	9a01      	ldr	r2, [sp, #4]
 8006c58:	50a9      	str	r1, [r5, r2]
 8006c5a:	3504      	adds	r5, #4
 8006c5c:	e79a      	b.n	8006b94 <__multiply+0x7c>
 8006c5e:	3e01      	subs	r6, #1
 8006c60:	e79c      	b.n	8006b9c <__multiply+0x84>
 8006c62:	bf00      	nop
 8006c64:	08008621 	.word	0x08008621
 8006c68:	080086ac 	.word	0x080086ac

08006c6c <__pow5mult>:
 8006c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c70:	4615      	mov	r5, r2
 8006c72:	f012 0203 	ands.w	r2, r2, #3
 8006c76:	4606      	mov	r6, r0
 8006c78:	460f      	mov	r7, r1
 8006c7a:	d007      	beq.n	8006c8c <__pow5mult+0x20>
 8006c7c:	4c25      	ldr	r4, [pc, #148]	; (8006d14 <__pow5mult+0xa8>)
 8006c7e:	3a01      	subs	r2, #1
 8006c80:	2300      	movs	r3, #0
 8006c82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c86:	f7ff fe51 	bl	800692c <__multadd>
 8006c8a:	4607      	mov	r7, r0
 8006c8c:	10ad      	asrs	r5, r5, #2
 8006c8e:	d03d      	beq.n	8006d0c <__pow5mult+0xa0>
 8006c90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006c92:	b97c      	cbnz	r4, 8006cb4 <__pow5mult+0x48>
 8006c94:	2010      	movs	r0, #16
 8006c96:	f7fe f96f 	bl	8004f78 <malloc>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	6270      	str	r0, [r6, #36]	; 0x24
 8006c9e:	b928      	cbnz	r0, 8006cac <__pow5mult+0x40>
 8006ca0:	4b1d      	ldr	r3, [pc, #116]	; (8006d18 <__pow5mult+0xac>)
 8006ca2:	481e      	ldr	r0, [pc, #120]	; (8006d1c <__pow5mult+0xb0>)
 8006ca4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006ca8:	f7ff fa20 	bl	80060ec <__assert_func>
 8006cac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006cb0:	6004      	str	r4, [r0, #0]
 8006cb2:	60c4      	str	r4, [r0, #12]
 8006cb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006cb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006cbc:	b94c      	cbnz	r4, 8006cd2 <__pow5mult+0x66>
 8006cbe:	f240 2171 	movw	r1, #625	; 0x271
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	f7ff ff12 	bl	8006aec <__i2b>
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f8c8 0008 	str.w	r0, [r8, #8]
 8006cce:	4604      	mov	r4, r0
 8006cd0:	6003      	str	r3, [r0, #0]
 8006cd2:	f04f 0900 	mov.w	r9, #0
 8006cd6:	07eb      	lsls	r3, r5, #31
 8006cd8:	d50a      	bpl.n	8006cf0 <__pow5mult+0x84>
 8006cda:	4639      	mov	r1, r7
 8006cdc:	4622      	mov	r2, r4
 8006cde:	4630      	mov	r0, r6
 8006ce0:	f7ff ff1a 	bl	8006b18 <__multiply>
 8006ce4:	4639      	mov	r1, r7
 8006ce6:	4680      	mov	r8, r0
 8006ce8:	4630      	mov	r0, r6
 8006cea:	f7ff fdfd 	bl	80068e8 <_Bfree>
 8006cee:	4647      	mov	r7, r8
 8006cf0:	106d      	asrs	r5, r5, #1
 8006cf2:	d00b      	beq.n	8006d0c <__pow5mult+0xa0>
 8006cf4:	6820      	ldr	r0, [r4, #0]
 8006cf6:	b938      	cbnz	r0, 8006d08 <__pow5mult+0x9c>
 8006cf8:	4622      	mov	r2, r4
 8006cfa:	4621      	mov	r1, r4
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	f7ff ff0b 	bl	8006b18 <__multiply>
 8006d02:	6020      	str	r0, [r4, #0]
 8006d04:	f8c0 9000 	str.w	r9, [r0]
 8006d08:	4604      	mov	r4, r0
 8006d0a:	e7e4      	b.n	8006cd6 <__pow5mult+0x6a>
 8006d0c:	4638      	mov	r0, r7
 8006d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d12:	bf00      	nop
 8006d14:	080087f8 	.word	0x080087f8
 8006d18:	08008470 	.word	0x08008470
 8006d1c:	080086ac 	.word	0x080086ac

08006d20 <__lshift>:
 8006d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d24:	460c      	mov	r4, r1
 8006d26:	6849      	ldr	r1, [r1, #4]
 8006d28:	6923      	ldr	r3, [r4, #16]
 8006d2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d2e:	68a3      	ldr	r3, [r4, #8]
 8006d30:	4607      	mov	r7, r0
 8006d32:	4691      	mov	r9, r2
 8006d34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d38:	f108 0601 	add.w	r6, r8, #1
 8006d3c:	42b3      	cmp	r3, r6
 8006d3e:	db0b      	blt.n	8006d58 <__lshift+0x38>
 8006d40:	4638      	mov	r0, r7
 8006d42:	f7ff fd91 	bl	8006868 <_Balloc>
 8006d46:	4605      	mov	r5, r0
 8006d48:	b948      	cbnz	r0, 8006d5e <__lshift+0x3e>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	4b2a      	ldr	r3, [pc, #168]	; (8006df8 <__lshift+0xd8>)
 8006d4e:	482b      	ldr	r0, [pc, #172]	; (8006dfc <__lshift+0xdc>)
 8006d50:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006d54:	f7ff f9ca 	bl	80060ec <__assert_func>
 8006d58:	3101      	adds	r1, #1
 8006d5a:	005b      	lsls	r3, r3, #1
 8006d5c:	e7ee      	b.n	8006d3c <__lshift+0x1c>
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f100 0114 	add.w	r1, r0, #20
 8006d64:	f100 0210 	add.w	r2, r0, #16
 8006d68:	4618      	mov	r0, r3
 8006d6a:	4553      	cmp	r3, sl
 8006d6c:	db37      	blt.n	8006dde <__lshift+0xbe>
 8006d6e:	6920      	ldr	r0, [r4, #16]
 8006d70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d74:	f104 0314 	add.w	r3, r4, #20
 8006d78:	f019 091f 	ands.w	r9, r9, #31
 8006d7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006d84:	d02f      	beq.n	8006de6 <__lshift+0xc6>
 8006d86:	f1c9 0e20 	rsb	lr, r9, #32
 8006d8a:	468a      	mov	sl, r1
 8006d8c:	f04f 0c00 	mov.w	ip, #0
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	fa02 f209 	lsl.w	r2, r2, r9
 8006d96:	ea42 020c 	orr.w	r2, r2, ip
 8006d9a:	f84a 2b04 	str.w	r2, [sl], #4
 8006d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006da2:	4298      	cmp	r0, r3
 8006da4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006da8:	d8f2      	bhi.n	8006d90 <__lshift+0x70>
 8006daa:	1b03      	subs	r3, r0, r4
 8006dac:	3b15      	subs	r3, #21
 8006dae:	f023 0303 	bic.w	r3, r3, #3
 8006db2:	3304      	adds	r3, #4
 8006db4:	f104 0215 	add.w	r2, r4, #21
 8006db8:	4290      	cmp	r0, r2
 8006dba:	bf38      	it	cc
 8006dbc:	2304      	movcc	r3, #4
 8006dbe:	f841 c003 	str.w	ip, [r1, r3]
 8006dc2:	f1bc 0f00 	cmp.w	ip, #0
 8006dc6:	d001      	beq.n	8006dcc <__lshift+0xac>
 8006dc8:	f108 0602 	add.w	r6, r8, #2
 8006dcc:	3e01      	subs	r6, #1
 8006dce:	4638      	mov	r0, r7
 8006dd0:	612e      	str	r6, [r5, #16]
 8006dd2:	4621      	mov	r1, r4
 8006dd4:	f7ff fd88 	bl	80068e8 <_Bfree>
 8006dd8:	4628      	mov	r0, r5
 8006dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dde:	f842 0f04 	str.w	r0, [r2, #4]!
 8006de2:	3301      	adds	r3, #1
 8006de4:	e7c1      	b.n	8006d6a <__lshift+0x4a>
 8006de6:	3904      	subs	r1, #4
 8006de8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dec:	f841 2f04 	str.w	r2, [r1, #4]!
 8006df0:	4298      	cmp	r0, r3
 8006df2:	d8f9      	bhi.n	8006de8 <__lshift+0xc8>
 8006df4:	e7ea      	b.n	8006dcc <__lshift+0xac>
 8006df6:	bf00      	nop
 8006df8:	08008621 	.word	0x08008621
 8006dfc:	080086ac 	.word	0x080086ac

08006e00 <__mcmp>:
 8006e00:	b530      	push	{r4, r5, lr}
 8006e02:	6902      	ldr	r2, [r0, #16]
 8006e04:	690c      	ldr	r4, [r1, #16]
 8006e06:	1b12      	subs	r2, r2, r4
 8006e08:	d10e      	bne.n	8006e28 <__mcmp+0x28>
 8006e0a:	f100 0314 	add.w	r3, r0, #20
 8006e0e:	3114      	adds	r1, #20
 8006e10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006e14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006e18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006e1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006e20:	42a5      	cmp	r5, r4
 8006e22:	d003      	beq.n	8006e2c <__mcmp+0x2c>
 8006e24:	d305      	bcc.n	8006e32 <__mcmp+0x32>
 8006e26:	2201      	movs	r2, #1
 8006e28:	4610      	mov	r0, r2
 8006e2a:	bd30      	pop	{r4, r5, pc}
 8006e2c:	4283      	cmp	r3, r0
 8006e2e:	d3f3      	bcc.n	8006e18 <__mcmp+0x18>
 8006e30:	e7fa      	b.n	8006e28 <__mcmp+0x28>
 8006e32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e36:	e7f7      	b.n	8006e28 <__mcmp+0x28>

08006e38 <__mdiff>:
 8006e38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e3c:	460c      	mov	r4, r1
 8006e3e:	4606      	mov	r6, r0
 8006e40:	4611      	mov	r1, r2
 8006e42:	4620      	mov	r0, r4
 8006e44:	4690      	mov	r8, r2
 8006e46:	f7ff ffdb 	bl	8006e00 <__mcmp>
 8006e4a:	1e05      	subs	r5, r0, #0
 8006e4c:	d110      	bne.n	8006e70 <__mdiff+0x38>
 8006e4e:	4629      	mov	r1, r5
 8006e50:	4630      	mov	r0, r6
 8006e52:	f7ff fd09 	bl	8006868 <_Balloc>
 8006e56:	b930      	cbnz	r0, 8006e66 <__mdiff+0x2e>
 8006e58:	4b3a      	ldr	r3, [pc, #232]	; (8006f44 <__mdiff+0x10c>)
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	f240 2132 	movw	r1, #562	; 0x232
 8006e60:	4839      	ldr	r0, [pc, #228]	; (8006f48 <__mdiff+0x110>)
 8006e62:	f7ff f943 	bl	80060ec <__assert_func>
 8006e66:	2301      	movs	r3, #1
 8006e68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e70:	bfa4      	itt	ge
 8006e72:	4643      	movge	r3, r8
 8006e74:	46a0      	movge	r8, r4
 8006e76:	4630      	mov	r0, r6
 8006e78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006e7c:	bfa6      	itte	ge
 8006e7e:	461c      	movge	r4, r3
 8006e80:	2500      	movge	r5, #0
 8006e82:	2501      	movlt	r5, #1
 8006e84:	f7ff fcf0 	bl	8006868 <_Balloc>
 8006e88:	b920      	cbnz	r0, 8006e94 <__mdiff+0x5c>
 8006e8a:	4b2e      	ldr	r3, [pc, #184]	; (8006f44 <__mdiff+0x10c>)
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006e92:	e7e5      	b.n	8006e60 <__mdiff+0x28>
 8006e94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006e98:	6926      	ldr	r6, [r4, #16]
 8006e9a:	60c5      	str	r5, [r0, #12]
 8006e9c:	f104 0914 	add.w	r9, r4, #20
 8006ea0:	f108 0514 	add.w	r5, r8, #20
 8006ea4:	f100 0e14 	add.w	lr, r0, #20
 8006ea8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006eac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006eb0:	f108 0210 	add.w	r2, r8, #16
 8006eb4:	46f2      	mov	sl, lr
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ebc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006ec0:	fa1f f883 	uxth.w	r8, r3
 8006ec4:	fa11 f18b 	uxtah	r1, r1, fp
 8006ec8:	0c1b      	lsrs	r3, r3, #16
 8006eca:	eba1 0808 	sub.w	r8, r1, r8
 8006ece:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006ed2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006ed6:	fa1f f888 	uxth.w	r8, r8
 8006eda:	1419      	asrs	r1, r3, #16
 8006edc:	454e      	cmp	r6, r9
 8006ede:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006ee2:	f84a 3b04 	str.w	r3, [sl], #4
 8006ee6:	d8e7      	bhi.n	8006eb8 <__mdiff+0x80>
 8006ee8:	1b33      	subs	r3, r6, r4
 8006eea:	3b15      	subs	r3, #21
 8006eec:	f023 0303 	bic.w	r3, r3, #3
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	3415      	adds	r4, #21
 8006ef4:	42a6      	cmp	r6, r4
 8006ef6:	bf38      	it	cc
 8006ef8:	2304      	movcc	r3, #4
 8006efa:	441d      	add	r5, r3
 8006efc:	4473      	add	r3, lr
 8006efe:	469e      	mov	lr, r3
 8006f00:	462e      	mov	r6, r5
 8006f02:	4566      	cmp	r6, ip
 8006f04:	d30e      	bcc.n	8006f24 <__mdiff+0xec>
 8006f06:	f10c 0203 	add.w	r2, ip, #3
 8006f0a:	1b52      	subs	r2, r2, r5
 8006f0c:	f022 0203 	bic.w	r2, r2, #3
 8006f10:	3d03      	subs	r5, #3
 8006f12:	45ac      	cmp	ip, r5
 8006f14:	bf38      	it	cc
 8006f16:	2200      	movcc	r2, #0
 8006f18:	441a      	add	r2, r3
 8006f1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006f1e:	b17b      	cbz	r3, 8006f40 <__mdiff+0x108>
 8006f20:	6107      	str	r7, [r0, #16]
 8006f22:	e7a3      	b.n	8006e6c <__mdiff+0x34>
 8006f24:	f856 8b04 	ldr.w	r8, [r6], #4
 8006f28:	fa11 f288 	uxtah	r2, r1, r8
 8006f2c:	1414      	asrs	r4, r2, #16
 8006f2e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006f32:	b292      	uxth	r2, r2
 8006f34:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006f38:	f84e 2b04 	str.w	r2, [lr], #4
 8006f3c:	1421      	asrs	r1, r4, #16
 8006f3e:	e7e0      	b.n	8006f02 <__mdiff+0xca>
 8006f40:	3f01      	subs	r7, #1
 8006f42:	e7ea      	b.n	8006f1a <__mdiff+0xe2>
 8006f44:	08008621 	.word	0x08008621
 8006f48:	080086ac 	.word	0x080086ac

08006f4c <__ulp>:
 8006f4c:	b082      	sub	sp, #8
 8006f4e:	ed8d 0b00 	vstr	d0, [sp]
 8006f52:	9b01      	ldr	r3, [sp, #4]
 8006f54:	4912      	ldr	r1, [pc, #72]	; (8006fa0 <__ulp+0x54>)
 8006f56:	4019      	ands	r1, r3
 8006f58:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8006f5c:	2900      	cmp	r1, #0
 8006f5e:	dd05      	ble.n	8006f6c <__ulp+0x20>
 8006f60:	2200      	movs	r2, #0
 8006f62:	460b      	mov	r3, r1
 8006f64:	ec43 2b10 	vmov	d0, r2, r3
 8006f68:	b002      	add	sp, #8
 8006f6a:	4770      	bx	lr
 8006f6c:	4249      	negs	r1, r1
 8006f6e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8006f72:	ea4f 5021 	mov.w	r0, r1, asr #20
 8006f76:	f04f 0200 	mov.w	r2, #0
 8006f7a:	f04f 0300 	mov.w	r3, #0
 8006f7e:	da04      	bge.n	8006f8a <__ulp+0x3e>
 8006f80:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8006f84:	fa41 f300 	asr.w	r3, r1, r0
 8006f88:	e7ec      	b.n	8006f64 <__ulp+0x18>
 8006f8a:	f1a0 0114 	sub.w	r1, r0, #20
 8006f8e:	291e      	cmp	r1, #30
 8006f90:	bfda      	itte	le
 8006f92:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8006f96:	fa20 f101 	lsrle.w	r1, r0, r1
 8006f9a:	2101      	movgt	r1, #1
 8006f9c:	460a      	mov	r2, r1
 8006f9e:	e7e1      	b.n	8006f64 <__ulp+0x18>
 8006fa0:	7ff00000 	.word	0x7ff00000

08006fa4 <__b2d>:
 8006fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa6:	6905      	ldr	r5, [r0, #16]
 8006fa8:	f100 0714 	add.w	r7, r0, #20
 8006fac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006fb0:	1f2e      	subs	r6, r5, #4
 8006fb2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	f7ff fd48 	bl	8006a4c <__hi0bits>
 8006fbc:	f1c0 0320 	rsb	r3, r0, #32
 8006fc0:	280a      	cmp	r0, #10
 8006fc2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007040 <__b2d+0x9c>
 8006fc6:	600b      	str	r3, [r1, #0]
 8006fc8:	dc14      	bgt.n	8006ff4 <__b2d+0x50>
 8006fca:	f1c0 0e0b 	rsb	lr, r0, #11
 8006fce:	fa24 f10e 	lsr.w	r1, r4, lr
 8006fd2:	42b7      	cmp	r7, r6
 8006fd4:	ea41 030c 	orr.w	r3, r1, ip
 8006fd8:	bf34      	ite	cc
 8006fda:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006fde:	2100      	movcs	r1, #0
 8006fe0:	3015      	adds	r0, #21
 8006fe2:	fa04 f000 	lsl.w	r0, r4, r0
 8006fe6:	fa21 f10e 	lsr.w	r1, r1, lr
 8006fea:	ea40 0201 	orr.w	r2, r0, r1
 8006fee:	ec43 2b10 	vmov	d0, r2, r3
 8006ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ff4:	42b7      	cmp	r7, r6
 8006ff6:	bf3a      	itte	cc
 8006ff8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006ffc:	f1a5 0608 	subcc.w	r6, r5, #8
 8007000:	2100      	movcs	r1, #0
 8007002:	380b      	subs	r0, #11
 8007004:	d017      	beq.n	8007036 <__b2d+0x92>
 8007006:	f1c0 0c20 	rsb	ip, r0, #32
 800700a:	fa04 f500 	lsl.w	r5, r4, r0
 800700e:	42be      	cmp	r6, r7
 8007010:	fa21 f40c 	lsr.w	r4, r1, ip
 8007014:	ea45 0504 	orr.w	r5, r5, r4
 8007018:	bf8c      	ite	hi
 800701a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800701e:	2400      	movls	r4, #0
 8007020:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007024:	fa01 f000 	lsl.w	r0, r1, r0
 8007028:	fa24 f40c 	lsr.w	r4, r4, ip
 800702c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007030:	ea40 0204 	orr.w	r2, r0, r4
 8007034:	e7db      	b.n	8006fee <__b2d+0x4a>
 8007036:	ea44 030c 	orr.w	r3, r4, ip
 800703a:	460a      	mov	r2, r1
 800703c:	e7d7      	b.n	8006fee <__b2d+0x4a>
 800703e:	bf00      	nop
 8007040:	3ff00000 	.word	0x3ff00000

08007044 <__d2b>:
 8007044:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007048:	4689      	mov	r9, r1
 800704a:	2101      	movs	r1, #1
 800704c:	ec57 6b10 	vmov	r6, r7, d0
 8007050:	4690      	mov	r8, r2
 8007052:	f7ff fc09 	bl	8006868 <_Balloc>
 8007056:	4604      	mov	r4, r0
 8007058:	b930      	cbnz	r0, 8007068 <__d2b+0x24>
 800705a:	4602      	mov	r2, r0
 800705c:	4b25      	ldr	r3, [pc, #148]	; (80070f4 <__d2b+0xb0>)
 800705e:	4826      	ldr	r0, [pc, #152]	; (80070f8 <__d2b+0xb4>)
 8007060:	f240 310a 	movw	r1, #778	; 0x30a
 8007064:	f7ff f842 	bl	80060ec <__assert_func>
 8007068:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800706c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007070:	bb35      	cbnz	r5, 80070c0 <__d2b+0x7c>
 8007072:	2e00      	cmp	r6, #0
 8007074:	9301      	str	r3, [sp, #4]
 8007076:	d028      	beq.n	80070ca <__d2b+0x86>
 8007078:	4668      	mov	r0, sp
 800707a:	9600      	str	r6, [sp, #0]
 800707c:	f7ff fd06 	bl	8006a8c <__lo0bits>
 8007080:	9900      	ldr	r1, [sp, #0]
 8007082:	b300      	cbz	r0, 80070c6 <__d2b+0x82>
 8007084:	9a01      	ldr	r2, [sp, #4]
 8007086:	f1c0 0320 	rsb	r3, r0, #32
 800708a:	fa02 f303 	lsl.w	r3, r2, r3
 800708e:	430b      	orrs	r3, r1
 8007090:	40c2      	lsrs	r2, r0
 8007092:	6163      	str	r3, [r4, #20]
 8007094:	9201      	str	r2, [sp, #4]
 8007096:	9b01      	ldr	r3, [sp, #4]
 8007098:	61a3      	str	r3, [r4, #24]
 800709a:	2b00      	cmp	r3, #0
 800709c:	bf14      	ite	ne
 800709e:	2202      	movne	r2, #2
 80070a0:	2201      	moveq	r2, #1
 80070a2:	6122      	str	r2, [r4, #16]
 80070a4:	b1d5      	cbz	r5, 80070dc <__d2b+0x98>
 80070a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80070aa:	4405      	add	r5, r0
 80070ac:	f8c9 5000 	str.w	r5, [r9]
 80070b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80070b4:	f8c8 0000 	str.w	r0, [r8]
 80070b8:	4620      	mov	r0, r4
 80070ba:	b003      	add	sp, #12
 80070bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070c4:	e7d5      	b.n	8007072 <__d2b+0x2e>
 80070c6:	6161      	str	r1, [r4, #20]
 80070c8:	e7e5      	b.n	8007096 <__d2b+0x52>
 80070ca:	a801      	add	r0, sp, #4
 80070cc:	f7ff fcde 	bl	8006a8c <__lo0bits>
 80070d0:	9b01      	ldr	r3, [sp, #4]
 80070d2:	6163      	str	r3, [r4, #20]
 80070d4:	2201      	movs	r2, #1
 80070d6:	6122      	str	r2, [r4, #16]
 80070d8:	3020      	adds	r0, #32
 80070da:	e7e3      	b.n	80070a4 <__d2b+0x60>
 80070dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80070e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80070e4:	f8c9 0000 	str.w	r0, [r9]
 80070e8:	6918      	ldr	r0, [r3, #16]
 80070ea:	f7ff fcaf 	bl	8006a4c <__hi0bits>
 80070ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80070f2:	e7df      	b.n	80070b4 <__d2b+0x70>
 80070f4:	08008621 	.word	0x08008621
 80070f8:	080086ac 	.word	0x080086ac

080070fc <__ratio>:
 80070fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007100:	4688      	mov	r8, r1
 8007102:	4669      	mov	r1, sp
 8007104:	4681      	mov	r9, r0
 8007106:	f7ff ff4d 	bl	8006fa4 <__b2d>
 800710a:	a901      	add	r1, sp, #4
 800710c:	4640      	mov	r0, r8
 800710e:	ec55 4b10 	vmov	r4, r5, d0
 8007112:	f7ff ff47 	bl	8006fa4 <__b2d>
 8007116:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800711a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800711e:	eba3 0c02 	sub.w	ip, r3, r2
 8007122:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007126:	1a9b      	subs	r3, r3, r2
 8007128:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800712c:	ec51 0b10 	vmov	r0, r1, d0
 8007130:	2b00      	cmp	r3, #0
 8007132:	bfd6      	itet	le
 8007134:	460a      	movle	r2, r1
 8007136:	462a      	movgt	r2, r5
 8007138:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800713c:	468b      	mov	fp, r1
 800713e:	462f      	mov	r7, r5
 8007140:	bfd4      	ite	le
 8007142:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007146:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800714a:	4620      	mov	r0, r4
 800714c:	ee10 2a10 	vmov	r2, s0
 8007150:	465b      	mov	r3, fp
 8007152:	4639      	mov	r1, r7
 8007154:	f7f9 fb82 	bl	800085c <__aeabi_ddiv>
 8007158:	ec41 0b10 	vmov	d0, r0, r1
 800715c:	b003      	add	sp, #12
 800715e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007162 <__copybits>:
 8007162:	3901      	subs	r1, #1
 8007164:	b570      	push	{r4, r5, r6, lr}
 8007166:	1149      	asrs	r1, r1, #5
 8007168:	6914      	ldr	r4, [r2, #16]
 800716a:	3101      	adds	r1, #1
 800716c:	f102 0314 	add.w	r3, r2, #20
 8007170:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007174:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007178:	1f05      	subs	r5, r0, #4
 800717a:	42a3      	cmp	r3, r4
 800717c:	d30c      	bcc.n	8007198 <__copybits+0x36>
 800717e:	1aa3      	subs	r3, r4, r2
 8007180:	3b11      	subs	r3, #17
 8007182:	f023 0303 	bic.w	r3, r3, #3
 8007186:	3211      	adds	r2, #17
 8007188:	42a2      	cmp	r2, r4
 800718a:	bf88      	it	hi
 800718c:	2300      	movhi	r3, #0
 800718e:	4418      	add	r0, r3
 8007190:	2300      	movs	r3, #0
 8007192:	4288      	cmp	r0, r1
 8007194:	d305      	bcc.n	80071a2 <__copybits+0x40>
 8007196:	bd70      	pop	{r4, r5, r6, pc}
 8007198:	f853 6b04 	ldr.w	r6, [r3], #4
 800719c:	f845 6f04 	str.w	r6, [r5, #4]!
 80071a0:	e7eb      	b.n	800717a <__copybits+0x18>
 80071a2:	f840 3b04 	str.w	r3, [r0], #4
 80071a6:	e7f4      	b.n	8007192 <__copybits+0x30>

080071a8 <__any_on>:
 80071a8:	f100 0214 	add.w	r2, r0, #20
 80071ac:	6900      	ldr	r0, [r0, #16]
 80071ae:	114b      	asrs	r3, r1, #5
 80071b0:	4298      	cmp	r0, r3
 80071b2:	b510      	push	{r4, lr}
 80071b4:	db11      	blt.n	80071da <__any_on+0x32>
 80071b6:	dd0a      	ble.n	80071ce <__any_on+0x26>
 80071b8:	f011 011f 	ands.w	r1, r1, #31
 80071bc:	d007      	beq.n	80071ce <__any_on+0x26>
 80071be:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80071c2:	fa24 f001 	lsr.w	r0, r4, r1
 80071c6:	fa00 f101 	lsl.w	r1, r0, r1
 80071ca:	428c      	cmp	r4, r1
 80071cc:	d10b      	bne.n	80071e6 <__any_on+0x3e>
 80071ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d803      	bhi.n	80071de <__any_on+0x36>
 80071d6:	2000      	movs	r0, #0
 80071d8:	bd10      	pop	{r4, pc}
 80071da:	4603      	mov	r3, r0
 80071dc:	e7f7      	b.n	80071ce <__any_on+0x26>
 80071de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80071e2:	2900      	cmp	r1, #0
 80071e4:	d0f5      	beq.n	80071d2 <__any_on+0x2a>
 80071e6:	2001      	movs	r0, #1
 80071e8:	e7f6      	b.n	80071d8 <__any_on+0x30>

080071ea <_calloc_r>:
 80071ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071ec:	fba1 2402 	umull	r2, r4, r1, r2
 80071f0:	b94c      	cbnz	r4, 8007206 <_calloc_r+0x1c>
 80071f2:	4611      	mov	r1, r2
 80071f4:	9201      	str	r2, [sp, #4]
 80071f6:	f7fd ff51 	bl	800509c <_malloc_r>
 80071fa:	9a01      	ldr	r2, [sp, #4]
 80071fc:	4605      	mov	r5, r0
 80071fe:	b930      	cbnz	r0, 800720e <_calloc_r+0x24>
 8007200:	4628      	mov	r0, r5
 8007202:	b003      	add	sp, #12
 8007204:	bd30      	pop	{r4, r5, pc}
 8007206:	220c      	movs	r2, #12
 8007208:	6002      	str	r2, [r0, #0]
 800720a:	2500      	movs	r5, #0
 800720c:	e7f8      	b.n	8007200 <_calloc_r+0x16>
 800720e:	4621      	mov	r1, r4
 8007210:	f7fd fed0 	bl	8004fb4 <memset>
 8007214:	e7f4      	b.n	8007200 <_calloc_r+0x16>

08007216 <__ssputs_r>:
 8007216:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800721a:	688e      	ldr	r6, [r1, #8]
 800721c:	429e      	cmp	r6, r3
 800721e:	4682      	mov	sl, r0
 8007220:	460c      	mov	r4, r1
 8007222:	4690      	mov	r8, r2
 8007224:	461f      	mov	r7, r3
 8007226:	d838      	bhi.n	800729a <__ssputs_r+0x84>
 8007228:	898a      	ldrh	r2, [r1, #12]
 800722a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800722e:	d032      	beq.n	8007296 <__ssputs_r+0x80>
 8007230:	6825      	ldr	r5, [r4, #0]
 8007232:	6909      	ldr	r1, [r1, #16]
 8007234:	eba5 0901 	sub.w	r9, r5, r1
 8007238:	6965      	ldr	r5, [r4, #20]
 800723a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800723e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007242:	3301      	adds	r3, #1
 8007244:	444b      	add	r3, r9
 8007246:	106d      	asrs	r5, r5, #1
 8007248:	429d      	cmp	r5, r3
 800724a:	bf38      	it	cc
 800724c:	461d      	movcc	r5, r3
 800724e:	0553      	lsls	r3, r2, #21
 8007250:	d531      	bpl.n	80072b6 <__ssputs_r+0xa0>
 8007252:	4629      	mov	r1, r5
 8007254:	f7fd ff22 	bl	800509c <_malloc_r>
 8007258:	4606      	mov	r6, r0
 800725a:	b950      	cbnz	r0, 8007272 <__ssputs_r+0x5c>
 800725c:	230c      	movs	r3, #12
 800725e:	f8ca 3000 	str.w	r3, [sl]
 8007262:	89a3      	ldrh	r3, [r4, #12]
 8007264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007268:	81a3      	strh	r3, [r4, #12]
 800726a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800726e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007272:	6921      	ldr	r1, [r4, #16]
 8007274:	464a      	mov	r2, r9
 8007276:	f7fd fe8f 	bl	8004f98 <memcpy>
 800727a:	89a3      	ldrh	r3, [r4, #12]
 800727c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007284:	81a3      	strh	r3, [r4, #12]
 8007286:	6126      	str	r6, [r4, #16]
 8007288:	6165      	str	r5, [r4, #20]
 800728a:	444e      	add	r6, r9
 800728c:	eba5 0509 	sub.w	r5, r5, r9
 8007290:	6026      	str	r6, [r4, #0]
 8007292:	60a5      	str	r5, [r4, #8]
 8007294:	463e      	mov	r6, r7
 8007296:	42be      	cmp	r6, r7
 8007298:	d900      	bls.n	800729c <__ssputs_r+0x86>
 800729a:	463e      	mov	r6, r7
 800729c:	6820      	ldr	r0, [r4, #0]
 800729e:	4632      	mov	r2, r6
 80072a0:	4641      	mov	r1, r8
 80072a2:	f000 ff19 	bl	80080d8 <memmove>
 80072a6:	68a3      	ldr	r3, [r4, #8]
 80072a8:	1b9b      	subs	r3, r3, r6
 80072aa:	60a3      	str	r3, [r4, #8]
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	4433      	add	r3, r6
 80072b0:	6023      	str	r3, [r4, #0]
 80072b2:	2000      	movs	r0, #0
 80072b4:	e7db      	b.n	800726e <__ssputs_r+0x58>
 80072b6:	462a      	mov	r2, r5
 80072b8:	f000 ff28 	bl	800810c <_realloc_r>
 80072bc:	4606      	mov	r6, r0
 80072be:	2800      	cmp	r0, #0
 80072c0:	d1e1      	bne.n	8007286 <__ssputs_r+0x70>
 80072c2:	6921      	ldr	r1, [r4, #16]
 80072c4:	4650      	mov	r0, sl
 80072c6:	f7fd fe7d 	bl	8004fc4 <_free_r>
 80072ca:	e7c7      	b.n	800725c <__ssputs_r+0x46>

080072cc <_svfiprintf_r>:
 80072cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d0:	4698      	mov	r8, r3
 80072d2:	898b      	ldrh	r3, [r1, #12]
 80072d4:	061b      	lsls	r3, r3, #24
 80072d6:	b09d      	sub	sp, #116	; 0x74
 80072d8:	4607      	mov	r7, r0
 80072da:	460d      	mov	r5, r1
 80072dc:	4614      	mov	r4, r2
 80072de:	d50e      	bpl.n	80072fe <_svfiprintf_r+0x32>
 80072e0:	690b      	ldr	r3, [r1, #16]
 80072e2:	b963      	cbnz	r3, 80072fe <_svfiprintf_r+0x32>
 80072e4:	2140      	movs	r1, #64	; 0x40
 80072e6:	f7fd fed9 	bl	800509c <_malloc_r>
 80072ea:	6028      	str	r0, [r5, #0]
 80072ec:	6128      	str	r0, [r5, #16]
 80072ee:	b920      	cbnz	r0, 80072fa <_svfiprintf_r+0x2e>
 80072f0:	230c      	movs	r3, #12
 80072f2:	603b      	str	r3, [r7, #0]
 80072f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072f8:	e0d1      	b.n	800749e <_svfiprintf_r+0x1d2>
 80072fa:	2340      	movs	r3, #64	; 0x40
 80072fc:	616b      	str	r3, [r5, #20]
 80072fe:	2300      	movs	r3, #0
 8007300:	9309      	str	r3, [sp, #36]	; 0x24
 8007302:	2320      	movs	r3, #32
 8007304:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007308:	f8cd 800c 	str.w	r8, [sp, #12]
 800730c:	2330      	movs	r3, #48	; 0x30
 800730e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80074b8 <_svfiprintf_r+0x1ec>
 8007312:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007316:	f04f 0901 	mov.w	r9, #1
 800731a:	4623      	mov	r3, r4
 800731c:	469a      	mov	sl, r3
 800731e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007322:	b10a      	cbz	r2, 8007328 <_svfiprintf_r+0x5c>
 8007324:	2a25      	cmp	r2, #37	; 0x25
 8007326:	d1f9      	bne.n	800731c <_svfiprintf_r+0x50>
 8007328:	ebba 0b04 	subs.w	fp, sl, r4
 800732c:	d00b      	beq.n	8007346 <_svfiprintf_r+0x7a>
 800732e:	465b      	mov	r3, fp
 8007330:	4622      	mov	r2, r4
 8007332:	4629      	mov	r1, r5
 8007334:	4638      	mov	r0, r7
 8007336:	f7ff ff6e 	bl	8007216 <__ssputs_r>
 800733a:	3001      	adds	r0, #1
 800733c:	f000 80aa 	beq.w	8007494 <_svfiprintf_r+0x1c8>
 8007340:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007342:	445a      	add	r2, fp
 8007344:	9209      	str	r2, [sp, #36]	; 0x24
 8007346:	f89a 3000 	ldrb.w	r3, [sl]
 800734a:	2b00      	cmp	r3, #0
 800734c:	f000 80a2 	beq.w	8007494 <_svfiprintf_r+0x1c8>
 8007350:	2300      	movs	r3, #0
 8007352:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007356:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800735a:	f10a 0a01 	add.w	sl, sl, #1
 800735e:	9304      	str	r3, [sp, #16]
 8007360:	9307      	str	r3, [sp, #28]
 8007362:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007366:	931a      	str	r3, [sp, #104]	; 0x68
 8007368:	4654      	mov	r4, sl
 800736a:	2205      	movs	r2, #5
 800736c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007370:	4851      	ldr	r0, [pc, #324]	; (80074b8 <_svfiprintf_r+0x1ec>)
 8007372:	f7f8 ff3d 	bl	80001f0 <memchr>
 8007376:	9a04      	ldr	r2, [sp, #16]
 8007378:	b9d8      	cbnz	r0, 80073b2 <_svfiprintf_r+0xe6>
 800737a:	06d0      	lsls	r0, r2, #27
 800737c:	bf44      	itt	mi
 800737e:	2320      	movmi	r3, #32
 8007380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007384:	0711      	lsls	r1, r2, #28
 8007386:	bf44      	itt	mi
 8007388:	232b      	movmi	r3, #43	; 0x2b
 800738a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800738e:	f89a 3000 	ldrb.w	r3, [sl]
 8007392:	2b2a      	cmp	r3, #42	; 0x2a
 8007394:	d015      	beq.n	80073c2 <_svfiprintf_r+0xf6>
 8007396:	9a07      	ldr	r2, [sp, #28]
 8007398:	4654      	mov	r4, sl
 800739a:	2000      	movs	r0, #0
 800739c:	f04f 0c0a 	mov.w	ip, #10
 80073a0:	4621      	mov	r1, r4
 80073a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073a6:	3b30      	subs	r3, #48	; 0x30
 80073a8:	2b09      	cmp	r3, #9
 80073aa:	d94e      	bls.n	800744a <_svfiprintf_r+0x17e>
 80073ac:	b1b0      	cbz	r0, 80073dc <_svfiprintf_r+0x110>
 80073ae:	9207      	str	r2, [sp, #28]
 80073b0:	e014      	b.n	80073dc <_svfiprintf_r+0x110>
 80073b2:	eba0 0308 	sub.w	r3, r0, r8
 80073b6:	fa09 f303 	lsl.w	r3, r9, r3
 80073ba:	4313      	orrs	r3, r2
 80073bc:	9304      	str	r3, [sp, #16]
 80073be:	46a2      	mov	sl, r4
 80073c0:	e7d2      	b.n	8007368 <_svfiprintf_r+0x9c>
 80073c2:	9b03      	ldr	r3, [sp, #12]
 80073c4:	1d19      	adds	r1, r3, #4
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	9103      	str	r1, [sp, #12]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	bfbb      	ittet	lt
 80073ce:	425b      	neglt	r3, r3
 80073d0:	f042 0202 	orrlt.w	r2, r2, #2
 80073d4:	9307      	strge	r3, [sp, #28]
 80073d6:	9307      	strlt	r3, [sp, #28]
 80073d8:	bfb8      	it	lt
 80073da:	9204      	strlt	r2, [sp, #16]
 80073dc:	7823      	ldrb	r3, [r4, #0]
 80073de:	2b2e      	cmp	r3, #46	; 0x2e
 80073e0:	d10c      	bne.n	80073fc <_svfiprintf_r+0x130>
 80073e2:	7863      	ldrb	r3, [r4, #1]
 80073e4:	2b2a      	cmp	r3, #42	; 0x2a
 80073e6:	d135      	bne.n	8007454 <_svfiprintf_r+0x188>
 80073e8:	9b03      	ldr	r3, [sp, #12]
 80073ea:	1d1a      	adds	r2, r3, #4
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	9203      	str	r2, [sp, #12]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	bfb8      	it	lt
 80073f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80073f8:	3402      	adds	r4, #2
 80073fa:	9305      	str	r3, [sp, #20]
 80073fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80074c8 <_svfiprintf_r+0x1fc>
 8007400:	7821      	ldrb	r1, [r4, #0]
 8007402:	2203      	movs	r2, #3
 8007404:	4650      	mov	r0, sl
 8007406:	f7f8 fef3 	bl	80001f0 <memchr>
 800740a:	b140      	cbz	r0, 800741e <_svfiprintf_r+0x152>
 800740c:	2340      	movs	r3, #64	; 0x40
 800740e:	eba0 000a 	sub.w	r0, r0, sl
 8007412:	fa03 f000 	lsl.w	r0, r3, r0
 8007416:	9b04      	ldr	r3, [sp, #16]
 8007418:	4303      	orrs	r3, r0
 800741a:	3401      	adds	r4, #1
 800741c:	9304      	str	r3, [sp, #16]
 800741e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007422:	4826      	ldr	r0, [pc, #152]	; (80074bc <_svfiprintf_r+0x1f0>)
 8007424:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007428:	2206      	movs	r2, #6
 800742a:	f7f8 fee1 	bl	80001f0 <memchr>
 800742e:	2800      	cmp	r0, #0
 8007430:	d038      	beq.n	80074a4 <_svfiprintf_r+0x1d8>
 8007432:	4b23      	ldr	r3, [pc, #140]	; (80074c0 <_svfiprintf_r+0x1f4>)
 8007434:	bb1b      	cbnz	r3, 800747e <_svfiprintf_r+0x1b2>
 8007436:	9b03      	ldr	r3, [sp, #12]
 8007438:	3307      	adds	r3, #7
 800743a:	f023 0307 	bic.w	r3, r3, #7
 800743e:	3308      	adds	r3, #8
 8007440:	9303      	str	r3, [sp, #12]
 8007442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007444:	4433      	add	r3, r6
 8007446:	9309      	str	r3, [sp, #36]	; 0x24
 8007448:	e767      	b.n	800731a <_svfiprintf_r+0x4e>
 800744a:	fb0c 3202 	mla	r2, ip, r2, r3
 800744e:	460c      	mov	r4, r1
 8007450:	2001      	movs	r0, #1
 8007452:	e7a5      	b.n	80073a0 <_svfiprintf_r+0xd4>
 8007454:	2300      	movs	r3, #0
 8007456:	3401      	adds	r4, #1
 8007458:	9305      	str	r3, [sp, #20]
 800745a:	4619      	mov	r1, r3
 800745c:	f04f 0c0a 	mov.w	ip, #10
 8007460:	4620      	mov	r0, r4
 8007462:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007466:	3a30      	subs	r2, #48	; 0x30
 8007468:	2a09      	cmp	r2, #9
 800746a:	d903      	bls.n	8007474 <_svfiprintf_r+0x1a8>
 800746c:	2b00      	cmp	r3, #0
 800746e:	d0c5      	beq.n	80073fc <_svfiprintf_r+0x130>
 8007470:	9105      	str	r1, [sp, #20]
 8007472:	e7c3      	b.n	80073fc <_svfiprintf_r+0x130>
 8007474:	fb0c 2101 	mla	r1, ip, r1, r2
 8007478:	4604      	mov	r4, r0
 800747a:	2301      	movs	r3, #1
 800747c:	e7f0      	b.n	8007460 <_svfiprintf_r+0x194>
 800747e:	ab03      	add	r3, sp, #12
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	462a      	mov	r2, r5
 8007484:	4b0f      	ldr	r3, [pc, #60]	; (80074c4 <_svfiprintf_r+0x1f8>)
 8007486:	a904      	add	r1, sp, #16
 8007488:	4638      	mov	r0, r7
 800748a:	f3af 8000 	nop.w
 800748e:	1c42      	adds	r2, r0, #1
 8007490:	4606      	mov	r6, r0
 8007492:	d1d6      	bne.n	8007442 <_svfiprintf_r+0x176>
 8007494:	89ab      	ldrh	r3, [r5, #12]
 8007496:	065b      	lsls	r3, r3, #25
 8007498:	f53f af2c 	bmi.w	80072f4 <_svfiprintf_r+0x28>
 800749c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800749e:	b01d      	add	sp, #116	; 0x74
 80074a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a4:	ab03      	add	r3, sp, #12
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	462a      	mov	r2, r5
 80074aa:	4b06      	ldr	r3, [pc, #24]	; (80074c4 <_svfiprintf_r+0x1f8>)
 80074ac:	a904      	add	r1, sp, #16
 80074ae:	4638      	mov	r0, r7
 80074b0:	f000 f9d4 	bl	800785c <_printf_i>
 80074b4:	e7eb      	b.n	800748e <_svfiprintf_r+0x1c2>
 80074b6:	bf00      	nop
 80074b8:	08008804 	.word	0x08008804
 80074bc:	0800880e 	.word	0x0800880e
 80074c0:	00000000 	.word	0x00000000
 80074c4:	08007217 	.word	0x08007217
 80074c8:	0800880a 	.word	0x0800880a

080074cc <__sfputc_r>:
 80074cc:	6893      	ldr	r3, [r2, #8]
 80074ce:	3b01      	subs	r3, #1
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	b410      	push	{r4}
 80074d4:	6093      	str	r3, [r2, #8]
 80074d6:	da08      	bge.n	80074ea <__sfputc_r+0x1e>
 80074d8:	6994      	ldr	r4, [r2, #24]
 80074da:	42a3      	cmp	r3, r4
 80074dc:	db01      	blt.n	80074e2 <__sfputc_r+0x16>
 80074de:	290a      	cmp	r1, #10
 80074e0:	d103      	bne.n	80074ea <__sfputc_r+0x1e>
 80074e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074e6:	f000 bb01 	b.w	8007aec <__swbuf_r>
 80074ea:	6813      	ldr	r3, [r2, #0]
 80074ec:	1c58      	adds	r0, r3, #1
 80074ee:	6010      	str	r0, [r2, #0]
 80074f0:	7019      	strb	r1, [r3, #0]
 80074f2:	4608      	mov	r0, r1
 80074f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <__sfputs_r>:
 80074fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074fc:	4606      	mov	r6, r0
 80074fe:	460f      	mov	r7, r1
 8007500:	4614      	mov	r4, r2
 8007502:	18d5      	adds	r5, r2, r3
 8007504:	42ac      	cmp	r4, r5
 8007506:	d101      	bne.n	800750c <__sfputs_r+0x12>
 8007508:	2000      	movs	r0, #0
 800750a:	e007      	b.n	800751c <__sfputs_r+0x22>
 800750c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007510:	463a      	mov	r2, r7
 8007512:	4630      	mov	r0, r6
 8007514:	f7ff ffda 	bl	80074cc <__sfputc_r>
 8007518:	1c43      	adds	r3, r0, #1
 800751a:	d1f3      	bne.n	8007504 <__sfputs_r+0xa>
 800751c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007520 <_vfiprintf_r>:
 8007520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007524:	460d      	mov	r5, r1
 8007526:	b09d      	sub	sp, #116	; 0x74
 8007528:	4614      	mov	r4, r2
 800752a:	4698      	mov	r8, r3
 800752c:	4606      	mov	r6, r0
 800752e:	b118      	cbz	r0, 8007538 <_vfiprintf_r+0x18>
 8007530:	6983      	ldr	r3, [r0, #24]
 8007532:	b90b      	cbnz	r3, 8007538 <_vfiprintf_r+0x18>
 8007534:	f000 fcca 	bl	8007ecc <__sinit>
 8007538:	4b89      	ldr	r3, [pc, #548]	; (8007760 <_vfiprintf_r+0x240>)
 800753a:	429d      	cmp	r5, r3
 800753c:	d11b      	bne.n	8007576 <_vfiprintf_r+0x56>
 800753e:	6875      	ldr	r5, [r6, #4]
 8007540:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007542:	07d9      	lsls	r1, r3, #31
 8007544:	d405      	bmi.n	8007552 <_vfiprintf_r+0x32>
 8007546:	89ab      	ldrh	r3, [r5, #12]
 8007548:	059a      	lsls	r2, r3, #22
 800754a:	d402      	bmi.n	8007552 <_vfiprintf_r+0x32>
 800754c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800754e:	f000 fd5b 	bl	8008008 <__retarget_lock_acquire_recursive>
 8007552:	89ab      	ldrh	r3, [r5, #12]
 8007554:	071b      	lsls	r3, r3, #28
 8007556:	d501      	bpl.n	800755c <_vfiprintf_r+0x3c>
 8007558:	692b      	ldr	r3, [r5, #16]
 800755a:	b9eb      	cbnz	r3, 8007598 <_vfiprintf_r+0x78>
 800755c:	4629      	mov	r1, r5
 800755e:	4630      	mov	r0, r6
 8007560:	f000 fb24 	bl	8007bac <__swsetup_r>
 8007564:	b1c0      	cbz	r0, 8007598 <_vfiprintf_r+0x78>
 8007566:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007568:	07dc      	lsls	r4, r3, #31
 800756a:	d50e      	bpl.n	800758a <_vfiprintf_r+0x6a>
 800756c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007570:	b01d      	add	sp, #116	; 0x74
 8007572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007576:	4b7b      	ldr	r3, [pc, #492]	; (8007764 <_vfiprintf_r+0x244>)
 8007578:	429d      	cmp	r5, r3
 800757a:	d101      	bne.n	8007580 <_vfiprintf_r+0x60>
 800757c:	68b5      	ldr	r5, [r6, #8]
 800757e:	e7df      	b.n	8007540 <_vfiprintf_r+0x20>
 8007580:	4b79      	ldr	r3, [pc, #484]	; (8007768 <_vfiprintf_r+0x248>)
 8007582:	429d      	cmp	r5, r3
 8007584:	bf08      	it	eq
 8007586:	68f5      	ldreq	r5, [r6, #12]
 8007588:	e7da      	b.n	8007540 <_vfiprintf_r+0x20>
 800758a:	89ab      	ldrh	r3, [r5, #12]
 800758c:	0598      	lsls	r0, r3, #22
 800758e:	d4ed      	bmi.n	800756c <_vfiprintf_r+0x4c>
 8007590:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007592:	f000 fd3a 	bl	800800a <__retarget_lock_release_recursive>
 8007596:	e7e9      	b.n	800756c <_vfiprintf_r+0x4c>
 8007598:	2300      	movs	r3, #0
 800759a:	9309      	str	r3, [sp, #36]	; 0x24
 800759c:	2320      	movs	r3, #32
 800759e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80075a6:	2330      	movs	r3, #48	; 0x30
 80075a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800776c <_vfiprintf_r+0x24c>
 80075ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075b0:	f04f 0901 	mov.w	r9, #1
 80075b4:	4623      	mov	r3, r4
 80075b6:	469a      	mov	sl, r3
 80075b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075bc:	b10a      	cbz	r2, 80075c2 <_vfiprintf_r+0xa2>
 80075be:	2a25      	cmp	r2, #37	; 0x25
 80075c0:	d1f9      	bne.n	80075b6 <_vfiprintf_r+0x96>
 80075c2:	ebba 0b04 	subs.w	fp, sl, r4
 80075c6:	d00b      	beq.n	80075e0 <_vfiprintf_r+0xc0>
 80075c8:	465b      	mov	r3, fp
 80075ca:	4622      	mov	r2, r4
 80075cc:	4629      	mov	r1, r5
 80075ce:	4630      	mov	r0, r6
 80075d0:	f7ff ff93 	bl	80074fa <__sfputs_r>
 80075d4:	3001      	adds	r0, #1
 80075d6:	f000 80aa 	beq.w	800772e <_vfiprintf_r+0x20e>
 80075da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075dc:	445a      	add	r2, fp
 80075de:	9209      	str	r2, [sp, #36]	; 0x24
 80075e0:	f89a 3000 	ldrb.w	r3, [sl]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f000 80a2 	beq.w	800772e <_vfiprintf_r+0x20e>
 80075ea:	2300      	movs	r3, #0
 80075ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075f4:	f10a 0a01 	add.w	sl, sl, #1
 80075f8:	9304      	str	r3, [sp, #16]
 80075fa:	9307      	str	r3, [sp, #28]
 80075fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007600:	931a      	str	r3, [sp, #104]	; 0x68
 8007602:	4654      	mov	r4, sl
 8007604:	2205      	movs	r2, #5
 8007606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800760a:	4858      	ldr	r0, [pc, #352]	; (800776c <_vfiprintf_r+0x24c>)
 800760c:	f7f8 fdf0 	bl	80001f0 <memchr>
 8007610:	9a04      	ldr	r2, [sp, #16]
 8007612:	b9d8      	cbnz	r0, 800764c <_vfiprintf_r+0x12c>
 8007614:	06d1      	lsls	r1, r2, #27
 8007616:	bf44      	itt	mi
 8007618:	2320      	movmi	r3, #32
 800761a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800761e:	0713      	lsls	r3, r2, #28
 8007620:	bf44      	itt	mi
 8007622:	232b      	movmi	r3, #43	; 0x2b
 8007624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007628:	f89a 3000 	ldrb.w	r3, [sl]
 800762c:	2b2a      	cmp	r3, #42	; 0x2a
 800762e:	d015      	beq.n	800765c <_vfiprintf_r+0x13c>
 8007630:	9a07      	ldr	r2, [sp, #28]
 8007632:	4654      	mov	r4, sl
 8007634:	2000      	movs	r0, #0
 8007636:	f04f 0c0a 	mov.w	ip, #10
 800763a:	4621      	mov	r1, r4
 800763c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007640:	3b30      	subs	r3, #48	; 0x30
 8007642:	2b09      	cmp	r3, #9
 8007644:	d94e      	bls.n	80076e4 <_vfiprintf_r+0x1c4>
 8007646:	b1b0      	cbz	r0, 8007676 <_vfiprintf_r+0x156>
 8007648:	9207      	str	r2, [sp, #28]
 800764a:	e014      	b.n	8007676 <_vfiprintf_r+0x156>
 800764c:	eba0 0308 	sub.w	r3, r0, r8
 8007650:	fa09 f303 	lsl.w	r3, r9, r3
 8007654:	4313      	orrs	r3, r2
 8007656:	9304      	str	r3, [sp, #16]
 8007658:	46a2      	mov	sl, r4
 800765a:	e7d2      	b.n	8007602 <_vfiprintf_r+0xe2>
 800765c:	9b03      	ldr	r3, [sp, #12]
 800765e:	1d19      	adds	r1, r3, #4
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	9103      	str	r1, [sp, #12]
 8007664:	2b00      	cmp	r3, #0
 8007666:	bfbb      	ittet	lt
 8007668:	425b      	neglt	r3, r3
 800766a:	f042 0202 	orrlt.w	r2, r2, #2
 800766e:	9307      	strge	r3, [sp, #28]
 8007670:	9307      	strlt	r3, [sp, #28]
 8007672:	bfb8      	it	lt
 8007674:	9204      	strlt	r2, [sp, #16]
 8007676:	7823      	ldrb	r3, [r4, #0]
 8007678:	2b2e      	cmp	r3, #46	; 0x2e
 800767a:	d10c      	bne.n	8007696 <_vfiprintf_r+0x176>
 800767c:	7863      	ldrb	r3, [r4, #1]
 800767e:	2b2a      	cmp	r3, #42	; 0x2a
 8007680:	d135      	bne.n	80076ee <_vfiprintf_r+0x1ce>
 8007682:	9b03      	ldr	r3, [sp, #12]
 8007684:	1d1a      	adds	r2, r3, #4
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	9203      	str	r2, [sp, #12]
 800768a:	2b00      	cmp	r3, #0
 800768c:	bfb8      	it	lt
 800768e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007692:	3402      	adds	r4, #2
 8007694:	9305      	str	r3, [sp, #20]
 8007696:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800777c <_vfiprintf_r+0x25c>
 800769a:	7821      	ldrb	r1, [r4, #0]
 800769c:	2203      	movs	r2, #3
 800769e:	4650      	mov	r0, sl
 80076a0:	f7f8 fda6 	bl	80001f0 <memchr>
 80076a4:	b140      	cbz	r0, 80076b8 <_vfiprintf_r+0x198>
 80076a6:	2340      	movs	r3, #64	; 0x40
 80076a8:	eba0 000a 	sub.w	r0, r0, sl
 80076ac:	fa03 f000 	lsl.w	r0, r3, r0
 80076b0:	9b04      	ldr	r3, [sp, #16]
 80076b2:	4303      	orrs	r3, r0
 80076b4:	3401      	adds	r4, #1
 80076b6:	9304      	str	r3, [sp, #16]
 80076b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076bc:	482c      	ldr	r0, [pc, #176]	; (8007770 <_vfiprintf_r+0x250>)
 80076be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076c2:	2206      	movs	r2, #6
 80076c4:	f7f8 fd94 	bl	80001f0 <memchr>
 80076c8:	2800      	cmp	r0, #0
 80076ca:	d03f      	beq.n	800774c <_vfiprintf_r+0x22c>
 80076cc:	4b29      	ldr	r3, [pc, #164]	; (8007774 <_vfiprintf_r+0x254>)
 80076ce:	bb1b      	cbnz	r3, 8007718 <_vfiprintf_r+0x1f8>
 80076d0:	9b03      	ldr	r3, [sp, #12]
 80076d2:	3307      	adds	r3, #7
 80076d4:	f023 0307 	bic.w	r3, r3, #7
 80076d8:	3308      	adds	r3, #8
 80076da:	9303      	str	r3, [sp, #12]
 80076dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076de:	443b      	add	r3, r7
 80076e0:	9309      	str	r3, [sp, #36]	; 0x24
 80076e2:	e767      	b.n	80075b4 <_vfiprintf_r+0x94>
 80076e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80076e8:	460c      	mov	r4, r1
 80076ea:	2001      	movs	r0, #1
 80076ec:	e7a5      	b.n	800763a <_vfiprintf_r+0x11a>
 80076ee:	2300      	movs	r3, #0
 80076f0:	3401      	adds	r4, #1
 80076f2:	9305      	str	r3, [sp, #20]
 80076f4:	4619      	mov	r1, r3
 80076f6:	f04f 0c0a 	mov.w	ip, #10
 80076fa:	4620      	mov	r0, r4
 80076fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007700:	3a30      	subs	r2, #48	; 0x30
 8007702:	2a09      	cmp	r2, #9
 8007704:	d903      	bls.n	800770e <_vfiprintf_r+0x1ee>
 8007706:	2b00      	cmp	r3, #0
 8007708:	d0c5      	beq.n	8007696 <_vfiprintf_r+0x176>
 800770a:	9105      	str	r1, [sp, #20]
 800770c:	e7c3      	b.n	8007696 <_vfiprintf_r+0x176>
 800770e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007712:	4604      	mov	r4, r0
 8007714:	2301      	movs	r3, #1
 8007716:	e7f0      	b.n	80076fa <_vfiprintf_r+0x1da>
 8007718:	ab03      	add	r3, sp, #12
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	462a      	mov	r2, r5
 800771e:	4b16      	ldr	r3, [pc, #88]	; (8007778 <_vfiprintf_r+0x258>)
 8007720:	a904      	add	r1, sp, #16
 8007722:	4630      	mov	r0, r6
 8007724:	f3af 8000 	nop.w
 8007728:	4607      	mov	r7, r0
 800772a:	1c78      	adds	r0, r7, #1
 800772c:	d1d6      	bne.n	80076dc <_vfiprintf_r+0x1bc>
 800772e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007730:	07d9      	lsls	r1, r3, #31
 8007732:	d405      	bmi.n	8007740 <_vfiprintf_r+0x220>
 8007734:	89ab      	ldrh	r3, [r5, #12]
 8007736:	059a      	lsls	r2, r3, #22
 8007738:	d402      	bmi.n	8007740 <_vfiprintf_r+0x220>
 800773a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800773c:	f000 fc65 	bl	800800a <__retarget_lock_release_recursive>
 8007740:	89ab      	ldrh	r3, [r5, #12]
 8007742:	065b      	lsls	r3, r3, #25
 8007744:	f53f af12 	bmi.w	800756c <_vfiprintf_r+0x4c>
 8007748:	9809      	ldr	r0, [sp, #36]	; 0x24
 800774a:	e711      	b.n	8007570 <_vfiprintf_r+0x50>
 800774c:	ab03      	add	r3, sp, #12
 800774e:	9300      	str	r3, [sp, #0]
 8007750:	462a      	mov	r2, r5
 8007752:	4b09      	ldr	r3, [pc, #36]	; (8007778 <_vfiprintf_r+0x258>)
 8007754:	a904      	add	r1, sp, #16
 8007756:	4630      	mov	r0, r6
 8007758:	f000 f880 	bl	800785c <_printf_i>
 800775c:	e7e4      	b.n	8007728 <_vfiprintf_r+0x208>
 800775e:	bf00      	nop
 8007760:	08008858 	.word	0x08008858
 8007764:	08008878 	.word	0x08008878
 8007768:	08008838 	.word	0x08008838
 800776c:	08008804 	.word	0x08008804
 8007770:	0800880e 	.word	0x0800880e
 8007774:	00000000 	.word	0x00000000
 8007778:	080074fb 	.word	0x080074fb
 800777c:	0800880a 	.word	0x0800880a

08007780 <_printf_common>:
 8007780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007784:	4616      	mov	r6, r2
 8007786:	4699      	mov	r9, r3
 8007788:	688a      	ldr	r2, [r1, #8]
 800778a:	690b      	ldr	r3, [r1, #16]
 800778c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007790:	4293      	cmp	r3, r2
 8007792:	bfb8      	it	lt
 8007794:	4613      	movlt	r3, r2
 8007796:	6033      	str	r3, [r6, #0]
 8007798:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800779c:	4607      	mov	r7, r0
 800779e:	460c      	mov	r4, r1
 80077a0:	b10a      	cbz	r2, 80077a6 <_printf_common+0x26>
 80077a2:	3301      	adds	r3, #1
 80077a4:	6033      	str	r3, [r6, #0]
 80077a6:	6823      	ldr	r3, [r4, #0]
 80077a8:	0699      	lsls	r1, r3, #26
 80077aa:	bf42      	ittt	mi
 80077ac:	6833      	ldrmi	r3, [r6, #0]
 80077ae:	3302      	addmi	r3, #2
 80077b0:	6033      	strmi	r3, [r6, #0]
 80077b2:	6825      	ldr	r5, [r4, #0]
 80077b4:	f015 0506 	ands.w	r5, r5, #6
 80077b8:	d106      	bne.n	80077c8 <_printf_common+0x48>
 80077ba:	f104 0a19 	add.w	sl, r4, #25
 80077be:	68e3      	ldr	r3, [r4, #12]
 80077c0:	6832      	ldr	r2, [r6, #0]
 80077c2:	1a9b      	subs	r3, r3, r2
 80077c4:	42ab      	cmp	r3, r5
 80077c6:	dc26      	bgt.n	8007816 <_printf_common+0x96>
 80077c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077cc:	1e13      	subs	r3, r2, #0
 80077ce:	6822      	ldr	r2, [r4, #0]
 80077d0:	bf18      	it	ne
 80077d2:	2301      	movne	r3, #1
 80077d4:	0692      	lsls	r2, r2, #26
 80077d6:	d42b      	bmi.n	8007830 <_printf_common+0xb0>
 80077d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077dc:	4649      	mov	r1, r9
 80077de:	4638      	mov	r0, r7
 80077e0:	47c0      	blx	r8
 80077e2:	3001      	adds	r0, #1
 80077e4:	d01e      	beq.n	8007824 <_printf_common+0xa4>
 80077e6:	6823      	ldr	r3, [r4, #0]
 80077e8:	68e5      	ldr	r5, [r4, #12]
 80077ea:	6832      	ldr	r2, [r6, #0]
 80077ec:	f003 0306 	and.w	r3, r3, #6
 80077f0:	2b04      	cmp	r3, #4
 80077f2:	bf08      	it	eq
 80077f4:	1aad      	subeq	r5, r5, r2
 80077f6:	68a3      	ldr	r3, [r4, #8]
 80077f8:	6922      	ldr	r2, [r4, #16]
 80077fa:	bf0c      	ite	eq
 80077fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007800:	2500      	movne	r5, #0
 8007802:	4293      	cmp	r3, r2
 8007804:	bfc4      	itt	gt
 8007806:	1a9b      	subgt	r3, r3, r2
 8007808:	18ed      	addgt	r5, r5, r3
 800780a:	2600      	movs	r6, #0
 800780c:	341a      	adds	r4, #26
 800780e:	42b5      	cmp	r5, r6
 8007810:	d11a      	bne.n	8007848 <_printf_common+0xc8>
 8007812:	2000      	movs	r0, #0
 8007814:	e008      	b.n	8007828 <_printf_common+0xa8>
 8007816:	2301      	movs	r3, #1
 8007818:	4652      	mov	r2, sl
 800781a:	4649      	mov	r1, r9
 800781c:	4638      	mov	r0, r7
 800781e:	47c0      	blx	r8
 8007820:	3001      	adds	r0, #1
 8007822:	d103      	bne.n	800782c <_printf_common+0xac>
 8007824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800782c:	3501      	adds	r5, #1
 800782e:	e7c6      	b.n	80077be <_printf_common+0x3e>
 8007830:	18e1      	adds	r1, r4, r3
 8007832:	1c5a      	adds	r2, r3, #1
 8007834:	2030      	movs	r0, #48	; 0x30
 8007836:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800783a:	4422      	add	r2, r4
 800783c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007840:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007844:	3302      	adds	r3, #2
 8007846:	e7c7      	b.n	80077d8 <_printf_common+0x58>
 8007848:	2301      	movs	r3, #1
 800784a:	4622      	mov	r2, r4
 800784c:	4649      	mov	r1, r9
 800784e:	4638      	mov	r0, r7
 8007850:	47c0      	blx	r8
 8007852:	3001      	adds	r0, #1
 8007854:	d0e6      	beq.n	8007824 <_printf_common+0xa4>
 8007856:	3601      	adds	r6, #1
 8007858:	e7d9      	b.n	800780e <_printf_common+0x8e>
	...

0800785c <_printf_i>:
 800785c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007860:	7e0f      	ldrb	r7, [r1, #24]
 8007862:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007864:	2f78      	cmp	r7, #120	; 0x78
 8007866:	4691      	mov	r9, r2
 8007868:	4680      	mov	r8, r0
 800786a:	460c      	mov	r4, r1
 800786c:	469a      	mov	sl, r3
 800786e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007872:	d807      	bhi.n	8007884 <_printf_i+0x28>
 8007874:	2f62      	cmp	r7, #98	; 0x62
 8007876:	d80a      	bhi.n	800788e <_printf_i+0x32>
 8007878:	2f00      	cmp	r7, #0
 800787a:	f000 80d8 	beq.w	8007a2e <_printf_i+0x1d2>
 800787e:	2f58      	cmp	r7, #88	; 0x58
 8007880:	f000 80a3 	beq.w	80079ca <_printf_i+0x16e>
 8007884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007888:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800788c:	e03a      	b.n	8007904 <_printf_i+0xa8>
 800788e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007892:	2b15      	cmp	r3, #21
 8007894:	d8f6      	bhi.n	8007884 <_printf_i+0x28>
 8007896:	a101      	add	r1, pc, #4	; (adr r1, 800789c <_printf_i+0x40>)
 8007898:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800789c:	080078f5 	.word	0x080078f5
 80078a0:	08007909 	.word	0x08007909
 80078a4:	08007885 	.word	0x08007885
 80078a8:	08007885 	.word	0x08007885
 80078ac:	08007885 	.word	0x08007885
 80078b0:	08007885 	.word	0x08007885
 80078b4:	08007909 	.word	0x08007909
 80078b8:	08007885 	.word	0x08007885
 80078bc:	08007885 	.word	0x08007885
 80078c0:	08007885 	.word	0x08007885
 80078c4:	08007885 	.word	0x08007885
 80078c8:	08007a15 	.word	0x08007a15
 80078cc:	08007939 	.word	0x08007939
 80078d0:	080079f7 	.word	0x080079f7
 80078d4:	08007885 	.word	0x08007885
 80078d8:	08007885 	.word	0x08007885
 80078dc:	08007a37 	.word	0x08007a37
 80078e0:	08007885 	.word	0x08007885
 80078e4:	08007939 	.word	0x08007939
 80078e8:	08007885 	.word	0x08007885
 80078ec:	08007885 	.word	0x08007885
 80078f0:	080079ff 	.word	0x080079ff
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	1d1a      	adds	r2, r3, #4
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	602a      	str	r2, [r5, #0]
 80078fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007900:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007904:	2301      	movs	r3, #1
 8007906:	e0a3      	b.n	8007a50 <_printf_i+0x1f4>
 8007908:	6820      	ldr	r0, [r4, #0]
 800790a:	6829      	ldr	r1, [r5, #0]
 800790c:	0606      	lsls	r6, r0, #24
 800790e:	f101 0304 	add.w	r3, r1, #4
 8007912:	d50a      	bpl.n	800792a <_printf_i+0xce>
 8007914:	680e      	ldr	r6, [r1, #0]
 8007916:	602b      	str	r3, [r5, #0]
 8007918:	2e00      	cmp	r6, #0
 800791a:	da03      	bge.n	8007924 <_printf_i+0xc8>
 800791c:	232d      	movs	r3, #45	; 0x2d
 800791e:	4276      	negs	r6, r6
 8007920:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007924:	485e      	ldr	r0, [pc, #376]	; (8007aa0 <_printf_i+0x244>)
 8007926:	230a      	movs	r3, #10
 8007928:	e019      	b.n	800795e <_printf_i+0x102>
 800792a:	680e      	ldr	r6, [r1, #0]
 800792c:	602b      	str	r3, [r5, #0]
 800792e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007932:	bf18      	it	ne
 8007934:	b236      	sxthne	r6, r6
 8007936:	e7ef      	b.n	8007918 <_printf_i+0xbc>
 8007938:	682b      	ldr	r3, [r5, #0]
 800793a:	6820      	ldr	r0, [r4, #0]
 800793c:	1d19      	adds	r1, r3, #4
 800793e:	6029      	str	r1, [r5, #0]
 8007940:	0601      	lsls	r1, r0, #24
 8007942:	d501      	bpl.n	8007948 <_printf_i+0xec>
 8007944:	681e      	ldr	r6, [r3, #0]
 8007946:	e002      	b.n	800794e <_printf_i+0xf2>
 8007948:	0646      	lsls	r6, r0, #25
 800794a:	d5fb      	bpl.n	8007944 <_printf_i+0xe8>
 800794c:	881e      	ldrh	r6, [r3, #0]
 800794e:	4854      	ldr	r0, [pc, #336]	; (8007aa0 <_printf_i+0x244>)
 8007950:	2f6f      	cmp	r7, #111	; 0x6f
 8007952:	bf0c      	ite	eq
 8007954:	2308      	moveq	r3, #8
 8007956:	230a      	movne	r3, #10
 8007958:	2100      	movs	r1, #0
 800795a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800795e:	6865      	ldr	r5, [r4, #4]
 8007960:	60a5      	str	r5, [r4, #8]
 8007962:	2d00      	cmp	r5, #0
 8007964:	bfa2      	ittt	ge
 8007966:	6821      	ldrge	r1, [r4, #0]
 8007968:	f021 0104 	bicge.w	r1, r1, #4
 800796c:	6021      	strge	r1, [r4, #0]
 800796e:	b90e      	cbnz	r6, 8007974 <_printf_i+0x118>
 8007970:	2d00      	cmp	r5, #0
 8007972:	d04d      	beq.n	8007a10 <_printf_i+0x1b4>
 8007974:	4615      	mov	r5, r2
 8007976:	fbb6 f1f3 	udiv	r1, r6, r3
 800797a:	fb03 6711 	mls	r7, r3, r1, r6
 800797e:	5dc7      	ldrb	r7, [r0, r7]
 8007980:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007984:	4637      	mov	r7, r6
 8007986:	42bb      	cmp	r3, r7
 8007988:	460e      	mov	r6, r1
 800798a:	d9f4      	bls.n	8007976 <_printf_i+0x11a>
 800798c:	2b08      	cmp	r3, #8
 800798e:	d10b      	bne.n	80079a8 <_printf_i+0x14c>
 8007990:	6823      	ldr	r3, [r4, #0]
 8007992:	07de      	lsls	r6, r3, #31
 8007994:	d508      	bpl.n	80079a8 <_printf_i+0x14c>
 8007996:	6923      	ldr	r3, [r4, #16]
 8007998:	6861      	ldr	r1, [r4, #4]
 800799a:	4299      	cmp	r1, r3
 800799c:	bfde      	ittt	le
 800799e:	2330      	movle	r3, #48	; 0x30
 80079a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80079a4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80079a8:	1b52      	subs	r2, r2, r5
 80079aa:	6122      	str	r2, [r4, #16]
 80079ac:	f8cd a000 	str.w	sl, [sp]
 80079b0:	464b      	mov	r3, r9
 80079b2:	aa03      	add	r2, sp, #12
 80079b4:	4621      	mov	r1, r4
 80079b6:	4640      	mov	r0, r8
 80079b8:	f7ff fee2 	bl	8007780 <_printf_common>
 80079bc:	3001      	adds	r0, #1
 80079be:	d14c      	bne.n	8007a5a <_printf_i+0x1fe>
 80079c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079c4:	b004      	add	sp, #16
 80079c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ca:	4835      	ldr	r0, [pc, #212]	; (8007aa0 <_printf_i+0x244>)
 80079cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80079d0:	6829      	ldr	r1, [r5, #0]
 80079d2:	6823      	ldr	r3, [r4, #0]
 80079d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80079d8:	6029      	str	r1, [r5, #0]
 80079da:	061d      	lsls	r5, r3, #24
 80079dc:	d514      	bpl.n	8007a08 <_printf_i+0x1ac>
 80079de:	07df      	lsls	r7, r3, #31
 80079e0:	bf44      	itt	mi
 80079e2:	f043 0320 	orrmi.w	r3, r3, #32
 80079e6:	6023      	strmi	r3, [r4, #0]
 80079e8:	b91e      	cbnz	r6, 80079f2 <_printf_i+0x196>
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	f023 0320 	bic.w	r3, r3, #32
 80079f0:	6023      	str	r3, [r4, #0]
 80079f2:	2310      	movs	r3, #16
 80079f4:	e7b0      	b.n	8007958 <_printf_i+0xfc>
 80079f6:	6823      	ldr	r3, [r4, #0]
 80079f8:	f043 0320 	orr.w	r3, r3, #32
 80079fc:	6023      	str	r3, [r4, #0]
 80079fe:	2378      	movs	r3, #120	; 0x78
 8007a00:	4828      	ldr	r0, [pc, #160]	; (8007aa4 <_printf_i+0x248>)
 8007a02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a06:	e7e3      	b.n	80079d0 <_printf_i+0x174>
 8007a08:	0659      	lsls	r1, r3, #25
 8007a0a:	bf48      	it	mi
 8007a0c:	b2b6      	uxthmi	r6, r6
 8007a0e:	e7e6      	b.n	80079de <_printf_i+0x182>
 8007a10:	4615      	mov	r5, r2
 8007a12:	e7bb      	b.n	800798c <_printf_i+0x130>
 8007a14:	682b      	ldr	r3, [r5, #0]
 8007a16:	6826      	ldr	r6, [r4, #0]
 8007a18:	6961      	ldr	r1, [r4, #20]
 8007a1a:	1d18      	adds	r0, r3, #4
 8007a1c:	6028      	str	r0, [r5, #0]
 8007a1e:	0635      	lsls	r5, r6, #24
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	d501      	bpl.n	8007a28 <_printf_i+0x1cc>
 8007a24:	6019      	str	r1, [r3, #0]
 8007a26:	e002      	b.n	8007a2e <_printf_i+0x1d2>
 8007a28:	0670      	lsls	r0, r6, #25
 8007a2a:	d5fb      	bpl.n	8007a24 <_printf_i+0x1c8>
 8007a2c:	8019      	strh	r1, [r3, #0]
 8007a2e:	2300      	movs	r3, #0
 8007a30:	6123      	str	r3, [r4, #16]
 8007a32:	4615      	mov	r5, r2
 8007a34:	e7ba      	b.n	80079ac <_printf_i+0x150>
 8007a36:	682b      	ldr	r3, [r5, #0]
 8007a38:	1d1a      	adds	r2, r3, #4
 8007a3a:	602a      	str	r2, [r5, #0]
 8007a3c:	681d      	ldr	r5, [r3, #0]
 8007a3e:	6862      	ldr	r2, [r4, #4]
 8007a40:	2100      	movs	r1, #0
 8007a42:	4628      	mov	r0, r5
 8007a44:	f7f8 fbd4 	bl	80001f0 <memchr>
 8007a48:	b108      	cbz	r0, 8007a4e <_printf_i+0x1f2>
 8007a4a:	1b40      	subs	r0, r0, r5
 8007a4c:	6060      	str	r0, [r4, #4]
 8007a4e:	6863      	ldr	r3, [r4, #4]
 8007a50:	6123      	str	r3, [r4, #16]
 8007a52:	2300      	movs	r3, #0
 8007a54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a58:	e7a8      	b.n	80079ac <_printf_i+0x150>
 8007a5a:	6923      	ldr	r3, [r4, #16]
 8007a5c:	462a      	mov	r2, r5
 8007a5e:	4649      	mov	r1, r9
 8007a60:	4640      	mov	r0, r8
 8007a62:	47d0      	blx	sl
 8007a64:	3001      	adds	r0, #1
 8007a66:	d0ab      	beq.n	80079c0 <_printf_i+0x164>
 8007a68:	6823      	ldr	r3, [r4, #0]
 8007a6a:	079b      	lsls	r3, r3, #30
 8007a6c:	d413      	bmi.n	8007a96 <_printf_i+0x23a>
 8007a6e:	68e0      	ldr	r0, [r4, #12]
 8007a70:	9b03      	ldr	r3, [sp, #12]
 8007a72:	4298      	cmp	r0, r3
 8007a74:	bfb8      	it	lt
 8007a76:	4618      	movlt	r0, r3
 8007a78:	e7a4      	b.n	80079c4 <_printf_i+0x168>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	4632      	mov	r2, r6
 8007a7e:	4649      	mov	r1, r9
 8007a80:	4640      	mov	r0, r8
 8007a82:	47d0      	blx	sl
 8007a84:	3001      	adds	r0, #1
 8007a86:	d09b      	beq.n	80079c0 <_printf_i+0x164>
 8007a88:	3501      	adds	r5, #1
 8007a8a:	68e3      	ldr	r3, [r4, #12]
 8007a8c:	9903      	ldr	r1, [sp, #12]
 8007a8e:	1a5b      	subs	r3, r3, r1
 8007a90:	42ab      	cmp	r3, r5
 8007a92:	dcf2      	bgt.n	8007a7a <_printf_i+0x21e>
 8007a94:	e7eb      	b.n	8007a6e <_printf_i+0x212>
 8007a96:	2500      	movs	r5, #0
 8007a98:	f104 0619 	add.w	r6, r4, #25
 8007a9c:	e7f5      	b.n	8007a8a <_printf_i+0x22e>
 8007a9e:	bf00      	nop
 8007aa0:	08008815 	.word	0x08008815
 8007aa4:	08008826 	.word	0x08008826

08007aa8 <nan>:
 8007aa8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007ab0 <nan+0x8>
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	00000000 	.word	0x00000000
 8007ab4:	7ff80000 	.word	0x7ff80000

08007ab8 <nanf>:
 8007ab8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007ac0 <nanf+0x8>
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	7fc00000 	.word	0x7fc00000

08007ac4 <strncmp>:
 8007ac4:	b510      	push	{r4, lr}
 8007ac6:	b17a      	cbz	r2, 8007ae8 <strncmp+0x24>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	3901      	subs	r1, #1
 8007acc:	1884      	adds	r4, r0, r2
 8007ace:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007ad2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007ad6:	4290      	cmp	r0, r2
 8007ad8:	d101      	bne.n	8007ade <strncmp+0x1a>
 8007ada:	42a3      	cmp	r3, r4
 8007adc:	d101      	bne.n	8007ae2 <strncmp+0x1e>
 8007ade:	1a80      	subs	r0, r0, r2
 8007ae0:	bd10      	pop	{r4, pc}
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	d1f3      	bne.n	8007ace <strncmp+0xa>
 8007ae6:	e7fa      	b.n	8007ade <strncmp+0x1a>
 8007ae8:	4610      	mov	r0, r2
 8007aea:	e7f9      	b.n	8007ae0 <strncmp+0x1c>

08007aec <__swbuf_r>:
 8007aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aee:	460e      	mov	r6, r1
 8007af0:	4614      	mov	r4, r2
 8007af2:	4605      	mov	r5, r0
 8007af4:	b118      	cbz	r0, 8007afe <__swbuf_r+0x12>
 8007af6:	6983      	ldr	r3, [r0, #24]
 8007af8:	b90b      	cbnz	r3, 8007afe <__swbuf_r+0x12>
 8007afa:	f000 f9e7 	bl	8007ecc <__sinit>
 8007afe:	4b21      	ldr	r3, [pc, #132]	; (8007b84 <__swbuf_r+0x98>)
 8007b00:	429c      	cmp	r4, r3
 8007b02:	d12b      	bne.n	8007b5c <__swbuf_r+0x70>
 8007b04:	686c      	ldr	r4, [r5, #4]
 8007b06:	69a3      	ldr	r3, [r4, #24]
 8007b08:	60a3      	str	r3, [r4, #8]
 8007b0a:	89a3      	ldrh	r3, [r4, #12]
 8007b0c:	071a      	lsls	r2, r3, #28
 8007b0e:	d52f      	bpl.n	8007b70 <__swbuf_r+0x84>
 8007b10:	6923      	ldr	r3, [r4, #16]
 8007b12:	b36b      	cbz	r3, 8007b70 <__swbuf_r+0x84>
 8007b14:	6923      	ldr	r3, [r4, #16]
 8007b16:	6820      	ldr	r0, [r4, #0]
 8007b18:	1ac0      	subs	r0, r0, r3
 8007b1a:	6963      	ldr	r3, [r4, #20]
 8007b1c:	b2f6      	uxtb	r6, r6
 8007b1e:	4283      	cmp	r3, r0
 8007b20:	4637      	mov	r7, r6
 8007b22:	dc04      	bgt.n	8007b2e <__swbuf_r+0x42>
 8007b24:	4621      	mov	r1, r4
 8007b26:	4628      	mov	r0, r5
 8007b28:	f000 f93c 	bl	8007da4 <_fflush_r>
 8007b2c:	bb30      	cbnz	r0, 8007b7c <__swbuf_r+0x90>
 8007b2e:	68a3      	ldr	r3, [r4, #8]
 8007b30:	3b01      	subs	r3, #1
 8007b32:	60a3      	str	r3, [r4, #8]
 8007b34:	6823      	ldr	r3, [r4, #0]
 8007b36:	1c5a      	adds	r2, r3, #1
 8007b38:	6022      	str	r2, [r4, #0]
 8007b3a:	701e      	strb	r6, [r3, #0]
 8007b3c:	6963      	ldr	r3, [r4, #20]
 8007b3e:	3001      	adds	r0, #1
 8007b40:	4283      	cmp	r3, r0
 8007b42:	d004      	beq.n	8007b4e <__swbuf_r+0x62>
 8007b44:	89a3      	ldrh	r3, [r4, #12]
 8007b46:	07db      	lsls	r3, r3, #31
 8007b48:	d506      	bpl.n	8007b58 <__swbuf_r+0x6c>
 8007b4a:	2e0a      	cmp	r6, #10
 8007b4c:	d104      	bne.n	8007b58 <__swbuf_r+0x6c>
 8007b4e:	4621      	mov	r1, r4
 8007b50:	4628      	mov	r0, r5
 8007b52:	f000 f927 	bl	8007da4 <_fflush_r>
 8007b56:	b988      	cbnz	r0, 8007b7c <__swbuf_r+0x90>
 8007b58:	4638      	mov	r0, r7
 8007b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b5c:	4b0a      	ldr	r3, [pc, #40]	; (8007b88 <__swbuf_r+0x9c>)
 8007b5e:	429c      	cmp	r4, r3
 8007b60:	d101      	bne.n	8007b66 <__swbuf_r+0x7a>
 8007b62:	68ac      	ldr	r4, [r5, #8]
 8007b64:	e7cf      	b.n	8007b06 <__swbuf_r+0x1a>
 8007b66:	4b09      	ldr	r3, [pc, #36]	; (8007b8c <__swbuf_r+0xa0>)
 8007b68:	429c      	cmp	r4, r3
 8007b6a:	bf08      	it	eq
 8007b6c:	68ec      	ldreq	r4, [r5, #12]
 8007b6e:	e7ca      	b.n	8007b06 <__swbuf_r+0x1a>
 8007b70:	4621      	mov	r1, r4
 8007b72:	4628      	mov	r0, r5
 8007b74:	f000 f81a 	bl	8007bac <__swsetup_r>
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	d0cb      	beq.n	8007b14 <__swbuf_r+0x28>
 8007b7c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007b80:	e7ea      	b.n	8007b58 <__swbuf_r+0x6c>
 8007b82:	bf00      	nop
 8007b84:	08008858 	.word	0x08008858
 8007b88:	08008878 	.word	0x08008878
 8007b8c:	08008838 	.word	0x08008838

08007b90 <__ascii_wctomb>:
 8007b90:	b149      	cbz	r1, 8007ba6 <__ascii_wctomb+0x16>
 8007b92:	2aff      	cmp	r2, #255	; 0xff
 8007b94:	bf85      	ittet	hi
 8007b96:	238a      	movhi	r3, #138	; 0x8a
 8007b98:	6003      	strhi	r3, [r0, #0]
 8007b9a:	700a      	strbls	r2, [r1, #0]
 8007b9c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007ba0:	bf98      	it	ls
 8007ba2:	2001      	movls	r0, #1
 8007ba4:	4770      	bx	lr
 8007ba6:	4608      	mov	r0, r1
 8007ba8:	4770      	bx	lr
	...

08007bac <__swsetup_r>:
 8007bac:	4b32      	ldr	r3, [pc, #200]	; (8007c78 <__swsetup_r+0xcc>)
 8007bae:	b570      	push	{r4, r5, r6, lr}
 8007bb0:	681d      	ldr	r5, [r3, #0]
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	460c      	mov	r4, r1
 8007bb6:	b125      	cbz	r5, 8007bc2 <__swsetup_r+0x16>
 8007bb8:	69ab      	ldr	r3, [r5, #24]
 8007bba:	b913      	cbnz	r3, 8007bc2 <__swsetup_r+0x16>
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	f000 f985 	bl	8007ecc <__sinit>
 8007bc2:	4b2e      	ldr	r3, [pc, #184]	; (8007c7c <__swsetup_r+0xd0>)
 8007bc4:	429c      	cmp	r4, r3
 8007bc6:	d10f      	bne.n	8007be8 <__swsetup_r+0x3c>
 8007bc8:	686c      	ldr	r4, [r5, #4]
 8007bca:	89a3      	ldrh	r3, [r4, #12]
 8007bcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bd0:	0719      	lsls	r1, r3, #28
 8007bd2:	d42c      	bmi.n	8007c2e <__swsetup_r+0x82>
 8007bd4:	06dd      	lsls	r5, r3, #27
 8007bd6:	d411      	bmi.n	8007bfc <__swsetup_r+0x50>
 8007bd8:	2309      	movs	r3, #9
 8007bda:	6033      	str	r3, [r6, #0]
 8007bdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007be0:	81a3      	strh	r3, [r4, #12]
 8007be2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007be6:	e03e      	b.n	8007c66 <__swsetup_r+0xba>
 8007be8:	4b25      	ldr	r3, [pc, #148]	; (8007c80 <__swsetup_r+0xd4>)
 8007bea:	429c      	cmp	r4, r3
 8007bec:	d101      	bne.n	8007bf2 <__swsetup_r+0x46>
 8007bee:	68ac      	ldr	r4, [r5, #8]
 8007bf0:	e7eb      	b.n	8007bca <__swsetup_r+0x1e>
 8007bf2:	4b24      	ldr	r3, [pc, #144]	; (8007c84 <__swsetup_r+0xd8>)
 8007bf4:	429c      	cmp	r4, r3
 8007bf6:	bf08      	it	eq
 8007bf8:	68ec      	ldreq	r4, [r5, #12]
 8007bfa:	e7e6      	b.n	8007bca <__swsetup_r+0x1e>
 8007bfc:	0758      	lsls	r0, r3, #29
 8007bfe:	d512      	bpl.n	8007c26 <__swsetup_r+0x7a>
 8007c00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c02:	b141      	cbz	r1, 8007c16 <__swsetup_r+0x6a>
 8007c04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c08:	4299      	cmp	r1, r3
 8007c0a:	d002      	beq.n	8007c12 <__swsetup_r+0x66>
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	f7fd f9d9 	bl	8004fc4 <_free_r>
 8007c12:	2300      	movs	r3, #0
 8007c14:	6363      	str	r3, [r4, #52]	; 0x34
 8007c16:	89a3      	ldrh	r3, [r4, #12]
 8007c18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c1c:	81a3      	strh	r3, [r4, #12]
 8007c1e:	2300      	movs	r3, #0
 8007c20:	6063      	str	r3, [r4, #4]
 8007c22:	6923      	ldr	r3, [r4, #16]
 8007c24:	6023      	str	r3, [r4, #0]
 8007c26:	89a3      	ldrh	r3, [r4, #12]
 8007c28:	f043 0308 	orr.w	r3, r3, #8
 8007c2c:	81a3      	strh	r3, [r4, #12]
 8007c2e:	6923      	ldr	r3, [r4, #16]
 8007c30:	b94b      	cbnz	r3, 8007c46 <__swsetup_r+0x9a>
 8007c32:	89a3      	ldrh	r3, [r4, #12]
 8007c34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c3c:	d003      	beq.n	8007c46 <__swsetup_r+0x9a>
 8007c3e:	4621      	mov	r1, r4
 8007c40:	4630      	mov	r0, r6
 8007c42:	f000 fa09 	bl	8008058 <__smakebuf_r>
 8007c46:	89a0      	ldrh	r0, [r4, #12]
 8007c48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c4c:	f010 0301 	ands.w	r3, r0, #1
 8007c50:	d00a      	beq.n	8007c68 <__swsetup_r+0xbc>
 8007c52:	2300      	movs	r3, #0
 8007c54:	60a3      	str	r3, [r4, #8]
 8007c56:	6963      	ldr	r3, [r4, #20]
 8007c58:	425b      	negs	r3, r3
 8007c5a:	61a3      	str	r3, [r4, #24]
 8007c5c:	6923      	ldr	r3, [r4, #16]
 8007c5e:	b943      	cbnz	r3, 8007c72 <__swsetup_r+0xc6>
 8007c60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c64:	d1ba      	bne.n	8007bdc <__swsetup_r+0x30>
 8007c66:	bd70      	pop	{r4, r5, r6, pc}
 8007c68:	0781      	lsls	r1, r0, #30
 8007c6a:	bf58      	it	pl
 8007c6c:	6963      	ldrpl	r3, [r4, #20]
 8007c6e:	60a3      	str	r3, [r4, #8]
 8007c70:	e7f4      	b.n	8007c5c <__swsetup_r+0xb0>
 8007c72:	2000      	movs	r0, #0
 8007c74:	e7f7      	b.n	8007c66 <__swsetup_r+0xba>
 8007c76:	bf00      	nop
 8007c78:	2000000c 	.word	0x2000000c
 8007c7c:	08008858 	.word	0x08008858
 8007c80:	08008878 	.word	0x08008878
 8007c84:	08008838 	.word	0x08008838

08007c88 <abort>:
 8007c88:	b508      	push	{r3, lr}
 8007c8a:	2006      	movs	r0, #6
 8007c8c:	f000 fa96 	bl	80081bc <raise>
 8007c90:	2001      	movs	r0, #1
 8007c92:	f7fa fa49 	bl	8002128 <_exit>
	...

08007c98 <__sflush_r>:
 8007c98:	898a      	ldrh	r2, [r1, #12]
 8007c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9e:	4605      	mov	r5, r0
 8007ca0:	0710      	lsls	r0, r2, #28
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	d458      	bmi.n	8007d58 <__sflush_r+0xc0>
 8007ca6:	684b      	ldr	r3, [r1, #4]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	dc05      	bgt.n	8007cb8 <__sflush_r+0x20>
 8007cac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	dc02      	bgt.n	8007cb8 <__sflush_r+0x20>
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cba:	2e00      	cmp	r6, #0
 8007cbc:	d0f9      	beq.n	8007cb2 <__sflush_r+0x1a>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007cc4:	682f      	ldr	r7, [r5, #0]
 8007cc6:	602b      	str	r3, [r5, #0]
 8007cc8:	d032      	beq.n	8007d30 <__sflush_r+0x98>
 8007cca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ccc:	89a3      	ldrh	r3, [r4, #12]
 8007cce:	075a      	lsls	r2, r3, #29
 8007cd0:	d505      	bpl.n	8007cde <__sflush_r+0x46>
 8007cd2:	6863      	ldr	r3, [r4, #4]
 8007cd4:	1ac0      	subs	r0, r0, r3
 8007cd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007cd8:	b10b      	cbz	r3, 8007cde <__sflush_r+0x46>
 8007cda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007cdc:	1ac0      	subs	r0, r0, r3
 8007cde:	2300      	movs	r3, #0
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ce4:	6a21      	ldr	r1, [r4, #32]
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	47b0      	blx	r6
 8007cea:	1c43      	adds	r3, r0, #1
 8007cec:	89a3      	ldrh	r3, [r4, #12]
 8007cee:	d106      	bne.n	8007cfe <__sflush_r+0x66>
 8007cf0:	6829      	ldr	r1, [r5, #0]
 8007cf2:	291d      	cmp	r1, #29
 8007cf4:	d82c      	bhi.n	8007d50 <__sflush_r+0xb8>
 8007cf6:	4a2a      	ldr	r2, [pc, #168]	; (8007da0 <__sflush_r+0x108>)
 8007cf8:	40ca      	lsrs	r2, r1
 8007cfa:	07d6      	lsls	r6, r2, #31
 8007cfc:	d528      	bpl.n	8007d50 <__sflush_r+0xb8>
 8007cfe:	2200      	movs	r2, #0
 8007d00:	6062      	str	r2, [r4, #4]
 8007d02:	04d9      	lsls	r1, r3, #19
 8007d04:	6922      	ldr	r2, [r4, #16]
 8007d06:	6022      	str	r2, [r4, #0]
 8007d08:	d504      	bpl.n	8007d14 <__sflush_r+0x7c>
 8007d0a:	1c42      	adds	r2, r0, #1
 8007d0c:	d101      	bne.n	8007d12 <__sflush_r+0x7a>
 8007d0e:	682b      	ldr	r3, [r5, #0]
 8007d10:	b903      	cbnz	r3, 8007d14 <__sflush_r+0x7c>
 8007d12:	6560      	str	r0, [r4, #84]	; 0x54
 8007d14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d16:	602f      	str	r7, [r5, #0]
 8007d18:	2900      	cmp	r1, #0
 8007d1a:	d0ca      	beq.n	8007cb2 <__sflush_r+0x1a>
 8007d1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d20:	4299      	cmp	r1, r3
 8007d22:	d002      	beq.n	8007d2a <__sflush_r+0x92>
 8007d24:	4628      	mov	r0, r5
 8007d26:	f7fd f94d 	bl	8004fc4 <_free_r>
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	6360      	str	r0, [r4, #52]	; 0x34
 8007d2e:	e7c1      	b.n	8007cb4 <__sflush_r+0x1c>
 8007d30:	6a21      	ldr	r1, [r4, #32]
 8007d32:	2301      	movs	r3, #1
 8007d34:	4628      	mov	r0, r5
 8007d36:	47b0      	blx	r6
 8007d38:	1c41      	adds	r1, r0, #1
 8007d3a:	d1c7      	bne.n	8007ccc <__sflush_r+0x34>
 8007d3c:	682b      	ldr	r3, [r5, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d0c4      	beq.n	8007ccc <__sflush_r+0x34>
 8007d42:	2b1d      	cmp	r3, #29
 8007d44:	d001      	beq.n	8007d4a <__sflush_r+0xb2>
 8007d46:	2b16      	cmp	r3, #22
 8007d48:	d101      	bne.n	8007d4e <__sflush_r+0xb6>
 8007d4a:	602f      	str	r7, [r5, #0]
 8007d4c:	e7b1      	b.n	8007cb2 <__sflush_r+0x1a>
 8007d4e:	89a3      	ldrh	r3, [r4, #12]
 8007d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d54:	81a3      	strh	r3, [r4, #12]
 8007d56:	e7ad      	b.n	8007cb4 <__sflush_r+0x1c>
 8007d58:	690f      	ldr	r7, [r1, #16]
 8007d5a:	2f00      	cmp	r7, #0
 8007d5c:	d0a9      	beq.n	8007cb2 <__sflush_r+0x1a>
 8007d5e:	0793      	lsls	r3, r2, #30
 8007d60:	680e      	ldr	r6, [r1, #0]
 8007d62:	bf08      	it	eq
 8007d64:	694b      	ldreq	r3, [r1, #20]
 8007d66:	600f      	str	r7, [r1, #0]
 8007d68:	bf18      	it	ne
 8007d6a:	2300      	movne	r3, #0
 8007d6c:	eba6 0807 	sub.w	r8, r6, r7
 8007d70:	608b      	str	r3, [r1, #8]
 8007d72:	f1b8 0f00 	cmp.w	r8, #0
 8007d76:	dd9c      	ble.n	8007cb2 <__sflush_r+0x1a>
 8007d78:	6a21      	ldr	r1, [r4, #32]
 8007d7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d7c:	4643      	mov	r3, r8
 8007d7e:	463a      	mov	r2, r7
 8007d80:	4628      	mov	r0, r5
 8007d82:	47b0      	blx	r6
 8007d84:	2800      	cmp	r0, #0
 8007d86:	dc06      	bgt.n	8007d96 <__sflush_r+0xfe>
 8007d88:	89a3      	ldrh	r3, [r4, #12]
 8007d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d8e:	81a3      	strh	r3, [r4, #12]
 8007d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d94:	e78e      	b.n	8007cb4 <__sflush_r+0x1c>
 8007d96:	4407      	add	r7, r0
 8007d98:	eba8 0800 	sub.w	r8, r8, r0
 8007d9c:	e7e9      	b.n	8007d72 <__sflush_r+0xda>
 8007d9e:	bf00      	nop
 8007da0:	20400001 	.word	0x20400001

08007da4 <_fflush_r>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	690b      	ldr	r3, [r1, #16]
 8007da8:	4605      	mov	r5, r0
 8007daa:	460c      	mov	r4, r1
 8007dac:	b913      	cbnz	r3, 8007db4 <_fflush_r+0x10>
 8007dae:	2500      	movs	r5, #0
 8007db0:	4628      	mov	r0, r5
 8007db2:	bd38      	pop	{r3, r4, r5, pc}
 8007db4:	b118      	cbz	r0, 8007dbe <_fflush_r+0x1a>
 8007db6:	6983      	ldr	r3, [r0, #24]
 8007db8:	b90b      	cbnz	r3, 8007dbe <_fflush_r+0x1a>
 8007dba:	f000 f887 	bl	8007ecc <__sinit>
 8007dbe:	4b14      	ldr	r3, [pc, #80]	; (8007e10 <_fflush_r+0x6c>)
 8007dc0:	429c      	cmp	r4, r3
 8007dc2:	d11b      	bne.n	8007dfc <_fflush_r+0x58>
 8007dc4:	686c      	ldr	r4, [r5, #4]
 8007dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d0ef      	beq.n	8007dae <_fflush_r+0xa>
 8007dce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007dd0:	07d0      	lsls	r0, r2, #31
 8007dd2:	d404      	bmi.n	8007dde <_fflush_r+0x3a>
 8007dd4:	0599      	lsls	r1, r3, #22
 8007dd6:	d402      	bmi.n	8007dde <_fflush_r+0x3a>
 8007dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dda:	f000 f915 	bl	8008008 <__retarget_lock_acquire_recursive>
 8007dde:	4628      	mov	r0, r5
 8007de0:	4621      	mov	r1, r4
 8007de2:	f7ff ff59 	bl	8007c98 <__sflush_r>
 8007de6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007de8:	07da      	lsls	r2, r3, #31
 8007dea:	4605      	mov	r5, r0
 8007dec:	d4e0      	bmi.n	8007db0 <_fflush_r+0xc>
 8007dee:	89a3      	ldrh	r3, [r4, #12]
 8007df0:	059b      	lsls	r3, r3, #22
 8007df2:	d4dd      	bmi.n	8007db0 <_fflush_r+0xc>
 8007df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007df6:	f000 f908 	bl	800800a <__retarget_lock_release_recursive>
 8007dfa:	e7d9      	b.n	8007db0 <_fflush_r+0xc>
 8007dfc:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <_fflush_r+0x70>)
 8007dfe:	429c      	cmp	r4, r3
 8007e00:	d101      	bne.n	8007e06 <_fflush_r+0x62>
 8007e02:	68ac      	ldr	r4, [r5, #8]
 8007e04:	e7df      	b.n	8007dc6 <_fflush_r+0x22>
 8007e06:	4b04      	ldr	r3, [pc, #16]	; (8007e18 <_fflush_r+0x74>)
 8007e08:	429c      	cmp	r4, r3
 8007e0a:	bf08      	it	eq
 8007e0c:	68ec      	ldreq	r4, [r5, #12]
 8007e0e:	e7da      	b.n	8007dc6 <_fflush_r+0x22>
 8007e10:	08008858 	.word	0x08008858
 8007e14:	08008878 	.word	0x08008878
 8007e18:	08008838 	.word	0x08008838

08007e1c <std>:
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	b510      	push	{r4, lr}
 8007e20:	4604      	mov	r4, r0
 8007e22:	e9c0 3300 	strd	r3, r3, [r0]
 8007e26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e2a:	6083      	str	r3, [r0, #8]
 8007e2c:	8181      	strh	r1, [r0, #12]
 8007e2e:	6643      	str	r3, [r0, #100]	; 0x64
 8007e30:	81c2      	strh	r2, [r0, #14]
 8007e32:	6183      	str	r3, [r0, #24]
 8007e34:	4619      	mov	r1, r3
 8007e36:	2208      	movs	r2, #8
 8007e38:	305c      	adds	r0, #92	; 0x5c
 8007e3a:	f7fd f8bb 	bl	8004fb4 <memset>
 8007e3e:	4b05      	ldr	r3, [pc, #20]	; (8007e54 <std+0x38>)
 8007e40:	6263      	str	r3, [r4, #36]	; 0x24
 8007e42:	4b05      	ldr	r3, [pc, #20]	; (8007e58 <std+0x3c>)
 8007e44:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e46:	4b05      	ldr	r3, [pc, #20]	; (8007e5c <std+0x40>)
 8007e48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e4a:	4b05      	ldr	r3, [pc, #20]	; (8007e60 <std+0x44>)
 8007e4c:	6224      	str	r4, [r4, #32]
 8007e4e:	6323      	str	r3, [r4, #48]	; 0x30
 8007e50:	bd10      	pop	{r4, pc}
 8007e52:	bf00      	nop
 8007e54:	080081f5 	.word	0x080081f5
 8007e58:	08008217 	.word	0x08008217
 8007e5c:	0800824f 	.word	0x0800824f
 8007e60:	08008273 	.word	0x08008273

08007e64 <_cleanup_r>:
 8007e64:	4901      	ldr	r1, [pc, #4]	; (8007e6c <_cleanup_r+0x8>)
 8007e66:	f000 b8af 	b.w	8007fc8 <_fwalk_reent>
 8007e6a:	bf00      	nop
 8007e6c:	08007da5 	.word	0x08007da5

08007e70 <__sfmoreglue>:
 8007e70:	b570      	push	{r4, r5, r6, lr}
 8007e72:	2268      	movs	r2, #104	; 0x68
 8007e74:	1e4d      	subs	r5, r1, #1
 8007e76:	4355      	muls	r5, r2
 8007e78:	460e      	mov	r6, r1
 8007e7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e7e:	f7fd f90d 	bl	800509c <_malloc_r>
 8007e82:	4604      	mov	r4, r0
 8007e84:	b140      	cbz	r0, 8007e98 <__sfmoreglue+0x28>
 8007e86:	2100      	movs	r1, #0
 8007e88:	e9c0 1600 	strd	r1, r6, [r0]
 8007e8c:	300c      	adds	r0, #12
 8007e8e:	60a0      	str	r0, [r4, #8]
 8007e90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e94:	f7fd f88e 	bl	8004fb4 <memset>
 8007e98:	4620      	mov	r0, r4
 8007e9a:	bd70      	pop	{r4, r5, r6, pc}

08007e9c <__sfp_lock_acquire>:
 8007e9c:	4801      	ldr	r0, [pc, #4]	; (8007ea4 <__sfp_lock_acquire+0x8>)
 8007e9e:	f000 b8b3 	b.w	8008008 <__retarget_lock_acquire_recursive>
 8007ea2:	bf00      	nop
 8007ea4:	20000611 	.word	0x20000611

08007ea8 <__sfp_lock_release>:
 8007ea8:	4801      	ldr	r0, [pc, #4]	; (8007eb0 <__sfp_lock_release+0x8>)
 8007eaa:	f000 b8ae 	b.w	800800a <__retarget_lock_release_recursive>
 8007eae:	bf00      	nop
 8007eb0:	20000611 	.word	0x20000611

08007eb4 <__sinit_lock_acquire>:
 8007eb4:	4801      	ldr	r0, [pc, #4]	; (8007ebc <__sinit_lock_acquire+0x8>)
 8007eb6:	f000 b8a7 	b.w	8008008 <__retarget_lock_acquire_recursive>
 8007eba:	bf00      	nop
 8007ebc:	20000612 	.word	0x20000612

08007ec0 <__sinit_lock_release>:
 8007ec0:	4801      	ldr	r0, [pc, #4]	; (8007ec8 <__sinit_lock_release+0x8>)
 8007ec2:	f000 b8a2 	b.w	800800a <__retarget_lock_release_recursive>
 8007ec6:	bf00      	nop
 8007ec8:	20000612 	.word	0x20000612

08007ecc <__sinit>:
 8007ecc:	b510      	push	{r4, lr}
 8007ece:	4604      	mov	r4, r0
 8007ed0:	f7ff fff0 	bl	8007eb4 <__sinit_lock_acquire>
 8007ed4:	69a3      	ldr	r3, [r4, #24]
 8007ed6:	b11b      	cbz	r3, 8007ee0 <__sinit+0x14>
 8007ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007edc:	f7ff bff0 	b.w	8007ec0 <__sinit_lock_release>
 8007ee0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ee4:	6523      	str	r3, [r4, #80]	; 0x50
 8007ee6:	4b13      	ldr	r3, [pc, #76]	; (8007f34 <__sinit+0x68>)
 8007ee8:	4a13      	ldr	r2, [pc, #76]	; (8007f38 <__sinit+0x6c>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	62a2      	str	r2, [r4, #40]	; 0x28
 8007eee:	42a3      	cmp	r3, r4
 8007ef0:	bf04      	itt	eq
 8007ef2:	2301      	moveq	r3, #1
 8007ef4:	61a3      	streq	r3, [r4, #24]
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f000 f820 	bl	8007f3c <__sfp>
 8007efc:	6060      	str	r0, [r4, #4]
 8007efe:	4620      	mov	r0, r4
 8007f00:	f000 f81c 	bl	8007f3c <__sfp>
 8007f04:	60a0      	str	r0, [r4, #8]
 8007f06:	4620      	mov	r0, r4
 8007f08:	f000 f818 	bl	8007f3c <__sfp>
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	60e0      	str	r0, [r4, #12]
 8007f10:	2104      	movs	r1, #4
 8007f12:	6860      	ldr	r0, [r4, #4]
 8007f14:	f7ff ff82 	bl	8007e1c <std>
 8007f18:	68a0      	ldr	r0, [r4, #8]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	2109      	movs	r1, #9
 8007f1e:	f7ff ff7d 	bl	8007e1c <std>
 8007f22:	68e0      	ldr	r0, [r4, #12]
 8007f24:	2202      	movs	r2, #2
 8007f26:	2112      	movs	r1, #18
 8007f28:	f7ff ff78 	bl	8007e1c <std>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	61a3      	str	r3, [r4, #24]
 8007f30:	e7d2      	b.n	8007ed8 <__sinit+0xc>
 8007f32:	bf00      	nop
 8007f34:	08008410 	.word	0x08008410
 8007f38:	08007e65 	.word	0x08007e65

08007f3c <__sfp>:
 8007f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3e:	4607      	mov	r7, r0
 8007f40:	f7ff ffac 	bl	8007e9c <__sfp_lock_acquire>
 8007f44:	4b1e      	ldr	r3, [pc, #120]	; (8007fc0 <__sfp+0x84>)
 8007f46:	681e      	ldr	r6, [r3, #0]
 8007f48:	69b3      	ldr	r3, [r6, #24]
 8007f4a:	b913      	cbnz	r3, 8007f52 <__sfp+0x16>
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	f7ff ffbd 	bl	8007ecc <__sinit>
 8007f52:	3648      	adds	r6, #72	; 0x48
 8007f54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	d503      	bpl.n	8007f64 <__sfp+0x28>
 8007f5c:	6833      	ldr	r3, [r6, #0]
 8007f5e:	b30b      	cbz	r3, 8007fa4 <__sfp+0x68>
 8007f60:	6836      	ldr	r6, [r6, #0]
 8007f62:	e7f7      	b.n	8007f54 <__sfp+0x18>
 8007f64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f68:	b9d5      	cbnz	r5, 8007fa0 <__sfp+0x64>
 8007f6a:	4b16      	ldr	r3, [pc, #88]	; (8007fc4 <__sfp+0x88>)
 8007f6c:	60e3      	str	r3, [r4, #12]
 8007f6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f72:	6665      	str	r5, [r4, #100]	; 0x64
 8007f74:	f000 f847 	bl	8008006 <__retarget_lock_init_recursive>
 8007f78:	f7ff ff96 	bl	8007ea8 <__sfp_lock_release>
 8007f7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f84:	6025      	str	r5, [r4, #0]
 8007f86:	61a5      	str	r5, [r4, #24]
 8007f88:	2208      	movs	r2, #8
 8007f8a:	4629      	mov	r1, r5
 8007f8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f90:	f7fd f810 	bl	8004fb4 <memset>
 8007f94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fa0:	3468      	adds	r4, #104	; 0x68
 8007fa2:	e7d9      	b.n	8007f58 <__sfp+0x1c>
 8007fa4:	2104      	movs	r1, #4
 8007fa6:	4638      	mov	r0, r7
 8007fa8:	f7ff ff62 	bl	8007e70 <__sfmoreglue>
 8007fac:	4604      	mov	r4, r0
 8007fae:	6030      	str	r0, [r6, #0]
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	d1d5      	bne.n	8007f60 <__sfp+0x24>
 8007fb4:	f7ff ff78 	bl	8007ea8 <__sfp_lock_release>
 8007fb8:	230c      	movs	r3, #12
 8007fba:	603b      	str	r3, [r7, #0]
 8007fbc:	e7ee      	b.n	8007f9c <__sfp+0x60>
 8007fbe:	bf00      	nop
 8007fc0:	08008410 	.word	0x08008410
 8007fc4:	ffff0001 	.word	0xffff0001

08007fc8 <_fwalk_reent>:
 8007fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fcc:	4606      	mov	r6, r0
 8007fce:	4688      	mov	r8, r1
 8007fd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007fd4:	2700      	movs	r7, #0
 8007fd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fda:	f1b9 0901 	subs.w	r9, r9, #1
 8007fde:	d505      	bpl.n	8007fec <_fwalk_reent+0x24>
 8007fe0:	6824      	ldr	r4, [r4, #0]
 8007fe2:	2c00      	cmp	r4, #0
 8007fe4:	d1f7      	bne.n	8007fd6 <_fwalk_reent+0xe>
 8007fe6:	4638      	mov	r0, r7
 8007fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fec:	89ab      	ldrh	r3, [r5, #12]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d907      	bls.n	8008002 <_fwalk_reent+0x3a>
 8007ff2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	d003      	beq.n	8008002 <_fwalk_reent+0x3a>
 8007ffa:	4629      	mov	r1, r5
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	47c0      	blx	r8
 8008000:	4307      	orrs	r7, r0
 8008002:	3568      	adds	r5, #104	; 0x68
 8008004:	e7e9      	b.n	8007fda <_fwalk_reent+0x12>

08008006 <__retarget_lock_init_recursive>:
 8008006:	4770      	bx	lr

08008008 <__retarget_lock_acquire_recursive>:
 8008008:	4770      	bx	lr

0800800a <__retarget_lock_release_recursive>:
 800800a:	4770      	bx	lr

0800800c <__swhatbuf_r>:
 800800c:	b570      	push	{r4, r5, r6, lr}
 800800e:	460e      	mov	r6, r1
 8008010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008014:	2900      	cmp	r1, #0
 8008016:	b096      	sub	sp, #88	; 0x58
 8008018:	4614      	mov	r4, r2
 800801a:	461d      	mov	r5, r3
 800801c:	da08      	bge.n	8008030 <__swhatbuf_r+0x24>
 800801e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008022:	2200      	movs	r2, #0
 8008024:	602a      	str	r2, [r5, #0]
 8008026:	061a      	lsls	r2, r3, #24
 8008028:	d410      	bmi.n	800804c <__swhatbuf_r+0x40>
 800802a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800802e:	e00e      	b.n	800804e <__swhatbuf_r+0x42>
 8008030:	466a      	mov	r2, sp
 8008032:	f000 f945 	bl	80082c0 <_fstat_r>
 8008036:	2800      	cmp	r0, #0
 8008038:	dbf1      	blt.n	800801e <__swhatbuf_r+0x12>
 800803a:	9a01      	ldr	r2, [sp, #4]
 800803c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008040:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008044:	425a      	negs	r2, r3
 8008046:	415a      	adcs	r2, r3
 8008048:	602a      	str	r2, [r5, #0]
 800804a:	e7ee      	b.n	800802a <__swhatbuf_r+0x1e>
 800804c:	2340      	movs	r3, #64	; 0x40
 800804e:	2000      	movs	r0, #0
 8008050:	6023      	str	r3, [r4, #0]
 8008052:	b016      	add	sp, #88	; 0x58
 8008054:	bd70      	pop	{r4, r5, r6, pc}
	...

08008058 <__smakebuf_r>:
 8008058:	898b      	ldrh	r3, [r1, #12]
 800805a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800805c:	079d      	lsls	r5, r3, #30
 800805e:	4606      	mov	r6, r0
 8008060:	460c      	mov	r4, r1
 8008062:	d507      	bpl.n	8008074 <__smakebuf_r+0x1c>
 8008064:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008068:	6023      	str	r3, [r4, #0]
 800806a:	6123      	str	r3, [r4, #16]
 800806c:	2301      	movs	r3, #1
 800806e:	6163      	str	r3, [r4, #20]
 8008070:	b002      	add	sp, #8
 8008072:	bd70      	pop	{r4, r5, r6, pc}
 8008074:	ab01      	add	r3, sp, #4
 8008076:	466a      	mov	r2, sp
 8008078:	f7ff ffc8 	bl	800800c <__swhatbuf_r>
 800807c:	9900      	ldr	r1, [sp, #0]
 800807e:	4605      	mov	r5, r0
 8008080:	4630      	mov	r0, r6
 8008082:	f7fd f80b 	bl	800509c <_malloc_r>
 8008086:	b948      	cbnz	r0, 800809c <__smakebuf_r+0x44>
 8008088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800808c:	059a      	lsls	r2, r3, #22
 800808e:	d4ef      	bmi.n	8008070 <__smakebuf_r+0x18>
 8008090:	f023 0303 	bic.w	r3, r3, #3
 8008094:	f043 0302 	orr.w	r3, r3, #2
 8008098:	81a3      	strh	r3, [r4, #12]
 800809a:	e7e3      	b.n	8008064 <__smakebuf_r+0xc>
 800809c:	4b0d      	ldr	r3, [pc, #52]	; (80080d4 <__smakebuf_r+0x7c>)
 800809e:	62b3      	str	r3, [r6, #40]	; 0x28
 80080a0:	89a3      	ldrh	r3, [r4, #12]
 80080a2:	6020      	str	r0, [r4, #0]
 80080a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a8:	81a3      	strh	r3, [r4, #12]
 80080aa:	9b00      	ldr	r3, [sp, #0]
 80080ac:	6163      	str	r3, [r4, #20]
 80080ae:	9b01      	ldr	r3, [sp, #4]
 80080b0:	6120      	str	r0, [r4, #16]
 80080b2:	b15b      	cbz	r3, 80080cc <__smakebuf_r+0x74>
 80080b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080b8:	4630      	mov	r0, r6
 80080ba:	f000 f913 	bl	80082e4 <_isatty_r>
 80080be:	b128      	cbz	r0, 80080cc <__smakebuf_r+0x74>
 80080c0:	89a3      	ldrh	r3, [r4, #12]
 80080c2:	f023 0303 	bic.w	r3, r3, #3
 80080c6:	f043 0301 	orr.w	r3, r3, #1
 80080ca:	81a3      	strh	r3, [r4, #12]
 80080cc:	89a0      	ldrh	r0, [r4, #12]
 80080ce:	4305      	orrs	r5, r0
 80080d0:	81a5      	strh	r5, [r4, #12]
 80080d2:	e7cd      	b.n	8008070 <__smakebuf_r+0x18>
 80080d4:	08007e65 	.word	0x08007e65

080080d8 <memmove>:
 80080d8:	4288      	cmp	r0, r1
 80080da:	b510      	push	{r4, lr}
 80080dc:	eb01 0402 	add.w	r4, r1, r2
 80080e0:	d902      	bls.n	80080e8 <memmove+0x10>
 80080e2:	4284      	cmp	r4, r0
 80080e4:	4623      	mov	r3, r4
 80080e6:	d807      	bhi.n	80080f8 <memmove+0x20>
 80080e8:	1e43      	subs	r3, r0, #1
 80080ea:	42a1      	cmp	r1, r4
 80080ec:	d008      	beq.n	8008100 <memmove+0x28>
 80080ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80080f6:	e7f8      	b.n	80080ea <memmove+0x12>
 80080f8:	4402      	add	r2, r0
 80080fa:	4601      	mov	r1, r0
 80080fc:	428a      	cmp	r2, r1
 80080fe:	d100      	bne.n	8008102 <memmove+0x2a>
 8008100:	bd10      	pop	{r4, pc}
 8008102:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008106:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800810a:	e7f7      	b.n	80080fc <memmove+0x24>

0800810c <_realloc_r>:
 800810c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008110:	4680      	mov	r8, r0
 8008112:	4614      	mov	r4, r2
 8008114:	460e      	mov	r6, r1
 8008116:	b921      	cbnz	r1, 8008122 <_realloc_r+0x16>
 8008118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800811c:	4611      	mov	r1, r2
 800811e:	f7fc bfbd 	b.w	800509c <_malloc_r>
 8008122:	b92a      	cbnz	r2, 8008130 <_realloc_r+0x24>
 8008124:	f7fc ff4e 	bl	8004fc4 <_free_r>
 8008128:	4625      	mov	r5, r4
 800812a:	4628      	mov	r0, r5
 800812c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008130:	f000 f8fa 	bl	8008328 <_malloc_usable_size_r>
 8008134:	4284      	cmp	r4, r0
 8008136:	4607      	mov	r7, r0
 8008138:	d802      	bhi.n	8008140 <_realloc_r+0x34>
 800813a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800813e:	d812      	bhi.n	8008166 <_realloc_r+0x5a>
 8008140:	4621      	mov	r1, r4
 8008142:	4640      	mov	r0, r8
 8008144:	f7fc ffaa 	bl	800509c <_malloc_r>
 8008148:	4605      	mov	r5, r0
 800814a:	2800      	cmp	r0, #0
 800814c:	d0ed      	beq.n	800812a <_realloc_r+0x1e>
 800814e:	42bc      	cmp	r4, r7
 8008150:	4622      	mov	r2, r4
 8008152:	4631      	mov	r1, r6
 8008154:	bf28      	it	cs
 8008156:	463a      	movcs	r2, r7
 8008158:	f7fc ff1e 	bl	8004f98 <memcpy>
 800815c:	4631      	mov	r1, r6
 800815e:	4640      	mov	r0, r8
 8008160:	f7fc ff30 	bl	8004fc4 <_free_r>
 8008164:	e7e1      	b.n	800812a <_realloc_r+0x1e>
 8008166:	4635      	mov	r5, r6
 8008168:	e7df      	b.n	800812a <_realloc_r+0x1e>

0800816a <_raise_r>:
 800816a:	291f      	cmp	r1, #31
 800816c:	b538      	push	{r3, r4, r5, lr}
 800816e:	4604      	mov	r4, r0
 8008170:	460d      	mov	r5, r1
 8008172:	d904      	bls.n	800817e <_raise_r+0x14>
 8008174:	2316      	movs	r3, #22
 8008176:	6003      	str	r3, [r0, #0]
 8008178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800817c:	bd38      	pop	{r3, r4, r5, pc}
 800817e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008180:	b112      	cbz	r2, 8008188 <_raise_r+0x1e>
 8008182:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008186:	b94b      	cbnz	r3, 800819c <_raise_r+0x32>
 8008188:	4620      	mov	r0, r4
 800818a:	f000 f831 	bl	80081f0 <_getpid_r>
 800818e:	462a      	mov	r2, r5
 8008190:	4601      	mov	r1, r0
 8008192:	4620      	mov	r0, r4
 8008194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008198:	f000 b818 	b.w	80081cc <_kill_r>
 800819c:	2b01      	cmp	r3, #1
 800819e:	d00a      	beq.n	80081b6 <_raise_r+0x4c>
 80081a0:	1c59      	adds	r1, r3, #1
 80081a2:	d103      	bne.n	80081ac <_raise_r+0x42>
 80081a4:	2316      	movs	r3, #22
 80081a6:	6003      	str	r3, [r0, #0]
 80081a8:	2001      	movs	r0, #1
 80081aa:	e7e7      	b.n	800817c <_raise_r+0x12>
 80081ac:	2400      	movs	r4, #0
 80081ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80081b2:	4628      	mov	r0, r5
 80081b4:	4798      	blx	r3
 80081b6:	2000      	movs	r0, #0
 80081b8:	e7e0      	b.n	800817c <_raise_r+0x12>
	...

080081bc <raise>:
 80081bc:	4b02      	ldr	r3, [pc, #8]	; (80081c8 <raise+0xc>)
 80081be:	4601      	mov	r1, r0
 80081c0:	6818      	ldr	r0, [r3, #0]
 80081c2:	f7ff bfd2 	b.w	800816a <_raise_r>
 80081c6:	bf00      	nop
 80081c8:	2000000c 	.word	0x2000000c

080081cc <_kill_r>:
 80081cc:	b538      	push	{r3, r4, r5, lr}
 80081ce:	4d07      	ldr	r5, [pc, #28]	; (80081ec <_kill_r+0x20>)
 80081d0:	2300      	movs	r3, #0
 80081d2:	4604      	mov	r4, r0
 80081d4:	4608      	mov	r0, r1
 80081d6:	4611      	mov	r1, r2
 80081d8:	602b      	str	r3, [r5, #0]
 80081da:	f7f9 ff95 	bl	8002108 <_kill>
 80081de:	1c43      	adds	r3, r0, #1
 80081e0:	d102      	bne.n	80081e8 <_kill_r+0x1c>
 80081e2:	682b      	ldr	r3, [r5, #0]
 80081e4:	b103      	cbz	r3, 80081e8 <_kill_r+0x1c>
 80081e6:	6023      	str	r3, [r4, #0]
 80081e8:	bd38      	pop	{r3, r4, r5, pc}
 80081ea:	bf00      	nop
 80081ec:	2000060c 	.word	0x2000060c

080081f0 <_getpid_r>:
 80081f0:	f7f9 bf82 	b.w	80020f8 <_getpid>

080081f4 <__sread>:
 80081f4:	b510      	push	{r4, lr}
 80081f6:	460c      	mov	r4, r1
 80081f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081fc:	f000 f89c 	bl	8008338 <_read_r>
 8008200:	2800      	cmp	r0, #0
 8008202:	bfab      	itete	ge
 8008204:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008206:	89a3      	ldrhlt	r3, [r4, #12]
 8008208:	181b      	addge	r3, r3, r0
 800820a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800820e:	bfac      	ite	ge
 8008210:	6563      	strge	r3, [r4, #84]	; 0x54
 8008212:	81a3      	strhlt	r3, [r4, #12]
 8008214:	bd10      	pop	{r4, pc}

08008216 <__swrite>:
 8008216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800821a:	461f      	mov	r7, r3
 800821c:	898b      	ldrh	r3, [r1, #12]
 800821e:	05db      	lsls	r3, r3, #23
 8008220:	4605      	mov	r5, r0
 8008222:	460c      	mov	r4, r1
 8008224:	4616      	mov	r6, r2
 8008226:	d505      	bpl.n	8008234 <__swrite+0x1e>
 8008228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800822c:	2302      	movs	r3, #2
 800822e:	2200      	movs	r2, #0
 8008230:	f000 f868 	bl	8008304 <_lseek_r>
 8008234:	89a3      	ldrh	r3, [r4, #12]
 8008236:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800823a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800823e:	81a3      	strh	r3, [r4, #12]
 8008240:	4632      	mov	r2, r6
 8008242:	463b      	mov	r3, r7
 8008244:	4628      	mov	r0, r5
 8008246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800824a:	f000 b817 	b.w	800827c <_write_r>

0800824e <__sseek>:
 800824e:	b510      	push	{r4, lr}
 8008250:	460c      	mov	r4, r1
 8008252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008256:	f000 f855 	bl	8008304 <_lseek_r>
 800825a:	1c43      	adds	r3, r0, #1
 800825c:	89a3      	ldrh	r3, [r4, #12]
 800825e:	bf15      	itete	ne
 8008260:	6560      	strne	r0, [r4, #84]	; 0x54
 8008262:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008266:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800826a:	81a3      	strheq	r3, [r4, #12]
 800826c:	bf18      	it	ne
 800826e:	81a3      	strhne	r3, [r4, #12]
 8008270:	bd10      	pop	{r4, pc}

08008272 <__sclose>:
 8008272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008276:	f000 b813 	b.w	80082a0 <_close_r>
	...

0800827c <_write_r>:
 800827c:	b538      	push	{r3, r4, r5, lr}
 800827e:	4d07      	ldr	r5, [pc, #28]	; (800829c <_write_r+0x20>)
 8008280:	4604      	mov	r4, r0
 8008282:	4608      	mov	r0, r1
 8008284:	4611      	mov	r1, r2
 8008286:	2200      	movs	r2, #0
 8008288:	602a      	str	r2, [r5, #0]
 800828a:	461a      	mov	r2, r3
 800828c:	f7f9 ff73 	bl	8002176 <_write>
 8008290:	1c43      	adds	r3, r0, #1
 8008292:	d102      	bne.n	800829a <_write_r+0x1e>
 8008294:	682b      	ldr	r3, [r5, #0]
 8008296:	b103      	cbz	r3, 800829a <_write_r+0x1e>
 8008298:	6023      	str	r3, [r4, #0]
 800829a:	bd38      	pop	{r3, r4, r5, pc}
 800829c:	2000060c 	.word	0x2000060c

080082a0 <_close_r>:
 80082a0:	b538      	push	{r3, r4, r5, lr}
 80082a2:	4d06      	ldr	r5, [pc, #24]	; (80082bc <_close_r+0x1c>)
 80082a4:	2300      	movs	r3, #0
 80082a6:	4604      	mov	r4, r0
 80082a8:	4608      	mov	r0, r1
 80082aa:	602b      	str	r3, [r5, #0]
 80082ac:	f7f9 ff7f 	bl	80021ae <_close>
 80082b0:	1c43      	adds	r3, r0, #1
 80082b2:	d102      	bne.n	80082ba <_close_r+0x1a>
 80082b4:	682b      	ldr	r3, [r5, #0]
 80082b6:	b103      	cbz	r3, 80082ba <_close_r+0x1a>
 80082b8:	6023      	str	r3, [r4, #0]
 80082ba:	bd38      	pop	{r3, r4, r5, pc}
 80082bc:	2000060c 	.word	0x2000060c

080082c0 <_fstat_r>:
 80082c0:	b538      	push	{r3, r4, r5, lr}
 80082c2:	4d07      	ldr	r5, [pc, #28]	; (80082e0 <_fstat_r+0x20>)
 80082c4:	2300      	movs	r3, #0
 80082c6:	4604      	mov	r4, r0
 80082c8:	4608      	mov	r0, r1
 80082ca:	4611      	mov	r1, r2
 80082cc:	602b      	str	r3, [r5, #0]
 80082ce:	f7f9 ff7a 	bl	80021c6 <_fstat>
 80082d2:	1c43      	adds	r3, r0, #1
 80082d4:	d102      	bne.n	80082dc <_fstat_r+0x1c>
 80082d6:	682b      	ldr	r3, [r5, #0]
 80082d8:	b103      	cbz	r3, 80082dc <_fstat_r+0x1c>
 80082da:	6023      	str	r3, [r4, #0]
 80082dc:	bd38      	pop	{r3, r4, r5, pc}
 80082de:	bf00      	nop
 80082e0:	2000060c 	.word	0x2000060c

080082e4 <_isatty_r>:
 80082e4:	b538      	push	{r3, r4, r5, lr}
 80082e6:	4d06      	ldr	r5, [pc, #24]	; (8008300 <_isatty_r+0x1c>)
 80082e8:	2300      	movs	r3, #0
 80082ea:	4604      	mov	r4, r0
 80082ec:	4608      	mov	r0, r1
 80082ee:	602b      	str	r3, [r5, #0]
 80082f0:	f7f9 ff79 	bl	80021e6 <_isatty>
 80082f4:	1c43      	adds	r3, r0, #1
 80082f6:	d102      	bne.n	80082fe <_isatty_r+0x1a>
 80082f8:	682b      	ldr	r3, [r5, #0]
 80082fa:	b103      	cbz	r3, 80082fe <_isatty_r+0x1a>
 80082fc:	6023      	str	r3, [r4, #0]
 80082fe:	bd38      	pop	{r3, r4, r5, pc}
 8008300:	2000060c 	.word	0x2000060c

08008304 <_lseek_r>:
 8008304:	b538      	push	{r3, r4, r5, lr}
 8008306:	4d07      	ldr	r5, [pc, #28]	; (8008324 <_lseek_r+0x20>)
 8008308:	4604      	mov	r4, r0
 800830a:	4608      	mov	r0, r1
 800830c:	4611      	mov	r1, r2
 800830e:	2200      	movs	r2, #0
 8008310:	602a      	str	r2, [r5, #0]
 8008312:	461a      	mov	r2, r3
 8008314:	f7f9 ff72 	bl	80021fc <_lseek>
 8008318:	1c43      	adds	r3, r0, #1
 800831a:	d102      	bne.n	8008322 <_lseek_r+0x1e>
 800831c:	682b      	ldr	r3, [r5, #0]
 800831e:	b103      	cbz	r3, 8008322 <_lseek_r+0x1e>
 8008320:	6023      	str	r3, [r4, #0]
 8008322:	bd38      	pop	{r3, r4, r5, pc}
 8008324:	2000060c 	.word	0x2000060c

08008328 <_malloc_usable_size_r>:
 8008328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800832c:	1f18      	subs	r0, r3, #4
 800832e:	2b00      	cmp	r3, #0
 8008330:	bfbc      	itt	lt
 8008332:	580b      	ldrlt	r3, [r1, r0]
 8008334:	18c0      	addlt	r0, r0, r3
 8008336:	4770      	bx	lr

08008338 <_read_r>:
 8008338:	b538      	push	{r3, r4, r5, lr}
 800833a:	4d07      	ldr	r5, [pc, #28]	; (8008358 <_read_r+0x20>)
 800833c:	4604      	mov	r4, r0
 800833e:	4608      	mov	r0, r1
 8008340:	4611      	mov	r1, r2
 8008342:	2200      	movs	r2, #0
 8008344:	602a      	str	r2, [r5, #0]
 8008346:	461a      	mov	r2, r3
 8008348:	f7f9 fef8 	bl	800213c <_read>
 800834c:	1c43      	adds	r3, r0, #1
 800834e:	d102      	bne.n	8008356 <_read_r+0x1e>
 8008350:	682b      	ldr	r3, [r5, #0]
 8008352:	b103      	cbz	r3, 8008356 <_read_r+0x1e>
 8008354:	6023      	str	r3, [r4, #0]
 8008356:	bd38      	pop	{r3, r4, r5, pc}
 8008358:	2000060c 	.word	0x2000060c

0800835c <_init>:
 800835c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800835e:	bf00      	nop
 8008360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008362:	bc08      	pop	{r3}
 8008364:	469e      	mov	lr, r3
 8008366:	4770      	bx	lr

08008368 <_fini>:
 8008368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836a:	bf00      	nop
 800836c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800836e:	bc08      	pop	{r3}
 8008370:	469e      	mov	lr, r3
 8008372:	4770      	bx	lr
