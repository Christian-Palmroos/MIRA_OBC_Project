
lora_receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013f6c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  08014130  08014130  00024130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014688  08014688  0003035c  2**0
                  CONTENTS
  4 .ARM          00000008  08014688  08014688  00024688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014690  08014690  0003035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014690  08014690  00024690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014694  08014694  00024694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000035c  20000000  08014698  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002658  2000035c  080149f4  0003035c  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200029b4  080149f4  000329b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003035c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b91d  00000000  00000000  0003038c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057b5  00000000  00000000  0005bca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002308  00000000  00000000  00061460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020c0  00000000  00000000  00063768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000837e  00000000  00000000  00065828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c874  00000000  00000000  0006dba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011c6a0  00000000  00000000  0009a41a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b6aba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a5f8  00000000  00000000  001b6b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001c1104  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001c11d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000035c 	.word	0x2000035c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08014114 	.word	0x08014114

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000360 	.word	0x20000360
 80001fc:	08014114 	.word	0x08014114

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8000ee6:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000ee8:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <BSP_I2C2_Init+0x74>)
 8000eea:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <BSP_I2C2_Init+0x78>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	4918      	ldr	r1, [pc, #96]	; (8000f54 <BSP_I2C2_Init+0x78>)
 8000ef4:	600a      	str	r2, [r1, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d122      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8000efa:	4814      	ldr	r0, [pc, #80]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000efc:	f002 fcab 	bl	8003856 <HAL_I2C_GetState>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d11c      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8000f06:	4811      	ldr	r0, [pc, #68]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f08:	f000 f86a 	bl	8000fe0 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d116      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8000f12:	480e      	ldr	r0, [pc, #56]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f14:	f000 f820 	bl	8000f58 <MX_I2C2_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f1e:	f06f 0307 	mvn.w	r3, #7
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	e00c      	b.n	8000f40 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f26:	2100      	movs	r1, #0
 8000f28:	4808      	ldr	r0, [pc, #32]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f2a:	f002 fca2 	bl	8003872 <HAL_I2CEx_ConfigAnalogFilter>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f34:	f06f 0307 	mvn.w	r3, #7
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	e001      	b.n	8000f40 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000378 	.word	0x20000378
 8000f50:	40005800 	.word	0x40005800
 8000f54:	200003cc 	.word	0x200003cc

08000f58 <MX_I2C2_Init>:
}

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <MX_I2C2_Init+0x80>)
 8000f68:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x307075B1;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <MX_I2C2_Init+0x84>)
 8000f6e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f002 fbcc 	bl	8003738 <HAL_I2C_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000faa:	2100      	movs	r1, #0
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f002 fc60 	bl	8003872 <HAL_I2CEx_ConfigAnalogFilter>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f002 fca2 	bl	8003908 <HAL_I2CEx_ConfigDigitalFilter>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40005800 	.word	0x40005800
 8000fdc:	307075b1 	.word	0x307075b1

08000fe0 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0ae      	sub	sp, #184	; 0xb8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	2294      	movs	r2, #148	; 0x94
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f010 fb1b 	bl	801162c <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4618      	mov	r0, r3
 8001004:	f004 fe70 	bl	8005ce8 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001008:	4b23      	ldr	r3, [pc, #140]	; (8001098 <I2C2_MspInit+0xb8>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	4a22      	ldr	r2, [pc, #136]	; (8001098 <I2C2_MspInit+0xb8>)
 800100e:	f043 0302 	orr.w	r3, r3, #2
 8001012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001014:	4b20      	ldr	r3, [pc, #128]	; (8001098 <I2C2_MspInit+0xb8>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8001020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001024:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001028:	2312      	movs	r3, #18
 800102a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 800103a:	2304      	movs	r3, #4
 800103c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001040:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001044:	4619      	mov	r1, r3
 8001046:	4815      	ldr	r0, [pc, #84]	; (800109c <I2C2_MspInit+0xbc>)
 8001048:	f002 f99a 	bl	8003380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 800104c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001050:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001054:	2312      	movs	r3, #18
 8001056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8001066:	2304      	movs	r3, #4
 8001068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 800106c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001070:	4619      	mov	r1, r3
 8001072:	480a      	ldr	r0, [pc, #40]	; (800109c <I2C2_MspInit+0xbc>)
 8001074:	f002 f984 	bl	8003380 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <I2C2_MspInit+0xb8>)
 800107a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107c:	4a06      	ldr	r2, [pc, #24]	; (8001098 <I2C2_MspInit+0xb8>)
 800107e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001082:	6593      	str	r3, [r2, #88]	; 0x58
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <I2C2_MspInit+0xb8>)
 8001086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001090:	bf00      	nop
 8001092:	37b8      	adds	r7, #184	; 0xb8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40021000 	.word	0x40021000
 800109c:	48000400 	.word	0x48000400

080010a0 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6858      	ldr	r0, [r3, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	8adb      	ldrh	r3, [r3, #22]
 80010c2:	2200      	movs	r2, #0
 80010c4:	4619      	mov	r1, r3
 80010c6:	f002 fb05 	bl	80036d4 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	1cf9      	adds	r1, r7, #3
 80010d4:	2201      	movs	r2, #1
 80010d6:	f008 f835 	bl	8009144 <HAL_SPI_Transmit>
 80010da:	4603      	mov	r3, r0
 80010dc:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6818      	ldr	r0, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f107 010f 	add.w	r1, r7, #15
 80010ea:	2201      	movs	r2, #1
 80010ec:	f008 f998 	bl	8009420 <HAL_SPI_Receive>
 80010f0:	4603      	mov	r3, r0
 80010f2:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6858      	ldr	r0, [r3, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	8adb      	ldrh	r3, [r3, #22]
 80010fc:	2201      	movs	r2, #1
 80010fe:	4619      	mov	r1, r3
 8001100:	f002 fae8 	bl	80036d4 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8001104:	7bfb      	ldrb	r3, [r7, #15]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	460b      	mov	r3, r1
 8001118:	70fb      	strb	r3, [r7, #3]
 800111a:	4613      	mov	r3, r2
 800111c:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 800111e:	78fb      	ldrb	r3, [r7, #3]
 8001120:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001124:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8001126:	78bb      	ldrb	r3, [r7, #2]
 8001128:	021b      	lsls	r3, r3, #8
 800112a:	b21a      	sxth	r2, r3
 800112c:	78fb      	ldrb	r3, [r7, #3]
 800112e:	b21b      	sxth	r3, r3
 8001130:	4313      	orrs	r3, r2
 8001132:	b21b      	sxth	r3, r3
 8001134:	b29b      	uxth	r3, r3
 8001136:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6858      	ldr	r0, [r3, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	8adb      	ldrh	r3, [r3, #22]
 8001140:	2200      	movs	r2, #0
 8001142:	4619      	mov	r1, r3
 8001144:	f002 fac6 	bl	80036d4 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6818      	ldr	r0, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f107 010a 	add.w	r1, r7, #10
 8001154:	2202      	movs	r2, #2
 8001156:	f007 fff5 	bl	8009144 <HAL_SPI_Transmit>
 800115a:	4603      	mov	r3, r0
 800115c:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6858      	ldr	r0, [r3, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	8adb      	ldrh	r3, [r3, #22]
 8001166:	2201      	movs	r2, #1
 8001168:	4619      	mov	r1, r3
 800116a:	f002 fab3 	bl	80036d4 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b088      	sub	sp, #32
 800117a:	af00      	add	r7, sp, #0
 800117c:	60f8      	str	r0, [r7, #12]
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	4611      	mov	r1, r2
 8001182:	461a      	mov	r2, r3
 8001184:	460b      	mov	r3, r1
 8001186:	71fb      	strb	r3, [r7, #7]
 8001188:	4613      	mov	r3, r2
 800118a:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6858      	ldr	r0, [r3, #4]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	8adb      	ldrh	r3, [r3, #22]
 8001198:	2200      	movs	r2, #0
 800119a:	4619      	mov	r1, r3
 800119c:	f002 fa9a 	bl	80036d4 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f107 0117 	add.w	r1, r7, #23
 80011ac:	2201      	movs	r2, #1
 80011ae:	f007 ffc9 	bl	8009144 <HAL_SPI_Transmit>
 80011b2:	4603      	mov	r3, r0
 80011b4:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 80011b6:	79bb      	ldrb	r3, [r7, #6]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d108      	bne.n	80011ce <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	79fa      	ldrb	r2, [r7, #7]
 80011c2:	b292      	uxth	r2, r2
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f008 fc6e 	bl	8009aa8 <HAL_SPI_Transmit_DMA>
 80011cc:	e012      	b.n	80011f4 <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6818      	ldr	r0, [r3, #0]
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	68b9      	ldr	r1, [r7, #8]
 80011dc:	f007 ffb2 	bl	8009144 <HAL_SPI_Transmit>
 80011e0:	4603      	mov	r3, r0
 80011e2:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6858      	ldr	r0, [r3, #4]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	8adb      	ldrh	r3, [r3, #22]
 80011ec:	2201      	movs	r2, #1
 80011ee:	4619      	mov	r1, r3
 80011f0:	f002 fa70 	bl	80036d4 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 80011f4:	3720      	adds	r7, #32
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <read_fifo>:

// Reads data "len" size from FIFO into buffer
static void read_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b088      	sub	sp, #32
 80011fe:	af00      	add	r7, sp, #0
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	4611      	mov	r1, r2
 8001206:	461a      	mov	r2, r3
 8001208:	460b      	mov	r3, r1
 800120a:	71fb      	strb	r3, [r7, #7]
 800120c:	4613      	mov	r3, r2
 800120e:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO;
 8001210:	2300      	movs	r3, #0
 8001212:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6858      	ldr	r0, [r3, #4]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	8adb      	ldrh	r3, [r3, #22]
 800121c:	2200      	movs	r2, #0
 800121e:	4619      	mov	r1, r3
 8001220:	f002 fa58 	bl	80036d4 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6818      	ldr	r0, [r3, #0]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f107 0117 	add.w	r1, r7, #23
 8001230:	2201      	movs	r2, #1
 8001232:	f007 ff87 	bl	8009144 <HAL_SPI_Transmit>
 8001236:	4603      	mov	r3, r0
 8001238:	61fb      	str	r3, [r7, #28]
  uint32_t res2;
  if (mode == TRANSFER_MODE_DMA) {
 800123a:	79bb      	ldrb	r3, [r7, #6]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d10a      	bne.n	8001256 <read_fifo+0x5c>
    res2 = HAL_SPI_Receive_DMA(lora->spi, buffer, len);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	79fa      	ldrb	r2, [r7, #7]
 8001246:	b292      	uxth	r2, r2
 8001248:	68b9      	ldr	r1, [r7, #8]
 800124a:	4618      	mov	r0, r3
 800124c:	f008 fd20 	bl	8009c90 <HAL_SPI_Receive_DMA>
 8001250:	4603      	mov	r3, r0
 8001252:	61bb      	str	r3, [r7, #24]
  }

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI receive/transmit failed");
  }
}
 8001254:	e012      	b.n	800127c <read_fifo+0x82>
    res2 = HAL_SPI_Receive(lora->spi, buffer, len, lora->spi_timeout);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6818      	ldr	r0, [r3, #0]
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	b29a      	uxth	r2, r3
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	68b9      	ldr	r1, [r7, #8]
 8001264:	f008 f8dc 	bl	8009420 <HAL_SPI_Receive>
 8001268:	4603      	mov	r3, r0
 800126a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6858      	ldr	r0, [r3, #4]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	8adb      	ldrh	r3, [r3, #22]
 8001274:	2201      	movs	r2, #1
 8001276:	4619      	mov	r1, r3
 8001278:	f002 fa2c 	bl	80036d4 <HAL_GPIO_WritePin>
}
 800127c:	bf00      	nop
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <set_mode>:

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8001290:	78fb      	ldrb	r3, [r7, #3]
 8001292:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001296:	b2db      	uxtb	r3, r3
 8001298:	461a      	mov	r2, r3
 800129a:	2101      	movs	r1, #1
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ff36 	bl	800110e <write_register>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	2b2c      	cmp	r3, #44	; 0x2c
 80012bc:	d801      	bhi.n	80012c2 <set_OCP+0x16>
    imax = 45;
 80012be:	232d      	movs	r3, #45	; 0x2d
 80012c0:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 80012c2:	78fb      	ldrb	r3, [r7, #3]
 80012c4:	2bf0      	cmp	r3, #240	; 0xf0
 80012c6:	d901      	bls.n	80012cc <set_OCP+0x20>
    imax = 240;
 80012c8:	23f0      	movs	r3, #240	; 0xf0
 80012ca:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 80012cc:	78fb      	ldrb	r3, [r7, #3]
 80012ce:	2b81      	cmp	r3, #129	; 0x81
 80012d0:	d809      	bhi.n	80012e6 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 80012d2:	78fb      	ldrb	r3, [r7, #3]
 80012d4:	3b2d      	subs	r3, #45	; 0x2d
 80012d6:	4a0f      	ldr	r2, [pc, #60]	; (8001314 <set_OCP+0x68>)
 80012d8:	fb82 1203 	smull	r1, r2, r2, r3
 80012dc:	1052      	asrs	r2, r2, #1
 80012de:	17db      	asrs	r3, r3, #31
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	e008      	b.n	80012f8 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 80012e6:	78fb      	ldrb	r3, [r7, #3]
 80012e8:	331e      	adds	r3, #30
 80012ea:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <set_OCP+0x68>)
 80012ec:	fb82 1203 	smull	r1, r2, r2, r3
 80012f0:	1092      	asrs	r2, r2, #2
 80012f2:	17db      	asrs	r3, r3, #31
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	f043 0320 	orr.w	r3, r3, #32
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	461a      	mov	r2, r3
 8001302:	210b      	movs	r1, #11
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff02 	bl	800110e <write_register>
}
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	66666667 	.word	0x66666667

08001318 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8001318:	b5b0      	push	{r4, r5, r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8001320:	211d      	movs	r1, #29
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff febc 	bl	80010a0 <read_register>
 8001328:	4603      	mov	r3, r0
 800132a:	091b      	lsrs	r3, r3, #4
 800132c:	b2db      	uxtb	r3, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2200      	movs	r2, #0
 8001332:	461c      	mov	r4, r3
 8001334:	4615      	mov	r5, r2
 8001336:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 800133a:	211e      	movs	r1, #30
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff feaf 	bl	80010a0 <read_register>
 8001342:	4603      	mov	r3, r0
 8001344:	091b      	lsrs	r3, r3, #4
 8001346:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8001348:	2304      	movs	r3, #4
 800134a:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	2b0a      	cmp	r3, #10
 8001350:	d908      	bls.n	8001364 <set_low_data_rate_optimization+0x4c>
 8001352:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001356:	1fd1      	subs	r1, r2, #7
 8001358:	430b      	orrs	r3, r1
 800135a:	d103      	bne.n	8001364 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 800135c:	7ffb      	ldrb	r3, [r7, #31]
 800135e:	f043 0308 	orr.w	r3, r3, #8
 8001362:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8001364:	7ffb      	ldrb	r3, [r7, #31]
 8001366:	461a      	mov	r2, r3
 8001368:	2126      	movs	r1, #38	; 0x26
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff fecf 	bl	800110e <write_register>
}
 8001370:	bf00      	nop
 8001372:	3720      	adds	r7, #32
 8001374:	46bd      	mov	sp, r7
 8001376:	bdb0      	pop	{r4, r5, r7, pc}

08001378 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8001380:	2100      	movs	r1, #0
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ff7e 	bl	8001284 <set_mode>
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <lora_mode_receive_continuous>:

void lora_mode_receive_continuous(lora_sx1276 *lora)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Update base FIFO address for incoming packets
  write_register(lora, REG_FIFO_RX_BASE_ADDR, lora->rx_base_addr);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	7d5b      	ldrb	r3, [r3, #21]
 800139c:	461a      	mov	r2, r3
 800139e:	210f      	movs	r1, #15
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff feb4 	bl	800110e <write_register>
  // Clear all RX related IRQs
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 80013a6:	22f0      	movs	r2, #240	; 0xf0
 80013a8:	2112      	movs	r1, #18
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff feaf 	bl	800110e <write_register>

  set_mode(lora, OPMODE_RX_CONTINUOUS);
 80013b0:	2105      	movs	r1, #5
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ff66 	bl	8001284 <set_mode>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 80013c8:	2101      	movs	r1, #1
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ff5a 	bl	8001284 <set_mode>
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 80013e0:	211d      	movs	r1, #29
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff fe5c 	bl	80010a0 <read_register>
 80013e8:	4603      	mov	r3, r0
 80013ea:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	f023 0301 	bic.w	r3, r3, #1
 80013f2:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	461a      	mov	r2, r3
 80013f8:	211d      	movs	r1, #29
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff fe87 	bl	800110e <write_register>
}
 8001400:	bf00      	nop
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d10e      	bne.n	800143a <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 800141c:	78fb      	ldrb	r3, [r7, #3]
 800141e:	2b0f      	cmp	r3, #15
 8001420:	d901      	bls.n	8001426 <lora_set_tx_power+0x1e>
      level = 15;
 8001422:	230f      	movs	r3, #15
 8001424:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8001426:	78fb      	ldrb	r3, [r7, #3]
 8001428:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800142c:	b2db      	uxtb	r3, r3
 800142e:	461a      	mov	r2, r3
 8001430:	2109      	movs	r1, #9
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff fe6b 	bl	800110e <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8001438:	e02e      	b.n	8001498 <lora_set_tx_power+0x90>
    if (level > 20) {
 800143a:	78fb      	ldrb	r3, [r7, #3]
 800143c:	2b14      	cmp	r3, #20
 800143e:	d901      	bls.n	8001444 <lora_set_tx_power+0x3c>
      level = 20;
 8001440:	2314      	movs	r3, #20
 8001442:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8001444:	78fb      	ldrb	r3, [r7, #3]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d801      	bhi.n	800144e <lora_set_tx_power+0x46>
      level = 2;
 800144a:	2302      	movs	r3, #2
 800144c:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	2b11      	cmp	r3, #17
 8001452:	d90c      	bls.n	800146e <lora_set_tx_power+0x66>
      level -= 3;
 8001454:	78fb      	ldrb	r3, [r7, #3]
 8001456:	3b03      	subs	r3, #3
 8001458:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 800145a:	2287      	movs	r2, #135	; 0x87
 800145c:	214d      	movs	r1, #77	; 0x4d
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff fe55 	bl	800110e <write_register>
      set_OCP(lora, 140);
 8001464:	218c      	movs	r1, #140	; 0x8c
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff ff20 	bl	80012ac <set_OCP>
 800146c:	e008      	b.n	8001480 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 800146e:	2284      	movs	r2, #132	; 0x84
 8001470:	214d      	movs	r1, #77	; 0x4d
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff fe4b 	bl	800110e <write_register>
      set_OCP(lora, 97);
 8001478:	2161      	movs	r1, #97	; 0x61
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ff16 	bl	80012ac <set_OCP>
    level -= 2;
 8001480:	78fb      	ldrb	r3, [r7, #3]
 8001482:	3b02      	subs	r3, #2
 8001484:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8001486:	78fb      	ldrb	r3, [r7, #3]
 8001488:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800148c:	b2db      	uxtb	r3, r3
 800148e:	461a      	mov	r2, r3
 8001490:	2109      	movs	r1, #9
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fe3b 	bl	800110e <write_register>
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 80014ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014b0:	f04f 0000 	mov.w	r0, #0
 80014b4:	f04f 0100 	mov.w	r1, #0
 80014b8:	04d9      	lsls	r1, r3, #19
 80014ba:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80014be:	04d0      	lsls	r0, r2, #19
 80014c0:	4a19      	ldr	r2, [pc, #100]	; (8001528 <lora_set_frequency+0x88>)
 80014c2:	f04f 0300 	mov.w	r3, #0
 80014c6:	f7ff fb87 	bl	8000bd8 <__aeabi_uldivmod>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 80014d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	f04f 0300 	mov.w	r3, #0
 80014de:	0c02      	lsrs	r2, r0, #16
 80014e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80014e4:	0c0b      	lsrs	r3, r1, #16
 80014e6:	b2d3      	uxtb	r3, r2
 80014e8:	461a      	mov	r2, r3
 80014ea:	2106      	movs	r1, #6
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f7ff fe0e 	bl	800110e <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 80014f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	0a02      	lsrs	r2, r0, #8
 8001500:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001504:	0a0b      	lsrs	r3, r1, #8
 8001506:	b2d3      	uxtb	r3, r2
 8001508:	461a      	mov	r2, r3
 800150a:	2107      	movs	r1, #7
 800150c:	68f8      	ldr	r0, [r7, #12]
 800150e:	f7ff fdfe 	bl	800110e <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 8001512:	7c3b      	ldrb	r3, [r7, #16]
 8001514:	461a      	mov	r2, r3
 8001516:	2108      	movs	r1, #8
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f7ff fdf8 	bl	800110e <write_register>
}
 800151e:	bf00      	nop
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	01e84800 	.word	0x01e84800

0800152c <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8001538:	78fb      	ldrb	r3, [r7, #3]
 800153a:	2b05      	cmp	r3, #5
 800153c:	d802      	bhi.n	8001544 <lora_set_spreading_factor+0x18>
    sf = 6;
 800153e:	2306      	movs	r3, #6
 8001540:	70fb      	strb	r3, [r7, #3]
 8001542:	e004      	b.n	800154e <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8001544:	78fb      	ldrb	r3, [r7, #3]
 8001546:	2b0c      	cmp	r3, #12
 8001548:	d901      	bls.n	800154e <lora_set_spreading_factor+0x22>
    sf = 12;
 800154a:	230c      	movs	r3, #12
 800154c:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 800154e:	78fb      	ldrb	r3, [r7, #3]
 8001550:	2b06      	cmp	r3, #6
 8001552:	d10a      	bne.n	800156a <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8001554:	22c5      	movs	r2, #197	; 0xc5
 8001556:	2131      	movs	r1, #49	; 0x31
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff fdd8 	bl	800110e <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 800155e:	220c      	movs	r2, #12
 8001560:	2137      	movs	r1, #55	; 0x37
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fdd3 	bl	800110e <write_register>
 8001568:	e009      	b.n	800157e <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 800156a:	22c3      	movs	r2, #195	; 0xc3
 800156c:	2131      	movs	r1, #49	; 0x31
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff fdcd 	bl	800110e <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8001574:	220a      	movs	r2, #10
 8001576:	2137      	movs	r1, #55	; 0x37
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff fdc8 	bl	800110e <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 800157e:	211e      	movs	r1, #30
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff fd8d 	bl	80010a0 <read_register>
 8001586:	4603      	mov	r3, r0
 8001588:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 800158a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	b25a      	sxtb	r2, r3
 8001594:	78fb      	ldrb	r3, [r7, #3]
 8001596:	011b      	lsls	r3, r3, #4
 8001598:	b25b      	sxtb	r3, r3
 800159a:	4313      	orrs	r3, r2
 800159c:	b25b      	sxtb	r3, r3
 800159e:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	461a      	mov	r2, r3
 80015a4:	211e      	movs	r1, #30
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fdb1 	bl	800110e <write_register>

  set_low_data_rate_optimization(lora);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff feb3 	bl	8001318 <set_low_data_rate_optimization>
}
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	460b      	mov	r3, r1
 80015c4:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 80015c6:	887b      	ldrh	r3, [r7, #2]
 80015c8:	0a1b      	lsrs	r3, r3, #8
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	461a      	mov	r2, r3
 80015d0:	2120      	movs	r1, #32
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff fd9b 	bl	800110e <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 80015d8:	887b      	ldrh	r3, [r7, #2]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	f003 030f 	and.w	r3, r3, #15
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	2121      	movs	r1, #33	; 0x21
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff fd91 	bl	800110e <write_register>
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 80015fc:	2142      	movs	r1, #66	; 0x42
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff fd4e 	bl	80010a0 <read_register>
 8001604:	4603      	mov	r3, r0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 8001616:	2101      	movs	r1, #1
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff fd41 	bl	80010a0 <read_register>
 800161e:	4603      	mov	r3, r0
 8001620:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	2b03      	cmp	r3, #3
 800162a:	d101      	bne.n	8001630 <lora_is_transmitting+0x22>
 800162c:	2305      	movs	r3, #5
 800162e:	e000      	b.n	8001632 <lora_is_transmitting+0x24>
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b084      	sub	sp, #16
 800163e:	af00      	add	r7, sp, #0
 8001640:	60f8      	str	r0, [r7, #12]
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	4611      	mov	r1, r2
 8001646:	461a      	mov	r2, r3
 8001648:	460b      	mov	r3, r1
 800164a:	71fb      	strb	r3, [r7, #7]
 800164c:	4613      	mov	r3, r2
 800164e:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f7ff ffdc 	bl	800160e <lora_is_transmitting>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <lora_send_packet_base+0x26>
    return LORA_BUSY;
 800165c:	2305      	movs	r3, #5
 800165e:	e02a      	b.n	80016b6 <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 8001660:	2101      	movs	r1, #1
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f7ff fe0e 	bl	8001284 <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f000 f904 	bl	8001876 <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	7d1b      	ldrb	r3, [r3, #20]
 8001672:	461a      	mov	r2, r3
 8001674:	210d      	movs	r1, #13
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f7ff fd49 	bl	800110e <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	7d1b      	ldrb	r3, [r3, #20]
 8001680:	461a      	mov	r2, r3
 8001682:	210e      	movs	r1, #14
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f7ff fd42 	bl	800110e <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	461a      	mov	r2, r3
 800168e:	2122      	movs	r1, #34	; 0x22
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f7ff fd3c 	bl	800110e <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 8001696:	79bb      	ldrb	r3, [r7, #6]
 8001698:	79fa      	ldrb	r2, [r7, #7]
 800169a:	68b9      	ldr	r1, [r7, #8]
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f7ff fd6a 	bl	8001176 <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 80016a2:	79bb      	ldrb	r3, [r7, #6]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d101      	bne.n	80016ac <lora_send_packet_base+0x72>
    return LORA_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	e004      	b.n	80016b6 <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 80016ac:	2103      	movs	r1, #3
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f7ff fde8 	bl	8001284 <set_mode>
  return LORA_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b084      	sub	sp, #16
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	60f8      	str	r0, [r7, #12]
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	4613      	mov	r3, r2
 80016ca:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 80016cc:	79fa      	ldrb	r2, [r7, #7]
 80016ce:	2302      	movs	r3, #2
 80016d0:	68b9      	ldr	r1, [r7, #8]
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f7ff ffb1 	bl	800163a <lora_send_packet_base>
 80016d8:	4603      	mov	r3, r0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <lora_is_packet_available>:
    write_register(lora, REG_MODEM_CONFIG_2, mc2);
  }
}

uint8_t lora_is_packet_available(lora_sx1276 *lora)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b084      	sub	sp, #16
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t irqs = read_register(lora, REG_IRQ_FLAGS);
 80016ea:	2112      	movs	r1, #18
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff fcd7 	bl	80010a0 <read_register>
 80016f2:	4603      	mov	r3, r0
 80016f4:	73fb      	strb	r3, [r7, #15]

  // In case of Single receive mode RX_TIMEOUT will be issued
  return  irqs & (IRQ_FLAGS_RX_DONE | IRQ_FLAGS_RX_TIMEOUT);
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016fc:	b2db      	uxtb	r3, r3
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <lora_pending_packet_length>:

uint8_t lora_pending_packet_length(lora_sx1276 *lora)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  uint8_t len;

  // Query for current header mode - implicit / explicit
  uint8_t implicit = read_register(lora, REG_MODEM_CONFIG_1) & MC1_IMPLICIT_HEADER_MODE;
 800170e:	211d      	movs	r1, #29
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff fcc5 	bl	80010a0 <read_register>
 8001716:	4603      	mov	r3, r0
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	73bb      	strb	r3, [r7, #14]
  if (implicit) {
 800171e:	7bbb      	ldrb	r3, [r7, #14]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d006      	beq.n	8001732 <lora_pending_packet_length+0x2c>
    len = read_register(lora, REG_PAYLOAD_LENGTH);
 8001724:	2122      	movs	r1, #34	; 0x22
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff fcba 	bl	80010a0 <read_register>
 800172c:	4603      	mov	r3, r0
 800172e:	73fb      	strb	r3, [r7, #15]
 8001730:	e005      	b.n	800173e <lora_pending_packet_length+0x38>
  } else {
    len = read_register(lora, REG_RX_NB_BYTES);
 8001732:	2113      	movs	r1, #19
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff fcb3 	bl	80010a0 <read_register>
 800173a:	4603      	mov	r3, r0
 800173c:	73fb      	strb	r3, [r7, #15]
  }

  return len;
 800173e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <lora_receive_packet_base>:


static uint8_t lora_receive_packet_base(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error, uint8_t mode)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	4613      	mov	r3, r2
 8001756:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint8_t res = LORA_EMPTY;
 8001758:	2306      	movs	r3, #6
 800175a:	75fb      	strb	r3, [r7, #23]
  uint8_t len = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	75bb      	strb	r3, [r7, #22]

  // Read/Reset IRQs
  uint8_t state = read_register(lora, REG_IRQ_FLAGS);
 8001760:	2112      	movs	r1, #18
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f7ff fc9c 	bl	80010a0 <read_register>
 8001768:	4603      	mov	r3, r0
 800176a:	757b      	strb	r3, [r7, #21]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 800176c:	22f0      	movs	r2, #240	; 0xf0
 800176e:	2112      	movs	r1, #18
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f7ff fccc 	bl	800110e <write_register>

  if (state & IRQ_FLAGS_RX_TIMEOUT) {
 8001776:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800177a:	2b00      	cmp	r3, #0
 800177c:	da02      	bge.n	8001784 <lora_receive_packet_base+0x3c>
    DEBUGF("timeout");
    res = LORA_TIMEOUT;
 800177e:	2302      	movs	r3, #2
 8001780:	75fb      	strb	r3, [r7, #23]
    goto done;
 8001782:	e030      	b.n	80017e6 <lora_receive_packet_base+0x9e>
  }

  if (state & IRQ_FLAGS_RX_DONE) {
 8001784:	7d7b      	ldrb	r3, [r7, #21]
 8001786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800178a:	2b00      	cmp	r3, #0
 800178c:	d02a      	beq.n	80017e4 <lora_receive_packet_base+0x9c>
    if (!(state & IRQ_FLAGS_VALID_HEADER)) {
 800178e:	7d7b      	ldrb	r3, [r7, #21]
 8001790:	f003 0310 	and.w	r3, r3, #16
 8001794:	2b00      	cmp	r3, #0
 8001796:	d102      	bne.n	800179e <lora_receive_packet_base+0x56>
      DEBUGF("invalid header");
      res = LORA_INVALID_HEADER;
 8001798:	2303      	movs	r3, #3
 800179a:	75fb      	strb	r3, [r7, #23]
      goto done;
 800179c:	e023      	b.n	80017e6 <lora_receive_packet_base+0x9e>
    }
    // Packet has been received
    if (state & IRQ_FLAGS_PAYLOAD_CRC_ERROR) {
 800179e:	7d7b      	ldrb	r3, [r7, #21]
 80017a0:	f003 0320 	and.w	r3, r3, #32
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d002      	beq.n	80017ae <lora_receive_packet_base+0x66>
      DEBUGF("CRC error");
      res = LORA_CRC_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	75fb      	strb	r3, [r7, #23]
      goto done;
 80017ac:	e01b      	b.n	80017e6 <lora_receive_packet_base+0x9e>
    }
    // Query for current header mode - implicit / explicit
    len = lora_pending_packet_length(lora);
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f7ff ffa9 	bl	8001706 <lora_pending_packet_length>
 80017b4:	4603      	mov	r3, r0
 80017b6:	75bb      	strb	r3, [r7, #22]
    // Set FIFO to beginning of the packet
    uint8_t offset = read_register(lora, REG_FIFO_RX_CURRENT_ADDR);
 80017b8:	2110      	movs	r1, #16
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f7ff fc70 	bl	80010a0 <read_register>
 80017c0:	4603      	mov	r3, r0
 80017c2:	753b      	strb	r3, [r7, #20]
    write_register(lora, REG_FIFO_ADDR_PTR, offset);
 80017c4:	7d3b      	ldrb	r3, [r7, #20]
 80017c6:	461a      	mov	r2, r3
 80017c8:	210d      	movs	r1, #13
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f7ff fc9f 	bl	800110e <write_register>
    // Read payload
    read_fifo(lora, buffer, len, mode);
 80017d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017d4:	7dba      	ldrb	r2, [r7, #22]
 80017d6:	68b9      	ldr	r1, [r7, #8]
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f7ff fd0e 	bl	80011fa <read_fifo>
    res = LORA_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	75fb      	strb	r3, [r7, #23]
 80017e2:	e000      	b.n	80017e6 <lora_receive_packet_base+0x9e>
  }

done:
 80017e4:	bf00      	nop
  if (error) {
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <lora_receive_packet_base+0xaa>
    *error = res;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	7dfa      	ldrb	r2, [r7, #23]
 80017f0:	701a      	strb	r2, [r3, #0]
  }

  return len;
 80017f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <lora_receive_packet>:

uint8_t lora_receive_packet(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af02      	add	r7, sp, #8
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	4613      	mov	r3, r2
 800180a:	71fb      	strb	r3, [r7, #7]
  return lora_receive_packet_base(lora, buffer, buffer_len, error, TRANSFER_MODE_BLOCKING);
 800180c:	79fa      	ldrb	r2, [r7, #7]
 800180e:	2302      	movs	r3, #2
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f7ff ff96 	bl	8001748 <lora_receive_packet_base>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <lora_receive_packet_blocking>:
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
}

uint8_t lora_receive_packet_blocking(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len,
                   uint32_t timeout, uint8_t *error)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	4613      	mov	r3, r2
 8001834:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint32_t elapsed = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]

  // Wait up to timeout for packet
  while (elapsed < timeout) {
 800183a:	e00b      	b.n	8001854 <lora_receive_packet_blocking+0x2e>
    if (lora_is_packet_available(lora)) {
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f7ff ff50 	bl	80016e2 <lora_is_packet_available>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10a      	bne.n	800185e <lora_receive_packet_blocking+0x38>
      break;
    }
    HAL_Delay(1);
 8001848:	2001      	movs	r0, #1
 800184a:	f001 f935 	bl	8002ab8 <HAL_Delay>
    elapsed++;
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	3301      	adds	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
  while (elapsed < timeout) {
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d3ef      	bcc.n	800183c <lora_receive_packet_blocking+0x16>
 800185c:	e000      	b.n	8001860 <lora_receive_packet_blocking+0x3a>
      break;
 800185e:	bf00      	nop
  }

  return lora_receive_packet(lora, buffer, buffer_len, error);
 8001860:	79fa      	ldrb	r2, [r7, #7]
 8001862:	6a3b      	ldr	r3, [r7, #32]
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f7ff ffc8 	bl	80017fc <lora_receive_packet>
 800186c:	4603      	mov	r3, r0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 800187e:	2208      	movs	r2, #8
 8001880:	2112      	movs	r1, #18
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff fc43 	bl	800110e <write_register>
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
 800189c:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	887a      	ldrh	r2, [r7, #2]
 80018ae:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 80018b0:	6a3a      	ldr	r2, [r7, #32]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2201      	movs	r2, #1
 80018ba:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2200      	movs	r2, #0
 80018c0:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018ce:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f7ff fe8f 	bl	80015f4 <lora_version>
 80018d6:	4603      	mov	r3, r0
 80018d8:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 80018da:	7dfb      	ldrb	r3, [r7, #23]
 80018dc:	2b12      	cmp	r3, #18
 80018de:	d001      	beq.n	80018e4 <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 80018e0:	2304      	movs	r3, #4
 80018e2:	e031      	b.n	8001948 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f7ff fd47 	bl	8001378 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f7ff fd44 	bl	8001378 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 80018f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f7ff fdd3 	bl	80014a0 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 80018fa:	2107      	movs	r1, #7
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f7ff fe15 	bl	800152c <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8001902:	210a      	movs	r1, #10
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f7ff fe58 	bl	80015ba <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f7ff fd64 	bl	80013d8 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8001910:	210c      	movs	r1, #12
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f7ff fbc4 	bl	80010a0 <read_register>
 8001918:	4603      	mov	r3, r0
 800191a:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 800191c:	7dbb      	ldrb	r3, [r7, #22]
 800191e:	f043 0303 	orr.w	r3, r3, #3
 8001922:	b2db      	uxtb	r3, r3
 8001924:	461a      	mov	r2, r3
 8001926:	210c      	movs	r1, #12
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f7ff fbf0 	bl	800110e <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 800192e:	2204      	movs	r2, #4
 8001930:	2126      	movs	r1, #38	; 0x26
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f7ff fbeb 	bl	800110e <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8001938:	2111      	movs	r1, #17
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f7ff fd64 	bl	8001408 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f7ff fd3d 	bl	80013c0 <lora_mode_standby>

  return LORA_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	f5ad 6d87 	sub.w	sp, sp, #1080	; 0x438
 8001956:	af02      	add	r7, sp, #8
	lora_sx1276 lora;


	// Time progress tracking using tick
	double system_time_counter;
	system_time_counter = 0;
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	f04f 0300 	mov.w	r3, #0
 8001960:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 8001964:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t system_time_buffer[25] = {0};
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 800196e:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	611a      	str	r2, [r3, #16]
 800197e:	751a      	strb	r2, [r3, #20]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001980:	f001 f825 	bl	80029ce <HAL_Init>

	/* USER CODE BEGIN Init */

	// Initialize HAL for UART interrupts
	HAL_MspInit();
 8001984:	f000 fcb4 	bl	80022f0 <HAL_MspInit>
	// Initialize I2C2 with custom driver
	BSP_I2C2_Init();
 8001988:	f7ff faa8 	bl	8000edc <BSP_I2C2_Init>

	//Initialize Msp for both UARTs
	HAL_UART_MspInit(&huart1);
 800198c:	48a6      	ldr	r0, [pc, #664]	; (8001c28 <main+0x2d8>)
 800198e:	f000 fe17 	bl	80025c0 <HAL_UART_MspInit>
	HAL_UART_MspInit(&huart2);
 8001992:	48a6      	ldr	r0, [pc, #664]	; (8001c2c <main+0x2dc>)
 8001994:	f000 fe14 	bl	80025c0 <HAL_UART_MspInit>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001998:	f000 f97c 	bl	8001c94 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800199c:	f000 fbce 	bl	800213c <MX_GPIO_Init>
	MX_DMA_Init();
 80019a0:	f000 fba8 	bl	80020f4 <MX_DMA_Init>
	MX_I2C1_Init();
 80019a4:	f000 f9f4 	bl	8001d90 <MX_I2C1_Init>
	MX_SDMMC1_SD_Init();
 80019a8:	f000 fa32 	bl	8001e10 <MX_SDMMC1_SD_Init>
	MX_SPI1_Init();
 80019ac:	f000 fa52 	bl	8001e54 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 80019b0:	f000 fb04 	bl	8001fbc <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80019b4:	f000 fb4e 	bl	8002054 <MX_USART2_UART_Init>
	MX_FATFS_Init();
 80019b8:	f00d f97a 	bl	800ecb0 <MX_FATFS_Init>
	MX_USB_DEVICE_Init();
 80019bc:	f00f f802 	bl	80109c4 <MX_USB_DEVICE_Init>
	MX_TIM17_Init();
 80019c0:	f000 fa86 	bl	8001ed0 <MX_TIM17_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 80019c4:	f000 f9b8 	bl	8001d38 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */


	// WAIT FOR USB CONNECTION
	HAL_Delay(8000);
 80019c8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80019cc:	f001 f874 	bl	8002ab8 <HAL_Delay>
	while (CDC_Transmit_FS ("START\n", 6) == USBD_BUSY);
 80019d0:	bf00      	nop
 80019d2:	2106      	movs	r1, #6
 80019d4:	4896      	ldr	r0, [pc, #600]	; (8001c30 <main+0x2e0>)
 80019d6:	f00f f8c3 	bl	8010b60 <CDC_Transmit_FS>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d0f8      	beq.n	80019d2 <main+0x82>


	/// LoRa Init /////////////////////////////////////////////////////////////////////////////////
	uint8_t lora_res = lora_init(&lora, &hspi1, LORA_NSS_GPIO_Port, LORA_NSS_Pin, LORA_BASE_FREQUENCY_435);
 80019e0:	f207 400c 	addw	r0, r7, #1036	; 0x40c
 80019e4:	a38e      	add	r3, pc, #568	; (adr r3, 8001c20 <main+0x2d0>)
 80019e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ea:	e9cd 2300 	strd	r2, r3, [sp]
 80019ee:	2320      	movs	r3, #32
 80019f0:	4a90      	ldr	r2, [pc, #576]	; (8001c34 <main+0x2e4>)
 80019f2:	4991      	ldr	r1, [pc, #580]	; (8001c38 <main+0x2e8>)
 80019f4:	f7ff ff4c 	bl	8001890 <lora_init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427
	if (lora_res != LORA_OK) {
 80019fe:	f897 3427 	ldrb.w	r3, [r7, #1063]	; 0x427
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d007      	beq.n	8001a16 <main+0xc6>
		// Initialization failed
		while (CDC_Transmit_FS ("LORA INIT NOT OK!\n", 18) == USBD_BUSY);
 8001a06:	bf00      	nop
 8001a08:	2112      	movs	r1, #18
 8001a0a:	488c      	ldr	r0, [pc, #560]	; (8001c3c <main+0x2ec>)
 8001a0c:	f00f f8a8 	bl	8010b60 <CDC_Transmit_FS>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d0f8      	beq.n	8001a08 <main+0xb8>
	}
	lora_res = lora_send_packet(&lora, (uint8_t *)"test", 4);
 8001a16:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	4988      	ldr	r1, [pc, #544]	; (8001c40 <main+0x2f0>)
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fe4d 	bl	80016be <lora_send_packet>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427
	if (lora_res != LORA_OK) {
 8001a2a:	f897 3427 	ldrb.w	r3, [r7, #1063]	; 0x427
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d007      	beq.n	8001a42 <main+0xf2>
		// Send failed
		while (CDC_Transmit_FS ("LORA SEND NOT OK!\n", 18) == USBD_BUSY);
 8001a32:	bf00      	nop
 8001a34:	2112      	movs	r1, #18
 8001a36:	4883      	ldr	r0, [pc, #524]	; (8001c44 <main+0x2f4>)
 8001a38:	f00f f892 	bl	8010b60 <CDC_Transmit_FS>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d0f8      	beq.n	8001a34 <main+0xe4>
	}
	if (lora_res == LORA_OK) {
 8001a42:	f897 3427 	ldrb.w	r3, [r7, #1063]	; 0x427
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d107      	bne.n	8001a5a <main+0x10a>
		// All good
		while (CDC_Transmit_FS ("LORA OK!\n", 9) == USBD_BUSY);
 8001a4a:	bf00      	nop
 8001a4c:	2109      	movs	r1, #9
 8001a4e:	487e      	ldr	r0, [pc, #504]	; (8001c48 <main+0x2f8>)
 8001a50:	f00f f886 	bl	8010b60 <CDC_Transmit_FS>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d0f8      	beq.n	8001a4c <main+0xfc>
	}
	lora_mode_receive_continuous(&lora);
 8001a5a:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fc96 	bl	8001390 <lora_mode_receive_continuous>


	/// System timers Init /////////////////////////////////////////////////////////////////////////////////

	// Start timers
	HAL_TIM_Base_Start_IT(&htim17);
 8001a64:	4879      	ldr	r0, [pc, #484]	; (8001c4c <main+0x2fc>)
 8001a66:	f008 ff57 	bl	800a918 <HAL_TIM_Base_Start_IT>
	tick = 0;
 8001a6a:	4b79      	ldr	r3, [pc, #484]	; (8001c50 <main+0x300>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
	tickGPS = 0;
 8001a70:	4b78      	ldr	r3, [pc, #480]	; (8001c54 <main+0x304>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
	/* USER CODE BEGIN WHILE */

	/// Pre-main program /////////////////////////////////////////////////////////////////////////////////
	/// Pre-main program /////////////////////////////////////////////////////////////////////////////////
	/// Pre-main program /////////////////////////////////////////////////////////////////////////////////
	HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8001a76:	2108      	movs	r1, #8
 8001a78:	4877      	ldr	r0, [pc, #476]	; (8001c58 <main+0x308>)
 8001a7a:	f001 fe43 	bl	8003704 <HAL_GPIO_TogglePin>
	while (1) {

		while (usb_Rx_ready == 0);
 8001a7e:	bf00      	nop
 8001a80:	4b76      	ldr	r3, [pc, #472]	; (8001c5c <main+0x30c>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0fa      	beq.n	8001a80 <main+0x130>
		usb_Rx_ready = 0;
 8001a8a:	4b74      	ldr	r3, [pc, #464]	; (8001c5c <main+0x30c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]

		if (usb_Rx_buffer[1] == USB_LORA) {
 8001a90:	4b73      	ldr	r3, [pc, #460]	; (8001c60 <main+0x310>)
 8001a92:	785a      	ldrb	r2, [r3, #1]
 8001a94:	4b73      	ldr	r3, [pc, #460]	; (8001c64 <main+0x314>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d13a      	bne.n	8001b12 <main+0x1c2>
			if (usb_Rx_buffer[0] == USB_CHECKSTATUS) {
 8001a9c:	4b70      	ldr	r3, [pc, #448]	; (8001c60 <main+0x310>)
 8001a9e:	781a      	ldrb	r2, [r3, #0]
 8001aa0:	4b71      	ldr	r3, [pc, #452]	; (8001c68 <main+0x318>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d0ea      	beq.n	8001a7e <main+0x12e>

			}
			else if (usb_Rx_buffer[1] == USB_TESTOUTPUT) {
 8001aa8:	4b6d      	ldr	r3, [pc, #436]	; (8001c60 <main+0x310>)
 8001aaa:	785a      	ldrb	r2, [r3, #1]
 8001aac:	4b6f      	ldr	r3, [pc, #444]	; (8001c6c <main+0x31c>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d1e4      	bne.n	8001a7e <main+0x12e>
				lora_res = lora_receive_packet_blocking(&lora, &lora_Rx_buffer, sizeof(lora_Rx_buffer), 2000, &lora_error);
 8001ab4:	f107 0108 	add.w	r1, r7, #8
 8001ab8:	f207 400c 	addw	r0, r7, #1036	; 0x40c
 8001abc:	1dfb      	adds	r3, r7, #7
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ac4:	22e8      	movs	r2, #232	; 0xe8
 8001ac6:	f7ff feae 	bl	8001826 <lora_receive_packet_blocking>
 8001aca:	4603      	mov	r3, r0
 8001acc:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427
				if (lora_res != LORA_OK) {
 8001ad0:	f897 3427 	ldrb.w	r3, [r7, #1063]	; 0x427
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d008      	beq.n	8001aea <main+0x19a>
					while (CDC_Transmit_FS ("ERROR!\n", sizeof("ERROR!\n")) == USBD_BUSY);
 8001ad8:	bf00      	nop
 8001ada:	2108      	movs	r1, #8
 8001adc:	4864      	ldr	r0, [pc, #400]	; (8001c70 <main+0x320>)
 8001ade:	f00f f83f 	bl	8010b60 <CDC_Transmit_FS>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d0f8      	beq.n	8001ada <main+0x18a>
 8001ae8:	e7c9      	b.n	8001a7e <main+0x12e>
				}
				else {
					while (CDC_Transmit_FS ("Lora packet received!\n", sizeof("Lora packet received!\n")) == USBD_BUSY);
 8001aea:	bf00      	nop
 8001aec:	2117      	movs	r1, #23
 8001aee:	4861      	ldr	r0, [pc, #388]	; (8001c74 <main+0x324>)
 8001af0:	f00f f836 	bl	8010b60 <CDC_Transmit_FS>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d0f8      	beq.n	8001aec <main+0x19c>
					while (CDC_Transmit_FS (lora_Rx_buffer, sizeof(lora_Rx_buffer)) == USBD_BUSY);
 8001afa:	bf00      	nop
 8001afc:	f107 0308 	add.w	r3, r7, #8
 8001b00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b04:	4618      	mov	r0, r3
 8001b06:	f00f f82b 	bl	8010b60 <CDC_Transmit_FS>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d0f5      	beq.n	8001afc <main+0x1ac>
 8001b10:	e7b5      	b.n	8001a7e <main+0x12e>
			}

		}


		else if (usb_Rx_buffer[0] == USB_TIMERS) {
 8001b12:	4b53      	ldr	r3, [pc, #332]	; (8001c60 <main+0x310>)
 8001b14:	781a      	ldrb	r2, [r3, #0]
 8001b16:	4b58      	ldr	r3, [pc, #352]	; (8001c78 <main+0x328>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d138      	bne.n	8001b90 <main+0x240>
			if (usb_Rx_buffer[1] == USB_CHECKSTATUS) {
 8001b1e:	4b50      	ldr	r3, [pc, #320]	; (8001c60 <main+0x310>)
 8001b20:	785a      	ldrb	r2, [r3, #1]
 8001b22:	4b51      	ldr	r3, [pc, #324]	; (8001c68 <main+0x318>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d0a9      	beq.n	8001a7e <main+0x12e>

			}
			else if (usb_Rx_buffer[1] == USB_TESTOUTPUT) {
 8001b2a:	4b4d      	ldr	r3, [pc, #308]	; (8001c60 <main+0x310>)
 8001b2c:	785a      	ldrb	r2, [r3, #1]
 8001b2e:	4b4f      	ldr	r3, [pc, #316]	; (8001c6c <main+0x31c>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d1a3      	bne.n	8001a7e <main+0x12e>
				if (tick == 0) {
 8001b36:	4b46      	ldr	r3, [pc, #280]	; (8001c50 <main+0x300>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d110      	bne.n	8001b62 <main+0x212>
					tick = 10;
 8001b40:	4b43      	ldr	r3, [pc, #268]	; (8001c50 <main+0x300>)
 8001b42:	220a      	movs	r2, #10
 8001b44:	701a      	strb	r2, [r3, #0]
					while (tick != 0);
 8001b46:	bf00      	nop
 8001b48:	4b41      	ldr	r3, [pc, #260]	; (8001c50 <main+0x300>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1fa      	bne.n	8001b48 <main+0x1f8>
					while (CDC_Transmit_FS ("Tick works!\n", 13) == USBD_BUSY);
 8001b52:	bf00      	nop
 8001b54:	210d      	movs	r1, #13
 8001b56:	4849      	ldr	r0, [pc, #292]	; (8001c7c <main+0x32c>)
 8001b58:	f00f f802 	bl	8010b60 <CDC_Transmit_FS>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d0f8      	beq.n	8001b54 <main+0x204>
				}

				if (tickGPS == 0) {
 8001b62:	4b3c      	ldr	r3, [pc, #240]	; (8001c54 <main+0x304>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d188      	bne.n	8001a7e <main+0x12e>
					tickGPS = 10;
 8001b6c:	4b39      	ldr	r3, [pc, #228]	; (8001c54 <main+0x304>)
 8001b6e:	220a      	movs	r2, #10
 8001b70:	701a      	strb	r2, [r3, #0]
					while (tickGPS != 0);
 8001b72:	bf00      	nop
 8001b74:	4b37      	ldr	r3, [pc, #220]	; (8001c54 <main+0x304>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1fa      	bne.n	8001b74 <main+0x224>
					while (CDC_Transmit_FS ("GPStick works!\n", 16) == USBD_BUSY);
 8001b7e:	bf00      	nop
 8001b80:	2110      	movs	r1, #16
 8001b82:	483f      	ldr	r0, [pc, #252]	; (8001c80 <main+0x330>)
 8001b84:	f00e ffec 	bl	8010b60 <CDC_Transmit_FS>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d0f8      	beq.n	8001b80 <main+0x230>
 8001b8e:	e776      	b.n	8001a7e <main+0x12e>
			}

		}


		else if (usb_Rx_buffer[1] == USB_FLIGHTMODE) {
 8001b90:	4b33      	ldr	r3, [pc, #204]	; (8001c60 <main+0x310>)
 8001b92:	785a      	ldrb	r2, [r3, #1]
 8001b94:	4b3b      	ldr	r3, [pc, #236]	; (8001c84 <main+0x334>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d108      	bne.n	8001bae <main+0x25e>
			while (CDC_Transmit_FS ("OK", 2) == USBD_BUSY);
 8001b9c:	bf00      	nop
 8001b9e:	2102      	movs	r1, #2
 8001ba0:	4839      	ldr	r0, [pc, #228]	; (8001c88 <main+0x338>)
 8001ba2:	f00e ffdd 	bl	8010b60 <CDC_Transmit_FS>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d0f8      	beq.n	8001b9e <main+0x24e>
			break;
 8001bac:	e00f      	b.n	8001bce <main+0x27e>
		}


		else if (usb_Rx_buffer[1] == USB_PING) {
 8001bae:	4b2c      	ldr	r3, [pc, #176]	; (8001c60 <main+0x310>)
 8001bb0:	785a      	ldrb	r2, [r3, #1]
 8001bb2:	4b36      	ldr	r3, [pc, #216]	; (8001c8c <main+0x33c>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	f47f af61 	bne.w	8001a7e <main+0x12e>

			while (CDC_Transmit_FS ("PONG", 4) == USBD_BUSY);
 8001bbc:	bf00      	nop
 8001bbe:	2104      	movs	r1, #4
 8001bc0:	4833      	ldr	r0, [pc, #204]	; (8001c90 <main+0x340>)
 8001bc2:	f00e ffcd 	bl	8010b60 <CDC_Transmit_FS>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d0f8      	beq.n	8001bbe <main+0x26e>
		while (usb_Rx_ready == 0);
 8001bcc:	e757      	b.n	8001a7e <main+0x12e>
			//break;
		}

	}
	HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8001bce:	2108      	movs	r1, #8
 8001bd0:	4821      	ldr	r0, [pc, #132]	; (8001c58 <main+0x308>)
 8001bd2:	f001 fd97 	bl	8003704 <HAL_GPIO_TogglePin>
	// Reset timers before main program
	tick = 0;
 8001bd6:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <main+0x300>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]
	tickGPS = 0;
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <main+0x304>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8001be2:	2140      	movs	r1, #64	; 0x40
 8001be4:	481c      	ldr	r0, [pc, #112]	; (8001c58 <main+0x308>)
 8001be6:	f001 fd8d 	bl	8003704 <HAL_GPIO_TogglePin>
	/// Main program /////////////////////////////////////////////////////////////////////////////////
	while (1)
	{


		lora_res = lora_receive_packet_blocking(&lora, &lora_Rx_buffer, sizeof(lora_Rx_buffer), 1000, &lora_error);
 8001bea:	f107 0108 	add.w	r1, r7, #8
 8001bee:	f207 400c 	addw	r0, r7, #1036	; 0x40c
 8001bf2:	1dfb      	adds	r3, r7, #7
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfa:	22e8      	movs	r2, #232	; 0xe8
 8001bfc:	f7ff fe13 	bl	8001826 <lora_receive_packet_blocking>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427
		while (CDC_Transmit_FS (lora_Rx_buffer, sizeof(lora_Rx_buffer)) == USBD_BUSY);
 8001c06:	bf00      	nop
 8001c08:	f107 0308 	add.w	r3, r7, #8
 8001c0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c10:	4618      	mov	r0, r3
 8001c12:	f00e ffa5 	bl	8010b60 <CDC_Transmit_FS>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d0f5      	beq.n	8001c08 <main+0x2b8>
		lora_res = lora_receive_packet_blocking(&lora, &lora_Rx_buffer, sizeof(lora_Rx_buffer), 1000, &lora_error);
 8001c1c:	e7e5      	b.n	8001bea <main+0x29a>
 8001c1e:	bf00      	nop
 8001c20:	19ed92c0 	.word	0x19ed92c0
 8001c24:	00000000 	.word	0x00000000
 8001c28:	20000554 	.word	0x20000554
 8001c2c:	200005e4 	.word	0x200005e4
 8001c30:	08014130 	.word	0x08014130
 8001c34:	48000800 	.word	0x48000800
 8001c38:	200004a4 	.word	0x200004a4
 8001c3c:	08014138 	.word	0x08014138
 8001c40:	0801414c 	.word	0x0801414c
 8001c44:	08014154 	.word	0x08014154
 8001c48:	08014168 	.word	0x08014168
 8001c4c:	20000508 	.word	0x20000508
 8001c50:	20000d80 	.word	0x20000d80
 8001c54:	20000d81 	.word	0x20000d81
 8001c58:	48000c00 	.word	0x48000c00
 8001c5c:	20001072 	.word	0x20001072
 8001c60:	20001070 	.word	0x20001070
 8001c64:	20000000 	.word	0x20000000
 8001c68:	20000001 	.word	0x20000001
 8001c6c:	20000002 	.word	0x20000002
 8001c70:	08014174 	.word	0x08014174
 8001c74:	0801417c 	.word	0x0801417c
 8001c78:	20000003 	.word	0x20000003
 8001c7c:	08014194 	.word	0x08014194
 8001c80:	080141a4 	.word	0x080141a4
 8001c84:	20000004 	.word	0x20000004
 8001c88:	080141b4 	.word	0x080141b4
 8001c8c:	20000005 	.word	0x20000005
 8001c90:	080141b8 	.word	0x080141b8

08001c94 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b096      	sub	sp, #88	; 0x58
 8001c98:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c9a:	f107 0314 	add.w	r3, r7, #20
 8001c9e:	2244      	movs	r2, #68	; 0x44
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f00f fcc2 	bl	801162c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca8:	463b      	mov	r3, r7
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
 8001cb4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f003 f85e 	bl	8004d78 <HAL_PWREx_ControlVoltageScaling>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <SystemClock_Config+0x32>
	{
		Error_Handler();
 8001cc2:	f000 fb0b 	bl	80022dc <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001cc6:	2321      	movs	r3, #33	; 0x21
 8001cc8:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cce:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 30;
 8001ce0:	231e      	movs	r3, #30
 8001ce2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cec:	2302      	movs	r3, #2
 8001cee:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f003 f8f3 	bl	8004ee0 <HAL_RCC_OscConfig>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <SystemClock_Config+0x70>
	{
		Error_Handler();
 8001d00:	f000 faec 	bl	80022dc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d04:	230f      	movs	r3, #15
 8001d06:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d14:	2300      	movs	r3, #0
 8001d16:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d18:	463b      	mov	r3, r7
 8001d1a:	2105      	movs	r1, #5
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f003 fcf9 	bl	8005714 <HAL_RCC_ClockConfig>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <SystemClock_Config+0x98>
	{
		Error_Handler();
 8001d28:	f000 fad8 	bl	80022dc <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 8001d2c:	f003 fef0 	bl	8005b10 <HAL_RCC_EnableCSS>
}
 8001d30:	bf00      	nop
 8001d32:	3758      	adds	r7, #88	; 0x58
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
	/* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2100      	movs	r1, #0
 8001d40:	201a      	movs	r0, #26
 8001d42:	f000 ffb8 	bl	8002cb6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001d46:	201a      	movs	r0, #26
 8001d48:	f000 ffd1 	bl	8002cee <HAL_NVIC_EnableIRQ>
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2100      	movs	r1, #0
 8001d50:	2026      	movs	r0, #38	; 0x26
 8001d52:	f000 ffb0 	bl	8002cb6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d56:	2026      	movs	r0, #38	; 0x26
 8001d58:	f000 ffc9 	bl	8002cee <HAL_NVIC_EnableIRQ>
	/* USART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2100      	movs	r1, #0
 8001d60:	2025      	movs	r0, #37	; 0x25
 8001d62:	f000 ffa8 	bl	8002cb6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d66:	2025      	movs	r0, #37	; 0x25
 8001d68:	f000 ffc1 	bl	8002cee <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2100      	movs	r1, #0
 8001d70:	200b      	movs	r0, #11
 8001d72:	f000 ffa0 	bl	8002cb6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001d76:	200b      	movs	r0, #11
 8001d78:	f000 ffb9 	bl	8002cee <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2100      	movs	r1, #0
 8001d80:	200c      	movs	r0, #12
 8001d82:	f000 ff98 	bl	8002cb6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001d86:	200c      	movs	r0, #12
 8001d88:	f000 ffb1 	bl	8002cee <HAL_NVIC_EnableIRQ>
}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001d94:	4b1b      	ldr	r3, [pc, #108]	; (8001e04 <MX_I2C1_Init+0x74>)
 8001d96:	4a1c      	ldr	r2, [pc, #112]	; (8001e08 <MX_I2C1_Init+0x78>)
 8001d98:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x307075B1;
 8001d9a:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <MX_I2C1_Init+0x74>)
 8001d9c:	4a1b      	ldr	r2, [pc, #108]	; (8001e0c <MX_I2C1_Init+0x7c>)
 8001d9e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001da0:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <MX_I2C1_Init+0x74>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <MX_I2C1_Init+0x74>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dac:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <MX_I2C1_Init+0x74>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001db2:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <MX_I2C1_Init+0x74>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <MX_I2C1_Init+0x74>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dbe:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <MX_I2C1_Init+0x74>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <MX_I2C1_Init+0x74>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dca:	480e      	ldr	r0, [pc, #56]	; (8001e04 <MX_I2C1_Init+0x74>)
 8001dcc:	f001 fcb4 	bl	8003738 <HAL_I2C_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8001dd6:	f000 fa81 	bl	80022dc <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4809      	ldr	r0, [pc, #36]	; (8001e04 <MX_I2C1_Init+0x74>)
 8001dde:	f001 fd48 	bl	8003872 <HAL_I2CEx_ConfigAnalogFilter>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8001de8:	f000 fa78 	bl	80022dc <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001dec:	2100      	movs	r1, #0
 8001dee:	4805      	ldr	r0, [pc, #20]	; (8001e04 <MX_I2C1_Init+0x74>)
 8001df0:	f001 fd8a 	bl	8003908 <HAL_I2CEx_ConfigDigitalFilter>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8001dfa:	f000 fa6f 	bl	80022dc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	200003d0 	.word	0x200003d0
 8001e08:	40005400 	.word	0x40005400
 8001e0c:	307075b1 	.word	0x307075b1

08001e10 <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8001e14:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <MX_SDMMC1_SD_Init+0x3c>)
 8001e16:	4a0e      	ldr	r2, [pc, #56]	; (8001e50 <MX_SDMMC1_SD_Init+0x40>)
 8001e18:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_SDMMC1_SD_Init+0x3c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <MX_SDMMC1_SD_Init+0x3c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_SDMMC1_SD_Init+0x3c>)
 8001e28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e2c:	60da      	str	r2, [r3, #12]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001e2e:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <MX_SDMMC1_SD_Init+0x3c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
	hsd1.Init.ClockDiv = 0;
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <MX_SDMMC1_SD_Init+0x3c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	615a      	str	r2, [r3, #20]
	hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8001e3a:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <MX_SDMMC1_SD_Init+0x3c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000424 	.word	0x20000424
 8001e50:	50062400 	.word	0x50062400

08001e54 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001e58:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <MX_SPI1_Init+0x74>)
 8001e5a:	4a1c      	ldr	r2, [pc, #112]	; (8001ecc <MX_SPI1_Init+0x78>)
 8001e5c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <MX_SPI1_Init+0x74>)
 8001e60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e64:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e66:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <MX_SPI1_Init+0x74>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e6c:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <MX_SPI1_Init+0x74>)
 8001e6e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e72:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e74:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <MX_SPI1_Init+0x74>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e7a:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <MX_SPI1_Init+0x74>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <MX_SPI1_Init+0x74>)
 8001e82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e86:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <MX_SPI1_Init+0x74>)
 8001e8a:	2228      	movs	r2, #40	; 0x28
 8001e8c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <MX_SPI1_Init+0x74>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <MX_SPI1_Init+0x74>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <MX_SPI1_Init+0x74>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001ea0:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <MX_SPI1_Init+0x74>)
 8001ea2:	2207      	movs	r2, #7
 8001ea4:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <MX_SPI1_Init+0x74>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <MX_SPI1_Init+0x74>)
 8001eae:	2208      	movs	r2, #8
 8001eb0:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001eb2:	4805      	ldr	r0, [pc, #20]	; (8001ec8 <MX_SPI1_Init+0x74>)
 8001eb4:	f007 f8a3 	bl	8008ffe <HAL_SPI_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 8001ebe:	f000 fa0d 	bl	80022dc <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200004a4 	.word	0x200004a4
 8001ecc:	40013000 	.word	0x40013000

08001ed0 <MX_TIM17_Init>:
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b092      	sub	sp, #72	; 0x48
 8001ed4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM17_Init 0 */

	/* USER CODE END TIM17_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 8001ed6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
 8001ee4:	611a      	str	r2, [r3, #16]
 8001ee6:	615a      	str	r2, [r3, #20]
 8001ee8:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001eea:	463b      	mov	r3, r7
 8001eec:	222c      	movs	r2, #44	; 0x2c
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f00f fb9b 	bl	801162c <memset>

	/* USER CODE BEGIN TIM17_Init 1 */

	/* USER CODE END TIM17_Init 1 */
	htim17.Instance = TIM17;
 8001ef6:	4b2f      	ldr	r3, [pc, #188]	; (8001fb4 <MX_TIM17_Init+0xe4>)
 8001ef8:	4a2f      	ldr	r2, [pc, #188]	; (8001fb8 <MX_TIM17_Init+0xe8>)
 8001efa:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = 999;
 8001efc:	4b2d      	ldr	r3, [pc, #180]	; (8001fb4 <MX_TIM17_Init+0xe4>)
 8001efe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f02:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f04:	4b2b      	ldr	r3, [pc, #172]	; (8001fb4 <MX_TIM17_Init+0xe4>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 11999;
 8001f0a:	4b2a      	ldr	r3, [pc, #168]	; (8001fb4 <MX_TIM17_Init+0xe4>)
 8001f0c:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001f10:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f12:	4b28      	ldr	r3, [pc, #160]	; (8001fb4 <MX_TIM17_Init+0xe4>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	611a      	str	r2, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 8001f18:	4b26      	ldr	r3, [pc, #152]	; (8001fb4 <MX_TIM17_Init+0xe4>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	615a      	str	r2, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f1e:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <MX_TIM17_Init+0xe4>)
 8001f20:	2280      	movs	r2, #128	; 0x80
 8001f22:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001f24:	4823      	ldr	r0, [pc, #140]	; (8001fb4 <MX_TIM17_Init+0xe4>)
 8001f26:	f008 fc9f 	bl	800a868 <HAL_TIM_Base_Init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_TIM17_Init+0x64>
	{
		Error_Handler();
 8001f30:	f000 f9d4 	bl	80022dc <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8001f34:	481f      	ldr	r0, [pc, #124]	; (8001fb4 <MX_TIM17_Init+0xe4>)
 8001f36:	f008 fd5f 	bl	800a9f8 <HAL_TIM_OC_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM17_Init+0x74>
	{
		Error_Handler();
 8001f40:	f000 f9cc 	bl	80022dc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001f44:	2300      	movs	r3, #0
 8001f46:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.Pulse = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f50:	2300      	movs	r3, #0
 8001f52:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f64:	2200      	movs	r2, #0
 8001f66:	4619      	mov	r1, r3
 8001f68:	4812      	ldr	r0, [pc, #72]	; (8001fb4 <MX_TIM17_Init+0xe4>)
 8001f6a:	f008 fec5 	bl	800acf8 <HAL_TIM_OC_ConfigChannel>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_TIM17_Init+0xa8>
	{
		Error_Handler();
 8001f74:	f000 f9b2 	bl	80022dc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f90:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001f96:	463b      	mov	r3, r7
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4806      	ldr	r0, [pc, #24]	; (8001fb4 <MX_TIM17_Init+0xe4>)
 8001f9c:	f009 fac8 	bl	800b530 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_TIM17_Init+0xda>
	{
		Error_Handler();
 8001fa6:	f000 f999 	bl	80022dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM17_Init 2 */

	/* USER CODE END TIM17_Init 2 */

}
 8001faa:	bf00      	nop
 8001fac:	3748      	adds	r7, #72	; 0x48
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000508 	.word	0x20000508
 8001fb8:	40014800 	.word	0x40014800

08001fbc <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001fc0:	4b22      	ldr	r3, [pc, #136]	; (800204c <MX_USART1_UART_Init+0x90>)
 8001fc2:	4a23      	ldr	r2, [pc, #140]	; (8002050 <MX_USART1_UART_Init+0x94>)
 8001fc4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001fc6:	4b21      	ldr	r3, [pc, #132]	; (800204c <MX_USART1_UART_Init+0x90>)
 8001fc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fcc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fce:	4b1f      	ldr	r3, [pc, #124]	; (800204c <MX_USART1_UART_Init+0x90>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001fd4:	4b1d      	ldr	r3, [pc, #116]	; (800204c <MX_USART1_UART_Init+0x90>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001fda:	4b1c      	ldr	r3, [pc, #112]	; (800204c <MX_USART1_UART_Init+0x90>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <MX_USART1_UART_Init+0x90>)
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fe6:	4b19      	ldr	r3, [pc, #100]	; (800204c <MX_USART1_UART_Init+0x90>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fec:	4b17      	ldr	r3, [pc, #92]	; (800204c <MX_USART1_UART_Init+0x90>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <MX_USART1_UART_Init+0x90>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ff8:	4b14      	ldr	r3, [pc, #80]	; (800204c <MX_USART1_UART_Init+0x90>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ffe:	4b13      	ldr	r3, [pc, #76]	; (800204c <MX_USART1_UART_Init+0x90>)
 8002000:	2200      	movs	r2, #0
 8002002:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002004:	4811      	ldr	r0, [pc, #68]	; (800204c <MX_USART1_UART_Init+0x90>)
 8002006:	f009 fb2f 	bl	800b668 <HAL_UART_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 8002010:	f000 f964 	bl	80022dc <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002014:	2100      	movs	r1, #0
 8002016:	480d      	ldr	r0, [pc, #52]	; (800204c <MX_USART1_UART_Init+0x90>)
 8002018:	f00a fc5d 	bl	800c8d6 <HAL_UARTEx_SetTxFifoThreshold>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_USART1_UART_Init+0x6a>
	{
		Error_Handler();
 8002022:	f000 f95b 	bl	80022dc <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002026:	2100      	movs	r1, #0
 8002028:	4808      	ldr	r0, [pc, #32]	; (800204c <MX_USART1_UART_Init+0x90>)
 800202a:	f00a fc92 	bl	800c952 <HAL_UARTEx_SetRxFifoThreshold>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_USART1_UART_Init+0x7c>
	{
		Error_Handler();
 8002034:	f000 f952 	bl	80022dc <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002038:	4804      	ldr	r0, [pc, #16]	; (800204c <MX_USART1_UART_Init+0x90>)
 800203a:	f00a fc13 	bl	800c864 <HAL_UARTEx_DisableFifoMode>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 8002044:	f000 f94a 	bl	80022dc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20000554 	.word	0x20000554
 8002050:	40013800 	.word	0x40013800

08002054 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002058:	4b24      	ldr	r3, [pc, #144]	; (80020ec <MX_USART2_UART_Init+0x98>)
 800205a:	4a25      	ldr	r2, [pc, #148]	; (80020f0 <MX_USART2_UART_Init+0x9c>)
 800205c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 800205e:	4b23      	ldr	r3, [pc, #140]	; (80020ec <MX_USART2_UART_Init+0x98>)
 8002060:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002064:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002066:	4b21      	ldr	r3, [pc, #132]	; (80020ec <MX_USART2_UART_Init+0x98>)
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800206c:	4b1f      	ldr	r3, [pc, #124]	; (80020ec <MX_USART2_UART_Init+0x98>)
 800206e:	2200      	movs	r2, #0
 8002070:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002072:	4b1e      	ldr	r3, [pc, #120]	; (80020ec <MX_USART2_UART_Init+0x98>)
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002078:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <MX_USART2_UART_Init+0x98>)
 800207a:	220c      	movs	r2, #12
 800207c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800207e:	4b1b      	ldr	r3, [pc, #108]	; (80020ec <MX_USART2_UART_Init+0x98>)
 8002080:	2200      	movs	r2, #0
 8002082:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002084:	4b19      	ldr	r3, [pc, #100]	; (80020ec <MX_USART2_UART_Init+0x98>)
 8002086:	2200      	movs	r2, #0
 8002088:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800208a:	4b18      	ldr	r3, [pc, #96]	; (80020ec <MX_USART2_UART_Init+0x98>)
 800208c:	2200      	movs	r2, #0
 800208e:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002090:	4b16      	ldr	r3, [pc, #88]	; (80020ec <MX_USART2_UART_Init+0x98>)
 8002092:	2200      	movs	r2, #0
 8002094:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8002096:	4b15      	ldr	r3, [pc, #84]	; (80020ec <MX_USART2_UART_Init+0x98>)
 8002098:	2210      	movs	r2, #16
 800209a:	629a      	str	r2, [r3, #40]	; 0x28
	huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <MX_USART2_UART_Init+0x98>)
 800209e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020a2:	63da      	str	r2, [r3, #60]	; 0x3c
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80020a4:	4811      	ldr	r0, [pc, #68]	; (80020ec <MX_USART2_UART_Init+0x98>)
 80020a6:	f009 fadf 	bl	800b668 <HAL_UART_Init>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_USART2_UART_Init+0x60>
	{
		Error_Handler();
 80020b0:	f000 f914 	bl	80022dc <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020b4:	2100      	movs	r1, #0
 80020b6:	480d      	ldr	r0, [pc, #52]	; (80020ec <MX_USART2_UART_Init+0x98>)
 80020b8:	f00a fc0d 	bl	800c8d6 <HAL_UARTEx_SetTxFifoThreshold>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_USART2_UART_Init+0x72>
	{
		Error_Handler();
 80020c2:	f000 f90b 	bl	80022dc <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020c6:	2100      	movs	r1, #0
 80020c8:	4808      	ldr	r0, [pc, #32]	; (80020ec <MX_USART2_UART_Init+0x98>)
 80020ca:	f00a fc42 	bl	800c952 <HAL_UARTEx_SetRxFifoThreshold>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_USART2_UART_Init+0x84>
	{
		Error_Handler();
 80020d4:	f000 f902 	bl	80022dc <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80020d8:	4804      	ldr	r0, [pc, #16]	; (80020ec <MX_USART2_UART_Init+0x98>)
 80020da:	f00a fbc3 	bl	800c864 <HAL_UARTEx_DisableFifoMode>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_USART2_UART_Init+0x94>
	{
		Error_Handler();
 80020e4:	f000 f8fa 	bl	80022dc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	200005e4 	.word	0x200005e4
 80020f0:	40004400 	.word	0x40004400

080020f4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80020fa:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <MX_DMA_Init+0x44>)
 80020fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020fe:	4a0e      	ldr	r2, [pc, #56]	; (8002138 <MX_DMA_Init+0x44>)
 8002100:	f043 0304 	orr.w	r3, r3, #4
 8002104:	6493      	str	r3, [r2, #72]	; 0x48
 8002106:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <MX_DMA_Init+0x44>)
 8002108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <MX_DMA_Init+0x44>)
 8002114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002116:	4a08      	ldr	r2, [pc, #32]	; (8002138 <MX_DMA_Init+0x44>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	6493      	str	r3, [r2, #72]	; 0x48
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <MX_DMA_Init+0x44>)
 8002120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	683b      	ldr	r3, [r7, #0]

}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000

0800213c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08c      	sub	sp, #48	; 0x30
 8002140:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002142:	f107 031c 	add.w	r3, r7, #28
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	60da      	str	r2, [r3, #12]
 8002150:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002152:	4b5d      	ldr	r3, [pc, #372]	; (80022c8 <MX_GPIO_Init+0x18c>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	4a5c      	ldr	r2, [pc, #368]	; (80022c8 <MX_GPIO_Init+0x18c>)
 8002158:	f043 0310 	orr.w	r3, r3, #16
 800215c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800215e:	4b5a      	ldr	r3, [pc, #360]	; (80022c8 <MX_GPIO_Init+0x18c>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	f003 0310 	and.w	r3, r3, #16
 8002166:	61bb      	str	r3, [r7, #24]
 8002168:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800216a:	4b57      	ldr	r3, [pc, #348]	; (80022c8 <MX_GPIO_Init+0x18c>)
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216e:	4a56      	ldr	r2, [pc, #344]	; (80022c8 <MX_GPIO_Init+0x18c>)
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002176:	4b54      	ldr	r3, [pc, #336]	; (80022c8 <MX_GPIO_Init+0x18c>)
 8002178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002182:	4b51      	ldr	r3, [pc, #324]	; (80022c8 <MX_GPIO_Init+0x18c>)
 8002184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002186:	4a50      	ldr	r2, [pc, #320]	; (80022c8 <MX_GPIO_Init+0x18c>)
 8002188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800218c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800218e:	4b4e      	ldr	r3, [pc, #312]	; (80022c8 <MX_GPIO_Init+0x18c>)
 8002190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	4b4b      	ldr	r3, [pc, #300]	; (80022c8 <MX_GPIO_Init+0x18c>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219e:	4a4a      	ldr	r2, [pc, #296]	; (80022c8 <MX_GPIO_Init+0x18c>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a6:	4b48      	ldr	r3, [pc, #288]	; (80022c8 <MX_GPIO_Init+0x18c>)
 80021a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80021b2:	4b45      	ldr	r3, [pc, #276]	; (80022c8 <MX_GPIO_Init+0x18c>)
 80021b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b6:	4a44      	ldr	r2, [pc, #272]	; (80022c8 <MX_GPIO_Init+0x18c>)
 80021b8:	f043 0302 	orr.w	r3, r3, #2
 80021bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021be:	4b42      	ldr	r3, [pc, #264]	; (80022c8 <MX_GPIO_Init+0x18c>)
 80021c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80021ca:	4b3f      	ldr	r3, [pc, #252]	; (80022c8 <MX_GPIO_Init+0x18c>)
 80021cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ce:	4a3e      	ldr	r2, [pc, #248]	; (80022c8 <MX_GPIO_Init+0x18c>)
 80021d0:	f043 0308 	orr.w	r3, r3, #8
 80021d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d6:	4b3c      	ldr	r3, [pc, #240]	; (80022c8 <MX_GPIO_Init+0x18c>)
 80021d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 80021e2:	2200      	movs	r2, #0
 80021e4:	f641 013c 	movw	r1, #6204	; 0x183c
 80021e8:	4838      	ldr	r0, [pc, #224]	; (80022cc <MX_GPIO_Init+0x190>)
 80021ea:	f001 fa73 	bl	80036d4 <HAL_GPIO_WritePin>
			|MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_SET);
 80021ee:	2201      	movs	r2, #1
 80021f0:	2130      	movs	r1, #48	; 0x30
 80021f2:	4837      	ldr	r0, [pc, #220]	; (80022d0 <MX_GPIO_Init+0x194>)
 80021f4:	f001 fa6e 	bl	80036d4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80021f8:	2200      	movs	r2, #0
 80021fa:	2178      	movs	r1, #120	; 0x78
 80021fc:	4835      	ldr	r0, [pc, #212]	; (80022d4 <MX_GPIO_Init+0x198>)
 80021fe:	f001 fa69 	bl	80036d4 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
	GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8002202:	f641 033c 	movw	r3, #6204	; 0x183c
 8002206:	61fb      	str	r3, [r7, #28]
			|MIRA_EN_PWR_Pin|OCPEN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002208:	2301      	movs	r3, #1
 800220a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002210:	2300      	movs	r3, #0
 8002212:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002214:	f107 031c 	add.w	r3, r7, #28
 8002218:	4619      	mov	r1, r3
 800221a:	482c      	ldr	r0, [pc, #176]	; (80022cc <MX_GPIO_Init+0x190>)
 800221c:	f001 f8b0 	bl	8003380 <HAL_GPIO_Init>

	/*Configure GPIO pin : CHG_INT_Pin */
	GPIO_InitStruct.Pin = CHG_INT_Pin;
 8002220:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002224:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002226:	2300      	movs	r3, #0
 8002228:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 800222e:	f107 031c 	add.w	r3, r7, #28
 8002232:	4619      	mov	r1, r3
 8002234:	4826      	ldr	r0, [pc, #152]	; (80022d0 <MX_GPIO_Init+0x194>)
 8002236:	f001 f8a3 	bl	8003380 <HAL_GPIO_Init>

	/*Configure GPIO pins : LORA_DIG0_Pin CARD_DETECT_Pin */
	GPIO_InitStruct.Pin = LORA_DIG0_Pin|CARD_DETECT_Pin;
 800223a:	f248 0302 	movw	r3, #32770	; 0x8002
 800223e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002240:	2300      	movs	r3, #0
 8002242:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002248:	f107 031c 	add.w	r3, r7, #28
 800224c:	4619      	mov	r1, r3
 800224e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002252:	f001 f895 	bl	8003380 <HAL_GPIO_Init>

	/*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
	GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 8002256:	2330      	movs	r3, #48	; 0x30
 8002258:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800225a:	2301      	movs	r3, #1
 800225c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002262:	2300      	movs	r3, #0
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002266:	f107 031c 	add.w	r3, r7, #28
 800226a:	4619      	mov	r1, r3
 800226c:	4818      	ldr	r0, [pc, #96]	; (80022d0 <MX_GPIO_Init+0x194>)
 800226e:	f001 f887 	bl	8003380 <HAL_GPIO_Init>

	/*Configure GPIO pin : OCPFAULT_Pin */
	GPIO_InitStruct.Pin = OCPFAULT_Pin;
 8002272:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002276:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002278:	2300      	movs	r3, #0
 800227a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800227c:	2301      	movs	r3, #1
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 8002280:	f107 031c 	add.w	r3, r7, #28
 8002284:	4619      	mov	r1, r3
 8002286:	4811      	ldr	r0, [pc, #68]	; (80022cc <MX_GPIO_Init+0x190>)
 8002288:	f001 f87a 	bl	8003380 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 800228c:	2378      	movs	r3, #120	; 0x78
 800228e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002290:	2301      	movs	r3, #1
 8002292:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002298:	2300      	movs	r3, #0
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800229c:	f107 031c 	add.w	r3, r7, #28
 80022a0:	4619      	mov	r1, r3
 80022a2:	480c      	ldr	r0, [pc, #48]	; (80022d4 <MX_GPIO_Init+0x198>)
 80022a4:	f001 f86c 	bl	8003380 <HAL_GPIO_Init>

	/*Configure GPIO pin : POWERGOOD_Pin */
	GPIO_InitStruct.Pin = POWERGOOD_Pin;
 80022a8:	2320      	movs	r3, #32
 80022aa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ac:	2300      	movs	r3, #0
 80022ae:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 80022b4:	f107 031c 	add.w	r3, r7, #28
 80022b8:	4619      	mov	r1, r3
 80022ba:	4807      	ldr	r0, [pc, #28]	; (80022d8 <MX_GPIO_Init+0x19c>)
 80022bc:	f001 f860 	bl	8003380 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80022c0:	bf00      	nop
 80022c2:	3730      	adds	r7, #48	; 0x30
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40021000 	.word	0x40021000
 80022cc:	48001000 	.word	0x48001000
 80022d0:	48000800 	.word	0x48000800
 80022d4:	48000c00 	.word	0x48000c00
 80022d8:	48000400 	.word	0x48000400

080022dc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022e0:	b672      	cpsid	i
}
 80022e2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	printf("Error_Handler() called");
 80022e4:	4801      	ldr	r0, [pc, #4]	; (80022ec <Error_Handler+0x10>)
 80022e6:	f00f fef3 	bl	80120d0 <iprintf>
	while (1)
 80022ea:	e7fe      	b.n	80022ea <Error_Handler+0xe>
 80022ec:	080141c0 	.word	0x080141c0

080022f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f6:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <HAL_MspInit+0x44>)
 80022f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022fa:	4a0e      	ldr	r2, [pc, #56]	; (8002334 <HAL_MspInit+0x44>)
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	6613      	str	r3, [r2, #96]	; 0x60
 8002302:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <HAL_MspInit+0x44>)
 8002304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	607b      	str	r3, [r7, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800230e:	4b09      	ldr	r3, [pc, #36]	; (8002334 <HAL_MspInit+0x44>)
 8002310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002312:	4a08      	ldr	r2, [pc, #32]	; (8002334 <HAL_MspInit+0x44>)
 8002314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002318:	6593      	str	r3, [r2, #88]	; 0x58
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_MspInit+0x44>)
 800231c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002322:	603b      	str	r3, [r7, #0]
 8002324:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000

08002338 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b0ae      	sub	sp, #184	; 0xb8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002340:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002350:	f107 0310 	add.w	r3, r7, #16
 8002354:	2294      	movs	r2, #148	; 0x94
 8002356:	2100      	movs	r1, #0
 8002358:	4618      	mov	r0, r3
 800235a:	f00f f967 	bl	801162c <memset>
  if(hi2c->Instance==I2C1)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a21      	ldr	r2, [pc, #132]	; (80023e8 <HAL_I2C_MspInit+0xb0>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d13a      	bne.n	80023de <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002368:	2340      	movs	r3, #64	; 0x40
 800236a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800236c:	2300      	movs	r3, #0
 800236e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002370:	f107 0310 	add.w	r3, r7, #16
 8002374:	4618      	mov	r0, r3
 8002376:	f003 fcb7 	bl	8005ce8 <HAL_RCCEx_PeriphCLKConfig>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002380:	f7ff ffac 	bl	80022dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002384:	4b19      	ldr	r3, [pc, #100]	; (80023ec <HAL_I2C_MspInit+0xb4>)
 8002386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002388:	4a18      	ldr	r2, [pc, #96]	; (80023ec <HAL_I2C_MspInit+0xb4>)
 800238a:	f043 0302 	orr.w	r3, r3, #2
 800238e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002390:	4b16      	ldr	r3, [pc, #88]	; (80023ec <HAL_I2C_MspInit+0xb4>)
 8002392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800239c:	23c0      	movs	r3, #192	; 0xc0
 800239e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023a2:	2312      	movs	r3, #18
 80023a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ae:	2303      	movs	r3, #3
 80023b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023b4:	2304      	movs	r3, #4
 80023b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80023be:	4619      	mov	r1, r3
 80023c0:	480b      	ldr	r0, [pc, #44]	; (80023f0 <HAL_I2C_MspInit+0xb8>)
 80023c2:	f000 ffdd 	bl	8003380 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_I2C_MspInit+0xb4>)
 80023c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ca:	4a08      	ldr	r2, [pc, #32]	; (80023ec <HAL_I2C_MspInit+0xb4>)
 80023cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023d0:	6593      	str	r3, [r2, #88]	; 0x58
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_I2C_MspInit+0xb4>)
 80023d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023de:	bf00      	nop
 80023e0:	37b8      	adds	r7, #184	; 0xb8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40005400 	.word	0x40005400
 80023ec:	40021000 	.word	0x40021000
 80023f0:	48000400 	.word	0x48000400

080023f4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b0b0      	sub	sp, #192	; 0xc0
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800240c:	f107 0318 	add.w	r3, r7, #24
 8002410:	2294      	movs	r2, #148	; 0x94
 8002412:	2100      	movs	r1, #0
 8002414:	4618      	mov	r0, r3
 8002416:	f00f f909 	bl	801162c <memset>
  if(hsd->Instance==SDMMC1)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a33      	ldr	r2, [pc, #204]	; (80024ec <HAL_SD_MspInit+0xf8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d15e      	bne.n	80024e2 <HAL_SD_MspInit+0xee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8002424:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002428:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 800242a:	2300      	movs	r3, #0
 800242c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002430:	f107 0318 	add.w	r3, r7, #24
 8002434:	4618      	mov	r0, r3
 8002436:	f003 fc57 	bl	8005ce8 <HAL_RCCEx_PeriphCLKConfig>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8002440:	f7ff ff4c 	bl	80022dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002444:	4b2a      	ldr	r3, [pc, #168]	; (80024f0 <HAL_SD_MspInit+0xfc>)
 8002446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002448:	4a29      	ldr	r2, [pc, #164]	; (80024f0 <HAL_SD_MspInit+0xfc>)
 800244a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800244e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002450:	4b27      	ldr	r3, [pc, #156]	; (80024f0 <HAL_SD_MspInit+0xfc>)
 8002452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002454:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800245c:	4b24      	ldr	r3, [pc, #144]	; (80024f0 <HAL_SD_MspInit+0xfc>)
 800245e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002460:	4a23      	ldr	r2, [pc, #140]	; (80024f0 <HAL_SD_MspInit+0xfc>)
 8002462:	f043 0304 	orr.w	r3, r3, #4
 8002466:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002468:	4b21      	ldr	r3, [pc, #132]	; (80024f0 <HAL_SD_MspInit+0xfc>)
 800246a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002474:	4b1e      	ldr	r3, [pc, #120]	; (80024f0 <HAL_SD_MspInit+0xfc>)
 8002476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002478:	4a1d      	ldr	r2, [pc, #116]	; (80024f0 <HAL_SD_MspInit+0xfc>)
 800247a:	f043 0308 	orr.w	r3, r3, #8
 800247e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002480:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <HAL_SD_MspInit+0xfc>)
 8002482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800248c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002490:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002494:	2302      	movs	r3, #2
 8002496:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a0:	2303      	movs	r3, #3
 80024a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80024a6:	230c      	movs	r3, #12
 80024a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80024b0:	4619      	mov	r1, r3
 80024b2:	4810      	ldr	r0, [pc, #64]	; (80024f4 <HAL_SD_MspInit+0x100>)
 80024b4:	f000 ff64 	bl	8003380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024b8:	2304      	movs	r3, #4
 80024ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024be:	2302      	movs	r3, #2
 80024c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ca:	2303      	movs	r3, #3
 80024cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80024d0:	230c      	movs	r3, #12
 80024d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024d6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80024da:	4619      	mov	r1, r3
 80024dc:	4806      	ldr	r0, [pc, #24]	; (80024f8 <HAL_SD_MspInit+0x104>)
 80024de:	f000 ff4f 	bl	8003380 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80024e2:	bf00      	nop
 80024e4:	37c0      	adds	r7, #192	; 0xc0
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	50062400 	.word	0x50062400
 80024f0:	40021000 	.word	0x40021000
 80024f4:	48000800 	.word	0x48000800
 80024f8:	48000c00 	.word	0x48000c00

080024fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08a      	sub	sp, #40	; 0x28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a17      	ldr	r2, [pc, #92]	; (8002578 <HAL_SPI_MspInit+0x7c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d128      	bne.n	8002570 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800251e:	4b17      	ldr	r3, [pc, #92]	; (800257c <HAL_SPI_MspInit+0x80>)
 8002520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002522:	4a16      	ldr	r2, [pc, #88]	; (800257c <HAL_SPI_MspInit+0x80>)
 8002524:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002528:	6613      	str	r3, [r2, #96]	; 0x60
 800252a:	4b14      	ldr	r3, [pc, #80]	; (800257c <HAL_SPI_MspInit+0x80>)
 800252c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800252e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002536:	4b11      	ldr	r3, [pc, #68]	; (800257c <HAL_SPI_MspInit+0x80>)
 8002538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253a:	4a10      	ldr	r2, [pc, #64]	; (800257c <HAL_SPI_MspInit+0x80>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <HAL_SPI_MspInit+0x80>)
 8002544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|LORA0_SCK_Pin|LORA0_MISO_Pin|LORA0_MOSI_Pin;
 800254e:	23f0      	movs	r3, #240	; 0xf0
 8002550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255a:	2303      	movs	r3, #3
 800255c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800255e:	2305      	movs	r3, #5
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002562:	f107 0314 	add.w	r3, r7, #20
 8002566:	4619      	mov	r1, r3
 8002568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800256c:	f000 ff08 	bl	8003380 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002570:	bf00      	nop
 8002572:	3728      	adds	r7, #40	; 0x28
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40013000 	.word	0x40013000
 800257c:	40021000 	.word	0x40021000

08002580 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <HAL_TIM_Base_MspInit+0x38>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d10b      	bne.n	80025aa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002592:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <HAL_TIM_Base_MspInit+0x3c>)
 8002594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002596:	4a09      	ldr	r2, [pc, #36]	; (80025bc <HAL_TIM_Base_MspInit+0x3c>)
 8002598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800259c:	6613      	str	r3, [r2, #96]	; 0x60
 800259e:	4b07      	ldr	r3, [pc, #28]	; (80025bc <HAL_TIM_Base_MspInit+0x3c>)
 80025a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80025aa:	bf00      	nop
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40014800 	.word	0x40014800
 80025bc:	40021000 	.word	0x40021000

080025c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b0b0      	sub	sp, #192	; 0xc0
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025d8:	f107 0318 	add.w	r3, r7, #24
 80025dc:	2294      	movs	r2, #148	; 0x94
 80025de:	2100      	movs	r1, #0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f00f f823 	bl	801162c <memset>
  if(huart->Instance==USART1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a6c      	ldr	r2, [pc, #432]	; (800279c <HAL_UART_MspInit+0x1dc>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	f040 8090 	bne.w	8002712 <HAL_UART_MspInit+0x152>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80025f2:	2301      	movs	r3, #1
 80025f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80025f6:	2300      	movs	r3, #0
 80025f8:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025fa:	f107 0318 	add.w	r3, r7, #24
 80025fe:	4618      	mov	r0, r3
 8002600:	f003 fb72 	bl	8005ce8 <HAL_RCCEx_PeriphCLKConfig>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800260a:	f7ff fe67 	bl	80022dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800260e:	4b64      	ldr	r3, [pc, #400]	; (80027a0 <HAL_UART_MspInit+0x1e0>)
 8002610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002612:	4a63      	ldr	r2, [pc, #396]	; (80027a0 <HAL_UART_MspInit+0x1e0>)
 8002614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002618:	6613      	str	r3, [r2, #96]	; 0x60
 800261a:	4b61      	ldr	r3, [pc, #388]	; (80027a0 <HAL_UART_MspInit+0x1e0>)
 800261c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002626:	4b5e      	ldr	r3, [pc, #376]	; (80027a0 <HAL_UART_MspInit+0x1e0>)
 8002628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262a:	4a5d      	ldr	r2, [pc, #372]	; (80027a0 <HAL_UART_MspInit+0x1e0>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002632:	4b5b      	ldr	r3, [pc, #364]	; (80027a0 <HAL_UART_MspInit+0x1e0>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 800263e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002642:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002646:	2302      	movs	r3, #2
 8002648:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002652:	2303      	movs	r3, #3
 8002654:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002658:	2307      	movs	r3, #7
 800265a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002662:	4619      	mov	r1, r3
 8002664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002668:	f000 fe8a 	bl	8003380 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800266c:	4b4d      	ldr	r3, [pc, #308]	; (80027a4 <HAL_UART_MspInit+0x1e4>)
 800266e:	4a4e      	ldr	r2, [pc, #312]	; (80027a8 <HAL_UART_MspInit+0x1e8>)
 8002670:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002672:	4b4c      	ldr	r3, [pc, #304]	; (80027a4 <HAL_UART_MspInit+0x1e4>)
 8002674:	2218      	movs	r2, #24
 8002676:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002678:	4b4a      	ldr	r3, [pc, #296]	; (80027a4 <HAL_UART_MspInit+0x1e4>)
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800267e:	4b49      	ldr	r3, [pc, #292]	; (80027a4 <HAL_UART_MspInit+0x1e4>)
 8002680:	2200      	movs	r2, #0
 8002682:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002684:	4b47      	ldr	r3, [pc, #284]	; (80027a4 <HAL_UART_MspInit+0x1e4>)
 8002686:	2280      	movs	r2, #128	; 0x80
 8002688:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800268a:	4b46      	ldr	r3, [pc, #280]	; (80027a4 <HAL_UART_MspInit+0x1e4>)
 800268c:	2200      	movs	r2, #0
 800268e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002690:	4b44      	ldr	r3, [pc, #272]	; (80027a4 <HAL_UART_MspInit+0x1e4>)
 8002692:	2200      	movs	r2, #0
 8002694:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002696:	4b43      	ldr	r3, [pc, #268]	; (80027a4 <HAL_UART_MspInit+0x1e4>)
 8002698:	2200      	movs	r2, #0
 800269a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800269c:	4b41      	ldr	r3, [pc, #260]	; (80027a4 <HAL_UART_MspInit+0x1e4>)
 800269e:	2200      	movs	r2, #0
 80026a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80026a2:	4840      	ldr	r0, [pc, #256]	; (80027a4 <HAL_UART_MspInit+0x1e4>)
 80026a4:	f000 fb3e 	bl	8002d24 <HAL_DMA_Init>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 80026ae:	f7ff fe15 	bl	80022dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a3b      	ldr	r2, [pc, #236]	; (80027a4 <HAL_UART_MspInit+0x1e4>)
 80026b6:	67da      	str	r2, [r3, #124]	; 0x7c
 80026b8:	4a3a      	ldr	r2, [pc, #232]	; (80027a4 <HAL_UART_MspInit+0x1e4>)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80026be:	4b3b      	ldr	r3, [pc, #236]	; (80027ac <HAL_UART_MspInit+0x1ec>)
 80026c0:	4a3b      	ldr	r2, [pc, #236]	; (80027b0 <HAL_UART_MspInit+0x1f0>)
 80026c2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80026c4:	4b39      	ldr	r3, [pc, #228]	; (80027ac <HAL_UART_MspInit+0x1ec>)
 80026c6:	2219      	movs	r2, #25
 80026c8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026ca:	4b38      	ldr	r3, [pc, #224]	; (80027ac <HAL_UART_MspInit+0x1ec>)
 80026cc:	2210      	movs	r2, #16
 80026ce:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026d0:	4b36      	ldr	r3, [pc, #216]	; (80027ac <HAL_UART_MspInit+0x1ec>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026d6:	4b35      	ldr	r3, [pc, #212]	; (80027ac <HAL_UART_MspInit+0x1ec>)
 80026d8:	2280      	movs	r2, #128	; 0x80
 80026da:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026dc:	4b33      	ldr	r3, [pc, #204]	; (80027ac <HAL_UART_MspInit+0x1ec>)
 80026de:	2200      	movs	r2, #0
 80026e0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026e2:	4b32      	ldr	r3, [pc, #200]	; (80027ac <HAL_UART_MspInit+0x1ec>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80026e8:	4b30      	ldr	r3, [pc, #192]	; (80027ac <HAL_UART_MspInit+0x1ec>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026ee:	4b2f      	ldr	r3, [pc, #188]	; (80027ac <HAL_UART_MspInit+0x1ec>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80026f4:	482d      	ldr	r0, [pc, #180]	; (80027ac <HAL_UART_MspInit+0x1ec>)
 80026f6:	f000 fb15 	bl	8002d24 <HAL_DMA_Init>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_UART_MspInit+0x144>
    {
      Error_Handler();
 8002700:	f7ff fdec 	bl	80022dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a29      	ldr	r2, [pc, #164]	; (80027ac <HAL_UART_MspInit+0x1ec>)
 8002708:	679a      	str	r2, [r3, #120]	; 0x78
 800270a:	4a28      	ldr	r2, [pc, #160]	; (80027ac <HAL_UART_MspInit+0x1ec>)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002710:	e040      	b.n	8002794 <HAL_UART_MspInit+0x1d4>
  else if(huart->Instance==USART2)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a27      	ldr	r2, [pc, #156]	; (80027b4 <HAL_UART_MspInit+0x1f4>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d13b      	bne.n	8002794 <HAL_UART_MspInit+0x1d4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800271c:	2302      	movs	r3, #2
 800271e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002720:	2300      	movs	r3, #0
 8002722:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002724:	f107 0318 	add.w	r3, r7, #24
 8002728:	4618      	mov	r0, r3
 800272a:	f003 fadd 	bl	8005ce8 <HAL_RCCEx_PeriphCLKConfig>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_UART_MspInit+0x178>
      Error_Handler();
 8002734:	f7ff fdd2 	bl	80022dc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002738:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <HAL_UART_MspInit+0x1e0>)
 800273a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273c:	4a18      	ldr	r2, [pc, #96]	; (80027a0 <HAL_UART_MspInit+0x1e0>)
 800273e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002742:	6593      	str	r3, [r2, #88]	; 0x58
 8002744:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <HAL_UART_MspInit+0x1e0>)
 8002746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002750:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <HAL_UART_MspInit+0x1e0>)
 8002752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002754:	4a12      	ldr	r2, [pc, #72]	; (80027a0 <HAL_UART_MspInit+0x1e0>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800275c:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <HAL_UART_MspInit+0x1e0>)
 800275e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8002768:	230c      	movs	r3, #12
 800276a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276e:	2302      	movs	r3, #2
 8002770:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002774:	2300      	movs	r3, #0
 8002776:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277a:	2303      	movs	r3, #3
 800277c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002780:	2307      	movs	r3, #7
 8002782:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002786:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800278a:	4619      	mov	r1, r3
 800278c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002790:	f000 fdf6 	bl	8003380 <HAL_GPIO_Init>
}
 8002794:	bf00      	nop
 8002796:	37c0      	adds	r7, #192	; 0xc0
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40013800 	.word	0x40013800
 80027a0:	40021000 	.word	0x40021000
 80027a4:	20000674 	.word	0x20000674
 80027a8:	40020008 	.word	0x40020008
 80027ac:	200006d4 	.word	0x200006d4
 80027b0:	4002001c 	.word	0x4002001c
 80027b4:	40004400 	.word	0x40004400

080027b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80027bc:	f003 f9b8 	bl	8005b30 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80027c0:	e7fe      	b.n	80027c0 <NMI_Handler+0x8>

080027c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027c2:	b480      	push	{r7}
 80027c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027c6:	e7fe      	b.n	80027c6 <HardFault_Handler+0x4>

080027c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027cc:	e7fe      	b.n	80027cc <MemManage_Handler+0x4>

080027ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027d2:	e7fe      	b.n	80027d2 <BusFault_Handler+0x4>

080027d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027d8:	e7fe      	b.n	80027d8 <UsageFault_Handler+0x4>

080027da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027f6:	b480      	push	{r7}
 80027f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002808:	f000 f936 	bl	8002a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800280c:	bf00      	nop
 800280e:	bd80      	pop	{r7, pc}

08002810 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002814:	4802      	ldr	r0, [pc, #8]	; (8002820 <DMA1_Channel1_IRQHandler+0x10>)
 8002816:	f000 fc63 	bl	80030e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000674 	.word	0x20000674

08002824 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002828:	4802      	ldr	r0, [pc, #8]	; (8002834 <DMA1_Channel2_IRQHandler+0x10>)
 800282a:	f000 fc59 	bl	80030e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	200006d4 	.word	0x200006d4

08002838 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	if (tick) {tick--;}
 800283c:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d006      	beq.n	8002854 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>
 8002846:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	3b01      	subs	r3, #1
 800284e:	b2da      	uxtb	r2, r3
 8002850:	4b09      	ldr	r3, [pc, #36]	; (8002878 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8002852:	701a      	strb	r2, [r3, #0]
	if (tickGPS) {tickGPS--;}
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d006      	beq.n	800286c <TIM1_TRG_COM_TIM17_IRQHandler+0x34>
 800285e:	4b07      	ldr	r3, [pc, #28]	; (800287c <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	b2db      	uxtb	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	b2da      	uxtb	r2, r3
 8002868:	4b04      	ldr	r3, [pc, #16]	; (800287c <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 800286a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800286c:	4804      	ldr	r0, [pc, #16]	; (8002880 <TIM1_TRG_COM_TIM17_IRQHandler+0x48>)
 800286e:	f008 f924 	bl	800aaba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000d80 	.word	0x20000d80
 800287c:	20000d81 	.word	0x20000d81
 8002880:	20000508 	.word	0x20000508

08002884 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
//		if (mira_rxBuffer == mira_rxBuffer1) {mira_rxBuffer = mira_rxBuffer2;}
//		else {mira_rxBuffer = mira_rxBuffer1;}
//		HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
//	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002888:	4802      	ldr	r0, [pc, #8]	; (8002894 <USART1_IRQHandler+0x10>)
 800288a:	f008 ff3d 	bl	800b708 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000554 	.word	0x20000554

08002898 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	char c = huart2.Instance->RDR;
 800289e:	4b22      	ldr	r3, [pc, #136]	; (8002928 <USART2_IRQHandler+0x90>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	71fb      	strb	r3, [r7, #7]
	if (gps_rxBufferPos < gps_RXBUFSIZE - 1)
 80028a8:	4b20      	ldr	r3, [pc, #128]	; (800292c <USART2_IRQHandler+0x94>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
	{ gps_rxBuffer[gps_rxBufferPos++] = (uint8_t) c; }
 80028ac:	4b20      	ldr	r3, [pc, #128]	; (8002930 <USART2_IRQHandler+0x98>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b1e      	ldr	r3, [pc, #120]	; (800292c <USART2_IRQHandler+0x94>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	1c59      	adds	r1, r3, #1
 80028b8:	b2c8      	uxtb	r0, r1
 80028ba:	491c      	ldr	r1, [pc, #112]	; (800292c <USART2_IRQHandler+0x94>)
 80028bc:	7008      	strb	r0, [r1, #0]
 80028be:	4413      	add	r3, r2
 80028c0:	79fa      	ldrb	r2, [r7, #7]
 80028c2:	701a      	strb	r2, [r3, #0]

	if ((c == '\n') && (gps_send_ready))// && (tickGPS == 0))// && (tickGPS == 0)) //(c == '\r') ||
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	2b0a      	cmp	r3, #10
 80028c8:	d126      	bne.n	8002918 <USART2_IRQHandler+0x80>
 80028ca:	4b1a      	ldr	r3, [pc, #104]	; (8002934 <USART2_IRQHandler+0x9c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d022      	beq.n	8002918 <USART2_IRQHandler+0x80>
	{
		//tickGPS = 1;
		gps_rxBuffer[gps_rxBufferPos] = 0;
 80028d2:	4b17      	ldr	r3, [pc, #92]	; (8002930 <USART2_IRQHandler+0x98>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a15      	ldr	r2, [pc, #84]	; (800292c <USART2_IRQHandler+0x94>)
 80028d8:	7812      	ldrb	r2, [r2, #0]
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	4413      	add	r3, r2
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]
		gps_data_ready |= 1;
 80028e2:	4b15      	ldr	r3, [pc, #84]	; (8002938 <USART2_IRQHandler+0xa0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	4a13      	ldr	r2, [pc, #76]	; (8002938 <USART2_IRQHandler+0xa0>)
 80028ec:	6013      	str	r3, [r2, #0]
		gps_send_ready ^= 1;
 80028ee:	4b11      	ldr	r3, [pc, #68]	; (8002934 <USART2_IRQHandler+0x9c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f083 0301 	eor.w	r3, r3, #1
 80028f6:	4a0f      	ldr	r2, [pc, #60]	; (8002934 <USART2_IRQHandler+0x9c>)
 80028f8:	6013      	str	r3, [r2, #0]
		gps_rxBufferPos = 0;
 80028fa:	4b0c      	ldr	r3, [pc, #48]	; (800292c <USART2_IRQHandler+0x94>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]
		if (gps_rxBuffer == gps_rxBuffer1) {gps_rxBuffer = gps_rxBuffer2;}
 8002900:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <USART2_IRQHandler+0x98>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a0d      	ldr	r2, [pc, #52]	; (800293c <USART2_IRQHandler+0xa4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d103      	bne.n	8002912 <USART2_IRQHandler+0x7a>
 800290a:	4b09      	ldr	r3, [pc, #36]	; (8002930 <USART2_IRQHandler+0x98>)
 800290c:	4a0c      	ldr	r2, [pc, #48]	; (8002940 <USART2_IRQHandler+0xa8>)
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	e002      	b.n	8002918 <USART2_IRQHandler+0x80>
		else {gps_rxBuffer = gps_rxBuffer1;}
 8002912:	4b07      	ldr	r3, [pc, #28]	; (8002930 <USART2_IRQHandler+0x98>)
 8002914:	4a09      	ldr	r2, [pc, #36]	; (800293c <USART2_IRQHandler+0xa4>)
 8002916:	601a      	str	r2, [r3, #0]

	//HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
	//rchar = huart2.Instance->RDR;

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002918:	4803      	ldr	r0, [pc, #12]	; (8002928 <USART2_IRQHandler+0x90>)
 800291a:	f008 fef5 	bl	800b708 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	//ATOMIC_SET_BIT(huart2.Instance->CR3, USART_CR3_EIE);
  /* USER CODE END USART2_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	200005e4 	.word	0x200005e4
 800292c:	20000d78 	.word	0x20000d78
 8002930:	20000d74 	.word	0x20000d74
 8002934:	20000008 	.word	0x20000008
 8002938:	20000d7c 	.word	0x20000d7c
 800293c:	20000734 	.word	0x20000734
 8002940:	20000a54 	.word	0x20000a54

08002944 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002948:	4802      	ldr	r0, [pc, #8]	; (8002954 <OTG_FS_IRQHandler+0x10>)
 800294a:	f001 f97c 	bl	8003c46 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20002274 	.word	0x20002274

08002958 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <SystemInit+0x20>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002962:	4a05      	ldr	r2, [pc, #20]	; (8002978 <SystemInit+0x20>)
 8002964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800297c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002980:	f7ff ffea 	bl	8002958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002984:	480c      	ldr	r0, [pc, #48]	; (80029b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002986:	490d      	ldr	r1, [pc, #52]	; (80029bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002988:	4a0d      	ldr	r2, [pc, #52]	; (80029c0 <LoopForever+0xe>)
  movs r3, #0
 800298a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800298c:	e002      	b.n	8002994 <LoopCopyDataInit>

0800298e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800298e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002992:	3304      	adds	r3, #4

08002994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002998:	d3f9      	bcc.n	800298e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800299a:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800299c:	4c0a      	ldr	r4, [pc, #40]	; (80029c8 <LoopForever+0x16>)
  movs r3, #0
 800299e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029a0:	e001      	b.n	80029a6 <LoopFillZerobss>

080029a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a4:	3204      	adds	r2, #4

080029a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029a8:	d3fb      	bcc.n	80029a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029aa:	f00e fe05 	bl	80115b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029ae:	f7fe ffcf 	bl	8001950 <main>

080029b2 <LoopForever>:

LoopForever:
    b LoopForever
 80029b2:	e7fe      	b.n	80029b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80029b4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80029b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029bc:	2000035c 	.word	0x2000035c
  ldr r2, =_sidata
 80029c0:	08014698 	.word	0x08014698
  ldr r2, =_sbss
 80029c4:	2000035c 	.word	0x2000035c
  ldr r4, =_ebss
 80029c8:	200029b4 	.word	0x200029b4

080029cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029cc:	e7fe      	b.n	80029cc <ADC1_IRQHandler>

080029ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029d4:	2300      	movs	r3, #0
 80029d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029d8:	2003      	movs	r0, #3
 80029da:	f000 f961 	bl	8002ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029de:	200f      	movs	r0, #15
 80029e0:	f000 f80e 	bl	8002a00 <HAL_InitTick>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	71fb      	strb	r3, [r7, #7]
 80029ee:	e001      	b.n	80029f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029f0:	f7ff fc7e 	bl	80022f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029f4:	79fb      	ldrb	r3, [r7, #7]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002a0c:	4b17      	ldr	r3, [pc, #92]	; (8002a6c <HAL_InitTick+0x6c>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d023      	beq.n	8002a5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002a14:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <HAL_InitTick+0x70>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <HAL_InitTick+0x6c>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 f96d 	bl	8002d0a <HAL_SYSTICK_Config>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10f      	bne.n	8002a56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b0f      	cmp	r3, #15
 8002a3a:	d809      	bhi.n	8002a50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a44:	f000 f937 	bl	8002cb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a48:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <HAL_InitTick+0x74>)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	e007      	b.n	8002a60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	73fb      	strb	r3, [r7, #15]
 8002a54:	e004      	b.n	8002a60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
 8002a5a:	e001      	b.n	8002a60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000014 	.word	0x20000014
 8002a70:	2000000c 	.word	0x2000000c
 8002a74:	20000010 	.word	0x20000010

08002a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a7c:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_IncTick+0x20>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	461a      	mov	r2, r3
 8002a82:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_IncTick+0x24>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4413      	add	r3, r2
 8002a88:	4a04      	ldr	r2, [pc, #16]	; (8002a9c <HAL_IncTick+0x24>)
 8002a8a:	6013      	str	r3, [r2, #0]
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	20000014 	.word	0x20000014
 8002a9c:	20000d84 	.word	0x20000d84

08002aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa4:	4b03      	ldr	r3, [pc, #12]	; (8002ab4 <HAL_GetTick+0x14>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20000d84 	.word	0x20000d84

08002ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ac0:	f7ff ffee 	bl	8002aa0 <HAL_GetTick>
 8002ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ad0:	d005      	beq.n	8002ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <HAL_Delay+0x44>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4413      	add	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ade:	bf00      	nop
 8002ae0:	f7ff ffde 	bl	8002aa0 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d8f7      	bhi.n	8002ae0 <HAL_Delay+0x28>
  {
  }
}
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20000014 	.word	0x20000014

08002b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <__NVIC_SetPriorityGrouping+0x44>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b32:	4a04      	ldr	r2, [pc, #16]	; (8002b44 <__NVIC_SetPriorityGrouping+0x44>)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	60d3      	str	r3, [r2, #12]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b4c:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <__NVIC_GetPriorityGrouping+0x18>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	0a1b      	lsrs	r3, r3, #8
 8002b52:	f003 0307 	and.w	r3, r3, #7
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	db0b      	blt.n	8002b8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	f003 021f 	and.w	r2, r3, #31
 8002b7c:	4907      	ldr	r1, [pc, #28]	; (8002b9c <__NVIC_EnableIRQ+0x38>)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	2001      	movs	r0, #1
 8002b86:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	e000e100 	.word	0xe000e100

08002ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	6039      	str	r1, [r7, #0]
 8002baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	db0a      	blt.n	8002bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	490c      	ldr	r1, [pc, #48]	; (8002bec <__NVIC_SetPriority+0x4c>)
 8002bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbe:	0112      	lsls	r2, r2, #4
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bc8:	e00a      	b.n	8002be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	4908      	ldr	r1, [pc, #32]	; (8002bf0 <__NVIC_SetPriority+0x50>)
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	3b04      	subs	r3, #4
 8002bd8:	0112      	lsls	r2, r2, #4
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	440b      	add	r3, r1
 8002bde:	761a      	strb	r2, [r3, #24]
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	e000e100 	.word	0xe000e100
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b089      	sub	sp, #36	; 0x24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f1c3 0307 	rsb	r3, r3, #7
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	bf28      	it	cs
 8002c12:	2304      	movcs	r3, #4
 8002c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	2b06      	cmp	r3, #6
 8002c1c:	d902      	bls.n	8002c24 <NVIC_EncodePriority+0x30>
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	3b03      	subs	r3, #3
 8002c22:	e000      	b.n	8002c26 <NVIC_EncodePriority+0x32>
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43da      	mvns	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	401a      	ands	r2, r3
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	fa01 f303 	lsl.w	r3, r1, r3
 8002c46:	43d9      	mvns	r1, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c4c:	4313      	orrs	r3, r2
         );
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3724      	adds	r7, #36	; 0x24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c6c:	d301      	bcc.n	8002c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e00f      	b.n	8002c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c72:	4a0a      	ldr	r2, [pc, #40]	; (8002c9c <SysTick_Config+0x40>)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c7a:	210f      	movs	r1, #15
 8002c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c80:	f7ff ff8e 	bl	8002ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <SysTick_Config+0x40>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c8a:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <SysTick_Config+0x40>)
 8002c8c:	2207      	movs	r2, #7
 8002c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	e000e010 	.word	0xe000e010

08002ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7ff ff29 	bl	8002b00 <__NVIC_SetPriorityGrouping>
}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b086      	sub	sp, #24
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cc8:	f7ff ff3e 	bl	8002b48 <__NVIC_GetPriorityGrouping>
 8002ccc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	68b9      	ldr	r1, [r7, #8]
 8002cd2:	6978      	ldr	r0, [r7, #20]
 8002cd4:	f7ff ff8e 	bl	8002bf4 <NVIC_EncodePriority>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cde:	4611      	mov	r1, r2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ff5d 	bl	8002ba0 <__NVIC_SetPriority>
}
 8002ce6:	bf00      	nop
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff ff31 	bl	8002b64 <__NVIC_EnableIRQ>
}
 8002d02:	bf00      	nop
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff ffa2 	bl	8002c5c <SysTick_Config>
 8002d18:	4603      	mov	r3, r0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e08d      	b.n	8002e52 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	4b47      	ldr	r3, [pc, #284]	; (8002e5c <HAL_DMA_Init+0x138>)
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d80f      	bhi.n	8002d62 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	461a      	mov	r2, r3
 8002d48:	4b45      	ldr	r3, [pc, #276]	; (8002e60 <HAL_DMA_Init+0x13c>)
 8002d4a:	4413      	add	r3, r2
 8002d4c:	4a45      	ldr	r2, [pc, #276]	; (8002e64 <HAL_DMA_Init+0x140>)
 8002d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d52:	091b      	lsrs	r3, r3, #4
 8002d54:	009a      	lsls	r2, r3, #2
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a42      	ldr	r2, [pc, #264]	; (8002e68 <HAL_DMA_Init+0x144>)
 8002d5e:	641a      	str	r2, [r3, #64]	; 0x40
 8002d60:	e00e      	b.n	8002d80 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	4b40      	ldr	r3, [pc, #256]	; (8002e6c <HAL_DMA_Init+0x148>)
 8002d6a:	4413      	add	r3, r2
 8002d6c:	4a3d      	ldr	r2, [pc, #244]	; (8002e64 <HAL_DMA_Init+0x140>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	091b      	lsrs	r3, r3, #4
 8002d74:	009a      	lsls	r2, r3, #2
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a3c      	ldr	r2, [pc, #240]	; (8002e70 <HAL_DMA_Init+0x14c>)
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002da4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002db0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fa72 	bl	80032bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002de0:	d102      	bne.n	8002de8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002dfc:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d010      	beq.n	8002e28 <HAL_DMA_Init+0x104>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d80c      	bhi.n	8002e28 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fa92 	bl	8003338 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	e008      	b.n	8002e3a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40020407 	.word	0x40020407
 8002e60:	bffdfff8 	.word	0xbffdfff8
 8002e64:	cccccccd 	.word	0xcccccccd
 8002e68:	40020000 	.word	0x40020000
 8002e6c:	bffdfbf8 	.word	0xbffdfbf8
 8002e70:	40020400 	.word	0x40020400

08002e74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
 8002e80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_DMA_Start_IT+0x20>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e066      	b.n	8002f62 <HAL_DMA_Start_IT+0xee>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d155      	bne.n	8002f54 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0201 	bic.w	r2, r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	68b9      	ldr	r1, [r7, #8]
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 f9b6 	bl	800323e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d008      	beq.n	8002eec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 020e 	orr.w	r2, r2, #14
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	e00f      	b.n	8002f0c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0204 	bic.w	r2, r2, #4
 8002efa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 020a 	orr.w	r2, r2, #10
 8002f0a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d007      	beq.n	8002f2a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f28:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d007      	beq.n	8002f42 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f40:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0201 	orr.w	r2, r2, #1
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	e005      	b.n	8002f60 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b085      	sub	sp, #20
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d008      	beq.n	8002f94 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2204      	movs	r2, #4
 8002f86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e040      	b.n	8003016 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 020e 	bic.w	r2, r2, #14
 8002fa2:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fb2:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0201 	bic.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc8:	f003 021c 	and.w	r2, r3, #28
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd6:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fe0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00c      	beq.n	8003004 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ff8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003002:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003014:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b084      	sub	sp, #16
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d005      	beq.n	8003046 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2204      	movs	r2, #4
 800303e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	73fb      	strb	r3, [r7, #15]
 8003044:	e047      	b.n	80030d6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 020e 	bic.w	r2, r2, #14
 8003054:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0201 	bic.w	r2, r2, #1
 8003064:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003070:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003074:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	f003 021c 	and.w	r2, r3, #28
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	2101      	movs	r1, #1
 8003084:	fa01 f202 	lsl.w	r2, r1, r2
 8003088:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003092:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00c      	beq.n	80030b6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80030b4:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	4798      	blx	r3
    }
  }
  return status;
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fc:	f003 031c 	and.w	r3, r3, #28
 8003100:	2204      	movs	r2, #4
 8003102:	409a      	lsls	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4013      	ands	r3, r2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d026      	beq.n	800315a <HAL_DMA_IRQHandler+0x7a>
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	2b00      	cmp	r3, #0
 8003114:	d021      	beq.n	800315a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b00      	cmp	r3, #0
 8003122:	d107      	bne.n	8003134 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0204 	bic.w	r2, r2, #4
 8003132:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003138:	f003 021c 	and.w	r2, r3, #28
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	2104      	movs	r1, #4
 8003142:	fa01 f202 	lsl.w	r2, r1, r2
 8003146:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	2b00      	cmp	r3, #0
 800314e:	d071      	beq.n	8003234 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003158:	e06c      	b.n	8003234 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	f003 031c 	and.w	r3, r3, #28
 8003162:	2202      	movs	r2, #2
 8003164:	409a      	lsls	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4013      	ands	r3, r2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d02e      	beq.n	80031cc <HAL_DMA_IRQHandler+0xec>
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d029      	beq.n	80031cc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10b      	bne.n	800319e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 020a 	bic.w	r2, r2, #10
 8003194:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	f003 021c 	and.w	r2, r3, #28
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	2102      	movs	r1, #2
 80031ac:	fa01 f202 	lsl.w	r2, r1, r2
 80031b0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d038      	beq.n	8003234 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80031ca:	e033      	b.n	8003234 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d0:	f003 031c 	and.w	r3, r3, #28
 80031d4:	2208      	movs	r2, #8
 80031d6:	409a      	lsls	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4013      	ands	r3, r2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d02a      	beq.n	8003236 <HAL_DMA_IRQHandler+0x156>
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d025      	beq.n	8003236 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 020e 	bic.w	r2, r2, #14
 80031f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	f003 021c 	and.w	r2, r3, #28
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	2101      	movs	r1, #1
 8003208:	fa01 f202 	lsl.w	r2, r1, r2
 800320c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003228:	2b00      	cmp	r3, #0
 800322a:	d004      	beq.n	8003236 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003234:	bf00      	nop
 8003236:	bf00      	nop
}
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800323e:	b480      	push	{r7}
 8003240:	b085      	sub	sp, #20
 8003242:	af00      	add	r7, sp, #0
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003254:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325a:	2b00      	cmp	r3, #0
 800325c:	d004      	beq.n	8003268 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003266:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326c:	f003 021c 	and.w	r2, r3, #28
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	2101      	movs	r1, #1
 8003276:	fa01 f202 	lsl.w	r2, r1, r2
 800327a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b10      	cmp	r3, #16
 800328a:	d108      	bne.n	800329e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800329c:	e007      	b.n	80032ae <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	60da      	str	r2, [r3, #12]
}
 80032ae:	bf00      	nop
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	461a      	mov	r2, r3
 80032ca:	4b17      	ldr	r3, [pc, #92]	; (8003328 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d80a      	bhi.n	80032e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d4:	089b      	lsrs	r3, r3, #2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032dc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6493      	str	r3, [r2, #72]	; 0x48
 80032e4:	e007      	b.n	80032f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	089b      	lsrs	r3, r3, #2
 80032ec:	009a      	lsls	r2, r3, #2
 80032ee:	4b0f      	ldr	r3, [pc, #60]	; (800332c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80032f0:	4413      	add	r3, r2
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	3b08      	subs	r3, #8
 80032fe:	4a0c      	ldr	r2, [pc, #48]	; (8003330 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003300:	fba2 2303 	umull	r2, r3, r2, r3
 8003304:	091b      	lsrs	r3, r3, #4
 8003306:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a0a      	ldr	r2, [pc, #40]	; (8003334 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800330c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f003 031f 	and.w	r3, r3, #31
 8003314:	2201      	movs	r2, #1
 8003316:	409a      	lsls	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800331c:	bf00      	nop
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	40020407 	.word	0x40020407
 800332c:	4002081c 	.word	0x4002081c
 8003330:	cccccccd 	.word	0xcccccccd
 8003334:	40020880 	.word	0x40020880

08003338 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800334c:	4413      	add	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	461a      	mov	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a08      	ldr	r2, [pc, #32]	; (800337c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800335a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	3b01      	subs	r3, #1
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	2201      	movs	r2, #1
 8003366:	409a      	lsls	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800336c:	bf00      	nop
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	1000823f 	.word	0x1000823f
 800337c:	40020940 	.word	0x40020940

08003380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003380:	b480      	push	{r7}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800338e:	e166      	b.n	800365e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	2101      	movs	r1, #1
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	fa01 f303 	lsl.w	r3, r1, r3
 800339c:	4013      	ands	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 8158 	beq.w	8003658 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f003 0303 	and.w	r3, r3, #3
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d005      	beq.n	80033c0 <HAL_GPIO_Init+0x40>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d130      	bne.n	8003422 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	2203      	movs	r2, #3
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	43db      	mvns	r3, r3
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4013      	ands	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033f6:	2201      	movs	r2, #1
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43db      	mvns	r3, r3
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4013      	ands	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	091b      	lsrs	r3, r3, #4
 800340c:	f003 0201 	and.w	r2, r3, #1
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	2b03      	cmp	r3, #3
 800342c:	d017      	beq.n	800345e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	2203      	movs	r2, #3
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43db      	mvns	r3, r3
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4013      	ands	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d123      	bne.n	80034b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	08da      	lsrs	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3208      	adds	r2, #8
 8003472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003476:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	220f      	movs	r2, #15
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43db      	mvns	r3, r3
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4013      	ands	r3, r2
 800348c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	691a      	ldr	r2, [r3, #16]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	08da      	lsrs	r2, r3, #3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3208      	adds	r2, #8
 80034ac:	6939      	ldr	r1, [r7, #16]
 80034ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	2203      	movs	r2, #3
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4013      	ands	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f003 0203 	and.w	r2, r3, #3
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 80b2 	beq.w	8003658 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034f4:	4b61      	ldr	r3, [pc, #388]	; (800367c <HAL_GPIO_Init+0x2fc>)
 80034f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f8:	4a60      	ldr	r2, [pc, #384]	; (800367c <HAL_GPIO_Init+0x2fc>)
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	6613      	str	r3, [r2, #96]	; 0x60
 8003500:	4b5e      	ldr	r3, [pc, #376]	; (800367c <HAL_GPIO_Init+0x2fc>)
 8003502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	60bb      	str	r3, [r7, #8]
 800350a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800350c:	4a5c      	ldr	r2, [pc, #368]	; (8003680 <HAL_GPIO_Init+0x300>)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	089b      	lsrs	r3, r3, #2
 8003512:	3302      	adds	r3, #2
 8003514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003518:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f003 0303 	and.w	r3, r3, #3
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	220f      	movs	r2, #15
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	43db      	mvns	r3, r3
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4013      	ands	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003536:	d02b      	beq.n	8003590 <HAL_GPIO_Init+0x210>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a52      	ldr	r2, [pc, #328]	; (8003684 <HAL_GPIO_Init+0x304>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d025      	beq.n	800358c <HAL_GPIO_Init+0x20c>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a51      	ldr	r2, [pc, #324]	; (8003688 <HAL_GPIO_Init+0x308>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d01f      	beq.n	8003588 <HAL_GPIO_Init+0x208>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a50      	ldr	r2, [pc, #320]	; (800368c <HAL_GPIO_Init+0x30c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d019      	beq.n	8003584 <HAL_GPIO_Init+0x204>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a4f      	ldr	r2, [pc, #316]	; (8003690 <HAL_GPIO_Init+0x310>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d013      	beq.n	8003580 <HAL_GPIO_Init+0x200>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a4e      	ldr	r2, [pc, #312]	; (8003694 <HAL_GPIO_Init+0x314>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d00d      	beq.n	800357c <HAL_GPIO_Init+0x1fc>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a4d      	ldr	r2, [pc, #308]	; (8003698 <HAL_GPIO_Init+0x318>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d007      	beq.n	8003578 <HAL_GPIO_Init+0x1f8>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a4c      	ldr	r2, [pc, #304]	; (800369c <HAL_GPIO_Init+0x31c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d101      	bne.n	8003574 <HAL_GPIO_Init+0x1f4>
 8003570:	2307      	movs	r3, #7
 8003572:	e00e      	b.n	8003592 <HAL_GPIO_Init+0x212>
 8003574:	2308      	movs	r3, #8
 8003576:	e00c      	b.n	8003592 <HAL_GPIO_Init+0x212>
 8003578:	2306      	movs	r3, #6
 800357a:	e00a      	b.n	8003592 <HAL_GPIO_Init+0x212>
 800357c:	2305      	movs	r3, #5
 800357e:	e008      	b.n	8003592 <HAL_GPIO_Init+0x212>
 8003580:	2304      	movs	r3, #4
 8003582:	e006      	b.n	8003592 <HAL_GPIO_Init+0x212>
 8003584:	2303      	movs	r3, #3
 8003586:	e004      	b.n	8003592 <HAL_GPIO_Init+0x212>
 8003588:	2302      	movs	r3, #2
 800358a:	e002      	b.n	8003592 <HAL_GPIO_Init+0x212>
 800358c:	2301      	movs	r3, #1
 800358e:	e000      	b.n	8003592 <HAL_GPIO_Init+0x212>
 8003590:	2300      	movs	r3, #0
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	f002 0203 	and.w	r2, r2, #3
 8003598:	0092      	lsls	r2, r2, #2
 800359a:	4093      	lsls	r3, r2
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035a2:	4937      	ldr	r1, [pc, #220]	; (8003680 <HAL_GPIO_Init+0x300>)
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	089b      	lsrs	r3, r3, #2
 80035a8:	3302      	adds	r3, #2
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035b0:	4b3b      	ldr	r3, [pc, #236]	; (80036a0 <HAL_GPIO_Init+0x320>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	43db      	mvns	r3, r3
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4013      	ands	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035d4:	4a32      	ldr	r2, [pc, #200]	; (80036a0 <HAL_GPIO_Init+0x320>)
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035da:	4b31      	ldr	r3, [pc, #196]	; (80036a0 <HAL_GPIO_Init+0x320>)
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	43db      	mvns	r3, r3
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4013      	ands	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035fe:	4a28      	ldr	r2, [pc, #160]	; (80036a0 <HAL_GPIO_Init+0x320>)
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003604:	4b26      	ldr	r3, [pc, #152]	; (80036a0 <HAL_GPIO_Init+0x320>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	43db      	mvns	r3, r3
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	4013      	ands	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4313      	orrs	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003628:	4a1d      	ldr	r2, [pc, #116]	; (80036a0 <HAL_GPIO_Init+0x320>)
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800362e:	4b1c      	ldr	r3, [pc, #112]	; (80036a0 <HAL_GPIO_Init+0x320>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	43db      	mvns	r3, r3
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4013      	ands	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4313      	orrs	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003652:	4a13      	ldr	r2, [pc, #76]	; (80036a0 <HAL_GPIO_Init+0x320>)
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	3301      	adds	r3, #1
 800365c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	fa22 f303 	lsr.w	r3, r2, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	f47f ae91 	bne.w	8003390 <HAL_GPIO_Init+0x10>
  }
}
 800366e:	bf00      	nop
 8003670:	bf00      	nop
 8003672:	371c      	adds	r7, #28
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	40021000 	.word	0x40021000
 8003680:	40010000 	.word	0x40010000
 8003684:	48000400 	.word	0x48000400
 8003688:	48000800 	.word	0x48000800
 800368c:	48000c00 	.word	0x48000c00
 8003690:	48001000 	.word	0x48001000
 8003694:	48001400 	.word	0x48001400
 8003698:	48001800 	.word	0x48001800
 800369c:	48001c00 	.word	0x48001c00
 80036a0:	40010400 	.word	0x40010400

080036a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	887b      	ldrh	r3, [r7, #2]
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036bc:	2301      	movs	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]
 80036c0:	e001      	b.n	80036c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036c2:	2300      	movs	r3, #0
 80036c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	807b      	strh	r3, [r7, #2]
 80036e0:	4613      	mov	r3, r2
 80036e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036e4:	787b      	ldrb	r3, [r7, #1]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036ea:	887a      	ldrh	r2, [r7, #2]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036f0:	e002      	b.n	80036f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036f2:	887a      	ldrh	r2, [r7, #2]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003716:	887a      	ldrh	r2, [r7, #2]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4013      	ands	r3, r2
 800371c:	041a      	lsls	r2, r3, #16
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	43d9      	mvns	r1, r3
 8003722:	887b      	ldrh	r3, [r7, #2]
 8003724:	400b      	ands	r3, r1
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	619a      	str	r2, [r3, #24]
}
 800372c:	bf00      	nop
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e081      	b.n	800384e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d106      	bne.n	8003764 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7fe fdea 	bl	8002338 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2224      	movs	r2, #36	; 0x24
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0201 	bic.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003788:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003798:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d107      	bne.n	80037b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037ae:	609a      	str	r2, [r3, #8]
 80037b0:	e006      	b.n	80037c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80037be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d104      	bne.n	80037d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6812      	ldr	r2, [r2, #0]
 80037dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69d9      	ldr	r1, [r3, #28]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1a      	ldr	r2, [r3, #32]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2220      	movs	r2, #32
 800383a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003864:	b2db      	uxtb	r3, r3
}
 8003866:	4618      	mov	r0, r3
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b20      	cmp	r3, #32
 8003886:	d138      	bne.n	80038fa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800388e:	2b01      	cmp	r3, #1
 8003890:	d101      	bne.n	8003896 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003892:	2302      	movs	r3, #2
 8003894:	e032      	b.n	80038fc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2224      	movs	r2, #36	; 0x24
 80038a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0201 	bic.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038c4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6819      	ldr	r1, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0201 	orr.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	e000      	b.n	80038fc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038fa:	2302      	movs	r3, #2
  }
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b20      	cmp	r3, #32
 800391c:	d139      	bne.n	8003992 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003928:	2302      	movs	r3, #2
 800392a:	e033      	b.n	8003994 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2224      	movs	r2, #36	; 0x24
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0201 	bic.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800395a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	021b      	lsls	r3, r3, #8
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	4313      	orrs	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f042 0201 	orr.w	r2, r2, #1
 800397c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	e000      	b.n	8003994 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003992:	2302      	movs	r3, #2
  }
}
 8003994:	4618      	mov	r0, r3
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039a2:	b08f      	sub	sp, #60	; 0x3c
 80039a4:	af0a      	add	r7, sp, #40	; 0x28
 80039a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e116      	b.n	8003be0 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d106      	bne.n	80039d2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f00d fa0f 	bl	8010df0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2203      	movs	r2, #3
 80039d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d102      	bne.n	80039ec <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f009 fefa 	bl	800d7ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	603b      	str	r3, [r7, #0]
 80039fc:	687e      	ldr	r6, [r7, #4]
 80039fe:	466d      	mov	r5, sp
 8003a00:	f106 0410 	add.w	r4, r6, #16
 8003a04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a10:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a14:	1d33      	adds	r3, r6, #4
 8003a16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a18:	6838      	ldr	r0, [r7, #0]
 8003a1a:	f009 fe0d 	bl	800d638 <USB_CoreInit>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0d7      	b.n	8003be0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2100      	movs	r1, #0
 8003a36:	4618      	mov	r0, r3
 8003a38:	f009 fee8 	bl	800d80c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	73fb      	strb	r3, [r7, #15]
 8003a40:	e04a      	b.n	8003ad8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a42:	7bfa      	ldrb	r2, [r7, #15]
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	4613      	mov	r3, r2
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	440b      	add	r3, r1
 8003a50:	333d      	adds	r3, #61	; 0x3d
 8003a52:	2201      	movs	r2, #1
 8003a54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a56:	7bfa      	ldrb	r2, [r7, #15]
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	4413      	add	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	333c      	adds	r3, #60	; 0x3c
 8003a66:	7bfa      	ldrb	r2, [r7, #15]
 8003a68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a6a:	7bfa      	ldrb	r2, [r7, #15]
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	b298      	uxth	r0, r3
 8003a70:	6879      	ldr	r1, [r7, #4]
 8003a72:	4613      	mov	r3, r2
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	4413      	add	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	440b      	add	r3, r1
 8003a7c:	3344      	adds	r3, #68	; 0x44
 8003a7e:	4602      	mov	r2, r0
 8003a80:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a82:	7bfa      	ldrb	r2, [r7, #15]
 8003a84:	6879      	ldr	r1, [r7, #4]
 8003a86:	4613      	mov	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	440b      	add	r3, r1
 8003a90:	3340      	adds	r3, #64	; 0x40
 8003a92:	2200      	movs	r2, #0
 8003a94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a96:	7bfa      	ldrb	r2, [r7, #15]
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	4413      	add	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	3348      	adds	r3, #72	; 0x48
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003aaa:	7bfa      	ldrb	r2, [r7, #15]
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	334c      	adds	r3, #76	; 0x4c
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003abe:	7bfa      	ldrb	r2, [r7, #15]
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	440b      	add	r3, r1
 8003acc:	3354      	adds	r3, #84	; 0x54
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	73fb      	strb	r3, [r7, #15]
 8003ad8:	7bfa      	ldrb	r2, [r7, #15]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d3af      	bcc.n	8003a42 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	73fb      	strb	r3, [r7, #15]
 8003ae6:	e044      	b.n	8003b72 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ae8:	7bfa      	ldrb	r2, [r7, #15]
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	4413      	add	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003afa:	2200      	movs	r2, #0
 8003afc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003afe:	7bfa      	ldrb	r2, [r7, #15]
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	4413      	add	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	440b      	add	r3, r1
 8003b0c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003b10:	7bfa      	ldrb	r2, [r7, #15]
 8003b12:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b14:	7bfa      	ldrb	r2, [r7, #15]
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b26:	2200      	movs	r2, #0
 8003b28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b2a:	7bfa      	ldrb	r2, [r7, #15]
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	4413      	add	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	440b      	add	r3, r1
 8003b38:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b40:	7bfa      	ldrb	r2, [r7, #15]
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	4613      	mov	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b56:	7bfa      	ldrb	r2, [r7, #15]
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	4413      	add	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	440b      	add	r3, r1
 8003b64:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
 8003b72:	7bfa      	ldrb	r2, [r7, #15]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d3b5      	bcc.n	8003ae8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	603b      	str	r3, [r7, #0]
 8003b82:	687e      	ldr	r6, [r7, #4]
 8003b84:	466d      	mov	r5, sp
 8003b86:	f106 0410 	add.w	r4, r6, #16
 8003b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b96:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b9a:	1d33      	adds	r3, r6, #4
 8003b9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b9e:	6838      	ldr	r0, [r7, #0]
 8003ba0:	f009 fe80 	bl	800d8a4 <USB_DevInit>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d005      	beq.n	8003bb6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2202      	movs	r2, #2
 8003bae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e014      	b.n	8003be0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d102      	bne.n	8003bd4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f001 f882 	bl	8004cd8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f00a ff08 	bl	800e9ee <USB_DevDisconnect>

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003be8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_PCD_Start+0x1c>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e01c      	b.n	8003c3e <HAL_PCD_Start+0x56>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d105      	bne.n	8003c20 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c18:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f009 fdcf 	bl	800d7c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f00a febc 	bl	800e9ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c46:	b590      	push	{r4, r7, lr}
 8003c48:	b08d      	sub	sp, #52	; 0x34
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f00a ff7a 	bl	800eb56 <USB_GetMode>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f040 847e 	bne.w	8004566 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f00a fede 	bl	800ea30 <USB_ReadInterrupts>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 8474 	beq.w	8004564 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	0a1b      	lsrs	r3, r3, #8
 8003c86:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f00a fecb 	bl	800ea30 <USB_ReadInterrupts>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d107      	bne.n	8003cb4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695a      	ldr	r2, [r3, #20]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f002 0202 	and.w	r2, r2, #2
 8003cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f00a feb9 	bl	800ea30 <USB_ReadInterrupts>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	f003 0310 	and.w	r3, r3, #16
 8003cc4:	2b10      	cmp	r3, #16
 8003cc6:	d161      	bne.n	8003d8c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699a      	ldr	r2, [r3, #24]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0210 	bic.w	r2, r2, #16
 8003cd6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	f003 020f 	and.w	r2, r3, #15
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	4413      	add	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	0c5b      	lsrs	r3, r3, #17
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d124      	bne.n	8003d4e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d035      	beq.n	8003d7c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	091b      	lsrs	r3, r3, #4
 8003d18:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	461a      	mov	r2, r3
 8003d22:	6a38      	ldr	r0, [r7, #32]
 8003d24:	f00a fcf0 	bl	800e708 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	091b      	lsrs	r3, r3, #4
 8003d30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d34:	441a      	add	r2, r3
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	6a1a      	ldr	r2, [r3, #32]
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	091b      	lsrs	r3, r3, #4
 8003d42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d46:	441a      	add	r2, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	621a      	str	r2, [r3, #32]
 8003d4c:	e016      	b.n	8003d7c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	0c5b      	lsrs	r3, r3, #17
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	2b06      	cmp	r3, #6
 8003d58:	d110      	bne.n	8003d7c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d60:	2208      	movs	r2, #8
 8003d62:	4619      	mov	r1, r3
 8003d64:	6a38      	ldr	r0, [r7, #32]
 8003d66:	f00a fccf 	bl	800e708 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	6a1a      	ldr	r2, [r3, #32]
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	091b      	lsrs	r3, r3, #4
 8003d72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d76:	441a      	add	r2, r3
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699a      	ldr	r2, [r3, #24]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0210 	orr.w	r2, r2, #16
 8003d8a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f00a fe4d 	bl	800ea30 <USB_ReadInterrupts>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d9c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003da0:	f040 80a7 	bne.w	8003ef2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f00a fe52 	bl	800ea56 <USB_ReadDevAllOutEpInterrupt>
 8003db2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003db4:	e099      	b.n	8003eea <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 808e 	beq.w	8003ede <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	4611      	mov	r1, r2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f00a fe76 	bl	800eabe <USB_ReadDevOutEPInterrupt>
 8003dd2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00c      	beq.n	8003df8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dea:	461a      	mov	r2, r3
 8003dec:	2301      	movs	r3, #1
 8003dee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003df0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fe96 	bl	8004b24 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00c      	beq.n	8003e1c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0e:	461a      	mov	r2, r3
 8003e10:	2308      	movs	r3, #8
 8003e12:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003e14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 fed2 	bl	8004bc0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f003 0310 	and.w	r3, r3, #16
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d008      	beq.n	8003e38 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e32:	461a      	mov	r2, r3
 8003e34:	2310      	movs	r3, #16
 8003e36:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d030      	beq.n	8003ea4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4a:	2b80      	cmp	r3, #128	; 0x80
 8003e4c:	d109      	bne.n	8003e62 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	69fa      	ldr	r2, [r7, #28]
 8003e58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e60:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e64:	4613      	mov	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4413      	add	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	4413      	add	r3, r2
 8003e74:	3304      	adds	r3, #4
 8003e76:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	78db      	ldrb	r3, [r3, #3]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d108      	bne.n	8003e92 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2200      	movs	r2, #0
 8003e84:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f00d f8f3 	bl	8011078 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	f003 0320 	and.w	r3, r3, #32
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d008      	beq.n	8003ec0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eba:	461a      	mov	r2, r3
 8003ebc:	2320      	movs	r3, #32
 8003ebe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d009      	beq.n	8003ede <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003edc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee6:	085b      	lsrs	r3, r3, #1
 8003ee8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f47f af62 	bne.w	8003db6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f00a fd9a 	bl	800ea30 <USB_ReadInterrupts>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f06:	f040 80a4 	bne.w	8004052 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f00a fdbb 	bl	800ea8a <USB_ReadDevAllInEpInterrupt>
 8003f14:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003f1a:	e096      	b.n	800404a <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 808b 	beq.w	800403e <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	4611      	mov	r1, r2
 8003f32:	4618      	mov	r0, r3
 8003f34:	f00a fde1 	bl	800eafa <USB_ReadDevInEPInterrupt>
 8003f38:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d020      	beq.n	8003f86 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	69f9      	ldr	r1, [r7, #28]
 8003f60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f64:	4013      	ands	r3, r2
 8003f66:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f74:	461a      	mov	r2, r3
 8003f76:	2301      	movs	r3, #1
 8003f78:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	4619      	mov	r1, r3
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f00c ffe4 	bl	8010f4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d008      	beq.n	8003fa2 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	2308      	movs	r3, #8
 8003fa0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f003 0310 	and.w	r3, r3, #16
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb8:	461a      	mov	r2, r3
 8003fba:	2310      	movs	r3, #16
 8003fbc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d008      	beq.n	8003fda <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	2340      	movs	r3, #64	; 0x40
 8003fd8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d023      	beq.n	800402c <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003fe4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fe6:	6a38      	ldr	r0, [r7, #32]
 8003fe8:	f009 fda8 	bl	800db3c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fee:	4613      	mov	r3, r2
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	3338      	adds	r3, #56	; 0x38
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	78db      	ldrb	r3, [r3, #3]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d108      	bne.n	800401a <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	2200      	movs	r2, #0
 800400c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	b2db      	uxtb	r3, r3
 8004012:	4619      	mov	r1, r3
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f00d f841 	bl	801109c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	4413      	add	r3, r2
 8004022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004026:	461a      	mov	r2, r3
 8004028:	2302      	movs	r3, #2
 800402a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004032:	2b00      	cmp	r3, #0
 8004034:	d003      	beq.n	800403e <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004036:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 fcea 	bl	8004a12 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	3301      	adds	r3, #1
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004046:	085b      	lsrs	r3, r3, #1
 8004048:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800404a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404c:	2b00      	cmp	r3, #0
 800404e:	f47f af65 	bne.w	8003f1c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f00a fcea 	bl	800ea30 <USB_ReadInterrupts>
 800405c:	4603      	mov	r3, r0
 800405e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004062:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004066:	d122      	bne.n	80040ae <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	69fa      	ldr	r2, [r7, #28]
 8004072:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004076:	f023 0301 	bic.w	r3, r3, #1
 800407a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004082:	2b01      	cmp	r3, #1
 8004084:	d108      	bne.n	8004098 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800408e:	2100      	movs	r1, #0
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 fe45 	bl	8004d20 <HAL_PCDEx_LPM_Callback>
 8004096:	e002      	b.n	800409e <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f00c ffc5 	bl	8011028 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695a      	ldr	r2, [r3, #20]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80040ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f00a fcbc 	bl	800ea30 <USB_ReadInterrupts>
 80040b8:	4603      	mov	r3, r0
 80040ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040c2:	d112      	bne.n	80040ea <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d102      	bne.n	80040da <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f00c ff81 	bl	8010fdc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	695a      	ldr	r2, [r3, #20]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80040e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f00a fc9e 	bl	800ea30 <USB_ReadInterrupts>
 80040f4:	4603      	mov	r3, r0
 80040f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040fe:	d121      	bne.n	8004144 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695a      	ldr	r2, [r3, #20]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800410e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004116:	2b00      	cmp	r3, #0
 8004118:	d111      	bne.n	800413e <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004128:	089b      	lsrs	r3, r3, #2
 800412a:	f003 020f 	and.w	r2, r3, #15
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004134:	2101      	movs	r1, #1
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fdf2 	bl	8004d20 <HAL_PCDEx_LPM_Callback>
 800413c:	e002      	b.n	8004144 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f00c ff4c 	bl	8010fdc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4618      	mov	r0, r3
 800414a:	f00a fc71 	bl	800ea30 <USB_ReadInterrupts>
 800414e:	4603      	mov	r3, r0
 8004150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004158:	f040 80b5 	bne.w	80042c6 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	69fa      	ldr	r2, [r7, #28]
 8004166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800416a:	f023 0301 	bic.w	r3, r3, #1
 800416e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2110      	movs	r1, #16
 8004176:	4618      	mov	r0, r3
 8004178:	f009 fce0 	bl	800db3c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800417c:	2300      	movs	r3, #0
 800417e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004180:	e046      	b.n	8004210 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418e:	461a      	mov	r2, r3
 8004190:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004194:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	4413      	add	r3, r2
 800419e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041a6:	0151      	lsls	r1, r2, #5
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	440a      	add	r2, r1
 80041ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80041b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c2:	461a      	mov	r2, r3
 80041c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041c8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041da:	0151      	lsls	r1, r2, #5
 80041dc:	69fa      	ldr	r2, [r7, #28]
 80041de:	440a      	add	r2, r1
 80041e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80041ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041fa:	0151      	lsls	r1, r2, #5
 80041fc:	69fa      	ldr	r2, [r7, #28]
 80041fe:	440a      	add	r2, r1
 8004200:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004204:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004208:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800420a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800420c:	3301      	adds	r3, #1
 800420e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004216:	429a      	cmp	r2, r3
 8004218:	d3b3      	bcc.n	8004182 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	69fa      	ldr	r2, [r7, #28]
 8004224:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004228:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800422c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	2b00      	cmp	r3, #0
 8004234:	d016      	beq.n	8004264 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004240:	69fa      	ldr	r2, [r7, #28]
 8004242:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004246:	f043 030b 	orr.w	r3, r3, #11
 800424a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004256:	69fa      	ldr	r2, [r7, #28]
 8004258:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800425c:	f043 030b 	orr.w	r3, r3, #11
 8004260:	6453      	str	r3, [r2, #68]	; 0x44
 8004262:	e015      	b.n	8004290 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004272:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004276:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800427a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	69fa      	ldr	r2, [r7, #28]
 8004286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800428a:	f043 030b 	orr.w	r3, r3, #11
 800428e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	69fa      	ldr	r2, [r7, #28]
 800429a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800429e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80042a2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042ae:	4619      	mov	r1, r3
 80042b0:	4610      	mov	r0, r2
 80042b2:	f00a fc81 	bl	800ebb8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	695a      	ldr	r2, [r3, #20]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80042c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f00a fbb0 	bl	800ea30 <USB_ReadInterrupts>
 80042d0:	4603      	mov	r3, r0
 80042d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042da:	d124      	bne.n	8004326 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f00a fc46 	bl	800eb72 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f009 fca3 	bl	800dc36 <USB_GetDevSpeed>
 80042f0:	4603      	mov	r3, r0
 80042f2:	461a      	mov	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681c      	ldr	r4, [r3, #0]
 80042fc:	f001 fbd0 	bl	8005aa0 <HAL_RCC_GetHCLKFreq>
 8004300:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004306:	b2db      	uxtb	r3, r3
 8004308:	461a      	mov	r2, r3
 800430a:	4620      	mov	r0, r4
 800430c:	f009 f9c0 	bl	800d690 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f00c fe44 	bl	8010f9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695a      	ldr	r2, [r3, #20]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004324:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f00a fb80 	bl	800ea30 <USB_ReadInterrupts>
 8004330:	4603      	mov	r3, r0
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b08      	cmp	r3, #8
 8004338:	d10a      	bne.n	8004350 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f00c fe21 	bl	8010f82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695a      	ldr	r2, [r3, #20]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f002 0208 	and.w	r2, r2, #8
 800434e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f00a fb6b 	bl	800ea30 <USB_ReadInterrupts>
 800435a:	4603      	mov	r3, r0
 800435c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004360:	2b80      	cmp	r3, #128	; 0x80
 8004362:	d122      	bne.n	80043aa <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004370:	2301      	movs	r3, #1
 8004372:	627b      	str	r3, [r7, #36]	; 0x24
 8004374:	e014      	b.n	80043a0 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437a:	4613      	mov	r3, r2
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	4413      	add	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	440b      	add	r3, r1
 8004384:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d105      	bne.n	800439a <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	b2db      	uxtb	r3, r3
 8004392:	4619      	mov	r1, r3
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fb0b 	bl	80049b0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	3301      	adds	r3, #1
 800439e:	627b      	str	r3, [r7, #36]	; 0x24
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d3e5      	bcc.n	8004376 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f00a fb3e 	bl	800ea30 <USB_ReadInterrupts>
 80043b4:	4603      	mov	r3, r0
 80043b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043be:	d13b      	bne.n	8004438 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043c0:	2301      	movs	r3, #1
 80043c2:	627b      	str	r3, [r7, #36]	; 0x24
 80043c4:	e02b      	b.n	800441e <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043da:	4613      	mov	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	3340      	adds	r3, #64	; 0x40
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d115      	bne.n	8004418 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80043ec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	da12      	bge.n	8004418 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f6:	4613      	mov	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	333f      	adds	r3, #63	; 0x3f
 8004402:	2201      	movs	r2, #1
 8004404:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	b2db      	uxtb	r3, r3
 800440a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800440e:	b2db      	uxtb	r3, r3
 8004410:	4619      	mov	r1, r3
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 facc 	bl	80049b0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	3301      	adds	r3, #1
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004424:	429a      	cmp	r2, r3
 8004426:	d3ce      	bcc.n	80043c6 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	695a      	ldr	r2, [r3, #20]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004436:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f00a faf7 	bl	800ea30 <USB_ReadInterrupts>
 8004442:	4603      	mov	r3, r0
 8004444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004448:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800444c:	d155      	bne.n	80044fa <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800444e:	2301      	movs	r3, #1
 8004450:	627b      	str	r3, [r7, #36]	; 0x24
 8004452:	e045      	b.n	80044e0 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	4413      	add	r3, r2
 800445c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004464:	6879      	ldr	r1, [r7, #4]
 8004466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004468:	4613      	mov	r3, r2
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	4413      	add	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d12e      	bne.n	80044da <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800447c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800447e:	2b00      	cmp	r3, #0
 8004480:	da2b      	bge.n	80044da <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800448e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004492:	429a      	cmp	r2, r3
 8004494:	d121      	bne.n	80044da <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800449a:	4613      	mov	r3, r2
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	4413      	add	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	440b      	add	r3, r1
 80044a4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80044a8:	2201      	movs	r2, #1
 80044aa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10a      	bne.n	80044da <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044d6:	6053      	str	r3, [r2, #4]
            break;
 80044d8:	e007      	b.n	80044ea <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	3301      	adds	r3, #1
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d3b4      	bcc.n	8004454 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695a      	ldr	r2, [r3, #20]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80044f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f00a fa96 	bl	800ea30 <USB_ReadInterrupts>
 8004504:	4603      	mov	r3, r0
 8004506:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800450a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800450e:	d10a      	bne.n	8004526 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f00c fdd5 	bl	80110c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	695a      	ldr	r2, [r3, #20]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004524:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f00a fa80 	bl	800ea30 <USB_ReadInterrupts>
 8004530:	4603      	mov	r3, r0
 8004532:	f003 0304 	and.w	r3, r3, #4
 8004536:	2b04      	cmp	r3, #4
 8004538:	d115      	bne.n	8004566 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f00c fdc5 	bl	80110dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6859      	ldr	r1, [r3, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	430a      	orrs	r2, r1
 8004560:	605a      	str	r2, [r3, #4]
 8004562:	e000      	b.n	8004566 <HAL_PCD_IRQHandler+0x920>
      return;
 8004564:	bf00      	nop
    }
  }
}
 8004566:	3734      	adds	r7, #52	; 0x34
 8004568:	46bd      	mov	sp, r7
 800456a:	bd90      	pop	{r4, r7, pc}

0800456c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	460b      	mov	r3, r1
 8004576:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <HAL_PCD_SetAddress+0x1a>
 8004582:	2302      	movs	r3, #2
 8004584:	e013      	b.n	80045ae <HAL_PCD_SetAddress+0x42>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	78fa      	ldrb	r2, [r7, #3]
 8004592:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	78fa      	ldrb	r2, [r7, #3]
 800459c:	4611      	mov	r1, r2
 800459e:	4618      	mov	r0, r3
 80045a0:	f00a f9de 	bl	800e960 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b084      	sub	sp, #16
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	4608      	mov	r0, r1
 80045c0:	4611      	mov	r1, r2
 80045c2:	461a      	mov	r2, r3
 80045c4:	4603      	mov	r3, r0
 80045c6:	70fb      	strb	r3, [r7, #3]
 80045c8:	460b      	mov	r3, r1
 80045ca:	803b      	strh	r3, [r7, #0]
 80045cc:	4613      	mov	r3, r2
 80045ce:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	da0f      	bge.n	80045fc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045dc:	78fb      	ldrb	r3, [r7, #3]
 80045de:	f003 020f 	and.w	r2, r3, #15
 80045e2:	4613      	mov	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	4413      	add	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	3338      	adds	r3, #56	; 0x38
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	4413      	add	r3, r2
 80045f0:	3304      	adds	r3, #4
 80045f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2201      	movs	r2, #1
 80045f8:	705a      	strb	r2, [r3, #1]
 80045fa:	e00f      	b.n	800461c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045fc:	78fb      	ldrb	r3, [r7, #3]
 80045fe:	f003 020f 	and.w	r2, r3, #15
 8004602:	4613      	mov	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	4413      	add	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	4413      	add	r3, r2
 8004612:	3304      	adds	r3, #4
 8004614:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800461c:	78fb      	ldrb	r3, [r7, #3]
 800461e:	f003 030f 	and.w	r3, r3, #15
 8004622:	b2da      	uxtb	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004628:	883a      	ldrh	r2, [r7, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	78ba      	ldrb	r2, [r7, #2]
 8004632:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	785b      	ldrb	r3, [r3, #1]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d004      	beq.n	8004646 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004646:	78bb      	ldrb	r3, [r7, #2]
 8004648:	2b02      	cmp	r3, #2
 800464a:	d102      	bne.n	8004652 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_PCD_EP_Open+0xaa>
 800465c:	2302      	movs	r3, #2
 800465e:	e00e      	b.n	800467e <HAL_PCD_EP_Open+0xc8>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68f9      	ldr	r1, [r7, #12]
 800466e:	4618      	mov	r0, r3
 8004670:	f009 fb00 	bl	800dc74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800467c:	7afb      	ldrb	r3, [r7, #11]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	460b      	mov	r3, r1
 8004690:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004692:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004696:	2b00      	cmp	r3, #0
 8004698:	da0f      	bge.n	80046ba <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800469a:	78fb      	ldrb	r3, [r7, #3]
 800469c:	f003 020f 	and.w	r2, r3, #15
 80046a0:	4613      	mov	r3, r2
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4413      	add	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	3338      	adds	r3, #56	; 0x38
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	4413      	add	r3, r2
 80046ae:	3304      	adds	r3, #4
 80046b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2201      	movs	r2, #1
 80046b6:	705a      	strb	r2, [r3, #1]
 80046b8:	e00f      	b.n	80046da <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046ba:	78fb      	ldrb	r3, [r7, #3]
 80046bc:	f003 020f 	and.w	r2, r3, #15
 80046c0:	4613      	mov	r3, r2
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	4413      	add	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	4413      	add	r3, r2
 80046d0:	3304      	adds	r3, #4
 80046d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80046da:	78fb      	ldrb	r3, [r7, #3]
 80046dc:	f003 030f 	and.w	r3, r3, #15
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_PCD_EP_Close+0x6e>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e00e      	b.n	8004712 <HAL_PCD_EP_Close+0x8c>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68f9      	ldr	r1, [r7, #12]
 8004702:	4618      	mov	r0, r3
 8004704:	f009 fb3e 	bl	800dd84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b086      	sub	sp, #24
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	603b      	str	r3, [r7, #0]
 8004726:	460b      	mov	r3, r1
 8004728:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800472a:	7afb      	ldrb	r3, [r7, #11]
 800472c:	f003 020f 	and.w	r2, r3, #15
 8004730:	4613      	mov	r3, r2
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	4413      	add	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	4413      	add	r3, r2
 8004740:	3304      	adds	r3, #4
 8004742:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	2200      	movs	r2, #0
 8004754:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2200      	movs	r2, #0
 800475a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800475c:	7afb      	ldrb	r3, [r7, #11]
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	b2da      	uxtb	r2, r3
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004768:	7afb      	ldrb	r3, [r7, #11]
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	2b00      	cmp	r3, #0
 8004770:	d106      	bne.n	8004780 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6979      	ldr	r1, [r7, #20]
 8004778:	4618      	mov	r0, r3
 800477a:	f009 fdbf 	bl	800e2fc <USB_EP0StartXfer>
 800477e:	e005      	b.n	800478c <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6979      	ldr	r1, [r7, #20]
 8004786:	4618      	mov	r0, r3
 8004788:	f009 fbd8 	bl	800df3c <USB_EPStartXfer>
  }

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
 800479e:	460b      	mov	r3, r1
 80047a0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047a2:	78fb      	ldrb	r3, [r7, #3]
 80047a4:	f003 020f 	and.w	r2, r3, #15
 80047a8:	6879      	ldr	r1, [r7, #4]
 80047aa:	4613      	mov	r3, r2
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	4413      	add	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	440b      	add	r3, r1
 80047b4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80047b8:	681b      	ldr	r3, [r3, #0]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b086      	sub	sp, #24
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	607a      	str	r2, [r7, #4]
 80047d0:	603b      	str	r3, [r7, #0]
 80047d2:	460b      	mov	r3, r1
 80047d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047d6:	7afb      	ldrb	r3, [r7, #11]
 80047d8:	f003 020f 	and.w	r2, r3, #15
 80047dc:	4613      	mov	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	4413      	add	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	3338      	adds	r3, #56	; 0x38
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	4413      	add	r3, r2
 80047ea:	3304      	adds	r3, #4
 80047ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2200      	movs	r2, #0
 80047fe:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	2201      	movs	r2, #1
 8004804:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004806:	7afb      	ldrb	r3, [r7, #11]
 8004808:	f003 030f 	and.w	r3, r3, #15
 800480c:	b2da      	uxtb	r2, r3
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004812:	7afb      	ldrb	r3, [r7, #11]
 8004814:	f003 030f 	and.w	r3, r3, #15
 8004818:	2b00      	cmp	r3, #0
 800481a:	d106      	bne.n	800482a <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6979      	ldr	r1, [r7, #20]
 8004822:	4618      	mov	r0, r3
 8004824:	f009 fd6a 	bl	800e2fc <USB_EP0StartXfer>
 8004828:	e005      	b.n	8004836 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6979      	ldr	r1, [r7, #20]
 8004830:	4618      	mov	r0, r3
 8004832:	f009 fb83 	bl	800df3c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800484c:	78fb      	ldrb	r3, [r7, #3]
 800484e:	f003 020f 	and.w	r2, r3, #15
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	429a      	cmp	r2, r3
 8004858:	d901      	bls.n	800485e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e04e      	b.n	80048fc <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800485e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004862:	2b00      	cmp	r3, #0
 8004864:	da0f      	bge.n	8004886 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004866:	78fb      	ldrb	r3, [r7, #3]
 8004868:	f003 020f 	and.w	r2, r3, #15
 800486c:	4613      	mov	r3, r2
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	4413      	add	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	3338      	adds	r3, #56	; 0x38
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	4413      	add	r3, r2
 800487a:	3304      	adds	r3, #4
 800487c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2201      	movs	r2, #1
 8004882:	705a      	strb	r2, [r3, #1]
 8004884:	e00d      	b.n	80048a2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004886:	78fa      	ldrb	r2, [r7, #3]
 8004888:	4613      	mov	r3, r2
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4413      	add	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	4413      	add	r3, r2
 8004898:	3304      	adds	r3, #4
 800489a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2201      	movs	r2, #1
 80048a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048a8:	78fb      	ldrb	r3, [r7, #3]
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d101      	bne.n	80048c2 <HAL_PCD_EP_SetStall+0x82>
 80048be:	2302      	movs	r3, #2
 80048c0:	e01c      	b.n	80048fc <HAL_PCD_EP_SetStall+0xbc>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68f9      	ldr	r1, [r7, #12]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f009 ff71 	bl	800e7b8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048d6:	78fb      	ldrb	r3, [r7, #3]
 80048d8:	f003 030f 	and.w	r3, r3, #15
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d108      	bne.n	80048f2 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80048ea:	4619      	mov	r1, r3
 80048ec:	4610      	mov	r0, r2
 80048ee:	f00a f963 	bl	800ebb8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	460b      	mov	r3, r1
 800490e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004910:	78fb      	ldrb	r3, [r7, #3]
 8004912:	f003 020f 	and.w	r2, r3, #15
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	429a      	cmp	r2, r3
 800491c:	d901      	bls.n	8004922 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e042      	b.n	80049a8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004922:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004926:	2b00      	cmp	r3, #0
 8004928:	da0f      	bge.n	800494a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800492a:	78fb      	ldrb	r3, [r7, #3]
 800492c:	f003 020f 	and.w	r2, r3, #15
 8004930:	4613      	mov	r3, r2
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	4413      	add	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	3338      	adds	r3, #56	; 0x38
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	4413      	add	r3, r2
 800493e:	3304      	adds	r3, #4
 8004940:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2201      	movs	r2, #1
 8004946:	705a      	strb	r2, [r3, #1]
 8004948:	e00f      	b.n	800496a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800494a:	78fb      	ldrb	r3, [r7, #3]
 800494c:	f003 020f 	and.w	r2, r3, #15
 8004950:	4613      	mov	r3, r2
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	4413      	add	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	4413      	add	r3, r2
 8004960:	3304      	adds	r3, #4
 8004962:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004970:	78fb      	ldrb	r3, [r7, #3]
 8004972:	f003 030f 	and.w	r3, r3, #15
 8004976:	b2da      	uxtb	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004982:	2b01      	cmp	r3, #1
 8004984:	d101      	bne.n	800498a <HAL_PCD_EP_ClrStall+0x86>
 8004986:	2302      	movs	r3, #2
 8004988:	e00e      	b.n	80049a8 <HAL_PCD_EP_ClrStall+0xa4>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68f9      	ldr	r1, [r7, #12]
 8004998:	4618      	mov	r0, r3
 800499a:	f009 ff7b 	bl	800e894 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80049bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	da0c      	bge.n	80049de <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049c4:	78fb      	ldrb	r3, [r7, #3]
 80049c6:	f003 020f 	and.w	r2, r3, #15
 80049ca:	4613      	mov	r3, r2
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	4413      	add	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	3338      	adds	r3, #56	; 0x38
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	4413      	add	r3, r2
 80049d8:	3304      	adds	r3, #4
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	e00c      	b.n	80049f8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049de:	78fb      	ldrb	r3, [r7, #3]
 80049e0:	f003 020f 	and.w	r2, r3, #15
 80049e4:	4613      	mov	r3, r2
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	4413      	add	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	4413      	add	r3, r2
 80049f4:	3304      	adds	r3, #4
 80049f6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68f9      	ldr	r1, [r7, #12]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f009 fd9e 	bl	800e540 <USB_EPStopXfer>
 8004a04:	4603      	mov	r3, r0
 8004a06:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a08:	7afb      	ldrb	r3, [r7, #11]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b088      	sub	sp, #32
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	3338      	adds	r3, #56	; 0x38
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	4413      	add	r3, r2
 8004a36:	3304      	adds	r3, #4
 8004a38:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6a1a      	ldr	r2, [r3, #32]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d901      	bls.n	8004a4a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e067      	b.n	8004b1a <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	699a      	ldr	r2, [r3, #24]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	69fa      	ldr	r2, [r7, #28]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d902      	bls.n	8004a66 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	3303      	adds	r3, #3
 8004a6a:	089b      	lsrs	r3, r3, #2
 8004a6c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a6e:	e026      	b.n	8004abe <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	699a      	ldr	r2, [r3, #24]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	69fa      	ldr	r2, [r7, #28]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d902      	bls.n	8004a8c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	3303      	adds	r3, #3
 8004a90:	089b      	lsrs	r3, r3, #2
 8004a92:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6919      	ldr	r1, [r3, #16]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	6978      	ldr	r0, [r7, #20]
 8004aa2:	f009 fdf7 	bl	800e694 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	691a      	ldr	r2, [r3, #16]
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	441a      	add	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6a1a      	ldr	r2, [r3, #32]
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	441a      	add	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	015a      	lsls	r2, r3, #5
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d809      	bhi.n	8004ae8 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a1a      	ldr	r2, [r3, #32]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d203      	bcs.n	8004ae8 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1c3      	bne.n	8004a70 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	699a      	ldr	r2, [r3, #24]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d811      	bhi.n	8004b18 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	2201      	movs	r2, #1
 8004afc:	fa02 f303 	lsl.w	r3, r2, r3
 8004b00:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	6939      	ldr	r1, [r7, #16]
 8004b10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b14:	4013      	ands	r3, r2
 8004b16:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3720      	adds	r7, #32
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	333c      	adds	r3, #60	; 0x3c
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	4a19      	ldr	r2, [pc, #100]	; (8004bbc <PCD_EP_OutXfrComplete_int+0x98>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d124      	bne.n	8004ba4 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00a      	beq.n	8004b7a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b70:	461a      	mov	r2, r3
 8004b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b76:	6093      	str	r3, [r2, #8]
 8004b78:	e01a      	b.n	8004bb0 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	f003 0320 	and.w	r3, r3, #32
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d008      	beq.n	8004b96 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b90:	461a      	mov	r2, r3
 8004b92:	2320      	movs	r3, #32
 8004b94:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f00c f9bb 	bl	8010f18 <HAL_PCD_DataOutStageCallback>
 8004ba2:	e005      	b.n	8004bb0 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	4619      	mov	r1, r3
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f00c f9b4 	bl	8010f18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3718      	adds	r7, #24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	4f54310a 	.word	0x4f54310a

08004bc0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	333c      	adds	r3, #60	; 0x3c
 8004bd8:	3304      	adds	r3, #4
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4a0c      	ldr	r2, [pc, #48]	; (8004c24 <PCD_EP_OutSetupPacket_int+0x64>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d90e      	bls.n	8004c14 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d009      	beq.n	8004c14 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c12:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f00c f96d 	bl	8010ef4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3718      	adds	r7, #24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	4f54300a 	.word	0x4f54300a

08004c28 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	460b      	mov	r3, r1
 8004c32:	70fb      	strb	r3, [r7, #3]
 8004c34:	4613      	mov	r3, r2
 8004c36:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d107      	bne.n	8004c56 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004c46:	883b      	ldrh	r3, [r7, #0]
 8004c48:	0419      	lsls	r1, r3, #16
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	629a      	str	r2, [r3, #40]	; 0x28
 8004c54:	e028      	b.n	8004ca8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5c:	0c1b      	lsrs	r3, r3, #16
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	4413      	add	r3, r2
 8004c62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c64:	2300      	movs	r3, #0
 8004c66:	73fb      	strb	r3, [r7, #15]
 8004c68:	e00d      	b.n	8004c86 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
 8004c70:	3340      	adds	r3, #64	; 0x40
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	0c1b      	lsrs	r3, r3, #16
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
 8004c82:	3301      	adds	r3, #1
 8004c84:	73fb      	strb	r3, [r7, #15]
 8004c86:	7bfa      	ldrb	r2, [r7, #15]
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d3ec      	bcc.n	8004c6a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004c90:	883b      	ldrh	r3, [r7, #0]
 8004c92:	0418      	lsls	r0, r3, #16
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6819      	ldr	r1, [r3, #0]
 8004c98:	78fb      	ldrb	r3, [r7, #3]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	4302      	orrs	r2, r0
 8004ca0:	3340      	adds	r3, #64	; 0x40
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	887a      	ldrh	r2, [r7, #2]
 8004cc8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d0a:	f043 0303 	orr.w	r3, r3, #3
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d3c:	4b0d      	ldr	r3, [pc, #52]	; (8004d74 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d48:	d102      	bne.n	8004d50 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d4e:	e00b      	b.n	8004d68 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004d50:	4b08      	ldr	r3, [pc, #32]	; (8004d74 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d5e:	d102      	bne.n	8004d66 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d64:	e000      	b.n	8004d68 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004d66:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40007000 	.word	0x40007000

08004d78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d141      	bne.n	8004e0a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d86:	4b4b      	ldr	r3, [pc, #300]	; (8004eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d92:	d131      	bne.n	8004df8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d94:	4b47      	ldr	r3, [pc, #284]	; (8004eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d9a:	4a46      	ldr	r2, [pc, #280]	; (8004eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004da0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004da4:	4b43      	ldr	r3, [pc, #268]	; (8004eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004dac:	4a41      	ldr	r2, [pc, #260]	; (8004eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004db2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004db4:	4b40      	ldr	r3, [pc, #256]	; (8004eb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2232      	movs	r2, #50	; 0x32
 8004dba:	fb02 f303 	mul.w	r3, r2, r3
 8004dbe:	4a3f      	ldr	r2, [pc, #252]	; (8004ebc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc4:	0c9b      	lsrs	r3, r3, #18
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dca:	e002      	b.n	8004dd2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dd2:	4b38      	ldr	r3, [pc, #224]	; (8004eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dde:	d102      	bne.n	8004de6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f2      	bne.n	8004dcc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004de6:	4b33      	ldr	r3, [pc, #204]	; (8004eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004df2:	d158      	bne.n	8004ea6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e057      	b.n	8004ea8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004df8:	4b2e      	ldr	r3, [pc, #184]	; (8004eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dfe:	4a2d      	ldr	r2, [pc, #180]	; (8004eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004e08:	e04d      	b.n	8004ea6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e10:	d141      	bne.n	8004e96 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e12:	4b28      	ldr	r3, [pc, #160]	; (8004eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e1e:	d131      	bne.n	8004e84 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e20:	4b24      	ldr	r3, [pc, #144]	; (8004eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e26:	4a23      	ldr	r2, [pc, #140]	; (8004eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e30:	4b20      	ldr	r3, [pc, #128]	; (8004eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e38:	4a1e      	ldr	r2, [pc, #120]	; (8004eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004e40:	4b1d      	ldr	r3, [pc, #116]	; (8004eb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2232      	movs	r2, #50	; 0x32
 8004e46:	fb02 f303 	mul.w	r3, r2, r3
 8004e4a:	4a1c      	ldr	r2, [pc, #112]	; (8004ebc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e50:	0c9b      	lsrs	r3, r3, #18
 8004e52:	3301      	adds	r3, #1
 8004e54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e56:	e002      	b.n	8004e5e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e5e:	4b15      	ldr	r3, [pc, #84]	; (8004eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e6a:	d102      	bne.n	8004e72 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1f2      	bne.n	8004e58 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e72:	4b10      	ldr	r3, [pc, #64]	; (8004eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e7e:	d112      	bne.n	8004ea6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e011      	b.n	8004ea8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e84:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e8a:	4a0a      	ldr	r2, [pc, #40]	; (8004eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004e94:	e007      	b.n	8004ea6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e96:	4b07      	ldr	r3, [pc, #28]	; (8004eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e9e:	4a05      	ldr	r2, [pc, #20]	; (8004eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ea4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	40007000 	.word	0x40007000
 8004eb8:	2000000c 	.word	0x2000000c
 8004ebc:	431bde83 	.word	0x431bde83

08004ec0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004ec4:	4b05      	ldr	r3, [pc, #20]	; (8004edc <HAL_PWREx_EnableVddUSB+0x1c>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	4a04      	ldr	r2, [pc, #16]	; (8004edc <HAL_PWREx_EnableVddUSB+0x1c>)
 8004eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ece:	6053      	str	r3, [r2, #4]
}
 8004ed0:	bf00      	nop
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40007000 	.word	0x40007000

08004ee0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d102      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	f000 bc08 	b.w	8005704 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ef4:	4b96      	ldr	r3, [pc, #600]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f003 030c 	and.w	r3, r3, #12
 8004efc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004efe:	4b94      	ldr	r3, [pc, #592]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0310 	and.w	r3, r3, #16
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 80e4 	beq.w	80050de <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d007      	beq.n	8004f2c <HAL_RCC_OscConfig+0x4c>
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	2b0c      	cmp	r3, #12
 8004f20:	f040 808b 	bne.w	800503a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	f040 8087 	bne.w	800503a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f2c:	4b88      	ldr	r3, [pc, #544]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d005      	beq.n	8004f44 <HAL_RCC_OscConfig+0x64>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e3df      	b.n	8005704 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a1a      	ldr	r2, [r3, #32]
 8004f48:	4b81      	ldr	r3, [pc, #516]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0308 	and.w	r3, r3, #8
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d004      	beq.n	8004f5e <HAL_RCC_OscConfig+0x7e>
 8004f54:	4b7e      	ldr	r3, [pc, #504]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f5c:	e005      	b.n	8004f6a <HAL_RCC_OscConfig+0x8a>
 8004f5e:	4b7c      	ldr	r3, [pc, #496]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 8004f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f64:	091b      	lsrs	r3, r3, #4
 8004f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d223      	bcs.n	8004fb6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 fdf8 	bl	8005b68 <RCC_SetFlashLatencyFromMSIRange>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e3c0      	b.n	8005704 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f82:	4b73      	ldr	r3, [pc, #460]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a72      	ldr	r2, [pc, #456]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 8004f88:	f043 0308 	orr.w	r3, r3, #8
 8004f8c:	6013      	str	r3, [r2, #0]
 8004f8e:	4b70      	ldr	r3, [pc, #448]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	496d      	ldr	r1, [pc, #436]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fa0:	4b6b      	ldr	r3, [pc, #428]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	021b      	lsls	r3, r3, #8
 8004fae:	4968      	ldr	r1, [pc, #416]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	604b      	str	r3, [r1, #4]
 8004fb4:	e025      	b.n	8005002 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fb6:	4b66      	ldr	r3, [pc, #408]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a65      	ldr	r2, [pc, #404]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 8004fbc:	f043 0308 	orr.w	r3, r3, #8
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	4b63      	ldr	r3, [pc, #396]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	4960      	ldr	r1, [pc, #384]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fd4:	4b5e      	ldr	r3, [pc, #376]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	021b      	lsls	r3, r3, #8
 8004fe2:	495b      	ldr	r1, [pc, #364]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d109      	bne.n	8005002 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 fdb8 	bl	8005b68 <RCC_SetFlashLatencyFromMSIRange>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e380      	b.n	8005704 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005002:	f000 fcc1 	bl	8005988 <HAL_RCC_GetSysClockFreq>
 8005006:	4602      	mov	r2, r0
 8005008:	4b51      	ldr	r3, [pc, #324]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	091b      	lsrs	r3, r3, #4
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	4950      	ldr	r1, [pc, #320]	; (8005154 <HAL_RCC_OscConfig+0x274>)
 8005014:	5ccb      	ldrb	r3, [r1, r3]
 8005016:	f003 031f 	and.w	r3, r3, #31
 800501a:	fa22 f303 	lsr.w	r3, r2, r3
 800501e:	4a4e      	ldr	r2, [pc, #312]	; (8005158 <HAL_RCC_OscConfig+0x278>)
 8005020:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005022:	4b4e      	ldr	r3, [pc, #312]	; (800515c <HAL_RCC_OscConfig+0x27c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f7fd fcea 	bl	8002a00 <HAL_InitTick>
 800502c:	4603      	mov	r3, r0
 800502e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005030:	7bfb      	ldrb	r3, [r7, #15]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d052      	beq.n	80050dc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005036:	7bfb      	ldrb	r3, [r7, #15]
 8005038:	e364      	b.n	8005704 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d032      	beq.n	80050a8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005042:	4b43      	ldr	r3, [pc, #268]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a42      	ldr	r2, [pc, #264]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 8005048:	f043 0301 	orr.w	r3, r3, #1
 800504c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800504e:	f7fd fd27 	bl	8002aa0 <HAL_GetTick>
 8005052:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005054:	e008      	b.n	8005068 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005056:	f7fd fd23 	bl	8002aa0 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	2b02      	cmp	r3, #2
 8005062:	d901      	bls.n	8005068 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e34d      	b.n	8005704 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005068:	4b39      	ldr	r3, [pc, #228]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0f0      	beq.n	8005056 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005074:	4b36      	ldr	r3, [pc, #216]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a35      	ldr	r2, [pc, #212]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 800507a:	f043 0308 	orr.w	r3, r3, #8
 800507e:	6013      	str	r3, [r2, #0]
 8005080:	4b33      	ldr	r3, [pc, #204]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	4930      	ldr	r1, [pc, #192]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 800508e:	4313      	orrs	r3, r2
 8005090:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005092:	4b2f      	ldr	r3, [pc, #188]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	021b      	lsls	r3, r3, #8
 80050a0:	492b      	ldr	r1, [pc, #172]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	604b      	str	r3, [r1, #4]
 80050a6:	e01a      	b.n	80050de <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80050a8:	4b29      	ldr	r3, [pc, #164]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a28      	ldr	r2, [pc, #160]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 80050ae:	f023 0301 	bic.w	r3, r3, #1
 80050b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80050b4:	f7fd fcf4 	bl	8002aa0 <HAL_GetTick>
 80050b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050bc:	f7fd fcf0 	bl	8002aa0 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e31a      	b.n	8005704 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80050ce:	4b20      	ldr	r3, [pc, #128]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1f0      	bne.n	80050bc <HAL_RCC_OscConfig+0x1dc>
 80050da:	e000      	b.n	80050de <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d073      	beq.n	80051d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	2b08      	cmp	r3, #8
 80050ee:	d005      	beq.n	80050fc <HAL_RCC_OscConfig+0x21c>
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	2b0c      	cmp	r3, #12
 80050f4:	d10e      	bne.n	8005114 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2b03      	cmp	r3, #3
 80050fa:	d10b      	bne.n	8005114 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050fc:	4b14      	ldr	r3, [pc, #80]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d063      	beq.n	80051d0 <HAL_RCC_OscConfig+0x2f0>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d15f      	bne.n	80051d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e2f7      	b.n	8005704 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800511c:	d106      	bne.n	800512c <HAL_RCC_OscConfig+0x24c>
 800511e:	4b0c      	ldr	r3, [pc, #48]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a0b      	ldr	r2, [pc, #44]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 8005124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005128:	6013      	str	r3, [r2, #0]
 800512a:	e025      	b.n	8005178 <HAL_RCC_OscConfig+0x298>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005134:	d114      	bne.n	8005160 <HAL_RCC_OscConfig+0x280>
 8005136:	4b06      	ldr	r3, [pc, #24]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a05      	ldr	r2, [pc, #20]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 800513c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	4b03      	ldr	r3, [pc, #12]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a02      	ldr	r2, [pc, #8]	; (8005150 <HAL_RCC_OscConfig+0x270>)
 8005148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	e013      	b.n	8005178 <HAL_RCC_OscConfig+0x298>
 8005150:	40021000 	.word	0x40021000
 8005154:	08014220 	.word	0x08014220
 8005158:	2000000c 	.word	0x2000000c
 800515c:	20000010 	.word	0x20000010
 8005160:	4ba0      	ldr	r3, [pc, #640]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a9f      	ldr	r2, [pc, #636]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 8005166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	4b9d      	ldr	r3, [pc, #628]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a9c      	ldr	r2, [pc, #624]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 8005172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d013      	beq.n	80051a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005180:	f7fd fc8e 	bl	8002aa0 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005188:	f7fd fc8a 	bl	8002aa0 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b64      	cmp	r3, #100	; 0x64
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e2b4      	b.n	8005704 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800519a:	4b92      	ldr	r3, [pc, #584]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0f0      	beq.n	8005188 <HAL_RCC_OscConfig+0x2a8>
 80051a6:	e014      	b.n	80051d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a8:	f7fd fc7a 	bl	8002aa0 <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051b0:	f7fd fc76 	bl	8002aa0 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b64      	cmp	r3, #100	; 0x64
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e2a0      	b.n	8005704 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051c2:	4b88      	ldr	r3, [pc, #544]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1f0      	bne.n	80051b0 <HAL_RCC_OscConfig+0x2d0>
 80051ce:	e000      	b.n	80051d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d060      	beq.n	80052a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	d005      	beq.n	80051f0 <HAL_RCC_OscConfig+0x310>
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	2b0c      	cmp	r3, #12
 80051e8:	d119      	bne.n	800521e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d116      	bne.n	800521e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051f0:	4b7c      	ldr	r3, [pc, #496]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d005      	beq.n	8005208 <HAL_RCC_OscConfig+0x328>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e27d      	b.n	8005704 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005208:	4b76      	ldr	r3, [pc, #472]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	061b      	lsls	r3, r3, #24
 8005216:	4973      	ldr	r1, [pc, #460]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 8005218:	4313      	orrs	r3, r2
 800521a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800521c:	e040      	b.n	80052a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d023      	beq.n	800526e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005226:	4b6f      	ldr	r3, [pc, #444]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a6e      	ldr	r2, [pc, #440]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 800522c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005232:	f7fd fc35 	bl	8002aa0 <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005238:	e008      	b.n	800524c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800523a:	f7fd fc31 	bl	8002aa0 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e25b      	b.n	8005704 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800524c:	4b65      	ldr	r3, [pc, #404]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0f0      	beq.n	800523a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005258:	4b62      	ldr	r3, [pc, #392]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	061b      	lsls	r3, r3, #24
 8005266:	495f      	ldr	r1, [pc, #380]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 8005268:	4313      	orrs	r3, r2
 800526a:	604b      	str	r3, [r1, #4]
 800526c:	e018      	b.n	80052a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800526e:	4b5d      	ldr	r3, [pc, #372]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a5c      	ldr	r2, [pc, #368]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 8005274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800527a:	f7fd fc11 	bl	8002aa0 <HAL_GetTick>
 800527e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005280:	e008      	b.n	8005294 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005282:	f7fd fc0d 	bl	8002aa0 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e237      	b.n	8005704 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005294:	4b53      	ldr	r3, [pc, #332]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1f0      	bne.n	8005282 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0308 	and.w	r3, r3, #8
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d03c      	beq.n	8005326 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d01c      	beq.n	80052ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052b4:	4b4b      	ldr	r3, [pc, #300]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 80052b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052ba:	4a4a      	ldr	r2, [pc, #296]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 80052bc:	f043 0301 	orr.w	r3, r3, #1
 80052c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c4:	f7fd fbec 	bl	8002aa0 <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052cc:	f7fd fbe8 	bl	8002aa0 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e212      	b.n	8005704 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052de:	4b41      	ldr	r3, [pc, #260]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 80052e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0ef      	beq.n	80052cc <HAL_RCC_OscConfig+0x3ec>
 80052ec:	e01b      	b.n	8005326 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052ee:	4b3d      	ldr	r3, [pc, #244]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 80052f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052f4:	4a3b      	ldr	r2, [pc, #236]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 80052f6:	f023 0301 	bic.w	r3, r3, #1
 80052fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052fe:	f7fd fbcf 	bl	8002aa0 <HAL_GetTick>
 8005302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005304:	e008      	b.n	8005318 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005306:	f7fd fbcb 	bl	8002aa0 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d901      	bls.n	8005318 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e1f5      	b.n	8005704 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005318:	4b32      	ldr	r3, [pc, #200]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 800531a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1ef      	bne.n	8005306 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0304 	and.w	r3, r3, #4
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 80a6 	beq.w	8005480 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005334:	2300      	movs	r3, #0
 8005336:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005338:	4b2a      	ldr	r3, [pc, #168]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 800533a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800533c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10d      	bne.n	8005360 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005344:	4b27      	ldr	r3, [pc, #156]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 8005346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005348:	4a26      	ldr	r2, [pc, #152]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 800534a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800534e:	6593      	str	r3, [r2, #88]	; 0x58
 8005350:	4b24      	ldr	r3, [pc, #144]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 8005352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005358:	60bb      	str	r3, [r7, #8]
 800535a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800535c:	2301      	movs	r3, #1
 800535e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005360:	4b21      	ldr	r3, [pc, #132]	; (80053e8 <HAL_RCC_OscConfig+0x508>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005368:	2b00      	cmp	r3, #0
 800536a:	d118      	bne.n	800539e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800536c:	4b1e      	ldr	r3, [pc, #120]	; (80053e8 <HAL_RCC_OscConfig+0x508>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a1d      	ldr	r2, [pc, #116]	; (80053e8 <HAL_RCC_OscConfig+0x508>)
 8005372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005376:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005378:	f7fd fb92 	bl	8002aa0 <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005380:	f7fd fb8e 	bl	8002aa0 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e1b8      	b.n	8005704 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005392:	4b15      	ldr	r3, [pc, #84]	; (80053e8 <HAL_RCC_OscConfig+0x508>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0f0      	beq.n	8005380 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d108      	bne.n	80053b8 <HAL_RCC_OscConfig+0x4d8>
 80053a6:	4b0f      	ldr	r3, [pc, #60]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 80053a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ac:	4a0d      	ldr	r2, [pc, #52]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 80053ae:	f043 0301 	orr.w	r3, r3, #1
 80053b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053b6:	e029      	b.n	800540c <HAL_RCC_OscConfig+0x52c>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	2b05      	cmp	r3, #5
 80053be:	d115      	bne.n	80053ec <HAL_RCC_OscConfig+0x50c>
 80053c0:	4b08      	ldr	r3, [pc, #32]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 80053c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c6:	4a07      	ldr	r2, [pc, #28]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 80053c8:	f043 0304 	orr.w	r3, r3, #4
 80053cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053d0:	4b04      	ldr	r3, [pc, #16]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 80053d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d6:	4a03      	ldr	r2, [pc, #12]	; (80053e4 <HAL_RCC_OscConfig+0x504>)
 80053d8:	f043 0301 	orr.w	r3, r3, #1
 80053dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053e0:	e014      	b.n	800540c <HAL_RCC_OscConfig+0x52c>
 80053e2:	bf00      	nop
 80053e4:	40021000 	.word	0x40021000
 80053e8:	40007000 	.word	0x40007000
 80053ec:	4b9d      	ldr	r3, [pc, #628]	; (8005664 <HAL_RCC_OscConfig+0x784>)
 80053ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f2:	4a9c      	ldr	r2, [pc, #624]	; (8005664 <HAL_RCC_OscConfig+0x784>)
 80053f4:	f023 0301 	bic.w	r3, r3, #1
 80053f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053fc:	4b99      	ldr	r3, [pc, #612]	; (8005664 <HAL_RCC_OscConfig+0x784>)
 80053fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005402:	4a98      	ldr	r2, [pc, #608]	; (8005664 <HAL_RCC_OscConfig+0x784>)
 8005404:	f023 0304 	bic.w	r3, r3, #4
 8005408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d016      	beq.n	8005442 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005414:	f7fd fb44 	bl	8002aa0 <HAL_GetTick>
 8005418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800541a:	e00a      	b.n	8005432 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800541c:	f7fd fb40 	bl	8002aa0 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	f241 3288 	movw	r2, #5000	; 0x1388
 800542a:	4293      	cmp	r3, r2
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e168      	b.n	8005704 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005432:	4b8c      	ldr	r3, [pc, #560]	; (8005664 <HAL_RCC_OscConfig+0x784>)
 8005434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0ed      	beq.n	800541c <HAL_RCC_OscConfig+0x53c>
 8005440:	e015      	b.n	800546e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005442:	f7fd fb2d 	bl	8002aa0 <HAL_GetTick>
 8005446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005448:	e00a      	b.n	8005460 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800544a:	f7fd fb29 	bl	8002aa0 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	f241 3288 	movw	r2, #5000	; 0x1388
 8005458:	4293      	cmp	r3, r2
 800545a:	d901      	bls.n	8005460 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e151      	b.n	8005704 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005460:	4b80      	ldr	r3, [pc, #512]	; (8005664 <HAL_RCC_OscConfig+0x784>)
 8005462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1ed      	bne.n	800544a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800546e:	7ffb      	ldrb	r3, [r7, #31]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d105      	bne.n	8005480 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005474:	4b7b      	ldr	r3, [pc, #492]	; (8005664 <HAL_RCC_OscConfig+0x784>)
 8005476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005478:	4a7a      	ldr	r2, [pc, #488]	; (8005664 <HAL_RCC_OscConfig+0x784>)
 800547a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800547e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0320 	and.w	r3, r3, #32
 8005488:	2b00      	cmp	r3, #0
 800548a:	d03c      	beq.n	8005506 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	2b00      	cmp	r3, #0
 8005492:	d01c      	beq.n	80054ce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005494:	4b73      	ldr	r3, [pc, #460]	; (8005664 <HAL_RCC_OscConfig+0x784>)
 8005496:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800549a:	4a72      	ldr	r2, [pc, #456]	; (8005664 <HAL_RCC_OscConfig+0x784>)
 800549c:	f043 0301 	orr.w	r3, r3, #1
 80054a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a4:	f7fd fafc 	bl	8002aa0 <HAL_GetTick>
 80054a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054aa:	e008      	b.n	80054be <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054ac:	f7fd faf8 	bl	8002aa0 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d901      	bls.n	80054be <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e122      	b.n	8005704 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054be:	4b69      	ldr	r3, [pc, #420]	; (8005664 <HAL_RCC_OscConfig+0x784>)
 80054c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0ef      	beq.n	80054ac <HAL_RCC_OscConfig+0x5cc>
 80054cc:	e01b      	b.n	8005506 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80054ce:	4b65      	ldr	r3, [pc, #404]	; (8005664 <HAL_RCC_OscConfig+0x784>)
 80054d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054d4:	4a63      	ldr	r2, [pc, #396]	; (8005664 <HAL_RCC_OscConfig+0x784>)
 80054d6:	f023 0301 	bic.w	r3, r3, #1
 80054da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054de:	f7fd fadf 	bl	8002aa0 <HAL_GetTick>
 80054e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054e4:	e008      	b.n	80054f8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054e6:	f7fd fadb 	bl	8002aa0 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e105      	b.n	8005704 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054f8:	4b5a      	ldr	r3, [pc, #360]	; (8005664 <HAL_RCC_OscConfig+0x784>)
 80054fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1ef      	bne.n	80054e6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 80f9 	beq.w	8005702 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005514:	2b02      	cmp	r3, #2
 8005516:	f040 80cf 	bne.w	80056b8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800551a:	4b52      	ldr	r3, [pc, #328]	; (8005664 <HAL_RCC_OscConfig+0x784>)
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f003 0203 	and.w	r2, r3, #3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552a:	429a      	cmp	r2, r3
 800552c:	d12c      	bne.n	8005588 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005538:	3b01      	subs	r3, #1
 800553a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800553c:	429a      	cmp	r2, r3
 800553e:	d123      	bne.n	8005588 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800554a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800554c:	429a      	cmp	r2, r3
 800554e:	d11b      	bne.n	8005588 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800555c:	429a      	cmp	r2, r3
 800555e:	d113      	bne.n	8005588 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556a:	085b      	lsrs	r3, r3, #1
 800556c:	3b01      	subs	r3, #1
 800556e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005570:	429a      	cmp	r2, r3
 8005572:	d109      	bne.n	8005588 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	085b      	lsrs	r3, r3, #1
 8005580:	3b01      	subs	r3, #1
 8005582:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005584:	429a      	cmp	r2, r3
 8005586:	d071      	beq.n	800566c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	2b0c      	cmp	r3, #12
 800558c:	d068      	beq.n	8005660 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800558e:	4b35      	ldr	r3, [pc, #212]	; (8005664 <HAL_RCC_OscConfig+0x784>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d105      	bne.n	80055a6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800559a:	4b32      	ldr	r3, [pc, #200]	; (8005664 <HAL_RCC_OscConfig+0x784>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e0ac      	b.n	8005704 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80055aa:	4b2e      	ldr	r3, [pc, #184]	; (8005664 <HAL_RCC_OscConfig+0x784>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a2d      	ldr	r2, [pc, #180]	; (8005664 <HAL_RCC_OscConfig+0x784>)
 80055b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80055b6:	f7fd fa73 	bl	8002aa0 <HAL_GetTick>
 80055ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055bc:	e008      	b.n	80055d0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055be:	f7fd fa6f 	bl	8002aa0 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d901      	bls.n	80055d0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e099      	b.n	8005704 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055d0:	4b24      	ldr	r3, [pc, #144]	; (8005664 <HAL_RCC_OscConfig+0x784>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1f0      	bne.n	80055be <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055dc:	4b21      	ldr	r3, [pc, #132]	; (8005664 <HAL_RCC_OscConfig+0x784>)
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	4b21      	ldr	r3, [pc, #132]	; (8005668 <HAL_RCC_OscConfig+0x788>)
 80055e2:	4013      	ands	r3, r2
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80055ec:	3a01      	subs	r2, #1
 80055ee:	0112      	lsls	r2, r2, #4
 80055f0:	4311      	orrs	r1, r2
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055f6:	0212      	lsls	r2, r2, #8
 80055f8:	4311      	orrs	r1, r2
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80055fe:	0852      	lsrs	r2, r2, #1
 8005600:	3a01      	subs	r2, #1
 8005602:	0552      	lsls	r2, r2, #21
 8005604:	4311      	orrs	r1, r2
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800560a:	0852      	lsrs	r2, r2, #1
 800560c:	3a01      	subs	r2, #1
 800560e:	0652      	lsls	r2, r2, #25
 8005610:	4311      	orrs	r1, r2
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005616:	06d2      	lsls	r2, r2, #27
 8005618:	430a      	orrs	r2, r1
 800561a:	4912      	ldr	r1, [pc, #72]	; (8005664 <HAL_RCC_OscConfig+0x784>)
 800561c:	4313      	orrs	r3, r2
 800561e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005620:	4b10      	ldr	r3, [pc, #64]	; (8005664 <HAL_RCC_OscConfig+0x784>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a0f      	ldr	r2, [pc, #60]	; (8005664 <HAL_RCC_OscConfig+0x784>)
 8005626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800562a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800562c:	4b0d      	ldr	r3, [pc, #52]	; (8005664 <HAL_RCC_OscConfig+0x784>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	4a0c      	ldr	r2, [pc, #48]	; (8005664 <HAL_RCC_OscConfig+0x784>)
 8005632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005636:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005638:	f7fd fa32 	bl	8002aa0 <HAL_GetTick>
 800563c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800563e:	e008      	b.n	8005652 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005640:	f7fd fa2e 	bl	8002aa0 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b02      	cmp	r3, #2
 800564c:	d901      	bls.n	8005652 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e058      	b.n	8005704 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005652:	4b04      	ldr	r3, [pc, #16]	; (8005664 <HAL_RCC_OscConfig+0x784>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d0f0      	beq.n	8005640 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800565e:	e050      	b.n	8005702 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e04f      	b.n	8005704 <HAL_RCC_OscConfig+0x824>
 8005664:	40021000 	.word	0x40021000
 8005668:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800566c:	4b27      	ldr	r3, [pc, #156]	; (800570c <HAL_RCC_OscConfig+0x82c>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d144      	bne.n	8005702 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005678:	4b24      	ldr	r3, [pc, #144]	; (800570c <HAL_RCC_OscConfig+0x82c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a23      	ldr	r2, [pc, #140]	; (800570c <HAL_RCC_OscConfig+0x82c>)
 800567e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005682:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005684:	4b21      	ldr	r3, [pc, #132]	; (800570c <HAL_RCC_OscConfig+0x82c>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	4a20      	ldr	r2, [pc, #128]	; (800570c <HAL_RCC_OscConfig+0x82c>)
 800568a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800568e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005690:	f7fd fa06 	bl	8002aa0 <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005698:	f7fd fa02 	bl	8002aa0 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e02c      	b.n	8005704 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056aa:	4b18      	ldr	r3, [pc, #96]	; (800570c <HAL_RCC_OscConfig+0x82c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d0f0      	beq.n	8005698 <HAL_RCC_OscConfig+0x7b8>
 80056b6:	e024      	b.n	8005702 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	2b0c      	cmp	r3, #12
 80056bc:	d01f      	beq.n	80056fe <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056be:	4b13      	ldr	r3, [pc, #76]	; (800570c <HAL_RCC_OscConfig+0x82c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a12      	ldr	r2, [pc, #72]	; (800570c <HAL_RCC_OscConfig+0x82c>)
 80056c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ca:	f7fd f9e9 	bl	8002aa0 <HAL_GetTick>
 80056ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056d0:	e008      	b.n	80056e4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056d2:	f7fd f9e5 	bl	8002aa0 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d901      	bls.n	80056e4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e00f      	b.n	8005704 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056e4:	4b09      	ldr	r3, [pc, #36]	; (800570c <HAL_RCC_OscConfig+0x82c>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1f0      	bne.n	80056d2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80056f0:	4b06      	ldr	r3, [pc, #24]	; (800570c <HAL_RCC_OscConfig+0x82c>)
 80056f2:	68da      	ldr	r2, [r3, #12]
 80056f4:	4905      	ldr	r1, [pc, #20]	; (800570c <HAL_RCC_OscConfig+0x82c>)
 80056f6:	4b06      	ldr	r3, [pc, #24]	; (8005710 <HAL_RCC_OscConfig+0x830>)
 80056f8:	4013      	ands	r3, r2
 80056fa:	60cb      	str	r3, [r1, #12]
 80056fc:	e001      	b.n	8005702 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e000      	b.n	8005704 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3720      	adds	r7, #32
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40021000 	.word	0x40021000
 8005710:	feeefffc 	.word	0xfeeefffc

08005714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800571e:	2300      	movs	r3, #0
 8005720:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e11d      	b.n	8005968 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800572c:	4b90      	ldr	r3, [pc, #576]	; (8005970 <HAL_RCC_ClockConfig+0x25c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 030f 	and.w	r3, r3, #15
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	429a      	cmp	r2, r3
 8005738:	d910      	bls.n	800575c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800573a:	4b8d      	ldr	r3, [pc, #564]	; (8005970 <HAL_RCC_ClockConfig+0x25c>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f023 020f 	bic.w	r2, r3, #15
 8005742:	498b      	ldr	r1, [pc, #556]	; (8005970 <HAL_RCC_ClockConfig+0x25c>)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	4313      	orrs	r3, r2
 8005748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800574a:	4b89      	ldr	r3, [pc, #548]	; (8005970 <HAL_RCC_ClockConfig+0x25c>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 030f 	and.w	r3, r3, #15
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	429a      	cmp	r2, r3
 8005756:	d001      	beq.n	800575c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e105      	b.n	8005968 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d010      	beq.n	800578a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689a      	ldr	r2, [r3, #8]
 800576c:	4b81      	ldr	r3, [pc, #516]	; (8005974 <HAL_RCC_ClockConfig+0x260>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005774:	429a      	cmp	r2, r3
 8005776:	d908      	bls.n	800578a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005778:	4b7e      	ldr	r3, [pc, #504]	; (8005974 <HAL_RCC_ClockConfig+0x260>)
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	497b      	ldr	r1, [pc, #492]	; (8005974 <HAL_RCC_ClockConfig+0x260>)
 8005786:	4313      	orrs	r3, r2
 8005788:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d079      	beq.n	800588a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	2b03      	cmp	r3, #3
 800579c:	d11e      	bne.n	80057dc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800579e:	4b75      	ldr	r3, [pc, #468]	; (8005974 <HAL_RCC_ClockConfig+0x260>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e0dc      	b.n	8005968 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80057ae:	f000 fa35 	bl	8005c1c <RCC_GetSysClockFreqFromPLLSource>
 80057b2:	4603      	mov	r3, r0
 80057b4:	4a70      	ldr	r2, [pc, #448]	; (8005978 <HAL_RCC_ClockConfig+0x264>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d946      	bls.n	8005848 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80057ba:	4b6e      	ldr	r3, [pc, #440]	; (8005974 <HAL_RCC_ClockConfig+0x260>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d140      	bne.n	8005848 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057c6:	4b6b      	ldr	r3, [pc, #428]	; (8005974 <HAL_RCC_ClockConfig+0x260>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057ce:	4a69      	ldr	r2, [pc, #420]	; (8005974 <HAL_RCC_ClockConfig+0x260>)
 80057d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80057d6:	2380      	movs	r3, #128	; 0x80
 80057d8:	617b      	str	r3, [r7, #20]
 80057da:	e035      	b.n	8005848 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d107      	bne.n	80057f4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057e4:	4b63      	ldr	r3, [pc, #396]	; (8005974 <HAL_RCC_ClockConfig+0x260>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d115      	bne.n	800581c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e0b9      	b.n	8005968 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d107      	bne.n	800580c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057fc:	4b5d      	ldr	r3, [pc, #372]	; (8005974 <HAL_RCC_ClockConfig+0x260>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d109      	bne.n	800581c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e0ad      	b.n	8005968 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800580c:	4b59      	ldr	r3, [pc, #356]	; (8005974 <HAL_RCC_ClockConfig+0x260>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e0a5      	b.n	8005968 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800581c:	f000 f8b4 	bl	8005988 <HAL_RCC_GetSysClockFreq>
 8005820:	4603      	mov	r3, r0
 8005822:	4a55      	ldr	r2, [pc, #340]	; (8005978 <HAL_RCC_ClockConfig+0x264>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d90f      	bls.n	8005848 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005828:	4b52      	ldr	r3, [pc, #328]	; (8005974 <HAL_RCC_ClockConfig+0x260>)
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d109      	bne.n	8005848 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005834:	4b4f      	ldr	r3, [pc, #316]	; (8005974 <HAL_RCC_ClockConfig+0x260>)
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800583c:	4a4d      	ldr	r2, [pc, #308]	; (8005974 <HAL_RCC_ClockConfig+0x260>)
 800583e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005842:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005844:	2380      	movs	r3, #128	; 0x80
 8005846:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005848:	4b4a      	ldr	r3, [pc, #296]	; (8005974 <HAL_RCC_ClockConfig+0x260>)
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f023 0203 	bic.w	r2, r3, #3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	4947      	ldr	r1, [pc, #284]	; (8005974 <HAL_RCC_ClockConfig+0x260>)
 8005856:	4313      	orrs	r3, r2
 8005858:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800585a:	f7fd f921 	bl	8002aa0 <HAL_GetTick>
 800585e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005860:	e00a      	b.n	8005878 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005862:	f7fd f91d 	bl	8002aa0 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005870:	4293      	cmp	r3, r2
 8005872:	d901      	bls.n	8005878 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e077      	b.n	8005968 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005878:	4b3e      	ldr	r3, [pc, #248]	; (8005974 <HAL_RCC_ClockConfig+0x260>)
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f003 020c 	and.w	r2, r3, #12
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	429a      	cmp	r2, r3
 8005888:	d1eb      	bne.n	8005862 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	2b80      	cmp	r3, #128	; 0x80
 800588e:	d105      	bne.n	800589c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005890:	4b38      	ldr	r3, [pc, #224]	; (8005974 <HAL_RCC_ClockConfig+0x260>)
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	4a37      	ldr	r2, [pc, #220]	; (8005974 <HAL_RCC_ClockConfig+0x260>)
 8005896:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800589a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d010      	beq.n	80058ca <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	4b31      	ldr	r3, [pc, #196]	; (8005974 <HAL_RCC_ClockConfig+0x260>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d208      	bcs.n	80058ca <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058b8:	4b2e      	ldr	r3, [pc, #184]	; (8005974 <HAL_RCC_ClockConfig+0x260>)
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	492b      	ldr	r1, [pc, #172]	; (8005974 <HAL_RCC_ClockConfig+0x260>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058ca:	4b29      	ldr	r3, [pc, #164]	; (8005970 <HAL_RCC_ClockConfig+0x25c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 030f 	and.w	r3, r3, #15
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d210      	bcs.n	80058fa <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058d8:	4b25      	ldr	r3, [pc, #148]	; (8005970 <HAL_RCC_ClockConfig+0x25c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f023 020f 	bic.w	r2, r3, #15
 80058e0:	4923      	ldr	r1, [pc, #140]	; (8005970 <HAL_RCC_ClockConfig+0x25c>)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058e8:	4b21      	ldr	r3, [pc, #132]	; (8005970 <HAL_RCC_ClockConfig+0x25c>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 030f 	and.w	r3, r3, #15
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d001      	beq.n	80058fa <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e036      	b.n	8005968 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0304 	and.w	r3, r3, #4
 8005902:	2b00      	cmp	r3, #0
 8005904:	d008      	beq.n	8005918 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005906:	4b1b      	ldr	r3, [pc, #108]	; (8005974 <HAL_RCC_ClockConfig+0x260>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	4918      	ldr	r1, [pc, #96]	; (8005974 <HAL_RCC_ClockConfig+0x260>)
 8005914:	4313      	orrs	r3, r2
 8005916:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0308 	and.w	r3, r3, #8
 8005920:	2b00      	cmp	r3, #0
 8005922:	d009      	beq.n	8005938 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005924:	4b13      	ldr	r3, [pc, #76]	; (8005974 <HAL_RCC_ClockConfig+0x260>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	4910      	ldr	r1, [pc, #64]	; (8005974 <HAL_RCC_ClockConfig+0x260>)
 8005934:	4313      	orrs	r3, r2
 8005936:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005938:	f000 f826 	bl	8005988 <HAL_RCC_GetSysClockFreq>
 800593c:	4602      	mov	r2, r0
 800593e:	4b0d      	ldr	r3, [pc, #52]	; (8005974 <HAL_RCC_ClockConfig+0x260>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	091b      	lsrs	r3, r3, #4
 8005944:	f003 030f 	and.w	r3, r3, #15
 8005948:	490c      	ldr	r1, [pc, #48]	; (800597c <HAL_RCC_ClockConfig+0x268>)
 800594a:	5ccb      	ldrb	r3, [r1, r3]
 800594c:	f003 031f 	and.w	r3, r3, #31
 8005950:	fa22 f303 	lsr.w	r3, r2, r3
 8005954:	4a0a      	ldr	r2, [pc, #40]	; (8005980 <HAL_RCC_ClockConfig+0x26c>)
 8005956:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005958:	4b0a      	ldr	r3, [pc, #40]	; (8005984 <HAL_RCC_ClockConfig+0x270>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4618      	mov	r0, r3
 800595e:	f7fd f84f 	bl	8002a00 <HAL_InitTick>
 8005962:	4603      	mov	r3, r0
 8005964:	73fb      	strb	r3, [r7, #15]

  return status;
 8005966:	7bfb      	ldrb	r3, [r7, #15]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	40022000 	.word	0x40022000
 8005974:	40021000 	.word	0x40021000
 8005978:	04c4b400 	.word	0x04c4b400
 800597c:	08014220 	.word	0x08014220
 8005980:	2000000c 	.word	0x2000000c
 8005984:	20000010 	.word	0x20000010

08005988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005988:	b480      	push	{r7}
 800598a:	b089      	sub	sp, #36	; 0x24
 800598c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800598e:	2300      	movs	r3, #0
 8005990:	61fb      	str	r3, [r7, #28]
 8005992:	2300      	movs	r3, #0
 8005994:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005996:	4b3e      	ldr	r3, [pc, #248]	; (8005a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 030c 	and.w	r3, r3, #12
 800599e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059a0:	4b3b      	ldr	r3, [pc, #236]	; (8005a90 <HAL_RCC_GetSysClockFreq+0x108>)
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f003 0303 	and.w	r3, r3, #3
 80059a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d005      	beq.n	80059bc <HAL_RCC_GetSysClockFreq+0x34>
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	2b0c      	cmp	r3, #12
 80059b4:	d121      	bne.n	80059fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d11e      	bne.n	80059fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80059bc:	4b34      	ldr	r3, [pc, #208]	; (8005a90 <HAL_RCC_GetSysClockFreq+0x108>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0308 	and.w	r3, r3, #8
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d107      	bne.n	80059d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80059c8:	4b31      	ldr	r3, [pc, #196]	; (8005a90 <HAL_RCC_GetSysClockFreq+0x108>)
 80059ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ce:	0a1b      	lsrs	r3, r3, #8
 80059d0:	f003 030f 	and.w	r3, r3, #15
 80059d4:	61fb      	str	r3, [r7, #28]
 80059d6:	e005      	b.n	80059e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80059d8:	4b2d      	ldr	r3, [pc, #180]	; (8005a90 <HAL_RCC_GetSysClockFreq+0x108>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	091b      	lsrs	r3, r3, #4
 80059de:	f003 030f 	and.w	r3, r3, #15
 80059e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80059e4:	4a2b      	ldr	r2, [pc, #172]	; (8005a94 <HAL_RCC_GetSysClockFreq+0x10c>)
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10d      	bne.n	8005a10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059f8:	e00a      	b.n	8005a10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	2b04      	cmp	r3, #4
 80059fe:	d102      	bne.n	8005a06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a00:	4b25      	ldr	r3, [pc, #148]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x110>)
 8005a02:	61bb      	str	r3, [r7, #24]
 8005a04:	e004      	b.n	8005a10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d101      	bne.n	8005a10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a0c:	4b23      	ldr	r3, [pc, #140]	; (8005a9c <HAL_RCC_GetSysClockFreq+0x114>)
 8005a0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	2b0c      	cmp	r3, #12
 8005a14:	d134      	bne.n	8005a80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a16:	4b1e      	ldr	r3, [pc, #120]	; (8005a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f003 0303 	and.w	r3, r3, #3
 8005a1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d003      	beq.n	8005a2e <HAL_RCC_GetSysClockFreq+0xa6>
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	2b03      	cmp	r3, #3
 8005a2a:	d003      	beq.n	8005a34 <HAL_RCC_GetSysClockFreq+0xac>
 8005a2c:	e005      	b.n	8005a3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005a2e:	4b1a      	ldr	r3, [pc, #104]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x110>)
 8005a30:	617b      	str	r3, [r7, #20]
      break;
 8005a32:	e005      	b.n	8005a40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005a34:	4b19      	ldr	r3, [pc, #100]	; (8005a9c <HAL_RCC_GetSysClockFreq+0x114>)
 8005a36:	617b      	str	r3, [r7, #20]
      break;
 8005a38:	e002      	b.n	8005a40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	617b      	str	r3, [r7, #20]
      break;
 8005a3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a40:	4b13      	ldr	r3, [pc, #76]	; (8005a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	091b      	lsrs	r3, r3, #4
 8005a46:	f003 030f 	and.w	r3, r3, #15
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005a4e:	4b10      	ldr	r3, [pc, #64]	; (8005a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	0a1b      	lsrs	r3, r3, #8
 8005a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	fb03 f202 	mul.w	r2, r3, r2
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a66:	4b0a      	ldr	r3, [pc, #40]	; (8005a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	0e5b      	lsrs	r3, r3, #25
 8005a6c:	f003 0303 	and.w	r3, r3, #3
 8005a70:	3301      	adds	r3, #1
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005a80:	69bb      	ldr	r3, [r7, #24]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3724      	adds	r7, #36	; 0x24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	40021000 	.word	0x40021000
 8005a94:	08014238 	.word	0x08014238
 8005a98:	00f42400 	.word	0x00f42400
 8005a9c:	007a1200 	.word	0x007a1200

08005aa0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005aa4:	4b03      	ldr	r3, [pc, #12]	; (8005ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	2000000c 	.word	0x2000000c

08005ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005abc:	f7ff fff0 	bl	8005aa0 <HAL_RCC_GetHCLKFreq>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	4b06      	ldr	r3, [pc, #24]	; (8005adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	0a1b      	lsrs	r3, r3, #8
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	4904      	ldr	r1, [pc, #16]	; (8005ae0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ace:	5ccb      	ldrb	r3, [r1, r3]
 8005ad0:	f003 031f 	and.w	r3, r3, #31
 8005ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	40021000 	.word	0x40021000
 8005ae0:	08014230 	.word	0x08014230

08005ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ae8:	f7ff ffda 	bl	8005aa0 <HAL_RCC_GetHCLKFreq>
 8005aec:	4602      	mov	r2, r0
 8005aee:	4b06      	ldr	r3, [pc, #24]	; (8005b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	0adb      	lsrs	r3, r3, #11
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	4904      	ldr	r1, [pc, #16]	; (8005b0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005afa:	5ccb      	ldrb	r3, [r1, r3]
 8005afc:	f003 031f 	and.w	r3, r3, #31
 8005b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	40021000 	.word	0x40021000
 8005b0c:	08014230 	.word	0x08014230

08005b10 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005b10:	b480      	push	{r7}
 8005b12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005b14:	4b05      	ldr	r3, [pc, #20]	; (8005b2c <HAL_RCC_EnableCSS+0x1c>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a04      	ldr	r2, [pc, #16]	; (8005b2c <HAL_RCC_EnableCSS+0x1c>)
 8005b1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b1e:	6013      	str	r3, [r2, #0]
}
 8005b20:	bf00      	nop
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	40021000 	.word	0x40021000

08005b30 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005b34:	4b07      	ldr	r3, [pc, #28]	; (8005b54 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b40:	d105      	bne.n	8005b4e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005b42:	f000 f809 	bl	8005b58 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005b46:	4b03      	ldr	r3, [pc, #12]	; (8005b54 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005b48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b4c:	621a      	str	r2, [r3, #32]
  }
}
 8005b4e:	bf00      	nop
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	40021000 	.word	0x40021000

08005b58 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8005b5c:	bf00      	nop
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
	...

08005b68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005b70:	2300      	movs	r3, #0
 8005b72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005b74:	4b27      	ldr	r3, [pc, #156]	; (8005c14 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005b80:	f7ff f8da 	bl	8004d38 <HAL_PWREx_GetVoltageRange>
 8005b84:	6178      	str	r0, [r7, #20]
 8005b86:	e014      	b.n	8005bb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b88:	4b22      	ldr	r3, [pc, #136]	; (8005c14 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b8c:	4a21      	ldr	r2, [pc, #132]	; (8005c14 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b92:	6593      	str	r3, [r2, #88]	; 0x58
 8005b94:	4b1f      	ldr	r3, [pc, #124]	; (8005c14 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005ba0:	f7ff f8ca 	bl	8004d38 <HAL_PWREx_GetVoltageRange>
 8005ba4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005ba6:	4b1b      	ldr	r3, [pc, #108]	; (8005c14 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005baa:	4a1a      	ldr	r2, [pc, #104]	; (8005c14 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bb0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bb8:	d10b      	bne.n	8005bd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b80      	cmp	r3, #128	; 0x80
 8005bbe:	d913      	bls.n	8005be8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2ba0      	cmp	r3, #160	; 0xa0
 8005bc4:	d902      	bls.n	8005bcc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	613b      	str	r3, [r7, #16]
 8005bca:	e00d      	b.n	8005be8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005bcc:	2301      	movs	r3, #1
 8005bce:	613b      	str	r3, [r7, #16]
 8005bd0:	e00a      	b.n	8005be8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b7f      	cmp	r3, #127	; 0x7f
 8005bd6:	d902      	bls.n	8005bde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005bd8:	2302      	movs	r3, #2
 8005bda:	613b      	str	r3, [r7, #16]
 8005bdc:	e004      	b.n	8005be8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b70      	cmp	r3, #112	; 0x70
 8005be2:	d101      	bne.n	8005be8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005be4:	2301      	movs	r3, #1
 8005be6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005be8:	4b0b      	ldr	r3, [pc, #44]	; (8005c18 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f023 020f 	bic.w	r2, r3, #15
 8005bf0:	4909      	ldr	r1, [pc, #36]	; (8005c18 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005bf8:	4b07      	ldr	r3, [pc, #28]	; (8005c18 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 030f 	and.w	r3, r3, #15
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d001      	beq.n	8005c0a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e000      	b.n	8005c0c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3718      	adds	r7, #24
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	40021000 	.word	0x40021000
 8005c18:	40022000 	.word	0x40022000

08005c1c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c22:	4b2d      	ldr	r3, [pc, #180]	; (8005cd8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	f003 0303 	and.w	r3, r3, #3
 8005c2a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2b03      	cmp	r3, #3
 8005c30:	d00b      	beq.n	8005c4a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2b03      	cmp	r3, #3
 8005c36:	d825      	bhi.n	8005c84 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d008      	beq.n	8005c50 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d11f      	bne.n	8005c84 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005c44:	4b25      	ldr	r3, [pc, #148]	; (8005cdc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005c46:	613b      	str	r3, [r7, #16]
    break;
 8005c48:	e01f      	b.n	8005c8a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005c4a:	4b25      	ldr	r3, [pc, #148]	; (8005ce0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005c4c:	613b      	str	r3, [r7, #16]
    break;
 8005c4e:	e01c      	b.n	8005c8a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c50:	4b21      	ldr	r3, [pc, #132]	; (8005cd8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0308 	and.w	r3, r3, #8
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d107      	bne.n	8005c6c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c5c:	4b1e      	ldr	r3, [pc, #120]	; (8005cd8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c62:	0a1b      	lsrs	r3, r3, #8
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	617b      	str	r3, [r7, #20]
 8005c6a:	e005      	b.n	8005c78 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005c6c:	4b1a      	ldr	r3, [pc, #104]	; (8005cd8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	091b      	lsrs	r3, r3, #4
 8005c72:	f003 030f 	and.w	r3, r3, #15
 8005c76:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005c78:	4a1a      	ldr	r2, [pc, #104]	; (8005ce4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c80:	613b      	str	r3, [r7, #16]
    break;
 8005c82:	e002      	b.n	8005c8a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005c84:	2300      	movs	r3, #0
 8005c86:	613b      	str	r3, [r7, #16]
    break;
 8005c88:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c8a:	4b13      	ldr	r3, [pc, #76]	; (8005cd8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	091b      	lsrs	r3, r3, #4
 8005c90:	f003 030f 	and.w	r3, r3, #15
 8005c94:	3301      	adds	r3, #1
 8005c96:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005c98:	4b0f      	ldr	r3, [pc, #60]	; (8005cd8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	0a1b      	lsrs	r3, r3, #8
 8005c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	fb03 f202 	mul.w	r2, r3, r2
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cae:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cb0:	4b09      	ldr	r3, [pc, #36]	; (8005cd8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	0e5b      	lsrs	r3, r3, #25
 8005cb6:	f003 0303 	and.w	r3, r3, #3
 8005cba:	3301      	adds	r3, #1
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005cca:	683b      	ldr	r3, [r7, #0]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	371c      	adds	r7, #28
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	40021000 	.word	0x40021000
 8005cdc:	00f42400 	.word	0x00f42400
 8005ce0:	007a1200 	.word	0x007a1200
 8005ce4:	08014238 	.word	0x08014238

08005ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d040      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d08:	2b80      	cmp	r3, #128	; 0x80
 8005d0a:	d02a      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d0c:	2b80      	cmp	r3, #128	; 0x80
 8005d0e:	d825      	bhi.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005d10:	2b60      	cmp	r3, #96	; 0x60
 8005d12:	d026      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d14:	2b60      	cmp	r3, #96	; 0x60
 8005d16:	d821      	bhi.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005d18:	2b40      	cmp	r3, #64	; 0x40
 8005d1a:	d006      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005d1c:	2b40      	cmp	r3, #64	; 0x40
 8005d1e:	d81d      	bhi.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d009      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005d24:	2b20      	cmp	r3, #32
 8005d26:	d010      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005d28:	e018      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d2a:	4b89      	ldr	r3, [pc, #548]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	4a88      	ldr	r2, [pc, #544]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d34:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d36:	e015      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f001 fa24 	bl	800718c <RCCEx_PLLSAI1_Config>
 8005d44:	4603      	mov	r3, r0
 8005d46:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d48:	e00c      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	3320      	adds	r3, #32
 8005d4e:	2100      	movs	r1, #0
 8005d50:	4618      	mov	r0, r3
 8005d52:	f001 fb0f 	bl	8007374 <RCCEx_PLLSAI2_Config>
 8005d56:	4603      	mov	r3, r0
 8005d58:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d5a:	e003      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	74fb      	strb	r3, [r7, #19]
      break;
 8005d60:	e000      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005d62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d64:	7cfb      	ldrb	r3, [r7, #19]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10b      	bne.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d6a:	4b79      	ldr	r3, [pc, #484]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d70:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d78:	4975      	ldr	r1, [pc, #468]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005d80:	e001      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d82:	7cfb      	ldrb	r3, [r7, #19]
 8005d84:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d047      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d9a:	d030      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005da0:	d82a      	bhi.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005da2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005da6:	d02a      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005da8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dac:	d824      	bhi.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005dae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005db2:	d008      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005db8:	d81e      	bhi.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dc2:	d010      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005dc4:	e018      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005dc6:	4b62      	ldr	r3, [pc, #392]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	4a61      	ldr	r2, [pc, #388]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dd0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005dd2:	e015      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	3304      	adds	r3, #4
 8005dd8:	2100      	movs	r1, #0
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f001 f9d6 	bl	800718c <RCCEx_PLLSAI1_Config>
 8005de0:	4603      	mov	r3, r0
 8005de2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005de4:	e00c      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	3320      	adds	r3, #32
 8005dea:	2100      	movs	r1, #0
 8005dec:	4618      	mov	r0, r3
 8005dee:	f001 fac1 	bl	8007374 <RCCEx_PLLSAI2_Config>
 8005df2:	4603      	mov	r3, r0
 8005df4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005df6:	e003      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	74fb      	strb	r3, [r7, #19]
      break;
 8005dfc:	e000      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005dfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e00:	7cfb      	ldrb	r3, [r7, #19]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10b      	bne.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e06:	4b52      	ldr	r3, [pc, #328]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e14:	494e      	ldr	r1, [pc, #312]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005e1c:	e001      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e1e:	7cfb      	ldrb	r3, [r7, #19]
 8005e20:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f000 809f 	beq.w	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e30:	2300      	movs	r3, #0
 8005e32:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e34:	4b46      	ldr	r3, [pc, #280]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d101      	bne.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005e40:	2301      	movs	r3, #1
 8005e42:	e000      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005e44:	2300      	movs	r3, #0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00d      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e4a:	4b41      	ldr	r3, [pc, #260]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4e:	4a40      	ldr	r2, [pc, #256]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e54:	6593      	str	r3, [r2, #88]	; 0x58
 8005e56:	4b3e      	ldr	r3, [pc, #248]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e5e:	60bb      	str	r3, [r7, #8]
 8005e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e62:	2301      	movs	r3, #1
 8005e64:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e66:	4b3b      	ldr	r3, [pc, #236]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a3a      	ldr	r2, [pc, #232]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e72:	f7fc fe15 	bl	8002aa0 <HAL_GetTick>
 8005e76:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e78:	e009      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e7a:	f7fc fe11 	bl	8002aa0 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d902      	bls.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	74fb      	strb	r3, [r7, #19]
        break;
 8005e8c:	e005      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e8e:	4b31      	ldr	r3, [pc, #196]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d0ef      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005e9a:	7cfb      	ldrb	r3, [r7, #19]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d15b      	bne.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ea0:	4b2b      	ldr	r3, [pc, #172]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eaa:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d01f      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d019      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ebe:	4b24      	ldr	r3, [pc, #144]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ec8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005eca:	4b21      	ldr	r3, [pc, #132]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed0:	4a1f      	ldr	r2, [pc, #124]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ed6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005eda:	4b1d      	ldr	r3, [pc, #116]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee0:	4a1b      	ldr	r2, [pc, #108]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ee6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005eea:	4a19      	ldr	r2, [pc, #100]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d016      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005efc:	f7fc fdd0 	bl	8002aa0 <HAL_GetTick>
 8005f00:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f02:	e00b      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f04:	f7fc fdcc 	bl	8002aa0 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d902      	bls.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	74fb      	strb	r3, [r7, #19]
            break;
 8005f1a:	e006      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f1c:	4b0c      	ldr	r3, [pc, #48]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f22:	f003 0302 	and.w	r3, r3, #2
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d0ec      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005f2a:	7cfb      	ldrb	r3, [r7, #19]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10c      	bne.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f30:	4b07      	ldr	r3, [pc, #28]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f40:	4903      	ldr	r1, [pc, #12]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005f48:	e008      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f4a:	7cfb      	ldrb	r3, [r7, #19]
 8005f4c:	74bb      	strb	r3, [r7, #18]
 8005f4e:	e005      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005f50:	40021000 	.word	0x40021000
 8005f54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f58:	7cfb      	ldrb	r3, [r7, #19]
 8005f5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f5c:	7c7b      	ldrb	r3, [r7, #17]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d105      	bne.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f62:	4ba0      	ldr	r3, [pc, #640]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f66:	4a9f      	ldr	r2, [pc, #636]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00a      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f7a:	4b9a      	ldr	r3, [pc, #616]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f80:	f023 0203 	bic.w	r2, r3, #3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f88:	4996      	ldr	r1, [pc, #600]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0302 	and.w	r3, r3, #2
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00a      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f9c:	4b91      	ldr	r3, [pc, #580]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa2:	f023 020c 	bic.w	r2, r3, #12
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	498e      	ldr	r1, [pc, #568]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0304 	and.w	r3, r3, #4
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00a      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005fbe:	4b89      	ldr	r3, [pc, #548]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fcc:	4985      	ldr	r1, [pc, #532]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0308 	and.w	r3, r3, #8
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00a      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005fe0:	4b80      	ldr	r3, [pc, #512]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fee:	497d      	ldr	r1, [pc, #500]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0310 	and.w	r3, r3, #16
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00a      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006002:	4b78      	ldr	r3, [pc, #480]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006008:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006010:	4974      	ldr	r1, [pc, #464]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006012:	4313      	orrs	r3, r2
 8006014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0320 	and.w	r3, r3, #32
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00a      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006024:	4b6f      	ldr	r3, [pc, #444]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800602a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006032:	496c      	ldr	r1, [pc, #432]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006034:	4313      	orrs	r3, r2
 8006036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00a      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006046:	4b67      	ldr	r3, [pc, #412]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800604c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006054:	4963      	ldr	r1, [pc, #396]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006056:	4313      	orrs	r3, r2
 8006058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00a      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006068:	4b5e      	ldr	r3, [pc, #376]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800606a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800606e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006076:	495b      	ldr	r1, [pc, #364]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006078:	4313      	orrs	r3, r2
 800607a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00a      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800608a:	4b56      	ldr	r3, [pc, #344]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800608c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006090:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006098:	4952      	ldr	r1, [pc, #328]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800609a:	4313      	orrs	r3, r2
 800609c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00a      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060ac:	4b4d      	ldr	r3, [pc, #308]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ba:	494a      	ldr	r1, [pc, #296]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00a      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060ce:	4b45      	ldr	r3, [pc, #276]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060dc:	4941      	ldr	r1, [pc, #260]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00a      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80060f0:	4b3c      	ldr	r3, [pc, #240]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060f6:	f023 0203 	bic.w	r2, r3, #3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060fe:	4939      	ldr	r1, [pc, #228]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006100:	4313      	orrs	r3, r2
 8006102:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d028      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006112:	4b34      	ldr	r3, [pc, #208]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006118:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006120:	4930      	ldr	r1, [pc, #192]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006122:	4313      	orrs	r3, r2
 8006124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800612c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006130:	d106      	bne.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006132:	4b2c      	ldr	r3, [pc, #176]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	4a2b      	ldr	r2, [pc, #172]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800613c:	60d3      	str	r3, [r2, #12]
 800613e:	e011      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006144:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006148:	d10c      	bne.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	3304      	adds	r3, #4
 800614e:	2101      	movs	r1, #1
 8006150:	4618      	mov	r0, r3
 8006152:	f001 f81b 	bl	800718c <RCCEx_PLLSAI1_Config>
 8006156:	4603      	mov	r3, r0
 8006158:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800615a:	7cfb      	ldrb	r3, [r7, #19]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d001      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006160:	7cfb      	ldrb	r3, [r7, #19]
 8006162:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d04d      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006174:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006178:	d108      	bne.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800617a:	4b1a      	ldr	r3, [pc, #104]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800617c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006180:	4a18      	ldr	r2, [pc, #96]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006186:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800618a:	e012      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800618c:	4b15      	ldr	r3, [pc, #84]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800618e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006192:	4a14      	ldr	r2, [pc, #80]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006194:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006198:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800619c:	4b11      	ldr	r3, [pc, #68]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800619e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061aa:	490e      	ldr	r1, [pc, #56]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061ba:	d106      	bne.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061bc:	4b09      	ldr	r3, [pc, #36]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	4a08      	ldr	r2, [pc, #32]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061c6:	60d3      	str	r3, [r2, #12]
 80061c8:	e020      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061d2:	d109      	bne.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80061d4:	4b03      	ldr	r3, [pc, #12]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	4a02      	ldr	r2, [pc, #8]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061de:	60d3      	str	r3, [r2, #12]
 80061e0:	e014      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80061e2:	bf00      	nop
 80061e4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061f0:	d10c      	bne.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	3304      	adds	r3, #4
 80061f6:	2101      	movs	r1, #1
 80061f8:	4618      	mov	r0, r3
 80061fa:	f000 ffc7 	bl	800718c <RCCEx_PLLSAI1_Config>
 80061fe:	4603      	mov	r3, r0
 8006200:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006202:	7cfb      	ldrb	r3, [r7, #19]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d001      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006208:	7cfb      	ldrb	r3, [r7, #19]
 800620a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d028      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006218:	4b4a      	ldr	r3, [pc, #296]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800621a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800621e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006226:	4947      	ldr	r1, [pc, #284]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006228:	4313      	orrs	r3, r2
 800622a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006232:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006236:	d106      	bne.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006238:	4b42      	ldr	r3, [pc, #264]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	4a41      	ldr	r2, [pc, #260]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800623e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006242:	60d3      	str	r3, [r2, #12]
 8006244:	e011      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800624a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800624e:	d10c      	bne.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3304      	adds	r3, #4
 8006254:	2101      	movs	r1, #1
 8006256:	4618      	mov	r0, r3
 8006258:	f000 ff98 	bl	800718c <RCCEx_PLLSAI1_Config>
 800625c:	4603      	mov	r3, r0
 800625e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006260:	7cfb      	ldrb	r3, [r7, #19]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006266:	7cfb      	ldrb	r3, [r7, #19]
 8006268:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d01e      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006276:	4b33      	ldr	r3, [pc, #204]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800627c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006286:	492f      	ldr	r1, [pc, #188]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006288:	4313      	orrs	r3, r2
 800628a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006294:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006298:	d10c      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	3304      	adds	r3, #4
 800629e:	2102      	movs	r1, #2
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 ff73 	bl	800718c <RCCEx_PLLSAI1_Config>
 80062a6:	4603      	mov	r3, r0
 80062a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062aa:	7cfb      	ldrb	r3, [r7, #19]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80062b0:	7cfb      	ldrb	r3, [r7, #19]
 80062b2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00b      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80062c0:	4b20      	ldr	r3, [pc, #128]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062c6:	f023 0204 	bic.w	r2, r3, #4
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062d0:	491c      	ldr	r1, [pc, #112]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00b      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80062e4:	4b17      	ldr	r3, [pc, #92]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062ea:	f023 0218 	bic.w	r2, r3, #24
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f4:	4913      	ldr	r1, [pc, #76]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d017      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006308:	4b0e      	ldr	r3, [pc, #56]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800630a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800630e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006318:	490a      	ldr	r1, [pc, #40]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800631a:	4313      	orrs	r3, r2
 800631c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006326:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800632a:	d105      	bne.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800632c:	4b05      	ldr	r3, [pc, #20]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	4a04      	ldr	r2, [pc, #16]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006332:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006336:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006338:	7cbb      	ldrb	r3, [r7, #18]
}
 800633a:	4618      	mov	r0, r3
 800633c:	3718      	adds	r7, #24
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	40021000 	.word	0x40021000

08006348 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b088      	sub	sp, #32
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800635a:	d13e      	bne.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800635c:	4bb6      	ldr	r3, [pc, #728]	; (8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800635e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006366:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800636e:	d028      	beq.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006376:	f200 86f4 	bhi.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006380:	d005      	beq.n	800638e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006388:	d00e      	beq.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800638a:	f000 beea 	b.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800638e:	4baa      	ldr	r3, [pc, #680]	; (8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b02      	cmp	r3, #2
 800639a:	f040 86e4 	bne.w	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 800639e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063a2:	61fb      	str	r3, [r7, #28]
      break;
 80063a4:	f000 bedf 	b.w	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80063a8:	4ba3      	ldr	r3, [pc, #652]	; (8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80063aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	f040 86d9 	bne.w	800716a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 80063b8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80063bc:	61fb      	str	r3, [r7, #28]
      break;
 80063be:	f000 bed4 	b.w	800716a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80063c2:	4b9d      	ldr	r3, [pc, #628]	; (8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063ce:	f040 86ce 	bne.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 80063d2:	4b9a      	ldr	r3, [pc, #616]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80063d4:	61fb      	str	r3, [r7, #28]
      break;
 80063d6:	f000 beca 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063da:	4b97      	ldr	r3, [pc, #604]	; (8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f003 0303 	and.w	r3, r3, #3
 80063e2:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	2b03      	cmp	r3, #3
 80063e8:	d036      	beq.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	2b03      	cmp	r3, #3
 80063ee:	d840      	bhi.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d003      	beq.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d020      	beq.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80063fc:	e039      	b.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80063fe:	4b8e      	ldr	r3, [pc, #568]	; (8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b02      	cmp	r3, #2
 8006408:	d116      	bne.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800640a:	4b8b      	ldr	r3, [pc, #556]	; (8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0308 	and.w	r3, r3, #8
 8006412:	2b00      	cmp	r3, #0
 8006414:	d005      	beq.n	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8006416:	4b88      	ldr	r3, [pc, #544]	; (8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	091b      	lsrs	r3, r3, #4
 800641c:	f003 030f 	and.w	r3, r3, #15
 8006420:	e005      	b.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8006422:	4b85      	ldr	r3, [pc, #532]	; (8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006428:	0a1b      	lsrs	r3, r3, #8
 800642a:	f003 030f 	and.w	r3, r3, #15
 800642e:	4a84      	ldr	r2, [pc, #528]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006434:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006436:	e01f      	b.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	61bb      	str	r3, [r7, #24]
      break;
 800643c:	e01c      	b.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800643e:	4b7e      	ldr	r3, [pc, #504]	; (8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800644a:	d102      	bne.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800644c:	4b7d      	ldr	r3, [pc, #500]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800644e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006450:	e012      	b.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006452:	2300      	movs	r3, #0
 8006454:	61bb      	str	r3, [r7, #24]
      break;
 8006456:	e00f      	b.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006458:	4b77      	ldr	r3, [pc, #476]	; (8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006460:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006464:	d102      	bne.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8006466:	4b78      	ldr	r3, [pc, #480]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8006468:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800646a:	e005      	b.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800646c:	2300      	movs	r3, #0
 800646e:	61bb      	str	r3, [r7, #24]
      break;
 8006470:	e002      	b.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	61bb      	str	r3, [r7, #24]
      break;
 8006476:	bf00      	nop
    }

    switch(PeriphClk)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800647e:	f000 8606 	beq.w	800708e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006488:	f200 8673 	bhi.w	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006492:	f000 8469 	beq.w	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800649c:	f200 8669 	bhi.w	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064a6:	f000 8531 	beq.w	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064b0:	f200 865f 	bhi.w	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80064ba:	f000 8187 	beq.w	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80064c4:	f200 8655 	bhi.w	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064ce:	f000 80cd 	beq.w	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064d8:	f200 864b 	bhi.w	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064e2:	f000 8430 	beq.w	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ec:	f200 8641 	bhi.w	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064f6:	f000 83e4 	beq.w	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006500:	f200 8637 	bhi.w	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800650a:	f000 80af 	beq.w	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006514:	f200 862d 	bhi.w	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800651e:	f000 809d 	beq.w	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006528:	f200 8623 	bhi.w	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006532:	f000 808b 	beq.w	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800653c:	f200 8619 	bhi.w	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006546:	f000 8554 	beq.w	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006550:	f200 860f 	bhi.w	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800655a:	f000 8500 	beq.w	8006f5e <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006564:	f200 8605 	bhi.w	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800656e:	f000 84a1 	beq.w	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006578:	f200 85fb 	bhi.w	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b80      	cmp	r3, #128	; 0x80
 8006580:	f000 846c 	beq.w	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b80      	cmp	r3, #128	; 0x80
 8006588:	f200 85f3 	bhi.w	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b20      	cmp	r3, #32
 8006590:	d84c      	bhi.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	f000 85ec 	beq.w	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	3b01      	subs	r3, #1
 800659e:	2b1f      	cmp	r3, #31
 80065a0:	f200 85e7 	bhi.w	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80065a4:	a201      	add	r2, pc, #4	; (adr r2, 80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80065a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065aa:	bf00      	nop
 80065ac:	080069c1 	.word	0x080069c1
 80065b0:	08006a2f 	.word	0x08006a2f
 80065b4:	08007173 	.word	0x08007173
 80065b8:	08006ac3 	.word	0x08006ac3
 80065bc:	08007173 	.word	0x08007173
 80065c0:	08007173 	.word	0x08007173
 80065c4:	08007173 	.word	0x08007173
 80065c8:	08006b3b 	.word	0x08006b3b
 80065cc:	08007173 	.word	0x08007173
 80065d0:	08007173 	.word	0x08007173
 80065d4:	08007173 	.word	0x08007173
 80065d8:	08007173 	.word	0x08007173
 80065dc:	08007173 	.word	0x08007173
 80065e0:	08007173 	.word	0x08007173
 80065e4:	08007173 	.word	0x08007173
 80065e8:	08006bbf 	.word	0x08006bbf
 80065ec:	08007173 	.word	0x08007173
 80065f0:	08007173 	.word	0x08007173
 80065f4:	08007173 	.word	0x08007173
 80065f8:	08007173 	.word	0x08007173
 80065fc:	08007173 	.word	0x08007173
 8006600:	08007173 	.word	0x08007173
 8006604:	08007173 	.word	0x08007173
 8006608:	08007173 	.word	0x08007173
 800660c:	08007173 	.word	0x08007173
 8006610:	08007173 	.word	0x08007173
 8006614:	08007173 	.word	0x08007173
 8006618:	08007173 	.word	0x08007173
 800661c:	08007173 	.word	0x08007173
 8006620:	08007173 	.word	0x08007173
 8006624:	08007173 	.word	0x08007173
 8006628:	08006c41 	.word	0x08006c41
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b40      	cmp	r3, #64	; 0x40
 8006630:	f000 83e8 	beq.w	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8006634:	f000 bd9d 	b.w	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006638:	40021000 	.word	0x40021000
 800663c:	0003d090 	.word	0x0003d090
 8006640:	08014238 	.word	0x08014238
 8006644:	00f42400 	.word	0x00f42400
 8006648:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800664c:	69b9      	ldr	r1, [r7, #24]
 800664e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006652:	f000 ff83 	bl	800755c <RCCEx_GetSAIxPeriphCLKFreq>
 8006656:	61f8      	str	r0, [r7, #28]
      break;
 8006658:	f000 bd8e 	b.w	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800665c:	69b9      	ldr	r1, [r7, #24]
 800665e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006662:	f000 ff7b 	bl	800755c <RCCEx_GetSAIxPeriphCLKFreq>
 8006666:	61f8      	str	r0, [r7, #28]
      break;
 8006668:	f000 bd86 	b.w	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800666c:	4b9a      	ldr	r3, [pc, #616]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800666e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006672:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006676:	60fb      	str	r3, [r7, #12]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800667e:	d015      	beq.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006686:	f200 8092 	bhi.w	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006690:	d029      	beq.n	80066e6 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006698:	f200 8089 	bhi.w	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d07b      	beq.n	800679a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066a8:	d04a      	beq.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 80066aa:	e080      	b.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80066ac:	4b8a      	ldr	r3, [pc, #552]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d17d      	bne.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80066b8:	4b87      	ldr	r3, [pc, #540]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0308 	and.w	r3, r3, #8
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d005      	beq.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 80066c4:	4b84      	ldr	r3, [pc, #528]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	091b      	lsrs	r3, r3, #4
 80066ca:	f003 030f 	and.w	r3, r3, #15
 80066ce:	e005      	b.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 80066d0:	4b81      	ldr	r3, [pc, #516]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80066d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066d6:	0a1b      	lsrs	r3, r3, #8
 80066d8:	f003 030f 	and.w	r3, r3, #15
 80066dc:	4a7f      	ldr	r2, [pc, #508]	; (80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80066de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066e2:	61fb      	str	r3, [r7, #28]
          break;
 80066e4:	e066      	b.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80066e6:	4b7c      	ldr	r3, [pc, #496]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066f2:	d162      	bne.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80066f4:	4b78      	ldr	r3, [pc, #480]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006700:	d15b      	bne.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006702:	4b75      	ldr	r3, [pc, #468]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	0a1b      	lsrs	r3, r3, #8
 8006708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800670c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	fb03 f202 	mul.w	r2, r3, r2
 8006716:	4b70      	ldr	r3, [pc, #448]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	091b      	lsrs	r3, r3, #4
 800671c:	f003 030f 	and.w	r3, r3, #15
 8006720:	3301      	adds	r3, #1
 8006722:	fbb2 f3f3 	udiv	r3, r2, r3
 8006726:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006728:	4b6b      	ldr	r3, [pc, #428]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	0d5b      	lsrs	r3, r3, #21
 800672e:	f003 0303 	and.w	r3, r3, #3
 8006732:	3301      	adds	r3, #1
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	fbb2 f3f3 	udiv	r3, r2, r3
 800673c:	61fb      	str	r3, [r7, #28]
          break;
 800673e:	e03c      	b.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006740:	4b65      	ldr	r3, [pc, #404]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006748:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800674c:	d138      	bne.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800674e:	4b62      	ldr	r3, [pc, #392]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800675a:	d131      	bne.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800675c:	4b5e      	ldr	r3, [pc, #376]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	0a1b      	lsrs	r3, r3, #8
 8006762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006766:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	fb03 f202 	mul.w	r2, r3, r2
 8006770:	4b59      	ldr	r3, [pc, #356]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	091b      	lsrs	r3, r3, #4
 8006776:	f003 030f 	and.w	r3, r3, #15
 800677a:	3301      	adds	r3, #1
 800677c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006780:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006782:	4b55      	ldr	r3, [pc, #340]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	0d5b      	lsrs	r3, r3, #21
 8006788:	f003 0303 	and.w	r3, r3, #3
 800678c:	3301      	adds	r3, #1
 800678e:	005b      	lsls	r3, r3, #1
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	fbb2 f3f3 	udiv	r3, r2, r3
 8006796:	61fb      	str	r3, [r7, #28]
          break;
 8006798:	e012      	b.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800679a:	4b4f      	ldr	r3, [pc, #316]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800679c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067a0:	f003 0302 	and.w	r3, r3, #2
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d10e      	bne.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 80067a8:	4b4d      	ldr	r3, [pc, #308]	; (80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80067aa:	61fb      	str	r3, [r7, #28]
          break;
 80067ac:	e00b      	b.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 80067ae:	bf00      	nop
 80067b0:	f000 bce2 	b.w	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80067b4:	bf00      	nop
 80067b6:	f000 bcdf 	b.w	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80067ba:	bf00      	nop
 80067bc:	f000 bcdc 	b.w	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80067c0:	bf00      	nop
 80067c2:	f000 bcd9 	b.w	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80067c6:	bf00      	nop
        break;
 80067c8:	f000 bcd6 	b.w	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80067cc:	4b42      	ldr	r3, [pc, #264]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80067ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067da:	d13d      	bne.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80067dc:	4b3e      	ldr	r3, [pc, #248]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067e8:	f040 84c5 	bne.w	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80067ec:	4b3a      	ldr	r3, [pc, #232]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067f8:	f040 84bd 	bne.w	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80067fc:	4b36      	ldr	r3, [pc, #216]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	0a1b      	lsrs	r3, r3, #8
 8006802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006806:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	fb03 f202 	mul.w	r2, r3, r2
 8006810:	4b31      	ldr	r3, [pc, #196]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	091b      	lsrs	r3, r3, #4
 8006816:	f003 030f 	and.w	r3, r3, #15
 800681a:	3301      	adds	r3, #1
 800681c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006820:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006822:	4b2d      	ldr	r3, [pc, #180]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	0edb      	lsrs	r3, r3, #27
 8006828:	f003 031f 	and.w	r3, r3, #31
 800682c:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10a      	bne.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006834:	4b28      	ldr	r3, [pc, #160]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d002      	beq.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8006840:	2311      	movs	r3, #17
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	e001      	b.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8006846:	2307      	movs	r3, #7
 8006848:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800684a:	69ba      	ldr	r2, [r7, #24]
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006852:	61fb      	str	r3, [r7, #28]
      break;
 8006854:	f000 bc8f 	b.w	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006858:	4b1f      	ldr	r3, [pc, #124]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800685a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800685e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006862:	60fb      	str	r3, [r7, #12]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800686a:	d016      	beq.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006872:	f200 809b 	bhi.w	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800687c:	d032      	beq.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006884:	f200 8092 	bhi.w	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2b00      	cmp	r3, #0
 800688c:	f000 8084 	beq.w	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006896:	d052      	beq.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8006898:	e088      	b.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800689a:	4b0f      	ldr	r3, [pc, #60]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	f040 8084 	bne.w	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80068a8:	4b0b      	ldr	r3, [pc, #44]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0308 	and.w	r3, r3, #8
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d005      	beq.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80068b4:	4b08      	ldr	r3, [pc, #32]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	091b      	lsrs	r3, r3, #4
 80068ba:	f003 030f 	and.w	r3, r3, #15
 80068be:	e005      	b.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 80068c0:	4b05      	ldr	r3, [pc, #20]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068c6:	0a1b      	lsrs	r3, r3, #8
 80068c8:	f003 030f 	and.w	r3, r3, #15
 80068cc:	4a03      	ldr	r2, [pc, #12]	; (80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80068ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068d2:	61fb      	str	r3, [r7, #28]
          break;
 80068d4:	e06c      	b.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 80068d6:	bf00      	nop
 80068d8:	40021000 	.word	0x40021000
 80068dc:	08014238 	.word	0x08014238
 80068e0:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80068e4:	4ba5      	ldr	r3, [pc, #660]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068f0:	d160      	bne.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80068f2:	4ba2      	ldr	r3, [pc, #648]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068fe:	d159      	bne.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006900:	4b9e      	ldr	r3, [pc, #632]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	0a1b      	lsrs	r3, r3, #8
 8006906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800690a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	fb03 f202 	mul.w	r2, r3, r2
 8006914:	4b99      	ldr	r3, [pc, #612]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	091b      	lsrs	r3, r3, #4
 800691a:	f003 030f 	and.w	r3, r3, #15
 800691e:	3301      	adds	r3, #1
 8006920:	fbb2 f3f3 	udiv	r3, r2, r3
 8006924:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006926:	4b95      	ldr	r3, [pc, #596]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	0d5b      	lsrs	r3, r3, #21
 800692c:	f003 0303 	and.w	r3, r3, #3
 8006930:	3301      	adds	r3, #1
 8006932:	005b      	lsls	r3, r3, #1
 8006934:	69ba      	ldr	r2, [r7, #24]
 8006936:	fbb2 f3f3 	udiv	r3, r2, r3
 800693a:	61fb      	str	r3, [r7, #28]
          break;
 800693c:	e03a      	b.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800693e:	4b8f      	ldr	r3, [pc, #572]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006946:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800694a:	d135      	bne.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800694c:	4b8b      	ldr	r3, [pc, #556]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006958:	d12e      	bne.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800695a:	4b88      	ldr	r3, [pc, #544]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	0a1b      	lsrs	r3, r3, #8
 8006960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006964:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	fb03 f202 	mul.w	r2, r3, r2
 800696e:	4b83      	ldr	r3, [pc, #524]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	091b      	lsrs	r3, r3, #4
 8006974:	f003 030f 	and.w	r3, r3, #15
 8006978:	3301      	adds	r3, #1
 800697a:	fbb2 f3f3 	udiv	r3, r2, r3
 800697e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006980:	4b7e      	ldr	r3, [pc, #504]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	0d5b      	lsrs	r3, r3, #21
 8006986:	f003 0303 	and.w	r3, r3, #3
 800698a:	3301      	adds	r3, #1
 800698c:	005b      	lsls	r3, r3, #1
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	fbb2 f3f3 	udiv	r3, r2, r3
 8006994:	61fb      	str	r3, [r7, #28]
          break;
 8006996:	e00f      	b.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006998:	4b78      	ldr	r3, [pc, #480]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800699a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d10a      	bne.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 80069a6:	4b76      	ldr	r3, [pc, #472]	; (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80069a8:	61fb      	str	r3, [r7, #28]
          break;
 80069aa:	e007      	b.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 80069ac:	bf00      	nop
 80069ae:	e3e2      	b.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80069b0:	bf00      	nop
 80069b2:	e3e0      	b.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80069b4:	bf00      	nop
 80069b6:	e3de      	b.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80069b8:	bf00      	nop
 80069ba:	e3dc      	b.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80069bc:	bf00      	nop
      break;
 80069be:	e3da      	b.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80069c0:	4b6e      	ldr	r3, [pc, #440]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80069c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069c6:	f003 0303 	and.w	r3, r3, #3
 80069ca:	60fb      	str	r3, [r7, #12]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2b03      	cmp	r3, #3
 80069d0:	d827      	bhi.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80069d2:	a201      	add	r2, pc, #4	; (adr r2, 80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 80069d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d8:	080069e9 	.word	0x080069e9
 80069dc:	080069f1 	.word	0x080069f1
 80069e0:	080069f9 	.word	0x080069f9
 80069e4:	08006a0d 	.word	0x08006a0d
          frequency = HAL_RCC_GetPCLK2Freq();
 80069e8:	f7ff f87c 	bl	8005ae4 <HAL_RCC_GetPCLK2Freq>
 80069ec:	61f8      	str	r0, [r7, #28]
          break;
 80069ee:	e01d      	b.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 80069f0:	f7fe ffca 	bl	8005988 <HAL_RCC_GetSysClockFreq>
 80069f4:	61f8      	str	r0, [r7, #28]
          break;
 80069f6:	e019      	b.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069f8:	4b60      	ldr	r3, [pc, #384]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a04:	d10f      	bne.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8006a06:	4b5f      	ldr	r3, [pc, #380]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a08:	61fb      	str	r3, [r7, #28]
          break;
 8006a0a:	e00c      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a0c:	4b5b      	ldr	r3, [pc, #364]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d107      	bne.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8006a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a1e:	61fb      	str	r3, [r7, #28]
          break;
 8006a20:	e003      	b.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8006a22:	bf00      	nop
 8006a24:	e3a8      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a26:	bf00      	nop
 8006a28:	e3a6      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a2a:	bf00      	nop
        break;
 8006a2c:	e3a4      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006a2e:	4b53      	ldr	r3, [pc, #332]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a34:	f003 030c 	and.w	r3, r3, #12
 8006a38:	60fb      	str	r3, [r7, #12]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2b0c      	cmp	r3, #12
 8006a3e:	d83a      	bhi.n	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006a40:	a201      	add	r2, pc, #4	; (adr r2, 8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8006a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a46:	bf00      	nop
 8006a48:	08006a7d 	.word	0x08006a7d
 8006a4c:	08006ab7 	.word	0x08006ab7
 8006a50:	08006ab7 	.word	0x08006ab7
 8006a54:	08006ab7 	.word	0x08006ab7
 8006a58:	08006a85 	.word	0x08006a85
 8006a5c:	08006ab7 	.word	0x08006ab7
 8006a60:	08006ab7 	.word	0x08006ab7
 8006a64:	08006ab7 	.word	0x08006ab7
 8006a68:	08006a8d 	.word	0x08006a8d
 8006a6c:	08006ab7 	.word	0x08006ab7
 8006a70:	08006ab7 	.word	0x08006ab7
 8006a74:	08006ab7 	.word	0x08006ab7
 8006a78:	08006aa1 	.word	0x08006aa1
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a7c:	f7ff f81c 	bl	8005ab8 <HAL_RCC_GetPCLK1Freq>
 8006a80:	61f8      	str	r0, [r7, #28]
          break;
 8006a82:	e01d      	b.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8006a84:	f7fe ff80 	bl	8005988 <HAL_RCC_GetSysClockFreq>
 8006a88:	61f8      	str	r0, [r7, #28]
          break;
 8006a8a:	e019      	b.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a8c:	4b3b      	ldr	r3, [pc, #236]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a98:	d10f      	bne.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8006a9a:	4b3a      	ldr	r3, [pc, #232]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a9c:	61fb      	str	r3, [r7, #28]
          break;
 8006a9e:	e00c      	b.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006aa0:	4b36      	ldr	r3, [pc, #216]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d107      	bne.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8006aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ab2:	61fb      	str	r3, [r7, #28]
          break;
 8006ab4:	e003      	b.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8006ab6:	bf00      	nop
 8006ab8:	e35e      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006aba:	bf00      	nop
 8006abc:	e35c      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006abe:	bf00      	nop
        break;
 8006ac0:	e35a      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006ac2:	4b2e      	ldr	r3, [pc, #184]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ac8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006acc:	60fb      	str	r3, [r7, #12]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2b30      	cmp	r3, #48	; 0x30
 8006ad2:	d021      	beq.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2b30      	cmp	r3, #48	; 0x30
 8006ad8:	d829      	bhi.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2b20      	cmp	r3, #32
 8006ade:	d011      	beq.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2b20      	cmp	r3, #32
 8006ae4:	d823      	bhi.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d003      	beq.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2b10      	cmp	r3, #16
 8006af0:	d004      	beq.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8006af2:	e01c      	b.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006af4:	f7fe ffe0 	bl	8005ab8 <HAL_RCC_GetPCLK1Freq>
 8006af8:	61f8      	str	r0, [r7, #28]
          break;
 8006afa:	e01d      	b.n	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006afc:	f7fe ff44 	bl	8005988 <HAL_RCC_GetSysClockFreq>
 8006b00:	61f8      	str	r0, [r7, #28]
          break;
 8006b02:	e019      	b.n	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b04:	4b1d      	ldr	r3, [pc, #116]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b10:	d10f      	bne.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8006b12:	4b1c      	ldr	r3, [pc, #112]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b14:	61fb      	str	r3, [r7, #28]
          break;
 8006b16:	e00c      	b.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b18:	4b18      	ldr	r3, [pc, #96]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d107      	bne.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8006b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b2a:	61fb      	str	r3, [r7, #28]
          break;
 8006b2c:	e003      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8006b2e:	bf00      	nop
 8006b30:	e322      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006b32:	bf00      	nop
 8006b34:	e320      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006b36:	bf00      	nop
        break;
 8006b38:	e31e      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006b3a:	4b10      	ldr	r3, [pc, #64]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b40:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b44:	60fb      	str	r3, [r7, #12]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2bc0      	cmp	r3, #192	; 0xc0
 8006b4a:	d027      	beq.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2bc0      	cmp	r3, #192	; 0xc0
 8006b50:	d82f      	bhi.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2b80      	cmp	r3, #128	; 0x80
 8006b56:	d017      	beq.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2b80      	cmp	r3, #128	; 0x80
 8006b5c:	d829      	bhi.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d003      	beq.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2b40      	cmp	r3, #64	; 0x40
 8006b68:	d004      	beq.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8006b6a:	e022      	b.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b6c:	f7fe ffa4 	bl	8005ab8 <HAL_RCC_GetPCLK1Freq>
 8006b70:	61f8      	str	r0, [r7, #28]
          break;
 8006b72:	e023      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8006b74:	f7fe ff08 	bl	8005988 <HAL_RCC_GetSysClockFreq>
 8006b78:	61f8      	str	r0, [r7, #28]
          break;
 8006b7a:	e01f      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8006b7c:	40021000 	.word	0x40021000
 8006b80:	02dc6c00 	.word	0x02dc6c00
 8006b84:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b88:	4b9b      	ldr	r3, [pc, #620]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b94:	d10f      	bne.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8006b96:	4b99      	ldr	r3, [pc, #612]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006b98:	61fb      	str	r3, [r7, #28]
          break;
 8006b9a:	e00c      	b.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b9c:	4b96      	ldr	r3, [pc, #600]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d107      	bne.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8006baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bae:	61fb      	str	r3, [r7, #28]
          break;
 8006bb0:	e003      	b.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8006bb2:	bf00      	nop
 8006bb4:	e2e0      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006bb6:	bf00      	nop
 8006bb8:	e2de      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006bba:	bf00      	nop
        break;
 8006bbc:	e2dc      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006bbe:	4b8e      	ldr	r3, [pc, #568]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bc8:	60fb      	str	r3, [r7, #12]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bd0:	d025      	beq.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bd8:	d82c      	bhi.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006be0:	d013      	beq.n	8006c0a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006be8:	d824      	bhi.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d004      	beq.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bf6:	d004      	beq.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8006bf8:	e01c      	b.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006bfa:	f7fe ff5d 	bl	8005ab8 <HAL_RCC_GetPCLK1Freq>
 8006bfe:	61f8      	str	r0, [r7, #28]
          break;
 8006c00:	e01d      	b.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c02:	f7fe fec1 	bl	8005988 <HAL_RCC_GetSysClockFreq>
 8006c06:	61f8      	str	r0, [r7, #28]
          break;
 8006c08:	e019      	b.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c0a:	4b7b      	ldr	r3, [pc, #492]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c16:	d10f      	bne.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8006c18:	4b78      	ldr	r3, [pc, #480]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006c1a:	61fb      	str	r3, [r7, #28]
          break;
 8006c1c:	e00c      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c1e:	4b76      	ldr	r3, [pc, #472]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d107      	bne.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8006c2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c30:	61fb      	str	r3, [r7, #28]
          break;
 8006c32:	e003      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8006c34:	bf00      	nop
 8006c36:	e29f      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006c38:	bf00      	nop
 8006c3a:	e29d      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006c3c:	bf00      	nop
        break;
 8006c3e:	e29b      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006c40:	4b6d      	ldr	r3, [pc, #436]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c46:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c4a:	60fb      	str	r3, [r7, #12]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c52:	d025      	beq.n	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c5a:	d82c      	bhi.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c62:	d013      	beq.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c6a:	d824      	bhi.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d004      	beq.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c78:	d004      	beq.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8006c7a:	e01c      	b.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c7c:	f7fe ff1c 	bl	8005ab8 <HAL_RCC_GetPCLK1Freq>
 8006c80:	61f8      	str	r0, [r7, #28]
          break;
 8006c82:	e01d      	b.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c84:	f7fe fe80 	bl	8005988 <HAL_RCC_GetSysClockFreq>
 8006c88:	61f8      	str	r0, [r7, #28]
          break;
 8006c8a:	e019      	b.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c8c:	4b5a      	ldr	r3, [pc, #360]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c98:	d10f      	bne.n	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8006c9a:	4b58      	ldr	r3, [pc, #352]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006c9c:	61fb      	str	r3, [r7, #28]
          break;
 8006c9e:	e00c      	b.n	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006ca0:	4b55      	ldr	r3, [pc, #340]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d107      	bne.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8006cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cb2:	61fb      	str	r3, [r7, #28]
          break;
 8006cb4:	e003      	b.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8006cb6:	bf00      	nop
 8006cb8:	e25e      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006cba:	bf00      	nop
 8006cbc:	e25c      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006cbe:	bf00      	nop
        break;
 8006cc0:	e25a      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006cc2:	4b4d      	ldr	r3, [pc, #308]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ccc:	60fb      	str	r3, [r7, #12]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cd4:	d007      	beq.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cdc:	d12f      	bne.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006cde:	f7fe fe53 	bl	8005988 <HAL_RCC_GetSysClockFreq>
 8006ce2:	61f8      	str	r0, [r7, #28]
          break;
 8006ce4:	e02e      	b.n	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8006ce6:	4b44      	ldr	r3, [pc, #272]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cf2:	d126      	bne.n	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8006cf4:	4b40      	ldr	r3, [pc, #256]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d020      	beq.n	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006d00:	4b3d      	ldr	r3, [pc, #244]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	0a1b      	lsrs	r3, r3, #8
 8006d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d0a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	fb03 f202 	mul.w	r2, r3, r2
 8006d14:	4b38      	ldr	r3, [pc, #224]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	091b      	lsrs	r3, r3, #4
 8006d1a:	f003 030f 	and.w	r3, r3, #15
 8006d1e:	3301      	adds	r3, #1
 8006d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d24:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006d26:	4b34      	ldr	r3, [pc, #208]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	0e5b      	lsrs	r3, r3, #25
 8006d2c:	f003 0303 	and.w	r3, r3, #3
 8006d30:	3301      	adds	r3, #1
 8006d32:	005b      	lsls	r3, r3, #1
 8006d34:	69ba      	ldr	r2, [r7, #24]
 8006d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d3a:	61fb      	str	r3, [r7, #28]
          break;
 8006d3c:	e001      	b.n	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8006d3e:	bf00      	nop
 8006d40:	e21a      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006d42:	bf00      	nop
        break;
 8006d44:	e218      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006d46:	4b2c      	ldr	r3, [pc, #176]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d4c:	f003 0304 	and.w	r3, r3, #4
 8006d50:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d103      	bne.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006d58:	f7fe fec4 	bl	8005ae4 <HAL_RCC_GetPCLK2Freq>
 8006d5c:	61f8      	str	r0, [r7, #28]
        break;
 8006d5e:	e20b      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d60:	f7fe fe12 	bl	8005988 <HAL_RCC_GetSysClockFreq>
 8006d64:	61f8      	str	r0, [r7, #28]
        break;
 8006d66:	e207      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8006d68:	4b23      	ldr	r3, [pc, #140]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d6e:	f003 0318 	and.w	r3, r3, #24
 8006d72:	60fb      	str	r3, [r7, #12]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2b10      	cmp	r3, #16
 8006d78:	d010      	beq.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2b10      	cmp	r3, #16
 8006d7e:	d834      	bhi.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d003      	beq.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2b08      	cmp	r3, #8
 8006d8a:	d024      	beq.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8006d8c:	e02d      	b.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006d8e:	69b9      	ldr	r1, [r7, #24]
 8006d90:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006d94:	f000 fbe2 	bl	800755c <RCCEx_GetSAIxPeriphCLKFreq>
 8006d98:	61f8      	str	r0, [r7, #28]
          break;
 8006d9a:	e02b      	b.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006d9c:	4b16      	ldr	r3, [pc, #88]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0302 	and.w	r3, r3, #2
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d122      	bne.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006da8:	4b13      	ldr	r3, [pc, #76]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0308 	and.w	r3, r3, #8
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d005      	beq.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8006db4:	4b10      	ldr	r3, [pc, #64]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	091b      	lsrs	r3, r3, #4
 8006dba:	f003 030f 	and.w	r3, r3, #15
 8006dbe:	e005      	b.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8006dc0:	4b0d      	ldr	r3, [pc, #52]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dc6:	0a1b      	lsrs	r3, r3, #8
 8006dc8:	f003 030f 	and.w	r3, r3, #15
 8006dcc:	4a0c      	ldr	r2, [pc, #48]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dd2:	61fb      	str	r3, [r7, #28]
          break;
 8006dd4:	e00b      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006dd6:	4b08      	ldr	r3, [pc, #32]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006de2:	d106      	bne.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8006de4:	4b05      	ldr	r3, [pc, #20]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006de6:	61fb      	str	r3, [r7, #28]
          break;
 8006de8:	e003      	b.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8006dea:	bf00      	nop
 8006dec:	e1c4      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006dee:	bf00      	nop
 8006df0:	e1c2      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006df2:	bf00      	nop
        break;
 8006df4:	e1c0      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8006df6:	bf00      	nop
 8006df8:	40021000 	.word	0x40021000
 8006dfc:	00f42400 	.word	0x00f42400
 8006e00:	08014238 	.word	0x08014238
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006e04:	4b96      	ldr	r3, [pc, #600]	; (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e0a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006e0e:	60fb      	str	r3, [r7, #12]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e16:	d013      	beq.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e1e:	d819      	bhi.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d004      	beq.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e2c:	d004      	beq.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8006e2e:	e011      	b.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e30:	f7fe fe42 	bl	8005ab8 <HAL_RCC_GetPCLK1Freq>
 8006e34:	61f8      	str	r0, [r7, #28]
          break;
 8006e36:	e010      	b.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8006e38:	f7fe fda6 	bl	8005988 <HAL_RCC_GetSysClockFreq>
 8006e3c:	61f8      	str	r0, [r7, #28]
          break;
 8006e3e:	e00c      	b.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e40:	4b87      	ldr	r3, [pc, #540]	; (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e4c:	d104      	bne.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8006e4e:	4b85      	ldr	r3, [pc, #532]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006e50:	61fb      	str	r3, [r7, #28]
          break;
 8006e52:	e001      	b.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8006e54:	bf00      	nop
 8006e56:	e18f      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006e58:	bf00      	nop
        break;
 8006e5a:	e18d      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006e5c:	4b80      	ldr	r3, [pc, #512]	; (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e6e:	d013      	beq.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e76:	d819      	bhi.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d004      	beq.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e84:	d004      	beq.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8006e86:	e011      	b.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e88:	f7fe fe16 	bl	8005ab8 <HAL_RCC_GetPCLK1Freq>
 8006e8c:	61f8      	str	r0, [r7, #28]
          break;
 8006e8e:	e010      	b.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006e90:	f7fe fd7a 	bl	8005988 <HAL_RCC_GetSysClockFreq>
 8006e94:	61f8      	str	r0, [r7, #28]
          break;
 8006e96:	e00c      	b.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e98:	4b71      	ldr	r3, [pc, #452]	; (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ea4:	d104      	bne.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8006ea6:	4b6f      	ldr	r3, [pc, #444]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006ea8:	61fb      	str	r3, [r7, #28]
          break;
 8006eaa:	e001      	b.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8006eac:	bf00      	nop
 8006eae:	e163      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006eb0:	bf00      	nop
        break;
 8006eb2:	e161      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006eb4:	4b6a      	ldr	r3, [pc, #424]	; (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ebe:	60fb      	str	r3, [r7, #12]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ec6:	d013      	beq.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ece:	d819      	bhi.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d004      	beq.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006edc:	d004      	beq.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8006ede:	e011      	b.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ee0:	f7fe fdea 	bl	8005ab8 <HAL_RCC_GetPCLK1Freq>
 8006ee4:	61f8      	str	r0, [r7, #28]
          break;
 8006ee6:	e010      	b.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ee8:	f7fe fd4e 	bl	8005988 <HAL_RCC_GetSysClockFreq>
 8006eec:	61f8      	str	r0, [r7, #28]
          break;
 8006eee:	e00c      	b.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ef0:	4b5b      	ldr	r3, [pc, #364]	; (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006efc:	d104      	bne.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8006efe:	4b59      	ldr	r3, [pc, #356]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006f00:	61fb      	str	r3, [r7, #28]
          break;
 8006f02:	e001      	b.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8006f04:	bf00      	nop
 8006f06:	e137      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006f08:	bf00      	nop
        break;
 8006f0a:	e135      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006f0c:	4b54      	ldr	r3, [pc, #336]	; (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006f0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f12:	f003 0303 	and.w	r3, r3, #3
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d011      	beq.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d818      	bhi.n	8006f56 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d003      	beq.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d004      	beq.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8006f30:	e011      	b.n	8006f56 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f32:	f7fe fdc1 	bl	8005ab8 <HAL_RCC_GetPCLK1Freq>
 8006f36:	61f8      	str	r0, [r7, #28]
          break;
 8006f38:	e010      	b.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f3a:	f7fe fd25 	bl	8005988 <HAL_RCC_GetSysClockFreq>
 8006f3e:	61f8      	str	r0, [r7, #28]
          break;
 8006f40:	e00c      	b.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f42:	4b47      	ldr	r3, [pc, #284]	; (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f4e:	d104      	bne.n	8006f5a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8006f50:	4b44      	ldr	r3, [pc, #272]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006f52:	61fb      	str	r3, [r7, #28]
          break;
 8006f54:	e001      	b.n	8006f5a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8006f56:	bf00      	nop
 8006f58:	e10e      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006f5a:	bf00      	nop
        break;
 8006f5c:	e10c      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006f5e:	4b40      	ldr	r3, [pc, #256]	; (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f64:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006f68:	60fb      	str	r3, [r7, #12]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006f70:	d02c      	beq.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006f78:	d833      	bhi.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006f80:	d01a      	beq.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006f88:	d82b      	bhi.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d004      	beq.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f96:	d004      	beq.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8006f98:	e023      	b.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f9a:	f7fe fd8d 	bl	8005ab8 <HAL_RCC_GetPCLK1Freq>
 8006f9e:	61f8      	str	r0, [r7, #28]
          break;
 8006fa0:	e026      	b.n	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006fa2:	4b2f      	ldr	r3, [pc, #188]	; (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fa8:	f003 0302 	and.w	r3, r3, #2
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d11a      	bne.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8006fb0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006fb4:	61fb      	str	r3, [r7, #28]
          break;
 8006fb6:	e016      	b.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fb8:	4b29      	ldr	r3, [pc, #164]	; (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fc4:	d111      	bne.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8006fc6:	4b27      	ldr	r3, [pc, #156]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006fc8:	61fb      	str	r3, [r7, #28]
          break;
 8006fca:	e00e      	b.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006fcc:	4b24      	ldr	r3, [pc, #144]	; (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd2:	f003 0302 	and.w	r3, r3, #2
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d109      	bne.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8006fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fde:	61fb      	str	r3, [r7, #28]
          break;
 8006fe0:	e005      	b.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8006fe2:	bf00      	nop
 8006fe4:	e0c8      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006fe6:	bf00      	nop
 8006fe8:	e0c6      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006fea:	bf00      	nop
 8006fec:	e0c4      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006fee:	bf00      	nop
        break;
 8006ff0:	e0c2      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006ff2:	4b1b      	ldr	r3, [pc, #108]	; (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006ffc:	60fb      	str	r3, [r7, #12]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007004:	d030      	beq.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800700c:	d837      	bhi.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007014:	d01a      	beq.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800701c:	d82f      	bhi.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d004      	beq.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800702a:	d004      	beq.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 800702c:	e027      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800702e:	f7fe fd43 	bl	8005ab8 <HAL_RCC_GetPCLK1Freq>
 8007032:	61f8      	str	r0, [r7, #28]
          break;
 8007034:	e02a      	b.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007036:	4b0a      	ldr	r3, [pc, #40]	; (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800703c:	f003 0302 	and.w	r3, r3, #2
 8007040:	2b02      	cmp	r3, #2
 8007042:	d11e      	bne.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8007044:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007048:	61fb      	str	r3, [r7, #28]
          break;
 800704a:	e01a      	b.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800704c:	4b04      	ldr	r3, [pc, #16]	; (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007058:	d115      	bne.n	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800705a:	4b02      	ldr	r3, [pc, #8]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800705c:	61fb      	str	r3, [r7, #28]
          break;
 800705e:	e012      	b.n	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8007060:	40021000 	.word	0x40021000
 8007064:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007068:	4b46      	ldr	r3, [pc, #280]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800706a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800706e:	f003 0302 	and.w	r3, r3, #2
 8007072:	2b02      	cmp	r3, #2
 8007074:	d109      	bne.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8007076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800707a:	61fb      	str	r3, [r7, #28]
          break;
 800707c:	e005      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800707e:	bf00      	nop
 8007080:	e07a      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007082:	bf00      	nop
 8007084:	e078      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007086:	bf00      	nop
 8007088:	e076      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800708a:	bf00      	nop
        break;
 800708c:	e074      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800708e:	4b3d      	ldr	r3, [pc, #244]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007090:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007094:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007098:	60fb      	str	r3, [r7, #12]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070a0:	d02c      	beq.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070a8:	d855      	bhi.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d004      	beq.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070b6:	d004      	beq.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 80070b8:	e04d      	b.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 80070ba:	f7fe fc65 	bl	8005988 <HAL_RCC_GetSysClockFreq>
 80070be:	61f8      	str	r0, [r7, #28]
          break;
 80070c0:	e04e      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80070c2:	4b30      	ldr	r3, [pc, #192]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0302 	and.w	r3, r3, #2
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d145      	bne.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80070ce:	4b2d      	ldr	r3, [pc, #180]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0308 	and.w	r3, r3, #8
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d005      	beq.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 80070da:	4b2a      	ldr	r3, [pc, #168]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	091b      	lsrs	r3, r3, #4
 80070e0:	f003 030f 	and.w	r3, r3, #15
 80070e4:	e005      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 80070e6:	4b27      	ldr	r3, [pc, #156]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80070e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070ec:	0a1b      	lsrs	r3, r3, #8
 80070ee:	f003 030f 	and.w	r3, r3, #15
 80070f2:	4a25      	ldr	r2, [pc, #148]	; (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 80070f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070f8:	61fb      	str	r3, [r7, #28]
          break;
 80070fa:	e02e      	b.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80070fc:	4b21      	ldr	r3, [pc, #132]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007104:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007108:	d129      	bne.n	800715e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800710a:	4b1e      	ldr	r3, [pc, #120]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007112:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007116:	d122      	bne.n	800715e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007118:	4b1a      	ldr	r3, [pc, #104]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	0a1b      	lsrs	r3, r3, #8
 800711e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007122:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	fb03 f202 	mul.w	r2, r3, r2
 800712c:	4b15      	ldr	r3, [pc, #84]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	091b      	lsrs	r3, r3, #4
 8007132:	f003 030f 	and.w	r3, r3, #15
 8007136:	3301      	adds	r3, #1
 8007138:	fbb2 f3f3 	udiv	r3, r2, r3
 800713c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800713e:	4b11      	ldr	r3, [pc, #68]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	0d5b      	lsrs	r3, r3, #21
 8007144:	f003 0303 	and.w	r3, r3, #3
 8007148:	3301      	adds	r3, #1
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	69ba      	ldr	r2, [r7, #24]
 800714e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007152:	61fb      	str	r3, [r7, #28]
          break;
 8007154:	e003      	b.n	800715e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8007156:	bf00      	nop
 8007158:	e00e      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800715a:	bf00      	nop
 800715c:	e00c      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800715e:	bf00      	nop
        break;
 8007160:	e00a      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007162:	bf00      	nop
 8007164:	e008      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007166:	bf00      	nop
 8007168:	e006      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800716a:	bf00      	nop
 800716c:	e004      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800716e:	bf00      	nop
 8007170:	e002      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007172:	bf00      	nop
 8007174:	e000      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007176:	bf00      	nop
    }
  }

  return(frequency);
 8007178:	69fb      	ldr	r3, [r7, #28]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3720      	adds	r7, #32
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	40021000 	.word	0x40021000
 8007188:	08014238 	.word	0x08014238

0800718c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007196:	2300      	movs	r3, #0
 8007198:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800719a:	4b72      	ldr	r3, [pc, #456]	; (8007364 <RCCEx_PLLSAI1_Config+0x1d8>)
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	f003 0303 	and.w	r3, r3, #3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00e      	beq.n	80071c4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80071a6:	4b6f      	ldr	r3, [pc, #444]	; (8007364 <RCCEx_PLLSAI1_Config+0x1d8>)
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	f003 0203 	and.w	r2, r3, #3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d103      	bne.n	80071be <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
       ||
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d142      	bne.n	8007244 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	73fb      	strb	r3, [r7, #15]
 80071c2:	e03f      	b.n	8007244 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2b03      	cmp	r3, #3
 80071ca:	d018      	beq.n	80071fe <RCCEx_PLLSAI1_Config+0x72>
 80071cc:	2b03      	cmp	r3, #3
 80071ce:	d825      	bhi.n	800721c <RCCEx_PLLSAI1_Config+0x90>
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d002      	beq.n	80071da <RCCEx_PLLSAI1_Config+0x4e>
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d009      	beq.n	80071ec <RCCEx_PLLSAI1_Config+0x60>
 80071d8:	e020      	b.n	800721c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80071da:	4b62      	ldr	r3, [pc, #392]	; (8007364 <RCCEx_PLLSAI1_Config+0x1d8>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d11d      	bne.n	8007222 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071ea:	e01a      	b.n	8007222 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80071ec:	4b5d      	ldr	r3, [pc, #372]	; (8007364 <RCCEx_PLLSAI1_Config+0x1d8>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d116      	bne.n	8007226 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071fc:	e013      	b.n	8007226 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80071fe:	4b59      	ldr	r3, [pc, #356]	; (8007364 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d10f      	bne.n	800722a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800720a:	4b56      	ldr	r3, [pc, #344]	; (8007364 <RCCEx_PLLSAI1_Config+0x1d8>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d109      	bne.n	800722a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800721a:	e006      	b.n	800722a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	73fb      	strb	r3, [r7, #15]
      break;
 8007220:	e004      	b.n	800722c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007222:	bf00      	nop
 8007224:	e002      	b.n	800722c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007226:	bf00      	nop
 8007228:	e000      	b.n	800722c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800722a:	bf00      	nop
    }

    if(status == HAL_OK)
 800722c:	7bfb      	ldrb	r3, [r7, #15]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d108      	bne.n	8007244 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007232:	4b4c      	ldr	r3, [pc, #304]	; (8007364 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	f023 0203 	bic.w	r2, r3, #3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4949      	ldr	r1, [pc, #292]	; (8007364 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007240:	4313      	orrs	r3, r2
 8007242:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007244:	7bfb      	ldrb	r3, [r7, #15]
 8007246:	2b00      	cmp	r3, #0
 8007248:	f040 8086 	bne.w	8007358 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800724c:	4b45      	ldr	r3, [pc, #276]	; (8007364 <RCCEx_PLLSAI1_Config+0x1d8>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a44      	ldr	r2, [pc, #272]	; (8007364 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007252:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007256:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007258:	f7fb fc22 	bl	8002aa0 <HAL_GetTick>
 800725c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800725e:	e009      	b.n	8007274 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007260:	f7fb fc1e 	bl	8002aa0 <HAL_GetTick>
 8007264:	4602      	mov	r2, r0
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	2b02      	cmp	r3, #2
 800726c:	d902      	bls.n	8007274 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800726e:	2303      	movs	r3, #3
 8007270:	73fb      	strb	r3, [r7, #15]
        break;
 8007272:	e005      	b.n	8007280 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007274:	4b3b      	ldr	r3, [pc, #236]	; (8007364 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1ef      	bne.n	8007260 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007280:	7bfb      	ldrb	r3, [r7, #15]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d168      	bne.n	8007358 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d113      	bne.n	80072b4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800728c:	4b35      	ldr	r3, [pc, #212]	; (8007364 <RCCEx_PLLSAI1_Config+0x1d8>)
 800728e:	691a      	ldr	r2, [r3, #16]
 8007290:	4b35      	ldr	r3, [pc, #212]	; (8007368 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007292:	4013      	ands	r3, r2
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	6892      	ldr	r2, [r2, #8]
 8007298:	0211      	lsls	r1, r2, #8
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	68d2      	ldr	r2, [r2, #12]
 800729e:	06d2      	lsls	r2, r2, #27
 80072a0:	4311      	orrs	r1, r2
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	6852      	ldr	r2, [r2, #4]
 80072a6:	3a01      	subs	r2, #1
 80072a8:	0112      	lsls	r2, r2, #4
 80072aa:	430a      	orrs	r2, r1
 80072ac:	492d      	ldr	r1, [pc, #180]	; (8007364 <RCCEx_PLLSAI1_Config+0x1d8>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	610b      	str	r3, [r1, #16]
 80072b2:	e02d      	b.n	8007310 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d115      	bne.n	80072e6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80072ba:	4b2a      	ldr	r3, [pc, #168]	; (8007364 <RCCEx_PLLSAI1_Config+0x1d8>)
 80072bc:	691a      	ldr	r2, [r3, #16]
 80072be:	4b2b      	ldr	r3, [pc, #172]	; (800736c <RCCEx_PLLSAI1_Config+0x1e0>)
 80072c0:	4013      	ands	r3, r2
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	6892      	ldr	r2, [r2, #8]
 80072c6:	0211      	lsls	r1, r2, #8
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	6912      	ldr	r2, [r2, #16]
 80072cc:	0852      	lsrs	r2, r2, #1
 80072ce:	3a01      	subs	r2, #1
 80072d0:	0552      	lsls	r2, r2, #21
 80072d2:	4311      	orrs	r1, r2
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	6852      	ldr	r2, [r2, #4]
 80072d8:	3a01      	subs	r2, #1
 80072da:	0112      	lsls	r2, r2, #4
 80072dc:	430a      	orrs	r2, r1
 80072de:	4921      	ldr	r1, [pc, #132]	; (8007364 <RCCEx_PLLSAI1_Config+0x1d8>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	610b      	str	r3, [r1, #16]
 80072e4:	e014      	b.n	8007310 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80072e6:	4b1f      	ldr	r3, [pc, #124]	; (8007364 <RCCEx_PLLSAI1_Config+0x1d8>)
 80072e8:	691a      	ldr	r2, [r3, #16]
 80072ea:	4b21      	ldr	r3, [pc, #132]	; (8007370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80072ec:	4013      	ands	r3, r2
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	6892      	ldr	r2, [r2, #8]
 80072f2:	0211      	lsls	r1, r2, #8
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	6952      	ldr	r2, [r2, #20]
 80072f8:	0852      	lsrs	r2, r2, #1
 80072fa:	3a01      	subs	r2, #1
 80072fc:	0652      	lsls	r2, r2, #25
 80072fe:	4311      	orrs	r1, r2
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	6852      	ldr	r2, [r2, #4]
 8007304:	3a01      	subs	r2, #1
 8007306:	0112      	lsls	r2, r2, #4
 8007308:	430a      	orrs	r2, r1
 800730a:	4916      	ldr	r1, [pc, #88]	; (8007364 <RCCEx_PLLSAI1_Config+0x1d8>)
 800730c:	4313      	orrs	r3, r2
 800730e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007310:	4b14      	ldr	r3, [pc, #80]	; (8007364 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a13      	ldr	r2, [pc, #76]	; (8007364 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007316:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800731a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800731c:	f7fb fbc0 	bl	8002aa0 <HAL_GetTick>
 8007320:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007322:	e009      	b.n	8007338 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007324:	f7fb fbbc 	bl	8002aa0 <HAL_GetTick>
 8007328:	4602      	mov	r2, r0
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	2b02      	cmp	r3, #2
 8007330:	d902      	bls.n	8007338 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	73fb      	strb	r3, [r7, #15]
          break;
 8007336:	e005      	b.n	8007344 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007338:	4b0a      	ldr	r3, [pc, #40]	; (8007364 <RCCEx_PLLSAI1_Config+0x1d8>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007340:	2b00      	cmp	r3, #0
 8007342:	d0ef      	beq.n	8007324 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007344:	7bfb      	ldrb	r3, [r7, #15]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d106      	bne.n	8007358 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800734a:	4b06      	ldr	r3, [pc, #24]	; (8007364 <RCCEx_PLLSAI1_Config+0x1d8>)
 800734c:	691a      	ldr	r2, [r3, #16]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	4904      	ldr	r1, [pc, #16]	; (8007364 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007354:	4313      	orrs	r3, r2
 8007356:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007358:	7bfb      	ldrb	r3, [r7, #15]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	40021000 	.word	0x40021000
 8007368:	07ff800f 	.word	0x07ff800f
 800736c:	ff9f800f 	.word	0xff9f800f
 8007370:	f9ff800f 	.word	0xf9ff800f

08007374 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007382:	4b72      	ldr	r3, [pc, #456]	; (800754c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	f003 0303 	and.w	r3, r3, #3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00e      	beq.n	80073ac <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800738e:	4b6f      	ldr	r3, [pc, #444]	; (800754c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	f003 0203 	and.w	r2, r3, #3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	429a      	cmp	r2, r3
 800739c:	d103      	bne.n	80073a6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
       ||
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d142      	bne.n	800742c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	73fb      	strb	r3, [r7, #15]
 80073aa:	e03f      	b.n	800742c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2b03      	cmp	r3, #3
 80073b2:	d018      	beq.n	80073e6 <RCCEx_PLLSAI2_Config+0x72>
 80073b4:	2b03      	cmp	r3, #3
 80073b6:	d825      	bhi.n	8007404 <RCCEx_PLLSAI2_Config+0x90>
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d002      	beq.n	80073c2 <RCCEx_PLLSAI2_Config+0x4e>
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d009      	beq.n	80073d4 <RCCEx_PLLSAI2_Config+0x60>
 80073c0:	e020      	b.n	8007404 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80073c2:	4b62      	ldr	r3, [pc, #392]	; (800754c <RCCEx_PLLSAI2_Config+0x1d8>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0302 	and.w	r3, r3, #2
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d11d      	bne.n	800740a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073d2:	e01a      	b.n	800740a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80073d4:	4b5d      	ldr	r3, [pc, #372]	; (800754c <RCCEx_PLLSAI2_Config+0x1d8>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d116      	bne.n	800740e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073e4:	e013      	b.n	800740e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80073e6:	4b59      	ldr	r3, [pc, #356]	; (800754c <RCCEx_PLLSAI2_Config+0x1d8>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10f      	bne.n	8007412 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80073f2:	4b56      	ldr	r3, [pc, #344]	; (800754c <RCCEx_PLLSAI2_Config+0x1d8>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d109      	bne.n	8007412 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007402:	e006      	b.n	8007412 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	73fb      	strb	r3, [r7, #15]
      break;
 8007408:	e004      	b.n	8007414 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800740a:	bf00      	nop
 800740c:	e002      	b.n	8007414 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800740e:	bf00      	nop
 8007410:	e000      	b.n	8007414 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007412:	bf00      	nop
    }

    if(status == HAL_OK)
 8007414:	7bfb      	ldrb	r3, [r7, #15]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d108      	bne.n	800742c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800741a:	4b4c      	ldr	r3, [pc, #304]	; (800754c <RCCEx_PLLSAI2_Config+0x1d8>)
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	f023 0203 	bic.w	r2, r3, #3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4949      	ldr	r1, [pc, #292]	; (800754c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007428:	4313      	orrs	r3, r2
 800742a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800742c:	7bfb      	ldrb	r3, [r7, #15]
 800742e:	2b00      	cmp	r3, #0
 8007430:	f040 8086 	bne.w	8007540 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007434:	4b45      	ldr	r3, [pc, #276]	; (800754c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a44      	ldr	r2, [pc, #272]	; (800754c <RCCEx_PLLSAI2_Config+0x1d8>)
 800743a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800743e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007440:	f7fb fb2e 	bl	8002aa0 <HAL_GetTick>
 8007444:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007446:	e009      	b.n	800745c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007448:	f7fb fb2a 	bl	8002aa0 <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	2b02      	cmp	r3, #2
 8007454:	d902      	bls.n	800745c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	73fb      	strb	r3, [r7, #15]
        break;
 800745a:	e005      	b.n	8007468 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800745c:	4b3b      	ldr	r3, [pc, #236]	; (800754c <RCCEx_PLLSAI2_Config+0x1d8>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1ef      	bne.n	8007448 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007468:	7bfb      	ldrb	r3, [r7, #15]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d168      	bne.n	8007540 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d113      	bne.n	800749c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007474:	4b35      	ldr	r3, [pc, #212]	; (800754c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007476:	695a      	ldr	r2, [r3, #20]
 8007478:	4b35      	ldr	r3, [pc, #212]	; (8007550 <RCCEx_PLLSAI2_Config+0x1dc>)
 800747a:	4013      	ands	r3, r2
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	6892      	ldr	r2, [r2, #8]
 8007480:	0211      	lsls	r1, r2, #8
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	68d2      	ldr	r2, [r2, #12]
 8007486:	06d2      	lsls	r2, r2, #27
 8007488:	4311      	orrs	r1, r2
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	6852      	ldr	r2, [r2, #4]
 800748e:	3a01      	subs	r2, #1
 8007490:	0112      	lsls	r2, r2, #4
 8007492:	430a      	orrs	r2, r1
 8007494:	492d      	ldr	r1, [pc, #180]	; (800754c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007496:	4313      	orrs	r3, r2
 8007498:	614b      	str	r3, [r1, #20]
 800749a:	e02d      	b.n	80074f8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d115      	bne.n	80074ce <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80074a2:	4b2a      	ldr	r3, [pc, #168]	; (800754c <RCCEx_PLLSAI2_Config+0x1d8>)
 80074a4:	695a      	ldr	r2, [r3, #20]
 80074a6:	4b2b      	ldr	r3, [pc, #172]	; (8007554 <RCCEx_PLLSAI2_Config+0x1e0>)
 80074a8:	4013      	ands	r3, r2
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	6892      	ldr	r2, [r2, #8]
 80074ae:	0211      	lsls	r1, r2, #8
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	6912      	ldr	r2, [r2, #16]
 80074b4:	0852      	lsrs	r2, r2, #1
 80074b6:	3a01      	subs	r2, #1
 80074b8:	0552      	lsls	r2, r2, #21
 80074ba:	4311      	orrs	r1, r2
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	6852      	ldr	r2, [r2, #4]
 80074c0:	3a01      	subs	r2, #1
 80074c2:	0112      	lsls	r2, r2, #4
 80074c4:	430a      	orrs	r2, r1
 80074c6:	4921      	ldr	r1, [pc, #132]	; (800754c <RCCEx_PLLSAI2_Config+0x1d8>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	614b      	str	r3, [r1, #20]
 80074cc:	e014      	b.n	80074f8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80074ce:	4b1f      	ldr	r3, [pc, #124]	; (800754c <RCCEx_PLLSAI2_Config+0x1d8>)
 80074d0:	695a      	ldr	r2, [r3, #20]
 80074d2:	4b21      	ldr	r3, [pc, #132]	; (8007558 <RCCEx_PLLSAI2_Config+0x1e4>)
 80074d4:	4013      	ands	r3, r2
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	6892      	ldr	r2, [r2, #8]
 80074da:	0211      	lsls	r1, r2, #8
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	6952      	ldr	r2, [r2, #20]
 80074e0:	0852      	lsrs	r2, r2, #1
 80074e2:	3a01      	subs	r2, #1
 80074e4:	0652      	lsls	r2, r2, #25
 80074e6:	4311      	orrs	r1, r2
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	6852      	ldr	r2, [r2, #4]
 80074ec:	3a01      	subs	r2, #1
 80074ee:	0112      	lsls	r2, r2, #4
 80074f0:	430a      	orrs	r2, r1
 80074f2:	4916      	ldr	r1, [pc, #88]	; (800754c <RCCEx_PLLSAI2_Config+0x1d8>)
 80074f4:	4313      	orrs	r3, r2
 80074f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80074f8:	4b14      	ldr	r3, [pc, #80]	; (800754c <RCCEx_PLLSAI2_Config+0x1d8>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a13      	ldr	r2, [pc, #76]	; (800754c <RCCEx_PLLSAI2_Config+0x1d8>)
 80074fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007502:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007504:	f7fb facc 	bl	8002aa0 <HAL_GetTick>
 8007508:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800750a:	e009      	b.n	8007520 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800750c:	f7fb fac8 	bl	8002aa0 <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	2b02      	cmp	r3, #2
 8007518:	d902      	bls.n	8007520 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	73fb      	strb	r3, [r7, #15]
          break;
 800751e:	e005      	b.n	800752c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007520:	4b0a      	ldr	r3, [pc, #40]	; (800754c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d0ef      	beq.n	800750c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800752c:	7bfb      	ldrb	r3, [r7, #15]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d106      	bne.n	8007540 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007532:	4b06      	ldr	r3, [pc, #24]	; (800754c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007534:	695a      	ldr	r2, [r3, #20]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	4904      	ldr	r1, [pc, #16]	; (800754c <RCCEx_PLLSAI2_Config+0x1d8>)
 800753c:	4313      	orrs	r3, r2
 800753e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007540:	7bfb      	ldrb	r3, [r7, #15]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	40021000 	.word	0x40021000
 8007550:	07ff800f 	.word	0x07ff800f
 8007554:	ff9f800f 	.word	0xff9f800f
 8007558:	f9ff800f 	.word	0xf9ff800f

0800755c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800755c:	b480      	push	{r7}
 800755e:	b089      	sub	sp, #36	; 0x24
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8007566:	2300      	movs	r3, #0
 8007568:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800756a:	2300      	movs	r3, #0
 800756c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800756e:	2300      	movs	r3, #0
 8007570:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007578:	d10b      	bne.n	8007592 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800757a:	4b7e      	ldr	r3, [pc, #504]	; (8007774 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800757c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007580:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007584:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	2b60      	cmp	r3, #96	; 0x60
 800758a:	d112      	bne.n	80075b2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800758c:	4b7a      	ldr	r3, [pc, #488]	; (8007778 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800758e:	61fb      	str	r3, [r7, #28]
 8007590:	e00f      	b.n	80075b2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007598:	d10b      	bne.n	80075b2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800759a:	4b76      	ldr	r3, [pc, #472]	; (8007774 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800759c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075a4:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075ac:	d101      	bne.n	80075b2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80075ae:	4b72      	ldr	r3, [pc, #456]	; (8007778 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80075b0:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f040 80d6 	bne.w	8007766 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	2b40      	cmp	r3, #64	; 0x40
 80075c2:	d003      	beq.n	80075cc <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075ca:	d13b      	bne.n	8007644 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80075cc:	4b69      	ldr	r3, [pc, #420]	; (8007774 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075d8:	f040 80c4 	bne.w	8007764 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80075dc:	4b65      	ldr	r3, [pc, #404]	; (8007774 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f000 80bd 	beq.w	8007764 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80075ea:	4b62      	ldr	r3, [pc, #392]	; (8007774 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	091b      	lsrs	r3, r3, #4
 80075f0:	f003 030f 	and.w	r3, r3, #15
 80075f4:	3301      	adds	r3, #1
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075fc:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80075fe:	4b5d      	ldr	r3, [pc, #372]	; (8007774 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	0a1b      	lsrs	r3, r3, #8
 8007604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007608:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800760a:	4b5a      	ldr	r3, [pc, #360]	; (8007774 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	0edb      	lsrs	r3, r3, #27
 8007610:	f003 031f 	and.w	r3, r3, #31
 8007614:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10a      	bne.n	8007632 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800761c:	4b55      	ldr	r3, [pc, #340]	; (8007774 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d002      	beq.n	800762e <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8007628:	2311      	movs	r3, #17
 800762a:	617b      	str	r3, [r7, #20]
 800762c:	e001      	b.n	8007632 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800762e:	2307      	movs	r3, #7
 8007630:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	fb03 f202 	mul.w	r2, r3, r2
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007640:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007642:	e08f      	b.n	8007764 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d13a      	bne.n	80076c0 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800764a:	4b4a      	ldr	r3, [pc, #296]	; (8007774 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007652:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007656:	f040 8086 	bne.w	8007766 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800765a:	4b46      	ldr	r3, [pc, #280]	; (8007774 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d07f      	beq.n	8007766 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007666:	4b43      	ldr	r3, [pc, #268]	; (8007774 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	091b      	lsrs	r3, r3, #4
 800766c:	f003 030f 	and.w	r3, r3, #15
 8007670:	3301      	adds	r3, #1
 8007672:	693a      	ldr	r2, [r7, #16]
 8007674:	fbb2 f3f3 	udiv	r3, r2, r3
 8007678:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800767a:	4b3e      	ldr	r3, [pc, #248]	; (8007774 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	0a1b      	lsrs	r3, r3, #8
 8007680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007684:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8007686:	4b3b      	ldr	r3, [pc, #236]	; (8007774 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	0edb      	lsrs	r3, r3, #27
 800768c:	f003 031f 	and.w	r3, r3, #31
 8007690:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10a      	bne.n	80076ae <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8007698:	4b36      	ldr	r3, [pc, #216]	; (8007774 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80076a4:	2311      	movs	r3, #17
 80076a6:	617b      	str	r3, [r7, #20]
 80076a8:	e001      	b.n	80076ae <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 80076aa:	2307      	movs	r3, #7
 80076ac:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	fb03 f202 	mul.w	r2, r3, r2
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076bc:	61fb      	str	r3, [r7, #28]
 80076be:	e052      	b.n	8007766 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	2b80      	cmp	r3, #128	; 0x80
 80076c4:	d003      	beq.n	80076ce <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076cc:	d109      	bne.n	80076e2 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80076ce:	4b29      	ldr	r3, [pc, #164]	; (8007774 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076da:	d144      	bne.n	8007766 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80076dc:	4b27      	ldr	r3, [pc, #156]	; (800777c <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80076de:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80076e0:	e041      	b.n	8007766 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	2b20      	cmp	r3, #32
 80076e6:	d003      	beq.n	80076f0 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076ee:	d13a      	bne.n	8007766 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80076f0:	4b20      	ldr	r3, [pc, #128]	; (8007774 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076fc:	d133      	bne.n	8007766 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80076fe:	4b1d      	ldr	r3, [pc, #116]	; (8007774 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d02d      	beq.n	8007766 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800770a:	4b1a      	ldr	r3, [pc, #104]	; (8007774 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	091b      	lsrs	r3, r3, #4
 8007710:	f003 030f 	and.w	r3, r3, #15
 8007714:	3301      	adds	r3, #1
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	fbb2 f3f3 	udiv	r3, r2, r3
 800771c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800771e:	4b15      	ldr	r3, [pc, #84]	; (8007774 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	0a1b      	lsrs	r3, r3, #8
 8007724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007728:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800772a:	4b12      	ldr	r3, [pc, #72]	; (8007774 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	0edb      	lsrs	r3, r3, #27
 8007730:	f003 031f 	and.w	r3, r3, #31
 8007734:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d10a      	bne.n	8007752 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800773c:	4b0d      	ldr	r3, [pc, #52]	; (8007774 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800773e:	695b      	ldr	r3, [r3, #20]
 8007740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d002      	beq.n	800774e <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8007748:	2311      	movs	r3, #17
 800774a:	617b      	str	r3, [r7, #20]
 800774c:	e001      	b.n	8007752 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800774e:	2307      	movs	r3, #7
 8007750:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	fb03 f202 	mul.w	r2, r3, r2
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007760:	61fb      	str	r3, [r7, #28]
 8007762:	e000      	b.n	8007766 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007764:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8007766:	69fb      	ldr	r3, [r7, #28]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3724      	adds	r7, #36	; 0x24
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	40021000 	.word	0x40021000
 8007778:	001fff68 	.word	0x001fff68
 800777c:	00f42400 	.word	0x00f42400

08007780 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b08a      	sub	sp, #40	; 0x28
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d101      	bne.n	8007792 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e078      	b.n	8007884 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d105      	bne.n	80077aa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f7fa fe25 	bl	80023f4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2203      	movs	r2, #3
 80077ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f86a 	bl	800788c <HAL_SD_InitCard>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e060      	b.n	8007884 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80077c2:	f107 0308 	add.w	r3, r7, #8
 80077c6:	4619      	mov	r1, r3
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 fdcd 	bl	8008368 <HAL_SD_GetCardStatus>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d001      	beq.n	80077d8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e055      	b.n	8007884 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80077d8:	7e3b      	ldrb	r3, [r7, #24]
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80077de:	7e7b      	ldrb	r3, [r7, #25]
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d10a      	bne.n	8007802 <HAL_SD_Init+0x82>
 80077ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d102      	bne.n	80077f8 <HAL_SD_Init+0x78>
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d004      	beq.n	8007802 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8007800:	e00b      	b.n	800781a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007806:	2b01      	cmp	r3, #1
 8007808:	d104      	bne.n	8007814 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007810:	65da      	str	r2, [r3, #92]	; 0x5c
 8007812:	e002      	b.n	800781a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	4619      	mov	r1, r3
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fe83 	bl	800852c <HAL_SD_ConfigWideBusOperation>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d001      	beq.n	8007830 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e029      	b.n	8007884 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007830:	f7fb f936 	bl	8002aa0 <HAL_GetTick>
 8007834:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007836:	e014      	b.n	8007862 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8007838:	f7fb f932 	bl	8002aa0 <HAL_GetTick>
 800783c:	4602      	mov	r2, r0
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007846:	d10c      	bne.n	8007862 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800784e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e010      	b.n	8007884 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 ff76 	bl	8008754 <HAL_SD_GetCardState>
 8007868:	4603      	mov	r3, r0
 800786a:	2b04      	cmp	r3, #4
 800786c:	d1e4      	bne.n	8007838 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2201      	movs	r2, #1
 800787e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3728      	adds	r7, #40	; 0x28
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800788c:	b5b0      	push	{r4, r5, r7, lr}
 800788e:	b08e      	sub	sp, #56	; 0x38
 8007890:	af04      	add	r7, sp, #16
 8007892:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007894:	2300      	movs	r3, #0
 8007896:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007898:	2300      	movs	r3, #0
 800789a:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800789c:	2300      	movs	r3, #0
 800789e:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80078a0:	2300      	movs	r3, #0
 80078a2:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80078a4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80078a8:	f7fe fd4e 	bl	8006348 <HAL_RCCEx_GetPeriphCLKFreq>
 80078ac:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d109      	bne.n	80078c8 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80078c2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e079      	b.n	80079bc <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	0a1b      	lsrs	r3, r3, #8
 80078cc:	4a3d      	ldr	r2, [pc, #244]	; (80079c4 <HAL_SD_InitCard+0x138>)
 80078ce:	fba2 2303 	umull	r2, r3, r2, r3
 80078d2:	091b      	lsrs	r3, r3, #4
 80078d4:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d107      	bne.n	80078f4 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f042 0210 	orr.w	r2, r2, #16
 80078f2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681d      	ldr	r5, [r3, #0]
 80078f8:	466c      	mov	r4, sp
 80078fa:	f107 0314 	add.w	r3, r7, #20
 80078fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007902:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007906:	f107 0308 	add.w	r3, r7, #8
 800790a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800790c:	4628      	mov	r0, r5
 800790e:	f005 f8ad 	bl	800ca6c <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4618      	mov	r0, r3
 8007918:	f005 f8f0 	bl	800cafc <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	005b      	lsls	r3, r3, #1
 8007920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007922:	fbb2 f3f3 	udiv	r3, r2, r3
 8007926:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8007928:	4a27      	ldr	r2, [pc, #156]	; (80079c8 <HAL_SD_InitCard+0x13c>)
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007930:	3301      	adds	r3, #1
 8007932:	4618      	mov	r0, r3
 8007934:	f7fb f8c0 	bl	8002ab8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 ffeb 	bl	8008914 <SD_PowerON>
 800793e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007940:	6a3b      	ldr	r3, [r7, #32]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00b      	beq.n	800795e <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007952:	6a3b      	ldr	r3, [r7, #32]
 8007954:	431a      	orrs	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e02e      	b.n	80079bc <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 ff18 	bl	8008794 <SD_InitCard>
 8007964:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007966:	6a3b      	ldr	r3, [r7, #32]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00b      	beq.n	8007984 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007978:	6a3b      	ldr	r3, [r7, #32]
 800797a:	431a      	orrs	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e01b      	b.n	80079bc <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f44f 7100 	mov.w	r1, #512	; 0x200
 800798c:	4618      	mov	r0, r3
 800798e:	f005 f94b 	bl	800cc28 <SDMMC_CmdBlockLength>
 8007992:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00f      	beq.n	80079ba <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a0b      	ldr	r2, [pc, #44]	; (80079cc <HAL_SD_InitCard+0x140>)
 80079a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079a6:	6a3b      	ldr	r3, [r7, #32]
 80079a8:	431a      	orrs	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e000      	b.n	80079bc <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3728      	adds	r7, #40	; 0x28
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bdb0      	pop	{r4, r5, r7, pc}
 80079c4:	014f8b59 	.word	0x014f8b59
 80079c8:	00012110 	.word	0x00012110
 80079cc:	1fe00fff 	.word	0x1fe00fff

080079d0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b092      	sub	sp, #72	; 0x48
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]
 80079dc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80079de:	f7fb f85f 	bl	8002aa0 <HAL_GetTick>
 80079e2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d107      	bne.n	8007a02 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e170      	b.n	8007ce4 <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	f040 8163 	bne.w	8007cd6 <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007a16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	441a      	add	r2, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d907      	bls.n	8007a34 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a28:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e157      	b.n	8007ce4 <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2203      	movs	r2, #3
 8007a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2200      	movs	r2, #0
 8007a42:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d002      	beq.n	8007a52 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4e:	025b      	lsls	r3, r3, #9
 8007a50:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a56:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	025b      	lsls	r3, r3, #9
 8007a5c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007a5e:	2390      	movs	r3, #144	; 0x90
 8007a60:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007a62:	2302      	movs	r3, #2
 8007a64:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007a66:	2300      	movs	r3, #0
 8007a68:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f107 0214 	add.w	r2, r7, #20
 8007a76:	4611      	mov	r1, r2
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f005 f8a9 	bl	800cbd0 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68da      	ldr	r2, [r3, #12]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a8c:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d90a      	bls.n	8007aaa <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2202      	movs	r2, #2
 8007a98:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f005 f907 	bl	800ccb4 <SDMMC_CmdReadMultiBlock>
 8007aa6:	6478      	str	r0, [r7, #68]	; 0x44
 8007aa8:	e009      	b.n	8007abe <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2201      	movs	r2, #1
 8007aae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f005 f8d9 	bl	800cc6e <SDMMC_CmdReadSingleBlock>
 8007abc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d012      	beq.n	8007aea <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a88      	ldr	r2, [pc, #544]	; (8007cec <HAL_SD_ReadBlocks+0x31c>)
 8007aca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ad2:	431a      	orrs	r2, r3
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e0fc      	b.n	8007ce4 <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007aee:	e061      	b.n	8007bb4 <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d03c      	beq.n	8007b78 <HAL_SD_ReadBlocks+0x1a8>
 8007afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d039      	beq.n	8007b78 <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007b04:	2300      	movs	r3, #0
 8007b06:	643b      	str	r3, [r7, #64]	; 0x40
 8007b08:	e033      	b.n	8007b72 <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f004 ffd6 	bl	800cac0 <SDMMC_ReadFIFO>
 8007b14:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b1c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b20:	3301      	adds	r3, #1
 8007b22:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b26:	3b01      	subs	r3, #1
 8007b28:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2c:	0a1b      	lsrs	r3, r3, #8
 8007b2e:	b2da      	uxtb	r2, r3
 8007b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b32:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b36:	3301      	adds	r3, #1
 8007b38:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b42:	0c1b      	lsrs	r3, r3, #16
 8007b44:	b2da      	uxtb	r2, r3
 8007b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b48:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b52:	3b01      	subs	r3, #1
 8007b54:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b58:	0e1b      	lsrs	r3, r3, #24
 8007b5a:	b2da      	uxtb	r2, r3
 8007b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b5e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b62:	3301      	adds	r3, #1
 8007b64:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8007b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b6e:	3301      	adds	r3, #1
 8007b70:	643b      	str	r3, [r7, #64]	; 0x40
 8007b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b74:	2b07      	cmp	r3, #7
 8007b76:	d9c8      	bls.n	8007b0a <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007b78:	f7fa ff92 	bl	8002aa0 <HAL_GetTick>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d902      	bls.n	8007b8e <HAL_SD_ReadBlocks+0x1be>
 8007b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d112      	bne.n	8007bb4 <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a56      	ldr	r2, [pc, #344]	; (8007cec <HAL_SD_ReadBlocks+0x31c>)
 8007b94:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e097      	b.n	8007ce4 <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bba:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d096      	beq.n	8007af0 <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68da      	ldr	r2, [r3, #12]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bd0:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d022      	beq.n	8007c26 <HAL_SD_ReadBlocks+0x256>
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d91f      	bls.n	8007c26 <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bea:	2b03      	cmp	r3, #3
 8007bec:	d01b      	beq.n	8007c26 <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f005 f8c8 	bl	800cd88 <SDMMC_CmdStopTransfer>
 8007bf8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007bfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d012      	beq.n	8007c26 <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a39      	ldr	r2, [pc, #228]	; (8007cec <HAL_SD_ReadBlocks+0x31c>)
 8007c06:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c0e:	431a      	orrs	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e05e      	b.n	8007ce4 <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c2c:	f003 0308 	and.w	r3, r3, #8
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d012      	beq.n	8007c5a <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a2c      	ldr	r2, [pc, #176]	; (8007cec <HAL_SD_ReadBlocks+0x31c>)
 8007c3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c40:	f043 0208 	orr.w	r2, r3, #8
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e044      	b.n	8007ce4 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c60:	f003 0302 	and.w	r3, r3, #2
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d012      	beq.n	8007c8e <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a1f      	ldr	r2, [pc, #124]	; (8007cec <HAL_SD_ReadBlocks+0x31c>)
 8007c6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c74:	f043 0202 	orr.w	r2, r3, #2
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e02a      	b.n	8007ce4 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c94:	f003 0320 	and.w	r3, r3, #32
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d012      	beq.n	8007cc2 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a12      	ldr	r2, [pc, #72]	; (8007cec <HAL_SD_ReadBlocks+0x31c>)
 8007ca2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca8:	f043 0220 	orr.w	r2, r3, #32
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e010      	b.n	8007ce4 <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a0a      	ldr	r2, [pc, #40]	; (8007cf0 <HAL_SD_ReadBlocks+0x320>)
 8007cc8:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	e006      	b.n	8007ce4 <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cda:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
  }
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3748      	adds	r7, #72	; 0x48
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	1fe00fff 	.word	0x1fe00fff
 8007cf0:	18000f3a 	.word	0x18000f3a

08007cf4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b092      	sub	sp, #72	; 0x48
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	607a      	str	r2, [r7, #4]
 8007d00:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007d02:	f7fa fecd 	bl	8002aa0 <HAL_GetTick>
 8007d06:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d107      	bne.n	8007d26 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e174      	b.n	8008010 <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	f040 8167 	bne.w	8008002 <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007d3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	441a      	add	r2, r3
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d907      	bls.n	8007d58 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e15b      	b.n	8008010 <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2203      	movs	r2, #3
 8007d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2200      	movs	r2, #0
 8007d66:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d002      	beq.n	8007d76 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d72:	025b      	lsls	r3, r3, #9
 8007d74:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d7a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	025b      	lsls	r3, r3, #9
 8007d80:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007d82:	2390      	movs	r3, #144	; 0x90
 8007d84:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007d86:	2300      	movs	r3, #0
 8007d88:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f107 0218 	add.w	r2, r7, #24
 8007d9a:	4611      	mov	r1, r2
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f004 ff17 	bl	800cbd0 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68da      	ldr	r2, [r3, #12]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007db0:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d90a      	bls.n	8007dce <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2220      	movs	r2, #32
 8007dbc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f004 ffbb 	bl	800cd40 <SDMMC_CmdWriteMultiBlock>
 8007dca:	6478      	str	r0, [r7, #68]	; 0x44
 8007dcc:	e009      	b.n	8007de2 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2210      	movs	r2, #16
 8007dd2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f004 ff8d 	bl	800ccfa <SDMMC_CmdWriteSingleBlock>
 8007de0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d012      	beq.n	8007e0e <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a8a      	ldr	r2, [pc, #552]	; (8008018 <HAL_SD_WriteBlocks+0x324>)
 8007dee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007df6:	431a      	orrs	r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e100      	b.n	8008010 <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007e12:	e065      	b.n	8007ee0 <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d040      	beq.n	8007ea4 <HAL_SD_WriteBlocks+0x1b0>
 8007e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d03d      	beq.n	8007ea4 <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007e28:	2300      	movs	r3, #0
 8007e2a:	643b      	str	r3, [r7, #64]	; 0x40
 8007e2c:	e037      	b.n	8007e9e <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 8007e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e36:	3301      	adds	r3, #1
 8007e38:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	021a      	lsls	r2, r3, #8
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e4e:	3301      	adds	r3, #1
 8007e50:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e54:	3b01      	subs	r3, #1
 8007e56:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	041a      	lsls	r2, r3, #16
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e66:	3301      	adds	r3, #1
 8007e68:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	061a      	lsls	r2, r3, #24
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e7e:	3301      	adds	r3, #1
 8007e80:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e84:	3b01      	subs	r3, #1
 8007e86:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f107 0214 	add.w	r2, r7, #20
 8007e90:	4611      	mov	r1, r2
 8007e92:	4618      	mov	r0, r3
 8007e94:	f004 fe21 	bl	800cada <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	643b      	str	r3, [r7, #64]	; 0x40
 8007e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ea0:	2b07      	cmp	r3, #7
 8007ea2:	d9c4      	bls.n	8007e2e <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007ea4:	f7fa fdfc 	bl	8002aa0 <HAL_GetTick>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eac:	1ad3      	subs	r3, r2, r3
 8007eae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d902      	bls.n	8007eba <HAL_SD_WriteBlocks+0x1c6>
 8007eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d112      	bne.n	8007ee0 <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a56      	ldr	r2, [pc, #344]	; (8008018 <HAL_SD_WriteBlocks+0x324>)
 8007ec0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ec8:	431a      	orrs	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e097      	b.n	8008010 <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ee6:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d092      	beq.n	8007e14 <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68da      	ldr	r2, [r3, #12]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007efc:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d022      	beq.n	8007f52 <HAL_SD_WriteBlocks+0x25e>
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d91f      	bls.n	8007f52 <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f16:	2b03      	cmp	r3, #3
 8007f18:	d01b      	beq.n	8007f52 <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f004 ff32 	bl	800cd88 <SDMMC_CmdStopTransfer>
 8007f24:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d012      	beq.n	8007f52 <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a39      	ldr	r2, [pc, #228]	; (8008018 <HAL_SD_WriteBlocks+0x324>)
 8007f32:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f3a:	431a      	orrs	r2, r3
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e05e      	b.n	8008010 <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f58:	f003 0308 	and.w	r3, r3, #8
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d012      	beq.n	8007f86 <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a2c      	ldr	r2, [pc, #176]	; (8008018 <HAL_SD_WriteBlocks+0x324>)
 8007f66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6c:	f043 0208 	orr.w	r2, r3, #8
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e044      	b.n	8008010 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f8c:	f003 0302 	and.w	r3, r3, #2
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d012      	beq.n	8007fba <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a1f      	ldr	r2, [pc, #124]	; (8008018 <HAL_SD_WriteBlocks+0x324>)
 8007f9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa0:	f043 0202 	orr.w	r2, r3, #2
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e02a      	b.n	8008010 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc0:	f003 0310 	and.w	r3, r3, #16
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d012      	beq.n	8007fee <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a12      	ldr	r2, [pc, #72]	; (8008018 <HAL_SD_WriteBlocks+0x324>)
 8007fce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd4:	f043 0210 	orr.w	r2, r3, #16
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e010      	b.n	8008010 <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a0a      	ldr	r2, [pc, #40]	; (800801c <HAL_SD_WriteBlocks+0x328>)
 8007ff4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007ffe:	2300      	movs	r3, #0
 8008000:	e006      	b.n	8008010 <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008006:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
  }
}
 8008010:	4618      	mov	r0, r3
 8008012:	3748      	adds	r7, #72	; 0x48
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	1fe00fff 	.word	0x1fe00fff
 800801c:	18000f3a 	.word	0x18000f3a

08008020 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800802e:	0f9b      	lsrs	r3, r3, #30
 8008030:	b2da      	uxtb	r2, r3
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800803a:	0e9b      	lsrs	r3, r3, #26
 800803c:	b2db      	uxtb	r3, r3
 800803e:	f003 030f 	and.w	r3, r3, #15
 8008042:	b2da      	uxtb	r2, r3
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800804c:	0e1b      	lsrs	r3, r3, #24
 800804e:	b2db      	uxtb	r3, r3
 8008050:	f003 0303 	and.w	r3, r3, #3
 8008054:	b2da      	uxtb	r2, r3
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800805e:	0c1b      	lsrs	r3, r3, #16
 8008060:	b2da      	uxtb	r2, r3
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800806a:	0a1b      	lsrs	r3, r3, #8
 800806c:	b2da      	uxtb	r2, r3
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008076:	b2da      	uxtb	r2, r3
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008080:	0d1b      	lsrs	r3, r3, #20
 8008082:	b29a      	uxth	r2, r3
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800808c:	0c1b      	lsrs	r3, r3, #16
 800808e:	b2db      	uxtb	r3, r3
 8008090:	f003 030f 	and.w	r3, r3, #15
 8008094:	b2da      	uxtb	r2, r3
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800809e:	0bdb      	lsrs	r3, r3, #15
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	f003 0301 	and.w	r3, r3, #1
 80080a6:	b2da      	uxtb	r2, r3
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080b0:	0b9b      	lsrs	r3, r3, #14
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	f003 0301 	and.w	r3, r3, #1
 80080b8:	b2da      	uxtb	r2, r3
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080c2:	0b5b      	lsrs	r3, r3, #13
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	f003 0301 	and.w	r3, r3, #1
 80080ca:	b2da      	uxtb	r2, r3
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080d4:	0b1b      	lsrs	r3, r3, #12
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	f003 0301 	and.w	r3, r3, #1
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2200      	movs	r2, #0
 80080e6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d163      	bne.n	80081b8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080f4:	009a      	lsls	r2, r3, #2
 80080f6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80080fa:	4013      	ands	r3, r2
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008100:	0f92      	lsrs	r2, r2, #30
 8008102:	431a      	orrs	r2, r3
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800810c:	0edb      	lsrs	r3, r3, #27
 800810e:	b2db      	uxtb	r3, r3
 8008110:	f003 0307 	and.w	r3, r3, #7
 8008114:	b2da      	uxtb	r2, r3
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800811e:	0e1b      	lsrs	r3, r3, #24
 8008120:	b2db      	uxtb	r3, r3
 8008122:	f003 0307 	and.w	r3, r3, #7
 8008126:	b2da      	uxtb	r2, r3
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008130:	0d5b      	lsrs	r3, r3, #21
 8008132:	b2db      	uxtb	r3, r3
 8008134:	f003 0307 	and.w	r3, r3, #7
 8008138:	b2da      	uxtb	r2, r3
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008142:	0c9b      	lsrs	r3, r3, #18
 8008144:	b2db      	uxtb	r3, r3
 8008146:	f003 0307 	and.w	r3, r3, #7
 800814a:	b2da      	uxtb	r2, r3
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008154:	0bdb      	lsrs	r3, r3, #15
 8008156:	b2db      	uxtb	r3, r3
 8008158:	f003 0307 	and.w	r3, r3, #7
 800815c:	b2da      	uxtb	r2, r3
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	1c5a      	adds	r2, r3, #1
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	7e1b      	ldrb	r3, [r3, #24]
 8008170:	b2db      	uxtb	r3, r3
 8008172:	f003 0307 	and.w	r3, r3, #7
 8008176:	3302      	adds	r3, #2
 8008178:	2201      	movs	r2, #1
 800817a:	fa02 f303 	lsl.w	r3, r2, r3
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008182:	fb03 f202 	mul.w	r2, r3, r2
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	7a1b      	ldrb	r3, [r3, #8]
 800818e:	b2db      	uxtb	r3, r3
 8008190:	f003 030f 	and.w	r3, r3, #15
 8008194:	2201      	movs	r2, #1
 8008196:	409a      	lsls	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80081a4:	0a52      	lsrs	r2, r2, #9
 80081a6:	fb03 f202 	mul.w	r2, r3, r2
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081b4:	659a      	str	r2, [r3, #88]	; 0x58
 80081b6:	e031      	b.n	800821c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d11d      	bne.n	80081fc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081c4:	041b      	lsls	r3, r3, #16
 80081c6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081ce:	0c1b      	lsrs	r3, r3, #16
 80081d0:	431a      	orrs	r2, r3
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	3301      	adds	r3, #1
 80081dc:	029a      	lsls	r2, r3, #10
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081f0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	659a      	str	r2, [r3, #88]	; 0x58
 80081fa:	e00f      	b.n	800821c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a58      	ldr	r2, [pc, #352]	; (8008364 <HAL_SD_GetCardCSD+0x344>)
 8008202:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008208:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	e09d      	b.n	8008358 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008220:	0b9b      	lsrs	r3, r3, #14
 8008222:	b2db      	uxtb	r3, r3
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	b2da      	uxtb	r2, r3
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008232:	09db      	lsrs	r3, r3, #7
 8008234:	b2db      	uxtb	r3, r3
 8008236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800823a:	b2da      	uxtb	r2, r3
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008244:	b2db      	uxtb	r3, r3
 8008246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800824a:	b2da      	uxtb	r2, r3
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008254:	0fdb      	lsrs	r3, r3, #31
 8008256:	b2da      	uxtb	r2, r3
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008260:	0f5b      	lsrs	r3, r3, #29
 8008262:	b2db      	uxtb	r3, r3
 8008264:	f003 0303 	and.w	r3, r3, #3
 8008268:	b2da      	uxtb	r2, r3
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008272:	0e9b      	lsrs	r3, r3, #26
 8008274:	b2db      	uxtb	r3, r3
 8008276:	f003 0307 	and.w	r3, r3, #7
 800827a:	b2da      	uxtb	r2, r3
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008284:	0d9b      	lsrs	r3, r3, #22
 8008286:	b2db      	uxtb	r3, r3
 8008288:	f003 030f 	and.w	r3, r3, #15
 800828c:	b2da      	uxtb	r2, r3
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008296:	0d5b      	lsrs	r3, r3, #21
 8008298:	b2db      	uxtb	r3, r3
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	b2da      	uxtb	r2, r3
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082b2:	0c1b      	lsrs	r3, r3, #16
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	f003 0301 	and.w	r3, r3, #1
 80082ba:	b2da      	uxtb	r2, r3
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082c6:	0bdb      	lsrs	r3, r3, #15
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	f003 0301 	and.w	r3, r3, #1
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082da:	0b9b      	lsrs	r3, r3, #14
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ee:	0b5b      	lsrs	r3, r3, #13
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	f003 0301 	and.w	r3, r3, #1
 80082f6:	b2da      	uxtb	r2, r3
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008302:	0b1b      	lsrs	r3, r3, #12
 8008304:	b2db      	uxtb	r3, r3
 8008306:	f003 0301 	and.w	r3, r3, #1
 800830a:	b2da      	uxtb	r2, r3
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008316:	0a9b      	lsrs	r3, r3, #10
 8008318:	b2db      	uxtb	r3, r3
 800831a:	f003 0303 	and.w	r3, r3, #3
 800831e:	b2da      	uxtb	r2, r3
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800832a:	0a1b      	lsrs	r3, r3, #8
 800832c:	b2db      	uxtb	r3, r3
 800832e:	f003 0303 	and.w	r3, r3, #3
 8008332:	b2da      	uxtb	r2, r3
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800833e:	085b      	lsrs	r3, r3, #1
 8008340:	b2db      	uxtb	r3, r3
 8008342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008346:	b2da      	uxtb	r2, r3
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	2201      	movs	r2, #1
 8008352:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr
 8008364:	1fe00fff 	.word	0x1fe00fff

08008368 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b094      	sub	sp, #80	; 0x50
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008372:	2300      	movs	r3, #0
 8008374:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008378:	f107 0308 	add.w	r3, r7, #8
 800837c:	4619      	mov	r1, r3
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fbd4 	bl	8008b2c <SD_SendSDStatus>
 8008384:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8008386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008388:	2b00      	cmp	r3, #0
 800838a:	d011      	beq.n	80083b0 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a4f      	ldr	r2, [pc, #316]	; (80084d0 <HAL_SD_GetCardStatus+0x168>)
 8008392:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800839a:	431a      	orrs	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80083ae:	e070      	b.n	8008492 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	099b      	lsrs	r3, r3, #6
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	f003 0303 	and.w	r3, r3, #3
 80083ba:	b2da      	uxtb	r2, r3
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	095b      	lsrs	r3, r3, #5
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	f003 0301 	and.w	r3, r3, #1
 80083ca:	b2da      	uxtb	r2, r3
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	0a1b      	lsrs	r3, r3, #8
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80083da:	b29a      	uxth	r2, r3
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	0e1b      	lsrs	r3, r3, #24
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	4313      	orrs	r3, r2
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	061a      	lsls	r2, r3, #24
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	021b      	lsls	r3, r3, #8
 80083f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80083f6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	0a1b      	lsrs	r3, r3, #8
 80083fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008400:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	0e1b      	lsrs	r3, r3, #24
 8008406:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	b2da      	uxtb	r2, r3
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	0a1b      	lsrs	r3, r3, #8
 8008418:	b2da      	uxtb	r2, r3
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	0d1b      	lsrs	r3, r3, #20
 8008422:	b2db      	uxtb	r3, r3
 8008424:	f003 030f 	and.w	r3, r3, #15
 8008428:	b2da      	uxtb	r2, r3
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	0c1b      	lsrs	r3, r3, #16
 8008432:	b29b      	uxth	r3, r3
 8008434:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008438:	b29a      	uxth	r2, r3
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	b29b      	uxth	r3, r3
 800843e:	b2db      	uxtb	r3, r3
 8008440:	b29b      	uxth	r3, r3
 8008442:	4313      	orrs	r3, r2
 8008444:	b29a      	uxth	r2, r3
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	0a9b      	lsrs	r3, r3, #10
 800844e:	b2db      	uxtb	r3, r3
 8008450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008454:	b2da      	uxtb	r2, r3
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	0a1b      	lsrs	r3, r3, #8
 800845e:	b2db      	uxtb	r3, r3
 8008460:	f003 0303 	and.w	r3, r3, #3
 8008464:	b2da      	uxtb	r2, r3
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	091b      	lsrs	r3, r3, #4
 800846e:	b2db      	uxtb	r3, r3
 8008470:	f003 030f 	and.w	r3, r3, #15
 8008474:	b2da      	uxtb	r2, r3
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	b2db      	uxtb	r3, r3
 800847e:	f003 030f 	and.w	r3, r3, #15
 8008482:	b2da      	uxtb	r2, r3
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	0e1b      	lsrs	r3, r3, #24
 800848c:	b2da      	uxtb	r2, r3
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f44f 7100 	mov.w	r1, #512	; 0x200
 800849a:	4618      	mov	r0, r3
 800849c:	f004 fbc4 	bl	800cc28 <SDMMC_CmdBlockLength>
 80084a0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80084a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00d      	beq.n	80084c4 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a08      	ldr	r2, [pc, #32]	; (80084d0 <HAL_SD_GetCardStatus+0x168>)
 80084ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084b4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2201      	movs	r2, #1
 80084ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80084c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3750      	adds	r7, #80	; 0x50
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	1fe00fff 	.word	0x1fe00fff

080084d4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800852c:	b5b0      	push	{r4, r5, r7, lr}
 800852e:	b090      	sub	sp, #64	; 0x40
 8008530:	af04      	add	r7, sp, #16
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8008536:	2300      	movs	r3, #0
 8008538:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2203      	movs	r2, #3
 8008540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008548:	2b03      	cmp	r3, #3
 800854a:	d02e      	beq.n	80085aa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008552:	d106      	bne.n	8008562 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008558:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	639a      	str	r2, [r3, #56]	; 0x38
 8008560:	e029      	b.n	80085b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008568:	d10a      	bne.n	8008580 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 fbd6 	bl	8008d1c <SD_WideBus_Enable>
 8008570:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008578:	431a      	orrs	r2, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	639a      	str	r2, [r3, #56]	; 0x38
 800857e:	e01a      	b.n	80085b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10a      	bne.n	800859c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fc13 	bl	8008db2 <SD_WideBus_Disable>
 800858c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008594:	431a      	orrs	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	639a      	str	r2, [r3, #56]	; 0x38
 800859a:	e00c      	b.n	80085b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	639a      	str	r2, [r3, #56]	; 0x38
 80085a8:	e005      	b.n	80085b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d007      	beq.n	80085ce <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a60      	ldr	r2, [pc, #384]	; (8008744 <HAL_SD_ConfigWideBusOperation+0x218>)
 80085c4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80085cc:	e097      	b.n	80086fe <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80085ce:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80085d2:	f7fd feb9 	bl	8006348 <HAL_RCCEx_GetPeriphCLKFreq>
 80085d6:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 80085d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 8086 	beq.w	80086ec <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	695a      	ldr	r2, [r3, #20]
 80085fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fc:	4952      	ldr	r1, [pc, #328]	; (8008748 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80085fe:	fba1 1303 	umull	r1, r3, r1, r3
 8008602:	0e1b      	lsrs	r3, r3, #24
 8008604:	429a      	cmp	r2, r3
 8008606:	d303      	bcc.n	8008610 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	695b      	ldr	r3, [r3, #20]
 800860c:	61fb      	str	r3, [r7, #28]
 800860e:	e05a      	b.n	80086c6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008618:	d103      	bne.n	8008622 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	695b      	ldr	r3, [r3, #20]
 800861e:	61fb      	str	r3, [r7, #28]
 8008620:	e051      	b.n	80086c6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800862a:	d126      	bne.n	800867a <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	695b      	ldr	r3, [r3, #20]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10e      	bne.n	8008652 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008636:	4a45      	ldr	r2, [pc, #276]	; (800874c <HAL_SD_ConfigWideBusOperation+0x220>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d906      	bls.n	800864a <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800863c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863e:	4a42      	ldr	r2, [pc, #264]	; (8008748 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008640:	fba2 2303 	umull	r2, r3, r2, r3
 8008644:	0e5b      	lsrs	r3, r3, #25
 8008646:	61fb      	str	r3, [r7, #28]
 8008648:	e03d      	b.n	80086c6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	61fb      	str	r3, [r7, #28]
 8008650:	e039      	b.n	80086c6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	695b      	ldr	r3, [r3, #20]
 8008656:	005b      	lsls	r3, r3, #1
 8008658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800865a:	fbb2 f3f3 	udiv	r3, r2, r3
 800865e:	4a3b      	ldr	r2, [pc, #236]	; (800874c <HAL_SD_ConfigWideBusOperation+0x220>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d906      	bls.n	8008672 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008666:	4a38      	ldr	r2, [pc, #224]	; (8008748 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008668:	fba2 2303 	umull	r2, r3, r2, r3
 800866c:	0e5b      	lsrs	r3, r3, #25
 800866e:	61fb      	str	r3, [r7, #28]
 8008670:	e029      	b.n	80086c6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	695b      	ldr	r3, [r3, #20]
 8008676:	61fb      	str	r3, [r7, #28]
 8008678:	e025      	b.n	80086c6 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	695b      	ldr	r3, [r3, #20]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d10e      	bne.n	80086a0 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008684:	4a32      	ldr	r2, [pc, #200]	; (8008750 <HAL_SD_ConfigWideBusOperation+0x224>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d906      	bls.n	8008698 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	4a2e      	ldr	r2, [pc, #184]	; (8008748 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800868e:	fba2 2303 	umull	r2, r3, r2, r3
 8008692:	0e1b      	lsrs	r3, r3, #24
 8008694:	61fb      	str	r3, [r7, #28]
 8008696:	e016      	b.n	80086c6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	61fb      	str	r3, [r7, #28]
 800869e:	e012      	b.n	80086c6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	695b      	ldr	r3, [r3, #20]
 80086a4:	005b      	lsls	r3, r3, #1
 80086a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ac:	4a28      	ldr	r2, [pc, #160]	; (8008750 <HAL_SD_ConfigWideBusOperation+0x224>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d906      	bls.n	80086c0 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80086b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b4:	4a24      	ldr	r2, [pc, #144]	; (8008748 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80086b6:	fba2 2303 	umull	r2, r3, r2, r3
 80086ba:	0e1b      	lsrs	r3, r3, #24
 80086bc:	61fb      	str	r3, [r7, #28]
 80086be:	e002      	b.n	80086c6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	695b      	ldr	r3, [r3, #20]
 80086c4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681d      	ldr	r5, [r3, #0]
 80086d0:	466c      	mov	r4, sp
 80086d2:	f107 0318 	add.w	r3, r7, #24
 80086d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80086da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80086de:	f107 030c 	add.w	r3, r7, #12
 80086e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086e4:	4628      	mov	r0, r5
 80086e6:	f004 f9c1 	bl	800ca6c <SDMMC_Init>
 80086ea:	e008      	b.n	80086fe <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008706:	4618      	mov	r0, r3
 8008708:	f004 fa8e 	bl	800cc28 <SDMMC_CmdBlockLength>
 800870c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800870e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00c      	beq.n	800872e <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a0a      	ldr	r2, [pc, #40]	; (8008744 <HAL_SD_ConfigWideBusOperation+0x218>)
 800871a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008722:	431a      	orrs	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008736:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800873a:	4618      	mov	r0, r3
 800873c:	3730      	adds	r7, #48	; 0x30
 800873e:	46bd      	mov	sp, r7
 8008740:	bdb0      	pop	{r4, r5, r7, pc}
 8008742:	bf00      	nop
 8008744:	1fe00fff 	.word	0x1fe00fff
 8008748:	55e63b89 	.word	0x55e63b89
 800874c:	02faf080 	.word	0x02faf080
 8008750:	017d7840 	.word	0x017d7840

08008754 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b086      	sub	sp, #24
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800875c:	2300      	movs	r3, #0
 800875e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008760:	f107 030c 	add.w	r3, r7, #12
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fab0 	bl	8008ccc <SD_SendStatus>
 800876c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d005      	beq.n	8008780 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	431a      	orrs	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	0a5b      	lsrs	r3, r3, #9
 8008784:	f003 030f 	and.w	r3, r3, #15
 8008788:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800878a:	693b      	ldr	r3, [r7, #16]
}
 800878c:	4618      	mov	r0, r3
 800878e:	3718      	adds	r7, #24
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008794:	b5b0      	push	{r4, r5, r7, lr}
 8008796:	b090      	sub	sp, #64	; 0x40
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800879c:	2301      	movs	r3, #1
 800879e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f004 f9bb 	bl	800cb20 <SDMMC_GetPowerState>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d102      	bne.n	80087b6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80087b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80087b4:	e0a9      	b.n	800890a <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ba:	2b03      	cmp	r3, #3
 80087bc:	d02e      	beq.n	800881c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f004 fc00 	bl	800cfc8 <SDMMC_CmdSendCID>
 80087c8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80087ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d001      	beq.n	80087d4 <SD_InitCard+0x40>
    {
      return errorstate;
 80087d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087d2:	e09a      	b.n	800890a <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2100      	movs	r1, #0
 80087da:	4618      	mov	r0, r3
 80087dc:	f004 f9e5 	bl	800cbaa <SDMMC_GetResponse>
 80087e0:	4602      	mov	r2, r0
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2104      	movs	r1, #4
 80087ec:	4618      	mov	r0, r3
 80087ee:	f004 f9dc 	bl	800cbaa <SDMMC_GetResponse>
 80087f2:	4602      	mov	r2, r0
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2108      	movs	r1, #8
 80087fe:	4618      	mov	r0, r3
 8008800:	f004 f9d3 	bl	800cbaa <SDMMC_GetResponse>
 8008804:	4602      	mov	r2, r0
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	210c      	movs	r1, #12
 8008810:	4618      	mov	r0, r3
 8008812:	f004 f9ca 	bl	800cbaa <SDMMC_GetResponse>
 8008816:	4602      	mov	r2, r0
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008820:	2b03      	cmp	r3, #3
 8008822:	d00d      	beq.n	8008840 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f107 020e 	add.w	r2, r7, #14
 800882c:	4611      	mov	r1, r2
 800882e:	4618      	mov	r0, r3
 8008830:	f004 fc09 	bl	800d046 <SDMMC_CmdSetRelAdd>
 8008834:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008838:	2b00      	cmp	r3, #0
 800883a:	d001      	beq.n	8008840 <SD_InitCard+0xac>
    {
      return errorstate;
 800883c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800883e:	e064      	b.n	800890a <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008844:	2b03      	cmp	r3, #3
 8008846:	d036      	beq.n	80088b6 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008848:	89fb      	ldrh	r3, [r7, #14]
 800884a:	461a      	mov	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008858:	041b      	lsls	r3, r3, #16
 800885a:	4619      	mov	r1, r3
 800885c:	4610      	mov	r0, r2
 800885e:	f004 fbd2 	bl	800d006 <SDMMC_CmdSendCSD>
 8008862:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008866:	2b00      	cmp	r3, #0
 8008868:	d001      	beq.n	800886e <SD_InitCard+0xda>
    {
      return errorstate;
 800886a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800886c:	e04d      	b.n	800890a <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2100      	movs	r1, #0
 8008874:	4618      	mov	r0, r3
 8008876:	f004 f998 	bl	800cbaa <SDMMC_GetResponse>
 800887a:	4602      	mov	r2, r0
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2104      	movs	r1, #4
 8008886:	4618      	mov	r0, r3
 8008888:	f004 f98f 	bl	800cbaa <SDMMC_GetResponse>
 800888c:	4602      	mov	r2, r0
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2108      	movs	r1, #8
 8008898:	4618      	mov	r0, r3
 800889a:	f004 f986 	bl	800cbaa <SDMMC_GetResponse>
 800889e:	4602      	mov	r2, r0
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	210c      	movs	r1, #12
 80088aa:	4618      	mov	r0, r3
 80088ac:	f004 f97d 	bl	800cbaa <SDMMC_GetResponse>
 80088b0:	4602      	mov	r2, r0
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2104      	movs	r1, #4
 80088bc:	4618      	mov	r0, r3
 80088be:	f004 f974 	bl	800cbaa <SDMMC_GetResponse>
 80088c2:	4603      	mov	r3, r0
 80088c4:	0d1a      	lsrs	r2, r3, #20
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80088ca:	f107 0310 	add.w	r3, r7, #16
 80088ce:	4619      	mov	r1, r3
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f7ff fba5 	bl	8008020 <HAL_SD_GetCardCSD>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d002      	beq.n	80088e2 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80088e0:	e013      	b.n	800890a <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6819      	ldr	r1, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088ea:	041b      	lsls	r3, r3, #16
 80088ec:	2200      	movs	r2, #0
 80088ee:	461c      	mov	r4, r3
 80088f0:	4615      	mov	r5, r2
 80088f2:	4622      	mov	r2, r4
 80088f4:	462b      	mov	r3, r5
 80088f6:	4608      	mov	r0, r1
 80088f8:	f004 fa7c 	bl	800cdf4 <SDMMC_CmdSelDesel>
 80088fc:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80088fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008900:	2b00      	cmp	r3, #0
 8008902:	d001      	beq.n	8008908 <SD_InitCard+0x174>
  {
    return errorstate;
 8008904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008906:	e000      	b.n	800890a <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3740      	adds	r7, #64	; 0x40
 800890e:	46bd      	mov	sp, r7
 8008910:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008914 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b088      	sub	sp, #32
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800891c:	2300      	movs	r3, #0
 800891e:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8008920:	2300      	movs	r3, #0
 8008922:	61fb      	str	r3, [r7, #28]
 8008924:	2300      	movs	r3, #0
 8008926:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8008928:	f7fa f8ba 	bl	8002aa0 <HAL_GetTick>
 800892c:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4618      	mov	r0, r3
 8008934:	f004 fa82 	bl	800ce3c <SDMMC_CmdGoIdleState>
 8008938:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d001      	beq.n	8008944 <SD_PowerON+0x30>
  {
    return errorstate;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	e0ed      	b.n	8008b20 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4618      	mov	r0, r3
 800894a:	f004 fa95 	bl	800ce78 <SDMMC_CmdOperCond>
 800894e:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00d      	beq.n	8008972 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4618      	mov	r0, r3
 8008962:	f004 fa6b 	bl	800ce3c <SDMMC_CmdGoIdleState>
 8008966:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d004      	beq.n	8008978 <SD_PowerON+0x64>
    {
      return errorstate;
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	e0d6      	b.n	8008b20 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897c:	2b01      	cmp	r3, #1
 800897e:	d137      	bne.n	80089f0 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2100      	movs	r1, #0
 8008986:	4618      	mov	r0, r3
 8008988:	f004 fa96 	bl	800ceb8 <SDMMC_CmdAppCommand>
 800898c:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d02d      	beq.n	80089f0 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008994:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008998:	e0c2      	b.n	8008b20 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2100      	movs	r1, #0
 80089a0:	4618      	mov	r0, r3
 80089a2:	f004 fa89 	bl	800ceb8 <SDMMC_CmdAppCommand>
 80089a6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d001      	beq.n	80089b2 <SD_PowerON+0x9e>
    {
      return errorstate;
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	e0b6      	b.n	8008b20 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	495c      	ldr	r1, [pc, #368]	; (8008b28 <SD_PowerON+0x214>)
 80089b8:	4618      	mov	r0, r3
 80089ba:	f004 faa0 	bl	800cefe <SDMMC_CmdAppOperCommand>
 80089be:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d002      	beq.n	80089cc <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80089ca:	e0a9      	b.n	8008b20 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2100      	movs	r1, #0
 80089d2:	4618      	mov	r0, r3
 80089d4:	f004 f8e9 	bl	800cbaa <SDMMC_GetResponse>
 80089d8:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	0fdb      	lsrs	r3, r3, #31
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d101      	bne.n	80089e6 <SD_PowerON+0xd2>
 80089e2:	2301      	movs	r3, #1
 80089e4:	e000      	b.n	80089e8 <SD_PowerON+0xd4>
 80089e6:	2300      	movs	r3, #0
 80089e8:	61bb      	str	r3, [r7, #24]

    count++;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	3301      	adds	r3, #1
 80089ee:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d802      	bhi.n	8008a00 <SD_PowerON+0xec>
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d0cc      	beq.n	800899a <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d902      	bls.n	8008a10 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008a0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a0e:	e087      	b.n	8008b20 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d07e      	beq.n	8008b18 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d17a      	bne.n	8008b1e <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d075      	beq.n	8008b1e <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a38:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f042 0208 	orr.w	r2, r2, #8
 8008a48:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f004 fb60 	bl	800d114 <SDMMC_CmdVoltageSwitch>
 8008a54:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00c      	beq.n	8008a76 <SD_PowerON+0x162>
        {
          return errorstate;
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	e05f      	b.n	8008b20 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008a60:	f7fa f81e 	bl	8002aa0 <HAL_GetTick>
 8008a64:	4602      	mov	r2, r0
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a6e:	d102      	bne.n	8008a76 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8008a70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a74:	e054      	b.n	8008b20 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008a80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a84:	d1ec      	bne.n	8008a60 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008a8e:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a9e:	d002      	beq.n	8008aa6 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8008aa0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008aa4:	e03c      	b.n	8008b20 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8008aa6:	2001      	movs	r0, #1
 8008aa8:	f000 fa9e 	bl	8008fe8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f042 0204 	orr.w	r2, r2, #4
 8008aba:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008abc:	e00a      	b.n	8008ad4 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008abe:	f7f9 ffef 	bl	8002aa0 <HAL_GetTick>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008acc:	d102      	bne.n	8008ad4 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8008ace:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ad2:	e025      	b.n	8008b20 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ade:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ae2:	d1ec      	bne.n	8008abe <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008aec:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008af8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008afc:	d102      	bne.n	8008b04 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008afe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b02:	e00d      	b.n	8008b20 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2213      	movs	r2, #19
 8008b0a:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b14:	639a      	str	r2, [r3, #56]	; 0x38
 8008b16:	e002      	b.n	8008b1e <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3720      	adds	r7, #32
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	c1100000 	.word	0xc1100000

08008b2c <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b08c      	sub	sp, #48	; 0x30
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008b36:	f7f9 ffb3 	bl	8002aa0 <HAL_GetTick>
 8008b3a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2100      	movs	r1, #0
 8008b46:	4618      	mov	r0, r3
 8008b48:	f004 f82f 	bl	800cbaa <SDMMC_GetResponse>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b56:	d102      	bne.n	8008b5e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008b58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b5c:	e0b0      	b.n	8008cc0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2140      	movs	r1, #64	; 0x40
 8008b64:	4618      	mov	r0, r3
 8008b66:	f004 f85f 	bl	800cc28 <SDMMC_CmdBlockLength>
 8008b6a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b6c:	6a3b      	ldr	r3, [r7, #32]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d005      	beq.n	8008b7e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008b7a:	6a3b      	ldr	r3, [r7, #32]
 8008b7c:	e0a0      	b.n	8008cc0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b86:	041b      	lsls	r3, r3, #16
 8008b88:	4619      	mov	r1, r3
 8008b8a:	4610      	mov	r0, r2
 8008b8c:	f004 f994 	bl	800ceb8 <SDMMC_CmdAppCommand>
 8008b90:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b92:	6a3b      	ldr	r3, [r7, #32]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d005      	beq.n	8008ba4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008ba0:	6a3b      	ldr	r3, [r7, #32]
 8008ba2:	e08d      	b.n	8008cc0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008ba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ba8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008baa:	2340      	movs	r3, #64	; 0x40
 8008bac:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008bae:	2360      	movs	r3, #96	; 0x60
 8008bb0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008bb2:	2302      	movs	r3, #2
 8008bb4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f107 0208 	add.w	r2, r7, #8
 8008bc6:	4611      	mov	r1, r2
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f004 f801 	bl	800cbd0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f004 fa7c 	bl	800d0d0 <SDMMC_CmdStatusRegister>
 8008bd8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bda:	6a3b      	ldr	r3, [r7, #32]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d02b      	beq.n	8008c38 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008be8:	6a3b      	ldr	r3, [r7, #32]
 8008bea:	e069      	b.n	8008cc0 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d013      	beq.n	8008c22 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bfe:	e00d      	b.n	8008c1c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4618      	mov	r0, r3
 8008c06:	f003 ff5b 	bl	800cac0 <SDMMC_ReadFIFO>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c0e:	601a      	str	r2, [r3, #0]
        pData++;
 8008c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c12:	3304      	adds	r3, #4
 8008c14:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8008c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c18:	3301      	adds	r3, #1
 8008c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1e:	2b07      	cmp	r3, #7
 8008c20:	d9ee      	bls.n	8008c00 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008c22:	f7f9 ff3d 	bl	8002aa0 <HAL_GetTick>
 8008c26:	4602      	mov	r2, r0
 8008c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2a:	1ad3      	subs	r3, r2, r3
 8008c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c30:	d102      	bne.n	8008c38 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008c32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c36:	e043      	b.n	8008cc0 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c3e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d0d2      	beq.n	8008bec <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c4c:	f003 0308 	and.w	r3, r3, #8
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d001      	beq.n	8008c58 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008c54:	2308      	movs	r3, #8
 8008c56:	e033      	b.n	8008cc0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c5e:	f003 0302 	and.w	r3, r3, #2
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d001      	beq.n	8008c6a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008c66:	2302      	movs	r3, #2
 8008c68:	e02a      	b.n	8008cc0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c70:	f003 0320 	and.w	r3, r3, #32
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d017      	beq.n	8008ca8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008c78:	2320      	movs	r3, #32
 8008c7a:	e021      	b.n	8008cc0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f003 ff1d 	bl	800cac0 <SDMMC_ReadFIFO>
 8008c86:	4602      	mov	r2, r0
 8008c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8a:	601a      	str	r2, [r3, #0]
    pData++;
 8008c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8e:	3304      	adds	r3, #4
 8008c90:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008c92:	f7f9 ff05 	bl	8002aa0 <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ca0:	d102      	bne.n	8008ca8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008ca2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ca6:	e00b      	b.n	8008cc0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1e2      	bne.n	8008c7c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a03      	ldr	r2, [pc, #12]	; (8008cc8 <SD_SendSDStatus+0x19c>)
 8008cbc:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3730      	adds	r7, #48	; 0x30
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	18000f3a 	.word	0x18000f3a

08008ccc <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d102      	bne.n	8008ce2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008cdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ce0:	e018      	b.n	8008d14 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cea:	041b      	lsls	r3, r3, #16
 8008cec:	4619      	mov	r1, r3
 8008cee:	4610      	mov	r0, r2
 8008cf0:	f004 f9cb 	bl	800d08a <SDMMC_CmdSendStatus>
 8008cf4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d001      	beq.n	8008d00 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	e009      	b.n	8008d14 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2100      	movs	r1, #0
 8008d06:	4618      	mov	r0, r3
 8008d08:	f003 ff4f 	bl	800cbaa <SDMMC_GetResponse>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b086      	sub	sp, #24
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008d24:	2300      	movs	r3, #0
 8008d26:	60fb      	str	r3, [r7, #12]
 8008d28:	2300      	movs	r3, #0
 8008d2a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2100      	movs	r1, #0
 8008d32:	4618      	mov	r0, r3
 8008d34:	f003 ff39 	bl	800cbaa <SDMMC_GetResponse>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d42:	d102      	bne.n	8008d4a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008d44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d48:	e02f      	b.n	8008daa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008d4a:	f107 030c 	add.w	r3, r7, #12
 8008d4e:	4619      	mov	r1, r3
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f879 	bl	8008e48 <SD_FindSCR>
 8008d56:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	e023      	b.n	8008daa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d01c      	beq.n	8008da6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d74:	041b      	lsls	r3, r3, #16
 8008d76:	4619      	mov	r1, r3
 8008d78:	4610      	mov	r0, r2
 8008d7a:	f004 f89d 	bl	800ceb8 <SDMMC_CmdAppCommand>
 8008d7e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	e00f      	b.n	8008daa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2102      	movs	r1, #2
 8008d90:	4618      	mov	r0, r3
 8008d92:	f004 f8d4 	bl	800cf3e <SDMMC_CmdBusWidth>
 8008d96:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d001      	beq.n	8008da2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	e003      	b.n	8008daa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008da2:	2300      	movs	r3, #0
 8008da4:	e001      	b.n	8008daa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008da6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3718      	adds	r7, #24
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b086      	sub	sp, #24
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008dba:	2300      	movs	r3, #0
 8008dbc:	60fb      	str	r3, [r7, #12]
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f003 feee 	bl	800cbaa <SDMMC_GetResponse>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008dd8:	d102      	bne.n	8008de0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008dda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008dde:	e02f      	b.n	8008e40 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008de0:	f107 030c 	add.w	r3, r7, #12
 8008de4:	4619      	mov	r1, r3
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f82e 	bl	8008e48 <SD_FindSCR>
 8008dec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d001      	beq.n	8008df8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	e023      	b.n	8008e40 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d01c      	beq.n	8008e3c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e0a:	041b      	lsls	r3, r3, #16
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	4610      	mov	r0, r2
 8008e10:	f004 f852 	bl	800ceb8 <SDMMC_CmdAppCommand>
 8008e14:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d001      	beq.n	8008e20 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	e00f      	b.n	8008e40 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2100      	movs	r1, #0
 8008e26:	4618      	mov	r0, r3
 8008e28:	f004 f889 	bl	800cf3e <SDMMC_CmdBusWidth>
 8008e2c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d001      	beq.n	8008e38 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	e003      	b.n	8008e40 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	e001      	b.n	8008e40 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008e3c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3718      	adds	r7, #24
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b08e      	sub	sp, #56	; 0x38
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008e52:	f7f9 fe25 	bl	8002aa0 <HAL_GetTick>
 8008e56:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	60bb      	str	r3, [r7, #8]
 8008e60:	2300      	movs	r3, #0
 8008e62:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2108      	movs	r1, #8
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f003 feda 	bl	800cc28 <SDMMC_CmdBlockLength>
 8008e74:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d001      	beq.n	8008e80 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7e:	e0ad      	b.n	8008fdc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e88:	041b      	lsls	r3, r3, #16
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	f004 f813 	bl	800ceb8 <SDMMC_CmdAppCommand>
 8008e92:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d001      	beq.n	8008e9e <SD_FindSCR+0x56>
  {
    return errorstate;
 8008e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9c:	e09e      	b.n	8008fdc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008e9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ea2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008ea4:	2308      	movs	r3, #8
 8008ea6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008ea8:	2330      	movs	r3, #48	; 0x30
 8008eaa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008eac:	2302      	movs	r3, #2
 8008eae:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f107 0210 	add.w	r2, r7, #16
 8008ec0:	4611      	mov	r1, r2
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f003 fe84 	bl	800cbd0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f004 f859 	bl	800cf84 <SDMMC_CmdSendSCR>
 8008ed2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d027      	beq.n	8008f2a <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008edc:	e07e      	b.n	8008fdc <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d113      	bne.n	8008f14 <SD_FindSCR+0xcc>
 8008eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d110      	bne.n	8008f14 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f003 fde2 	bl	800cac0 <SDMMC_ReadFIFO>
 8008efc:	4603      	mov	r3, r0
 8008efe:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4618      	mov	r0, r3
 8008f06:	f003 fddb 	bl	800cac0 <SDMMC_ReadFIFO>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	60fb      	str	r3, [r7, #12]
      index++;
 8008f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f10:	3301      	adds	r3, #1
 8008f12:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008f14:	f7f9 fdc4 	bl	8002aa0 <HAL_GetTick>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1c:	1ad3      	subs	r3, r2, r3
 8008f1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f22:	d102      	bne.n	8008f2a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008f24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f28:	e058      	b.n	8008fdc <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f30:	f240 532a 	movw	r3, #1322	; 0x52a
 8008f34:	4013      	ands	r3, r2
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d0d1      	beq.n	8008ede <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f40:	f003 0308 	and.w	r3, r3, #8
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d005      	beq.n	8008f54 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2208      	movs	r2, #8
 8008f4e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008f50:	2308      	movs	r3, #8
 8008f52:	e043      	b.n	8008fdc <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f5a:	f003 0302 	and.w	r3, r3, #2
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d005      	beq.n	8008f6e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2202      	movs	r2, #2
 8008f68:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	e036      	b.n	8008fdc <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f74:	f003 0320 	and.w	r3, r3, #32
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d005      	beq.n	8008f88 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2220      	movs	r2, #32
 8008f82:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008f84:	2320      	movs	r3, #32
 8008f86:	e029      	b.n	8008fdc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a15      	ldr	r2, [pc, #84]	; (8008fe4 <SD_FindSCR+0x19c>)
 8008f8e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	061a      	lsls	r2, r3, #24
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	021b      	lsls	r3, r3, #8
 8008f98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008f9c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	0a1b      	lsrs	r3, r3, #8
 8008fa2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008fa6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	0e1b      	lsrs	r3, r3, #24
 8008fac:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb0:	601a      	str	r2, [r3, #0]
    scr++;
 8008fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb4:	3304      	adds	r3, #4
 8008fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	061a      	lsls	r2, r3, #24
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	021b      	lsls	r3, r3, #8
 8008fc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008fc4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	0a1b      	lsrs	r3, r3, #8
 8008fca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008fce:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	0e1b      	lsrs	r3, r3, #24
 8008fd4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3738      	adds	r7, #56	; 0x38
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	18000f3a 	.word	0x18000f3a

08008fe8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	4603      	mov	r3, r0
 8008ff0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8008ff2:	bf00      	nop
 8008ff4:	370c      	adds	r7, #12
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr

08008ffe <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b084      	sub	sp, #16
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d101      	bne.n	8009010 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	e095      	b.n	800913c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009014:	2b00      	cmp	r3, #0
 8009016:	d108      	bne.n	800902a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009020:	d009      	beq.n	8009036 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	61da      	str	r2, [r3, #28]
 8009028:	e005      	b.n	8009036 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009042:	b2db      	uxtb	r3, r3
 8009044:	2b00      	cmp	r3, #0
 8009046:	d106      	bne.n	8009056 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f7f9 fa53 	bl	80024fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2202      	movs	r2, #2
 800905a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800906c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009076:	d902      	bls.n	800907e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009078:	2300      	movs	r3, #0
 800907a:	60fb      	str	r3, [r7, #12]
 800907c:	e002      	b.n	8009084 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800907e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009082:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800908c:	d007      	beq.n	800909e <HAL_SPI_Init+0xa0>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009096:	d002      	beq.n	800909e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80090ae:	431a      	orrs	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	f003 0302 	and.w	r3, r3, #2
 80090b8:	431a      	orrs	r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	695b      	ldr	r3, [r3, #20]
 80090be:	f003 0301 	and.w	r3, r3, #1
 80090c2:	431a      	orrs	r2, r3
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	699b      	ldr	r3, [r3, #24]
 80090c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090cc:	431a      	orrs	r2, r3
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	69db      	ldr	r3, [r3, #28]
 80090d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090d6:	431a      	orrs	r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6a1b      	ldr	r3, [r3, #32]
 80090dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090e0:	ea42 0103 	orr.w	r1, r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	430a      	orrs	r2, r1
 80090f2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	0c1b      	lsrs	r3, r3, #16
 80090fa:	f003 0204 	and.w	r2, r3, #4
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009102:	f003 0310 	and.w	r3, r3, #16
 8009106:	431a      	orrs	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800910c:	f003 0308 	and.w	r3, r3, #8
 8009110:	431a      	orrs	r2, r3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800911a:	ea42 0103 	orr.w	r1, r2, r3
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	430a      	orrs	r2, r1
 800912a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2201      	movs	r2, #1
 8009136:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b088      	sub	sp, #32
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	603b      	str	r3, [r7, #0]
 8009150:	4613      	mov	r3, r2
 8009152:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009154:	2300      	movs	r3, #0
 8009156:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800915e:	2b01      	cmp	r3, #1
 8009160:	d101      	bne.n	8009166 <HAL_SPI_Transmit+0x22>
 8009162:	2302      	movs	r3, #2
 8009164:	e158      	b.n	8009418 <HAL_SPI_Transmit+0x2d4>
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2201      	movs	r2, #1
 800916a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800916e:	f7f9 fc97 	bl	8002aa0 <HAL_GetTick>
 8009172:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009174:	88fb      	ldrh	r3, [r7, #6]
 8009176:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800917e:	b2db      	uxtb	r3, r3
 8009180:	2b01      	cmp	r3, #1
 8009182:	d002      	beq.n	800918a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009184:	2302      	movs	r3, #2
 8009186:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009188:	e13d      	b.n	8009406 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d002      	beq.n	8009196 <HAL_SPI_Transmit+0x52>
 8009190:	88fb      	ldrh	r3, [r7, #6]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d102      	bne.n	800919c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	77fb      	strb	r3, [r7, #31]
    goto error;
 800919a:	e134      	b.n	8009406 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2203      	movs	r2, #3
 80091a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2200      	movs	r2, #0
 80091a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	68ba      	ldr	r2, [r7, #8]
 80091ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	88fa      	ldrh	r2, [r7, #6]
 80091b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	88fa      	ldrh	r2, [r7, #6]
 80091ba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2200      	movs	r2, #0
 80091c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2200      	movs	r2, #0
 80091d6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2200      	movs	r2, #0
 80091dc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091e6:	d10f      	bne.n	8009208 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009206:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009212:	2b40      	cmp	r3, #64	; 0x40
 8009214:	d007      	beq.n	8009226 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009224:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800922e:	d94b      	bls.n	80092c8 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d002      	beq.n	800923e <HAL_SPI_Transmit+0xfa>
 8009238:	8afb      	ldrh	r3, [r7, #22]
 800923a:	2b01      	cmp	r3, #1
 800923c:	d13e      	bne.n	80092bc <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009242:	881a      	ldrh	r2, [r3, #0]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800924e:	1c9a      	adds	r2, r3, #2
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009258:	b29b      	uxth	r3, r3
 800925a:	3b01      	subs	r3, #1
 800925c:	b29a      	uxth	r2, r3
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009262:	e02b      	b.n	80092bc <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	f003 0302 	and.w	r3, r3, #2
 800926e:	2b02      	cmp	r3, #2
 8009270:	d112      	bne.n	8009298 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009276:	881a      	ldrh	r2, [r3, #0]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009282:	1c9a      	adds	r2, r3, #2
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800928c:	b29b      	uxth	r3, r3
 800928e:	3b01      	subs	r3, #1
 8009290:	b29a      	uxth	r2, r3
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009296:	e011      	b.n	80092bc <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009298:	f7f9 fc02 	bl	8002aa0 <HAL_GetTick>
 800929c:	4602      	mov	r2, r0
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	683a      	ldr	r2, [r7, #0]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d803      	bhi.n	80092b0 <HAL_SPI_Transmit+0x16c>
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092ae:	d102      	bne.n	80092b6 <HAL_SPI_Transmit+0x172>
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d102      	bne.n	80092bc <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80092b6:	2303      	movs	r3, #3
 80092b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80092ba:	e0a4      	b.n	8009406 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1ce      	bne.n	8009264 <HAL_SPI_Transmit+0x120>
 80092c6:	e07c      	b.n	80093c2 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d002      	beq.n	80092d6 <HAL_SPI_Transmit+0x192>
 80092d0:	8afb      	ldrh	r3, [r7, #22]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d170      	bne.n	80093b8 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092da:	b29b      	uxth	r3, r3
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d912      	bls.n	8009306 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e4:	881a      	ldrh	r2, [r3, #0]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f0:	1c9a      	adds	r2, r3, #2
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	3b02      	subs	r3, #2
 80092fe:	b29a      	uxth	r2, r3
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009304:	e058      	b.n	80093b8 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	330c      	adds	r3, #12
 8009310:	7812      	ldrb	r2, [r2, #0]
 8009312:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009318:	1c5a      	adds	r2, r3, #1
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009322:	b29b      	uxth	r3, r3
 8009324:	3b01      	subs	r3, #1
 8009326:	b29a      	uxth	r2, r3
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800932c:	e044      	b.n	80093b8 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	f003 0302 	and.w	r3, r3, #2
 8009338:	2b02      	cmp	r3, #2
 800933a:	d12b      	bne.n	8009394 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009340:	b29b      	uxth	r3, r3
 8009342:	2b01      	cmp	r3, #1
 8009344:	d912      	bls.n	800936c <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800934a:	881a      	ldrh	r2, [r3, #0]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009356:	1c9a      	adds	r2, r3, #2
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009360:	b29b      	uxth	r3, r3
 8009362:	3b02      	subs	r3, #2
 8009364:	b29a      	uxth	r2, r3
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	87da      	strh	r2, [r3, #62]	; 0x3e
 800936a:	e025      	b.n	80093b8 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	330c      	adds	r3, #12
 8009376:	7812      	ldrb	r2, [r2, #0]
 8009378:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800937e:	1c5a      	adds	r2, r3, #1
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009388:	b29b      	uxth	r3, r3
 800938a:	3b01      	subs	r3, #1
 800938c:	b29a      	uxth	r2, r3
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009392:	e011      	b.n	80093b8 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009394:	f7f9 fb84 	bl	8002aa0 <HAL_GetTick>
 8009398:	4602      	mov	r2, r0
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	1ad3      	subs	r3, r2, r3
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d803      	bhi.n	80093ac <HAL_SPI_Transmit+0x268>
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093aa:	d102      	bne.n	80093b2 <HAL_SPI_Transmit+0x26e>
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d102      	bne.n	80093b8 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80093b2:	2303      	movs	r3, #3
 80093b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80093b6:	e026      	b.n	8009406 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093bc:	b29b      	uxth	r3, r3
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1b5      	bne.n	800932e <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80093c2:	69ba      	ldr	r2, [r7, #24]
 80093c4:	6839      	ldr	r1, [r7, #0]
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f001 fa08 	bl	800a7dc <SPI_EndRxTxTransaction>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d002      	beq.n	80093d8 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2220      	movs	r2, #32
 80093d6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d10a      	bne.n	80093f6 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093e0:	2300      	movs	r3, #0
 80093e2:	613b      	str	r3, [r7, #16]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	613b      	str	r3, [r7, #16]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	613b      	str	r3, [r7, #16]
 80093f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d002      	beq.n	8009404 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	77fb      	strb	r3, [r7, #31]
 8009402:	e000      	b.n	8009406 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8009404:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2200      	movs	r2, #0
 8009412:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009416:	7ffb      	ldrb	r3, [r7, #31]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3720      	adds	r7, #32
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b088      	sub	sp, #32
 8009424:	af02      	add	r7, sp, #8
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	603b      	str	r3, [r7, #0]
 800942c:	4613      	mov	r3, r2
 800942e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009430:	2300      	movs	r3, #0
 8009432:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800943c:	d112      	bne.n	8009464 <HAL_SPI_Receive+0x44>
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10e      	bne.n	8009464 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2204      	movs	r2, #4
 800944a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800944e:	88fa      	ldrh	r2, [r7, #6]
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	4613      	mov	r3, r2
 8009456:	68ba      	ldr	r2, [r7, #8]
 8009458:	68b9      	ldr	r1, [r7, #8]
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f000 f910 	bl	8009680 <HAL_SPI_TransmitReceive>
 8009460:	4603      	mov	r3, r0
 8009462:	e109      	b.n	8009678 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800946a:	2b01      	cmp	r3, #1
 800946c:	d101      	bne.n	8009472 <HAL_SPI_Receive+0x52>
 800946e:	2302      	movs	r3, #2
 8009470:	e102      	b.n	8009678 <HAL_SPI_Receive+0x258>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2201      	movs	r2, #1
 8009476:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800947a:	f7f9 fb11 	bl	8002aa0 <HAL_GetTick>
 800947e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009486:	b2db      	uxtb	r3, r3
 8009488:	2b01      	cmp	r3, #1
 800948a:	d002      	beq.n	8009492 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800948c:	2302      	movs	r3, #2
 800948e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009490:	e0e9      	b.n	8009666 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d002      	beq.n	800949e <HAL_SPI_Receive+0x7e>
 8009498:	88fb      	ldrh	r3, [r7, #6]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d102      	bne.n	80094a4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80094a2:	e0e0      	b.n	8009666 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2204      	movs	r2, #4
 80094a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2200      	movs	r2, #0
 80094b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	68ba      	ldr	r2, [r7, #8]
 80094b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	88fa      	ldrh	r2, [r7, #6]
 80094bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	88fa      	ldrh	r2, [r7, #6]
 80094c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2200      	movs	r2, #0
 80094cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2200      	movs	r2, #0
 80094e4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80094ee:	d908      	bls.n	8009502 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	685a      	ldr	r2, [r3, #4]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80094fe:	605a      	str	r2, [r3, #4]
 8009500:	e007      	b.n	8009512 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	685a      	ldr	r2, [r3, #4]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009510:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800951a:	d10f      	bne.n	800953c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800952a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800953a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009546:	2b40      	cmp	r3, #64	; 0x40
 8009548:	d007      	beq.n	800955a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009558:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009562:	d867      	bhi.n	8009634 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009564:	e030      	b.n	80095c8 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	f003 0301 	and.w	r3, r3, #1
 8009570:	2b01      	cmp	r3, #1
 8009572:	d117      	bne.n	80095a4 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f103 020c 	add.w	r2, r3, #12
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009580:	7812      	ldrb	r2, [r2, #0]
 8009582:	b2d2      	uxtb	r2, r2
 8009584:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800958a:	1c5a      	adds	r2, r3, #1
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009596:	b29b      	uxth	r3, r3
 8009598:	3b01      	subs	r3, #1
 800959a:	b29a      	uxth	r2, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80095a2:	e011      	b.n	80095c8 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095a4:	f7f9 fa7c 	bl	8002aa0 <HAL_GetTick>
 80095a8:	4602      	mov	r2, r0
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	1ad3      	subs	r3, r2, r3
 80095ae:	683a      	ldr	r2, [r7, #0]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d803      	bhi.n	80095bc <HAL_SPI_Receive+0x19c>
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095ba:	d102      	bne.n	80095c2 <HAL_SPI_Receive+0x1a2>
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d102      	bne.n	80095c8 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80095c2:	2303      	movs	r3, #3
 80095c4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80095c6:	e04e      	b.n	8009666 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d1c8      	bne.n	8009566 <HAL_SPI_Receive+0x146>
 80095d4:	e034      	b.n	8009640 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	f003 0301 	and.w	r3, r3, #1
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d115      	bne.n	8009610 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	68da      	ldr	r2, [r3, #12]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ee:	b292      	uxth	r2, r2
 80095f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f6:	1c9a      	adds	r2, r3, #2
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009602:	b29b      	uxth	r3, r3
 8009604:	3b01      	subs	r3, #1
 8009606:	b29a      	uxth	r2, r3
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800960e:	e011      	b.n	8009634 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009610:	f7f9 fa46 	bl	8002aa0 <HAL_GetTick>
 8009614:	4602      	mov	r2, r0
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	1ad3      	subs	r3, r2, r3
 800961a:	683a      	ldr	r2, [r7, #0]
 800961c:	429a      	cmp	r2, r3
 800961e:	d803      	bhi.n	8009628 <HAL_SPI_Receive+0x208>
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009626:	d102      	bne.n	800962e <HAL_SPI_Receive+0x20e>
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d102      	bne.n	8009634 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800962e:	2303      	movs	r3, #3
 8009630:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009632:	e018      	b.n	8009666 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800963a:	b29b      	uxth	r3, r3
 800963c:	2b00      	cmp	r3, #0
 800963e:	d1ca      	bne.n	80095d6 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009640:	693a      	ldr	r2, [r7, #16]
 8009642:	6839      	ldr	r1, [r7, #0]
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f001 f871 	bl	800a72c <SPI_EndRxTransaction>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d002      	beq.n	8009656 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2220      	movs	r2, #32
 8009654:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800965a:	2b00      	cmp	r3, #0
 800965c:	d002      	beq.n	8009664 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800965e:	2301      	movs	r3, #1
 8009660:	75fb      	strb	r3, [r7, #23]
 8009662:	e000      	b.n	8009666 <HAL_SPI_Receive+0x246>
  }

error :
 8009664:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2201      	movs	r2, #1
 800966a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009676:	7dfb      	ldrb	r3, [r7, #23]
}
 8009678:	4618      	mov	r0, r3
 800967a:	3718      	adds	r7, #24
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b08a      	sub	sp, #40	; 0x28
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
 800968c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800968e:	2301      	movs	r3, #1
 8009690:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009692:	2300      	movs	r3, #0
 8009694:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d101      	bne.n	80096a6 <HAL_SPI_TransmitReceive+0x26>
 80096a2:	2302      	movs	r3, #2
 80096a4:	e1fb      	b.n	8009a9e <HAL_SPI_TransmitReceive+0x41e>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2201      	movs	r2, #1
 80096aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80096ae:	f7f9 f9f7 	bl	8002aa0 <HAL_GetTick>
 80096b2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80096ba:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80096c2:	887b      	ldrh	r3, [r7, #2]
 80096c4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80096c6:	887b      	ldrh	r3, [r7, #2]
 80096c8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80096ca:	7efb      	ldrb	r3, [r7, #27]
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d00e      	beq.n	80096ee <HAL_SPI_TransmitReceive+0x6e>
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096d6:	d106      	bne.n	80096e6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d102      	bne.n	80096e6 <HAL_SPI_TransmitReceive+0x66>
 80096e0:	7efb      	ldrb	r3, [r7, #27]
 80096e2:	2b04      	cmp	r3, #4
 80096e4:	d003      	beq.n	80096ee <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80096e6:	2302      	movs	r3, #2
 80096e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80096ec:	e1cd      	b.n	8009a8a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d005      	beq.n	8009700 <HAL_SPI_TransmitReceive+0x80>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d002      	beq.n	8009700 <HAL_SPI_TransmitReceive+0x80>
 80096fa:	887b      	ldrh	r3, [r7, #2]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d103      	bne.n	8009708 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009706:	e1c0      	b.n	8009a8a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800970e:	b2db      	uxtb	r3, r3
 8009710:	2b04      	cmp	r3, #4
 8009712:	d003      	beq.n	800971c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2205      	movs	r2, #5
 8009718:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2200      	movs	r2, #0
 8009720:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	887a      	ldrh	r2, [r7, #2]
 800972c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	887a      	ldrh	r2, [r7, #2]
 8009734:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	68ba      	ldr	r2, [r7, #8]
 800973c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	887a      	ldrh	r2, [r7, #2]
 8009742:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	887a      	ldrh	r2, [r7, #2]
 8009748:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2200      	movs	r2, #0
 800974e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2200      	movs	r2, #0
 8009754:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800975e:	d802      	bhi.n	8009766 <HAL_SPI_TransmitReceive+0xe6>
 8009760:	8a3b      	ldrh	r3, [r7, #16]
 8009762:	2b01      	cmp	r3, #1
 8009764:	d908      	bls.n	8009778 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	685a      	ldr	r2, [r3, #4]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009774:	605a      	str	r2, [r3, #4]
 8009776:	e007      	b.n	8009788 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	685a      	ldr	r2, [r3, #4]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009786:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009792:	2b40      	cmp	r3, #64	; 0x40
 8009794:	d007      	beq.n	80097a6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	68db      	ldr	r3, [r3, #12]
 80097aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80097ae:	d97c      	bls.n	80098aa <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d002      	beq.n	80097be <HAL_SPI_TransmitReceive+0x13e>
 80097b8:	8a7b      	ldrh	r3, [r7, #18]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d169      	bne.n	8009892 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c2:	881a      	ldrh	r2, [r3, #0]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ce:	1c9a      	adds	r2, r3, #2
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097d8:	b29b      	uxth	r3, r3
 80097da:	3b01      	subs	r3, #1
 80097dc:	b29a      	uxth	r2, r3
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097e2:	e056      	b.n	8009892 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	f003 0302 	and.w	r3, r3, #2
 80097ee:	2b02      	cmp	r3, #2
 80097f0:	d11b      	bne.n	800982a <HAL_SPI_TransmitReceive+0x1aa>
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d016      	beq.n	800982a <HAL_SPI_TransmitReceive+0x1aa>
 80097fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d113      	bne.n	800982a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009806:	881a      	ldrh	r2, [r3, #0]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009812:	1c9a      	adds	r2, r3, #2
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800981c:	b29b      	uxth	r3, r3
 800981e:	3b01      	subs	r3, #1
 8009820:	b29a      	uxth	r2, r3
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009826:	2300      	movs	r3, #0
 8009828:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	f003 0301 	and.w	r3, r3, #1
 8009834:	2b01      	cmp	r3, #1
 8009836:	d11c      	bne.n	8009872 <HAL_SPI_TransmitReceive+0x1f2>
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800983e:	b29b      	uxth	r3, r3
 8009840:	2b00      	cmp	r3, #0
 8009842:	d016      	beq.n	8009872 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	68da      	ldr	r2, [r3, #12]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800984e:	b292      	uxth	r2, r2
 8009850:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009856:	1c9a      	adds	r2, r3, #2
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009862:	b29b      	uxth	r3, r3
 8009864:	3b01      	subs	r3, #1
 8009866:	b29a      	uxth	r2, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800986e:	2301      	movs	r3, #1
 8009870:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009872:	f7f9 f915 	bl	8002aa0 <HAL_GetTick>
 8009876:	4602      	mov	r2, r0
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	1ad3      	subs	r3, r2, r3
 800987c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800987e:	429a      	cmp	r2, r3
 8009880:	d807      	bhi.n	8009892 <HAL_SPI_TransmitReceive+0x212>
 8009882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009888:	d003      	beq.n	8009892 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800988a:	2303      	movs	r3, #3
 800988c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009890:	e0fb      	b.n	8009a8a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009896:	b29b      	uxth	r3, r3
 8009898:	2b00      	cmp	r3, #0
 800989a:	d1a3      	bne.n	80097e4 <HAL_SPI_TransmitReceive+0x164>
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d19d      	bne.n	80097e4 <HAL_SPI_TransmitReceive+0x164>
 80098a8:	e0df      	b.n	8009a6a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d003      	beq.n	80098ba <HAL_SPI_TransmitReceive+0x23a>
 80098b2:	8a7b      	ldrh	r3, [r7, #18]
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	f040 80cb 	bne.w	8009a50 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098be:	b29b      	uxth	r3, r3
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d912      	bls.n	80098ea <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c8:	881a      	ldrh	r2, [r3, #0]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d4:	1c9a      	adds	r2, r3, #2
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098de:	b29b      	uxth	r3, r3
 80098e0:	3b02      	subs	r3, #2
 80098e2:	b29a      	uxth	r2, r3
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80098e8:	e0b2      	b.n	8009a50 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	330c      	adds	r3, #12
 80098f4:	7812      	ldrb	r2, [r2, #0]
 80098f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098fc:	1c5a      	adds	r2, r3, #1
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009906:	b29b      	uxth	r3, r3
 8009908:	3b01      	subs	r3, #1
 800990a:	b29a      	uxth	r2, r3
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009910:	e09e      	b.n	8009a50 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	f003 0302 	and.w	r3, r3, #2
 800991c:	2b02      	cmp	r3, #2
 800991e:	d134      	bne.n	800998a <HAL_SPI_TransmitReceive+0x30a>
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009924:	b29b      	uxth	r3, r3
 8009926:	2b00      	cmp	r3, #0
 8009928:	d02f      	beq.n	800998a <HAL_SPI_TransmitReceive+0x30a>
 800992a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992c:	2b01      	cmp	r3, #1
 800992e:	d12c      	bne.n	800998a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009934:	b29b      	uxth	r3, r3
 8009936:	2b01      	cmp	r3, #1
 8009938:	d912      	bls.n	8009960 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800993e:	881a      	ldrh	r2, [r3, #0]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800994a:	1c9a      	adds	r2, r3, #2
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009954:	b29b      	uxth	r3, r3
 8009956:	3b02      	subs	r3, #2
 8009958:	b29a      	uxth	r2, r3
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800995e:	e012      	b.n	8009986 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	330c      	adds	r3, #12
 800996a:	7812      	ldrb	r2, [r2, #0]
 800996c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009972:	1c5a      	adds	r2, r3, #1
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800997c:	b29b      	uxth	r3, r3
 800997e:	3b01      	subs	r3, #1
 8009980:	b29a      	uxth	r2, r3
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009986:	2300      	movs	r3, #0
 8009988:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	f003 0301 	and.w	r3, r3, #1
 8009994:	2b01      	cmp	r3, #1
 8009996:	d148      	bne.n	8009a2a <HAL_SPI_TransmitReceive+0x3aa>
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800999e:	b29b      	uxth	r3, r3
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d042      	beq.n	8009a2a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d923      	bls.n	80099f8 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	68da      	ldr	r2, [r3, #12]
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ba:	b292      	uxth	r2, r2
 80099bc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c2:	1c9a      	adds	r2, r3, #2
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	3b02      	subs	r3, #2
 80099d2:	b29a      	uxth	r2, r3
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d81f      	bhi.n	8009a26 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	685a      	ldr	r2, [r3, #4]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80099f4:	605a      	str	r2, [r3, #4]
 80099f6:	e016      	b.n	8009a26 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f103 020c 	add.w	r2, r3, #12
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a04:	7812      	ldrb	r2, [r2, #0]
 8009a06:	b2d2      	uxtb	r2, r2
 8009a08:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a0e:	1c5a      	adds	r2, r3, #1
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	b29a      	uxth	r2, r3
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a26:	2301      	movs	r3, #1
 8009a28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009a2a:	f7f9 f839 	bl	8002aa0 <HAL_GetTick>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	1ad3      	subs	r3, r2, r3
 8009a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d803      	bhi.n	8009a42 <HAL_SPI_TransmitReceive+0x3c2>
 8009a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a40:	d102      	bne.n	8009a48 <HAL_SPI_TransmitReceive+0x3c8>
 8009a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d103      	bne.n	8009a50 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8009a48:	2303      	movs	r3, #3
 8009a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009a4e:	e01c      	b.n	8009a8a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	f47f af5b 	bne.w	8009912 <HAL_SPI_TransmitReceive+0x292>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f47f af54 	bne.w	8009912 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009a6a:	69fa      	ldr	r2, [r7, #28]
 8009a6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f000 feb4 	bl	800a7dc <SPI_EndRxTxTransaction>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d006      	beq.n	8009a88 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2220      	movs	r2, #32
 8009a84:	661a      	str	r2, [r3, #96]	; 0x60
 8009a86:	e000      	b.n	8009a8a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8009a88:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009a9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3728      	adds	r7, #40	; 0x28
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
	...

08009aa8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d101      	bne.n	8009ac8 <HAL_SPI_Transmit_DMA+0x20>
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	e0d8      	b.n	8009c7a <HAL_SPI_Transmit_DMA+0x1d2>
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d002      	beq.n	8009ae2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8009adc:	2302      	movs	r3, #2
 8009ade:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009ae0:	e0c6      	b.n	8009c70 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d002      	beq.n	8009aee <HAL_SPI_Transmit_DMA+0x46>
 8009ae8:	88fb      	ldrh	r3, [r7, #6]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d102      	bne.n	8009af4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8009aee:	2301      	movs	r3, #1
 8009af0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009af2:	e0bd      	b.n	8009c70 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2203      	movs	r2, #3
 8009af8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2200      	movs	r2, #0
 8009b00:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	68ba      	ldr	r2, [r7, #8]
 8009b06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	88fa      	ldrh	r2, [r7, #6]
 8009b0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	88fa      	ldrh	r2, [r7, #6]
 8009b12:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2200      	movs	r2, #0
 8009b18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2200      	movs	r2, #0
 8009b24:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2200      	movs	r2, #0
 8009b32:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b3e:	d10f      	bne.n	8009b60 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b5e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b64:	4a47      	ldr	r2, [pc, #284]	; (8009c84 <HAL_SPI_Transmit_DMA+0x1dc>)
 8009b66:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b6c:	4a46      	ldr	r2, [pc, #280]	; (8009c88 <HAL_SPI_Transmit_DMA+0x1e0>)
 8009b6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b74:	4a45      	ldr	r2, [pc, #276]	; (8009c8c <HAL_SPI_Transmit_DMA+0x1e4>)
 8009b76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	685a      	ldr	r2, [r3, #4]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009b8e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009b98:	d82d      	bhi.n	8009bf6 <HAL_SPI_Transmit_DMA+0x14e>
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ba4:	d127      	bne.n	8009bf6 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	f003 0301 	and.w	r3, r3, #1
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d10f      	bne.n	8009bd4 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	685a      	ldr	r2, [r3, #4]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009bc2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	085b      	lsrs	r3, r3, #1
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009bd2:	e010      	b.n	8009bf6 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	685a      	ldr	r2, [r3, #4]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009be2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	085b      	lsrs	r3, r3, #1
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	3301      	adds	r3, #1
 8009bf0:	b29a      	uxth	r2, r3
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bfe:	4619      	mov	r1, r3
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	330c      	adds	r3, #12
 8009c06:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c0c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009c0e:	f7f9 f931 	bl	8002e74 <HAL_DMA_Start_IT>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d00c      	beq.n	8009c32 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c1c:	f043 0210 	orr.w	r2, r3, #16
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8009c24:	2301      	movs	r3, #1
 8009c26:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8009c30:	e01e      	b.n	8009c70 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c3c:	2b40      	cmp	r3, #64	; 0x40
 8009c3e:	d007      	beq.n	8009c50 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c4e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	685a      	ldr	r2, [r3, #4]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f042 0220 	orr.w	r2, r2, #32
 8009c5e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	685a      	ldr	r2, [r3, #4]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f042 0202 	orr.w	r2, r2, #2
 8009c6e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2200      	movs	r2, #0
 8009c74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3718      	adds	r7, #24
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	0800a45b 	.word	0x0800a45b
 8009c88:	0800a27d 	.word	0x0800a27d
 8009c8c:	0800a4af 	.word	0x0800a4af

08009c90 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b086      	sub	sp, #24
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	689b      	ldr	r3, [r3, #8]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d110      	bne.n	8009ccc <HAL_SPI_Receive_DMA+0x3c>
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009cb2:	d10b      	bne.n	8009ccc <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2204      	movs	r2, #4
 8009cb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8009cbc:	88fb      	ldrh	r3, [r7, #6]
 8009cbe:	68ba      	ldr	r2, [r7, #8]
 8009cc0:	68b9      	ldr	r1, [r7, #8]
 8009cc2:	68f8      	ldr	r0, [r7, #12]
 8009cc4:	f000 f908 	bl	8009ed8 <HAL_SPI_TransmitReceive_DMA>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	e0fb      	b.n	8009ec4 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d101      	bne.n	8009cda <HAL_SPI_Receive_DMA+0x4a>
 8009cd6:	2302      	movs	r3, #2
 8009cd8:	e0f4      	b.n	8009ec4 <HAL_SPI_Receive_DMA+0x234>
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d002      	beq.n	8009cf4 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8009cee:	2302      	movs	r3, #2
 8009cf0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009cf2:	e0e2      	b.n	8009eba <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d002      	beq.n	8009d00 <HAL_SPI_Receive_DMA+0x70>
 8009cfa:	88fb      	ldrh	r3, [r7, #6]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d102      	bne.n	8009d06 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009d04:	e0d9      	b.n	8009eba <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2204      	movs	r2, #4
 8009d0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2200      	movs	r2, #0
 8009d12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	68ba      	ldr	r2, [r7, #8]
 8009d18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	88fa      	ldrh	r2, [r7, #6]
 8009d1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	88fa      	ldrh	r2, [r7, #6]
 8009d26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2200      	movs	r2, #0
 8009d34:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d4a:	d10f      	bne.n	8009d6c <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d5a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009d6a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	685a      	ldr	r2, [r3, #4]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d7a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009d84:	d908      	bls.n	8009d98 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	685a      	ldr	r2, [r3, #4]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009d94:	605a      	str	r2, [r3, #4]
 8009d96:	e042      	b.n	8009e1e <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	685a      	ldr	r2, [r3, #4]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009da6:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dac:	699b      	ldr	r3, [r3, #24]
 8009dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009db2:	d134      	bne.n	8009e1e <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	685a      	ldr	r2, [r3, #4]
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009dc2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	f003 0301 	and.w	r3, r3, #1
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d111      	bne.n	8009df8 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	685a      	ldr	r2, [r3, #4]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009de2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	085b      	lsrs	r3, r3, #1
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009df6:	e012      	b.n	8009e1e <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	685a      	ldr	r2, [r3, #4]
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009e06:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	085b      	lsrs	r3, r3, #1
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	3301      	adds	r3, #1
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e22:	4a2a      	ldr	r2, [pc, #168]	; (8009ecc <HAL_SPI_Receive_DMA+0x23c>)
 8009e24:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e2a:	4a29      	ldr	r2, [pc, #164]	; (8009ed0 <HAL_SPI_Receive_DMA+0x240>)
 8009e2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e32:	4a28      	ldr	r2, [pc, #160]	; (8009ed4 <HAL_SPI_Receive_DMA+0x244>)
 8009e34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	330c      	adds	r3, #12
 8009e48:	4619      	mov	r1, r3
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4e:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009e56:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009e58:	f7f9 f80c 	bl	8002e74 <HAL_DMA_Start_IT>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00c      	beq.n	8009e7c <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e66:	f043 0210 	orr.w	r2, r3, #16
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2201      	movs	r2, #1
 8009e76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8009e7a:	e01e      	b.n	8009eba <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e86:	2b40      	cmp	r3, #64	; 0x40
 8009e88:	d007      	beq.n	8009e9a <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e98:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	685a      	ldr	r2, [r3, #4]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f042 0220 	orr.w	r2, r2, #32
 8009ea8:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	685a      	ldr	r2, [r3, #4]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f042 0201 	orr.w	r2, r2, #1
 8009eb8:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3718      	adds	r7, #24
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}
 8009ecc:	0800a477 	.word	0x0800a477
 8009ed0:	0800a323 	.word	0x0800a323
 8009ed4:	0800a4af 	.word	0x0800a4af

08009ed8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b086      	sub	sp, #24
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	607a      	str	r2, [r7, #4]
 8009ee4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d101      	bne.n	8009ef8 <HAL_SPI_TransmitReceive_DMA+0x20>
 8009ef4:	2302      	movs	r3, #2
 8009ef6:	e16c      	b.n	800a1d2 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2201      	movs	r2, #1
 8009efc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009f06:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8009f0e:	7dbb      	ldrb	r3, [r7, #22]
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d00d      	beq.n	8009f30 <HAL_SPI_TransmitReceive_DMA+0x58>
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f1a:	d106      	bne.n	8009f2a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d102      	bne.n	8009f2a <HAL_SPI_TransmitReceive_DMA+0x52>
 8009f24:	7dbb      	ldrb	r3, [r7, #22]
 8009f26:	2b04      	cmp	r3, #4
 8009f28:	d002      	beq.n	8009f30 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8009f2a:	2302      	movs	r3, #2
 8009f2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009f2e:	e14b      	b.n	800a1c8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d005      	beq.n	8009f42 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8009f3c:	887b      	ldrh	r3, [r7, #2]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d102      	bne.n	8009f48 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009f46:	e13f      	b.n	800a1c8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	2b04      	cmp	r3, #4
 8009f52:	d003      	beq.n	8009f5c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2205      	movs	r2, #5
 8009f58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	68ba      	ldr	r2, [r7, #8]
 8009f66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	887a      	ldrh	r2, [r7, #2]
 8009f6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	887a      	ldrh	r2, [r7, #2]
 8009f72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	887a      	ldrh	r2, [r7, #2]
 8009f7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	887a      	ldrh	r2, [r7, #2]
 8009f86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2200      	movs	r2, #0
 8009f94:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8009fa4:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	68db      	ldr	r3, [r3, #12]
 8009faa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009fae:	d908      	bls.n	8009fc2 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	685a      	ldr	r2, [r3, #4]
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009fbe:	605a      	str	r2, [r3, #4]
 8009fc0:	e06f      	b.n	800a0a2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	685a      	ldr	r2, [r3, #4]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009fd0:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fd6:	699b      	ldr	r3, [r3, #24]
 8009fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fdc:	d126      	bne.n	800a02c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8009fe2:	f003 0301 	and.w	r3, r3, #1
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d10f      	bne.n	800a00a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	685a      	ldr	r2, [r3, #4]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009ff8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	085b      	lsrs	r3, r3, #1
 800a002:	b29a      	uxth	r2, r3
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a008:	e010      	b.n	800a02c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	685a      	ldr	r2, [r3, #4]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a018:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a01e:	b29b      	uxth	r3, r3
 800a020:	085b      	lsrs	r3, r3, #1
 800a022:	b29b      	uxth	r3, r3
 800a024:	3301      	adds	r3, #1
 800a026:	b29a      	uxth	r2, r3
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a030:	699b      	ldr	r3, [r3, #24]
 800a032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a036:	d134      	bne.n	800a0a2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	685a      	ldr	r2, [r3, #4]
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a046:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a04e:	b29b      	uxth	r3, r3
 800a050:	f003 0301 	and.w	r3, r3, #1
 800a054:	2b00      	cmp	r3, #0
 800a056:	d111      	bne.n	800a07c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	685a      	ldr	r2, [r3, #4]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a066:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a06e:	b29b      	uxth	r3, r3
 800a070:	085b      	lsrs	r3, r3, #1
 800a072:	b29a      	uxth	r2, r3
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800a07a:	e012      	b.n	800a0a2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	685a      	ldr	r2, [r3, #4]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a08a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a092:	b29b      	uxth	r3, r3
 800a094:	085b      	lsrs	r3, r3, #1
 800a096:	b29b      	uxth	r3, r3
 800a098:	3301      	adds	r3, #1
 800a09a:	b29a      	uxth	r2, r3
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	2b04      	cmp	r3, #4
 800a0ac:	d108      	bne.n	800a0c0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0b2:	4a4a      	ldr	r2, [pc, #296]	; (800a1dc <HAL_SPI_TransmitReceive_DMA+0x304>)
 800a0b4:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ba:	4a49      	ldr	r2, [pc, #292]	; (800a1e0 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800a0bc:	62da      	str	r2, [r3, #44]	; 0x2c
 800a0be:	e007      	b.n	800a0d0 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0c4:	4a47      	ldr	r2, [pc, #284]	; (800a1e4 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800a0c6:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0cc:	4a46      	ldr	r2, [pc, #280]	; (800a1e8 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800a0ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0d4:	4a45      	ldr	r2, [pc, #276]	; (800a1ec <HAL_SPI_TransmitReceive_DMA+0x314>)
 800a0d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0dc:	2200      	movs	r2, #0
 800a0de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	330c      	adds	r3, #12
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a0f8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a0fa:	f7f8 febb 	bl	8002e74 <HAL_DMA_Start_IT>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d00c      	beq.n	800a11e <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a108:	f043 0210 	orr.w	r2, r3, #16
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2201      	movs	r2, #1
 800a118:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800a11c:	e054      	b.n	800a1c8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	685a      	ldr	r2, [r3, #4]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f042 0201 	orr.w	r2, r2, #1
 800a12c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a132:	2200      	movs	r2, #0
 800a134:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a13a:	2200      	movs	r2, #0
 800a13c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a142:	2200      	movs	r2, #0
 800a144:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a14a:	2200      	movs	r2, #0
 800a14c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a156:	4619      	mov	r1, r3
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	330c      	adds	r3, #12
 800a15e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a164:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a166:	f7f8 fe85 	bl	8002e74 <HAL_DMA_Start_IT>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d00c      	beq.n	800a18a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a174:	f043 0210 	orr.w	r2, r3, #16
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a17c:	2301      	movs	r3, #1
 800a17e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800a188:	e01e      	b.n	800a1c8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a194:	2b40      	cmp	r3, #64	; 0x40
 800a196:	d007      	beq.n	800a1a8 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1a6:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	685a      	ldr	r2, [r3, #4]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f042 0220 	orr.w	r2, r2, #32
 800a1b6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	685a      	ldr	r2, [r3, #4]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f042 0202 	orr.w	r2, r2, #2
 800a1c6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a1d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3718      	adds	r7, #24
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	0800a477 	.word	0x0800a477
 800a1e0:	0800a323 	.word	0x0800a323
 800a1e4:	0800a493 	.word	0x0800a493
 800a1e8:	0800a3cb 	.word	0x0800a3cb
 800a1ec:	0800a4af 	.word	0x0800a4af

0800a1f0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a1f8:	bf00      	nop
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a20c:	bf00      	nop
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a220:	bf00      	nop
 800a222:	370c      	adds	r7, #12
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a234:	bf00      	nop
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800a248:	bf00      	nop
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800a25c:	bf00      	nop
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a270:	bf00      	nop
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b086      	sub	sp, #24
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a288:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a28a:	f7f8 fc09 	bl	8002aa0 <HAL_GetTick>
 800a28e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f003 0320 	and.w	r3, r3, #32
 800a29a:	2b20      	cmp	r3, #32
 800a29c:	d03b      	beq.n	800a316 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	685a      	ldr	r2, [r3, #4]
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f022 0220 	bic.w	r2, r2, #32
 800a2ac:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	685a      	ldr	r2, [r3, #4]
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f022 0202 	bic.w	r2, r2, #2
 800a2bc:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a2be:	693a      	ldr	r2, [r7, #16]
 800a2c0:	2164      	movs	r1, #100	; 0x64
 800a2c2:	6978      	ldr	r0, [r7, #20]
 800a2c4:	f000 fa8a 	bl	800a7dc <SPI_EndRxTxTransaction>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d005      	beq.n	800a2da <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2d2:	f043 0220 	orr.w	r2, r3, #32
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d10a      	bne.n	800a2f8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	60fb      	str	r3, [r7, #12]
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	60fb      	str	r3, [r7, #12]
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	60fb      	str	r3, [r7, #12]
 800a2f6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	2201      	movs	r2, #1
 800a302:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d003      	beq.n	800a316 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a30e:	6978      	ldr	r0, [r7, #20]
 800a310:	f7ff ffaa 	bl	800a268 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a314:	e002      	b.n	800a31c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800a316:	6978      	ldr	r0, [r7, #20]
 800a318:	f7ff ff6a 	bl	800a1f0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a31c:	3718      	adds	r7, #24
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a322:	b580      	push	{r7, lr}
 800a324:	b084      	sub	sp, #16
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a32e:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a330:	f7f8 fbb6 	bl	8002aa0 <HAL_GetTick>
 800a334:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f003 0320 	and.w	r3, r3, #32
 800a340:	2b20      	cmp	r3, #32
 800a342:	d03c      	beq.n	800a3be <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	685a      	ldr	r2, [r3, #4]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f022 0220 	bic.w	r2, r2, #32
 800a352:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d10d      	bne.n	800a378 <SPI_DMAReceiveCplt+0x56>
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a364:	d108      	bne.n	800a378 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	685a      	ldr	r2, [r3, #4]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f022 0203 	bic.w	r2, r2, #3
 800a374:	605a      	str	r2, [r3, #4]
 800a376:	e007      	b.n	800a388 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	685a      	ldr	r2, [r3, #4]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f022 0201 	bic.w	r2, r2, #1
 800a386:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a388:	68ba      	ldr	r2, [r7, #8]
 800a38a:	2164      	movs	r1, #100	; 0x64
 800a38c:	68f8      	ldr	r0, [r7, #12]
 800a38e:	f000 f9cd 	bl	800a72c <SPI_EndRxTransaction>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d002      	beq.n	800a39e <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2220      	movs	r2, #32
 800a39c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d003      	beq.n	800a3be <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	f7ff ff56 	bl	800a268 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a3bc:	e002      	b.n	800a3c4 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f7ff ff20 	bl	800a204 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b084      	sub	sp, #16
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3d6:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a3d8:	f7f8 fb62 	bl	8002aa0 <HAL_GetTick>
 800a3dc:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f003 0320 	and.w	r3, r3, #32
 800a3e8:	2b20      	cmp	r3, #32
 800a3ea:	d030      	beq.n	800a44e <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	685a      	ldr	r2, [r3, #4]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f022 0220 	bic.w	r2, r2, #32
 800a3fa:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a3fc:	68ba      	ldr	r2, [r7, #8]
 800a3fe:	2164      	movs	r1, #100	; 0x64
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f000 f9eb 	bl	800a7dc <SPI_EndRxTxTransaction>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d005      	beq.n	800a418 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a410:	f043 0220 	orr.w	r2, r3, #32
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	685a      	ldr	r2, [r3, #4]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f022 0203 	bic.w	r2, r2, #3
 800a426:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2200      	movs	r2, #0
 800a42c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2200      	movs	r2, #0
 800a432:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2201      	movs	r2, #1
 800a43a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a442:	2b00      	cmp	r3, #0
 800a444:	d003      	beq.n	800a44e <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	f7ff ff0e 	bl	800a268 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a44c:	e002      	b.n	800a454 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800a44e:	68f8      	ldr	r0, [r7, #12]
 800a450:	f7ff fee2 	bl	800a218 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a454:	3710      	adds	r7, #16
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}

0800a45a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a45a:	b580      	push	{r7, lr}
 800a45c:	b084      	sub	sp, #16
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a466:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f7ff fedf 	bl	800a22c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a46e:	bf00      	nop
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}

0800a476 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a476:	b580      	push	{r7, lr}
 800a478:	b084      	sub	sp, #16
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a482:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	f7ff fedb 	bl	800a240 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a48a:	bf00      	nop
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a492:	b580      	push	{r7, lr}
 800a494:	b084      	sub	sp, #16
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a49e:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f7ff fed7 	bl	800a254 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a4a6:	bf00      	nop
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a4ae:	b580      	push	{r7, lr}
 800a4b0:	b084      	sub	sp, #16
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ba:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	685a      	ldr	r2, [r3, #4]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f022 0203 	bic.w	r2, r2, #3
 800a4ca:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4d0:	f043 0210 	orr.w	r2, r3, #16
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f7ff fec1 	bl	800a268 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a4e6:	bf00      	nop
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
	...

0800a4f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b088      	sub	sp, #32
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	603b      	str	r3, [r7, #0]
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a500:	f7f8 face 	bl	8002aa0 <HAL_GetTick>
 800a504:	4602      	mov	r2, r0
 800a506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a508:	1a9b      	subs	r3, r3, r2
 800a50a:	683a      	ldr	r2, [r7, #0]
 800a50c:	4413      	add	r3, r2
 800a50e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a510:	f7f8 fac6 	bl	8002aa0 <HAL_GetTick>
 800a514:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a516:	4b39      	ldr	r3, [pc, #228]	; (800a5fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	015b      	lsls	r3, r3, #5
 800a51c:	0d1b      	lsrs	r3, r3, #20
 800a51e:	69fa      	ldr	r2, [r7, #28]
 800a520:	fb02 f303 	mul.w	r3, r2, r3
 800a524:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a526:	e054      	b.n	800a5d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a52e:	d050      	beq.n	800a5d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a530:	f7f8 fab6 	bl	8002aa0 <HAL_GetTick>
 800a534:	4602      	mov	r2, r0
 800a536:	69bb      	ldr	r3, [r7, #24]
 800a538:	1ad3      	subs	r3, r2, r3
 800a53a:	69fa      	ldr	r2, [r7, #28]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d902      	bls.n	800a546 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d13d      	bne.n	800a5c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	685a      	ldr	r2, [r3, #4]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a554:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a55e:	d111      	bne.n	800a584 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a568:	d004      	beq.n	800a574 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a572:	d107      	bne.n	800a584 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a582:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a58c:	d10f      	bne.n	800a5ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a59c:	601a      	str	r2, [r3, #0]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a5ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a5be:	2303      	movs	r3, #3
 800a5c0:	e017      	b.n	800a5f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d101      	bne.n	800a5cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	689a      	ldr	r2, [r3, #8]
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	4013      	ands	r3, r2
 800a5dc:	68ba      	ldr	r2, [r7, #8]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	bf0c      	ite	eq
 800a5e2:	2301      	moveq	r3, #1
 800a5e4:	2300      	movne	r3, #0
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	79fb      	ldrb	r3, [r7, #7]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d19b      	bne.n	800a528 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a5f0:	2300      	movs	r3, #0
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3720      	adds	r7, #32
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	2000000c 	.word	0x2000000c

0800a600 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b08a      	sub	sp, #40	; 0x28
 800a604:	af00      	add	r7, sp, #0
 800a606:	60f8      	str	r0, [r7, #12]
 800a608:	60b9      	str	r1, [r7, #8]
 800a60a:	607a      	str	r2, [r7, #4]
 800a60c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a60e:	2300      	movs	r3, #0
 800a610:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a612:	f7f8 fa45 	bl	8002aa0 <HAL_GetTick>
 800a616:	4602      	mov	r2, r0
 800a618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61a:	1a9b      	subs	r3, r3, r2
 800a61c:	683a      	ldr	r2, [r7, #0]
 800a61e:	4413      	add	r3, r2
 800a620:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a622:	f7f8 fa3d 	bl	8002aa0 <HAL_GetTick>
 800a626:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	330c      	adds	r3, #12
 800a62e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a630:	4b3d      	ldr	r3, [pc, #244]	; (800a728 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	4613      	mov	r3, r2
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	4413      	add	r3, r2
 800a63a:	00da      	lsls	r2, r3, #3
 800a63c:	1ad3      	subs	r3, r2, r3
 800a63e:	0d1b      	lsrs	r3, r3, #20
 800a640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a642:	fb02 f303 	mul.w	r3, r2, r3
 800a646:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a648:	e060      	b.n	800a70c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a650:	d107      	bne.n	800a662 <SPI_WaitFifoStateUntilTimeout+0x62>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d104      	bne.n	800a662 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a660:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a668:	d050      	beq.n	800a70c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a66a:	f7f8 fa19 	bl	8002aa0 <HAL_GetTick>
 800a66e:	4602      	mov	r2, r0
 800a670:	6a3b      	ldr	r3, [r7, #32]
 800a672:	1ad3      	subs	r3, r2, r3
 800a674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a676:	429a      	cmp	r2, r3
 800a678:	d902      	bls.n	800a680 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d13d      	bne.n	800a6fc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	685a      	ldr	r2, [r3, #4]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a68e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a698:	d111      	bne.n	800a6be <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6a2:	d004      	beq.n	800a6ae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6ac:	d107      	bne.n	800a6be <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6c6:	d10f      	bne.n	800a6e8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a6d6:	601a      	str	r2, [r3, #0]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a6e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a6f8:	2303      	movs	r3, #3
 800a6fa:	e010      	b.n	800a71e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d101      	bne.n	800a706 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a702:	2300      	movs	r3, #0
 800a704:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	3b01      	subs	r3, #1
 800a70a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	689a      	ldr	r2, [r3, #8]
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	4013      	ands	r3, r2
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d196      	bne.n	800a64a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a71c:	2300      	movs	r3, #0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3728      	adds	r7, #40	; 0x28
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	2000000c 	.word	0x2000000c

0800a72c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b086      	sub	sp, #24
 800a730:	af02      	add	r7, sp, #8
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a740:	d111      	bne.n	800a766 <SPI_EndRxTransaction+0x3a>
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a74a:	d004      	beq.n	800a756 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a754:	d107      	bne.n	800a766 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a764:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	9300      	str	r3, [sp, #0]
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	2200      	movs	r2, #0
 800a76e:	2180      	movs	r1, #128	; 0x80
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	f7ff febd 	bl	800a4f0 <SPI_WaitFlagStateUntilTimeout>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d007      	beq.n	800a78c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a780:	f043 0220 	orr.w	r2, r3, #32
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a788:	2303      	movs	r3, #3
 800a78a:	e023      	b.n	800a7d4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a794:	d11d      	bne.n	800a7d2 <SPI_EndRxTransaction+0xa6>
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a79e:	d004      	beq.n	800a7aa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7a8:	d113      	bne.n	800a7d2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	9300      	str	r3, [sp, #0]
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a7b6:	68f8      	ldr	r0, [r7, #12]
 800a7b8:	f7ff ff22 	bl	800a600 <SPI_WaitFifoStateUntilTimeout>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d007      	beq.n	800a7d2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7c6:	f043 0220 	orr.w	r2, r3, #32
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a7ce:	2303      	movs	r3, #3
 800a7d0:	e000      	b.n	800a7d4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b086      	sub	sp, #24
 800a7e0:	af02      	add	r7, sp, #8
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	9300      	str	r3, [sp, #0]
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	f7ff ff03 	bl	800a600 <SPI_WaitFifoStateUntilTimeout>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d007      	beq.n	800a810 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a804:	f043 0220 	orr.w	r2, r3, #32
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a80c:	2303      	movs	r3, #3
 800a80e:	e027      	b.n	800a860 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	9300      	str	r3, [sp, #0]
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	2200      	movs	r2, #0
 800a818:	2180      	movs	r1, #128	; 0x80
 800a81a:	68f8      	ldr	r0, [r7, #12]
 800a81c:	f7ff fe68 	bl	800a4f0 <SPI_WaitFlagStateUntilTimeout>
 800a820:	4603      	mov	r3, r0
 800a822:	2b00      	cmp	r3, #0
 800a824:	d007      	beq.n	800a836 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a82a:	f043 0220 	orr.w	r2, r3, #32
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a832:	2303      	movs	r3, #3
 800a834:	e014      	b.n	800a860 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	9300      	str	r3, [sp, #0]
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	2200      	movs	r2, #0
 800a83e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f7ff fedc 	bl	800a600 <SPI_WaitFifoStateUntilTimeout>
 800a848:	4603      	mov	r3, r0
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d007      	beq.n	800a85e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a852:	f043 0220 	orr.w	r2, r3, #32
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a85a:	2303      	movs	r3, #3
 800a85c:	e000      	b.n	800a860 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3710      	adds	r7, #16
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d101      	bne.n	800a87a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a876:	2301      	movs	r3, #1
 800a878:	e049      	b.n	800a90e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a880:	b2db      	uxtb	r3, r3
 800a882:	2b00      	cmp	r3, #0
 800a884:	d106      	bne.n	800a894 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f7f7 fe76 	bl	8002580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2202      	movs	r2, #2
 800a898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	3304      	adds	r3, #4
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	4610      	mov	r0, r2
 800a8a8:	f000 fad2 	bl	800ae50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2201      	movs	r2, #1
 800a900:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2201      	movs	r2, #1
 800a908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3708      	adds	r7, #8
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
	...

0800a918 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a926:	b2db      	uxtb	r3, r3
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d001      	beq.n	800a930 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a92c:	2301      	movs	r3, #1
 800a92e:	e04f      	b.n	800a9d0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2202      	movs	r2, #2
 800a934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	68da      	ldr	r2, [r3, #12]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f042 0201 	orr.w	r2, r2, #1
 800a946:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4a23      	ldr	r2, [pc, #140]	; (800a9dc <HAL_TIM_Base_Start_IT+0xc4>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d01d      	beq.n	800a98e <HAL_TIM_Base_Start_IT+0x76>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a95a:	d018      	beq.n	800a98e <HAL_TIM_Base_Start_IT+0x76>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a1f      	ldr	r2, [pc, #124]	; (800a9e0 <HAL_TIM_Base_Start_IT+0xc8>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d013      	beq.n	800a98e <HAL_TIM_Base_Start_IT+0x76>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a1e      	ldr	r2, [pc, #120]	; (800a9e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d00e      	beq.n	800a98e <HAL_TIM_Base_Start_IT+0x76>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a1c      	ldr	r2, [pc, #112]	; (800a9e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d009      	beq.n	800a98e <HAL_TIM_Base_Start_IT+0x76>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a1b      	ldr	r2, [pc, #108]	; (800a9ec <HAL_TIM_Base_Start_IT+0xd4>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d004      	beq.n	800a98e <HAL_TIM_Base_Start_IT+0x76>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a19      	ldr	r2, [pc, #100]	; (800a9f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d115      	bne.n	800a9ba <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	689a      	ldr	r2, [r3, #8]
 800a994:	4b17      	ldr	r3, [pc, #92]	; (800a9f4 <HAL_TIM_Base_Start_IT+0xdc>)
 800a996:	4013      	ands	r3, r2
 800a998:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2b06      	cmp	r3, #6
 800a99e:	d015      	beq.n	800a9cc <HAL_TIM_Base_Start_IT+0xb4>
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9a6:	d011      	beq.n	800a9cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f042 0201 	orr.w	r2, r2, #1
 800a9b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9b8:	e008      	b.n	800a9cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f042 0201 	orr.w	r2, r2, #1
 800a9c8:	601a      	str	r2, [r3, #0]
 800a9ca:	e000      	b.n	800a9ce <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a9ce:	2300      	movs	r3, #0
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3714      	adds	r7, #20
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr
 800a9dc:	40012c00 	.word	0x40012c00
 800a9e0:	40000400 	.word	0x40000400
 800a9e4:	40000800 	.word	0x40000800
 800a9e8:	40000c00 	.word	0x40000c00
 800a9ec:	40013400 	.word	0x40013400
 800a9f0:	40014000 	.word	0x40014000
 800a9f4:	00010007 	.word	0x00010007

0800a9f8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d101      	bne.n	800aa0a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	e049      	b.n	800aa9e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d106      	bne.n	800aa24 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 f841 	bl	800aaa6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2202      	movs	r2, #2
 800aa28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	3304      	adds	r3, #4
 800aa34:	4619      	mov	r1, r3
 800aa36:	4610      	mov	r0, r2
 800aa38:	f000 fa0a 	bl	800ae50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2201      	movs	r2, #1
 800aa58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2201      	movs	r2, #1
 800aa68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2201      	movs	r2, #1
 800aa98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3708      	adds	r7, #8
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800aaa6:	b480      	push	{r7}
 800aaa8:	b083      	sub	sp, #12
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800aaae:	bf00      	nop
 800aab0:	370c      	adds	r7, #12
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr

0800aaba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b082      	sub	sp, #8
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	f003 0302 	and.w	r3, r3, #2
 800aacc:	2b02      	cmp	r3, #2
 800aace:	d122      	bne.n	800ab16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	f003 0302 	and.w	r3, r3, #2
 800aada:	2b02      	cmp	r3, #2
 800aadc:	d11b      	bne.n	800ab16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f06f 0202 	mvn.w	r2, #2
 800aae6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2201      	movs	r2, #1
 800aaec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	699b      	ldr	r3, [r3, #24]
 800aaf4:	f003 0303 	and.w	r3, r3, #3
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d003      	beq.n	800ab04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 f989 	bl	800ae14 <HAL_TIM_IC_CaptureCallback>
 800ab02:	e005      	b.n	800ab10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 f97b 	bl	800ae00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 f98c 	bl	800ae28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	691b      	ldr	r3, [r3, #16]
 800ab1c:	f003 0304 	and.w	r3, r3, #4
 800ab20:	2b04      	cmp	r3, #4
 800ab22:	d122      	bne.n	800ab6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	f003 0304 	and.w	r3, r3, #4
 800ab2e:	2b04      	cmp	r3, #4
 800ab30:	d11b      	bne.n	800ab6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f06f 0204 	mvn.w	r2, #4
 800ab3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2202      	movs	r2, #2
 800ab40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	699b      	ldr	r3, [r3, #24]
 800ab48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d003      	beq.n	800ab58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 f95f 	bl	800ae14 <HAL_TIM_IC_CaptureCallback>
 800ab56:	e005      	b.n	800ab64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 f951 	bl	800ae00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 f962 	bl	800ae28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2200      	movs	r2, #0
 800ab68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	691b      	ldr	r3, [r3, #16]
 800ab70:	f003 0308 	and.w	r3, r3, #8
 800ab74:	2b08      	cmp	r3, #8
 800ab76:	d122      	bne.n	800abbe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	68db      	ldr	r3, [r3, #12]
 800ab7e:	f003 0308 	and.w	r3, r3, #8
 800ab82:	2b08      	cmp	r3, #8
 800ab84:	d11b      	bne.n	800abbe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f06f 0208 	mvn.w	r2, #8
 800ab8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2204      	movs	r2, #4
 800ab94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	69db      	ldr	r3, [r3, #28]
 800ab9c:	f003 0303 	and.w	r3, r3, #3
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d003      	beq.n	800abac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 f935 	bl	800ae14 <HAL_TIM_IC_CaptureCallback>
 800abaa:	e005      	b.n	800abb8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 f927 	bl	800ae00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 f938 	bl	800ae28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2200      	movs	r2, #0
 800abbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	691b      	ldr	r3, [r3, #16]
 800abc4:	f003 0310 	and.w	r3, r3, #16
 800abc8:	2b10      	cmp	r3, #16
 800abca:	d122      	bne.n	800ac12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	f003 0310 	and.w	r3, r3, #16
 800abd6:	2b10      	cmp	r3, #16
 800abd8:	d11b      	bne.n	800ac12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f06f 0210 	mvn.w	r2, #16
 800abe2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2208      	movs	r2, #8
 800abe8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	69db      	ldr	r3, [r3, #28]
 800abf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d003      	beq.n	800ac00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 f90b 	bl	800ae14 <HAL_TIM_IC_CaptureCallback>
 800abfe:	e005      	b.n	800ac0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f000 f8fd 	bl	800ae00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 f90e 	bl	800ae28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	691b      	ldr	r3, [r3, #16]
 800ac18:	f003 0301 	and.w	r3, r3, #1
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d10e      	bne.n	800ac3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	68db      	ldr	r3, [r3, #12]
 800ac26:	f003 0301 	and.w	r3, r3, #1
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d107      	bne.n	800ac3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f06f 0201 	mvn.w	r2, #1
 800ac36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 f8d7 	bl	800adec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	691b      	ldr	r3, [r3, #16]
 800ac44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac48:	2b80      	cmp	r3, #128	; 0x80
 800ac4a:	d10e      	bne.n	800ac6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	68db      	ldr	r3, [r3, #12]
 800ac52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac56:	2b80      	cmp	r3, #128	; 0x80
 800ac58:	d107      	bne.n	800ac6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ac62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 fceb 	bl	800b640 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	691b      	ldr	r3, [r3, #16]
 800ac70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac78:	d10e      	bne.n	800ac98 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac84:	2b80      	cmp	r3, #128	; 0x80
 800ac86:	d107      	bne.n	800ac98 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ac90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 fcde 	bl	800b654 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca2:	2b40      	cmp	r3, #64	; 0x40
 800aca4:	d10e      	bne.n	800acc4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	68db      	ldr	r3, [r3, #12]
 800acac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acb0:	2b40      	cmp	r3, #64	; 0x40
 800acb2:	d107      	bne.n	800acc4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800acbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 f8bc 	bl	800ae3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	691b      	ldr	r3, [r3, #16]
 800acca:	f003 0320 	and.w	r3, r3, #32
 800acce:	2b20      	cmp	r3, #32
 800acd0:	d10e      	bne.n	800acf0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	68db      	ldr	r3, [r3, #12]
 800acd8:	f003 0320 	and.w	r3, r3, #32
 800acdc:	2b20      	cmp	r3, #32
 800acde:	d107      	bne.n	800acf0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f06f 0220 	mvn.w	r2, #32
 800ace8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 fc9e 	bl	800b62c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800acf0:	bf00      	nop
 800acf2:	3708      	adds	r7, #8
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b086      	sub	sp, #24
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad04:	2300      	movs	r3, #0
 800ad06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d101      	bne.n	800ad16 <HAL_TIM_OC_ConfigChannel+0x1e>
 800ad12:	2302      	movs	r3, #2
 800ad14:	e066      	b.n	800ade4 <HAL_TIM_OC_ConfigChannel+0xec>
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2201      	movs	r2, #1
 800ad1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2b14      	cmp	r3, #20
 800ad22:	d857      	bhi.n	800add4 <HAL_TIM_OC_ConfigChannel+0xdc>
 800ad24:	a201      	add	r2, pc, #4	; (adr r2, 800ad2c <HAL_TIM_OC_ConfigChannel+0x34>)
 800ad26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad2a:	bf00      	nop
 800ad2c:	0800ad81 	.word	0x0800ad81
 800ad30:	0800add5 	.word	0x0800add5
 800ad34:	0800add5 	.word	0x0800add5
 800ad38:	0800add5 	.word	0x0800add5
 800ad3c:	0800ad8f 	.word	0x0800ad8f
 800ad40:	0800add5 	.word	0x0800add5
 800ad44:	0800add5 	.word	0x0800add5
 800ad48:	0800add5 	.word	0x0800add5
 800ad4c:	0800ad9d 	.word	0x0800ad9d
 800ad50:	0800add5 	.word	0x0800add5
 800ad54:	0800add5 	.word	0x0800add5
 800ad58:	0800add5 	.word	0x0800add5
 800ad5c:	0800adab 	.word	0x0800adab
 800ad60:	0800add5 	.word	0x0800add5
 800ad64:	0800add5 	.word	0x0800add5
 800ad68:	0800add5 	.word	0x0800add5
 800ad6c:	0800adb9 	.word	0x0800adb9
 800ad70:	0800add5 	.word	0x0800add5
 800ad74:	0800add5 	.word	0x0800add5
 800ad78:	0800add5 	.word	0x0800add5
 800ad7c:	0800adc7 	.word	0x0800adc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	68b9      	ldr	r1, [r7, #8]
 800ad86:	4618      	mov	r0, r3
 800ad88:	f000 f8fc 	bl	800af84 <TIM_OC1_SetConfig>
      break;
 800ad8c:	e025      	b.n	800adda <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68b9      	ldr	r1, [r7, #8]
 800ad94:	4618      	mov	r0, r3
 800ad96:	f000 f985 	bl	800b0a4 <TIM_OC2_SetConfig>
      break;
 800ad9a:	e01e      	b.n	800adda <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	68b9      	ldr	r1, [r7, #8]
 800ada2:	4618      	mov	r0, r3
 800ada4:	f000 fa08 	bl	800b1b8 <TIM_OC3_SetConfig>
      break;
 800ada8:	e017      	b.n	800adda <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	68b9      	ldr	r1, [r7, #8]
 800adb0:	4618      	mov	r0, r3
 800adb2:	f000 fa89 	bl	800b2c8 <TIM_OC4_SetConfig>
      break;
 800adb6:	e010      	b.n	800adda <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	68b9      	ldr	r1, [r7, #8]
 800adbe:	4618      	mov	r0, r3
 800adc0:	f000 faec 	bl	800b39c <TIM_OC5_SetConfig>
      break;
 800adc4:	e009      	b.n	800adda <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	68b9      	ldr	r1, [r7, #8]
 800adcc:	4618      	mov	r0, r3
 800adce:	f000 fb49 	bl	800b464 <TIM_OC6_SetConfig>
      break;
 800add2:	e002      	b.n	800adda <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800add4:	2301      	movs	r3, #1
 800add6:	75fb      	strb	r3, [r7, #23]
      break;
 800add8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2200      	movs	r2, #0
 800adde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ade2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3718      	adds	r7, #24
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800adf4:	bf00      	nop
 800adf6:	370c      	adds	r7, #12
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b083      	sub	sp, #12
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae08:	bf00      	nop
 800ae0a:	370c      	adds	r7, #12
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae1c:	bf00      	nop
 800ae1e:	370c      	adds	r7, #12
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr

0800ae28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b083      	sub	sp, #12
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae30:	bf00      	nop
 800ae32:	370c      	adds	r7, #12
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae44:	bf00      	nop
 800ae46:	370c      	adds	r7, #12
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b085      	sub	sp, #20
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	4a40      	ldr	r2, [pc, #256]	; (800af64 <TIM_Base_SetConfig+0x114>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d013      	beq.n	800ae90 <TIM_Base_SetConfig+0x40>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae6e:	d00f      	beq.n	800ae90 <TIM_Base_SetConfig+0x40>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4a3d      	ldr	r2, [pc, #244]	; (800af68 <TIM_Base_SetConfig+0x118>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d00b      	beq.n	800ae90 <TIM_Base_SetConfig+0x40>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	4a3c      	ldr	r2, [pc, #240]	; (800af6c <TIM_Base_SetConfig+0x11c>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d007      	beq.n	800ae90 <TIM_Base_SetConfig+0x40>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	4a3b      	ldr	r2, [pc, #236]	; (800af70 <TIM_Base_SetConfig+0x120>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d003      	beq.n	800ae90 <TIM_Base_SetConfig+0x40>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4a3a      	ldr	r2, [pc, #232]	; (800af74 <TIM_Base_SetConfig+0x124>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d108      	bne.n	800aea2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	68fa      	ldr	r2, [r7, #12]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	4a2f      	ldr	r2, [pc, #188]	; (800af64 <TIM_Base_SetConfig+0x114>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d01f      	beq.n	800aeea <TIM_Base_SetConfig+0x9a>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aeb0:	d01b      	beq.n	800aeea <TIM_Base_SetConfig+0x9a>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	4a2c      	ldr	r2, [pc, #176]	; (800af68 <TIM_Base_SetConfig+0x118>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d017      	beq.n	800aeea <TIM_Base_SetConfig+0x9a>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	4a2b      	ldr	r2, [pc, #172]	; (800af6c <TIM_Base_SetConfig+0x11c>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d013      	beq.n	800aeea <TIM_Base_SetConfig+0x9a>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	4a2a      	ldr	r2, [pc, #168]	; (800af70 <TIM_Base_SetConfig+0x120>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d00f      	beq.n	800aeea <TIM_Base_SetConfig+0x9a>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	4a29      	ldr	r2, [pc, #164]	; (800af74 <TIM_Base_SetConfig+0x124>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d00b      	beq.n	800aeea <TIM_Base_SetConfig+0x9a>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	4a28      	ldr	r2, [pc, #160]	; (800af78 <TIM_Base_SetConfig+0x128>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d007      	beq.n	800aeea <TIM_Base_SetConfig+0x9a>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	4a27      	ldr	r2, [pc, #156]	; (800af7c <TIM_Base_SetConfig+0x12c>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d003      	beq.n	800aeea <TIM_Base_SetConfig+0x9a>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	4a26      	ldr	r2, [pc, #152]	; (800af80 <TIM_Base_SetConfig+0x130>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d108      	bne.n	800aefc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	68fa      	ldr	r2, [r7, #12]
 800aef8:	4313      	orrs	r3, r2
 800aefa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	695b      	ldr	r3, [r3, #20]
 800af06:	4313      	orrs	r3, r2
 800af08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	689a      	ldr	r2, [r3, #8]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	4a10      	ldr	r2, [pc, #64]	; (800af64 <TIM_Base_SetConfig+0x114>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d00f      	beq.n	800af48 <TIM_Base_SetConfig+0xf8>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4a12      	ldr	r2, [pc, #72]	; (800af74 <TIM_Base_SetConfig+0x124>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d00b      	beq.n	800af48 <TIM_Base_SetConfig+0xf8>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	4a11      	ldr	r2, [pc, #68]	; (800af78 <TIM_Base_SetConfig+0x128>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d007      	beq.n	800af48 <TIM_Base_SetConfig+0xf8>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4a10      	ldr	r2, [pc, #64]	; (800af7c <TIM_Base_SetConfig+0x12c>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d003      	beq.n	800af48 <TIM_Base_SetConfig+0xf8>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	4a0f      	ldr	r2, [pc, #60]	; (800af80 <TIM_Base_SetConfig+0x130>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d103      	bne.n	800af50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	691a      	ldr	r2, [r3, #16]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	615a      	str	r2, [r3, #20]
}
 800af56:	bf00      	nop
 800af58:	3714      	adds	r7, #20
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	40012c00 	.word	0x40012c00
 800af68:	40000400 	.word	0x40000400
 800af6c:	40000800 	.word	0x40000800
 800af70:	40000c00 	.word	0x40000c00
 800af74:	40013400 	.word	0x40013400
 800af78:	40014000 	.word	0x40014000
 800af7c:	40014400 	.word	0x40014400
 800af80:	40014800 	.word	0x40014800

0800af84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af84:	b480      	push	{r7}
 800af86:	b087      	sub	sp, #28
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6a1b      	ldr	r3, [r3, #32]
 800af92:	f023 0201 	bic.w	r2, r3, #1
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6a1b      	ldr	r3, [r3, #32]
 800af9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	699b      	ldr	r3, [r3, #24]
 800afaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f023 0303 	bic.w	r3, r3, #3
 800afbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	68fa      	ldr	r2, [r7, #12]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	f023 0302 	bic.w	r3, r3, #2
 800afd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	689b      	ldr	r3, [r3, #8]
 800afd6:	697a      	ldr	r2, [r7, #20]
 800afd8:	4313      	orrs	r3, r2
 800afda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	4a2c      	ldr	r2, [pc, #176]	; (800b090 <TIM_OC1_SetConfig+0x10c>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d00f      	beq.n	800b004 <TIM_OC1_SetConfig+0x80>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	4a2b      	ldr	r2, [pc, #172]	; (800b094 <TIM_OC1_SetConfig+0x110>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d00b      	beq.n	800b004 <TIM_OC1_SetConfig+0x80>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	4a2a      	ldr	r2, [pc, #168]	; (800b098 <TIM_OC1_SetConfig+0x114>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d007      	beq.n	800b004 <TIM_OC1_SetConfig+0x80>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	4a29      	ldr	r2, [pc, #164]	; (800b09c <TIM_OC1_SetConfig+0x118>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d003      	beq.n	800b004 <TIM_OC1_SetConfig+0x80>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	4a28      	ldr	r2, [pc, #160]	; (800b0a0 <TIM_OC1_SetConfig+0x11c>)
 800b000:	4293      	cmp	r3, r2
 800b002:	d10c      	bne.n	800b01e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	f023 0308 	bic.w	r3, r3, #8
 800b00a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	697a      	ldr	r2, [r7, #20]
 800b012:	4313      	orrs	r3, r2
 800b014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	f023 0304 	bic.w	r3, r3, #4
 800b01c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	4a1b      	ldr	r2, [pc, #108]	; (800b090 <TIM_OC1_SetConfig+0x10c>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d00f      	beq.n	800b046 <TIM_OC1_SetConfig+0xc2>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	4a1a      	ldr	r2, [pc, #104]	; (800b094 <TIM_OC1_SetConfig+0x110>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d00b      	beq.n	800b046 <TIM_OC1_SetConfig+0xc2>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	4a19      	ldr	r2, [pc, #100]	; (800b098 <TIM_OC1_SetConfig+0x114>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d007      	beq.n	800b046 <TIM_OC1_SetConfig+0xc2>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	4a18      	ldr	r2, [pc, #96]	; (800b09c <TIM_OC1_SetConfig+0x118>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d003      	beq.n	800b046 <TIM_OC1_SetConfig+0xc2>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	4a17      	ldr	r2, [pc, #92]	; (800b0a0 <TIM_OC1_SetConfig+0x11c>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d111      	bne.n	800b06a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b04c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	695b      	ldr	r3, [r3, #20]
 800b05a:	693a      	ldr	r2, [r7, #16]
 800b05c:	4313      	orrs	r3, r2
 800b05e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	699b      	ldr	r3, [r3, #24]
 800b064:	693a      	ldr	r2, [r7, #16]
 800b066:	4313      	orrs	r3, r2
 800b068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	693a      	ldr	r2, [r7, #16]
 800b06e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	68fa      	ldr	r2, [r7, #12]
 800b074:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	685a      	ldr	r2, [r3, #4]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	697a      	ldr	r2, [r7, #20]
 800b082:	621a      	str	r2, [r3, #32]
}
 800b084:	bf00      	nop
 800b086:	371c      	adds	r7, #28
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr
 800b090:	40012c00 	.word	0x40012c00
 800b094:	40013400 	.word	0x40013400
 800b098:	40014000 	.word	0x40014000
 800b09c:	40014400 	.word	0x40014400
 800b0a0:	40014800 	.word	0x40014800

0800b0a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b087      	sub	sp, #28
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6a1b      	ldr	r3, [r3, #32]
 800b0b2:	f023 0210 	bic.w	r2, r3, #16
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6a1b      	ldr	r3, [r3, #32]
 800b0be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	699b      	ldr	r3, [r3, #24]
 800b0ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b0d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	021b      	lsls	r3, r3, #8
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	f023 0320 	bic.w	r3, r3, #32
 800b0f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	011b      	lsls	r3, r3, #4
 800b0fa:	697a      	ldr	r2, [r7, #20]
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	4a28      	ldr	r2, [pc, #160]	; (800b1a4 <TIM_OC2_SetConfig+0x100>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d003      	beq.n	800b110 <TIM_OC2_SetConfig+0x6c>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	4a27      	ldr	r2, [pc, #156]	; (800b1a8 <TIM_OC2_SetConfig+0x104>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d10d      	bne.n	800b12c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	68db      	ldr	r3, [r3, #12]
 800b11c:	011b      	lsls	r3, r3, #4
 800b11e:	697a      	ldr	r2, [r7, #20]
 800b120:	4313      	orrs	r3, r2
 800b122:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b12a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	4a1d      	ldr	r2, [pc, #116]	; (800b1a4 <TIM_OC2_SetConfig+0x100>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d00f      	beq.n	800b154 <TIM_OC2_SetConfig+0xb0>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	4a1c      	ldr	r2, [pc, #112]	; (800b1a8 <TIM_OC2_SetConfig+0x104>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d00b      	beq.n	800b154 <TIM_OC2_SetConfig+0xb0>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	4a1b      	ldr	r2, [pc, #108]	; (800b1ac <TIM_OC2_SetConfig+0x108>)
 800b140:	4293      	cmp	r3, r2
 800b142:	d007      	beq.n	800b154 <TIM_OC2_SetConfig+0xb0>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	4a1a      	ldr	r2, [pc, #104]	; (800b1b0 <TIM_OC2_SetConfig+0x10c>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d003      	beq.n	800b154 <TIM_OC2_SetConfig+0xb0>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	4a19      	ldr	r2, [pc, #100]	; (800b1b4 <TIM_OC2_SetConfig+0x110>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d113      	bne.n	800b17c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b15a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b162:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	695b      	ldr	r3, [r3, #20]
 800b168:	009b      	lsls	r3, r3, #2
 800b16a:	693a      	ldr	r2, [r7, #16]
 800b16c:	4313      	orrs	r3, r2
 800b16e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	699b      	ldr	r3, [r3, #24]
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	693a      	ldr	r2, [r7, #16]
 800b178:	4313      	orrs	r3, r2
 800b17a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	693a      	ldr	r2, [r7, #16]
 800b180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	68fa      	ldr	r2, [r7, #12]
 800b186:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	685a      	ldr	r2, [r3, #4]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	697a      	ldr	r2, [r7, #20]
 800b194:	621a      	str	r2, [r3, #32]
}
 800b196:	bf00      	nop
 800b198:	371c      	adds	r7, #28
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
 800b1a4:	40012c00 	.word	0x40012c00
 800b1a8:	40013400 	.word	0x40013400
 800b1ac:	40014000 	.word	0x40014000
 800b1b0:	40014400 	.word	0x40014400
 800b1b4:	40014800 	.word	0x40014800

0800b1b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b087      	sub	sp, #28
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a1b      	ldr	r3, [r3, #32]
 800b1c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6a1b      	ldr	r3, [r3, #32]
 800b1d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	69db      	ldr	r3, [r3, #28]
 800b1de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f023 0303 	bic.w	r3, r3, #3
 800b1f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	689b      	ldr	r3, [r3, #8]
 800b20a:	021b      	lsls	r3, r3, #8
 800b20c:	697a      	ldr	r2, [r7, #20]
 800b20e:	4313      	orrs	r3, r2
 800b210:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4a27      	ldr	r2, [pc, #156]	; (800b2b4 <TIM_OC3_SetConfig+0xfc>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d003      	beq.n	800b222 <TIM_OC3_SetConfig+0x6a>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4a26      	ldr	r2, [pc, #152]	; (800b2b8 <TIM_OC3_SetConfig+0x100>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d10d      	bne.n	800b23e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b228:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	021b      	lsls	r3, r3, #8
 800b230:	697a      	ldr	r2, [r7, #20]
 800b232:	4313      	orrs	r3, r2
 800b234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b23c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	4a1c      	ldr	r2, [pc, #112]	; (800b2b4 <TIM_OC3_SetConfig+0xfc>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d00f      	beq.n	800b266 <TIM_OC3_SetConfig+0xae>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	4a1b      	ldr	r2, [pc, #108]	; (800b2b8 <TIM_OC3_SetConfig+0x100>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d00b      	beq.n	800b266 <TIM_OC3_SetConfig+0xae>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	4a1a      	ldr	r2, [pc, #104]	; (800b2bc <TIM_OC3_SetConfig+0x104>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d007      	beq.n	800b266 <TIM_OC3_SetConfig+0xae>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	4a19      	ldr	r2, [pc, #100]	; (800b2c0 <TIM_OC3_SetConfig+0x108>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d003      	beq.n	800b266 <TIM_OC3_SetConfig+0xae>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	4a18      	ldr	r2, [pc, #96]	; (800b2c4 <TIM_OC3_SetConfig+0x10c>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d113      	bne.n	800b28e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b26c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b274:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	695b      	ldr	r3, [r3, #20]
 800b27a:	011b      	lsls	r3, r3, #4
 800b27c:	693a      	ldr	r2, [r7, #16]
 800b27e:	4313      	orrs	r3, r2
 800b280:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	699b      	ldr	r3, [r3, #24]
 800b286:	011b      	lsls	r3, r3, #4
 800b288:	693a      	ldr	r2, [r7, #16]
 800b28a:	4313      	orrs	r3, r2
 800b28c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	693a      	ldr	r2, [r7, #16]
 800b292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	68fa      	ldr	r2, [r7, #12]
 800b298:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	685a      	ldr	r2, [r3, #4]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	697a      	ldr	r2, [r7, #20]
 800b2a6:	621a      	str	r2, [r3, #32]
}
 800b2a8:	bf00      	nop
 800b2aa:	371c      	adds	r7, #28
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr
 800b2b4:	40012c00 	.word	0x40012c00
 800b2b8:	40013400 	.word	0x40013400
 800b2bc:	40014000 	.word	0x40014000
 800b2c0:	40014400 	.word	0x40014400
 800b2c4:	40014800 	.word	0x40014800

0800b2c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b087      	sub	sp, #28
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a1b      	ldr	r3, [r3, #32]
 800b2d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a1b      	ldr	r3, [r3, #32]
 800b2e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	69db      	ldr	r3, [r3, #28]
 800b2ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b2f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	021b      	lsls	r3, r3, #8
 800b30a:	68fa      	ldr	r2, [r7, #12]
 800b30c:	4313      	orrs	r3, r2
 800b30e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b316:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	689b      	ldr	r3, [r3, #8]
 800b31c:	031b      	lsls	r3, r3, #12
 800b31e:	693a      	ldr	r2, [r7, #16]
 800b320:	4313      	orrs	r3, r2
 800b322:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	4a18      	ldr	r2, [pc, #96]	; (800b388 <TIM_OC4_SetConfig+0xc0>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d00f      	beq.n	800b34c <TIM_OC4_SetConfig+0x84>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	4a17      	ldr	r2, [pc, #92]	; (800b38c <TIM_OC4_SetConfig+0xc4>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d00b      	beq.n	800b34c <TIM_OC4_SetConfig+0x84>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	4a16      	ldr	r2, [pc, #88]	; (800b390 <TIM_OC4_SetConfig+0xc8>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d007      	beq.n	800b34c <TIM_OC4_SetConfig+0x84>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	4a15      	ldr	r2, [pc, #84]	; (800b394 <TIM_OC4_SetConfig+0xcc>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d003      	beq.n	800b34c <TIM_OC4_SetConfig+0x84>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	4a14      	ldr	r2, [pc, #80]	; (800b398 <TIM_OC4_SetConfig+0xd0>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d109      	bne.n	800b360 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b352:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	695b      	ldr	r3, [r3, #20]
 800b358:	019b      	lsls	r3, r3, #6
 800b35a:	697a      	ldr	r2, [r7, #20]
 800b35c:	4313      	orrs	r3, r2
 800b35e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	697a      	ldr	r2, [r7, #20]
 800b364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	685a      	ldr	r2, [r3, #4]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	693a      	ldr	r2, [r7, #16]
 800b378:	621a      	str	r2, [r3, #32]
}
 800b37a:	bf00      	nop
 800b37c:	371c      	adds	r7, #28
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr
 800b386:	bf00      	nop
 800b388:	40012c00 	.word	0x40012c00
 800b38c:	40013400 	.word	0x40013400
 800b390:	40014000 	.word	0x40014000
 800b394:	40014400 	.word	0x40014400
 800b398:	40014800 	.word	0x40014800

0800b39c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b087      	sub	sp, #28
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6a1b      	ldr	r3, [r3, #32]
 800b3aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6a1b      	ldr	r3, [r3, #32]
 800b3b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b3ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	68fa      	ldr	r2, [r7, #12]
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b3e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	689b      	ldr	r3, [r3, #8]
 800b3e6:	041b      	lsls	r3, r3, #16
 800b3e8:	693a      	ldr	r2, [r7, #16]
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	4a17      	ldr	r2, [pc, #92]	; (800b450 <TIM_OC5_SetConfig+0xb4>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d00f      	beq.n	800b416 <TIM_OC5_SetConfig+0x7a>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	4a16      	ldr	r2, [pc, #88]	; (800b454 <TIM_OC5_SetConfig+0xb8>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d00b      	beq.n	800b416 <TIM_OC5_SetConfig+0x7a>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	4a15      	ldr	r2, [pc, #84]	; (800b458 <TIM_OC5_SetConfig+0xbc>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d007      	beq.n	800b416 <TIM_OC5_SetConfig+0x7a>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	4a14      	ldr	r2, [pc, #80]	; (800b45c <TIM_OC5_SetConfig+0xc0>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d003      	beq.n	800b416 <TIM_OC5_SetConfig+0x7a>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	4a13      	ldr	r2, [pc, #76]	; (800b460 <TIM_OC5_SetConfig+0xc4>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d109      	bne.n	800b42a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b41c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	695b      	ldr	r3, [r3, #20]
 800b422:	021b      	lsls	r3, r3, #8
 800b424:	697a      	ldr	r2, [r7, #20]
 800b426:	4313      	orrs	r3, r2
 800b428:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	697a      	ldr	r2, [r7, #20]
 800b42e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	68fa      	ldr	r2, [r7, #12]
 800b434:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	685a      	ldr	r2, [r3, #4]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	693a      	ldr	r2, [r7, #16]
 800b442:	621a      	str	r2, [r3, #32]
}
 800b444:	bf00      	nop
 800b446:	371c      	adds	r7, #28
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr
 800b450:	40012c00 	.word	0x40012c00
 800b454:	40013400 	.word	0x40013400
 800b458:	40014000 	.word	0x40014000
 800b45c:	40014400 	.word	0x40014400
 800b460:	40014800 	.word	0x40014800

0800b464 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b464:	b480      	push	{r7}
 800b466:	b087      	sub	sp, #28
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6a1b      	ldr	r3, [r3, #32]
 800b472:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6a1b      	ldr	r3, [r3, #32]
 800b47e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b48a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	021b      	lsls	r3, r3, #8
 800b49e:	68fa      	ldr	r2, [r7, #12]
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b4aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	689b      	ldr	r3, [r3, #8]
 800b4b0:	051b      	lsls	r3, r3, #20
 800b4b2:	693a      	ldr	r2, [r7, #16]
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4a18      	ldr	r2, [pc, #96]	; (800b51c <TIM_OC6_SetConfig+0xb8>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d00f      	beq.n	800b4e0 <TIM_OC6_SetConfig+0x7c>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	4a17      	ldr	r2, [pc, #92]	; (800b520 <TIM_OC6_SetConfig+0xbc>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d00b      	beq.n	800b4e0 <TIM_OC6_SetConfig+0x7c>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4a16      	ldr	r2, [pc, #88]	; (800b524 <TIM_OC6_SetConfig+0xc0>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d007      	beq.n	800b4e0 <TIM_OC6_SetConfig+0x7c>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	4a15      	ldr	r2, [pc, #84]	; (800b528 <TIM_OC6_SetConfig+0xc4>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d003      	beq.n	800b4e0 <TIM_OC6_SetConfig+0x7c>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	4a14      	ldr	r2, [pc, #80]	; (800b52c <TIM_OC6_SetConfig+0xc8>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d109      	bne.n	800b4f4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b4e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	695b      	ldr	r3, [r3, #20]
 800b4ec:	029b      	lsls	r3, r3, #10
 800b4ee:	697a      	ldr	r2, [r7, #20]
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	697a      	ldr	r2, [r7, #20]
 800b4f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	68fa      	ldr	r2, [r7, #12]
 800b4fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	685a      	ldr	r2, [r3, #4]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	693a      	ldr	r2, [r7, #16]
 800b50c:	621a      	str	r2, [r3, #32]
}
 800b50e:	bf00      	nop
 800b510:	371c      	adds	r7, #28
 800b512:	46bd      	mov	sp, r7
 800b514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b518:	4770      	bx	lr
 800b51a:	bf00      	nop
 800b51c:	40012c00 	.word	0x40012c00
 800b520:	40013400 	.word	0x40013400
 800b524:	40014000 	.word	0x40014000
 800b528:	40014400 	.word	0x40014400
 800b52c:	40014800 	.word	0x40014800

0800b530 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b530:	b480      	push	{r7}
 800b532:	b085      	sub	sp, #20
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b53a:	2300      	movs	r3, #0
 800b53c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b544:	2b01      	cmp	r3, #1
 800b546:	d101      	bne.n	800b54c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b548:	2302      	movs	r3, #2
 800b54a:	e065      	b.n	800b618 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2201      	movs	r2, #1
 800b550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	68db      	ldr	r3, [r3, #12]
 800b55e:	4313      	orrs	r3, r2
 800b560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	689b      	ldr	r3, [r3, #8]
 800b56c:	4313      	orrs	r3, r2
 800b56e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	4313      	orrs	r3, r2
 800b57c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4313      	orrs	r3, r2
 800b58a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	691b      	ldr	r3, [r3, #16]
 800b596:	4313      	orrs	r3, r2
 800b598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	695b      	ldr	r3, [r3, #20]
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	699b      	ldr	r3, [r3, #24]
 800b5c0:	041b      	lsls	r3, r3, #16
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a16      	ldr	r2, [pc, #88]	; (800b624 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d004      	beq.n	800b5da <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4a14      	ldr	r2, [pc, #80]	; (800b628 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d115      	bne.n	800b606 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e4:	051b      	lsls	r3, r3, #20
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	69db      	ldr	r3, [r3, #28]
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	6a1b      	ldr	r3, [r3, #32]
 800b602:	4313      	orrs	r3, r2
 800b604:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	68fa      	ldr	r2, [r7, #12]
 800b60c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2200      	movs	r2, #0
 800b612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b616:	2300      	movs	r3, #0
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3714      	adds	r7, #20
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr
 800b624:	40012c00 	.word	0x40012c00
 800b628:	40013400 	.word	0x40013400

0800b62c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b634:	bf00      	nop
 800b636:	370c      	adds	r7, #12
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr

0800b640 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b640:	b480      	push	{r7}
 800b642:	b083      	sub	sp, #12
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b648:	bf00      	nop
 800b64a:	370c      	adds	r7, #12
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr

0800b654 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b654:	b480      	push	{r7}
 800b656:	b083      	sub	sp, #12
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b65c:	bf00      	nop
 800b65e:	370c      	adds	r7, #12
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d101      	bne.n	800b67a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b676:	2301      	movs	r3, #1
 800b678:	e042      	b.n	800b700 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b680:	2b00      	cmp	r3, #0
 800b682:	d106      	bne.n	800b692 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2200      	movs	r2, #0
 800b688:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f7f6 ff97 	bl	80025c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2224      	movs	r2, #36	; 0x24
 800b696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f022 0201 	bic.w	r2, r2, #1
 800b6a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 fb64 	bl	800bd78 <UART_SetConfig>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d101      	bne.n	800b6ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e022      	b.n	800b700 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d002      	beq.n	800b6c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f000 fe54 	bl	800c370 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	685a      	ldr	r2, [r3, #4]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b6d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	689a      	ldr	r2, [r3, #8]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b6e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	681a      	ldr	r2, [r3, #0]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f042 0201 	orr.w	r2, r2, #1
 800b6f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f000 fedb 	bl	800c4b4 <UART_CheckIdleState>
 800b6fe:	4603      	mov	r3, r0
}
 800b700:	4618      	mov	r0, r3
 800b702:	3708      	adds	r7, #8
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b0ba      	sub	sp, #232	; 0xe8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	69db      	ldr	r3, [r3, #28]
 800b716:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b72e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b732:	f640 030f 	movw	r3, #2063	; 0x80f
 800b736:	4013      	ands	r3, r2
 800b738:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b73c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b740:	2b00      	cmp	r3, #0
 800b742:	d11b      	bne.n	800b77c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b748:	f003 0320 	and.w	r3, r3, #32
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d015      	beq.n	800b77c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b754:	f003 0320 	and.w	r3, r3, #32
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d105      	bne.n	800b768 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b75c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b764:	2b00      	cmp	r3, #0
 800b766:	d009      	beq.n	800b77c <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f000 82d6 	beq.w	800bd1e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	4798      	blx	r3
      }
      return;
 800b77a:	e2d0      	b.n	800bd1e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800b77c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b780:	2b00      	cmp	r3, #0
 800b782:	f000 811f 	beq.w	800b9c4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b786:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b78a:	4b8b      	ldr	r3, [pc, #556]	; (800b9b8 <HAL_UART_IRQHandler+0x2b0>)
 800b78c:	4013      	ands	r3, r2
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d106      	bne.n	800b7a0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b792:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b796:	4b89      	ldr	r3, [pc, #548]	; (800b9bc <HAL_UART_IRQHandler+0x2b4>)
 800b798:	4013      	ands	r3, r2
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	f000 8112 	beq.w	800b9c4 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b7a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7a4:	f003 0301 	and.w	r3, r3, #1
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d011      	beq.n	800b7d0 <HAL_UART_IRQHandler+0xc8>
 800b7ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d00b      	beq.n	800b7d0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2201      	movs	r2, #1
 800b7be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7c6:	f043 0201 	orr.w	r2, r3, #1
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7d4:	f003 0302 	and.w	r3, r3, #2
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d011      	beq.n	800b800 <HAL_UART_IRQHandler+0xf8>
 800b7dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7e0:	f003 0301 	and.w	r3, r3, #1
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d00b      	beq.n	800b800 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	2202      	movs	r2, #2
 800b7ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7f6:	f043 0204 	orr.w	r2, r3, #4
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b804:	f003 0304 	and.w	r3, r3, #4
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d011      	beq.n	800b830 <HAL_UART_IRQHandler+0x128>
 800b80c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b810:	f003 0301 	and.w	r3, r3, #1
 800b814:	2b00      	cmp	r3, #0
 800b816:	d00b      	beq.n	800b830 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2204      	movs	r2, #4
 800b81e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b826:	f043 0202 	orr.w	r2, r3, #2
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b834:	f003 0308 	and.w	r3, r3, #8
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d017      	beq.n	800b86c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b83c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b840:	f003 0320 	and.w	r3, r3, #32
 800b844:	2b00      	cmp	r3, #0
 800b846:	d105      	bne.n	800b854 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b848:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b84c:	4b5a      	ldr	r3, [pc, #360]	; (800b9b8 <HAL_UART_IRQHandler+0x2b0>)
 800b84e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b850:	2b00      	cmp	r3, #0
 800b852:	d00b      	beq.n	800b86c <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2208      	movs	r2, #8
 800b85a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b862:	f043 0208 	orr.w	r2, r3, #8
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b86c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b874:	2b00      	cmp	r3, #0
 800b876:	d012      	beq.n	800b89e <HAL_UART_IRQHandler+0x196>
 800b878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b87c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b880:	2b00      	cmp	r3, #0
 800b882:	d00c      	beq.n	800b89e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b88c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b894:	f043 0220 	orr.w	r2, r3, #32
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	f000 823c 	beq.w	800bd22 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b8aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8ae:	f003 0320 	and.w	r3, r3, #32
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d013      	beq.n	800b8de <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b8b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8ba:	f003 0320 	and.w	r3, r3, #32
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d105      	bne.n	800b8ce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b8c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d007      	beq.n	800b8de <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d003      	beq.n	800b8de <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	689b      	ldr	r3, [r3, #8]
 800b8ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8f2:	2b40      	cmp	r3, #64	; 0x40
 800b8f4:	d005      	beq.n	800b902 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b8f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b8fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d04f      	beq.n	800b9a2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 fee9 	bl	800c6da <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	689b      	ldr	r3, [r3, #8]
 800b90e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b912:	2b40      	cmp	r3, #64	; 0x40
 800b914:	d141      	bne.n	800b99a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	3308      	adds	r3, #8
 800b91c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b920:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b924:	e853 3f00 	ldrex	r3, [r3]
 800b928:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b92c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b934:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	3308      	adds	r3, #8
 800b93e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b942:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b946:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b94a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b94e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b952:	e841 2300 	strex	r3, r2, [r1]
 800b956:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b95a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d1d9      	bne.n	800b916 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b966:	2b00      	cmp	r3, #0
 800b968:	d013      	beq.n	800b992 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b96e:	4a14      	ldr	r2, [pc, #80]	; (800b9c0 <HAL_UART_IRQHandler+0x2b8>)
 800b970:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b976:	4618      	mov	r0, r3
 800b978:	f7f7 fb53 	bl	8003022 <HAL_DMA_Abort_IT>
 800b97c:	4603      	mov	r3, r0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d017      	beq.n	800b9b2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b98c:	4610      	mov	r0, r2
 800b98e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b990:	e00f      	b.n	800b9b2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 f9da 	bl	800bd4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b998:	e00b      	b.n	800b9b2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 f9d6 	bl	800bd4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9a0:	e007      	b.n	800b9b2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 f9d2 	bl	800bd4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b9b0:	e1b7      	b.n	800bd22 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9b2:	bf00      	nop
    return;
 800b9b4:	e1b5      	b.n	800bd22 <HAL_UART_IRQHandler+0x61a>
 800b9b6:	bf00      	nop
 800b9b8:	10000001 	.word	0x10000001
 800b9bc:	04000120 	.word	0x04000120
 800b9c0:	0800c7a7 	.word	0x0800c7a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	f040 814a 	bne.w	800bc62 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b9ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9d2:	f003 0310 	and.w	r3, r3, #16
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	f000 8143 	beq.w	800bc62 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b9dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9e0:	f003 0310 	and.w	r3, r3, #16
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	f000 813c 	beq.w	800bc62 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2210      	movs	r2, #16
 800b9f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	689b      	ldr	r3, [r3, #8]
 800b9f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9fc:	2b40      	cmp	r3, #64	; 0x40
 800b9fe:	f040 80b5 	bne.w	800bb6c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ba0e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	f000 8187 	beq.w	800bd26 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ba1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ba22:	429a      	cmp	r2, r3
 800ba24:	f080 817f 	bcs.w	800bd26 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ba2e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f003 0320 	and.w	r3, r3, #32
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	f040 8086 	bne.w	800bb50 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba50:	e853 3f00 	ldrex	r3, [r3]
 800ba54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ba58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	461a      	mov	r2, r3
 800ba6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ba72:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ba7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ba7e:	e841 2300 	strex	r3, r2, [r1]
 800ba82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ba86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d1da      	bne.n	800ba44 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	3308      	adds	r3, #8
 800ba94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba98:	e853 3f00 	ldrex	r3, [r3]
 800ba9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ba9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800baa0:	f023 0301 	bic.w	r3, r3, #1
 800baa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	3308      	adds	r3, #8
 800baae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bab2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bab6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800baba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800babe:	e841 2300 	strex	r3, r2, [r1]
 800bac2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bac4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d1e1      	bne.n	800ba8e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	3308      	adds	r3, #8
 800bad0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bad4:	e853 3f00 	ldrex	r3, [r3]
 800bad8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800badc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bae0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	3308      	adds	r3, #8
 800baea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800baee:	66fa      	str	r2, [r7, #108]	; 0x6c
 800baf0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800baf4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800baf6:	e841 2300 	strex	r3, r2, [r1]
 800bafa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bafc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d1e3      	bne.n	800baca <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2220      	movs	r2, #32
 800bb06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb18:	e853 3f00 	ldrex	r3, [r3]
 800bb1c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bb1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb20:	f023 0310 	bic.w	r3, r3, #16
 800bb24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bb32:	65bb      	str	r3, [r7, #88]	; 0x58
 800bb34:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bb38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb3a:	e841 2300 	strex	r3, r2, [r1]
 800bb3e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bb40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d1e4      	bne.n	800bb10 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7f7 fa0d 	bl	8002f6a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb5c:	b29b      	uxth	r3, r3
 800bb5e:	1ad3      	subs	r3, r2, r3
 800bb60:	b29b      	uxth	r3, r3
 800bb62:	4619      	mov	r1, r3
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 f8fb 	bl	800bd60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bb6a:	e0dc      	b.n	800bd26 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	1ad3      	subs	r3, r2, r3
 800bb7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	f000 80ce 	beq.w	800bd2a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800bb8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	f000 80c9 	beq.w	800bd2a <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba0:	e853 3f00 	ldrex	r3, [r3]
 800bba4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bba8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bbac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bbba:	647b      	str	r3, [r7, #68]	; 0x44
 800bbbc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bbc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbc2:	e841 2300 	strex	r3, r2, [r1]
 800bbc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bbc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d1e4      	bne.n	800bb98 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	3308      	adds	r3, #8
 800bbd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd8:	e853 3f00 	ldrex	r3, [r3]
 800bbdc:	623b      	str	r3, [r7, #32]
   return(result);
 800bbde:	6a3b      	ldr	r3, [r7, #32]
 800bbe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bbe4:	f023 0301 	bic.w	r3, r3, #1
 800bbe8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	3308      	adds	r3, #8
 800bbf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bbf6:	633a      	str	r2, [r7, #48]	; 0x30
 800bbf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bbfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbfe:	e841 2300 	strex	r3, r2, [r1]
 800bc02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d1e1      	bne.n	800bbce <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2220      	movs	r2, #32
 800bc0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2200      	movs	r2, #0
 800bc16:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	e853 3f00 	ldrex	r3, [r3]
 800bc2a:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f023 0310 	bic.w	r3, r3, #16
 800bc32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bc40:	61fb      	str	r3, [r7, #28]
 800bc42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc44:	69b9      	ldr	r1, [r7, #24]
 800bc46:	69fa      	ldr	r2, [r7, #28]
 800bc48:	e841 2300 	strex	r3, r2, [r1]
 800bc4c:	617b      	str	r3, [r7, #20]
   return(result);
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d1e4      	bne.n	800bc1e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bc54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bc58:	4619      	mov	r1, r3
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 f880 	bl	800bd60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bc60:	e063      	b.n	800bd2a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bc62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d00e      	beq.n	800bc8c <HAL_UART_IRQHandler+0x584>
 800bc6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d008      	beq.n	800bc8c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bc82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f000 fdcf 	bl	800c828 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bc8a:	e051      	b.n	800bd30 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bc8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d014      	beq.n	800bcc2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bc98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d105      	bne.n	800bcb0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bca8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d008      	beq.n	800bcc2 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d03a      	beq.n	800bd2e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	4798      	blx	r3
    }
    return;
 800bcc0:	e035      	b.n	800bd2e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bcc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d009      	beq.n	800bce2 <HAL_UART_IRQHandler+0x5da>
 800bcce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d003      	beq.n	800bce2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 fd79 	bl	800c7d2 <UART_EndTransmit_IT>
    return;
 800bce0:	e026      	b.n	800bd30 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bce6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d009      	beq.n	800bd02 <HAL_UART_IRQHandler+0x5fa>
 800bcee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcf2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d003      	beq.n	800bd02 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 fda8 	bl	800c850 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd00:	e016      	b.n	800bd30 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bd02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d010      	beq.n	800bd30 <HAL_UART_IRQHandler+0x628>
 800bd0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	da0c      	bge.n	800bd30 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 fd90 	bl	800c83c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd1c:	e008      	b.n	800bd30 <HAL_UART_IRQHandler+0x628>
      return;
 800bd1e:	bf00      	nop
 800bd20:	e006      	b.n	800bd30 <HAL_UART_IRQHandler+0x628>
    return;
 800bd22:	bf00      	nop
 800bd24:	e004      	b.n	800bd30 <HAL_UART_IRQHandler+0x628>
      return;
 800bd26:	bf00      	nop
 800bd28:	e002      	b.n	800bd30 <HAL_UART_IRQHandler+0x628>
      return;
 800bd2a:	bf00      	nop
 800bd2c:	e000      	b.n	800bd30 <HAL_UART_IRQHandler+0x628>
    return;
 800bd2e:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800bd30:	37e8      	adds	r7, #232	; 0xe8
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop

0800bd38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b083      	sub	sp, #12
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bd40:	bf00      	nop
 800bd42:	370c      	adds	r7, #12
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b083      	sub	sp, #12
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bd54:	bf00      	nop
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b083      	sub	sp, #12
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	460b      	mov	r3, r1
 800bd6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bd6c:	bf00      	nop
 800bd6e:	370c      	adds	r7, #12
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr

0800bd78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bd78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bd7c:	b08c      	sub	sp, #48	; 0x30
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bd82:	2300      	movs	r3, #0
 800bd84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	689a      	ldr	r2, [r3, #8]
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	691b      	ldr	r3, [r3, #16]
 800bd90:	431a      	orrs	r2, r3
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	695b      	ldr	r3, [r3, #20]
 800bd96:	431a      	orrs	r2, r3
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	69db      	ldr	r3, [r3, #28]
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	681a      	ldr	r2, [r3, #0]
 800bda6:	4baa      	ldr	r3, [pc, #680]	; (800c050 <UART_SetConfig+0x2d8>)
 800bda8:	4013      	ands	r3, r2
 800bdaa:	697a      	ldr	r2, [r7, #20]
 800bdac:	6812      	ldr	r2, [r2, #0]
 800bdae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bdb0:	430b      	orrs	r3, r1
 800bdb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	685b      	ldr	r3, [r3, #4]
 800bdba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	68da      	ldr	r2, [r3, #12]
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	430a      	orrs	r2, r1
 800bdc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	699b      	ldr	r3, [r3, #24]
 800bdce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4a9f      	ldr	r2, [pc, #636]	; (800c054 <UART_SetConfig+0x2dc>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d004      	beq.n	800bde4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	6a1b      	ldr	r3, [r3, #32]
 800bdde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bde0:	4313      	orrs	r3, r2
 800bde2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	689b      	ldr	r3, [r3, #8]
 800bdea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800bdee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800bdf2:	697a      	ldr	r2, [r7, #20]
 800bdf4:	6812      	ldr	r2, [r2, #0]
 800bdf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bdf8:	430b      	orrs	r3, r1
 800bdfa:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be02:	f023 010f 	bic.w	r1, r3, #15
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	430a      	orrs	r2, r1
 800be10:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	4a90      	ldr	r2, [pc, #576]	; (800c058 <UART_SetConfig+0x2e0>)
 800be18:	4293      	cmp	r3, r2
 800be1a:	d125      	bne.n	800be68 <UART_SetConfig+0xf0>
 800be1c:	4b8f      	ldr	r3, [pc, #572]	; (800c05c <UART_SetConfig+0x2e4>)
 800be1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be22:	f003 0303 	and.w	r3, r3, #3
 800be26:	2b03      	cmp	r3, #3
 800be28:	d81a      	bhi.n	800be60 <UART_SetConfig+0xe8>
 800be2a:	a201      	add	r2, pc, #4	; (adr r2, 800be30 <UART_SetConfig+0xb8>)
 800be2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be30:	0800be41 	.word	0x0800be41
 800be34:	0800be51 	.word	0x0800be51
 800be38:	0800be49 	.word	0x0800be49
 800be3c:	0800be59 	.word	0x0800be59
 800be40:	2301      	movs	r3, #1
 800be42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be46:	e116      	b.n	800c076 <UART_SetConfig+0x2fe>
 800be48:	2302      	movs	r3, #2
 800be4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be4e:	e112      	b.n	800c076 <UART_SetConfig+0x2fe>
 800be50:	2304      	movs	r3, #4
 800be52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be56:	e10e      	b.n	800c076 <UART_SetConfig+0x2fe>
 800be58:	2308      	movs	r3, #8
 800be5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be5e:	e10a      	b.n	800c076 <UART_SetConfig+0x2fe>
 800be60:	2310      	movs	r3, #16
 800be62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be66:	e106      	b.n	800c076 <UART_SetConfig+0x2fe>
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4a7c      	ldr	r2, [pc, #496]	; (800c060 <UART_SetConfig+0x2e8>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d138      	bne.n	800bee4 <UART_SetConfig+0x16c>
 800be72:	4b7a      	ldr	r3, [pc, #488]	; (800c05c <UART_SetConfig+0x2e4>)
 800be74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be78:	f003 030c 	and.w	r3, r3, #12
 800be7c:	2b0c      	cmp	r3, #12
 800be7e:	d82d      	bhi.n	800bedc <UART_SetConfig+0x164>
 800be80:	a201      	add	r2, pc, #4	; (adr r2, 800be88 <UART_SetConfig+0x110>)
 800be82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be86:	bf00      	nop
 800be88:	0800bebd 	.word	0x0800bebd
 800be8c:	0800bedd 	.word	0x0800bedd
 800be90:	0800bedd 	.word	0x0800bedd
 800be94:	0800bedd 	.word	0x0800bedd
 800be98:	0800becd 	.word	0x0800becd
 800be9c:	0800bedd 	.word	0x0800bedd
 800bea0:	0800bedd 	.word	0x0800bedd
 800bea4:	0800bedd 	.word	0x0800bedd
 800bea8:	0800bec5 	.word	0x0800bec5
 800beac:	0800bedd 	.word	0x0800bedd
 800beb0:	0800bedd 	.word	0x0800bedd
 800beb4:	0800bedd 	.word	0x0800bedd
 800beb8:	0800bed5 	.word	0x0800bed5
 800bebc:	2300      	movs	r3, #0
 800bebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bec2:	e0d8      	b.n	800c076 <UART_SetConfig+0x2fe>
 800bec4:	2302      	movs	r3, #2
 800bec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800beca:	e0d4      	b.n	800c076 <UART_SetConfig+0x2fe>
 800becc:	2304      	movs	r3, #4
 800bece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bed2:	e0d0      	b.n	800c076 <UART_SetConfig+0x2fe>
 800bed4:	2308      	movs	r3, #8
 800bed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800beda:	e0cc      	b.n	800c076 <UART_SetConfig+0x2fe>
 800bedc:	2310      	movs	r3, #16
 800bede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bee2:	e0c8      	b.n	800c076 <UART_SetConfig+0x2fe>
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	4a5e      	ldr	r2, [pc, #376]	; (800c064 <UART_SetConfig+0x2ec>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d125      	bne.n	800bf3a <UART_SetConfig+0x1c2>
 800beee:	4b5b      	ldr	r3, [pc, #364]	; (800c05c <UART_SetConfig+0x2e4>)
 800bef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bef4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bef8:	2b30      	cmp	r3, #48	; 0x30
 800befa:	d016      	beq.n	800bf2a <UART_SetConfig+0x1b2>
 800befc:	2b30      	cmp	r3, #48	; 0x30
 800befe:	d818      	bhi.n	800bf32 <UART_SetConfig+0x1ba>
 800bf00:	2b20      	cmp	r3, #32
 800bf02:	d00a      	beq.n	800bf1a <UART_SetConfig+0x1a2>
 800bf04:	2b20      	cmp	r3, #32
 800bf06:	d814      	bhi.n	800bf32 <UART_SetConfig+0x1ba>
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d002      	beq.n	800bf12 <UART_SetConfig+0x19a>
 800bf0c:	2b10      	cmp	r3, #16
 800bf0e:	d008      	beq.n	800bf22 <UART_SetConfig+0x1aa>
 800bf10:	e00f      	b.n	800bf32 <UART_SetConfig+0x1ba>
 800bf12:	2300      	movs	r3, #0
 800bf14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf18:	e0ad      	b.n	800c076 <UART_SetConfig+0x2fe>
 800bf1a:	2302      	movs	r3, #2
 800bf1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf20:	e0a9      	b.n	800c076 <UART_SetConfig+0x2fe>
 800bf22:	2304      	movs	r3, #4
 800bf24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf28:	e0a5      	b.n	800c076 <UART_SetConfig+0x2fe>
 800bf2a:	2308      	movs	r3, #8
 800bf2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf30:	e0a1      	b.n	800c076 <UART_SetConfig+0x2fe>
 800bf32:	2310      	movs	r3, #16
 800bf34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf38:	e09d      	b.n	800c076 <UART_SetConfig+0x2fe>
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	4a4a      	ldr	r2, [pc, #296]	; (800c068 <UART_SetConfig+0x2f0>)
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d125      	bne.n	800bf90 <UART_SetConfig+0x218>
 800bf44:	4b45      	ldr	r3, [pc, #276]	; (800c05c <UART_SetConfig+0x2e4>)
 800bf46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bf4e:	2bc0      	cmp	r3, #192	; 0xc0
 800bf50:	d016      	beq.n	800bf80 <UART_SetConfig+0x208>
 800bf52:	2bc0      	cmp	r3, #192	; 0xc0
 800bf54:	d818      	bhi.n	800bf88 <UART_SetConfig+0x210>
 800bf56:	2b80      	cmp	r3, #128	; 0x80
 800bf58:	d00a      	beq.n	800bf70 <UART_SetConfig+0x1f8>
 800bf5a:	2b80      	cmp	r3, #128	; 0x80
 800bf5c:	d814      	bhi.n	800bf88 <UART_SetConfig+0x210>
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d002      	beq.n	800bf68 <UART_SetConfig+0x1f0>
 800bf62:	2b40      	cmp	r3, #64	; 0x40
 800bf64:	d008      	beq.n	800bf78 <UART_SetConfig+0x200>
 800bf66:	e00f      	b.n	800bf88 <UART_SetConfig+0x210>
 800bf68:	2300      	movs	r3, #0
 800bf6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf6e:	e082      	b.n	800c076 <UART_SetConfig+0x2fe>
 800bf70:	2302      	movs	r3, #2
 800bf72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf76:	e07e      	b.n	800c076 <UART_SetConfig+0x2fe>
 800bf78:	2304      	movs	r3, #4
 800bf7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf7e:	e07a      	b.n	800c076 <UART_SetConfig+0x2fe>
 800bf80:	2308      	movs	r3, #8
 800bf82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf86:	e076      	b.n	800c076 <UART_SetConfig+0x2fe>
 800bf88:	2310      	movs	r3, #16
 800bf8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf8e:	e072      	b.n	800c076 <UART_SetConfig+0x2fe>
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4a35      	ldr	r2, [pc, #212]	; (800c06c <UART_SetConfig+0x2f4>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d12a      	bne.n	800bff0 <UART_SetConfig+0x278>
 800bf9a:	4b30      	ldr	r3, [pc, #192]	; (800c05c <UART_SetConfig+0x2e4>)
 800bf9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfa8:	d01a      	beq.n	800bfe0 <UART_SetConfig+0x268>
 800bfaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfae:	d81b      	bhi.n	800bfe8 <UART_SetConfig+0x270>
 800bfb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfb4:	d00c      	beq.n	800bfd0 <UART_SetConfig+0x258>
 800bfb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfba:	d815      	bhi.n	800bfe8 <UART_SetConfig+0x270>
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d003      	beq.n	800bfc8 <UART_SetConfig+0x250>
 800bfc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfc4:	d008      	beq.n	800bfd8 <UART_SetConfig+0x260>
 800bfc6:	e00f      	b.n	800bfe8 <UART_SetConfig+0x270>
 800bfc8:	2300      	movs	r3, #0
 800bfca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bfce:	e052      	b.n	800c076 <UART_SetConfig+0x2fe>
 800bfd0:	2302      	movs	r3, #2
 800bfd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bfd6:	e04e      	b.n	800c076 <UART_SetConfig+0x2fe>
 800bfd8:	2304      	movs	r3, #4
 800bfda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bfde:	e04a      	b.n	800c076 <UART_SetConfig+0x2fe>
 800bfe0:	2308      	movs	r3, #8
 800bfe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bfe6:	e046      	b.n	800c076 <UART_SetConfig+0x2fe>
 800bfe8:	2310      	movs	r3, #16
 800bfea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bfee:	e042      	b.n	800c076 <UART_SetConfig+0x2fe>
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	4a17      	ldr	r2, [pc, #92]	; (800c054 <UART_SetConfig+0x2dc>)
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d13a      	bne.n	800c070 <UART_SetConfig+0x2f8>
 800bffa:	4b18      	ldr	r3, [pc, #96]	; (800c05c <UART_SetConfig+0x2e4>)
 800bffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c000:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c004:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c008:	d01a      	beq.n	800c040 <UART_SetConfig+0x2c8>
 800c00a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c00e:	d81b      	bhi.n	800c048 <UART_SetConfig+0x2d0>
 800c010:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c014:	d00c      	beq.n	800c030 <UART_SetConfig+0x2b8>
 800c016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c01a:	d815      	bhi.n	800c048 <UART_SetConfig+0x2d0>
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d003      	beq.n	800c028 <UART_SetConfig+0x2b0>
 800c020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c024:	d008      	beq.n	800c038 <UART_SetConfig+0x2c0>
 800c026:	e00f      	b.n	800c048 <UART_SetConfig+0x2d0>
 800c028:	2300      	movs	r3, #0
 800c02a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c02e:	e022      	b.n	800c076 <UART_SetConfig+0x2fe>
 800c030:	2302      	movs	r3, #2
 800c032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c036:	e01e      	b.n	800c076 <UART_SetConfig+0x2fe>
 800c038:	2304      	movs	r3, #4
 800c03a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c03e:	e01a      	b.n	800c076 <UART_SetConfig+0x2fe>
 800c040:	2308      	movs	r3, #8
 800c042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c046:	e016      	b.n	800c076 <UART_SetConfig+0x2fe>
 800c048:	2310      	movs	r3, #16
 800c04a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c04e:	e012      	b.n	800c076 <UART_SetConfig+0x2fe>
 800c050:	cfff69f3 	.word	0xcfff69f3
 800c054:	40008000 	.word	0x40008000
 800c058:	40013800 	.word	0x40013800
 800c05c:	40021000 	.word	0x40021000
 800c060:	40004400 	.word	0x40004400
 800c064:	40004800 	.word	0x40004800
 800c068:	40004c00 	.word	0x40004c00
 800c06c:	40005000 	.word	0x40005000
 800c070:	2310      	movs	r3, #16
 800c072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4aae      	ldr	r2, [pc, #696]	; (800c334 <UART_SetConfig+0x5bc>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	f040 8097 	bne.w	800c1b0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c082:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c086:	2b08      	cmp	r3, #8
 800c088:	d823      	bhi.n	800c0d2 <UART_SetConfig+0x35a>
 800c08a:	a201      	add	r2, pc, #4	; (adr r2, 800c090 <UART_SetConfig+0x318>)
 800c08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c090:	0800c0b5 	.word	0x0800c0b5
 800c094:	0800c0d3 	.word	0x0800c0d3
 800c098:	0800c0bd 	.word	0x0800c0bd
 800c09c:	0800c0d3 	.word	0x0800c0d3
 800c0a0:	0800c0c3 	.word	0x0800c0c3
 800c0a4:	0800c0d3 	.word	0x0800c0d3
 800c0a8:	0800c0d3 	.word	0x0800c0d3
 800c0ac:	0800c0d3 	.word	0x0800c0d3
 800c0b0:	0800c0cb 	.word	0x0800c0cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c0b4:	f7f9 fd00 	bl	8005ab8 <HAL_RCC_GetPCLK1Freq>
 800c0b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c0ba:	e010      	b.n	800c0de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c0bc:	4b9e      	ldr	r3, [pc, #632]	; (800c338 <UART_SetConfig+0x5c0>)
 800c0be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c0c0:	e00d      	b.n	800c0de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c0c2:	f7f9 fc61 	bl	8005988 <HAL_RCC_GetSysClockFreq>
 800c0c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c0c8:	e009      	b.n	800c0de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c0ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c0d0:	e005      	b.n	800c0de <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c0dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	f000 8130 	beq.w	800c346 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ea:	4a94      	ldr	r2, [pc, #592]	; (800c33c <UART_SetConfig+0x5c4>)
 800c0ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0f8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	685a      	ldr	r2, [r3, #4]
 800c0fe:	4613      	mov	r3, r2
 800c100:	005b      	lsls	r3, r3, #1
 800c102:	4413      	add	r3, r2
 800c104:	69ba      	ldr	r2, [r7, #24]
 800c106:	429a      	cmp	r2, r3
 800c108:	d305      	bcc.n	800c116 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c110:	69ba      	ldr	r2, [r7, #24]
 800c112:	429a      	cmp	r2, r3
 800c114:	d903      	bls.n	800c11e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c116:	2301      	movs	r3, #1
 800c118:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c11c:	e113      	b.n	800c346 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c120:	2200      	movs	r2, #0
 800c122:	60bb      	str	r3, [r7, #8]
 800c124:	60fa      	str	r2, [r7, #12]
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c12a:	4a84      	ldr	r2, [pc, #528]	; (800c33c <UART_SetConfig+0x5c4>)
 800c12c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c130:	b29b      	uxth	r3, r3
 800c132:	2200      	movs	r2, #0
 800c134:	603b      	str	r3, [r7, #0]
 800c136:	607a      	str	r2, [r7, #4]
 800c138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c13c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c140:	f7f4 fd4a 	bl	8000bd8 <__aeabi_uldivmod>
 800c144:	4602      	mov	r2, r0
 800c146:	460b      	mov	r3, r1
 800c148:	4610      	mov	r0, r2
 800c14a:	4619      	mov	r1, r3
 800c14c:	f04f 0200 	mov.w	r2, #0
 800c150:	f04f 0300 	mov.w	r3, #0
 800c154:	020b      	lsls	r3, r1, #8
 800c156:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c15a:	0202      	lsls	r2, r0, #8
 800c15c:	6979      	ldr	r1, [r7, #20]
 800c15e:	6849      	ldr	r1, [r1, #4]
 800c160:	0849      	lsrs	r1, r1, #1
 800c162:	2000      	movs	r0, #0
 800c164:	460c      	mov	r4, r1
 800c166:	4605      	mov	r5, r0
 800c168:	eb12 0804 	adds.w	r8, r2, r4
 800c16c:	eb43 0905 	adc.w	r9, r3, r5
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	2200      	movs	r2, #0
 800c176:	469a      	mov	sl, r3
 800c178:	4693      	mov	fp, r2
 800c17a:	4652      	mov	r2, sl
 800c17c:	465b      	mov	r3, fp
 800c17e:	4640      	mov	r0, r8
 800c180:	4649      	mov	r1, r9
 800c182:	f7f4 fd29 	bl	8000bd8 <__aeabi_uldivmod>
 800c186:	4602      	mov	r2, r0
 800c188:	460b      	mov	r3, r1
 800c18a:	4613      	mov	r3, r2
 800c18c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c18e:	6a3b      	ldr	r3, [r7, #32]
 800c190:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c194:	d308      	bcc.n	800c1a8 <UART_SetConfig+0x430>
 800c196:	6a3b      	ldr	r3, [r7, #32]
 800c198:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c19c:	d204      	bcs.n	800c1a8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	6a3a      	ldr	r2, [r7, #32]
 800c1a4:	60da      	str	r2, [r3, #12]
 800c1a6:	e0ce      	b.n	800c346 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c1ae:	e0ca      	b.n	800c346 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	69db      	ldr	r3, [r3, #28]
 800c1b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1b8:	d166      	bne.n	800c288 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c1ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c1be:	2b08      	cmp	r3, #8
 800c1c0:	d827      	bhi.n	800c212 <UART_SetConfig+0x49a>
 800c1c2:	a201      	add	r2, pc, #4	; (adr r2, 800c1c8 <UART_SetConfig+0x450>)
 800c1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c8:	0800c1ed 	.word	0x0800c1ed
 800c1cc:	0800c1f5 	.word	0x0800c1f5
 800c1d0:	0800c1fd 	.word	0x0800c1fd
 800c1d4:	0800c213 	.word	0x0800c213
 800c1d8:	0800c203 	.word	0x0800c203
 800c1dc:	0800c213 	.word	0x0800c213
 800c1e0:	0800c213 	.word	0x0800c213
 800c1e4:	0800c213 	.word	0x0800c213
 800c1e8:	0800c20b 	.word	0x0800c20b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c1ec:	f7f9 fc64 	bl	8005ab8 <HAL_RCC_GetPCLK1Freq>
 800c1f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c1f2:	e014      	b.n	800c21e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1f4:	f7f9 fc76 	bl	8005ae4 <HAL_RCC_GetPCLK2Freq>
 800c1f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c1fa:	e010      	b.n	800c21e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c1fc:	4b4e      	ldr	r3, [pc, #312]	; (800c338 <UART_SetConfig+0x5c0>)
 800c1fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c200:	e00d      	b.n	800c21e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c202:	f7f9 fbc1 	bl	8005988 <HAL_RCC_GetSysClockFreq>
 800c206:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c208:	e009      	b.n	800c21e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c20a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c20e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c210:	e005      	b.n	800c21e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c212:	2300      	movs	r3, #0
 800c214:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c216:	2301      	movs	r3, #1
 800c218:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c21c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c220:	2b00      	cmp	r3, #0
 800c222:	f000 8090 	beq.w	800c346 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c22a:	4a44      	ldr	r2, [pc, #272]	; (800c33c <UART_SetConfig+0x5c4>)
 800c22c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c230:	461a      	mov	r2, r3
 800c232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c234:	fbb3 f3f2 	udiv	r3, r3, r2
 800c238:	005a      	lsls	r2, r3, #1
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	685b      	ldr	r3, [r3, #4]
 800c23e:	085b      	lsrs	r3, r3, #1
 800c240:	441a      	add	r2, r3
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	fbb2 f3f3 	udiv	r3, r2, r3
 800c24a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c24c:	6a3b      	ldr	r3, [r7, #32]
 800c24e:	2b0f      	cmp	r3, #15
 800c250:	d916      	bls.n	800c280 <UART_SetConfig+0x508>
 800c252:	6a3b      	ldr	r3, [r7, #32]
 800c254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c258:	d212      	bcs.n	800c280 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c25a:	6a3b      	ldr	r3, [r7, #32]
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	f023 030f 	bic.w	r3, r3, #15
 800c262:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c264:	6a3b      	ldr	r3, [r7, #32]
 800c266:	085b      	lsrs	r3, r3, #1
 800c268:	b29b      	uxth	r3, r3
 800c26a:	f003 0307 	and.w	r3, r3, #7
 800c26e:	b29a      	uxth	r2, r3
 800c270:	8bfb      	ldrh	r3, [r7, #30]
 800c272:	4313      	orrs	r3, r2
 800c274:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	8bfa      	ldrh	r2, [r7, #30]
 800c27c:	60da      	str	r2, [r3, #12]
 800c27e:	e062      	b.n	800c346 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c280:	2301      	movs	r3, #1
 800c282:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c286:	e05e      	b.n	800c346 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c288:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c28c:	2b08      	cmp	r3, #8
 800c28e:	d828      	bhi.n	800c2e2 <UART_SetConfig+0x56a>
 800c290:	a201      	add	r2, pc, #4	; (adr r2, 800c298 <UART_SetConfig+0x520>)
 800c292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c296:	bf00      	nop
 800c298:	0800c2bd 	.word	0x0800c2bd
 800c29c:	0800c2c5 	.word	0x0800c2c5
 800c2a0:	0800c2cd 	.word	0x0800c2cd
 800c2a4:	0800c2e3 	.word	0x0800c2e3
 800c2a8:	0800c2d3 	.word	0x0800c2d3
 800c2ac:	0800c2e3 	.word	0x0800c2e3
 800c2b0:	0800c2e3 	.word	0x0800c2e3
 800c2b4:	0800c2e3 	.word	0x0800c2e3
 800c2b8:	0800c2db 	.word	0x0800c2db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c2bc:	f7f9 fbfc 	bl	8005ab8 <HAL_RCC_GetPCLK1Freq>
 800c2c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c2c2:	e014      	b.n	800c2ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c2c4:	f7f9 fc0e 	bl	8005ae4 <HAL_RCC_GetPCLK2Freq>
 800c2c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c2ca:	e010      	b.n	800c2ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c2cc:	4b1a      	ldr	r3, [pc, #104]	; (800c338 <UART_SetConfig+0x5c0>)
 800c2ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c2d0:	e00d      	b.n	800c2ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c2d2:	f7f9 fb59 	bl	8005988 <HAL_RCC_GetSysClockFreq>
 800c2d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c2d8:	e009      	b.n	800c2ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c2da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c2de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c2e0:	e005      	b.n	800c2ee <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c2ec:	bf00      	nop
    }

    if (pclk != 0U)
 800c2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d028      	beq.n	800c346 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f8:	4a10      	ldr	r2, [pc, #64]	; (800c33c <UART_SetConfig+0x5c4>)
 800c2fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2fe:	461a      	mov	r2, r3
 800c300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c302:	fbb3 f2f2 	udiv	r2, r3, r2
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	085b      	lsrs	r3, r3, #1
 800c30c:	441a      	add	r2, r3
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	fbb2 f3f3 	udiv	r3, r2, r3
 800c316:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c318:	6a3b      	ldr	r3, [r7, #32]
 800c31a:	2b0f      	cmp	r3, #15
 800c31c:	d910      	bls.n	800c340 <UART_SetConfig+0x5c8>
 800c31e:	6a3b      	ldr	r3, [r7, #32]
 800c320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c324:	d20c      	bcs.n	800c340 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c326:	6a3b      	ldr	r3, [r7, #32]
 800c328:	b29a      	uxth	r2, r3
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	60da      	str	r2, [r3, #12]
 800c330:	e009      	b.n	800c346 <UART_SetConfig+0x5ce>
 800c332:	bf00      	nop
 800c334:	40008000 	.word	0x40008000
 800c338:	00f42400 	.word	0x00f42400
 800c33c:	08014268 	.word	0x08014268
      }
      else
      {
        ret = HAL_ERROR;
 800c340:	2301      	movs	r3, #1
 800c342:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	2201      	movs	r2, #1
 800c34a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	2201      	movs	r2, #1
 800c352:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	2200      	movs	r2, #0
 800c35a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	2200      	movs	r2, #0
 800c360:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c362:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c366:	4618      	mov	r0, r3
 800c368:	3730      	adds	r7, #48	; 0x30
 800c36a:	46bd      	mov	sp, r7
 800c36c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c370 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c370:	b480      	push	{r7}
 800c372:	b083      	sub	sp, #12
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c37c:	f003 0301 	and.w	r3, r3, #1
 800c380:	2b00      	cmp	r3, #0
 800c382:	d00a      	beq.n	800c39a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	430a      	orrs	r2, r1
 800c398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c39e:	f003 0302 	and.w	r3, r3, #2
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d00a      	beq.n	800c3bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	430a      	orrs	r2, r1
 800c3ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3c0:	f003 0304 	and.w	r3, r3, #4
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d00a      	beq.n	800c3de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	685b      	ldr	r3, [r3, #4]
 800c3ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	430a      	orrs	r2, r1
 800c3dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3e2:	f003 0308 	and.w	r3, r3, #8
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d00a      	beq.n	800c400 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	430a      	orrs	r2, r1
 800c3fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c404:	f003 0310 	and.w	r3, r3, #16
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d00a      	beq.n	800c422 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	689b      	ldr	r3, [r3, #8]
 800c412:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	430a      	orrs	r2, r1
 800c420:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c426:	f003 0320 	and.w	r3, r3, #32
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d00a      	beq.n	800c444 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	689b      	ldr	r3, [r3, #8]
 800c434:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	430a      	orrs	r2, r1
 800c442:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d01a      	beq.n	800c486 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	685b      	ldr	r3, [r3, #4]
 800c456:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	430a      	orrs	r2, r1
 800c464:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c46a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c46e:	d10a      	bne.n	800c486 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	430a      	orrs	r2, r1
 800c484:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c48a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d00a      	beq.n	800c4a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	430a      	orrs	r2, r1
 800c4a6:	605a      	str	r2, [r3, #4]
  }
}
 800c4a8:	bf00      	nop
 800c4aa:	370c      	adds	r7, #12
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr

0800c4b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b086      	sub	sp, #24
 800c4b8:	af02      	add	r7, sp, #8
 800c4ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c4c4:	f7f6 faec 	bl	8002aa0 <HAL_GetTick>
 800c4c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f003 0308 	and.w	r3, r3, #8
 800c4d4:	2b08      	cmp	r3, #8
 800c4d6:	d10e      	bne.n	800c4f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c4dc:	9300      	str	r3, [sp, #0]
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f000 f82f 	bl	800c54a <UART_WaitOnFlagUntilTimeout>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d001      	beq.n	800c4f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c4f2:	2303      	movs	r3, #3
 800c4f4:	e025      	b.n	800c542 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f003 0304 	and.w	r3, r3, #4
 800c500:	2b04      	cmp	r3, #4
 800c502:	d10e      	bne.n	800c522 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c504:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c508:	9300      	str	r3, [sp, #0]
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	2200      	movs	r2, #0
 800c50e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f000 f819 	bl	800c54a <UART_WaitOnFlagUntilTimeout>
 800c518:	4603      	mov	r3, r0
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d001      	beq.n	800c522 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c51e:	2303      	movs	r3, #3
 800c520:	e00f      	b.n	800c542 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2220      	movs	r2, #32
 800c526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2220      	movs	r2, #32
 800c52e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2200      	movs	r2, #0
 800c536:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2200      	movs	r2, #0
 800c53c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c540:	2300      	movs	r3, #0
}
 800c542:	4618      	mov	r0, r3
 800c544:	3710      	adds	r7, #16
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}

0800c54a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c54a:	b580      	push	{r7, lr}
 800c54c:	b09c      	sub	sp, #112	; 0x70
 800c54e:	af00      	add	r7, sp, #0
 800c550:	60f8      	str	r0, [r7, #12]
 800c552:	60b9      	str	r1, [r7, #8]
 800c554:	603b      	str	r3, [r7, #0]
 800c556:	4613      	mov	r3, r2
 800c558:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c55a:	e0a9      	b.n	800c6b0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c55c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c55e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c562:	f000 80a5 	beq.w	800c6b0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c566:	f7f6 fa9b 	bl	8002aa0 <HAL_GetTick>
 800c56a:	4602      	mov	r2, r0
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	1ad3      	subs	r3, r2, r3
 800c570:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c572:	429a      	cmp	r2, r3
 800c574:	d302      	bcc.n	800c57c <UART_WaitOnFlagUntilTimeout+0x32>
 800c576:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d140      	bne.n	800c5fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c584:	e853 3f00 	ldrex	r3, [r3]
 800c588:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c58a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c58c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c590:	667b      	str	r3, [r7, #100]	; 0x64
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	461a      	mov	r2, r3
 800c598:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c59a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c59c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c59e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c5a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c5a2:	e841 2300 	strex	r3, r2, [r1]
 800c5a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c5a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d1e6      	bne.n	800c57c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	3308      	adds	r3, #8
 800c5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5b8:	e853 3f00 	ldrex	r3, [r3]
 800c5bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c0:	f023 0301 	bic.w	r3, r3, #1
 800c5c4:	663b      	str	r3, [r7, #96]	; 0x60
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	3308      	adds	r3, #8
 800c5cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c5ce:	64ba      	str	r2, [r7, #72]	; 0x48
 800c5d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c5d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c5d6:	e841 2300 	strex	r3, r2, [r1]
 800c5da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c5dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d1e5      	bne.n	800c5ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2220      	movs	r2, #32
 800c5e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2220      	movs	r2, #32
 800c5ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c5fa:	2303      	movs	r3, #3
 800c5fc:	e069      	b.n	800c6d2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f003 0304 	and.w	r3, r3, #4
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d051      	beq.n	800c6b0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	69db      	ldr	r3, [r3, #28]
 800c612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c61a:	d149      	bne.n	800c6b0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c624:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c62e:	e853 3f00 	ldrex	r3, [r3]
 800c632:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c636:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c63a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	461a      	mov	r2, r3
 800c642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c644:	637b      	str	r3, [r7, #52]	; 0x34
 800c646:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c648:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c64a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c64c:	e841 2300 	strex	r3, r2, [r1]
 800c650:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c654:	2b00      	cmp	r3, #0
 800c656:	d1e6      	bne.n	800c626 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	3308      	adds	r3, #8
 800c65e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	e853 3f00 	ldrex	r3, [r3]
 800c666:	613b      	str	r3, [r7, #16]
   return(result);
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	f023 0301 	bic.w	r3, r3, #1
 800c66e:	66bb      	str	r3, [r7, #104]	; 0x68
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	3308      	adds	r3, #8
 800c676:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c678:	623a      	str	r2, [r7, #32]
 800c67a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c67c:	69f9      	ldr	r1, [r7, #28]
 800c67e:	6a3a      	ldr	r2, [r7, #32]
 800c680:	e841 2300 	strex	r3, r2, [r1]
 800c684:	61bb      	str	r3, [r7, #24]
   return(result);
 800c686:	69bb      	ldr	r3, [r7, #24]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d1e5      	bne.n	800c658 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2220      	movs	r2, #32
 800c690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	2220      	movs	r2, #32
 800c698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2220      	movs	r2, #32
 800c6a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c6ac:	2303      	movs	r3, #3
 800c6ae:	e010      	b.n	800c6d2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	69da      	ldr	r2, [r3, #28]
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	4013      	ands	r3, r2
 800c6ba:	68ba      	ldr	r2, [r7, #8]
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	bf0c      	ite	eq
 800c6c0:	2301      	moveq	r3, #1
 800c6c2:	2300      	movne	r3, #0
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	79fb      	ldrb	r3, [r7, #7]
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	f43f af46 	beq.w	800c55c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c6d0:	2300      	movs	r3, #0
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3770      	adds	r7, #112	; 0x70
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}

0800c6da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c6da:	b480      	push	{r7}
 800c6dc:	b095      	sub	sp, #84	; 0x54
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6ea:	e853 3f00 	ldrex	r3, [r3]
 800c6ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c6f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c700:	643b      	str	r3, [r7, #64]	; 0x40
 800c702:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c704:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c706:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c708:	e841 2300 	strex	r3, r2, [r1]
 800c70c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c710:	2b00      	cmp	r3, #0
 800c712:	d1e6      	bne.n	800c6e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	3308      	adds	r3, #8
 800c71a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c71c:	6a3b      	ldr	r3, [r7, #32]
 800c71e:	e853 3f00 	ldrex	r3, [r3]
 800c722:	61fb      	str	r3, [r7, #28]
   return(result);
 800c724:	69fb      	ldr	r3, [r7, #28]
 800c726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c72a:	f023 0301 	bic.w	r3, r3, #1
 800c72e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	3308      	adds	r3, #8
 800c736:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c738:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c73a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c73c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c73e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c740:	e841 2300 	strex	r3, r2, [r1]
 800c744:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d1e3      	bne.n	800c714 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c750:	2b01      	cmp	r3, #1
 800c752:	d118      	bne.n	800c786 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	e853 3f00 	ldrex	r3, [r3]
 800c760:	60bb      	str	r3, [r7, #8]
   return(result);
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	f023 0310 	bic.w	r3, r3, #16
 800c768:	647b      	str	r3, [r7, #68]	; 0x44
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	461a      	mov	r2, r3
 800c770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c772:	61bb      	str	r3, [r7, #24]
 800c774:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c776:	6979      	ldr	r1, [r7, #20]
 800c778:	69ba      	ldr	r2, [r7, #24]
 800c77a:	e841 2300 	strex	r3, r2, [r1]
 800c77e:	613b      	str	r3, [r7, #16]
   return(result);
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d1e6      	bne.n	800c754 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2220      	movs	r2, #32
 800c78a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2200      	movs	r2, #0
 800c792:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2200      	movs	r2, #0
 800c798:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c79a:	bf00      	nop
 800c79c:	3754      	adds	r7, #84	; 0x54
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr

0800c7a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c7a6:	b580      	push	{r7, lr}
 800c7a8:	b084      	sub	sp, #16
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c7c4:	68f8      	ldr	r0, [r7, #12]
 800c7c6:	f7ff fac1 	bl	800bd4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7ca:	bf00      	nop
 800c7cc:	3710      	adds	r7, #16
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}

0800c7d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c7d2:	b580      	push	{r7, lr}
 800c7d4:	b088      	sub	sp, #32
 800c7d6:	af00      	add	r7, sp, #0
 800c7d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	e853 3f00 	ldrex	r3, [r3]
 800c7e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7ee:	61fb      	str	r3, [r7, #28]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	461a      	mov	r2, r3
 800c7f6:	69fb      	ldr	r3, [r7, #28]
 800c7f8:	61bb      	str	r3, [r7, #24]
 800c7fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7fc:	6979      	ldr	r1, [r7, #20]
 800c7fe:	69ba      	ldr	r2, [r7, #24]
 800c800:	e841 2300 	strex	r3, r2, [r1]
 800c804:	613b      	str	r3, [r7, #16]
   return(result);
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d1e6      	bne.n	800c7da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2220      	movs	r2, #32
 800c810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2200      	movs	r2, #0
 800c818:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f7ff fa8c 	bl	800bd38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c820:	bf00      	nop
 800c822:	3720      	adds	r7, #32
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c828:	b480      	push	{r7}
 800c82a:	b083      	sub	sp, #12
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c830:	bf00      	nop
 800c832:	370c      	adds	r7, #12
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr

0800c83c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b083      	sub	sp, #12
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c844:	bf00      	nop
 800c846:	370c      	adds	r7, #12
 800c848:	46bd      	mov	sp, r7
 800c84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84e:	4770      	bx	lr

0800c850 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c850:	b480      	push	{r7}
 800c852:	b083      	sub	sp, #12
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c858:	bf00      	nop
 800c85a:	370c      	adds	r7, #12
 800c85c:	46bd      	mov	sp, r7
 800c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c862:	4770      	bx	lr

0800c864 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c864:	b480      	push	{r7}
 800c866:	b085      	sub	sp, #20
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c872:	2b01      	cmp	r3, #1
 800c874:	d101      	bne.n	800c87a <HAL_UARTEx_DisableFifoMode+0x16>
 800c876:	2302      	movs	r3, #2
 800c878:	e027      	b.n	800c8ca <HAL_UARTEx_DisableFifoMode+0x66>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2201      	movs	r2, #1
 800c87e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2224      	movs	r2, #36	; 0x24
 800c886:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	681a      	ldr	r2, [r3, #0]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f022 0201 	bic.w	r2, r2, #1
 800c8a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c8a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	68fa      	ldr	r2, [r7, #12]
 800c8b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2220      	movs	r2, #32
 800c8bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c8c8:	2300      	movs	r3, #0
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3714      	adds	r7, #20
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d4:	4770      	bx	lr

0800c8d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c8d6:	b580      	push	{r7, lr}
 800c8d8:	b084      	sub	sp, #16
 800c8da:	af00      	add	r7, sp, #0
 800c8dc:	6078      	str	r0, [r7, #4]
 800c8de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d101      	bne.n	800c8ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c8ea:	2302      	movs	r3, #2
 800c8ec:	e02d      	b.n	800c94a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2224      	movs	r2, #36	; 0x24
 800c8fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	681a      	ldr	r2, [r3, #0]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f022 0201 	bic.w	r2, r2, #1
 800c914:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	689b      	ldr	r3, [r3, #8]
 800c91c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	683a      	ldr	r2, [r7, #0]
 800c926:	430a      	orrs	r2, r1
 800c928:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f000 f850 	bl	800c9d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	68fa      	ldr	r2, [r7, #12]
 800c936:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2220      	movs	r2, #32
 800c93c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2200      	movs	r2, #0
 800c944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c948:	2300      	movs	r3, #0
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	3710      	adds	r7, #16
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}

0800c952 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c952:	b580      	push	{r7, lr}
 800c954:	b084      	sub	sp, #16
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
 800c95a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c962:	2b01      	cmp	r3, #1
 800c964:	d101      	bne.n	800c96a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c966:	2302      	movs	r3, #2
 800c968:	e02d      	b.n	800c9c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2201      	movs	r2, #1
 800c96e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2224      	movs	r2, #36	; 0x24
 800c976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	681a      	ldr	r2, [r3, #0]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f022 0201 	bic.w	r2, r2, #1
 800c990:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	689b      	ldr	r3, [r3, #8]
 800c998:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	683a      	ldr	r2, [r7, #0]
 800c9a2:	430a      	orrs	r2, r1
 800c9a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f000 f812 	bl	800c9d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	68fa      	ldr	r2, [r7, #12]
 800c9b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2220      	movs	r2, #32
 800c9b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c9c4:	2300      	movs	r3, #0
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3710      	adds	r7, #16
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
	...

0800c9d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b085      	sub	sp, #20
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d108      	bne.n	800c9f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2201      	movs	r2, #1
 800c9ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c9f0:	e031      	b.n	800ca56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c9f2:	2308      	movs	r3, #8
 800c9f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c9f6:	2308      	movs	r3, #8
 800c9f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	689b      	ldr	r3, [r3, #8]
 800ca00:	0e5b      	lsrs	r3, r3, #25
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	f003 0307 	and.w	r3, r3, #7
 800ca08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	689b      	ldr	r3, [r3, #8]
 800ca10:	0f5b      	lsrs	r3, r3, #29
 800ca12:	b2db      	uxtb	r3, r3
 800ca14:	f003 0307 	and.w	r3, r3, #7
 800ca18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca1a:	7bbb      	ldrb	r3, [r7, #14]
 800ca1c:	7b3a      	ldrb	r2, [r7, #12]
 800ca1e:	4911      	ldr	r1, [pc, #68]	; (800ca64 <UARTEx_SetNbDataToProcess+0x94>)
 800ca20:	5c8a      	ldrb	r2, [r1, r2]
 800ca22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ca26:	7b3a      	ldrb	r2, [r7, #12]
 800ca28:	490f      	ldr	r1, [pc, #60]	; (800ca68 <UARTEx_SetNbDataToProcess+0x98>)
 800ca2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca2c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca30:	b29a      	uxth	r2, r3
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca38:	7bfb      	ldrb	r3, [r7, #15]
 800ca3a:	7b7a      	ldrb	r2, [r7, #13]
 800ca3c:	4909      	ldr	r1, [pc, #36]	; (800ca64 <UARTEx_SetNbDataToProcess+0x94>)
 800ca3e:	5c8a      	ldrb	r2, [r1, r2]
 800ca40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ca44:	7b7a      	ldrb	r2, [r7, #13]
 800ca46:	4908      	ldr	r1, [pc, #32]	; (800ca68 <UARTEx_SetNbDataToProcess+0x98>)
 800ca48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca4a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca4e:	b29a      	uxth	r2, r3
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ca56:	bf00      	nop
 800ca58:	3714      	adds	r7, #20
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca60:	4770      	bx	lr
 800ca62:	bf00      	nop
 800ca64:	08014280 	.word	0x08014280
 800ca68:	08014288 	.word	0x08014288

0800ca6c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ca6c:	b084      	sub	sp, #16
 800ca6e:	b480      	push	{r7}
 800ca70:	b085      	sub	sp, #20
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
 800ca76:	f107 001c 	add.w	r0, r7, #28
 800ca7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800ca82:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800ca84:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ca86:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ca88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800ca8a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ca8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800ca8e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ca90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800ca92:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ca94:	68fa      	ldr	r2, [r7, #12]
 800ca96:	4313      	orrs	r3, r2
 800ca98:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	685a      	ldr	r2, [r3, #4]
 800ca9e:	4b07      	ldr	r3, [pc, #28]	; (800cabc <SDMMC_Init+0x50>)
 800caa0:	4013      	ands	r3, r2
 800caa2:	68fa      	ldr	r2, [r7, #12]
 800caa4:	431a      	orrs	r2, r3
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800caaa:	2300      	movs	r3, #0
}
 800caac:	4618      	mov	r0, r3
 800caae:	3714      	adds	r7, #20
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	b004      	add	sp, #16
 800cab8:	4770      	bx	lr
 800caba:	bf00      	nop
 800cabc:	ffc02c00 	.word	0xffc02c00

0800cac0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b083      	sub	sp, #12
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800cace:	4618      	mov	r0, r3
 800cad0:	370c      	adds	r7, #12
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr

0800cada <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800cada:	b480      	push	{r7}
 800cadc:	b083      	sub	sp, #12
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
 800cae2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	681a      	ldr	r2, [r3, #0]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800caee:	2300      	movs	r3, #0
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	370c      	adds	r7, #12
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	f043 0203 	orr.w	r2, r3, #3
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800cb10:	2002      	movs	r0, #2
 800cb12:	f7f5 ffd1 	bl	8002ab8 <HAL_Delay>

  return HAL_OK;
 800cb16:	2300      	movs	r3, #0
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3708      	adds	r7, #8
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b083      	sub	sp, #12
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f003 0303 	and.w	r3, r3, #3
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	370c      	adds	r7, #12
 800cb34:	46bd      	mov	sp, r7
 800cb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3a:	4770      	bx	lr

0800cb3c <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b085      	sub	sp, #20
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cb46:	2300      	movs	r3, #0
 800cb48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	681a      	ldr	r2, [r3, #0]
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cb5a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800cb60:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800cb66:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cb68:	68fa      	ldr	r2, [r7, #12]
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	68da      	ldr	r2, [r3, #12]
 800cb72:	4b06      	ldr	r3, [pc, #24]	; (800cb8c <SDMMC_SendCommand+0x50>)
 800cb74:	4013      	ands	r3, r2
 800cb76:	68fa      	ldr	r2, [r7, #12]
 800cb78:	431a      	orrs	r2, r3
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cb7e:	2300      	movs	r3, #0
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3714      	adds	r7, #20
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr
 800cb8c:	fffee0c0 	.word	0xfffee0c0

0800cb90 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800cb90:	b480      	push	{r7}
 800cb92:	b083      	sub	sp, #12
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	691b      	ldr	r3, [r3, #16]
 800cb9c:	b2db      	uxtb	r3, r3
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	370c      	adds	r7, #12
 800cba2:	46bd      	mov	sp, r7
 800cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba8:	4770      	bx	lr

0800cbaa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800cbaa:	b480      	push	{r7}
 800cbac:	b085      	sub	sp, #20
 800cbae:	af00      	add	r7, sp, #0
 800cbb0:	6078      	str	r0, [r7, #4]
 800cbb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	3314      	adds	r3, #20
 800cbb8:	461a      	mov	r2, r3
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	4413      	add	r3, r2
 800cbbe:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	681b      	ldr	r3, [r3, #0]
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3714      	adds	r7, #20
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr

0800cbd0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b085      	sub	sp, #20
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	681a      	ldr	r2, [r3, #0]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	685a      	ldr	r2, [r3, #4]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cbf6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cbfc:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cc02:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cc04:	68fa      	ldr	r2, [r7, #12]
 800cc06:	4313      	orrs	r3, r2
 800cc08:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc0e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	431a      	orrs	r2, r3
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800cc1a:	2300      	movs	r3, #0

}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3714      	adds	r7, #20
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr

0800cc28 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b088      	sub	sp, #32
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cc36:	2310      	movs	r3, #16
 800cc38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc40:	2300      	movs	r3, #0
 800cc42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc4a:	f107 0308 	add.w	r3, r7, #8
 800cc4e:	4619      	mov	r1, r3
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f7ff ff73 	bl	800cb3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800cc56:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc5a:	2110      	movs	r1, #16
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f000 fa7b 	bl	800d158 <SDMMC_GetCmdResp1>
 800cc62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc64:	69fb      	ldr	r3, [r7, #28]
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3720      	adds	r7, #32
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}

0800cc6e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cc6e:	b580      	push	{r7, lr}
 800cc70:	b088      	sub	sp, #32
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	6078      	str	r0, [r7, #4]
 800cc76:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cc7c:	2311      	movs	r3, #17
 800cc7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc86:	2300      	movs	r3, #0
 800cc88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc90:	f107 0308 	add.w	r3, r7, #8
 800cc94:	4619      	mov	r1, r3
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f7ff ff50 	bl	800cb3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cc9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cca0:	2111      	movs	r1, #17
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f000 fa58 	bl	800d158 <SDMMC_GetCmdResp1>
 800cca8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccaa:	69fb      	ldr	r3, [r7, #28]
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3720      	adds	r7, #32
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b088      	sub	sp, #32
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ccc2:	2312      	movs	r3, #18
 800ccc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ccc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ccca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cccc:	2300      	movs	r3, #0
 800ccce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ccd4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccd6:	f107 0308 	add.w	r3, r7, #8
 800ccda:	4619      	mov	r1, r3
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f7ff ff2d 	bl	800cb3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cce2:	f241 3288 	movw	r2, #5000	; 0x1388
 800cce6:	2112      	movs	r1, #18
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f000 fa35 	bl	800d158 <SDMMC_GetCmdResp1>
 800ccee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccf0:	69fb      	ldr	r3, [r7, #28]
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3720      	adds	r7, #32
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}

0800ccfa <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ccfa:	b580      	push	{r7, lr}
 800ccfc:	b088      	sub	sp, #32
 800ccfe:	af00      	add	r7, sp, #0
 800cd00:	6078      	str	r0, [r7, #4]
 800cd02:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cd08:	2318      	movs	r3, #24
 800cd0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd12:	2300      	movs	r3, #0
 800cd14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd1c:	f107 0308 	add.w	r3, r7, #8
 800cd20:	4619      	mov	r1, r3
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f7ff ff0a 	bl	800cb3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cd28:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd2c:	2118      	movs	r1, #24
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 fa12 	bl	800d158 <SDMMC_GetCmdResp1>
 800cd34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd36:	69fb      	ldr	r3, [r7, #28]
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3720      	adds	r7, #32
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b088      	sub	sp, #32
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cd4e:	2319      	movs	r3, #25
 800cd50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd52:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd62:	f107 0308 	add.w	r3, r7, #8
 800cd66:	4619      	mov	r1, r3
 800cd68:	6878      	ldr	r0, [r7, #4]
 800cd6a:	f7ff fee7 	bl	800cb3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cd6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd72:	2119      	movs	r1, #25
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f000 f9ef 	bl	800d158 <SDMMC_GetCmdResp1>
 800cd7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd7c:	69fb      	ldr	r3, [r7, #28]
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3720      	adds	r7, #32
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}
	...

0800cd88 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b088      	sub	sp, #32
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cd90:	2300      	movs	r3, #0
 800cd92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cd94:	230c      	movs	r3, #12
 800cd96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd98:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cda2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cda6:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	68db      	ldr	r3, [r3, #12]
 800cdac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	68db      	ldr	r3, [r3, #12]
 800cdb8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdc0:	f107 0308 	add.w	r3, r7, #8
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f7ff feb8 	bl	800cb3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800cdcc:	4a08      	ldr	r2, [pc, #32]	; (800cdf0 <SDMMC_CmdStopTransfer+0x68>)
 800cdce:	210c      	movs	r1, #12
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f000 f9c1 	bl	800d158 <SDMMC_GetCmdResp1>
 800cdd6:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	68db      	ldr	r3, [r3, #12]
 800cddc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800cde4:	69fb      	ldr	r3, [r7, #28]
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3720      	adds	r7, #32
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	05f5e100 	.word	0x05f5e100

0800cdf4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b08a      	sub	sp, #40	; 0x28
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	60f8      	str	r0, [r7, #12]
 800cdfc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ce04:	2307      	movs	r3, #7
 800ce06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce08:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce0c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce16:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce18:	f107 0310 	add.w	r3, r7, #16
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	68f8      	ldr	r0, [r7, #12]
 800ce20:	f7ff fe8c 	bl	800cb3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ce24:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce28:	2107      	movs	r1, #7
 800ce2a:	68f8      	ldr	r0, [r7, #12]
 800ce2c:	f000 f994 	bl	800d158 <SDMMC_GetCmdResp1>
 800ce30:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ce32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	3728      	adds	r7, #40	; 0x28
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}

0800ce3c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b088      	sub	sp, #32
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ce44:	2300      	movs	r3, #0
 800ce46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce50:	2300      	movs	r3, #0
 800ce52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce5a:	f107 0308 	add.w	r3, r7, #8
 800ce5e:	4619      	mov	r1, r3
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f7ff fe6b 	bl	800cb3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f000 fbb8 	bl	800d5dc <SDMMC_GetCmdError>
 800ce6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce6e:	69fb      	ldr	r3, [r7, #28]
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3720      	adds	r7, #32
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}

0800ce78 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b088      	sub	sp, #32
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ce80:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ce84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ce86:	2308      	movs	r3, #8
 800ce88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce90:	2300      	movs	r3, #0
 800ce92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce9a:	f107 0308 	add.w	r3, r7, #8
 800ce9e:	4619      	mov	r1, r3
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f7ff fe4b 	bl	800cb3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f000 fb4a 	bl	800d540 <SDMMC_GetCmdResp7>
 800ceac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ceae:	69fb      	ldr	r3, [r7, #28]
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3720      	adds	r7, #32
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}

0800ceb8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b088      	sub	sp, #32
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cec6:	2337      	movs	r3, #55	; 0x37
 800cec8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ceca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cece:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ced0:	2300      	movs	r3, #0
 800ced2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ced4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ced8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ceda:	f107 0308 	add.w	r3, r7, #8
 800cede:	4619      	mov	r1, r3
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f7ff fe2b 	bl	800cb3c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800cee6:	f241 3288 	movw	r2, #5000	; 0x1388
 800ceea:	2137      	movs	r1, #55	; 0x37
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f000 f933 	bl	800d158 <SDMMC_GetCmdResp1>
 800cef2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cef4:	69fb      	ldr	r3, [r7, #28]
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3720      	adds	r7, #32
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b088      	sub	sp, #32
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
 800cf06:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cf0c:	2329      	movs	r3, #41	; 0x29
 800cf0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf10:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf16:	2300      	movs	r3, #0
 800cf18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf20:	f107 0308 	add.w	r3, r7, #8
 800cf24:	4619      	mov	r1, r3
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f7ff fe08 	bl	800cb3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f000 fa4f 	bl	800d3d0 <SDMMC_GetCmdResp3>
 800cf32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf34:	69fb      	ldr	r3, [r7, #28]
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3720      	adds	r7, #32
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}

0800cf3e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800cf3e:	b580      	push	{r7, lr}
 800cf40:	b088      	sub	sp, #32
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	6078      	str	r0, [r7, #4]
 800cf46:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800cf4c:	2306      	movs	r3, #6
 800cf4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf50:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf56:	2300      	movs	r3, #0
 800cf58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf60:	f107 0308 	add.w	r3, r7, #8
 800cf64:	4619      	mov	r1, r3
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f7ff fde8 	bl	800cb3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800cf6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf70:	2106      	movs	r1, #6
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f000 f8f0 	bl	800d158 <SDMMC_GetCmdResp1>
 800cf78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf7a:	69fb      	ldr	r3, [r7, #28]
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3720      	adds	r7, #32
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b088      	sub	sp, #32
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cf90:	2333      	movs	r3, #51	; 0x33
 800cf92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf94:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cfa2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfa4:	f107 0308 	add.w	r3, r7, #8
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f7ff fdc6 	bl	800cb3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800cfb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfb4:	2133      	movs	r1, #51	; 0x33
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f000 f8ce 	bl	800d158 <SDMMC_GetCmdResp1>
 800cfbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfbe:	69fb      	ldr	r3, [r7, #28]
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3720      	adds	r7, #32
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}

0800cfc8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b088      	sub	sp, #32
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cfd4:	2302      	movs	r3, #2
 800cfd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cfd8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800cfdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfe2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cfe6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfe8:	f107 0308 	add.w	r3, r7, #8
 800cfec:	4619      	mov	r1, r3
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f7ff fda4 	bl	800cb3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f000 f9a1 	bl	800d33c <SDMMC_GetCmdResp2>
 800cffa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cffc:	69fb      	ldr	r3, [r7, #28]
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3720      	adds	r7, #32
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}

0800d006 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d006:	b580      	push	{r7, lr}
 800d008:	b088      	sub	sp, #32
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	6078      	str	r0, [r7, #4]
 800d00e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d014:	2309      	movs	r3, #9
 800d016:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d018:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d01c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d01e:	2300      	movs	r3, #0
 800d020:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d022:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d026:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d028:	f107 0308 	add.w	r3, r7, #8
 800d02c:	4619      	mov	r1, r3
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f7ff fd84 	bl	800cb3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f000 f981 	bl	800d33c <SDMMC_GetCmdResp2>
 800d03a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d03c:	69fb      	ldr	r3, [r7, #28]
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3720      	adds	r7, #32
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}

0800d046 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d046:	b580      	push	{r7, lr}
 800d048:	b088      	sub	sp, #32
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	6078      	str	r0, [r7, #4]
 800d04e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d050:	2300      	movs	r3, #0
 800d052:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d054:	2303      	movs	r3, #3
 800d056:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d058:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d05c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d05e:	2300      	movs	r3, #0
 800d060:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d066:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d068:	f107 0308 	add.w	r3, r7, #8
 800d06c:	4619      	mov	r1, r3
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f7ff fd64 	bl	800cb3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d074:	683a      	ldr	r2, [r7, #0]
 800d076:	2103      	movs	r1, #3
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f000 f9e9 	bl	800d450 <SDMMC_GetCmdResp6>
 800d07e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d080:	69fb      	ldr	r3, [r7, #28]
}
 800d082:	4618      	mov	r0, r3
 800d084:	3720      	adds	r7, #32
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}

0800d08a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d08a:	b580      	push	{r7, lr}
 800d08c:	b088      	sub	sp, #32
 800d08e:	af00      	add	r7, sp, #0
 800d090:	6078      	str	r0, [r7, #4]
 800d092:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d098:	230d      	movs	r3, #13
 800d09a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d09c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d0a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d0aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0ac:	f107 0308 	add.w	r3, r7, #8
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f7ff fd42 	bl	800cb3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d0b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0bc:	210d      	movs	r1, #13
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f000 f84a 	bl	800d158 <SDMMC_GetCmdResp1>
 800d0c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0c6:	69fb      	ldr	r3, [r7, #28]
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3720      	adds	r7, #32
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}

0800d0d0 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b088      	sub	sp, #32
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d0dc:	230d      	movs	r3, #13
 800d0de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d0e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d0ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0f0:	f107 0308 	add.w	r3, r7, #8
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f7ff fd20 	bl	800cb3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d0fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d100:	210d      	movs	r1, #13
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f000 f828 	bl	800d158 <SDMMC_GetCmdResp1>
 800d108:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d10a:	69fb      	ldr	r3, [r7, #28]
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3720      	adds	r7, #32
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}

0800d114 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b088      	sub	sp, #32
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800d11c:	2300      	movs	r3, #0
 800d11e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800d120:	230b      	movs	r3, #11
 800d122:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d124:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d128:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d12a:	2300      	movs	r3, #0
 800d12c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d12e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d132:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d134:	f107 0308 	add.w	r3, r7, #8
 800d138:	4619      	mov	r1, r3
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f7ff fcfe 	bl	800cb3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800d140:	f241 3288 	movw	r2, #5000	; 0x1388
 800d144:	210b      	movs	r1, #11
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f000 f806 	bl	800d158 <SDMMC_GetCmdResp1>
 800d14c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d14e:	69fb      	ldr	r3, [r7, #28]
}
 800d150:	4618      	mov	r0, r3
 800d152:	3720      	adds	r7, #32
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}

0800d158 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b088      	sub	sp, #32
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	60f8      	str	r0, [r7, #12]
 800d160:	460b      	mov	r3, r1
 800d162:	607a      	str	r2, [r7, #4]
 800d164:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d166:	4b70      	ldr	r3, [pc, #448]	; (800d328 <SDMMC_GetCmdResp1+0x1d0>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4a70      	ldr	r2, [pc, #448]	; (800d32c <SDMMC_GetCmdResp1+0x1d4>)
 800d16c:	fba2 2303 	umull	r2, r3, r2, r3
 800d170:	0a5a      	lsrs	r2, r3, #9
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	fb02 f303 	mul.w	r3, r2, r3
 800d178:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d17a:	69fb      	ldr	r3, [r7, #28]
 800d17c:	1e5a      	subs	r2, r3, #1
 800d17e:	61fa      	str	r2, [r7, #28]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d102      	bne.n	800d18a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d184:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d188:	e0c9      	b.n	800d31e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d18e:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d190:	69ba      	ldr	r2, [r7, #24]
 800d192:	4b67      	ldr	r3, [pc, #412]	; (800d330 <SDMMC_GetCmdResp1+0x1d8>)
 800d194:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d196:	2b00      	cmp	r3, #0
 800d198:	d0ef      	beq.n	800d17a <SDMMC_GetCmdResp1+0x22>
 800d19a:	69bb      	ldr	r3, [r7, #24]
 800d19c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d1ea      	bne.n	800d17a <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1a8:	f003 0304 	and.w	r3, r3, #4
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d004      	beq.n	800d1ba <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	2204      	movs	r2, #4
 800d1b4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d1b6:	2304      	movs	r3, #4
 800d1b8:	e0b1      	b.n	800d31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1be:	f003 0301 	and.w	r3, r3, #1
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d004      	beq.n	800d1d0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2201      	movs	r2, #1
 800d1ca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	e0a6      	b.n	800d31e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	4a58      	ldr	r2, [pc, #352]	; (800d334 <SDMMC_GetCmdResp1+0x1dc>)
 800d1d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d1d6:	68f8      	ldr	r0, [r7, #12]
 800d1d8:	f7ff fcda 	bl	800cb90 <SDMMC_GetCommandResponse>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	461a      	mov	r2, r3
 800d1e0:	7afb      	ldrb	r3, [r7, #11]
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d001      	beq.n	800d1ea <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	e099      	b.n	800d31e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d1ea:	2100      	movs	r1, #0
 800d1ec:	68f8      	ldr	r0, [r7, #12]
 800d1ee:	f7ff fcdc 	bl	800cbaa <SDMMC_GetResponse>
 800d1f2:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d1f4:	697a      	ldr	r2, [r7, #20]
 800d1f6:	4b50      	ldr	r3, [pc, #320]	; (800d338 <SDMMC_GetCmdResp1+0x1e0>)
 800d1f8:	4013      	ands	r3, r2
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d101      	bne.n	800d202 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d1fe:	2300      	movs	r3, #0
 800d200:	e08d      	b.n	800d31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	2b00      	cmp	r3, #0
 800d206:	da02      	bge.n	800d20e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d208:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d20c:	e087      	b.n	800d31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d214:	2b00      	cmp	r3, #0
 800d216:	d001      	beq.n	800d21c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d218:	2340      	movs	r3, #64	; 0x40
 800d21a:	e080      	b.n	800d31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d222:	2b00      	cmp	r3, #0
 800d224:	d001      	beq.n	800d22a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d226:	2380      	movs	r3, #128	; 0x80
 800d228:	e079      	b.n	800d31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d230:	2b00      	cmp	r3, #0
 800d232:	d002      	beq.n	800d23a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d234:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d238:	e071      	b.n	800d31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d240:	2b00      	cmp	r3, #0
 800d242:	d002      	beq.n	800d24a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d244:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d248:	e069      	b.n	800d31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d250:	2b00      	cmp	r3, #0
 800d252:	d002      	beq.n	800d25a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d258:	e061      	b.n	800d31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d260:	2b00      	cmp	r3, #0
 800d262:	d002      	beq.n	800d26a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d264:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d268:	e059      	b.n	800d31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d270:	2b00      	cmp	r3, #0
 800d272:	d002      	beq.n	800d27a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d278:	e051      	b.n	800d31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d280:	2b00      	cmp	r3, #0
 800d282:	d002      	beq.n	800d28a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d284:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d288:	e049      	b.n	800d31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d290:	2b00      	cmp	r3, #0
 800d292:	d002      	beq.n	800d29a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d294:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d298:	e041      	b.n	800d31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d002      	beq.n	800d2aa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d2a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d2a8:	e039      	b.n	800d31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d002      	beq.n	800d2ba <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d2b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d2b8:	e031      	b.n	800d31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d002      	beq.n	800d2ca <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d2c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d2c8:	e029      	b.n	800d31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d002      	beq.n	800d2da <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d2d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d2d8:	e021      	b.n	800d31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d002      	beq.n	800d2ea <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d2e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d2e8:	e019      	b.n	800d31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d002      	beq.n	800d2fa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d2f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d2f8:	e011      	b.n	800d31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d2fa:	697b      	ldr	r3, [r7, #20]
 800d2fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d300:	2b00      	cmp	r3, #0
 800d302:	d002      	beq.n	800d30a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d304:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d308:	e009      	b.n	800d31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	f003 0308 	and.w	r3, r3, #8
 800d310:	2b00      	cmp	r3, #0
 800d312:	d002      	beq.n	800d31a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d314:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d318:	e001      	b.n	800d31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d31a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3720      	adds	r7, #32
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
 800d326:	bf00      	nop
 800d328:	2000000c 	.word	0x2000000c
 800d32c:	10624dd3 	.word	0x10624dd3
 800d330:	00200045 	.word	0x00200045
 800d334:	002000c5 	.word	0x002000c5
 800d338:	fdffe008 	.word	0xfdffe008

0800d33c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b085      	sub	sp, #20
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d344:	4b1f      	ldr	r3, [pc, #124]	; (800d3c4 <SDMMC_GetCmdResp2+0x88>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	4a1f      	ldr	r2, [pc, #124]	; (800d3c8 <SDMMC_GetCmdResp2+0x8c>)
 800d34a:	fba2 2303 	umull	r2, r3, r2, r3
 800d34e:	0a5b      	lsrs	r3, r3, #9
 800d350:	f241 3288 	movw	r2, #5000	; 0x1388
 800d354:	fb02 f303 	mul.w	r3, r2, r3
 800d358:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	1e5a      	subs	r2, r3, #1
 800d35e:	60fa      	str	r2, [r7, #12]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d102      	bne.n	800d36a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d364:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d368:	e026      	b.n	800d3b8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d36e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d376:	2b00      	cmp	r3, #0
 800d378:	d0ef      	beq.n	800d35a <SDMMC_GetCmdResp2+0x1e>
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d380:	2b00      	cmp	r3, #0
 800d382:	d1ea      	bne.n	800d35a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d388:	f003 0304 	and.w	r3, r3, #4
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d004      	beq.n	800d39a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2204      	movs	r2, #4
 800d394:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d396:	2304      	movs	r3, #4
 800d398:	e00e      	b.n	800d3b8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d39e:	f003 0301 	and.w	r3, r3, #1
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d004      	beq.n	800d3b0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	e003      	b.n	800d3b8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	4a06      	ldr	r2, [pc, #24]	; (800d3cc <SDMMC_GetCmdResp2+0x90>)
 800d3b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d3b6:	2300      	movs	r3, #0
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3714      	adds	r7, #20
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr
 800d3c4:	2000000c 	.word	0x2000000c
 800d3c8:	10624dd3 	.word	0x10624dd3
 800d3cc:	002000c5 	.word	0x002000c5

0800d3d0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b085      	sub	sp, #20
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d3d8:	4b1a      	ldr	r3, [pc, #104]	; (800d444 <SDMMC_GetCmdResp3+0x74>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	4a1a      	ldr	r2, [pc, #104]	; (800d448 <SDMMC_GetCmdResp3+0x78>)
 800d3de:	fba2 2303 	umull	r2, r3, r2, r3
 800d3e2:	0a5b      	lsrs	r3, r3, #9
 800d3e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3e8:	fb02 f303 	mul.w	r3, r2, r3
 800d3ec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	1e5a      	subs	r2, r3, #1
 800d3f2:	60fa      	str	r2, [r7, #12]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d102      	bne.n	800d3fe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d3f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d3fc:	e01b      	b.n	800d436 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d402:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d0ef      	beq.n	800d3ee <SDMMC_GetCmdResp3+0x1e>
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d414:	2b00      	cmp	r3, #0
 800d416:	d1ea      	bne.n	800d3ee <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d41c:	f003 0304 	and.w	r3, r3, #4
 800d420:	2b00      	cmp	r3, #0
 800d422:	d004      	beq.n	800d42e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2204      	movs	r2, #4
 800d428:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d42a:	2304      	movs	r3, #4
 800d42c:	e003      	b.n	800d436 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	4a06      	ldr	r2, [pc, #24]	; (800d44c <SDMMC_GetCmdResp3+0x7c>)
 800d432:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d434:	2300      	movs	r3, #0
}
 800d436:	4618      	mov	r0, r3
 800d438:	3714      	adds	r7, #20
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr
 800d442:	bf00      	nop
 800d444:	2000000c 	.word	0x2000000c
 800d448:	10624dd3 	.word	0x10624dd3
 800d44c:	002000c5 	.word	0x002000c5

0800d450 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b088      	sub	sp, #32
 800d454:	af00      	add	r7, sp, #0
 800d456:	60f8      	str	r0, [r7, #12]
 800d458:	460b      	mov	r3, r1
 800d45a:	607a      	str	r2, [r7, #4]
 800d45c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d45e:	4b35      	ldr	r3, [pc, #212]	; (800d534 <SDMMC_GetCmdResp6+0xe4>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	4a35      	ldr	r2, [pc, #212]	; (800d538 <SDMMC_GetCmdResp6+0xe8>)
 800d464:	fba2 2303 	umull	r2, r3, r2, r3
 800d468:	0a5b      	lsrs	r3, r3, #9
 800d46a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d46e:	fb02 f303 	mul.w	r3, r2, r3
 800d472:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d474:	69fb      	ldr	r3, [r7, #28]
 800d476:	1e5a      	subs	r2, r3, #1
 800d478:	61fa      	str	r2, [r7, #28]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d102      	bne.n	800d484 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d47e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d482:	e052      	b.n	800d52a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d488:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d48a:	69bb      	ldr	r3, [r7, #24]
 800d48c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d490:	2b00      	cmp	r3, #0
 800d492:	d0ef      	beq.n	800d474 <SDMMC_GetCmdResp6+0x24>
 800d494:	69bb      	ldr	r3, [r7, #24]
 800d496:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d1ea      	bne.n	800d474 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4a2:	f003 0304 	and.w	r3, r3, #4
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d004      	beq.n	800d4b4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2204      	movs	r2, #4
 800d4ae:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d4b0:	2304      	movs	r3, #4
 800d4b2:	e03a      	b.n	800d52a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4b8:	f003 0301 	and.w	r3, r3, #1
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d004      	beq.n	800d4ca <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	e02f      	b.n	800d52a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d4ca:	68f8      	ldr	r0, [r7, #12]
 800d4cc:	f7ff fb60 	bl	800cb90 <SDMMC_GetCommandResponse>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	461a      	mov	r2, r3
 800d4d4:	7afb      	ldrb	r3, [r7, #11]
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d001      	beq.n	800d4de <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d4da:	2301      	movs	r3, #1
 800d4dc:	e025      	b.n	800d52a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	4a16      	ldr	r2, [pc, #88]	; (800d53c <SDMMC_GetCmdResp6+0xec>)
 800d4e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d4e4:	2100      	movs	r1, #0
 800d4e6:	68f8      	ldr	r0, [r7, #12]
 800d4e8:	f7ff fb5f 	bl	800cbaa <SDMMC_GetResponse>
 800d4ec:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d106      	bne.n	800d506 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	0c1b      	lsrs	r3, r3, #16
 800d4fc:	b29a      	uxth	r2, r3
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800d502:	2300      	movs	r3, #0
 800d504:	e011      	b.n	800d52a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d002      	beq.n	800d516 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d514:	e009      	b.n	800d52a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d002      	beq.n	800d526 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d524:	e001      	b.n	800d52a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d526:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	3720      	adds	r7, #32
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}
 800d532:	bf00      	nop
 800d534:	2000000c 	.word	0x2000000c
 800d538:	10624dd3 	.word	0x10624dd3
 800d53c:	002000c5 	.word	0x002000c5

0800d540 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d540:	b480      	push	{r7}
 800d542:	b085      	sub	sp, #20
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d548:	4b22      	ldr	r3, [pc, #136]	; (800d5d4 <SDMMC_GetCmdResp7+0x94>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4a22      	ldr	r2, [pc, #136]	; (800d5d8 <SDMMC_GetCmdResp7+0x98>)
 800d54e:	fba2 2303 	umull	r2, r3, r2, r3
 800d552:	0a5b      	lsrs	r3, r3, #9
 800d554:	f241 3288 	movw	r2, #5000	; 0x1388
 800d558:	fb02 f303 	mul.w	r3, r2, r3
 800d55c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	1e5a      	subs	r2, r3, #1
 800d562:	60fa      	str	r2, [r7, #12]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d102      	bne.n	800d56e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d568:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d56c:	e02c      	b.n	800d5c8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d572:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d0ef      	beq.n	800d55e <SDMMC_GetCmdResp7+0x1e>
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d584:	2b00      	cmp	r3, #0
 800d586:	d1ea      	bne.n	800d55e <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d58c:	f003 0304 	and.w	r3, r3, #4
 800d590:	2b00      	cmp	r3, #0
 800d592:	d004      	beq.n	800d59e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2204      	movs	r2, #4
 800d598:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d59a:	2304      	movs	r3, #4
 800d59c:	e014      	b.n	800d5c8 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5a2:	f003 0301 	and.w	r3, r3, #1
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d004      	beq.n	800d5b4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2201      	movs	r2, #1
 800d5ae:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	e009      	b.n	800d5c8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d002      	beq.n	800d5c6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2240      	movs	r2, #64	; 0x40
 800d5c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d5c6:	2300      	movs	r3, #0

}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3714      	adds	r7, #20
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d2:	4770      	bx	lr
 800d5d4:	2000000c 	.word	0x2000000c
 800d5d8:	10624dd3 	.word	0x10624dd3

0800d5dc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d5dc:	b480      	push	{r7}
 800d5de:	b085      	sub	sp, #20
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d5e4:	4b11      	ldr	r3, [pc, #68]	; (800d62c <SDMMC_GetCmdError+0x50>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	4a11      	ldr	r2, [pc, #68]	; (800d630 <SDMMC_GetCmdError+0x54>)
 800d5ea:	fba2 2303 	umull	r2, r3, r2, r3
 800d5ee:	0a5b      	lsrs	r3, r3, #9
 800d5f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5f4:	fb02 f303 	mul.w	r3, r2, r3
 800d5f8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	1e5a      	subs	r2, r3, #1
 800d5fe:	60fa      	str	r2, [r7, #12]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d102      	bne.n	800d60a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d604:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d608:	e009      	b.n	800d61e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d60e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d612:	2b00      	cmp	r3, #0
 800d614:	d0f1      	beq.n	800d5fa <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	4a06      	ldr	r2, [pc, #24]	; (800d634 <SDMMC_GetCmdError+0x58>)
 800d61a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800d61c:	2300      	movs	r3, #0
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3714      	adds	r7, #20
 800d622:	46bd      	mov	sp, r7
 800d624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d628:	4770      	bx	lr
 800d62a:	bf00      	nop
 800d62c:	2000000c 	.word	0x2000000c
 800d630:	10624dd3 	.word	0x10624dd3
 800d634:	002000c5 	.word	0x002000c5

0800d638 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d638:	b084      	sub	sp, #16
 800d63a:	b580      	push	{r7, lr}
 800d63c:	b084      	sub	sp, #16
 800d63e:	af00      	add	r7, sp, #0
 800d640:	6078      	str	r0, [r7, #4]
 800d642:	f107 001c 	add.w	r0, r7, #28
 800d646:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	68db      	ldr	r3, [r3, #12]
 800d64e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f001 faf6 	bl	800ec48 <USB_CoreReset>
 800d65c:	4603      	mov	r3, r0
 800d65e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800d660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d662:	2b00      	cmp	r3, #0
 800d664:	d106      	bne.n	800d674 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d66a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	639a      	str	r2, [r3, #56]	; 0x38
 800d672:	e005      	b.n	800d680 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d678:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800d680:	7bfb      	ldrb	r3, [r7, #15]
}
 800d682:	4618      	mov	r0, r3
 800d684:	3710      	adds	r7, #16
 800d686:	46bd      	mov	sp, r7
 800d688:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d68c:	b004      	add	sp, #16
 800d68e:	4770      	bx	lr

0800d690 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d690:	b480      	push	{r7}
 800d692:	b087      	sub	sp, #28
 800d694:	af00      	add	r7, sp, #0
 800d696:	60f8      	str	r0, [r7, #12]
 800d698:	60b9      	str	r1, [r7, #8]
 800d69a:	4613      	mov	r3, r2
 800d69c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d69e:	79fb      	ldrb	r3, [r7, #7]
 800d6a0:	2b02      	cmp	r3, #2
 800d6a2:	d165      	bne.n	800d770 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	4a3e      	ldr	r2, [pc, #248]	; (800d7a0 <USB_SetTurnaroundTime+0x110>)
 800d6a8:	4293      	cmp	r3, r2
 800d6aa:	d906      	bls.n	800d6ba <USB_SetTurnaroundTime+0x2a>
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	4a3d      	ldr	r2, [pc, #244]	; (800d7a4 <USB_SetTurnaroundTime+0x114>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d202      	bcs.n	800d6ba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d6b4:	230f      	movs	r3, #15
 800d6b6:	617b      	str	r3, [r7, #20]
 800d6b8:	e05c      	b.n	800d774 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	4a39      	ldr	r2, [pc, #228]	; (800d7a4 <USB_SetTurnaroundTime+0x114>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d306      	bcc.n	800d6d0 <USB_SetTurnaroundTime+0x40>
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	4a38      	ldr	r2, [pc, #224]	; (800d7a8 <USB_SetTurnaroundTime+0x118>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d202      	bcs.n	800d6d0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d6ca:	230e      	movs	r3, #14
 800d6cc:	617b      	str	r3, [r7, #20]
 800d6ce:	e051      	b.n	800d774 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	4a35      	ldr	r2, [pc, #212]	; (800d7a8 <USB_SetTurnaroundTime+0x118>)
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	d306      	bcc.n	800d6e6 <USB_SetTurnaroundTime+0x56>
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	4a34      	ldr	r2, [pc, #208]	; (800d7ac <USB_SetTurnaroundTime+0x11c>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d202      	bcs.n	800d6e6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d6e0:	230d      	movs	r3, #13
 800d6e2:	617b      	str	r3, [r7, #20]
 800d6e4:	e046      	b.n	800d774 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	4a30      	ldr	r2, [pc, #192]	; (800d7ac <USB_SetTurnaroundTime+0x11c>)
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	d306      	bcc.n	800d6fc <USB_SetTurnaroundTime+0x6c>
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	4a2f      	ldr	r2, [pc, #188]	; (800d7b0 <USB_SetTurnaroundTime+0x120>)
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	d802      	bhi.n	800d6fc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d6f6:	230c      	movs	r3, #12
 800d6f8:	617b      	str	r3, [r7, #20]
 800d6fa:	e03b      	b.n	800d774 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	4a2c      	ldr	r2, [pc, #176]	; (800d7b0 <USB_SetTurnaroundTime+0x120>)
 800d700:	4293      	cmp	r3, r2
 800d702:	d906      	bls.n	800d712 <USB_SetTurnaroundTime+0x82>
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	4a2b      	ldr	r2, [pc, #172]	; (800d7b4 <USB_SetTurnaroundTime+0x124>)
 800d708:	4293      	cmp	r3, r2
 800d70a:	d802      	bhi.n	800d712 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d70c:	230b      	movs	r3, #11
 800d70e:	617b      	str	r3, [r7, #20]
 800d710:	e030      	b.n	800d774 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	4a27      	ldr	r2, [pc, #156]	; (800d7b4 <USB_SetTurnaroundTime+0x124>)
 800d716:	4293      	cmp	r3, r2
 800d718:	d906      	bls.n	800d728 <USB_SetTurnaroundTime+0x98>
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	4a26      	ldr	r2, [pc, #152]	; (800d7b8 <USB_SetTurnaroundTime+0x128>)
 800d71e:	4293      	cmp	r3, r2
 800d720:	d802      	bhi.n	800d728 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d722:	230a      	movs	r3, #10
 800d724:	617b      	str	r3, [r7, #20]
 800d726:	e025      	b.n	800d774 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	4a23      	ldr	r2, [pc, #140]	; (800d7b8 <USB_SetTurnaroundTime+0x128>)
 800d72c:	4293      	cmp	r3, r2
 800d72e:	d906      	bls.n	800d73e <USB_SetTurnaroundTime+0xae>
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	4a22      	ldr	r2, [pc, #136]	; (800d7bc <USB_SetTurnaroundTime+0x12c>)
 800d734:	4293      	cmp	r3, r2
 800d736:	d202      	bcs.n	800d73e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d738:	2309      	movs	r3, #9
 800d73a:	617b      	str	r3, [r7, #20]
 800d73c:	e01a      	b.n	800d774 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	4a1e      	ldr	r2, [pc, #120]	; (800d7bc <USB_SetTurnaroundTime+0x12c>)
 800d742:	4293      	cmp	r3, r2
 800d744:	d306      	bcc.n	800d754 <USB_SetTurnaroundTime+0xc4>
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	4a1d      	ldr	r2, [pc, #116]	; (800d7c0 <USB_SetTurnaroundTime+0x130>)
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d802      	bhi.n	800d754 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d74e:	2308      	movs	r3, #8
 800d750:	617b      	str	r3, [r7, #20]
 800d752:	e00f      	b.n	800d774 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	4a1a      	ldr	r2, [pc, #104]	; (800d7c0 <USB_SetTurnaroundTime+0x130>)
 800d758:	4293      	cmp	r3, r2
 800d75a:	d906      	bls.n	800d76a <USB_SetTurnaroundTime+0xda>
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	4a19      	ldr	r2, [pc, #100]	; (800d7c4 <USB_SetTurnaroundTime+0x134>)
 800d760:	4293      	cmp	r3, r2
 800d762:	d202      	bcs.n	800d76a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d764:	2307      	movs	r3, #7
 800d766:	617b      	str	r3, [r7, #20]
 800d768:	e004      	b.n	800d774 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d76a:	2306      	movs	r3, #6
 800d76c:	617b      	str	r3, [r7, #20]
 800d76e:	e001      	b.n	800d774 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d770:	2309      	movs	r3, #9
 800d772:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	68db      	ldr	r3, [r3, #12]
 800d778:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	68da      	ldr	r2, [r3, #12]
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	029b      	lsls	r3, r3, #10
 800d788:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d78c:	431a      	orrs	r2, r3
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d792:	2300      	movs	r3, #0
}
 800d794:	4618      	mov	r0, r3
 800d796:	371c      	adds	r7, #28
 800d798:	46bd      	mov	sp, r7
 800d79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79e:	4770      	bx	lr
 800d7a0:	00d8acbf 	.word	0x00d8acbf
 800d7a4:	00e4e1c0 	.word	0x00e4e1c0
 800d7a8:	00f42400 	.word	0x00f42400
 800d7ac:	01067380 	.word	0x01067380
 800d7b0:	011a499f 	.word	0x011a499f
 800d7b4:	01312cff 	.word	0x01312cff
 800d7b8:	014ca43f 	.word	0x014ca43f
 800d7bc:	016e3600 	.word	0x016e3600
 800d7c0:	01a6ab1f 	.word	0x01a6ab1f
 800d7c4:	01e84800 	.word	0x01e84800

0800d7c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b083      	sub	sp, #12
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	689b      	ldr	r3, [r3, #8]
 800d7d4:	f043 0201 	orr.w	r2, r3, #1
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d7dc:	2300      	movs	r3, #0
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	370c      	adds	r7, #12
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e8:	4770      	bx	lr

0800d7ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d7ea:	b480      	push	{r7}
 800d7ec:	b083      	sub	sp, #12
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	689b      	ldr	r3, [r3, #8]
 800d7f6:	f023 0201 	bic.w	r2, r3, #1
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d7fe:	2300      	movs	r3, #0
}
 800d800:	4618      	mov	r0, r3
 800d802:	370c      	adds	r7, #12
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr

0800d80c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b084      	sub	sp, #16
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	460b      	mov	r3, r1
 800d816:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d818:	2300      	movs	r3, #0
 800d81a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	68db      	ldr	r3, [r3, #12]
 800d820:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d828:	78fb      	ldrb	r3, [r7, #3]
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	d115      	bne.n	800d85a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	68db      	ldr	r3, [r3, #12]
 800d832:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d83a:	2001      	movs	r0, #1
 800d83c:	f7f5 f93c 	bl	8002ab8 <HAL_Delay>
      ms++;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	3301      	adds	r3, #1
 800d844:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f001 f985 	bl	800eb56 <USB_GetMode>
 800d84c:	4603      	mov	r3, r0
 800d84e:	2b01      	cmp	r3, #1
 800d850:	d01e      	beq.n	800d890 <USB_SetCurrentMode+0x84>
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2b31      	cmp	r3, #49	; 0x31
 800d856:	d9f0      	bls.n	800d83a <USB_SetCurrentMode+0x2e>
 800d858:	e01a      	b.n	800d890 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d85a:	78fb      	ldrb	r3, [r7, #3]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d115      	bne.n	800d88c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	68db      	ldr	r3, [r3, #12]
 800d864:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d86c:	2001      	movs	r0, #1
 800d86e:	f7f5 f923 	bl	8002ab8 <HAL_Delay>
      ms++;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	3301      	adds	r3, #1
 800d876:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f001 f96c 	bl	800eb56 <USB_GetMode>
 800d87e:	4603      	mov	r3, r0
 800d880:	2b00      	cmp	r3, #0
 800d882:	d005      	beq.n	800d890 <USB_SetCurrentMode+0x84>
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	2b31      	cmp	r3, #49	; 0x31
 800d888:	d9f0      	bls.n	800d86c <USB_SetCurrentMode+0x60>
 800d88a:	e001      	b.n	800d890 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d88c:	2301      	movs	r3, #1
 800d88e:	e005      	b.n	800d89c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	2b32      	cmp	r3, #50	; 0x32
 800d894:	d101      	bne.n	800d89a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d896:	2301      	movs	r3, #1
 800d898:	e000      	b.n	800d89c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d89a:	2300      	movs	r3, #0
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	3710      	adds	r7, #16
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d8a4:	b084      	sub	sp, #16
 800d8a6:	b580      	push	{r7, lr}
 800d8a8:	b086      	sub	sp, #24
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	6078      	str	r0, [r7, #4]
 800d8ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d8b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d8be:	2300      	movs	r3, #0
 800d8c0:	613b      	str	r3, [r7, #16]
 800d8c2:	e009      	b.n	800d8d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d8c4:	687a      	ldr	r2, [r7, #4]
 800d8c6:	693b      	ldr	r3, [r7, #16]
 800d8c8:	3340      	adds	r3, #64	; 0x40
 800d8ca:	009b      	lsls	r3, r3, #2
 800d8cc:	4413      	add	r3, r2
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d8d2:	693b      	ldr	r3, [r7, #16]
 800d8d4:	3301      	adds	r3, #1
 800d8d6:	613b      	str	r3, [r7, #16]
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	2b0e      	cmp	r3, #14
 800d8dc:	d9f2      	bls.n	800d8c4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d8de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d11c      	bne.n	800d91e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8ea:	685b      	ldr	r3, [r3, #4]
 800d8ec:	68fa      	ldr	r2, [r7, #12]
 800d8ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d8f2:	f043 0302 	orr.w	r3, r3, #2
 800d8f6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	601a      	str	r2, [r3, #0]
 800d91c:	e005      	b.n	800d92a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d922:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d930:	461a      	mov	r2, r3
 800d932:	2300      	movs	r3, #0
 800d934:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d93c:	4619      	mov	r1, r3
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d944:	461a      	mov	r2, r3
 800d946:	680b      	ldr	r3, [r1, #0]
 800d948:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d94a:	2103      	movs	r1, #3
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f000 f959 	bl	800dc04 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d952:	2110      	movs	r1, #16
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f000 f8f1 	bl	800db3c <USB_FlushTxFifo>
 800d95a:	4603      	mov	r3, r0
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d001      	beq.n	800d964 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800d960:	2301      	movs	r3, #1
 800d962:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	f000 f91d 	bl	800dba4 <USB_FlushRxFifo>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d001      	beq.n	800d974 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800d970:	2301      	movs	r3, #1
 800d972:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d97a:	461a      	mov	r2, r3
 800d97c:	2300      	movs	r3, #0
 800d97e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d986:	461a      	mov	r2, r3
 800d988:	2300      	movs	r3, #0
 800d98a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d992:	461a      	mov	r2, r3
 800d994:	2300      	movs	r3, #0
 800d996:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d998:	2300      	movs	r3, #0
 800d99a:	613b      	str	r3, [r7, #16]
 800d99c:	e043      	b.n	800da26 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	015a      	lsls	r2, r3, #5
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	4413      	add	r3, r2
 800d9a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d9b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d9b4:	d118      	bne.n	800d9e8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d10a      	bne.n	800d9d2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d9bc:	693b      	ldr	r3, [r7, #16]
 800d9be:	015a      	lsls	r2, r3, #5
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	4413      	add	r3, r2
 800d9c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9c8:	461a      	mov	r2, r3
 800d9ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d9ce:	6013      	str	r3, [r2, #0]
 800d9d0:	e013      	b.n	800d9fa <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	015a      	lsls	r2, r3, #5
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	4413      	add	r3, r2
 800d9da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9de:	461a      	mov	r2, r3
 800d9e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d9e4:	6013      	str	r3, [r2, #0]
 800d9e6:	e008      	b.n	800d9fa <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	015a      	lsls	r2, r3, #5
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	4413      	add	r3, r2
 800d9f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d9fa:	693b      	ldr	r3, [r7, #16]
 800d9fc:	015a      	lsls	r2, r3, #5
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	4413      	add	r3, r2
 800da02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da06:	461a      	mov	r2, r3
 800da08:	2300      	movs	r3, #0
 800da0a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	015a      	lsls	r2, r3, #5
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	4413      	add	r3, r2
 800da14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da18:	461a      	mov	r2, r3
 800da1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800da1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	3301      	adds	r3, #1
 800da24:	613b      	str	r3, [r7, #16]
 800da26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da28:	693a      	ldr	r2, [r7, #16]
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d3b7      	bcc.n	800d99e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800da2e:	2300      	movs	r3, #0
 800da30:	613b      	str	r3, [r7, #16]
 800da32:	e043      	b.n	800dabc <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800da34:	693b      	ldr	r3, [r7, #16]
 800da36:	015a      	lsls	r2, r3, #5
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	4413      	add	r3, r2
 800da3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800da46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800da4a:	d118      	bne.n	800da7e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d10a      	bne.n	800da68 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	015a      	lsls	r2, r3, #5
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	4413      	add	r3, r2
 800da5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da5e:	461a      	mov	r2, r3
 800da60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800da64:	6013      	str	r3, [r2, #0]
 800da66:	e013      	b.n	800da90 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	015a      	lsls	r2, r3, #5
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	4413      	add	r3, r2
 800da70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da74:	461a      	mov	r2, r3
 800da76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800da7a:	6013      	str	r3, [r2, #0]
 800da7c:	e008      	b.n	800da90 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	015a      	lsls	r2, r3, #5
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	4413      	add	r3, r2
 800da86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da8a:	461a      	mov	r2, r3
 800da8c:	2300      	movs	r3, #0
 800da8e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	015a      	lsls	r2, r3, #5
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	4413      	add	r3, r2
 800da98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da9c:	461a      	mov	r2, r3
 800da9e:	2300      	movs	r3, #0
 800daa0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	015a      	lsls	r2, r3, #5
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	4413      	add	r3, r2
 800daaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daae:	461a      	mov	r2, r3
 800dab0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dab4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dab6:	693b      	ldr	r3, [r7, #16]
 800dab8:	3301      	adds	r3, #1
 800daba:	613b      	str	r3, [r7, #16]
 800dabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dabe:	693a      	ldr	r2, [r7, #16]
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d3b7      	bcc.n	800da34 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800daca:	691b      	ldr	r3, [r3, #16]
 800dacc:	68fa      	ldr	r2, [r7, #12]
 800dace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dad2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dad6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2200      	movs	r2, #0
 800dadc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800dae4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	699b      	ldr	r3, [r3, #24]
 800daea:	f043 0210 	orr.w	r2, r3, #16
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	699a      	ldr	r2, [r3, #24]
 800daf6:	4b10      	ldr	r3, [pc, #64]	; (800db38 <USB_DevInit+0x294>)
 800daf8:	4313      	orrs	r3, r2
 800dafa:	687a      	ldr	r2, [r7, #4]
 800dafc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dafe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db00:	2b00      	cmp	r3, #0
 800db02:	d005      	beq.n	800db10 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	699b      	ldr	r3, [r3, #24]
 800db08:	f043 0208 	orr.w	r2, r3, #8
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800db10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db12:	2b01      	cmp	r3, #1
 800db14:	d107      	bne.n	800db26 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	699b      	ldr	r3, [r3, #24]
 800db1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db1e:	f043 0304 	orr.w	r3, r3, #4
 800db22:	687a      	ldr	r2, [r7, #4]
 800db24:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800db26:	7dfb      	ldrb	r3, [r7, #23]
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3718      	adds	r7, #24
 800db2c:	46bd      	mov	sp, r7
 800db2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800db32:	b004      	add	sp, #16
 800db34:	4770      	bx	lr
 800db36:	bf00      	nop
 800db38:	803c3800 	.word	0x803c3800

0800db3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800db3c:	b480      	push	{r7}
 800db3e:	b085      	sub	sp, #20
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800db46:	2300      	movs	r3, #0
 800db48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	3301      	adds	r3, #1
 800db4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	4a13      	ldr	r2, [pc, #76]	; (800dba0 <USB_FlushTxFifo+0x64>)
 800db54:	4293      	cmp	r3, r2
 800db56:	d901      	bls.n	800db5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800db58:	2303      	movs	r3, #3
 800db5a:	e01b      	b.n	800db94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	691b      	ldr	r3, [r3, #16]
 800db60:	2b00      	cmp	r3, #0
 800db62:	daf2      	bge.n	800db4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800db64:	2300      	movs	r3, #0
 800db66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	019b      	lsls	r3, r3, #6
 800db6c:	f043 0220 	orr.w	r2, r3, #32
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	3301      	adds	r3, #1
 800db78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	4a08      	ldr	r2, [pc, #32]	; (800dba0 <USB_FlushTxFifo+0x64>)
 800db7e:	4293      	cmp	r3, r2
 800db80:	d901      	bls.n	800db86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800db82:	2303      	movs	r3, #3
 800db84:	e006      	b.n	800db94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	691b      	ldr	r3, [r3, #16]
 800db8a:	f003 0320 	and.w	r3, r3, #32
 800db8e:	2b20      	cmp	r3, #32
 800db90:	d0f0      	beq.n	800db74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800db92:	2300      	movs	r3, #0
}
 800db94:	4618      	mov	r0, r3
 800db96:	3714      	adds	r7, #20
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr
 800dba0:	00030d40 	.word	0x00030d40

0800dba4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dba4:	b480      	push	{r7}
 800dba6:	b085      	sub	sp, #20
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dbac:	2300      	movs	r3, #0
 800dbae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	4a11      	ldr	r2, [pc, #68]	; (800dc00 <USB_FlushRxFifo+0x5c>)
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	d901      	bls.n	800dbc2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800dbbe:	2303      	movs	r3, #3
 800dbc0:	e018      	b.n	800dbf4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	691b      	ldr	r3, [r3, #16]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	daf2      	bge.n	800dbb0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2210      	movs	r2, #16
 800dbd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	4a08      	ldr	r2, [pc, #32]	; (800dc00 <USB_FlushRxFifo+0x5c>)
 800dbde:	4293      	cmp	r3, r2
 800dbe0:	d901      	bls.n	800dbe6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800dbe2:	2303      	movs	r3, #3
 800dbe4:	e006      	b.n	800dbf4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	691b      	ldr	r3, [r3, #16]
 800dbea:	f003 0310 	and.w	r3, r3, #16
 800dbee:	2b10      	cmp	r3, #16
 800dbf0:	d0f0      	beq.n	800dbd4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800dbf2:	2300      	movs	r3, #0
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3714      	adds	r7, #20
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfe:	4770      	bx	lr
 800dc00:	00030d40 	.word	0x00030d40

0800dc04 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800dc04:	b480      	push	{r7}
 800dc06:	b085      	sub	sp, #20
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
 800dc0c:	460b      	mov	r3, r1
 800dc0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc1a:	681a      	ldr	r2, [r3, #0]
 800dc1c:	78fb      	ldrb	r3, [r7, #3]
 800dc1e:	68f9      	ldr	r1, [r7, #12]
 800dc20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc24:	4313      	orrs	r3, r2
 800dc26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dc28:	2300      	movs	r3, #0
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3714      	adds	r7, #20
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc34:	4770      	bx	lr

0800dc36 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800dc36:	b480      	push	{r7}
 800dc38:	b087      	sub	sp, #28
 800dc3a:	af00      	add	r7, sp, #0
 800dc3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc48:	689b      	ldr	r3, [r3, #8]
 800dc4a:	f003 0306 	and.w	r3, r3, #6
 800dc4e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	2b02      	cmp	r3, #2
 800dc54:	d002      	beq.n	800dc5c <USB_GetDevSpeed+0x26>
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	2b06      	cmp	r3, #6
 800dc5a:	d102      	bne.n	800dc62 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800dc5c:	2302      	movs	r3, #2
 800dc5e:	75fb      	strb	r3, [r7, #23]
 800dc60:	e001      	b.n	800dc66 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800dc62:	230f      	movs	r3, #15
 800dc64:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800dc66:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	371c      	adds	r7, #28
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc72:	4770      	bx	lr

0800dc74 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dc74:	b480      	push	{r7}
 800dc76:	b085      	sub	sp, #20
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	785b      	ldrb	r3, [r3, #1]
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d13a      	bne.n	800dd06 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc96:	69da      	ldr	r2, [r3, #28]
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	781b      	ldrb	r3, [r3, #0]
 800dc9c:	f003 030f 	and.w	r3, r3, #15
 800dca0:	2101      	movs	r1, #1
 800dca2:	fa01 f303 	lsl.w	r3, r1, r3
 800dca6:	b29b      	uxth	r3, r3
 800dca8:	68f9      	ldr	r1, [r7, #12]
 800dcaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dcae:	4313      	orrs	r3, r2
 800dcb0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800dcb2:	68bb      	ldr	r3, [r7, #8]
 800dcb4:	015a      	lsls	r2, r3, #5
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	4413      	add	r3, r2
 800dcba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d155      	bne.n	800dd74 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	015a      	lsls	r2, r3, #5
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	4413      	add	r3, r2
 800dcd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcd4:	681a      	ldr	r2, [r3, #0]
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	68db      	ldr	r3, [r3, #12]
 800dcda:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	791b      	ldrb	r3, [r3, #4]
 800dce2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dce4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	059b      	lsls	r3, r3, #22
 800dcea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dcec:	4313      	orrs	r3, r2
 800dcee:	68ba      	ldr	r2, [r7, #8]
 800dcf0:	0151      	lsls	r1, r2, #5
 800dcf2:	68fa      	ldr	r2, [r7, #12]
 800dcf4:	440a      	add	r2, r1
 800dcf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dcfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dcfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd02:	6013      	str	r3, [r2, #0]
 800dd04:	e036      	b.n	800dd74 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd0c:	69da      	ldr	r2, [r3, #28]
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	781b      	ldrb	r3, [r3, #0]
 800dd12:	f003 030f 	and.w	r3, r3, #15
 800dd16:	2101      	movs	r1, #1
 800dd18:	fa01 f303 	lsl.w	r3, r1, r3
 800dd1c:	041b      	lsls	r3, r3, #16
 800dd1e:	68f9      	ldr	r1, [r7, #12]
 800dd20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dd24:	4313      	orrs	r3, r2
 800dd26:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	015a      	lsls	r2, r3, #5
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	4413      	add	r3, r2
 800dd30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d11a      	bne.n	800dd74 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	015a      	lsls	r2, r3, #5
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	4413      	add	r3, r2
 800dd46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd4a:	681a      	ldr	r2, [r3, #0]
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	68db      	ldr	r3, [r3, #12]
 800dd50:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	791b      	ldrb	r3, [r3, #4]
 800dd58:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dd5a:	430b      	orrs	r3, r1
 800dd5c:	4313      	orrs	r3, r2
 800dd5e:	68ba      	ldr	r2, [r7, #8]
 800dd60:	0151      	lsls	r1, r2, #5
 800dd62:	68fa      	ldr	r2, [r7, #12]
 800dd64:	440a      	add	r2, r1
 800dd66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dd6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd72:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800dd74:	2300      	movs	r3, #0
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3714      	adds	r7, #20
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd80:	4770      	bx	lr
	...

0800dd84 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b085      	sub	sp, #20
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	781b      	ldrb	r3, [r3, #0]
 800dd96:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	785b      	ldrb	r3, [r3, #1]
 800dd9c:	2b01      	cmp	r3, #1
 800dd9e:	d161      	bne.n	800de64 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	015a      	lsls	r2, r3, #5
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	4413      	add	r3, r2
 800dda8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ddb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ddb6:	d11f      	bne.n	800ddf8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	015a      	lsls	r2, r3, #5
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	4413      	add	r3, r2
 800ddc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	68ba      	ldr	r2, [r7, #8]
 800ddc8:	0151      	lsls	r1, r2, #5
 800ddca:	68fa      	ldr	r2, [r7, #12]
 800ddcc:	440a      	add	r2, r1
 800ddce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ddd6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	015a      	lsls	r2, r3, #5
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	4413      	add	r3, r2
 800dde0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	68ba      	ldr	r2, [r7, #8]
 800dde8:	0151      	lsls	r1, r2, #5
 800ddea:	68fa      	ldr	r2, [r7, #12]
 800ddec:	440a      	add	r2, r1
 800ddee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddf2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ddf6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	781b      	ldrb	r3, [r3, #0]
 800de04:	f003 030f 	and.w	r3, r3, #15
 800de08:	2101      	movs	r1, #1
 800de0a:	fa01 f303 	lsl.w	r3, r1, r3
 800de0e:	b29b      	uxth	r3, r3
 800de10:	43db      	mvns	r3, r3
 800de12:	68f9      	ldr	r1, [r7, #12]
 800de14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de18:	4013      	ands	r3, r2
 800de1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de22:	69da      	ldr	r2, [r3, #28]
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	f003 030f 	and.w	r3, r3, #15
 800de2c:	2101      	movs	r1, #1
 800de2e:	fa01 f303 	lsl.w	r3, r1, r3
 800de32:	b29b      	uxth	r3, r3
 800de34:	43db      	mvns	r3, r3
 800de36:	68f9      	ldr	r1, [r7, #12]
 800de38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de3c:	4013      	ands	r3, r2
 800de3e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	015a      	lsls	r2, r3, #5
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	4413      	add	r3, r2
 800de48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de4c:	681a      	ldr	r2, [r3, #0]
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	0159      	lsls	r1, r3, #5
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	440b      	add	r3, r1
 800de56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de5a:	4619      	mov	r1, r3
 800de5c:	4b35      	ldr	r3, [pc, #212]	; (800df34 <USB_DeactivateEndpoint+0x1b0>)
 800de5e:	4013      	ands	r3, r2
 800de60:	600b      	str	r3, [r1, #0]
 800de62:	e060      	b.n	800df26 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	015a      	lsls	r2, r3, #5
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	4413      	add	r3, r2
 800de6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de7a:	d11f      	bne.n	800debc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	015a      	lsls	r2, r3, #5
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	4413      	add	r3, r2
 800de84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	68ba      	ldr	r2, [r7, #8]
 800de8c:	0151      	lsls	r1, r2, #5
 800de8e:	68fa      	ldr	r2, [r7, #12]
 800de90:	440a      	add	r2, r1
 800de92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800de9a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	015a      	lsls	r2, r3, #5
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	4413      	add	r3, r2
 800dea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	68ba      	ldr	r2, [r7, #8]
 800deac:	0151      	lsls	r1, r2, #5
 800deae:	68fa      	ldr	r2, [r7, #12]
 800deb0:	440a      	add	r2, r1
 800deb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800deb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800deba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dec2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	f003 030f 	and.w	r3, r3, #15
 800decc:	2101      	movs	r1, #1
 800dece:	fa01 f303 	lsl.w	r3, r1, r3
 800ded2:	041b      	lsls	r3, r3, #16
 800ded4:	43db      	mvns	r3, r3
 800ded6:	68f9      	ldr	r1, [r7, #12]
 800ded8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dedc:	4013      	ands	r3, r2
 800dede:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dee6:	69da      	ldr	r2, [r3, #28]
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	781b      	ldrb	r3, [r3, #0]
 800deec:	f003 030f 	and.w	r3, r3, #15
 800def0:	2101      	movs	r1, #1
 800def2:	fa01 f303 	lsl.w	r3, r1, r3
 800def6:	041b      	lsls	r3, r3, #16
 800def8:	43db      	mvns	r3, r3
 800defa:	68f9      	ldr	r1, [r7, #12]
 800defc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800df00:	4013      	ands	r3, r2
 800df02:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	015a      	lsls	r2, r3, #5
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	4413      	add	r3, r2
 800df0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df10:	681a      	ldr	r2, [r3, #0]
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	0159      	lsls	r1, r3, #5
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	440b      	add	r3, r1
 800df1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df1e:	4619      	mov	r1, r3
 800df20:	4b05      	ldr	r3, [pc, #20]	; (800df38 <USB_DeactivateEndpoint+0x1b4>)
 800df22:	4013      	ands	r3, r2
 800df24:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800df26:	2300      	movs	r3, #0
}
 800df28:	4618      	mov	r0, r3
 800df2a:	3714      	adds	r7, #20
 800df2c:	46bd      	mov	sp, r7
 800df2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df32:	4770      	bx	lr
 800df34:	ec337800 	.word	0xec337800
 800df38:	eff37800 	.word	0xeff37800

0800df3c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b086      	sub	sp, #24
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
 800df44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	785b      	ldrb	r3, [r3, #1]
 800df54:	2b01      	cmp	r3, #1
 800df56:	f040 810a 	bne.w	800e16e <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	699b      	ldr	r3, [r3, #24]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d132      	bne.n	800dfc8 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	015a      	lsls	r2, r3, #5
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	4413      	add	r3, r2
 800df6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df6e:	691b      	ldr	r3, [r3, #16]
 800df70:	693a      	ldr	r2, [r7, #16]
 800df72:	0151      	lsls	r1, r2, #5
 800df74:	697a      	ldr	r2, [r7, #20]
 800df76:	440a      	add	r2, r1
 800df78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800df80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800df84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	015a      	lsls	r2, r3, #5
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	4413      	add	r3, r2
 800df8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df92:	691b      	ldr	r3, [r3, #16]
 800df94:	693a      	ldr	r2, [r7, #16]
 800df96:	0151      	lsls	r1, r2, #5
 800df98:	697a      	ldr	r2, [r7, #20]
 800df9a:	440a      	add	r2, r1
 800df9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dfa4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	015a      	lsls	r2, r3, #5
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	4413      	add	r3, r2
 800dfae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfb2:	691b      	ldr	r3, [r3, #16]
 800dfb4:	693a      	ldr	r2, [r7, #16]
 800dfb6:	0151      	lsls	r1, r2, #5
 800dfb8:	697a      	ldr	r2, [r7, #20]
 800dfba:	440a      	add	r2, r1
 800dfbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfc0:	0cdb      	lsrs	r3, r3, #19
 800dfc2:	04db      	lsls	r3, r3, #19
 800dfc4:	6113      	str	r3, [r2, #16]
 800dfc6:	e074      	b.n	800e0b2 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	015a      	lsls	r2, r3, #5
 800dfcc:	697b      	ldr	r3, [r7, #20]
 800dfce:	4413      	add	r3, r2
 800dfd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfd4:	691b      	ldr	r3, [r3, #16]
 800dfd6:	693a      	ldr	r2, [r7, #16]
 800dfd8:	0151      	lsls	r1, r2, #5
 800dfda:	697a      	ldr	r2, [r7, #20]
 800dfdc:	440a      	add	r2, r1
 800dfde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfe2:	0cdb      	lsrs	r3, r3, #19
 800dfe4:	04db      	lsls	r3, r3, #19
 800dfe6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	015a      	lsls	r2, r3, #5
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	4413      	add	r3, r2
 800dff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dff4:	691b      	ldr	r3, [r3, #16]
 800dff6:	693a      	ldr	r2, [r7, #16]
 800dff8:	0151      	lsls	r1, r2, #5
 800dffa:	697a      	ldr	r2, [r7, #20]
 800dffc:	440a      	add	r2, r1
 800dffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e002:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e006:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e00a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	015a      	lsls	r2, r3, #5
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	4413      	add	r3, r2
 800e014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e018:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	6999      	ldr	r1, [r3, #24]
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	68db      	ldr	r3, [r3, #12]
 800e022:	440b      	add	r3, r1
 800e024:	1e59      	subs	r1, r3, #1
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	68db      	ldr	r3, [r3, #12]
 800e02a:	fbb1 f3f3 	udiv	r3, r1, r3
 800e02e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e030:	4b9e      	ldr	r3, [pc, #632]	; (800e2ac <USB_EPStartXfer+0x370>)
 800e032:	400b      	ands	r3, r1
 800e034:	6939      	ldr	r1, [r7, #16]
 800e036:	0148      	lsls	r0, r1, #5
 800e038:	6979      	ldr	r1, [r7, #20]
 800e03a:	4401      	add	r1, r0
 800e03c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e040:	4313      	orrs	r3, r2
 800e042:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	015a      	lsls	r2, r3, #5
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	4413      	add	r3, r2
 800e04c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e050:	691a      	ldr	r2, [r3, #16]
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	699b      	ldr	r3, [r3, #24]
 800e056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e05a:	6939      	ldr	r1, [r7, #16]
 800e05c:	0148      	lsls	r0, r1, #5
 800e05e:	6979      	ldr	r1, [r7, #20]
 800e060:	4401      	add	r1, r0
 800e062:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e066:	4313      	orrs	r3, r2
 800e068:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	791b      	ldrb	r3, [r3, #4]
 800e06e:	2b01      	cmp	r3, #1
 800e070:	d11f      	bne.n	800e0b2 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	015a      	lsls	r2, r3, #5
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	4413      	add	r3, r2
 800e07a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e07e:	691b      	ldr	r3, [r3, #16]
 800e080:	693a      	ldr	r2, [r7, #16]
 800e082:	0151      	lsls	r1, r2, #5
 800e084:	697a      	ldr	r2, [r7, #20]
 800e086:	440a      	add	r2, r1
 800e088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e08c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e090:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	015a      	lsls	r2, r3, #5
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	4413      	add	r3, r2
 800e09a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e09e:	691b      	ldr	r3, [r3, #16]
 800e0a0:	693a      	ldr	r2, [r7, #16]
 800e0a2:	0151      	lsls	r1, r2, #5
 800e0a4:	697a      	ldr	r2, [r7, #20]
 800e0a6:	440a      	add	r2, r1
 800e0a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e0b0:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	015a      	lsls	r2, r3, #5
 800e0b6:	697b      	ldr	r3, [r7, #20]
 800e0b8:	4413      	add	r3, r2
 800e0ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	693a      	ldr	r2, [r7, #16]
 800e0c2:	0151      	lsls	r1, r2, #5
 800e0c4:	697a      	ldr	r2, [r7, #20]
 800e0c6:	440a      	add	r2, r1
 800e0c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e0d0:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	791b      	ldrb	r3, [r3, #4]
 800e0d6:	2b01      	cmp	r3, #1
 800e0d8:	d015      	beq.n	800e106 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	699b      	ldr	r3, [r3, #24]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	f000 8106 	beq.w	800e2f0 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	781b      	ldrb	r3, [r3, #0]
 800e0f0:	f003 030f 	and.w	r3, r3, #15
 800e0f4:	2101      	movs	r1, #1
 800e0f6:	fa01 f303 	lsl.w	r3, r1, r3
 800e0fa:	6979      	ldr	r1, [r7, #20]
 800e0fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e100:	4313      	orrs	r3, r2
 800e102:	634b      	str	r3, [r1, #52]	; 0x34
 800e104:	e0f4      	b.n	800e2f0 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e10c:	689b      	ldr	r3, [r3, #8]
 800e10e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e112:	2b00      	cmp	r3, #0
 800e114:	d110      	bne.n	800e138 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	015a      	lsls	r2, r3, #5
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	4413      	add	r3, r2
 800e11e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	693a      	ldr	r2, [r7, #16]
 800e126:	0151      	lsls	r1, r2, #5
 800e128:	697a      	ldr	r2, [r7, #20]
 800e12a:	440a      	add	r2, r1
 800e12c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e130:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e134:	6013      	str	r3, [r2, #0]
 800e136:	e00f      	b.n	800e158 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	015a      	lsls	r2, r3, #5
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	4413      	add	r3, r2
 800e140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	693a      	ldr	r2, [r7, #16]
 800e148:	0151      	lsls	r1, r2, #5
 800e14a:	697a      	ldr	r2, [r7, #20]
 800e14c:	440a      	add	r2, r1
 800e14e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e156:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	6919      	ldr	r1, [r3, #16]
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	781a      	ldrb	r2, [r3, #0]
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	699b      	ldr	r3, [r3, #24]
 800e164:	b29b      	uxth	r3, r3
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f000 fa94 	bl	800e694 <USB_WritePacket>
 800e16c:	e0c0      	b.n	800e2f0 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	015a      	lsls	r2, r3, #5
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	4413      	add	r3, r2
 800e176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e17a:	691b      	ldr	r3, [r3, #16]
 800e17c:	693a      	ldr	r2, [r7, #16]
 800e17e:	0151      	lsls	r1, r2, #5
 800e180:	697a      	ldr	r2, [r7, #20]
 800e182:	440a      	add	r2, r1
 800e184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e188:	0cdb      	lsrs	r3, r3, #19
 800e18a:	04db      	lsls	r3, r3, #19
 800e18c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	015a      	lsls	r2, r3, #5
 800e192:	697b      	ldr	r3, [r7, #20]
 800e194:	4413      	add	r3, r2
 800e196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e19a:	691b      	ldr	r3, [r3, #16]
 800e19c:	693a      	ldr	r2, [r7, #16]
 800e19e:	0151      	lsls	r1, r2, #5
 800e1a0:	697a      	ldr	r2, [r7, #20]
 800e1a2:	440a      	add	r2, r1
 800e1a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e1a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e1ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e1b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	699b      	ldr	r3, [r3, #24]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d123      	bne.n	800e202 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e1ba:	693b      	ldr	r3, [r7, #16]
 800e1bc:	015a      	lsls	r2, r3, #5
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	4413      	add	r3, r2
 800e1c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1c6:	691a      	ldr	r2, [r3, #16]
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	68db      	ldr	r3, [r3, #12]
 800e1cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e1d0:	6939      	ldr	r1, [r7, #16]
 800e1d2:	0148      	lsls	r0, r1, #5
 800e1d4:	6979      	ldr	r1, [r7, #20]
 800e1d6:	4401      	add	r1, r0
 800e1d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e1dc:	4313      	orrs	r3, r2
 800e1de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e1e0:	693b      	ldr	r3, [r7, #16]
 800e1e2:	015a      	lsls	r2, r3, #5
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	4413      	add	r3, r2
 800e1e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1ec:	691b      	ldr	r3, [r3, #16]
 800e1ee:	693a      	ldr	r2, [r7, #16]
 800e1f0:	0151      	lsls	r1, r2, #5
 800e1f2:	697a      	ldr	r2, [r7, #20]
 800e1f4:	440a      	add	r2, r1
 800e1f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e1fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e1fe:	6113      	str	r3, [r2, #16]
 800e200:	e037      	b.n	800e272 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	699a      	ldr	r2, [r3, #24]
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	68db      	ldr	r3, [r3, #12]
 800e20a:	4413      	add	r3, r2
 800e20c:	1e5a      	subs	r2, r3, #1
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	68db      	ldr	r3, [r3, #12]
 800e212:	fbb2 f3f3 	udiv	r3, r2, r3
 800e216:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	68db      	ldr	r3, [r3, #12]
 800e21c:	89fa      	ldrh	r2, [r7, #14]
 800e21e:	fb03 f202 	mul.w	r2, r3, r2
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	015a      	lsls	r2, r3, #5
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	4413      	add	r3, r2
 800e22e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e232:	691a      	ldr	r2, [r3, #16]
 800e234:	89fb      	ldrh	r3, [r7, #14]
 800e236:	04d9      	lsls	r1, r3, #19
 800e238:	4b1c      	ldr	r3, [pc, #112]	; (800e2ac <USB_EPStartXfer+0x370>)
 800e23a:	400b      	ands	r3, r1
 800e23c:	6939      	ldr	r1, [r7, #16]
 800e23e:	0148      	lsls	r0, r1, #5
 800e240:	6979      	ldr	r1, [r7, #20]
 800e242:	4401      	add	r1, r0
 800e244:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e248:	4313      	orrs	r3, r2
 800e24a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	015a      	lsls	r2, r3, #5
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	4413      	add	r3, r2
 800e254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e258:	691a      	ldr	r2, [r3, #16]
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	69db      	ldr	r3, [r3, #28]
 800e25e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e262:	6939      	ldr	r1, [r7, #16]
 800e264:	0148      	lsls	r0, r1, #5
 800e266:	6979      	ldr	r1, [r7, #20]
 800e268:	4401      	add	r1, r0
 800e26a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e26e:	4313      	orrs	r3, r2
 800e270:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	791b      	ldrb	r3, [r3, #4]
 800e276:	2b01      	cmp	r3, #1
 800e278:	d12a      	bne.n	800e2d0 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e280:	689b      	ldr	r3, [r3, #8]
 800e282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e286:	2b00      	cmp	r3, #0
 800e288:	d112      	bne.n	800e2b0 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	015a      	lsls	r2, r3, #5
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	4413      	add	r3, r2
 800e292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	693a      	ldr	r2, [r7, #16]
 800e29a:	0151      	lsls	r1, r2, #5
 800e29c:	697a      	ldr	r2, [r7, #20]
 800e29e:	440a      	add	r2, r1
 800e2a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e2a8:	6013      	str	r3, [r2, #0]
 800e2aa:	e011      	b.n	800e2d0 <USB_EPStartXfer+0x394>
 800e2ac:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	015a      	lsls	r2, r3, #5
 800e2b4:	697b      	ldr	r3, [r7, #20]
 800e2b6:	4413      	add	r3, r2
 800e2b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	693a      	ldr	r2, [r7, #16]
 800e2c0:	0151      	lsls	r1, r2, #5
 800e2c2:	697a      	ldr	r2, [r7, #20]
 800e2c4:	440a      	add	r2, r1
 800e2c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e2ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	015a      	lsls	r2, r3, #5
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	4413      	add	r3, r2
 800e2d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	693a      	ldr	r2, [r7, #16]
 800e2e0:	0151      	lsls	r1, r2, #5
 800e2e2:	697a      	ldr	r2, [r7, #20]
 800e2e4:	440a      	add	r2, r1
 800e2e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e2ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e2f0:	2300      	movs	r3, #0
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	3718      	adds	r7, #24
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}
 800e2fa:	bf00      	nop

0800e2fc <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b085      	sub	sp, #20
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
 800e304:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	781b      	ldrb	r3, [r3, #0]
 800e30e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	785b      	ldrb	r3, [r3, #1]
 800e314:	2b01      	cmp	r3, #1
 800e316:	f040 80ab 	bne.w	800e470 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	699b      	ldr	r3, [r3, #24]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d132      	bne.n	800e388 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	015a      	lsls	r2, r3, #5
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	4413      	add	r3, r2
 800e32a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e32e:	691b      	ldr	r3, [r3, #16]
 800e330:	68ba      	ldr	r2, [r7, #8]
 800e332:	0151      	lsls	r1, r2, #5
 800e334:	68fa      	ldr	r2, [r7, #12]
 800e336:	440a      	add	r2, r1
 800e338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e33c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e340:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e344:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	015a      	lsls	r2, r3, #5
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	4413      	add	r3, r2
 800e34e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e352:	691b      	ldr	r3, [r3, #16]
 800e354:	68ba      	ldr	r2, [r7, #8]
 800e356:	0151      	lsls	r1, r2, #5
 800e358:	68fa      	ldr	r2, [r7, #12]
 800e35a:	440a      	add	r2, r1
 800e35c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e360:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e364:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	015a      	lsls	r2, r3, #5
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	4413      	add	r3, r2
 800e36e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e372:	691b      	ldr	r3, [r3, #16]
 800e374:	68ba      	ldr	r2, [r7, #8]
 800e376:	0151      	lsls	r1, r2, #5
 800e378:	68fa      	ldr	r2, [r7, #12]
 800e37a:	440a      	add	r2, r1
 800e37c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e380:	0cdb      	lsrs	r3, r3, #19
 800e382:	04db      	lsls	r3, r3, #19
 800e384:	6113      	str	r3, [r2, #16]
 800e386:	e04e      	b.n	800e426 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	015a      	lsls	r2, r3, #5
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	4413      	add	r3, r2
 800e390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e394:	691b      	ldr	r3, [r3, #16]
 800e396:	68ba      	ldr	r2, [r7, #8]
 800e398:	0151      	lsls	r1, r2, #5
 800e39a:	68fa      	ldr	r2, [r7, #12]
 800e39c:	440a      	add	r2, r1
 800e39e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3a2:	0cdb      	lsrs	r3, r3, #19
 800e3a4:	04db      	lsls	r3, r3, #19
 800e3a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	015a      	lsls	r2, r3, #5
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	4413      	add	r3, r2
 800e3b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3b4:	691b      	ldr	r3, [r3, #16]
 800e3b6:	68ba      	ldr	r2, [r7, #8]
 800e3b8:	0151      	lsls	r1, r2, #5
 800e3ba:	68fa      	ldr	r2, [r7, #12]
 800e3bc:	440a      	add	r2, r1
 800e3be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e3c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e3ca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	699a      	ldr	r2, [r3, #24]
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	68db      	ldr	r3, [r3, #12]
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d903      	bls.n	800e3e0 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	68da      	ldr	r2, [r3, #12]
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e3e0:	68bb      	ldr	r3, [r7, #8]
 800e3e2:	015a      	lsls	r2, r3, #5
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	4413      	add	r3, r2
 800e3e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3ec:	691b      	ldr	r3, [r3, #16]
 800e3ee:	68ba      	ldr	r2, [r7, #8]
 800e3f0:	0151      	lsls	r1, r2, #5
 800e3f2:	68fa      	ldr	r2, [r7, #12]
 800e3f4:	440a      	add	r2, r1
 800e3f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e3fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e400:	68bb      	ldr	r3, [r7, #8]
 800e402:	015a      	lsls	r2, r3, #5
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	4413      	add	r3, r2
 800e408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e40c:	691a      	ldr	r2, [r3, #16]
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	699b      	ldr	r3, [r3, #24]
 800e412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e416:	68b9      	ldr	r1, [r7, #8]
 800e418:	0148      	lsls	r0, r1, #5
 800e41a:	68f9      	ldr	r1, [r7, #12]
 800e41c:	4401      	add	r1, r0
 800e41e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e422:	4313      	orrs	r3, r2
 800e424:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	015a      	lsls	r2, r3, #5
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	4413      	add	r3, r2
 800e42e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	68ba      	ldr	r2, [r7, #8]
 800e436:	0151      	lsls	r1, r2, #5
 800e438:	68fa      	ldr	r2, [r7, #12]
 800e43a:	440a      	add	r2, r1
 800e43c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e440:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e444:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	699b      	ldr	r3, [r3, #24]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d071      	beq.n	800e532 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e454:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	781b      	ldrb	r3, [r3, #0]
 800e45a:	f003 030f 	and.w	r3, r3, #15
 800e45e:	2101      	movs	r1, #1
 800e460:	fa01 f303 	lsl.w	r3, r1, r3
 800e464:	68f9      	ldr	r1, [r7, #12]
 800e466:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e46a:	4313      	orrs	r3, r2
 800e46c:	634b      	str	r3, [r1, #52]	; 0x34
 800e46e:	e060      	b.n	800e532 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	015a      	lsls	r2, r3, #5
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	4413      	add	r3, r2
 800e478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e47c:	691b      	ldr	r3, [r3, #16]
 800e47e:	68ba      	ldr	r2, [r7, #8]
 800e480:	0151      	lsls	r1, r2, #5
 800e482:	68fa      	ldr	r2, [r7, #12]
 800e484:	440a      	add	r2, r1
 800e486:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e48a:	0cdb      	lsrs	r3, r3, #19
 800e48c:	04db      	lsls	r3, r3, #19
 800e48e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	015a      	lsls	r2, r3, #5
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	4413      	add	r3, r2
 800e498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e49c:	691b      	ldr	r3, [r3, #16]
 800e49e:	68ba      	ldr	r2, [r7, #8]
 800e4a0:	0151      	lsls	r1, r2, #5
 800e4a2:	68fa      	ldr	r2, [r7, #12]
 800e4a4:	440a      	add	r2, r1
 800e4a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e4aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e4ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e4b2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	699b      	ldr	r3, [r3, #24]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d003      	beq.n	800e4c4 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	68da      	ldr	r2, [r3, #12]
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800e4c4:	683b      	ldr	r3, [r7, #0]
 800e4c6:	68da      	ldr	r2, [r3, #12]
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	015a      	lsls	r2, r3, #5
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	4413      	add	r3, r2
 800e4d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4d8:	691b      	ldr	r3, [r3, #16]
 800e4da:	68ba      	ldr	r2, [r7, #8]
 800e4dc:	0151      	lsls	r1, r2, #5
 800e4de:	68fa      	ldr	r2, [r7, #12]
 800e4e0:	440a      	add	r2, r1
 800e4e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e4e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e4ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	015a      	lsls	r2, r3, #5
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	4413      	add	r3, r2
 800e4f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4f8:	691a      	ldr	r2, [r3, #16]
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	69db      	ldr	r3, [r3, #28]
 800e4fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e502:	68b9      	ldr	r1, [r7, #8]
 800e504:	0148      	lsls	r0, r1, #5
 800e506:	68f9      	ldr	r1, [r7, #12]
 800e508:	4401      	add	r1, r0
 800e50a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e50e:	4313      	orrs	r3, r2
 800e510:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	015a      	lsls	r2, r3, #5
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	4413      	add	r3, r2
 800e51a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	68ba      	ldr	r2, [r7, #8]
 800e522:	0151      	lsls	r1, r2, #5
 800e524:	68fa      	ldr	r2, [r7, #12]
 800e526:	440a      	add	r2, r1
 800e528:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e52c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e530:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e532:	2300      	movs	r3, #0
}
 800e534:	4618      	mov	r0, r3
 800e536:	3714      	adds	r7, #20
 800e538:	46bd      	mov	sp, r7
 800e53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53e:	4770      	bx	lr

0800e540 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e540:	b480      	push	{r7}
 800e542:	b087      	sub	sp, #28
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
 800e548:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e54a:	2300      	movs	r3, #0
 800e54c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e54e:	2300      	movs	r3, #0
 800e550:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	785b      	ldrb	r3, [r3, #1]
 800e55a:	2b01      	cmp	r3, #1
 800e55c:	d14a      	bne.n	800e5f4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	781b      	ldrb	r3, [r3, #0]
 800e562:	015a      	lsls	r2, r3, #5
 800e564:	693b      	ldr	r3, [r7, #16]
 800e566:	4413      	add	r3, r2
 800e568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e572:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e576:	f040 8086 	bne.w	800e686 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	781b      	ldrb	r3, [r3, #0]
 800e57e:	015a      	lsls	r2, r3, #5
 800e580:	693b      	ldr	r3, [r7, #16]
 800e582:	4413      	add	r3, r2
 800e584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	683a      	ldr	r2, [r7, #0]
 800e58c:	7812      	ldrb	r2, [r2, #0]
 800e58e:	0151      	lsls	r1, r2, #5
 800e590:	693a      	ldr	r2, [r7, #16]
 800e592:	440a      	add	r2, r1
 800e594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e598:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e59c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	781b      	ldrb	r3, [r3, #0]
 800e5a2:	015a      	lsls	r2, r3, #5
 800e5a4:	693b      	ldr	r3, [r7, #16]
 800e5a6:	4413      	add	r3, r2
 800e5a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	683a      	ldr	r2, [r7, #0]
 800e5b0:	7812      	ldrb	r2, [r2, #0]
 800e5b2:	0151      	lsls	r1, r2, #5
 800e5b4:	693a      	ldr	r2, [r7, #16]
 800e5b6:	440a      	add	r2, r1
 800e5b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e5c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	3301      	adds	r3, #1
 800e5c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	f242 7210 	movw	r2, #10000	; 0x2710
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	d902      	bls.n	800e5d8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	75fb      	strb	r3, [r7, #23]
          break;
 800e5d6:	e056      	b.n	800e686 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	781b      	ldrb	r3, [r3, #0]
 800e5dc:	015a      	lsls	r2, r3, #5
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	4413      	add	r3, r2
 800e5e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e5ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e5f0:	d0e7      	beq.n	800e5c2 <USB_EPStopXfer+0x82>
 800e5f2:	e048      	b.n	800e686 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	781b      	ldrb	r3, [r3, #0]
 800e5f8:	015a      	lsls	r2, r3, #5
 800e5fa:	693b      	ldr	r3, [r7, #16]
 800e5fc:	4413      	add	r3, r2
 800e5fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e608:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e60c:	d13b      	bne.n	800e686 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	781b      	ldrb	r3, [r3, #0]
 800e612:	015a      	lsls	r2, r3, #5
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	4413      	add	r3, r2
 800e618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	683a      	ldr	r2, [r7, #0]
 800e620:	7812      	ldrb	r2, [r2, #0]
 800e622:	0151      	lsls	r1, r2, #5
 800e624:	693a      	ldr	r2, [r7, #16]
 800e626:	440a      	add	r2, r1
 800e628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e62c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e630:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	781b      	ldrb	r3, [r3, #0]
 800e636:	015a      	lsls	r2, r3, #5
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	4413      	add	r3, r2
 800e63c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	683a      	ldr	r2, [r7, #0]
 800e644:	7812      	ldrb	r2, [r2, #0]
 800e646:	0151      	lsls	r1, r2, #5
 800e648:	693a      	ldr	r2, [r7, #16]
 800e64a:	440a      	add	r2, r1
 800e64c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e650:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e654:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	3301      	adds	r3, #1
 800e65a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f242 7210 	movw	r2, #10000	; 0x2710
 800e662:	4293      	cmp	r3, r2
 800e664:	d902      	bls.n	800e66c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e666:	2301      	movs	r3, #1
 800e668:	75fb      	strb	r3, [r7, #23]
          break;
 800e66a:	e00c      	b.n	800e686 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	781b      	ldrb	r3, [r3, #0]
 800e670:	015a      	lsls	r2, r3, #5
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	4413      	add	r3, r2
 800e676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e680:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e684:	d0e7      	beq.n	800e656 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e686:	7dfb      	ldrb	r3, [r7, #23]
}
 800e688:	4618      	mov	r0, r3
 800e68a:	371c      	adds	r7, #28
 800e68c:	46bd      	mov	sp, r7
 800e68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e692:	4770      	bx	lr

0800e694 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800e694:	b480      	push	{r7}
 800e696:	b089      	sub	sp, #36	; 0x24
 800e698:	af00      	add	r7, sp, #0
 800e69a:	60f8      	str	r0, [r7, #12]
 800e69c:	60b9      	str	r1, [r7, #8]
 800e69e:	4611      	mov	r1, r2
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	460b      	mov	r3, r1
 800e6a4:	71fb      	strb	r3, [r7, #7]
 800e6a6:	4613      	mov	r3, r2
 800e6a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800e6b2:	88bb      	ldrh	r3, [r7, #4]
 800e6b4:	3303      	adds	r3, #3
 800e6b6:	089b      	lsrs	r3, r3, #2
 800e6b8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	61bb      	str	r3, [r7, #24]
 800e6be:	e018      	b.n	800e6f2 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e6c0:	79fb      	ldrb	r3, [r7, #7]
 800e6c2:	031a      	lsls	r2, r3, #12
 800e6c4:	697b      	ldr	r3, [r7, #20]
 800e6c6:	4413      	add	r3, r2
 800e6c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6cc:	461a      	mov	r2, r3
 800e6ce:	69fb      	ldr	r3, [r7, #28]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	6013      	str	r3, [r2, #0]
    pSrc++;
 800e6d4:	69fb      	ldr	r3, [r7, #28]
 800e6d6:	3301      	adds	r3, #1
 800e6d8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800e6da:	69fb      	ldr	r3, [r7, #28]
 800e6dc:	3301      	adds	r3, #1
 800e6de:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800e6e0:	69fb      	ldr	r3, [r7, #28]
 800e6e2:	3301      	adds	r3, #1
 800e6e4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800e6e6:	69fb      	ldr	r3, [r7, #28]
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800e6ec:	69bb      	ldr	r3, [r7, #24]
 800e6ee:	3301      	adds	r3, #1
 800e6f0:	61bb      	str	r3, [r7, #24]
 800e6f2:	69ba      	ldr	r2, [r7, #24]
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	429a      	cmp	r2, r3
 800e6f8:	d3e2      	bcc.n	800e6c0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800e6fa:	2300      	movs	r3, #0
}
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	3724      	adds	r7, #36	; 0x24
 800e700:	46bd      	mov	sp, r7
 800e702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e706:	4770      	bx	lr

0800e708 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e708:	b480      	push	{r7}
 800e70a:	b08b      	sub	sp, #44	; 0x2c
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	60f8      	str	r0, [r7, #12]
 800e710:	60b9      	str	r1, [r7, #8]
 800e712:	4613      	mov	r3, r2
 800e714:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e71e:	88fb      	ldrh	r3, [r7, #6]
 800e720:	089b      	lsrs	r3, r3, #2
 800e722:	b29b      	uxth	r3, r3
 800e724:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e726:	88fb      	ldrh	r3, [r7, #6]
 800e728:	f003 0303 	and.w	r3, r3, #3
 800e72c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e72e:	2300      	movs	r3, #0
 800e730:	623b      	str	r3, [r7, #32]
 800e732:	e014      	b.n	800e75e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e734:	69bb      	ldr	r3, [r7, #24]
 800e736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e73a:	681a      	ldr	r2, [r3, #0]
 800e73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e73e:	601a      	str	r2, [r3, #0]
    pDest++;
 800e740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e742:	3301      	adds	r3, #1
 800e744:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e748:	3301      	adds	r3, #1
 800e74a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e74e:	3301      	adds	r3, #1
 800e750:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e754:	3301      	adds	r3, #1
 800e756:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e758:	6a3b      	ldr	r3, [r7, #32]
 800e75a:	3301      	adds	r3, #1
 800e75c:	623b      	str	r3, [r7, #32]
 800e75e:	6a3a      	ldr	r2, [r7, #32]
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	429a      	cmp	r2, r3
 800e764:	d3e6      	bcc.n	800e734 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e766:	8bfb      	ldrh	r3, [r7, #30]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d01e      	beq.n	800e7aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e76c:	2300      	movs	r3, #0
 800e76e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e770:	69bb      	ldr	r3, [r7, #24]
 800e772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e776:	461a      	mov	r2, r3
 800e778:	f107 0310 	add.w	r3, r7, #16
 800e77c:	6812      	ldr	r2, [r2, #0]
 800e77e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e780:	693a      	ldr	r2, [r7, #16]
 800e782:	6a3b      	ldr	r3, [r7, #32]
 800e784:	b2db      	uxtb	r3, r3
 800e786:	00db      	lsls	r3, r3, #3
 800e788:	fa22 f303 	lsr.w	r3, r2, r3
 800e78c:	b2da      	uxtb	r2, r3
 800e78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e790:	701a      	strb	r2, [r3, #0]
      i++;
 800e792:	6a3b      	ldr	r3, [r7, #32]
 800e794:	3301      	adds	r3, #1
 800e796:	623b      	str	r3, [r7, #32]
      pDest++;
 800e798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e79a:	3301      	adds	r3, #1
 800e79c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e79e:	8bfb      	ldrh	r3, [r7, #30]
 800e7a0:	3b01      	subs	r3, #1
 800e7a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e7a4:	8bfb      	ldrh	r3, [r7, #30]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d1ea      	bne.n	800e780 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	372c      	adds	r7, #44	; 0x2c
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b6:	4770      	bx	lr

0800e7b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b085      	sub	sp, #20
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	781b      	ldrb	r3, [r3, #0]
 800e7ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	785b      	ldrb	r3, [r3, #1]
 800e7d0:	2b01      	cmp	r3, #1
 800e7d2:	d12c      	bne.n	800e82e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	015a      	lsls	r2, r3, #5
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	4413      	add	r3, r2
 800e7dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	db12      	blt.n	800e80c <USB_EPSetStall+0x54>
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d00f      	beq.n	800e80c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	015a      	lsls	r2, r3, #5
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	4413      	add	r3, r2
 800e7f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	68ba      	ldr	r2, [r7, #8]
 800e7fc:	0151      	lsls	r1, r2, #5
 800e7fe:	68fa      	ldr	r2, [r7, #12]
 800e800:	440a      	add	r2, r1
 800e802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e806:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e80a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	015a      	lsls	r2, r3, #5
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	4413      	add	r3, r2
 800e814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	68ba      	ldr	r2, [r7, #8]
 800e81c:	0151      	lsls	r1, r2, #5
 800e81e:	68fa      	ldr	r2, [r7, #12]
 800e820:	440a      	add	r2, r1
 800e822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e826:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e82a:	6013      	str	r3, [r2, #0]
 800e82c:	e02b      	b.n	800e886 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e82e:	68bb      	ldr	r3, [r7, #8]
 800e830:	015a      	lsls	r2, r3, #5
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	4413      	add	r3, r2
 800e836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	db12      	blt.n	800e866 <USB_EPSetStall+0xae>
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d00f      	beq.n	800e866 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	015a      	lsls	r2, r3, #5
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	4413      	add	r3, r2
 800e84e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	68ba      	ldr	r2, [r7, #8]
 800e856:	0151      	lsls	r1, r2, #5
 800e858:	68fa      	ldr	r2, [r7, #12]
 800e85a:	440a      	add	r2, r1
 800e85c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e860:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e864:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e866:	68bb      	ldr	r3, [r7, #8]
 800e868:	015a      	lsls	r2, r3, #5
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	4413      	add	r3, r2
 800e86e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	68ba      	ldr	r2, [r7, #8]
 800e876:	0151      	lsls	r1, r2, #5
 800e878:	68fa      	ldr	r2, [r7, #12]
 800e87a:	440a      	add	r2, r1
 800e87c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e880:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e884:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e886:	2300      	movs	r3, #0
}
 800e888:	4618      	mov	r0, r3
 800e88a:	3714      	adds	r7, #20
 800e88c:	46bd      	mov	sp, r7
 800e88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e892:	4770      	bx	lr

0800e894 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e894:	b480      	push	{r7}
 800e896:	b085      	sub	sp, #20
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
 800e89c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	781b      	ldrb	r3, [r3, #0]
 800e8a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e8a8:	683b      	ldr	r3, [r7, #0]
 800e8aa:	785b      	ldrb	r3, [r3, #1]
 800e8ac:	2b01      	cmp	r3, #1
 800e8ae:	d128      	bne.n	800e902 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	015a      	lsls	r2, r3, #5
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	4413      	add	r3, r2
 800e8b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	68ba      	ldr	r2, [r7, #8]
 800e8c0:	0151      	lsls	r1, r2, #5
 800e8c2:	68fa      	ldr	r2, [r7, #12]
 800e8c4:	440a      	add	r2, r1
 800e8c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e8ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	791b      	ldrb	r3, [r3, #4]
 800e8d4:	2b03      	cmp	r3, #3
 800e8d6:	d003      	beq.n	800e8e0 <USB_EPClearStall+0x4c>
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	791b      	ldrb	r3, [r3, #4]
 800e8dc:	2b02      	cmp	r3, #2
 800e8de:	d138      	bne.n	800e952 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	015a      	lsls	r2, r3, #5
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	4413      	add	r3, r2
 800e8e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	68ba      	ldr	r2, [r7, #8]
 800e8f0:	0151      	lsls	r1, r2, #5
 800e8f2:	68fa      	ldr	r2, [r7, #12]
 800e8f4:	440a      	add	r2, r1
 800e8f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e8fe:	6013      	str	r3, [r2, #0]
 800e900:	e027      	b.n	800e952 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	015a      	lsls	r2, r3, #5
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	4413      	add	r3, r2
 800e90a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	68ba      	ldr	r2, [r7, #8]
 800e912:	0151      	lsls	r1, r2, #5
 800e914:	68fa      	ldr	r2, [r7, #12]
 800e916:	440a      	add	r2, r1
 800e918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e91c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e920:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	791b      	ldrb	r3, [r3, #4]
 800e926:	2b03      	cmp	r3, #3
 800e928:	d003      	beq.n	800e932 <USB_EPClearStall+0x9e>
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	791b      	ldrb	r3, [r3, #4]
 800e92e:	2b02      	cmp	r3, #2
 800e930:	d10f      	bne.n	800e952 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	015a      	lsls	r2, r3, #5
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	4413      	add	r3, r2
 800e93a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	68ba      	ldr	r2, [r7, #8]
 800e942:	0151      	lsls	r1, r2, #5
 800e944:	68fa      	ldr	r2, [r7, #12]
 800e946:	440a      	add	r2, r1
 800e948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e94c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e950:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e952:	2300      	movs	r3, #0
}
 800e954:	4618      	mov	r0, r3
 800e956:	3714      	adds	r7, #20
 800e958:	46bd      	mov	sp, r7
 800e95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95e:	4770      	bx	lr

0800e960 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e960:	b480      	push	{r7}
 800e962:	b085      	sub	sp, #20
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
 800e968:	460b      	mov	r3, r1
 800e96a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	68fa      	ldr	r2, [r7, #12]
 800e97a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e97e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e982:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e98a:	681a      	ldr	r2, [r3, #0]
 800e98c:	78fb      	ldrb	r3, [r7, #3]
 800e98e:	011b      	lsls	r3, r3, #4
 800e990:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e994:	68f9      	ldr	r1, [r7, #12]
 800e996:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e99a:	4313      	orrs	r3, r2
 800e99c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e99e:	2300      	movs	r3, #0
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	3714      	adds	r7, #20
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9aa:	4770      	bx	lr

0800e9ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	b085      	sub	sp, #20
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	68fa      	ldr	r2, [r7, #12]
 800e9c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e9c6:	f023 0303 	bic.w	r3, r3, #3
 800e9ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9d2:	685b      	ldr	r3, [r3, #4]
 800e9d4:	68fa      	ldr	r2, [r7, #12]
 800e9d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e9da:	f023 0302 	bic.w	r3, r3, #2
 800e9de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e9e0:	2300      	movs	r3, #0
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3714      	adds	r7, #20
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ec:	4770      	bx	lr

0800e9ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e9ee:	b480      	push	{r7}
 800e9f0:	b085      	sub	sp, #20
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	68fa      	ldr	r2, [r7, #12]
 800ea04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ea08:	f023 0303 	bic.w	r3, r3, #3
 800ea0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea14:	685b      	ldr	r3, [r3, #4]
 800ea16:	68fa      	ldr	r2, [r7, #12]
 800ea18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ea1c:	f043 0302 	orr.w	r3, r3, #2
 800ea20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ea22:	2300      	movs	r3, #0
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3714      	adds	r7, #20
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2e:	4770      	bx	lr

0800ea30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ea30:	b480      	push	{r7}
 800ea32:	b085      	sub	sp, #20
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	695b      	ldr	r3, [r3, #20]
 800ea3c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	699b      	ldr	r3, [r3, #24]
 800ea42:	68fa      	ldr	r2, [r7, #12]
 800ea44:	4013      	ands	r3, r2
 800ea46:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ea48:	68fb      	ldr	r3, [r7, #12]
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3714      	adds	r7, #20
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea54:	4770      	bx	lr

0800ea56 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ea56:	b480      	push	{r7}
 800ea58:	b085      	sub	sp, #20
 800ea5a:	af00      	add	r7, sp, #0
 800ea5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea68:	699b      	ldr	r3, [r3, #24]
 800ea6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea72:	69db      	ldr	r3, [r3, #28]
 800ea74:	68ba      	ldr	r2, [r7, #8]
 800ea76:	4013      	ands	r3, r2
 800ea78:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	0c1b      	lsrs	r3, r3, #16
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	3714      	adds	r7, #20
 800ea82:	46bd      	mov	sp, r7
 800ea84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea88:	4770      	bx	lr

0800ea8a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ea8a:	b480      	push	{r7}
 800ea8c:	b085      	sub	sp, #20
 800ea8e:	af00      	add	r7, sp, #0
 800ea90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea9c:	699b      	ldr	r3, [r3, #24]
 800ea9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eaa6:	69db      	ldr	r3, [r3, #28]
 800eaa8:	68ba      	ldr	r2, [r7, #8]
 800eaaa:	4013      	ands	r3, r2
 800eaac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	b29b      	uxth	r3, r3
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	3714      	adds	r7, #20
 800eab6:	46bd      	mov	sp, r7
 800eab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabc:	4770      	bx	lr

0800eabe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800eabe:	b480      	push	{r7}
 800eac0:	b085      	sub	sp, #20
 800eac2:	af00      	add	r7, sp, #0
 800eac4:	6078      	str	r0, [r7, #4]
 800eac6:	460b      	mov	r3, r1
 800eac8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800eace:	78fb      	ldrb	r3, [r7, #3]
 800ead0:	015a      	lsls	r2, r3, #5
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	4413      	add	r3, r2
 800ead6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eada:	689b      	ldr	r3, [r3, #8]
 800eadc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eae4:	695b      	ldr	r3, [r3, #20]
 800eae6:	68ba      	ldr	r2, [r7, #8]
 800eae8:	4013      	ands	r3, r2
 800eaea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eaec:	68bb      	ldr	r3, [r7, #8]
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	3714      	adds	r7, #20
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf8:	4770      	bx	lr

0800eafa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800eafa:	b480      	push	{r7}
 800eafc:	b087      	sub	sp, #28
 800eafe:	af00      	add	r7, sp, #0
 800eb00:	6078      	str	r0, [r7, #4]
 800eb02:	460b      	mov	r3, r1
 800eb04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb10:	691b      	ldr	r3, [r3, #16]
 800eb12:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb1c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800eb1e:	78fb      	ldrb	r3, [r7, #3]
 800eb20:	f003 030f 	and.w	r3, r3, #15
 800eb24:	68fa      	ldr	r2, [r7, #12]
 800eb26:	fa22 f303 	lsr.w	r3, r2, r3
 800eb2a:	01db      	lsls	r3, r3, #7
 800eb2c:	b2db      	uxtb	r3, r3
 800eb2e:	693a      	ldr	r2, [r7, #16]
 800eb30:	4313      	orrs	r3, r2
 800eb32:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800eb34:	78fb      	ldrb	r3, [r7, #3]
 800eb36:	015a      	lsls	r2, r3, #5
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	4413      	add	r3, r2
 800eb3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb40:	689b      	ldr	r3, [r3, #8]
 800eb42:	693a      	ldr	r2, [r7, #16]
 800eb44:	4013      	ands	r3, r2
 800eb46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eb48:	68bb      	ldr	r3, [r7, #8]
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	371c      	adds	r7, #28
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb54:	4770      	bx	lr

0800eb56 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800eb56:	b480      	push	{r7}
 800eb58:	b083      	sub	sp, #12
 800eb5a:	af00      	add	r7, sp, #0
 800eb5c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	695b      	ldr	r3, [r3, #20]
 800eb62:	f003 0301 	and.w	r3, r3, #1
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	370c      	adds	r7, #12
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr

0800eb72 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800eb72:	b480      	push	{r7}
 800eb74:	b085      	sub	sp, #20
 800eb76:	af00      	add	r7, sp, #0
 800eb78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	68fa      	ldr	r2, [r7, #12]
 800eb88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb8c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800eb90:	f023 0307 	bic.w	r3, r3, #7
 800eb94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb9c:	685b      	ldr	r3, [r3, #4]
 800eb9e:	68fa      	ldr	r2, [r7, #12]
 800eba0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eba8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ebaa:	2300      	movs	r3, #0
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3714      	adds	r7, #20
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb6:	4770      	bx	lr

0800ebb8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b085      	sub	sp, #20
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	333c      	adds	r3, #60	; 0x3c
 800ebca:	3304      	adds	r3, #4
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	4a1c      	ldr	r2, [pc, #112]	; (800ec44 <USB_EP0_OutStart+0x8c>)
 800ebd4:	4293      	cmp	r3, r2
 800ebd6:	d90a      	bls.n	800ebee <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ebe4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ebe8:	d101      	bne.n	800ebee <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800ebea:	2300      	movs	r3, #0
 800ebec:	e024      	b.n	800ec38 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebf4:	461a      	mov	r2, r3
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec00:	691b      	ldr	r3, [r3, #16]
 800ec02:	68fa      	ldr	r2, [r7, #12]
 800ec04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ec0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec14:	691b      	ldr	r3, [r3, #16]
 800ec16:	68fa      	ldr	r2, [r7, #12]
 800ec18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec1c:	f043 0318 	orr.w	r3, r3, #24
 800ec20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec28:	691b      	ldr	r3, [r3, #16]
 800ec2a:	68fa      	ldr	r2, [r7, #12]
 800ec2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec30:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ec34:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800ec36:	2300      	movs	r3, #0
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3714      	adds	r7, #20
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec42:	4770      	bx	lr
 800ec44:	4f54300a 	.word	0x4f54300a

0800ec48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ec48:	b480      	push	{r7}
 800ec4a:	b085      	sub	sp, #20
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ec50:	2300      	movs	r3, #0
 800ec52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	3301      	adds	r3, #1
 800ec58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	4a13      	ldr	r2, [pc, #76]	; (800ecac <USB_CoreReset+0x64>)
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d901      	bls.n	800ec66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ec62:	2303      	movs	r3, #3
 800ec64:	e01b      	b.n	800ec9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	691b      	ldr	r3, [r3, #16]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	daf2      	bge.n	800ec54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	691b      	ldr	r3, [r3, #16]
 800ec76:	f043 0201 	orr.w	r2, r3, #1
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	3301      	adds	r3, #1
 800ec82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	4a09      	ldr	r2, [pc, #36]	; (800ecac <USB_CoreReset+0x64>)
 800ec88:	4293      	cmp	r3, r2
 800ec8a:	d901      	bls.n	800ec90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ec8c:	2303      	movs	r3, #3
 800ec8e:	e006      	b.n	800ec9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	691b      	ldr	r3, [r3, #16]
 800ec94:	f003 0301 	and.w	r3, r3, #1
 800ec98:	2b01      	cmp	r3, #1
 800ec9a:	d0f0      	beq.n	800ec7e <USB_CoreReset+0x36>

  return HAL_OK;
 800ec9c:	2300      	movs	r3, #0
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3714      	adds	r7, #20
 800eca2:	46bd      	mov	sp, r7
 800eca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca8:	4770      	bx	lr
 800ecaa:	bf00      	nop
 800ecac:	00030d40 	.word	0x00030d40

0800ecb0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ecb4:	4904      	ldr	r1, [pc, #16]	; (800ecc8 <MX_FATFS_Init+0x18>)
 800ecb6:	4805      	ldr	r0, [pc, #20]	; (800eccc <MX_FATFS_Init+0x1c>)
 800ecb8:	f001 fe74 	bl	80109a4 <FATFS_LinkDriver>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	461a      	mov	r2, r3
 800ecc0:	4b03      	ldr	r3, [pc, #12]	; (800ecd0 <MX_FATFS_Init+0x20>)
 800ecc2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ecc4:	bf00      	nop
 800ecc6:	bd80      	pop	{r7, pc}
 800ecc8:	20000d8c 	.word	0x20000d8c
 800eccc:	08014290 	.word	0x08014290
 800ecd0:	20000d88 	.word	0x20000d88

0800ecd4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b082      	sub	sp, #8
 800ecd8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ecde:	f000 f879 	bl	800edd4 <BSP_SD_IsDetected>
 800ece2:	4603      	mov	r3, r0
 800ece4:	2b01      	cmp	r3, #1
 800ece6:	d001      	beq.n	800ecec <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ece8:	2302      	movs	r3, #2
 800ecea:	e012      	b.n	800ed12 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ecec:	480b      	ldr	r0, [pc, #44]	; (800ed1c <BSP_SD_Init+0x48>)
 800ecee:	f7f8 fd47 	bl	8007780 <HAL_SD_Init>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ecf6:	79fb      	ldrb	r3, [r7, #7]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d109      	bne.n	800ed10 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ecfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ed00:	4806      	ldr	r0, [pc, #24]	; (800ed1c <BSP_SD_Init+0x48>)
 800ed02:	f7f9 fc13 	bl	800852c <HAL_SD_ConfigWideBusOperation>
 800ed06:	4603      	mov	r3, r0
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d001      	beq.n	800ed10 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ed0c:	2301      	movs	r3, #1
 800ed0e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ed10:	79fb      	ldrb	r3, [r7, #7]
}
 800ed12:	4618      	mov	r0, r3
 800ed14:	3708      	adds	r7, #8
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}
 800ed1a:	bf00      	nop
 800ed1c:	20000424 	.word	0x20000424

0800ed20 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b088      	sub	sp, #32
 800ed24:	af02      	add	r7, sp, #8
 800ed26:	60f8      	str	r0, [r7, #12]
 800ed28:	60b9      	str	r1, [r7, #8]
 800ed2a:	607a      	str	r2, [r7, #4]
 800ed2c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	9300      	str	r3, [sp, #0]
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	68ba      	ldr	r2, [r7, #8]
 800ed3a:	68f9      	ldr	r1, [r7, #12]
 800ed3c:	4806      	ldr	r0, [pc, #24]	; (800ed58 <BSP_SD_ReadBlocks+0x38>)
 800ed3e:	f7f8 fe47 	bl	80079d0 <HAL_SD_ReadBlocks>
 800ed42:	4603      	mov	r3, r0
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d001      	beq.n	800ed4c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ed48:	2301      	movs	r3, #1
 800ed4a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ed4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3718      	adds	r7, #24
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}
 800ed56:	bf00      	nop
 800ed58:	20000424 	.word	0x20000424

0800ed5c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b088      	sub	sp, #32
 800ed60:	af02      	add	r7, sp, #8
 800ed62:	60f8      	str	r0, [r7, #12]
 800ed64:	60b9      	str	r1, [r7, #8]
 800ed66:	607a      	str	r2, [r7, #4]
 800ed68:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	9300      	str	r3, [sp, #0]
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	68ba      	ldr	r2, [r7, #8]
 800ed76:	68f9      	ldr	r1, [r7, #12]
 800ed78:	4806      	ldr	r0, [pc, #24]	; (800ed94 <BSP_SD_WriteBlocks+0x38>)
 800ed7a:	f7f8 ffbb 	bl	8007cf4 <HAL_SD_WriteBlocks>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d001      	beq.n	800ed88 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ed84:	2301      	movs	r3, #1
 800ed86:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ed88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3718      	adds	r7, #24
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}
 800ed92:	bf00      	nop
 800ed94:	20000424 	.word	0x20000424

0800ed98 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ed9c:	4805      	ldr	r0, [pc, #20]	; (800edb4 <BSP_SD_GetCardState+0x1c>)
 800ed9e:	f7f9 fcd9 	bl	8008754 <HAL_SD_GetCardState>
 800eda2:	4603      	mov	r3, r0
 800eda4:	2b04      	cmp	r3, #4
 800eda6:	bf14      	ite	ne
 800eda8:	2301      	movne	r3, #1
 800edaa:	2300      	moveq	r3, #0
 800edac:	b2db      	uxtb	r3, r3
}
 800edae:	4618      	mov	r0, r3
 800edb0:	bd80      	pop	{r7, pc}
 800edb2:	bf00      	nop
 800edb4:	20000424 	.word	0x20000424

0800edb8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b082      	sub	sp, #8
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800edc0:	6879      	ldr	r1, [r7, #4]
 800edc2:	4803      	ldr	r0, [pc, #12]	; (800edd0 <BSP_SD_GetCardInfo+0x18>)
 800edc4:	f7f9 fb86 	bl	80084d4 <HAL_SD_GetCardInfo>
}
 800edc8:	bf00      	nop
 800edca:	3708      	adds	r7, #8
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}
 800edd0:	20000424 	.word	0x20000424

0800edd4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b082      	sub	sp, #8
 800edd8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800edda:	2301      	movs	r3, #1
 800eddc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800edde:	f000 f80b 	bl	800edf8 <BSP_PlatformIsDetected>
 800ede2:	4603      	mov	r3, r0
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d101      	bne.n	800edec <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ede8:	2300      	movs	r3, #0
 800edea:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800edec:	79fb      	ldrb	r3, [r7, #7]
 800edee:	b2db      	uxtb	r3, r3
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	3708      	adds	r7, #8
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}

0800edf8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b082      	sub	sp, #8
 800edfc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800edfe:	2301      	movs	r3, #1
 800ee00:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ee02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ee06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ee0a:	f7f4 fc4b 	bl	80036a4 <HAL_GPIO_ReadPin>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d001      	beq.n	800ee18 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 800ee14:	2300      	movs	r3, #0
 800ee16:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ee18:	79fb      	ldrb	r3, [r7, #7]
}
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	3708      	adds	r7, #8
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}
	...

0800ee24 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b082      	sub	sp, #8
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ee2e:	4b0b      	ldr	r3, [pc, #44]	; (800ee5c <SD_CheckStatus+0x38>)
 800ee30:	2201      	movs	r2, #1
 800ee32:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ee34:	f7ff ffb0 	bl	800ed98 <BSP_SD_GetCardState>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d107      	bne.n	800ee4e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ee3e:	4b07      	ldr	r3, [pc, #28]	; (800ee5c <SD_CheckStatus+0x38>)
 800ee40:	781b      	ldrb	r3, [r3, #0]
 800ee42:	b2db      	uxtb	r3, r3
 800ee44:	f023 0301 	bic.w	r3, r3, #1
 800ee48:	b2da      	uxtb	r2, r3
 800ee4a:	4b04      	ldr	r3, [pc, #16]	; (800ee5c <SD_CheckStatus+0x38>)
 800ee4c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ee4e:	4b03      	ldr	r3, [pc, #12]	; (800ee5c <SD_CheckStatus+0x38>)
 800ee50:	781b      	ldrb	r3, [r3, #0]
 800ee52:	b2db      	uxtb	r3, r3
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3708      	adds	r7, #8
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}
 800ee5c:	20000015 	.word	0x20000015

0800ee60 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b082      	sub	sp, #8
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	4603      	mov	r3, r0
 800ee68:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ee6a:	4b0b      	ldr	r3, [pc, #44]	; (800ee98 <SD_initialize+0x38>)
 800ee6c:	2201      	movs	r2, #1
 800ee6e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ee70:	f7ff ff30 	bl	800ecd4 <BSP_SD_Init>
 800ee74:	4603      	mov	r3, r0
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d107      	bne.n	800ee8a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800ee7a:	79fb      	ldrb	r3, [r7, #7]
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f7ff ffd1 	bl	800ee24 <SD_CheckStatus>
 800ee82:	4603      	mov	r3, r0
 800ee84:	461a      	mov	r2, r3
 800ee86:	4b04      	ldr	r3, [pc, #16]	; (800ee98 <SD_initialize+0x38>)
 800ee88:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ee8a:	4b03      	ldr	r3, [pc, #12]	; (800ee98 <SD_initialize+0x38>)
 800ee8c:	781b      	ldrb	r3, [r3, #0]
 800ee8e:	b2db      	uxtb	r3, r3
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	3708      	adds	r7, #8
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}
 800ee98:	20000015 	.word	0x20000015

0800ee9c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b082      	sub	sp, #8
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	4603      	mov	r3, r0
 800eea4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800eea6:	79fb      	ldrb	r3, [r7, #7]
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7ff ffbb 	bl	800ee24 <SD_CheckStatus>
 800eeae:	4603      	mov	r3, r0
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3708      	adds	r7, #8
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}

0800eeb8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b086      	sub	sp, #24
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	60b9      	str	r1, [r7, #8]
 800eec0:	607a      	str	r2, [r7, #4]
 800eec2:	603b      	str	r3, [r7, #0]
 800eec4:	4603      	mov	r3, r0
 800eec6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800eec8:	2301      	movs	r3, #1
 800eeca:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800eecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eed0:	683a      	ldr	r2, [r7, #0]
 800eed2:	6879      	ldr	r1, [r7, #4]
 800eed4:	68b8      	ldr	r0, [r7, #8]
 800eed6:	f7ff ff23 	bl	800ed20 <BSP_SD_ReadBlocks>
 800eeda:	4603      	mov	r3, r0
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d107      	bne.n	800eef0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800eee0:	bf00      	nop
 800eee2:	f7ff ff59 	bl	800ed98 <BSP_SD_GetCardState>
 800eee6:	4603      	mov	r3, r0
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d1fa      	bne.n	800eee2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800eeec:	2300      	movs	r3, #0
 800eeee:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800eef0:	7dfb      	ldrb	r3, [r7, #23]
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3718      	adds	r7, #24
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}

0800eefa <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800eefa:	b580      	push	{r7, lr}
 800eefc:	b086      	sub	sp, #24
 800eefe:	af00      	add	r7, sp, #0
 800ef00:	60b9      	str	r1, [r7, #8]
 800ef02:	607a      	str	r2, [r7, #4]
 800ef04:	603b      	str	r3, [r7, #0]
 800ef06:	4603      	mov	r3, r0
 800ef08:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ef0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ef12:	683a      	ldr	r2, [r7, #0]
 800ef14:	6879      	ldr	r1, [r7, #4]
 800ef16:	68b8      	ldr	r0, [r7, #8]
 800ef18:	f7ff ff20 	bl	800ed5c <BSP_SD_WriteBlocks>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d107      	bne.n	800ef32 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800ef22:	bf00      	nop
 800ef24:	f7ff ff38 	bl	800ed98 <BSP_SD_GetCardState>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d1fa      	bne.n	800ef24 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800ef2e:	2300      	movs	r3, #0
 800ef30:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ef32:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef34:	4618      	mov	r0, r3
 800ef36:	3718      	adds	r7, #24
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}

0800ef3c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b08c      	sub	sp, #48	; 0x30
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	4603      	mov	r3, r0
 800ef44:	603a      	str	r2, [r7, #0]
 800ef46:	71fb      	strb	r3, [r7, #7]
 800ef48:	460b      	mov	r3, r1
 800ef4a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ef4c:	2301      	movs	r3, #1
 800ef4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ef52:	4b25      	ldr	r3, [pc, #148]	; (800efe8 <SD_ioctl+0xac>)
 800ef54:	781b      	ldrb	r3, [r3, #0]
 800ef56:	b2db      	uxtb	r3, r3
 800ef58:	f003 0301 	and.w	r3, r3, #1
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d001      	beq.n	800ef64 <SD_ioctl+0x28>
 800ef60:	2303      	movs	r3, #3
 800ef62:	e03c      	b.n	800efde <SD_ioctl+0xa2>

  switch (cmd)
 800ef64:	79bb      	ldrb	r3, [r7, #6]
 800ef66:	2b03      	cmp	r3, #3
 800ef68:	d834      	bhi.n	800efd4 <SD_ioctl+0x98>
 800ef6a:	a201      	add	r2, pc, #4	; (adr r2, 800ef70 <SD_ioctl+0x34>)
 800ef6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef70:	0800ef81 	.word	0x0800ef81
 800ef74:	0800ef89 	.word	0x0800ef89
 800ef78:	0800efa1 	.word	0x0800efa1
 800ef7c:	0800efbb 	.word	0x0800efbb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ef80:	2300      	movs	r3, #0
 800ef82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ef86:	e028      	b.n	800efda <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ef88:	f107 0308 	add.w	r3, r7, #8
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f7ff ff13 	bl	800edb8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ef92:	6a3a      	ldr	r2, [r7, #32]
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ef98:	2300      	movs	r3, #0
 800ef9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ef9e:	e01c      	b.n	800efda <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800efa0:	f107 0308 	add.w	r3, r7, #8
 800efa4:	4618      	mov	r0, r3
 800efa6:	f7ff ff07 	bl	800edb8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800efaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efac:	b29a      	uxth	r2, r3
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800efb2:	2300      	movs	r3, #0
 800efb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800efb8:	e00f      	b.n	800efda <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800efba:	f107 0308 	add.w	r3, r7, #8
 800efbe:	4618      	mov	r0, r3
 800efc0:	f7ff fefa 	bl	800edb8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800efc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc6:	0a5a      	lsrs	r2, r3, #9
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800efcc:	2300      	movs	r3, #0
 800efce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800efd2:	e002      	b.n	800efda <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800efd4:	2304      	movs	r3, #4
 800efd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800efda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3730      	adds	r7, #48	; 0x30
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}
 800efe6:	bf00      	nop
 800efe8:	20000015 	.word	0x20000015

0800efec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b084      	sub	sp, #16
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
 800eff4:	460b      	mov	r3, r1
 800eff6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800eff8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800effc:	f002 fabe 	bl	801157c <USBD_static_malloc>
 800f000:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d105      	bne.n	800f014 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2200      	movs	r2, #0
 800f00c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800f010:	2302      	movs	r3, #2
 800f012:	e066      	b.n	800f0e2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	68fa      	ldr	r2, [r7, #12]
 800f018:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	7c1b      	ldrb	r3, [r3, #16]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d119      	bne.n	800f058 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f024:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f028:	2202      	movs	r2, #2
 800f02a:	2181      	movs	r1, #129	; 0x81
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f002 f8df 	bl	80111f0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2201      	movs	r2, #1
 800f036:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f03c:	2202      	movs	r2, #2
 800f03e:	2101      	movs	r1, #1
 800f040:	6878      	ldr	r0, [r7, #4]
 800f042:	f002 f8d5 	bl	80111f0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2201      	movs	r2, #1
 800f04a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2210      	movs	r2, #16
 800f052:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800f056:	e016      	b.n	800f086 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f058:	2340      	movs	r3, #64	; 0x40
 800f05a:	2202      	movs	r2, #2
 800f05c:	2181      	movs	r1, #129	; 0x81
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f002 f8c6 	bl	80111f0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2201      	movs	r2, #1
 800f068:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f06a:	2340      	movs	r3, #64	; 0x40
 800f06c:	2202      	movs	r2, #2
 800f06e:	2101      	movs	r1, #1
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f002 f8bd 	bl	80111f0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	2201      	movs	r2, #1
 800f07a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2210      	movs	r2, #16
 800f082:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f086:	2308      	movs	r3, #8
 800f088:	2203      	movs	r2, #3
 800f08a:	2182      	movs	r1, #130	; 0x82
 800f08c:	6878      	ldr	r0, [r7, #4]
 800f08e:	f002 f8af 	bl	80111f0 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2201      	movs	r2, #1
 800f096:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	7c1b      	ldrb	r3, [r3, #16]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d109      	bne.n	800f0d0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f0c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f0c6:	2101      	movs	r1, #1
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f002 fa0b 	bl	80114e4 <USBD_LL_PrepareReceive>
 800f0ce:	e007      	b.n	800f0e0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f0d6:	2340      	movs	r3, #64	; 0x40
 800f0d8:	2101      	movs	r1, #1
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f002 fa02 	bl	80114e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f0e0:	2300      	movs	r3, #0
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3710      	adds	r7, #16
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}

0800f0ea <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f0ea:	b580      	push	{r7, lr}
 800f0ec:	b082      	sub	sp, #8
 800f0ee:	af00      	add	r7, sp, #0
 800f0f0:	6078      	str	r0, [r7, #4]
 800f0f2:	460b      	mov	r3, r1
 800f0f4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f0f6:	2181      	movs	r1, #129	; 0x81
 800f0f8:	6878      	ldr	r0, [r7, #4]
 800f0fa:	f002 f8b7 	bl	801126c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	2200      	movs	r2, #0
 800f102:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f104:	2101      	movs	r1, #1
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f002 f8b0 	bl	801126c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2200      	movs	r2, #0
 800f110:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f114:	2182      	movs	r1, #130	; 0x82
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	f002 f8a8 	bl	801126c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2200      	movs	r2, #0
 800f120:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2200      	movs	r2, #0
 800f128:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f132:	2b00      	cmp	r3, #0
 800f134:	d00e      	beq.n	800f154 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f13c:	685b      	ldr	r3, [r3, #4]
 800f13e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f146:	4618      	mov	r0, r3
 800f148:	f002 fa26 	bl	8011598 <USBD_static_free>
    pdev->pClassData = NULL;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2200      	movs	r2, #0
 800f150:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f154:	2300      	movs	r3, #0
}
 800f156:	4618      	mov	r0, r3
 800f158:	3708      	adds	r7, #8
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}
	...

0800f160 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b086      	sub	sp, #24
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
 800f168:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f170:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f172:	2300      	movs	r3, #0
 800f174:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f176:	2300      	movs	r3, #0
 800f178:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f17a:	2300      	movs	r3, #0
 800f17c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f17e:	693b      	ldr	r3, [r7, #16]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d101      	bne.n	800f188 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800f184:	2303      	movs	r3, #3
 800f186:	e0af      	b.n	800f2e8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	781b      	ldrb	r3, [r3, #0]
 800f18c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f190:	2b00      	cmp	r3, #0
 800f192:	d03f      	beq.n	800f214 <USBD_CDC_Setup+0xb4>
 800f194:	2b20      	cmp	r3, #32
 800f196:	f040 809f 	bne.w	800f2d8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	88db      	ldrh	r3, [r3, #6]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d02e      	beq.n	800f200 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	b25b      	sxtb	r3, r3
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	da16      	bge.n	800f1da <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f1b2:	689b      	ldr	r3, [r3, #8]
 800f1b4:	683a      	ldr	r2, [r7, #0]
 800f1b6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800f1b8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f1ba:	683a      	ldr	r2, [r7, #0]
 800f1bc:	88d2      	ldrh	r2, [r2, #6]
 800f1be:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	88db      	ldrh	r3, [r3, #6]
 800f1c4:	2b07      	cmp	r3, #7
 800f1c6:	bf28      	it	cs
 800f1c8:	2307      	movcs	r3, #7
 800f1ca:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f1cc:	693b      	ldr	r3, [r7, #16]
 800f1ce:	89fa      	ldrh	r2, [r7, #14]
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f001 fb19 	bl	801080a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800f1d8:	e085      	b.n	800f2e6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	785a      	ldrb	r2, [r3, #1]
 800f1de:	693b      	ldr	r3, [r7, #16]
 800f1e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	88db      	ldrh	r3, [r3, #6]
 800f1e8:	b2da      	uxtb	r2, r3
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f1f0:	6939      	ldr	r1, [r7, #16]
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	88db      	ldrh	r3, [r3, #6]
 800f1f6:	461a      	mov	r2, r3
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	f001 fb32 	bl	8010862 <USBD_CtlPrepareRx>
      break;
 800f1fe:	e072      	b.n	800f2e6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f206:	689b      	ldr	r3, [r3, #8]
 800f208:	683a      	ldr	r2, [r7, #0]
 800f20a:	7850      	ldrb	r0, [r2, #1]
 800f20c:	2200      	movs	r2, #0
 800f20e:	6839      	ldr	r1, [r7, #0]
 800f210:	4798      	blx	r3
      break;
 800f212:	e068      	b.n	800f2e6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	785b      	ldrb	r3, [r3, #1]
 800f218:	2b0b      	cmp	r3, #11
 800f21a:	d852      	bhi.n	800f2c2 <USBD_CDC_Setup+0x162>
 800f21c:	a201      	add	r2, pc, #4	; (adr r2, 800f224 <USBD_CDC_Setup+0xc4>)
 800f21e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f222:	bf00      	nop
 800f224:	0800f255 	.word	0x0800f255
 800f228:	0800f2d1 	.word	0x0800f2d1
 800f22c:	0800f2c3 	.word	0x0800f2c3
 800f230:	0800f2c3 	.word	0x0800f2c3
 800f234:	0800f2c3 	.word	0x0800f2c3
 800f238:	0800f2c3 	.word	0x0800f2c3
 800f23c:	0800f2c3 	.word	0x0800f2c3
 800f240:	0800f2c3 	.word	0x0800f2c3
 800f244:	0800f2c3 	.word	0x0800f2c3
 800f248:	0800f2c3 	.word	0x0800f2c3
 800f24c:	0800f27f 	.word	0x0800f27f
 800f250:	0800f2a9 	.word	0x0800f2a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f25a:	b2db      	uxtb	r3, r3
 800f25c:	2b03      	cmp	r3, #3
 800f25e:	d107      	bne.n	800f270 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f260:	f107 030a 	add.w	r3, r7, #10
 800f264:	2202      	movs	r2, #2
 800f266:	4619      	mov	r1, r3
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f001 face 	bl	801080a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f26e:	e032      	b.n	800f2d6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f270:	6839      	ldr	r1, [r7, #0]
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f001 fa58 	bl	8010728 <USBD_CtlError>
            ret = USBD_FAIL;
 800f278:	2303      	movs	r3, #3
 800f27a:	75fb      	strb	r3, [r7, #23]
          break;
 800f27c:	e02b      	b.n	800f2d6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f284:	b2db      	uxtb	r3, r3
 800f286:	2b03      	cmp	r3, #3
 800f288:	d107      	bne.n	800f29a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f28a:	f107 030d 	add.w	r3, r7, #13
 800f28e:	2201      	movs	r2, #1
 800f290:	4619      	mov	r1, r3
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f001 fab9 	bl	801080a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f298:	e01d      	b.n	800f2d6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f29a:	6839      	ldr	r1, [r7, #0]
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	f001 fa43 	bl	8010728 <USBD_CtlError>
            ret = USBD_FAIL;
 800f2a2:	2303      	movs	r3, #3
 800f2a4:	75fb      	strb	r3, [r7, #23]
          break;
 800f2a6:	e016      	b.n	800f2d6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2ae:	b2db      	uxtb	r3, r3
 800f2b0:	2b03      	cmp	r3, #3
 800f2b2:	d00f      	beq.n	800f2d4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800f2b4:	6839      	ldr	r1, [r7, #0]
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f001 fa36 	bl	8010728 <USBD_CtlError>
            ret = USBD_FAIL;
 800f2bc:	2303      	movs	r3, #3
 800f2be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f2c0:	e008      	b.n	800f2d4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f2c2:	6839      	ldr	r1, [r7, #0]
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f001 fa2f 	bl	8010728 <USBD_CtlError>
          ret = USBD_FAIL;
 800f2ca:	2303      	movs	r3, #3
 800f2cc:	75fb      	strb	r3, [r7, #23]
          break;
 800f2ce:	e002      	b.n	800f2d6 <USBD_CDC_Setup+0x176>
          break;
 800f2d0:	bf00      	nop
 800f2d2:	e008      	b.n	800f2e6 <USBD_CDC_Setup+0x186>
          break;
 800f2d4:	bf00      	nop
      }
      break;
 800f2d6:	e006      	b.n	800f2e6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800f2d8:	6839      	ldr	r1, [r7, #0]
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f001 fa24 	bl	8010728 <USBD_CtlError>
      ret = USBD_FAIL;
 800f2e0:	2303      	movs	r3, #3
 800f2e2:	75fb      	strb	r3, [r7, #23]
      break;
 800f2e4:	bf00      	nop
  }

  return (uint8_t)ret;
 800f2e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	3718      	adds	r7, #24
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}

0800f2f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b084      	sub	sp, #16
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
 800f2f8:	460b      	mov	r3, r1
 800f2fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f302:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d101      	bne.n	800f312 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f30e:	2303      	movs	r3, #3
 800f310:	e04f      	b.n	800f3b2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f318:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f31a:	78fa      	ldrb	r2, [r7, #3]
 800f31c:	6879      	ldr	r1, [r7, #4]
 800f31e:	4613      	mov	r3, r2
 800f320:	009b      	lsls	r3, r3, #2
 800f322:	4413      	add	r3, r2
 800f324:	009b      	lsls	r3, r3, #2
 800f326:	440b      	add	r3, r1
 800f328:	3318      	adds	r3, #24
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d029      	beq.n	800f384 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f330:	78fa      	ldrb	r2, [r7, #3]
 800f332:	6879      	ldr	r1, [r7, #4]
 800f334:	4613      	mov	r3, r2
 800f336:	009b      	lsls	r3, r3, #2
 800f338:	4413      	add	r3, r2
 800f33a:	009b      	lsls	r3, r3, #2
 800f33c:	440b      	add	r3, r1
 800f33e:	3318      	adds	r3, #24
 800f340:	681a      	ldr	r2, [r3, #0]
 800f342:	78f9      	ldrb	r1, [r7, #3]
 800f344:	68f8      	ldr	r0, [r7, #12]
 800f346:	460b      	mov	r3, r1
 800f348:	00db      	lsls	r3, r3, #3
 800f34a:	440b      	add	r3, r1
 800f34c:	009b      	lsls	r3, r3, #2
 800f34e:	4403      	add	r3, r0
 800f350:	3348      	adds	r3, #72	; 0x48
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	fbb2 f1f3 	udiv	r1, r2, r3
 800f358:	fb01 f303 	mul.w	r3, r1, r3
 800f35c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d110      	bne.n	800f384 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800f362:	78fa      	ldrb	r2, [r7, #3]
 800f364:	6879      	ldr	r1, [r7, #4]
 800f366:	4613      	mov	r3, r2
 800f368:	009b      	lsls	r3, r3, #2
 800f36a:	4413      	add	r3, r2
 800f36c:	009b      	lsls	r3, r3, #2
 800f36e:	440b      	add	r3, r1
 800f370:	3318      	adds	r3, #24
 800f372:	2200      	movs	r2, #0
 800f374:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f376:	78f9      	ldrb	r1, [r7, #3]
 800f378:	2300      	movs	r3, #0
 800f37a:	2200      	movs	r2, #0
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f002 f879 	bl	8011474 <USBD_LL_Transmit>
 800f382:	e015      	b.n	800f3b0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800f384:	68bb      	ldr	r3, [r7, #8]
 800f386:	2200      	movs	r2, #0
 800f388:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f392:	691b      	ldr	r3, [r3, #16]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d00b      	beq.n	800f3b0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f39e:	691b      	ldr	r3, [r3, #16]
 800f3a0:	68ba      	ldr	r2, [r7, #8]
 800f3a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800f3a6:	68ba      	ldr	r2, [r7, #8]
 800f3a8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800f3ac:	78fa      	ldrb	r2, [r7, #3]
 800f3ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f3b0:	2300      	movs	r3, #0
}
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	3710      	adds	r7, #16
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bd80      	pop	{r7, pc}

0800f3ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f3ba:	b580      	push	{r7, lr}
 800f3bc:	b084      	sub	sp, #16
 800f3be:	af00      	add	r7, sp, #0
 800f3c0:	6078      	str	r0, [r7, #4]
 800f3c2:	460b      	mov	r3, r1
 800f3c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f3cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d101      	bne.n	800f3dc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f3d8:	2303      	movs	r3, #3
 800f3da:	e015      	b.n	800f408 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f3dc:	78fb      	ldrb	r3, [r7, #3]
 800f3de:	4619      	mov	r1, r3
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f002 f8b7 	bl	8011554 <USBD_LL_GetRxDataSize>
 800f3e6:	4602      	mov	r2, r0
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f3f4:	68db      	ldr	r3, [r3, #12]
 800f3f6:	68fa      	ldr	r2, [r7, #12]
 800f3f8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f3fc:	68fa      	ldr	r2, [r7, #12]
 800f3fe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f402:	4611      	mov	r1, r2
 800f404:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f406:	2300      	movs	r3, #0
}
 800f408:	4618      	mov	r0, r3
 800f40a:	3710      	adds	r7, #16
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b084      	sub	sp, #16
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f41e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d101      	bne.n	800f42a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800f426:	2303      	movs	r3, #3
 800f428:	e01b      	b.n	800f462 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f430:	2b00      	cmp	r3, #0
 800f432:	d015      	beq.n	800f460 <USBD_CDC_EP0_RxReady+0x50>
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f43a:	2bff      	cmp	r3, #255	; 0xff
 800f43c:	d010      	beq.n	800f460 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f444:	689b      	ldr	r3, [r3, #8]
 800f446:	68fa      	ldr	r2, [r7, #12]
 800f448:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800f44c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f44e:	68fa      	ldr	r2, [r7, #12]
 800f450:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f454:	b292      	uxth	r2, r2
 800f456:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	22ff      	movs	r2, #255	; 0xff
 800f45c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800f460:	2300      	movs	r3, #0
}
 800f462:	4618      	mov	r0, r3
 800f464:	3710      	adds	r7, #16
 800f466:	46bd      	mov	sp, r7
 800f468:	bd80      	pop	{r7, pc}
	...

0800f46c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f46c:	b480      	push	{r7}
 800f46e:	b083      	sub	sp, #12
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2243      	movs	r2, #67	; 0x43
 800f478:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800f47a:	4b03      	ldr	r3, [pc, #12]	; (800f488 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f47c:	4618      	mov	r0, r3
 800f47e:	370c      	adds	r7, #12
 800f480:	46bd      	mov	sp, r7
 800f482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f486:	4770      	bx	lr
 800f488:	200000a0 	.word	0x200000a0

0800f48c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f48c:	b480      	push	{r7}
 800f48e:	b083      	sub	sp, #12
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2243      	movs	r2, #67	; 0x43
 800f498:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800f49a:	4b03      	ldr	r3, [pc, #12]	; (800f4a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f49c:	4618      	mov	r0, r3
 800f49e:	370c      	adds	r7, #12
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a6:	4770      	bx	lr
 800f4a8:	2000005c 	.word	0x2000005c

0800f4ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f4ac:	b480      	push	{r7}
 800f4ae:	b083      	sub	sp, #12
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2243      	movs	r2, #67	; 0x43
 800f4b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800f4ba:	4b03      	ldr	r3, [pc, #12]	; (800f4c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f4bc:	4618      	mov	r0, r3
 800f4be:	370c      	adds	r7, #12
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c6:	4770      	bx	lr
 800f4c8:	200000e4 	.word	0x200000e4

0800f4cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b083      	sub	sp, #12
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	220a      	movs	r2, #10
 800f4d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f4da:	4b03      	ldr	r3, [pc, #12]	; (800f4e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f4dc:	4618      	mov	r0, r3
 800f4de:	370c      	adds	r7, #12
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e6:	4770      	bx	lr
 800f4e8:	20000018 	.word	0x20000018

0800f4ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f4ec:	b480      	push	{r7}
 800f4ee:	b083      	sub	sp, #12
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d101      	bne.n	800f500 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f4fc:	2303      	movs	r3, #3
 800f4fe:	e004      	b.n	800f50a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	683a      	ldr	r2, [r7, #0]
 800f504:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800f508:	2300      	movs	r3, #0
}
 800f50a:	4618      	mov	r0, r3
 800f50c:	370c      	adds	r7, #12
 800f50e:	46bd      	mov	sp, r7
 800f510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f514:	4770      	bx	lr

0800f516 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f516:	b480      	push	{r7}
 800f518:	b087      	sub	sp, #28
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	60f8      	str	r0, [r7, #12]
 800f51e:	60b9      	str	r1, [r7, #8]
 800f520:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f528:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800f52a:	697b      	ldr	r3, [r7, #20]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d101      	bne.n	800f534 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f530:	2303      	movs	r3, #3
 800f532:	e008      	b.n	800f546 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800f534:	697b      	ldr	r3, [r7, #20]
 800f536:	68ba      	ldr	r2, [r7, #8]
 800f538:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	687a      	ldr	r2, [r7, #4]
 800f540:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800f544:	2300      	movs	r3, #0
}
 800f546:	4618      	mov	r0, r3
 800f548:	371c      	adds	r7, #28
 800f54a:	46bd      	mov	sp, r7
 800f54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f550:	4770      	bx	lr

0800f552 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f552:	b480      	push	{r7}
 800f554:	b085      	sub	sp, #20
 800f556:	af00      	add	r7, sp, #0
 800f558:	6078      	str	r0, [r7, #4]
 800f55a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f562:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d101      	bne.n	800f56e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800f56a:	2303      	movs	r3, #3
 800f56c:	e004      	b.n	800f578 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	683a      	ldr	r2, [r7, #0]
 800f572:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800f576:	2300      	movs	r3, #0
}
 800f578:	4618      	mov	r0, r3
 800f57a:	3714      	adds	r7, #20
 800f57c:	46bd      	mov	sp, r7
 800f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f582:	4770      	bx	lr

0800f584 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b084      	sub	sp, #16
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f592:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800f594:	2301      	movs	r3, #1
 800f596:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d101      	bne.n	800f5a6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f5a2:	2303      	movs	r3, #3
 800f5a4:	e01a      	b.n	800f5dc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d114      	bne.n	800f5da <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	2201      	movs	r2, #1
 800f5b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800f5b8:	68bb      	ldr	r3, [r7, #8]
 800f5ba:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f5ce:	2181      	movs	r1, #129	; 0x81
 800f5d0:	6878      	ldr	r0, [r7, #4]
 800f5d2:	f001 ff4f 	bl	8011474 <USBD_LL_Transmit>

    ret = USBD_OK;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f5da:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5dc:	4618      	mov	r0, r3
 800f5de:	3710      	adds	r7, #16
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}

0800f5e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b084      	sub	sp, #16
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f5f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d101      	bne.n	800f602 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f5fe:	2303      	movs	r3, #3
 800f600:	e016      	b.n	800f630 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	7c1b      	ldrb	r3, [r3, #16]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d109      	bne.n	800f61e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f610:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f614:	2101      	movs	r1, #1
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f001 ff64 	bl	80114e4 <USBD_LL_PrepareReceive>
 800f61c:	e007      	b.n	800f62e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f624:	2340      	movs	r3, #64	; 0x40
 800f626:	2101      	movs	r1, #1
 800f628:	6878      	ldr	r0, [r7, #4]
 800f62a:	f001 ff5b 	bl	80114e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f62e:	2300      	movs	r3, #0
}
 800f630:	4618      	mov	r0, r3
 800f632:	3710      	adds	r7, #16
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}

0800f638 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b086      	sub	sp, #24
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	60f8      	str	r0, [r7, #12]
 800f640:	60b9      	str	r1, [r7, #8]
 800f642:	4613      	mov	r3, r2
 800f644:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d101      	bne.n	800f650 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f64c:	2303      	movs	r3, #3
 800f64e:	e01f      	b.n	800f690 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	2200      	movs	r2, #0
 800f654:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	2200      	movs	r2, #0
 800f65c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	2200      	movs	r2, #0
 800f664:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d003      	beq.n	800f676 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	68ba      	ldr	r2, [r7, #8]
 800f672:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	2201      	movs	r2, #1
 800f67a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	79fa      	ldrb	r2, [r7, #7]
 800f682:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f684:	68f8      	ldr	r0, [r7, #12]
 800f686:	f001 fd37 	bl	80110f8 <USBD_LL_Init>
 800f68a:	4603      	mov	r3, r0
 800f68c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f68e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f690:	4618      	mov	r0, r3
 800f692:	3718      	adds	r7, #24
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}

0800f698 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b084      	sub	sp, #16
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d101      	bne.n	800f6b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f6ac:	2303      	movs	r3, #3
 800f6ae:	e016      	b.n	800f6de <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	683a      	ldr	r2, [r7, #0]
 800f6b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d00b      	beq.n	800f6dc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6cc:	f107 020e 	add.w	r2, r7, #14
 800f6d0:	4610      	mov	r0, r2
 800f6d2:	4798      	blx	r3
 800f6d4:	4602      	mov	r2, r0
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f6dc:	2300      	movs	r3, #0
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3710      	adds	r7, #16
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}

0800f6e6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f6e6:	b580      	push	{r7, lr}
 800f6e8:	b082      	sub	sp, #8
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f001 fd4c 	bl	801118c <USBD_LL_Start>
 800f6f4:	4603      	mov	r3, r0
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3708      	adds	r7, #8
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}

0800f6fe <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f6fe:	b480      	push	{r7}
 800f700:	b083      	sub	sp, #12
 800f702:	af00      	add	r7, sp, #0
 800f704:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f706:	2300      	movs	r3, #0
}
 800f708:	4618      	mov	r0, r3
 800f70a:	370c      	adds	r7, #12
 800f70c:	46bd      	mov	sp, r7
 800f70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f712:	4770      	bx	lr

0800f714 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b084      	sub	sp, #16
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
 800f71c:	460b      	mov	r3, r1
 800f71e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f720:	2303      	movs	r3, #3
 800f722:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d009      	beq.n	800f742 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	78fa      	ldrb	r2, [r7, #3]
 800f738:	4611      	mov	r1, r2
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	4798      	blx	r3
 800f73e:	4603      	mov	r3, r0
 800f740:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f742:	7bfb      	ldrb	r3, [r7, #15]
}
 800f744:	4618      	mov	r0, r3
 800f746:	3710      	adds	r7, #16
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}

0800f74c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b082      	sub	sp, #8
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
 800f754:	460b      	mov	r3, r1
 800f756:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d007      	beq.n	800f772 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f768:	685b      	ldr	r3, [r3, #4]
 800f76a:	78fa      	ldrb	r2, [r7, #3]
 800f76c:	4611      	mov	r1, r2
 800f76e:	6878      	ldr	r0, [r7, #4]
 800f770:	4798      	blx	r3
  }

  return USBD_OK;
 800f772:	2300      	movs	r3, #0
}
 800f774:	4618      	mov	r0, r3
 800f776:	3708      	adds	r7, #8
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd80      	pop	{r7, pc}

0800f77c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b084      	sub	sp, #16
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
 800f784:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f78c:	6839      	ldr	r1, [r7, #0]
 800f78e:	4618      	mov	r0, r3
 800f790:	f000 ff90 	bl	80106b4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2201      	movs	r2, #1
 800f798:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f7a2:	461a      	mov	r2, r3
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f7b0:	f003 031f 	and.w	r3, r3, #31
 800f7b4:	2b02      	cmp	r3, #2
 800f7b6:	d01a      	beq.n	800f7ee <USBD_LL_SetupStage+0x72>
 800f7b8:	2b02      	cmp	r3, #2
 800f7ba:	d822      	bhi.n	800f802 <USBD_LL_SetupStage+0x86>
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d002      	beq.n	800f7c6 <USBD_LL_SetupStage+0x4a>
 800f7c0:	2b01      	cmp	r3, #1
 800f7c2:	d00a      	beq.n	800f7da <USBD_LL_SetupStage+0x5e>
 800f7c4:	e01d      	b.n	800f802 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f7cc:	4619      	mov	r1, r3
 800f7ce:	6878      	ldr	r0, [r7, #4]
 800f7d0:	f000 fa62 	bl	800fc98 <USBD_StdDevReq>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	73fb      	strb	r3, [r7, #15]
      break;
 800f7d8:	e020      	b.n	800f81c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f7e0:	4619      	mov	r1, r3
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	f000 fac6 	bl	800fd74 <USBD_StdItfReq>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	73fb      	strb	r3, [r7, #15]
      break;
 800f7ec:	e016      	b.n	800f81c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f7f4:	4619      	mov	r1, r3
 800f7f6:	6878      	ldr	r0, [r7, #4]
 800f7f8:	f000 fb05 	bl	800fe06 <USBD_StdEPReq>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	73fb      	strb	r3, [r7, #15]
      break;
 800f800:	e00c      	b.n	800f81c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f808:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f80c:	b2db      	uxtb	r3, r3
 800f80e:	4619      	mov	r1, r3
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f001 fd61 	bl	80112d8 <USBD_LL_StallEP>
 800f816:	4603      	mov	r3, r0
 800f818:	73fb      	strb	r3, [r7, #15]
      break;
 800f81a:	bf00      	nop
  }

  return ret;
 800f81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f81e:	4618      	mov	r0, r3
 800f820:	3710      	adds	r7, #16
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}

0800f826 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f826:	b580      	push	{r7, lr}
 800f828:	b086      	sub	sp, #24
 800f82a:	af00      	add	r7, sp, #0
 800f82c:	60f8      	str	r0, [r7, #12]
 800f82e:	460b      	mov	r3, r1
 800f830:	607a      	str	r2, [r7, #4]
 800f832:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f834:	7afb      	ldrb	r3, [r7, #11]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d138      	bne.n	800f8ac <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f840:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f848:	2b03      	cmp	r3, #3
 800f84a:	d14a      	bne.n	800f8e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f84c:	693b      	ldr	r3, [r7, #16]
 800f84e:	689a      	ldr	r2, [r3, #8]
 800f850:	693b      	ldr	r3, [r7, #16]
 800f852:	68db      	ldr	r3, [r3, #12]
 800f854:	429a      	cmp	r2, r3
 800f856:	d913      	bls.n	800f880 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f858:	693b      	ldr	r3, [r7, #16]
 800f85a:	689a      	ldr	r2, [r3, #8]
 800f85c:	693b      	ldr	r3, [r7, #16]
 800f85e:	68db      	ldr	r3, [r3, #12]
 800f860:	1ad2      	subs	r2, r2, r3
 800f862:	693b      	ldr	r3, [r7, #16]
 800f864:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f866:	693b      	ldr	r3, [r7, #16]
 800f868:	68da      	ldr	r2, [r3, #12]
 800f86a:	693b      	ldr	r3, [r7, #16]
 800f86c:	689b      	ldr	r3, [r3, #8]
 800f86e:	4293      	cmp	r3, r2
 800f870:	bf28      	it	cs
 800f872:	4613      	movcs	r3, r2
 800f874:	461a      	mov	r2, r3
 800f876:	6879      	ldr	r1, [r7, #4]
 800f878:	68f8      	ldr	r0, [r7, #12]
 800f87a:	f001 f80f 	bl	801089c <USBD_CtlContinueRx>
 800f87e:	e030      	b.n	800f8e2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f886:	b2db      	uxtb	r3, r3
 800f888:	2b03      	cmp	r3, #3
 800f88a:	d10b      	bne.n	800f8a4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f892:	691b      	ldr	r3, [r3, #16]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d005      	beq.n	800f8a4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f89e:	691b      	ldr	r3, [r3, #16]
 800f8a0:	68f8      	ldr	r0, [r7, #12]
 800f8a2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f8a4:	68f8      	ldr	r0, [r7, #12]
 800f8a6:	f001 f80a 	bl	80108be <USBD_CtlSendStatus>
 800f8aa:	e01a      	b.n	800f8e2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8b2:	b2db      	uxtb	r3, r3
 800f8b4:	2b03      	cmp	r3, #3
 800f8b6:	d114      	bne.n	800f8e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8be:	699b      	ldr	r3, [r3, #24]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d00e      	beq.n	800f8e2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8ca:	699b      	ldr	r3, [r3, #24]
 800f8cc:	7afa      	ldrb	r2, [r7, #11]
 800f8ce:	4611      	mov	r1, r2
 800f8d0:	68f8      	ldr	r0, [r7, #12]
 800f8d2:	4798      	blx	r3
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f8d8:	7dfb      	ldrb	r3, [r7, #23]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d001      	beq.n	800f8e2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800f8de:	7dfb      	ldrb	r3, [r7, #23]
 800f8e0:	e000      	b.n	800f8e4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800f8e2:	2300      	movs	r3, #0
}
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	3718      	adds	r7, #24
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd80      	pop	{r7, pc}

0800f8ec <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b086      	sub	sp, #24
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	60f8      	str	r0, [r7, #12]
 800f8f4:	460b      	mov	r3, r1
 800f8f6:	607a      	str	r2, [r7, #4]
 800f8f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f8fa:	7afb      	ldrb	r3, [r7, #11]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d16b      	bne.n	800f9d8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	3314      	adds	r3, #20
 800f904:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f90c:	2b02      	cmp	r3, #2
 800f90e:	d156      	bne.n	800f9be <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f910:	693b      	ldr	r3, [r7, #16]
 800f912:	689a      	ldr	r2, [r3, #8]
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	68db      	ldr	r3, [r3, #12]
 800f918:	429a      	cmp	r2, r3
 800f91a:	d914      	bls.n	800f946 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	689a      	ldr	r2, [r3, #8]
 800f920:	693b      	ldr	r3, [r7, #16]
 800f922:	68db      	ldr	r3, [r3, #12]
 800f924:	1ad2      	subs	r2, r2, r3
 800f926:	693b      	ldr	r3, [r7, #16]
 800f928:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f92a:	693b      	ldr	r3, [r7, #16]
 800f92c:	689b      	ldr	r3, [r3, #8]
 800f92e:	461a      	mov	r2, r3
 800f930:	6879      	ldr	r1, [r7, #4]
 800f932:	68f8      	ldr	r0, [r7, #12]
 800f934:	f000 ff84 	bl	8010840 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f938:	2300      	movs	r3, #0
 800f93a:	2200      	movs	r2, #0
 800f93c:	2100      	movs	r1, #0
 800f93e:	68f8      	ldr	r0, [r7, #12]
 800f940:	f001 fdd0 	bl	80114e4 <USBD_LL_PrepareReceive>
 800f944:	e03b      	b.n	800f9be <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f946:	693b      	ldr	r3, [r7, #16]
 800f948:	68da      	ldr	r2, [r3, #12]
 800f94a:	693b      	ldr	r3, [r7, #16]
 800f94c:	689b      	ldr	r3, [r3, #8]
 800f94e:	429a      	cmp	r2, r3
 800f950:	d11c      	bne.n	800f98c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f952:	693b      	ldr	r3, [r7, #16]
 800f954:	685a      	ldr	r2, [r3, #4]
 800f956:	693b      	ldr	r3, [r7, #16]
 800f958:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f95a:	429a      	cmp	r2, r3
 800f95c:	d316      	bcc.n	800f98c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f95e:	693b      	ldr	r3, [r7, #16]
 800f960:	685a      	ldr	r2, [r3, #4]
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f968:	429a      	cmp	r2, r3
 800f96a:	d20f      	bcs.n	800f98c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f96c:	2200      	movs	r2, #0
 800f96e:	2100      	movs	r1, #0
 800f970:	68f8      	ldr	r0, [r7, #12]
 800f972:	f000 ff65 	bl	8010840 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	2200      	movs	r2, #0
 800f97a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f97e:	2300      	movs	r3, #0
 800f980:	2200      	movs	r2, #0
 800f982:	2100      	movs	r1, #0
 800f984:	68f8      	ldr	r0, [r7, #12]
 800f986:	f001 fdad 	bl	80114e4 <USBD_LL_PrepareReceive>
 800f98a:	e018      	b.n	800f9be <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f992:	b2db      	uxtb	r3, r3
 800f994:	2b03      	cmp	r3, #3
 800f996:	d10b      	bne.n	800f9b0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f99e:	68db      	ldr	r3, [r3, #12]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d005      	beq.n	800f9b0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9aa:	68db      	ldr	r3, [r3, #12]
 800f9ac:	68f8      	ldr	r0, [r7, #12]
 800f9ae:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f9b0:	2180      	movs	r1, #128	; 0x80
 800f9b2:	68f8      	ldr	r0, [r7, #12]
 800f9b4:	f001 fc90 	bl	80112d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f9b8:	68f8      	ldr	r0, [r7, #12]
 800f9ba:	f000 ff93 	bl	80108e4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f9c4:	2b01      	cmp	r3, #1
 800f9c6:	d122      	bne.n	800fa0e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f9c8:	68f8      	ldr	r0, [r7, #12]
 800f9ca:	f7ff fe98 	bl	800f6fe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f9d6:	e01a      	b.n	800fa0e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9de:	b2db      	uxtb	r3, r3
 800f9e0:	2b03      	cmp	r3, #3
 800f9e2:	d114      	bne.n	800fa0e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9ea:	695b      	ldr	r3, [r3, #20]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d00e      	beq.n	800fa0e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9f6:	695b      	ldr	r3, [r3, #20]
 800f9f8:	7afa      	ldrb	r2, [r7, #11]
 800f9fa:	4611      	mov	r1, r2
 800f9fc:	68f8      	ldr	r0, [r7, #12]
 800f9fe:	4798      	blx	r3
 800fa00:	4603      	mov	r3, r0
 800fa02:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800fa04:	7dfb      	ldrb	r3, [r7, #23]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d001      	beq.n	800fa0e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800fa0a:	7dfb      	ldrb	r3, [r7, #23]
 800fa0c:	e000      	b.n	800fa10 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800fa0e:	2300      	movs	r3, #0
}
 800fa10:	4618      	mov	r0, r3
 800fa12:	3718      	adds	r7, #24
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}

0800fa18 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2201      	movs	r2, #1
 800fa24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2200      	movs	r2, #0
 800fa34:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2200      	movs	r2, #0
 800fa3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d101      	bne.n	800fa4c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800fa48:	2303      	movs	r3, #3
 800fa4a:	e02f      	b.n	800faac <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d00f      	beq.n	800fa76 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa5c:	685b      	ldr	r3, [r3, #4]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d009      	beq.n	800fa76 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa68:	685b      	ldr	r3, [r3, #4]
 800fa6a:	687a      	ldr	r2, [r7, #4]
 800fa6c:	6852      	ldr	r2, [r2, #4]
 800fa6e:	b2d2      	uxtb	r2, r2
 800fa70:	4611      	mov	r1, r2
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fa76:	2340      	movs	r3, #64	; 0x40
 800fa78:	2200      	movs	r2, #0
 800fa7a:	2100      	movs	r1, #0
 800fa7c:	6878      	ldr	r0, [r7, #4]
 800fa7e:	f001 fbb7 	bl	80111f0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	2201      	movs	r2, #1
 800fa86:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	2240      	movs	r2, #64	; 0x40
 800fa8e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fa92:	2340      	movs	r3, #64	; 0x40
 800fa94:	2200      	movs	r2, #0
 800fa96:	2180      	movs	r1, #128	; 0x80
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f001 fba9 	bl	80111f0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2201      	movs	r2, #1
 800faa2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2240      	movs	r2, #64	; 0x40
 800faa8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800faaa:	2300      	movs	r3, #0
}
 800faac:	4618      	mov	r0, r3
 800faae:	3708      	adds	r7, #8
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}

0800fab4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fab4:	b480      	push	{r7}
 800fab6:	b083      	sub	sp, #12
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
 800fabc:	460b      	mov	r3, r1
 800fabe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	78fa      	ldrb	r2, [r7, #3]
 800fac4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fac6:	2300      	movs	r3, #0
}
 800fac8:	4618      	mov	r0, r3
 800faca:	370c      	adds	r7, #12
 800facc:	46bd      	mov	sp, r7
 800face:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad2:	4770      	bx	lr

0800fad4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800fad4:	b480      	push	{r7}
 800fad6:	b083      	sub	sp, #12
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fae2:	b2da      	uxtb	r2, r3
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2204      	movs	r2, #4
 800faee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800faf2:	2300      	movs	r3, #0
}
 800faf4:	4618      	mov	r0, r3
 800faf6:	370c      	adds	r7, #12
 800faf8:	46bd      	mov	sp, r7
 800fafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafe:	4770      	bx	lr

0800fb00 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800fb00:	b480      	push	{r7}
 800fb02:	b083      	sub	sp, #12
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb0e:	b2db      	uxtb	r3, r3
 800fb10:	2b04      	cmp	r3, #4
 800fb12:	d106      	bne.n	800fb22 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800fb1a:	b2da      	uxtb	r2, r3
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800fb22:	2300      	movs	r3, #0
}
 800fb24:	4618      	mov	r0, r3
 800fb26:	370c      	adds	r7, #12
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2e:	4770      	bx	lr

0800fb30 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b082      	sub	sp, #8
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d101      	bne.n	800fb46 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800fb42:	2303      	movs	r3, #3
 800fb44:	e012      	b.n	800fb6c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb4c:	b2db      	uxtb	r3, r3
 800fb4e:	2b03      	cmp	r3, #3
 800fb50:	d10b      	bne.n	800fb6a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb58:	69db      	ldr	r3, [r3, #28]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d005      	beq.n	800fb6a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb64:	69db      	ldr	r3, [r3, #28]
 800fb66:	6878      	ldr	r0, [r7, #4]
 800fb68:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fb6a:	2300      	movs	r3, #0
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3708      	adds	r7, #8
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}

0800fb74 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b082      	sub	sp, #8
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
 800fb7c:	460b      	mov	r3, r1
 800fb7e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d101      	bne.n	800fb8e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800fb8a:	2303      	movs	r3, #3
 800fb8c:	e014      	b.n	800fbb8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb94:	b2db      	uxtb	r3, r3
 800fb96:	2b03      	cmp	r3, #3
 800fb98:	d10d      	bne.n	800fbb6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fba0:	6a1b      	ldr	r3, [r3, #32]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d007      	beq.n	800fbb6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbac:	6a1b      	ldr	r3, [r3, #32]
 800fbae:	78fa      	ldrb	r2, [r7, #3]
 800fbb0:	4611      	mov	r1, r2
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fbb6:	2300      	movs	r3, #0
}
 800fbb8:	4618      	mov	r0, r3
 800fbba:	3708      	adds	r7, #8
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd80      	pop	{r7, pc}

0800fbc0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b082      	sub	sp, #8
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	460b      	mov	r3, r1
 800fbca:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d101      	bne.n	800fbda <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800fbd6:	2303      	movs	r3, #3
 800fbd8:	e014      	b.n	800fc04 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbe0:	b2db      	uxtb	r3, r3
 800fbe2:	2b03      	cmp	r3, #3
 800fbe4:	d10d      	bne.n	800fc02 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d007      	beq.n	800fc02 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbfa:	78fa      	ldrb	r2, [r7, #3]
 800fbfc:	4611      	mov	r1, r2
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fc02:	2300      	movs	r3, #0
}
 800fc04:	4618      	mov	r0, r3
 800fc06:	3708      	adds	r7, #8
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd80      	pop	{r7, pc}

0800fc0c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	b083      	sub	sp, #12
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fc14:	2300      	movs	r3, #0
}
 800fc16:	4618      	mov	r0, r3
 800fc18:	370c      	adds	r7, #12
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc20:	4770      	bx	lr

0800fc22 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800fc22:	b580      	push	{r7, lr}
 800fc24:	b082      	sub	sp, #8
 800fc26:	af00      	add	r7, sp, #0
 800fc28:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2201      	movs	r2, #1
 800fc2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d009      	beq.n	800fc50 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc42:	685b      	ldr	r3, [r3, #4]
 800fc44:	687a      	ldr	r2, [r7, #4]
 800fc46:	6852      	ldr	r2, [r2, #4]
 800fc48:	b2d2      	uxtb	r2, r2
 800fc4a:	4611      	mov	r1, r2
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	4798      	blx	r3
  }

  return USBD_OK;
 800fc50:	2300      	movs	r3, #0
}
 800fc52:	4618      	mov	r0, r3
 800fc54:	3708      	adds	r7, #8
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}

0800fc5a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800fc5a:	b480      	push	{r7}
 800fc5c:	b087      	sub	sp, #28
 800fc5e:	af00      	add	r7, sp, #0
 800fc60:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	781b      	ldrb	r3, [r3, #0]
 800fc6a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800fc6c:	697b      	ldr	r3, [r7, #20]
 800fc6e:	3301      	adds	r3, #1
 800fc70:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	781b      	ldrb	r3, [r3, #0]
 800fc76:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800fc78:	8a3b      	ldrh	r3, [r7, #16]
 800fc7a:	021b      	lsls	r3, r3, #8
 800fc7c:	b21a      	sxth	r2, r3
 800fc7e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fc82:	4313      	orrs	r3, r2
 800fc84:	b21b      	sxth	r3, r3
 800fc86:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800fc88:	89fb      	ldrh	r3, [r7, #14]
}
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	371c      	adds	r7, #28
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc94:	4770      	bx	lr
	...

0800fc98 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b084      	sub	sp, #16
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
 800fca0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fca2:	2300      	movs	r3, #0
 800fca4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	781b      	ldrb	r3, [r3, #0]
 800fcaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fcae:	2b40      	cmp	r3, #64	; 0x40
 800fcb0:	d005      	beq.n	800fcbe <USBD_StdDevReq+0x26>
 800fcb2:	2b40      	cmp	r3, #64	; 0x40
 800fcb4:	d853      	bhi.n	800fd5e <USBD_StdDevReq+0xc6>
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d00b      	beq.n	800fcd2 <USBD_StdDevReq+0x3a>
 800fcba:	2b20      	cmp	r3, #32
 800fcbc:	d14f      	bne.n	800fd5e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fcc4:	689b      	ldr	r3, [r3, #8]
 800fcc6:	6839      	ldr	r1, [r7, #0]
 800fcc8:	6878      	ldr	r0, [r7, #4]
 800fcca:	4798      	blx	r3
 800fccc:	4603      	mov	r3, r0
 800fcce:	73fb      	strb	r3, [r7, #15]
      break;
 800fcd0:	e04a      	b.n	800fd68 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	785b      	ldrb	r3, [r3, #1]
 800fcd6:	2b09      	cmp	r3, #9
 800fcd8:	d83b      	bhi.n	800fd52 <USBD_StdDevReq+0xba>
 800fcda:	a201      	add	r2, pc, #4	; (adr r2, 800fce0 <USBD_StdDevReq+0x48>)
 800fcdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fce0:	0800fd35 	.word	0x0800fd35
 800fce4:	0800fd49 	.word	0x0800fd49
 800fce8:	0800fd53 	.word	0x0800fd53
 800fcec:	0800fd3f 	.word	0x0800fd3f
 800fcf0:	0800fd53 	.word	0x0800fd53
 800fcf4:	0800fd13 	.word	0x0800fd13
 800fcf8:	0800fd09 	.word	0x0800fd09
 800fcfc:	0800fd53 	.word	0x0800fd53
 800fd00:	0800fd2b 	.word	0x0800fd2b
 800fd04:	0800fd1d 	.word	0x0800fd1d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fd08:	6839      	ldr	r1, [r7, #0]
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f000 f9de 	bl	80100cc <USBD_GetDescriptor>
          break;
 800fd10:	e024      	b.n	800fd5c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fd12:	6839      	ldr	r1, [r7, #0]
 800fd14:	6878      	ldr	r0, [r7, #4]
 800fd16:	f000 fb43 	bl	80103a0 <USBD_SetAddress>
          break;
 800fd1a:	e01f      	b.n	800fd5c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800fd1c:	6839      	ldr	r1, [r7, #0]
 800fd1e:	6878      	ldr	r0, [r7, #4]
 800fd20:	f000 fb82 	bl	8010428 <USBD_SetConfig>
 800fd24:	4603      	mov	r3, r0
 800fd26:	73fb      	strb	r3, [r7, #15]
          break;
 800fd28:	e018      	b.n	800fd5c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800fd2a:	6839      	ldr	r1, [r7, #0]
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f000 fc21 	bl	8010574 <USBD_GetConfig>
          break;
 800fd32:	e013      	b.n	800fd5c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800fd34:	6839      	ldr	r1, [r7, #0]
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f000 fc52 	bl	80105e0 <USBD_GetStatus>
          break;
 800fd3c:	e00e      	b.n	800fd5c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800fd3e:	6839      	ldr	r1, [r7, #0]
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f000 fc81 	bl	8010648 <USBD_SetFeature>
          break;
 800fd46:	e009      	b.n	800fd5c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fd48:	6839      	ldr	r1, [r7, #0]
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f000 fc90 	bl	8010670 <USBD_ClrFeature>
          break;
 800fd50:	e004      	b.n	800fd5c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800fd52:	6839      	ldr	r1, [r7, #0]
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f000 fce7 	bl	8010728 <USBD_CtlError>
          break;
 800fd5a:	bf00      	nop
      }
      break;
 800fd5c:	e004      	b.n	800fd68 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800fd5e:	6839      	ldr	r1, [r7, #0]
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f000 fce1 	bl	8010728 <USBD_CtlError>
      break;
 800fd66:	bf00      	nop
  }

  return ret;
 800fd68:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	3710      	adds	r7, #16
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}
 800fd72:	bf00      	nop

0800fd74 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b084      	sub	sp, #16
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
 800fd7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd7e:	2300      	movs	r3, #0
 800fd80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	781b      	ldrb	r3, [r3, #0]
 800fd86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fd8a:	2b40      	cmp	r3, #64	; 0x40
 800fd8c:	d005      	beq.n	800fd9a <USBD_StdItfReq+0x26>
 800fd8e:	2b40      	cmp	r3, #64	; 0x40
 800fd90:	d82f      	bhi.n	800fdf2 <USBD_StdItfReq+0x7e>
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d001      	beq.n	800fd9a <USBD_StdItfReq+0x26>
 800fd96:	2b20      	cmp	r3, #32
 800fd98:	d12b      	bne.n	800fdf2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fda0:	b2db      	uxtb	r3, r3
 800fda2:	3b01      	subs	r3, #1
 800fda4:	2b02      	cmp	r3, #2
 800fda6:	d81d      	bhi.n	800fde4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	889b      	ldrh	r3, [r3, #4]
 800fdac:	b2db      	uxtb	r3, r3
 800fdae:	2b01      	cmp	r3, #1
 800fdb0:	d813      	bhi.n	800fdda <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdb8:	689b      	ldr	r3, [r3, #8]
 800fdba:	6839      	ldr	r1, [r7, #0]
 800fdbc:	6878      	ldr	r0, [r7, #4]
 800fdbe:	4798      	blx	r3
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	88db      	ldrh	r3, [r3, #6]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d110      	bne.n	800fdee <USBD_StdItfReq+0x7a>
 800fdcc:	7bfb      	ldrb	r3, [r7, #15]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d10d      	bne.n	800fdee <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800fdd2:	6878      	ldr	r0, [r7, #4]
 800fdd4:	f000 fd73 	bl	80108be <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800fdd8:	e009      	b.n	800fdee <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800fdda:	6839      	ldr	r1, [r7, #0]
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f000 fca3 	bl	8010728 <USBD_CtlError>
          break;
 800fde2:	e004      	b.n	800fdee <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800fde4:	6839      	ldr	r1, [r7, #0]
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	f000 fc9e 	bl	8010728 <USBD_CtlError>
          break;
 800fdec:	e000      	b.n	800fdf0 <USBD_StdItfReq+0x7c>
          break;
 800fdee:	bf00      	nop
      }
      break;
 800fdf0:	e004      	b.n	800fdfc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800fdf2:	6839      	ldr	r1, [r7, #0]
 800fdf4:	6878      	ldr	r0, [r7, #4]
 800fdf6:	f000 fc97 	bl	8010728 <USBD_CtlError>
      break;
 800fdfa:	bf00      	nop
  }

  return ret;
 800fdfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3710      	adds	r7, #16
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}

0800fe06 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe06:	b580      	push	{r7, lr}
 800fe08:	b084      	sub	sp, #16
 800fe0a:	af00      	add	r7, sp, #0
 800fe0c:	6078      	str	r0, [r7, #4]
 800fe0e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800fe10:	2300      	movs	r3, #0
 800fe12:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	889b      	ldrh	r3, [r3, #4]
 800fe18:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	781b      	ldrb	r3, [r3, #0]
 800fe1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fe22:	2b40      	cmp	r3, #64	; 0x40
 800fe24:	d007      	beq.n	800fe36 <USBD_StdEPReq+0x30>
 800fe26:	2b40      	cmp	r3, #64	; 0x40
 800fe28:	f200 8145 	bhi.w	80100b6 <USBD_StdEPReq+0x2b0>
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d00c      	beq.n	800fe4a <USBD_StdEPReq+0x44>
 800fe30:	2b20      	cmp	r3, #32
 800fe32:	f040 8140 	bne.w	80100b6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe3c:	689b      	ldr	r3, [r3, #8]
 800fe3e:	6839      	ldr	r1, [r7, #0]
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	4798      	blx	r3
 800fe44:	4603      	mov	r3, r0
 800fe46:	73fb      	strb	r3, [r7, #15]
      break;
 800fe48:	e13a      	b.n	80100c0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	785b      	ldrb	r3, [r3, #1]
 800fe4e:	2b03      	cmp	r3, #3
 800fe50:	d007      	beq.n	800fe62 <USBD_StdEPReq+0x5c>
 800fe52:	2b03      	cmp	r3, #3
 800fe54:	f300 8129 	bgt.w	80100aa <USBD_StdEPReq+0x2a4>
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d07f      	beq.n	800ff5c <USBD_StdEPReq+0x156>
 800fe5c:	2b01      	cmp	r3, #1
 800fe5e:	d03c      	beq.n	800feda <USBD_StdEPReq+0xd4>
 800fe60:	e123      	b.n	80100aa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe68:	b2db      	uxtb	r3, r3
 800fe6a:	2b02      	cmp	r3, #2
 800fe6c:	d002      	beq.n	800fe74 <USBD_StdEPReq+0x6e>
 800fe6e:	2b03      	cmp	r3, #3
 800fe70:	d016      	beq.n	800fea0 <USBD_StdEPReq+0x9a>
 800fe72:	e02c      	b.n	800fece <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fe74:	7bbb      	ldrb	r3, [r7, #14]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d00d      	beq.n	800fe96 <USBD_StdEPReq+0x90>
 800fe7a:	7bbb      	ldrb	r3, [r7, #14]
 800fe7c:	2b80      	cmp	r3, #128	; 0x80
 800fe7e:	d00a      	beq.n	800fe96 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fe80:	7bbb      	ldrb	r3, [r7, #14]
 800fe82:	4619      	mov	r1, r3
 800fe84:	6878      	ldr	r0, [r7, #4]
 800fe86:	f001 fa27 	bl	80112d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fe8a:	2180      	movs	r1, #128	; 0x80
 800fe8c:	6878      	ldr	r0, [r7, #4]
 800fe8e:	f001 fa23 	bl	80112d8 <USBD_LL_StallEP>
 800fe92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fe94:	e020      	b.n	800fed8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800fe96:	6839      	ldr	r1, [r7, #0]
 800fe98:	6878      	ldr	r0, [r7, #4]
 800fe9a:	f000 fc45 	bl	8010728 <USBD_CtlError>
              break;
 800fe9e:	e01b      	b.n	800fed8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fea0:	683b      	ldr	r3, [r7, #0]
 800fea2:	885b      	ldrh	r3, [r3, #2]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d10e      	bne.n	800fec6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fea8:	7bbb      	ldrb	r3, [r7, #14]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d00b      	beq.n	800fec6 <USBD_StdEPReq+0xc0>
 800feae:	7bbb      	ldrb	r3, [r7, #14]
 800feb0:	2b80      	cmp	r3, #128	; 0x80
 800feb2:	d008      	beq.n	800fec6 <USBD_StdEPReq+0xc0>
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	88db      	ldrh	r3, [r3, #6]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d104      	bne.n	800fec6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800febc:	7bbb      	ldrb	r3, [r7, #14]
 800febe:	4619      	mov	r1, r3
 800fec0:	6878      	ldr	r0, [r7, #4]
 800fec2:	f001 fa09 	bl	80112d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f000 fcf9 	bl	80108be <USBD_CtlSendStatus>

              break;
 800fecc:	e004      	b.n	800fed8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800fece:	6839      	ldr	r1, [r7, #0]
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f000 fc29 	bl	8010728 <USBD_CtlError>
              break;
 800fed6:	bf00      	nop
          }
          break;
 800fed8:	e0ec      	b.n	80100b4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fee0:	b2db      	uxtb	r3, r3
 800fee2:	2b02      	cmp	r3, #2
 800fee4:	d002      	beq.n	800feec <USBD_StdEPReq+0xe6>
 800fee6:	2b03      	cmp	r3, #3
 800fee8:	d016      	beq.n	800ff18 <USBD_StdEPReq+0x112>
 800feea:	e030      	b.n	800ff4e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800feec:	7bbb      	ldrb	r3, [r7, #14]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d00d      	beq.n	800ff0e <USBD_StdEPReq+0x108>
 800fef2:	7bbb      	ldrb	r3, [r7, #14]
 800fef4:	2b80      	cmp	r3, #128	; 0x80
 800fef6:	d00a      	beq.n	800ff0e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fef8:	7bbb      	ldrb	r3, [r7, #14]
 800fefa:	4619      	mov	r1, r3
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f001 f9eb 	bl	80112d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ff02:	2180      	movs	r1, #128	; 0x80
 800ff04:	6878      	ldr	r0, [r7, #4]
 800ff06:	f001 f9e7 	bl	80112d8 <USBD_LL_StallEP>
 800ff0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ff0c:	e025      	b.n	800ff5a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ff0e:	6839      	ldr	r1, [r7, #0]
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	f000 fc09 	bl	8010728 <USBD_CtlError>
              break;
 800ff16:	e020      	b.n	800ff5a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	885b      	ldrh	r3, [r3, #2]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d11b      	bne.n	800ff58 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ff20:	7bbb      	ldrb	r3, [r7, #14]
 800ff22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d004      	beq.n	800ff34 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ff2a:	7bbb      	ldrb	r3, [r7, #14]
 800ff2c:	4619      	mov	r1, r3
 800ff2e:	6878      	ldr	r0, [r7, #4]
 800ff30:	f001 fa08 	bl	8011344 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f000 fcc2 	bl	80108be <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff40:	689b      	ldr	r3, [r3, #8]
 800ff42:	6839      	ldr	r1, [r7, #0]
 800ff44:	6878      	ldr	r0, [r7, #4]
 800ff46:	4798      	blx	r3
 800ff48:	4603      	mov	r3, r0
 800ff4a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ff4c:	e004      	b.n	800ff58 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ff4e:	6839      	ldr	r1, [r7, #0]
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f000 fbe9 	bl	8010728 <USBD_CtlError>
              break;
 800ff56:	e000      	b.n	800ff5a <USBD_StdEPReq+0x154>
              break;
 800ff58:	bf00      	nop
          }
          break;
 800ff5a:	e0ab      	b.n	80100b4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff62:	b2db      	uxtb	r3, r3
 800ff64:	2b02      	cmp	r3, #2
 800ff66:	d002      	beq.n	800ff6e <USBD_StdEPReq+0x168>
 800ff68:	2b03      	cmp	r3, #3
 800ff6a:	d032      	beq.n	800ffd2 <USBD_StdEPReq+0x1cc>
 800ff6c:	e097      	b.n	801009e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ff6e:	7bbb      	ldrb	r3, [r7, #14]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d007      	beq.n	800ff84 <USBD_StdEPReq+0x17e>
 800ff74:	7bbb      	ldrb	r3, [r7, #14]
 800ff76:	2b80      	cmp	r3, #128	; 0x80
 800ff78:	d004      	beq.n	800ff84 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ff7a:	6839      	ldr	r1, [r7, #0]
 800ff7c:	6878      	ldr	r0, [r7, #4]
 800ff7e:	f000 fbd3 	bl	8010728 <USBD_CtlError>
                break;
 800ff82:	e091      	b.n	80100a8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ff84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	da0b      	bge.n	800ffa4 <USBD_StdEPReq+0x19e>
 800ff8c:	7bbb      	ldrb	r3, [r7, #14]
 800ff8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ff92:	4613      	mov	r3, r2
 800ff94:	009b      	lsls	r3, r3, #2
 800ff96:	4413      	add	r3, r2
 800ff98:	009b      	lsls	r3, r3, #2
 800ff9a:	3310      	adds	r3, #16
 800ff9c:	687a      	ldr	r2, [r7, #4]
 800ff9e:	4413      	add	r3, r2
 800ffa0:	3304      	adds	r3, #4
 800ffa2:	e00b      	b.n	800ffbc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ffa4:	7bbb      	ldrb	r3, [r7, #14]
 800ffa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ffaa:	4613      	mov	r3, r2
 800ffac:	009b      	lsls	r3, r3, #2
 800ffae:	4413      	add	r3, r2
 800ffb0:	009b      	lsls	r3, r3, #2
 800ffb2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ffb6:	687a      	ldr	r2, [r7, #4]
 800ffb8:	4413      	add	r3, r2
 800ffba:	3304      	adds	r3, #4
 800ffbc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ffbe:	68bb      	ldr	r3, [r7, #8]
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	2202      	movs	r2, #2
 800ffc8:	4619      	mov	r1, r3
 800ffca:	6878      	ldr	r0, [r7, #4]
 800ffcc:	f000 fc1d 	bl	801080a <USBD_CtlSendData>
              break;
 800ffd0:	e06a      	b.n	80100a8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ffd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	da11      	bge.n	800fffe <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ffda:	7bbb      	ldrb	r3, [r7, #14]
 800ffdc:	f003 020f 	and.w	r2, r3, #15
 800ffe0:	6879      	ldr	r1, [r7, #4]
 800ffe2:	4613      	mov	r3, r2
 800ffe4:	009b      	lsls	r3, r3, #2
 800ffe6:	4413      	add	r3, r2
 800ffe8:	009b      	lsls	r3, r3, #2
 800ffea:	440b      	add	r3, r1
 800ffec:	3324      	adds	r3, #36	; 0x24
 800ffee:	881b      	ldrh	r3, [r3, #0]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d117      	bne.n	8010024 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fff4:	6839      	ldr	r1, [r7, #0]
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	f000 fb96 	bl	8010728 <USBD_CtlError>
                  break;
 800fffc:	e054      	b.n	80100a8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fffe:	7bbb      	ldrb	r3, [r7, #14]
 8010000:	f003 020f 	and.w	r2, r3, #15
 8010004:	6879      	ldr	r1, [r7, #4]
 8010006:	4613      	mov	r3, r2
 8010008:	009b      	lsls	r3, r3, #2
 801000a:	4413      	add	r3, r2
 801000c:	009b      	lsls	r3, r3, #2
 801000e:	440b      	add	r3, r1
 8010010:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010014:	881b      	ldrh	r3, [r3, #0]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d104      	bne.n	8010024 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801001a:	6839      	ldr	r1, [r7, #0]
 801001c:	6878      	ldr	r0, [r7, #4]
 801001e:	f000 fb83 	bl	8010728 <USBD_CtlError>
                  break;
 8010022:	e041      	b.n	80100a8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010024:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010028:	2b00      	cmp	r3, #0
 801002a:	da0b      	bge.n	8010044 <USBD_StdEPReq+0x23e>
 801002c:	7bbb      	ldrb	r3, [r7, #14]
 801002e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010032:	4613      	mov	r3, r2
 8010034:	009b      	lsls	r3, r3, #2
 8010036:	4413      	add	r3, r2
 8010038:	009b      	lsls	r3, r3, #2
 801003a:	3310      	adds	r3, #16
 801003c:	687a      	ldr	r2, [r7, #4]
 801003e:	4413      	add	r3, r2
 8010040:	3304      	adds	r3, #4
 8010042:	e00b      	b.n	801005c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010044:	7bbb      	ldrb	r3, [r7, #14]
 8010046:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801004a:	4613      	mov	r3, r2
 801004c:	009b      	lsls	r3, r3, #2
 801004e:	4413      	add	r3, r2
 8010050:	009b      	lsls	r3, r3, #2
 8010052:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010056:	687a      	ldr	r2, [r7, #4]
 8010058:	4413      	add	r3, r2
 801005a:	3304      	adds	r3, #4
 801005c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801005e:	7bbb      	ldrb	r3, [r7, #14]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d002      	beq.n	801006a <USBD_StdEPReq+0x264>
 8010064:	7bbb      	ldrb	r3, [r7, #14]
 8010066:	2b80      	cmp	r3, #128	; 0x80
 8010068:	d103      	bne.n	8010072 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801006a:	68bb      	ldr	r3, [r7, #8]
 801006c:	2200      	movs	r2, #0
 801006e:	601a      	str	r2, [r3, #0]
 8010070:	e00e      	b.n	8010090 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010072:	7bbb      	ldrb	r3, [r7, #14]
 8010074:	4619      	mov	r1, r3
 8010076:	6878      	ldr	r0, [r7, #4]
 8010078:	f001 f99a 	bl	80113b0 <USBD_LL_IsStallEP>
 801007c:	4603      	mov	r3, r0
 801007e:	2b00      	cmp	r3, #0
 8010080:	d003      	beq.n	801008a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	2201      	movs	r2, #1
 8010086:	601a      	str	r2, [r3, #0]
 8010088:	e002      	b.n	8010090 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801008a:	68bb      	ldr	r3, [r7, #8]
 801008c:	2200      	movs	r2, #0
 801008e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010090:	68bb      	ldr	r3, [r7, #8]
 8010092:	2202      	movs	r2, #2
 8010094:	4619      	mov	r1, r3
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f000 fbb7 	bl	801080a <USBD_CtlSendData>
              break;
 801009c:	e004      	b.n	80100a8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801009e:	6839      	ldr	r1, [r7, #0]
 80100a0:	6878      	ldr	r0, [r7, #4]
 80100a2:	f000 fb41 	bl	8010728 <USBD_CtlError>
              break;
 80100a6:	bf00      	nop
          }
          break;
 80100a8:	e004      	b.n	80100b4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80100aa:	6839      	ldr	r1, [r7, #0]
 80100ac:	6878      	ldr	r0, [r7, #4]
 80100ae:	f000 fb3b 	bl	8010728 <USBD_CtlError>
          break;
 80100b2:	bf00      	nop
      }
      break;
 80100b4:	e004      	b.n	80100c0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80100b6:	6839      	ldr	r1, [r7, #0]
 80100b8:	6878      	ldr	r0, [r7, #4]
 80100ba:	f000 fb35 	bl	8010728 <USBD_CtlError>
      break;
 80100be:	bf00      	nop
  }

  return ret;
 80100c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80100c2:	4618      	mov	r0, r3
 80100c4:	3710      	adds	r7, #16
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}
	...

080100cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b084      	sub	sp, #16
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
 80100d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80100d6:	2300      	movs	r3, #0
 80100d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80100da:	2300      	movs	r3, #0
 80100dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80100de:	2300      	movs	r3, #0
 80100e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	885b      	ldrh	r3, [r3, #2]
 80100e6:	0a1b      	lsrs	r3, r3, #8
 80100e8:	b29b      	uxth	r3, r3
 80100ea:	3b01      	subs	r3, #1
 80100ec:	2b06      	cmp	r3, #6
 80100ee:	f200 8128 	bhi.w	8010342 <USBD_GetDescriptor+0x276>
 80100f2:	a201      	add	r2, pc, #4	; (adr r2, 80100f8 <USBD_GetDescriptor+0x2c>)
 80100f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100f8:	08010115 	.word	0x08010115
 80100fc:	0801012d 	.word	0x0801012d
 8010100:	0801016d 	.word	0x0801016d
 8010104:	08010343 	.word	0x08010343
 8010108:	08010343 	.word	0x08010343
 801010c:	080102e3 	.word	0x080102e3
 8010110:	0801030f 	.word	0x0801030f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	687a      	ldr	r2, [r7, #4]
 801011e:	7c12      	ldrb	r2, [r2, #16]
 8010120:	f107 0108 	add.w	r1, r7, #8
 8010124:	4610      	mov	r0, r2
 8010126:	4798      	blx	r3
 8010128:	60f8      	str	r0, [r7, #12]
      break;
 801012a:	e112      	b.n	8010352 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	7c1b      	ldrb	r3, [r3, #16]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d10d      	bne.n	8010150 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801013a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801013c:	f107 0208 	add.w	r2, r7, #8
 8010140:	4610      	mov	r0, r2
 8010142:	4798      	blx	r3
 8010144:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	3301      	adds	r3, #1
 801014a:	2202      	movs	r2, #2
 801014c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801014e:	e100      	b.n	8010352 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010158:	f107 0208 	add.w	r2, r7, #8
 801015c:	4610      	mov	r0, r2
 801015e:	4798      	blx	r3
 8010160:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	3301      	adds	r3, #1
 8010166:	2202      	movs	r2, #2
 8010168:	701a      	strb	r2, [r3, #0]
      break;
 801016a:	e0f2      	b.n	8010352 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	885b      	ldrh	r3, [r3, #2]
 8010170:	b2db      	uxtb	r3, r3
 8010172:	2b05      	cmp	r3, #5
 8010174:	f200 80ac 	bhi.w	80102d0 <USBD_GetDescriptor+0x204>
 8010178:	a201      	add	r2, pc, #4	; (adr r2, 8010180 <USBD_GetDescriptor+0xb4>)
 801017a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801017e:	bf00      	nop
 8010180:	08010199 	.word	0x08010199
 8010184:	080101cd 	.word	0x080101cd
 8010188:	08010201 	.word	0x08010201
 801018c:	08010235 	.word	0x08010235
 8010190:	08010269 	.word	0x08010269
 8010194:	0801029d 	.word	0x0801029d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801019e:	685b      	ldr	r3, [r3, #4]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d00b      	beq.n	80101bc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80101aa:	685b      	ldr	r3, [r3, #4]
 80101ac:	687a      	ldr	r2, [r7, #4]
 80101ae:	7c12      	ldrb	r2, [r2, #16]
 80101b0:	f107 0108 	add.w	r1, r7, #8
 80101b4:	4610      	mov	r0, r2
 80101b6:	4798      	blx	r3
 80101b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80101ba:	e091      	b.n	80102e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80101bc:	6839      	ldr	r1, [r7, #0]
 80101be:	6878      	ldr	r0, [r7, #4]
 80101c0:	f000 fab2 	bl	8010728 <USBD_CtlError>
            err++;
 80101c4:	7afb      	ldrb	r3, [r7, #11]
 80101c6:	3301      	adds	r3, #1
 80101c8:	72fb      	strb	r3, [r7, #11]
          break;
 80101ca:	e089      	b.n	80102e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80101d2:	689b      	ldr	r3, [r3, #8]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d00b      	beq.n	80101f0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80101de:	689b      	ldr	r3, [r3, #8]
 80101e0:	687a      	ldr	r2, [r7, #4]
 80101e2:	7c12      	ldrb	r2, [r2, #16]
 80101e4:	f107 0108 	add.w	r1, r7, #8
 80101e8:	4610      	mov	r0, r2
 80101ea:	4798      	blx	r3
 80101ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80101ee:	e077      	b.n	80102e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80101f0:	6839      	ldr	r1, [r7, #0]
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	f000 fa98 	bl	8010728 <USBD_CtlError>
            err++;
 80101f8:	7afb      	ldrb	r3, [r7, #11]
 80101fa:	3301      	adds	r3, #1
 80101fc:	72fb      	strb	r3, [r7, #11]
          break;
 80101fe:	e06f      	b.n	80102e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010206:	68db      	ldr	r3, [r3, #12]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d00b      	beq.n	8010224 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010212:	68db      	ldr	r3, [r3, #12]
 8010214:	687a      	ldr	r2, [r7, #4]
 8010216:	7c12      	ldrb	r2, [r2, #16]
 8010218:	f107 0108 	add.w	r1, r7, #8
 801021c:	4610      	mov	r0, r2
 801021e:	4798      	blx	r3
 8010220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010222:	e05d      	b.n	80102e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010224:	6839      	ldr	r1, [r7, #0]
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f000 fa7e 	bl	8010728 <USBD_CtlError>
            err++;
 801022c:	7afb      	ldrb	r3, [r7, #11]
 801022e:	3301      	adds	r3, #1
 8010230:	72fb      	strb	r3, [r7, #11]
          break;
 8010232:	e055      	b.n	80102e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801023a:	691b      	ldr	r3, [r3, #16]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d00b      	beq.n	8010258 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010246:	691b      	ldr	r3, [r3, #16]
 8010248:	687a      	ldr	r2, [r7, #4]
 801024a:	7c12      	ldrb	r2, [r2, #16]
 801024c:	f107 0108 	add.w	r1, r7, #8
 8010250:	4610      	mov	r0, r2
 8010252:	4798      	blx	r3
 8010254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010256:	e043      	b.n	80102e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010258:	6839      	ldr	r1, [r7, #0]
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	f000 fa64 	bl	8010728 <USBD_CtlError>
            err++;
 8010260:	7afb      	ldrb	r3, [r7, #11]
 8010262:	3301      	adds	r3, #1
 8010264:	72fb      	strb	r3, [r7, #11]
          break;
 8010266:	e03b      	b.n	80102e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801026e:	695b      	ldr	r3, [r3, #20]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d00b      	beq.n	801028c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801027a:	695b      	ldr	r3, [r3, #20]
 801027c:	687a      	ldr	r2, [r7, #4]
 801027e:	7c12      	ldrb	r2, [r2, #16]
 8010280:	f107 0108 	add.w	r1, r7, #8
 8010284:	4610      	mov	r0, r2
 8010286:	4798      	blx	r3
 8010288:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801028a:	e029      	b.n	80102e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801028c:	6839      	ldr	r1, [r7, #0]
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	f000 fa4a 	bl	8010728 <USBD_CtlError>
            err++;
 8010294:	7afb      	ldrb	r3, [r7, #11]
 8010296:	3301      	adds	r3, #1
 8010298:	72fb      	strb	r3, [r7, #11]
          break;
 801029a:	e021      	b.n	80102e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80102a2:	699b      	ldr	r3, [r3, #24]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d00b      	beq.n	80102c0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80102ae:	699b      	ldr	r3, [r3, #24]
 80102b0:	687a      	ldr	r2, [r7, #4]
 80102b2:	7c12      	ldrb	r2, [r2, #16]
 80102b4:	f107 0108 	add.w	r1, r7, #8
 80102b8:	4610      	mov	r0, r2
 80102ba:	4798      	blx	r3
 80102bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80102be:	e00f      	b.n	80102e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80102c0:	6839      	ldr	r1, [r7, #0]
 80102c2:	6878      	ldr	r0, [r7, #4]
 80102c4:	f000 fa30 	bl	8010728 <USBD_CtlError>
            err++;
 80102c8:	7afb      	ldrb	r3, [r7, #11]
 80102ca:	3301      	adds	r3, #1
 80102cc:	72fb      	strb	r3, [r7, #11]
          break;
 80102ce:	e007      	b.n	80102e0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80102d0:	6839      	ldr	r1, [r7, #0]
 80102d2:	6878      	ldr	r0, [r7, #4]
 80102d4:	f000 fa28 	bl	8010728 <USBD_CtlError>
          err++;
 80102d8:	7afb      	ldrb	r3, [r7, #11]
 80102da:	3301      	adds	r3, #1
 80102dc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80102de:	bf00      	nop
      }
      break;
 80102e0:	e037      	b.n	8010352 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	7c1b      	ldrb	r3, [r3, #16]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d109      	bne.n	80102fe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80102f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102f2:	f107 0208 	add.w	r2, r7, #8
 80102f6:	4610      	mov	r0, r2
 80102f8:	4798      	blx	r3
 80102fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80102fc:	e029      	b.n	8010352 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80102fe:	6839      	ldr	r1, [r7, #0]
 8010300:	6878      	ldr	r0, [r7, #4]
 8010302:	f000 fa11 	bl	8010728 <USBD_CtlError>
        err++;
 8010306:	7afb      	ldrb	r3, [r7, #11]
 8010308:	3301      	adds	r3, #1
 801030a:	72fb      	strb	r3, [r7, #11]
      break;
 801030c:	e021      	b.n	8010352 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	7c1b      	ldrb	r3, [r3, #16]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d10d      	bne.n	8010332 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801031c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801031e:	f107 0208 	add.w	r2, r7, #8
 8010322:	4610      	mov	r0, r2
 8010324:	4798      	blx	r3
 8010326:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	3301      	adds	r3, #1
 801032c:	2207      	movs	r2, #7
 801032e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010330:	e00f      	b.n	8010352 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8010332:	6839      	ldr	r1, [r7, #0]
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f000 f9f7 	bl	8010728 <USBD_CtlError>
        err++;
 801033a:	7afb      	ldrb	r3, [r7, #11]
 801033c:	3301      	adds	r3, #1
 801033e:	72fb      	strb	r3, [r7, #11]
      break;
 8010340:	e007      	b.n	8010352 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8010342:	6839      	ldr	r1, [r7, #0]
 8010344:	6878      	ldr	r0, [r7, #4]
 8010346:	f000 f9ef 	bl	8010728 <USBD_CtlError>
      err++;
 801034a:	7afb      	ldrb	r3, [r7, #11]
 801034c:	3301      	adds	r3, #1
 801034e:	72fb      	strb	r3, [r7, #11]
      break;
 8010350:	bf00      	nop
  }

  if (err != 0U)
 8010352:	7afb      	ldrb	r3, [r7, #11]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d11e      	bne.n	8010396 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	88db      	ldrh	r3, [r3, #6]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d016      	beq.n	801038e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8010360:	893b      	ldrh	r3, [r7, #8]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d00e      	beq.n	8010384 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	88da      	ldrh	r2, [r3, #6]
 801036a:	893b      	ldrh	r3, [r7, #8]
 801036c:	4293      	cmp	r3, r2
 801036e:	bf28      	it	cs
 8010370:	4613      	movcs	r3, r2
 8010372:	b29b      	uxth	r3, r3
 8010374:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010376:	893b      	ldrh	r3, [r7, #8]
 8010378:	461a      	mov	r2, r3
 801037a:	68f9      	ldr	r1, [r7, #12]
 801037c:	6878      	ldr	r0, [r7, #4]
 801037e:	f000 fa44 	bl	801080a <USBD_CtlSendData>
 8010382:	e009      	b.n	8010398 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010384:	6839      	ldr	r1, [r7, #0]
 8010386:	6878      	ldr	r0, [r7, #4]
 8010388:	f000 f9ce 	bl	8010728 <USBD_CtlError>
 801038c:	e004      	b.n	8010398 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f000 fa95 	bl	80108be <USBD_CtlSendStatus>
 8010394:	e000      	b.n	8010398 <USBD_GetDescriptor+0x2cc>
    return;
 8010396:	bf00      	nop
  }
}
 8010398:	3710      	adds	r7, #16
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}
 801039e:	bf00      	nop

080103a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b084      	sub	sp, #16
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
 80103a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80103aa:	683b      	ldr	r3, [r7, #0]
 80103ac:	889b      	ldrh	r3, [r3, #4]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d131      	bne.n	8010416 <USBD_SetAddress+0x76>
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	88db      	ldrh	r3, [r3, #6]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d12d      	bne.n	8010416 <USBD_SetAddress+0x76>
 80103ba:	683b      	ldr	r3, [r7, #0]
 80103bc:	885b      	ldrh	r3, [r3, #2]
 80103be:	2b7f      	cmp	r3, #127	; 0x7f
 80103c0:	d829      	bhi.n	8010416 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	885b      	ldrh	r3, [r3, #2]
 80103c6:	b2db      	uxtb	r3, r3
 80103c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80103cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80103d4:	b2db      	uxtb	r3, r3
 80103d6:	2b03      	cmp	r3, #3
 80103d8:	d104      	bne.n	80103e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80103da:	6839      	ldr	r1, [r7, #0]
 80103dc:	6878      	ldr	r0, [r7, #4]
 80103de:	f000 f9a3 	bl	8010728 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103e2:	e01d      	b.n	8010420 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	7bfa      	ldrb	r2, [r7, #15]
 80103e8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80103ec:	7bfb      	ldrb	r3, [r7, #15]
 80103ee:	4619      	mov	r1, r3
 80103f0:	6878      	ldr	r0, [r7, #4]
 80103f2:	f001 f809 	bl	8011408 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	f000 fa61 	bl	80108be <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80103fc:	7bfb      	ldrb	r3, [r7, #15]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d004      	beq.n	801040c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	2202      	movs	r2, #2
 8010406:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801040a:	e009      	b.n	8010420 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2201      	movs	r2, #1
 8010410:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010414:	e004      	b.n	8010420 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010416:	6839      	ldr	r1, [r7, #0]
 8010418:	6878      	ldr	r0, [r7, #4]
 801041a:	f000 f985 	bl	8010728 <USBD_CtlError>
  }
}
 801041e:	bf00      	nop
 8010420:	bf00      	nop
 8010422:	3710      	adds	r7, #16
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b084      	sub	sp, #16
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010432:	2300      	movs	r3, #0
 8010434:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	885b      	ldrh	r3, [r3, #2]
 801043a:	b2da      	uxtb	r2, r3
 801043c:	4b4c      	ldr	r3, [pc, #304]	; (8010570 <USBD_SetConfig+0x148>)
 801043e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010440:	4b4b      	ldr	r3, [pc, #300]	; (8010570 <USBD_SetConfig+0x148>)
 8010442:	781b      	ldrb	r3, [r3, #0]
 8010444:	2b01      	cmp	r3, #1
 8010446:	d905      	bls.n	8010454 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010448:	6839      	ldr	r1, [r7, #0]
 801044a:	6878      	ldr	r0, [r7, #4]
 801044c:	f000 f96c 	bl	8010728 <USBD_CtlError>
    return USBD_FAIL;
 8010450:	2303      	movs	r3, #3
 8010452:	e088      	b.n	8010566 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801045a:	b2db      	uxtb	r3, r3
 801045c:	2b02      	cmp	r3, #2
 801045e:	d002      	beq.n	8010466 <USBD_SetConfig+0x3e>
 8010460:	2b03      	cmp	r3, #3
 8010462:	d025      	beq.n	80104b0 <USBD_SetConfig+0x88>
 8010464:	e071      	b.n	801054a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010466:	4b42      	ldr	r3, [pc, #264]	; (8010570 <USBD_SetConfig+0x148>)
 8010468:	781b      	ldrb	r3, [r3, #0]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d01c      	beq.n	80104a8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801046e:	4b40      	ldr	r3, [pc, #256]	; (8010570 <USBD_SetConfig+0x148>)
 8010470:	781b      	ldrb	r3, [r3, #0]
 8010472:	461a      	mov	r2, r3
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010478:	4b3d      	ldr	r3, [pc, #244]	; (8010570 <USBD_SetConfig+0x148>)
 801047a:	781b      	ldrb	r3, [r3, #0]
 801047c:	4619      	mov	r1, r3
 801047e:	6878      	ldr	r0, [r7, #4]
 8010480:	f7ff f948 	bl	800f714 <USBD_SetClassConfig>
 8010484:	4603      	mov	r3, r0
 8010486:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010488:	7bfb      	ldrb	r3, [r7, #15]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d004      	beq.n	8010498 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801048e:	6839      	ldr	r1, [r7, #0]
 8010490:	6878      	ldr	r0, [r7, #4]
 8010492:	f000 f949 	bl	8010728 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010496:	e065      	b.n	8010564 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f000 fa10 	bl	80108be <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	2203      	movs	r2, #3
 80104a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80104a6:	e05d      	b.n	8010564 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f000 fa08 	bl	80108be <USBD_CtlSendStatus>
      break;
 80104ae:	e059      	b.n	8010564 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80104b0:	4b2f      	ldr	r3, [pc, #188]	; (8010570 <USBD_SetConfig+0x148>)
 80104b2:	781b      	ldrb	r3, [r3, #0]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d112      	bne.n	80104de <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2202      	movs	r2, #2
 80104bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80104c0:	4b2b      	ldr	r3, [pc, #172]	; (8010570 <USBD_SetConfig+0x148>)
 80104c2:	781b      	ldrb	r3, [r3, #0]
 80104c4:	461a      	mov	r2, r3
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80104ca:	4b29      	ldr	r3, [pc, #164]	; (8010570 <USBD_SetConfig+0x148>)
 80104cc:	781b      	ldrb	r3, [r3, #0]
 80104ce:	4619      	mov	r1, r3
 80104d0:	6878      	ldr	r0, [r7, #4]
 80104d2:	f7ff f93b 	bl	800f74c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80104d6:	6878      	ldr	r0, [r7, #4]
 80104d8:	f000 f9f1 	bl	80108be <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80104dc:	e042      	b.n	8010564 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80104de:	4b24      	ldr	r3, [pc, #144]	; (8010570 <USBD_SetConfig+0x148>)
 80104e0:	781b      	ldrb	r3, [r3, #0]
 80104e2:	461a      	mov	r2, r3
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	685b      	ldr	r3, [r3, #4]
 80104e8:	429a      	cmp	r2, r3
 80104ea:	d02a      	beq.n	8010542 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	685b      	ldr	r3, [r3, #4]
 80104f0:	b2db      	uxtb	r3, r3
 80104f2:	4619      	mov	r1, r3
 80104f4:	6878      	ldr	r0, [r7, #4]
 80104f6:	f7ff f929 	bl	800f74c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80104fa:	4b1d      	ldr	r3, [pc, #116]	; (8010570 <USBD_SetConfig+0x148>)
 80104fc:	781b      	ldrb	r3, [r3, #0]
 80104fe:	461a      	mov	r2, r3
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010504:	4b1a      	ldr	r3, [pc, #104]	; (8010570 <USBD_SetConfig+0x148>)
 8010506:	781b      	ldrb	r3, [r3, #0]
 8010508:	4619      	mov	r1, r3
 801050a:	6878      	ldr	r0, [r7, #4]
 801050c:	f7ff f902 	bl	800f714 <USBD_SetClassConfig>
 8010510:	4603      	mov	r3, r0
 8010512:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010514:	7bfb      	ldrb	r3, [r7, #15]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d00f      	beq.n	801053a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801051a:	6839      	ldr	r1, [r7, #0]
 801051c:	6878      	ldr	r0, [r7, #4]
 801051e:	f000 f903 	bl	8010728 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	685b      	ldr	r3, [r3, #4]
 8010526:	b2db      	uxtb	r3, r3
 8010528:	4619      	mov	r1, r3
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	f7ff f90e 	bl	800f74c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2202      	movs	r2, #2
 8010534:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010538:	e014      	b.n	8010564 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801053a:	6878      	ldr	r0, [r7, #4]
 801053c:	f000 f9bf 	bl	80108be <USBD_CtlSendStatus>
      break;
 8010540:	e010      	b.n	8010564 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010542:	6878      	ldr	r0, [r7, #4]
 8010544:	f000 f9bb 	bl	80108be <USBD_CtlSendStatus>
      break;
 8010548:	e00c      	b.n	8010564 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801054a:	6839      	ldr	r1, [r7, #0]
 801054c:	6878      	ldr	r0, [r7, #4]
 801054e:	f000 f8eb 	bl	8010728 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010552:	4b07      	ldr	r3, [pc, #28]	; (8010570 <USBD_SetConfig+0x148>)
 8010554:	781b      	ldrb	r3, [r3, #0]
 8010556:	4619      	mov	r1, r3
 8010558:	6878      	ldr	r0, [r7, #4]
 801055a:	f7ff f8f7 	bl	800f74c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801055e:	2303      	movs	r3, #3
 8010560:	73fb      	strb	r3, [r7, #15]
      break;
 8010562:	bf00      	nop
  }

  return ret;
 8010564:	7bfb      	ldrb	r3, [r7, #15]
}
 8010566:	4618      	mov	r0, r3
 8010568:	3710      	adds	r7, #16
 801056a:	46bd      	mov	sp, r7
 801056c:	bd80      	pop	{r7, pc}
 801056e:	bf00      	nop
 8010570:	20000d90 	.word	0x20000d90

08010574 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b082      	sub	sp, #8
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
 801057c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	88db      	ldrh	r3, [r3, #6]
 8010582:	2b01      	cmp	r3, #1
 8010584:	d004      	beq.n	8010590 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010586:	6839      	ldr	r1, [r7, #0]
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f000 f8cd 	bl	8010728 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801058e:	e023      	b.n	80105d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010596:	b2db      	uxtb	r3, r3
 8010598:	2b02      	cmp	r3, #2
 801059a:	dc02      	bgt.n	80105a2 <USBD_GetConfig+0x2e>
 801059c:	2b00      	cmp	r3, #0
 801059e:	dc03      	bgt.n	80105a8 <USBD_GetConfig+0x34>
 80105a0:	e015      	b.n	80105ce <USBD_GetConfig+0x5a>
 80105a2:	2b03      	cmp	r3, #3
 80105a4:	d00b      	beq.n	80105be <USBD_GetConfig+0x4a>
 80105a6:	e012      	b.n	80105ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	2200      	movs	r2, #0
 80105ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	3308      	adds	r3, #8
 80105b2:	2201      	movs	r2, #1
 80105b4:	4619      	mov	r1, r3
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f000 f927 	bl	801080a <USBD_CtlSendData>
        break;
 80105bc:	e00c      	b.n	80105d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	3304      	adds	r3, #4
 80105c2:	2201      	movs	r2, #1
 80105c4:	4619      	mov	r1, r3
 80105c6:	6878      	ldr	r0, [r7, #4]
 80105c8:	f000 f91f 	bl	801080a <USBD_CtlSendData>
        break;
 80105cc:	e004      	b.n	80105d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80105ce:	6839      	ldr	r1, [r7, #0]
 80105d0:	6878      	ldr	r0, [r7, #4]
 80105d2:	f000 f8a9 	bl	8010728 <USBD_CtlError>
        break;
 80105d6:	bf00      	nop
}
 80105d8:	bf00      	nop
 80105da:	3708      	adds	r7, #8
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd80      	pop	{r7, pc}

080105e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b082      	sub	sp, #8
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
 80105e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80105f0:	b2db      	uxtb	r3, r3
 80105f2:	3b01      	subs	r3, #1
 80105f4:	2b02      	cmp	r3, #2
 80105f6:	d81e      	bhi.n	8010636 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	88db      	ldrh	r3, [r3, #6]
 80105fc:	2b02      	cmp	r3, #2
 80105fe:	d004      	beq.n	801060a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010600:	6839      	ldr	r1, [r7, #0]
 8010602:	6878      	ldr	r0, [r7, #4]
 8010604:	f000 f890 	bl	8010728 <USBD_CtlError>
        break;
 8010608:	e01a      	b.n	8010640 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	2201      	movs	r2, #1
 801060e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010616:	2b00      	cmp	r3, #0
 8010618:	d005      	beq.n	8010626 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	68db      	ldr	r3, [r3, #12]
 801061e:	f043 0202 	orr.w	r2, r3, #2
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	330c      	adds	r3, #12
 801062a:	2202      	movs	r2, #2
 801062c:	4619      	mov	r1, r3
 801062e:	6878      	ldr	r0, [r7, #4]
 8010630:	f000 f8eb 	bl	801080a <USBD_CtlSendData>
      break;
 8010634:	e004      	b.n	8010640 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010636:	6839      	ldr	r1, [r7, #0]
 8010638:	6878      	ldr	r0, [r7, #4]
 801063a:	f000 f875 	bl	8010728 <USBD_CtlError>
      break;
 801063e:	bf00      	nop
  }
}
 8010640:	bf00      	nop
 8010642:	3708      	adds	r7, #8
 8010644:	46bd      	mov	sp, r7
 8010646:	bd80      	pop	{r7, pc}

08010648 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b082      	sub	sp, #8
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
 8010650:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	885b      	ldrh	r3, [r3, #2]
 8010656:	2b01      	cmp	r3, #1
 8010658:	d106      	bne.n	8010668 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	2201      	movs	r2, #1
 801065e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010662:	6878      	ldr	r0, [r7, #4]
 8010664:	f000 f92b 	bl	80108be <USBD_CtlSendStatus>
  }
}
 8010668:	bf00      	nop
 801066a:	3708      	adds	r7, #8
 801066c:	46bd      	mov	sp, r7
 801066e:	bd80      	pop	{r7, pc}

08010670 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b082      	sub	sp, #8
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
 8010678:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010680:	b2db      	uxtb	r3, r3
 8010682:	3b01      	subs	r3, #1
 8010684:	2b02      	cmp	r3, #2
 8010686:	d80b      	bhi.n	80106a0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010688:	683b      	ldr	r3, [r7, #0]
 801068a:	885b      	ldrh	r3, [r3, #2]
 801068c:	2b01      	cmp	r3, #1
 801068e:	d10c      	bne.n	80106aa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	2200      	movs	r2, #0
 8010694:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010698:	6878      	ldr	r0, [r7, #4]
 801069a:	f000 f910 	bl	80108be <USBD_CtlSendStatus>
      }
      break;
 801069e:	e004      	b.n	80106aa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80106a0:	6839      	ldr	r1, [r7, #0]
 80106a2:	6878      	ldr	r0, [r7, #4]
 80106a4:	f000 f840 	bl	8010728 <USBD_CtlError>
      break;
 80106a8:	e000      	b.n	80106ac <USBD_ClrFeature+0x3c>
      break;
 80106aa:	bf00      	nop
  }
}
 80106ac:	bf00      	nop
 80106ae:	3708      	adds	r7, #8
 80106b0:	46bd      	mov	sp, r7
 80106b2:	bd80      	pop	{r7, pc}

080106b4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b084      	sub	sp, #16
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
 80106bc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	781a      	ldrb	r2, [r3, #0]
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	3301      	adds	r3, #1
 80106ce:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	781a      	ldrb	r2, [r3, #0]
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	3301      	adds	r3, #1
 80106dc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80106de:	68f8      	ldr	r0, [r7, #12]
 80106e0:	f7ff fabb 	bl	800fc5a <SWAPBYTE>
 80106e4:	4603      	mov	r3, r0
 80106e6:	461a      	mov	r2, r3
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	3301      	adds	r3, #1
 80106f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	3301      	adds	r3, #1
 80106f6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80106f8:	68f8      	ldr	r0, [r7, #12]
 80106fa:	f7ff faae 	bl	800fc5a <SWAPBYTE>
 80106fe:	4603      	mov	r3, r0
 8010700:	461a      	mov	r2, r3
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	3301      	adds	r3, #1
 801070a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	3301      	adds	r3, #1
 8010710:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010712:	68f8      	ldr	r0, [r7, #12]
 8010714:	f7ff faa1 	bl	800fc5a <SWAPBYTE>
 8010718:	4603      	mov	r3, r0
 801071a:	461a      	mov	r2, r3
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	80da      	strh	r2, [r3, #6]
}
 8010720:	bf00      	nop
 8010722:	3710      	adds	r7, #16
 8010724:	46bd      	mov	sp, r7
 8010726:	bd80      	pop	{r7, pc}

08010728 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b082      	sub	sp, #8
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
 8010730:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010732:	2180      	movs	r1, #128	; 0x80
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	f000 fdcf 	bl	80112d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801073a:	2100      	movs	r1, #0
 801073c:	6878      	ldr	r0, [r7, #4]
 801073e:	f000 fdcb 	bl	80112d8 <USBD_LL_StallEP>
}
 8010742:	bf00      	nop
 8010744:	3708      	adds	r7, #8
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}

0801074a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801074a:	b580      	push	{r7, lr}
 801074c:	b086      	sub	sp, #24
 801074e:	af00      	add	r7, sp, #0
 8010750:	60f8      	str	r0, [r7, #12]
 8010752:	60b9      	str	r1, [r7, #8]
 8010754:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010756:	2300      	movs	r3, #0
 8010758:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d036      	beq.n	80107ce <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010764:	6938      	ldr	r0, [r7, #16]
 8010766:	f000 f836 	bl	80107d6 <USBD_GetLen>
 801076a:	4603      	mov	r3, r0
 801076c:	3301      	adds	r3, #1
 801076e:	b29b      	uxth	r3, r3
 8010770:	005b      	lsls	r3, r3, #1
 8010772:	b29a      	uxth	r2, r3
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010778:	7dfb      	ldrb	r3, [r7, #23]
 801077a:	68ba      	ldr	r2, [r7, #8]
 801077c:	4413      	add	r3, r2
 801077e:	687a      	ldr	r2, [r7, #4]
 8010780:	7812      	ldrb	r2, [r2, #0]
 8010782:	701a      	strb	r2, [r3, #0]
  idx++;
 8010784:	7dfb      	ldrb	r3, [r7, #23]
 8010786:	3301      	adds	r3, #1
 8010788:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801078a:	7dfb      	ldrb	r3, [r7, #23]
 801078c:	68ba      	ldr	r2, [r7, #8]
 801078e:	4413      	add	r3, r2
 8010790:	2203      	movs	r2, #3
 8010792:	701a      	strb	r2, [r3, #0]
  idx++;
 8010794:	7dfb      	ldrb	r3, [r7, #23]
 8010796:	3301      	adds	r3, #1
 8010798:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801079a:	e013      	b.n	80107c4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801079c:	7dfb      	ldrb	r3, [r7, #23]
 801079e:	68ba      	ldr	r2, [r7, #8]
 80107a0:	4413      	add	r3, r2
 80107a2:	693a      	ldr	r2, [r7, #16]
 80107a4:	7812      	ldrb	r2, [r2, #0]
 80107a6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80107a8:	693b      	ldr	r3, [r7, #16]
 80107aa:	3301      	adds	r3, #1
 80107ac:	613b      	str	r3, [r7, #16]
    idx++;
 80107ae:	7dfb      	ldrb	r3, [r7, #23]
 80107b0:	3301      	adds	r3, #1
 80107b2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80107b4:	7dfb      	ldrb	r3, [r7, #23]
 80107b6:	68ba      	ldr	r2, [r7, #8]
 80107b8:	4413      	add	r3, r2
 80107ba:	2200      	movs	r2, #0
 80107bc:	701a      	strb	r2, [r3, #0]
    idx++;
 80107be:	7dfb      	ldrb	r3, [r7, #23]
 80107c0:	3301      	adds	r3, #1
 80107c2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80107c4:	693b      	ldr	r3, [r7, #16]
 80107c6:	781b      	ldrb	r3, [r3, #0]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d1e7      	bne.n	801079c <USBD_GetString+0x52>
 80107cc:	e000      	b.n	80107d0 <USBD_GetString+0x86>
    return;
 80107ce:	bf00      	nop
  }
}
 80107d0:	3718      	adds	r7, #24
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bd80      	pop	{r7, pc}

080107d6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80107d6:	b480      	push	{r7}
 80107d8:	b085      	sub	sp, #20
 80107da:	af00      	add	r7, sp, #0
 80107dc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80107de:	2300      	movs	r3, #0
 80107e0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80107e6:	e005      	b.n	80107f4 <USBD_GetLen+0x1e>
  {
    len++;
 80107e8:	7bfb      	ldrb	r3, [r7, #15]
 80107ea:	3301      	adds	r3, #1
 80107ec:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80107ee:	68bb      	ldr	r3, [r7, #8]
 80107f0:	3301      	adds	r3, #1
 80107f2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	781b      	ldrb	r3, [r3, #0]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d1f5      	bne.n	80107e8 <USBD_GetLen+0x12>
  }

  return len;
 80107fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80107fe:	4618      	mov	r0, r3
 8010800:	3714      	adds	r7, #20
 8010802:	46bd      	mov	sp, r7
 8010804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010808:	4770      	bx	lr

0801080a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801080a:	b580      	push	{r7, lr}
 801080c:	b084      	sub	sp, #16
 801080e:	af00      	add	r7, sp, #0
 8010810:	60f8      	str	r0, [r7, #12]
 8010812:	60b9      	str	r1, [r7, #8]
 8010814:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	2202      	movs	r2, #2
 801081a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	687a      	ldr	r2, [r7, #4]
 8010822:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	687a      	ldr	r2, [r7, #4]
 8010828:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	68ba      	ldr	r2, [r7, #8]
 801082e:	2100      	movs	r1, #0
 8010830:	68f8      	ldr	r0, [r7, #12]
 8010832:	f000 fe1f 	bl	8011474 <USBD_LL_Transmit>

  return USBD_OK;
 8010836:	2300      	movs	r3, #0
}
 8010838:	4618      	mov	r0, r3
 801083a:	3710      	adds	r7, #16
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}

08010840 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b084      	sub	sp, #16
 8010844:	af00      	add	r7, sp, #0
 8010846:	60f8      	str	r0, [r7, #12]
 8010848:	60b9      	str	r1, [r7, #8]
 801084a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	68ba      	ldr	r2, [r7, #8]
 8010850:	2100      	movs	r1, #0
 8010852:	68f8      	ldr	r0, [r7, #12]
 8010854:	f000 fe0e 	bl	8011474 <USBD_LL_Transmit>

  return USBD_OK;
 8010858:	2300      	movs	r3, #0
}
 801085a:	4618      	mov	r0, r3
 801085c:	3710      	adds	r7, #16
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}

08010862 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010862:	b580      	push	{r7, lr}
 8010864:	b084      	sub	sp, #16
 8010866:	af00      	add	r7, sp, #0
 8010868:	60f8      	str	r0, [r7, #12]
 801086a:	60b9      	str	r1, [r7, #8]
 801086c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	2203      	movs	r2, #3
 8010872:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	687a      	ldr	r2, [r7, #4]
 801087a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	687a      	ldr	r2, [r7, #4]
 8010882:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	68ba      	ldr	r2, [r7, #8]
 801088a:	2100      	movs	r1, #0
 801088c:	68f8      	ldr	r0, [r7, #12]
 801088e:	f000 fe29 	bl	80114e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010892:	2300      	movs	r3, #0
}
 8010894:	4618      	mov	r0, r3
 8010896:	3710      	adds	r7, #16
 8010898:	46bd      	mov	sp, r7
 801089a:	bd80      	pop	{r7, pc}

0801089c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b084      	sub	sp, #16
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	60f8      	str	r0, [r7, #12]
 80108a4:	60b9      	str	r1, [r7, #8]
 80108a6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	68ba      	ldr	r2, [r7, #8]
 80108ac:	2100      	movs	r1, #0
 80108ae:	68f8      	ldr	r0, [r7, #12]
 80108b0:	f000 fe18 	bl	80114e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80108b4:	2300      	movs	r3, #0
}
 80108b6:	4618      	mov	r0, r3
 80108b8:	3710      	adds	r7, #16
 80108ba:	46bd      	mov	sp, r7
 80108bc:	bd80      	pop	{r7, pc}

080108be <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80108be:	b580      	push	{r7, lr}
 80108c0:	b082      	sub	sp, #8
 80108c2:	af00      	add	r7, sp, #0
 80108c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	2204      	movs	r2, #4
 80108ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80108ce:	2300      	movs	r3, #0
 80108d0:	2200      	movs	r2, #0
 80108d2:	2100      	movs	r1, #0
 80108d4:	6878      	ldr	r0, [r7, #4]
 80108d6:	f000 fdcd 	bl	8011474 <USBD_LL_Transmit>

  return USBD_OK;
 80108da:	2300      	movs	r3, #0
}
 80108dc:	4618      	mov	r0, r3
 80108de:	3708      	adds	r7, #8
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bd80      	pop	{r7, pc}

080108e4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b082      	sub	sp, #8
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	2205      	movs	r2, #5
 80108f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80108f4:	2300      	movs	r3, #0
 80108f6:	2200      	movs	r2, #0
 80108f8:	2100      	movs	r1, #0
 80108fa:	6878      	ldr	r0, [r7, #4]
 80108fc:	f000 fdf2 	bl	80114e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010900:	2300      	movs	r3, #0
}
 8010902:	4618      	mov	r0, r3
 8010904:	3708      	adds	r7, #8
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}
	...

0801090c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801090c:	b480      	push	{r7}
 801090e:	b087      	sub	sp, #28
 8010910:	af00      	add	r7, sp, #0
 8010912:	60f8      	str	r0, [r7, #12]
 8010914:	60b9      	str	r1, [r7, #8]
 8010916:	4613      	mov	r3, r2
 8010918:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801091a:	2301      	movs	r3, #1
 801091c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801091e:	2300      	movs	r3, #0
 8010920:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010922:	4b1f      	ldr	r3, [pc, #124]	; (80109a0 <FATFS_LinkDriverEx+0x94>)
 8010924:	7a5b      	ldrb	r3, [r3, #9]
 8010926:	b2db      	uxtb	r3, r3
 8010928:	2b00      	cmp	r3, #0
 801092a:	d131      	bne.n	8010990 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801092c:	4b1c      	ldr	r3, [pc, #112]	; (80109a0 <FATFS_LinkDriverEx+0x94>)
 801092e:	7a5b      	ldrb	r3, [r3, #9]
 8010930:	b2db      	uxtb	r3, r3
 8010932:	461a      	mov	r2, r3
 8010934:	4b1a      	ldr	r3, [pc, #104]	; (80109a0 <FATFS_LinkDriverEx+0x94>)
 8010936:	2100      	movs	r1, #0
 8010938:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801093a:	4b19      	ldr	r3, [pc, #100]	; (80109a0 <FATFS_LinkDriverEx+0x94>)
 801093c:	7a5b      	ldrb	r3, [r3, #9]
 801093e:	b2db      	uxtb	r3, r3
 8010940:	4a17      	ldr	r2, [pc, #92]	; (80109a0 <FATFS_LinkDriverEx+0x94>)
 8010942:	009b      	lsls	r3, r3, #2
 8010944:	4413      	add	r3, r2
 8010946:	68fa      	ldr	r2, [r7, #12]
 8010948:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801094a:	4b15      	ldr	r3, [pc, #84]	; (80109a0 <FATFS_LinkDriverEx+0x94>)
 801094c:	7a5b      	ldrb	r3, [r3, #9]
 801094e:	b2db      	uxtb	r3, r3
 8010950:	461a      	mov	r2, r3
 8010952:	4b13      	ldr	r3, [pc, #76]	; (80109a0 <FATFS_LinkDriverEx+0x94>)
 8010954:	4413      	add	r3, r2
 8010956:	79fa      	ldrb	r2, [r7, #7]
 8010958:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801095a:	4b11      	ldr	r3, [pc, #68]	; (80109a0 <FATFS_LinkDriverEx+0x94>)
 801095c:	7a5b      	ldrb	r3, [r3, #9]
 801095e:	b2db      	uxtb	r3, r3
 8010960:	1c5a      	adds	r2, r3, #1
 8010962:	b2d1      	uxtb	r1, r2
 8010964:	4a0e      	ldr	r2, [pc, #56]	; (80109a0 <FATFS_LinkDriverEx+0x94>)
 8010966:	7251      	strb	r1, [r2, #9]
 8010968:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801096a:	7dbb      	ldrb	r3, [r7, #22]
 801096c:	3330      	adds	r3, #48	; 0x30
 801096e:	b2da      	uxtb	r2, r3
 8010970:	68bb      	ldr	r3, [r7, #8]
 8010972:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	3301      	adds	r3, #1
 8010978:	223a      	movs	r2, #58	; 0x3a
 801097a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801097c:	68bb      	ldr	r3, [r7, #8]
 801097e:	3302      	adds	r3, #2
 8010980:	222f      	movs	r2, #47	; 0x2f
 8010982:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	3303      	adds	r3, #3
 8010988:	2200      	movs	r2, #0
 801098a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801098c:	2300      	movs	r3, #0
 801098e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010990:	7dfb      	ldrb	r3, [r7, #23]
}
 8010992:	4618      	mov	r0, r3
 8010994:	371c      	adds	r7, #28
 8010996:	46bd      	mov	sp, r7
 8010998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099c:	4770      	bx	lr
 801099e:	bf00      	nop
 80109a0:	20000d94 	.word	0x20000d94

080109a4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b082      	sub	sp, #8
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
 80109ac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80109ae:	2200      	movs	r2, #0
 80109b0:	6839      	ldr	r1, [r7, #0]
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	f7ff ffaa 	bl	801090c <FATFS_LinkDriverEx>
 80109b8:	4603      	mov	r3, r0
}
 80109ba:	4618      	mov	r0, r3
 80109bc:	3708      	adds	r7, #8
 80109be:	46bd      	mov	sp, r7
 80109c0:	bd80      	pop	{r7, pc}
	...

080109c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80109c8:	2200      	movs	r2, #0
 80109ca:	4912      	ldr	r1, [pc, #72]	; (8010a14 <MX_USB_DEVICE_Init+0x50>)
 80109cc:	4812      	ldr	r0, [pc, #72]	; (8010a18 <MX_USB_DEVICE_Init+0x54>)
 80109ce:	f7fe fe33 	bl	800f638 <USBD_Init>
 80109d2:	4603      	mov	r3, r0
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d001      	beq.n	80109dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80109d8:	f7f1 fc80 	bl	80022dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80109dc:	490f      	ldr	r1, [pc, #60]	; (8010a1c <MX_USB_DEVICE_Init+0x58>)
 80109de:	480e      	ldr	r0, [pc, #56]	; (8010a18 <MX_USB_DEVICE_Init+0x54>)
 80109e0:	f7fe fe5a 	bl	800f698 <USBD_RegisterClass>
 80109e4:	4603      	mov	r3, r0
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d001      	beq.n	80109ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80109ea:	f7f1 fc77 	bl	80022dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80109ee:	490c      	ldr	r1, [pc, #48]	; (8010a20 <MX_USB_DEVICE_Init+0x5c>)
 80109f0:	4809      	ldr	r0, [pc, #36]	; (8010a18 <MX_USB_DEVICE_Init+0x54>)
 80109f2:	f7fe fd7b 	bl	800f4ec <USBD_CDC_RegisterInterface>
 80109f6:	4603      	mov	r3, r0
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d001      	beq.n	8010a00 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80109fc:	f7f1 fc6e 	bl	80022dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010a00:	4805      	ldr	r0, [pc, #20]	; (8010a18 <MX_USB_DEVICE_Init+0x54>)
 8010a02:	f7fe fe70 	bl	800f6e6 <USBD_Start>
 8010a06:	4603      	mov	r3, r0
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d001      	beq.n	8010a10 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010a0c:	f7f1 fc66 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010a10:	bf00      	nop
 8010a12:	bd80      	pop	{r7, pc}
 8010a14:	2000013c 	.word	0x2000013c
 8010a18:	20000da0 	.word	0x20000da0
 8010a1c:	20000024 	.word	0x20000024
 8010a20:	20000128 	.word	0x20000128

08010a24 <CDC_Init_FS>:
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void)
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010a28:	2200      	movs	r2, #0
 8010a2a:	4905      	ldr	r1, [pc, #20]	; (8010a40 <CDC_Init_FS+0x1c>)
 8010a2c:	4805      	ldr	r0, [pc, #20]	; (8010a44 <CDC_Init_FS+0x20>)
 8010a2e:	f7fe fd72 	bl	800f516 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010a32:	4905      	ldr	r1, [pc, #20]	; (8010a48 <CDC_Init_FS+0x24>)
 8010a34:	4803      	ldr	r0, [pc, #12]	; (8010a44 <CDC_Init_FS+0x20>)
 8010a36:	f7fe fd8c 	bl	800f552 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8010a3a:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	bd80      	pop	{r7, pc}
 8010a40:	20001874 	.word	0x20001874
 8010a44:	20000da0 	.word	0x20000da0
 8010a48:	20001074 	.word	0x20001074

08010a4c <CDC_DeInit_FS>:
/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void)
{
 8010a4c:	b480      	push	{r7}
 8010a4e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 8010a50:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 8010a52:	4618      	mov	r0, r3
 8010a54:	46bd      	mov	sp, r7
 8010a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5a:	4770      	bx	lr

08010a5c <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010a5c:	b480      	push	{r7}
 8010a5e:	b083      	sub	sp, #12
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	4603      	mov	r3, r0
 8010a64:	6039      	str	r1, [r7, #0]
 8010a66:	71fb      	strb	r3, [r7, #7]
 8010a68:	4613      	mov	r3, r2
 8010a6a:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch(cmd)
 8010a6c:	79fb      	ldrb	r3, [r7, #7]
 8010a6e:	2b23      	cmp	r3, #35	; 0x23
 8010a70:	d84a      	bhi.n	8010b08 <CDC_Control_FS+0xac>
 8010a72:	a201      	add	r2, pc, #4	; (adr r2, 8010a78 <CDC_Control_FS+0x1c>)
 8010a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a78:	08010b09 	.word	0x08010b09
 8010a7c:	08010b09 	.word	0x08010b09
 8010a80:	08010b09 	.word	0x08010b09
 8010a84:	08010b09 	.word	0x08010b09
 8010a88:	08010b09 	.word	0x08010b09
 8010a8c:	08010b09 	.word	0x08010b09
 8010a90:	08010b09 	.word	0x08010b09
 8010a94:	08010b09 	.word	0x08010b09
 8010a98:	08010b09 	.word	0x08010b09
 8010a9c:	08010b09 	.word	0x08010b09
 8010aa0:	08010b09 	.word	0x08010b09
 8010aa4:	08010b09 	.word	0x08010b09
 8010aa8:	08010b09 	.word	0x08010b09
 8010aac:	08010b09 	.word	0x08010b09
 8010ab0:	08010b09 	.word	0x08010b09
 8010ab4:	08010b09 	.word	0x08010b09
 8010ab8:	08010b09 	.word	0x08010b09
 8010abc:	08010b09 	.word	0x08010b09
 8010ac0:	08010b09 	.word	0x08010b09
 8010ac4:	08010b09 	.word	0x08010b09
 8010ac8:	08010b09 	.word	0x08010b09
 8010acc:	08010b09 	.word	0x08010b09
 8010ad0:	08010b09 	.word	0x08010b09
 8010ad4:	08010b09 	.word	0x08010b09
 8010ad8:	08010b09 	.word	0x08010b09
 8010adc:	08010b09 	.word	0x08010b09
 8010ae0:	08010b09 	.word	0x08010b09
 8010ae4:	08010b09 	.word	0x08010b09
 8010ae8:	08010b09 	.word	0x08010b09
 8010aec:	08010b09 	.word	0x08010b09
 8010af0:	08010b09 	.word	0x08010b09
 8010af4:	08010b09 	.word	0x08010b09
 8010af8:	08010b09 	.word	0x08010b09
 8010afc:	08010b09 	.word	0x08010b09
 8010b00:	08010b09 	.word	0x08010b09
 8010b04:	08010b09 	.word	0x08010b09
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8010b08:	bf00      	nop
	}

	return (USBD_OK);
 8010b0a:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	370c      	adds	r7, #12
 8010b10:	46bd      	mov	sp, r7
 8010b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b16:	4770      	bx	lr

08010b18 <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b084      	sub	sp, #16
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
 8010b20:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010b22:	6879      	ldr	r1, [r7, #4]
 8010b24:	480b      	ldr	r0, [pc, #44]	; (8010b54 <CDC_Receive_FS+0x3c>)
 8010b26:	f7fe fd14 	bl	800f552 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010b2a:	480a      	ldr	r0, [pc, #40]	; (8010b54 <CDC_Receive_FS+0x3c>)
 8010b2c:	f7fe fd5a 	bl	800f5e4 <USBD_CDC_ReceivePacket>

	uint8_t len = (uint8_t)*Len;
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	73fb      	strb	r3, [r7, #15]
	memcpy(usb_Rx_buffer, Buf, len);  // copy the data to the buffer
 8010b36:	7bfb      	ldrb	r3, [r7, #15]
 8010b38:	461a      	mov	r2, r3
 8010b3a:	6879      	ldr	r1, [r7, #4]
 8010b3c:	4806      	ldr	r0, [pc, #24]	; (8010b58 <CDC_Receive_FS+0x40>)
 8010b3e:	f000 fd67 	bl	8011610 <memcpy>

	usb_Rx_ready = 1;
 8010b42:	4b06      	ldr	r3, [pc, #24]	; (8010b5c <CDC_Receive_FS+0x44>)
 8010b44:	2201      	movs	r2, #1
 8010b46:	701a      	strb	r2, [r3, #0]

	return (USBD_OK);
 8010b48:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	3710      	adds	r7, #16
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	bd80      	pop	{r7, pc}
 8010b52:	bf00      	nop
 8010b54:	20000da0 	.word	0x20000da0
 8010b58:	20001070 	.word	0x20001070
 8010b5c:	20001072 	.word	0x20001072

08010b60 <CDC_Transmit_FS>:
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b084      	sub	sp, #16
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
 8010b68:	460b      	mov	r3, r1
 8010b6a:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010b70:	4b0d      	ldr	r3, [pc, #52]	; (8010ba8 <CDC_Transmit_FS+0x48>)
 8010b72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b76:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0){
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d001      	beq.n	8010b86 <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 8010b82:	2301      	movs	r3, #1
 8010b84:	e00b      	b.n	8010b9e <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010b86:	887b      	ldrh	r3, [r7, #2]
 8010b88:	461a      	mov	r2, r3
 8010b8a:	6879      	ldr	r1, [r7, #4]
 8010b8c:	4806      	ldr	r0, [pc, #24]	; (8010ba8 <CDC_Transmit_FS+0x48>)
 8010b8e:	f7fe fcc2 	bl	800f516 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010b92:	4805      	ldr	r0, [pc, #20]	; (8010ba8 <CDC_Transmit_FS+0x48>)
 8010b94:	f7fe fcf6 	bl	800f584 <USBD_CDC_TransmitPacket>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 8010b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	3710      	adds	r7, #16
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}
 8010ba6:	bf00      	nop
 8010ba8:	20000da0 	.word	0x20000da0

08010bac <CDC_TransmitCplt_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010bac:	b480      	push	{r7}
 8010bae:	b087      	sub	sp, #28
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	60f8      	str	r0, [r7, #12]
 8010bb4:	60b9      	str	r1, [r7, #8]
 8010bb6:	4613      	mov	r3, r2
 8010bb8:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 8010bba:	2300      	movs	r3, #0
 8010bbc:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 13 */
	return result;
 8010bbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	371c      	adds	r7, #28
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bcc:	4770      	bx	lr
	...

08010bd0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010bd0:	b480      	push	{r7}
 8010bd2:	b083      	sub	sp, #12
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	6039      	str	r1, [r7, #0]
 8010bda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	2212      	movs	r2, #18
 8010be0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010be2:	4b03      	ldr	r3, [pc, #12]	; (8010bf0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010be4:	4618      	mov	r0, r3
 8010be6:	370c      	adds	r7, #12
 8010be8:	46bd      	mov	sp, r7
 8010bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bee:	4770      	bx	lr
 8010bf0:	20000158 	.word	0x20000158

08010bf4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010bf4:	b480      	push	{r7}
 8010bf6:	b083      	sub	sp, #12
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	6039      	str	r1, [r7, #0]
 8010bfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	2204      	movs	r2, #4
 8010c04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010c06:	4b03      	ldr	r3, [pc, #12]	; (8010c14 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010c08:	4618      	mov	r0, r3
 8010c0a:	370c      	adds	r7, #12
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c12:	4770      	bx	lr
 8010c14:	2000016c 	.word	0x2000016c

08010c18 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b082      	sub	sp, #8
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	4603      	mov	r3, r0
 8010c20:	6039      	str	r1, [r7, #0]
 8010c22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010c24:	79fb      	ldrb	r3, [r7, #7]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d105      	bne.n	8010c36 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010c2a:	683a      	ldr	r2, [r7, #0]
 8010c2c:	4907      	ldr	r1, [pc, #28]	; (8010c4c <USBD_FS_ProductStrDescriptor+0x34>)
 8010c2e:	4808      	ldr	r0, [pc, #32]	; (8010c50 <USBD_FS_ProductStrDescriptor+0x38>)
 8010c30:	f7ff fd8b 	bl	801074a <USBD_GetString>
 8010c34:	e004      	b.n	8010c40 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010c36:	683a      	ldr	r2, [r7, #0]
 8010c38:	4904      	ldr	r1, [pc, #16]	; (8010c4c <USBD_FS_ProductStrDescriptor+0x34>)
 8010c3a:	4805      	ldr	r0, [pc, #20]	; (8010c50 <USBD_FS_ProductStrDescriptor+0x38>)
 8010c3c:	f7ff fd85 	bl	801074a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010c40:	4b02      	ldr	r3, [pc, #8]	; (8010c4c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010c42:	4618      	mov	r0, r3
 8010c44:	3708      	adds	r7, #8
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}
 8010c4a:	bf00      	nop
 8010c4c:	20002074 	.word	0x20002074
 8010c50:	080141d8 	.word	0x080141d8

08010c54 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b082      	sub	sp, #8
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	6039      	str	r1, [r7, #0]
 8010c5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010c60:	683a      	ldr	r2, [r7, #0]
 8010c62:	4904      	ldr	r1, [pc, #16]	; (8010c74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010c64:	4804      	ldr	r0, [pc, #16]	; (8010c78 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010c66:	f7ff fd70 	bl	801074a <USBD_GetString>
  return USBD_StrDesc;
 8010c6a:	4b02      	ldr	r3, [pc, #8]	; (8010c74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3708      	adds	r7, #8
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}
 8010c74:	20002074 	.word	0x20002074
 8010c78:	080141f0 	.word	0x080141f0

08010c7c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b082      	sub	sp, #8
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	4603      	mov	r3, r0
 8010c84:	6039      	str	r1, [r7, #0]
 8010c86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	221a      	movs	r2, #26
 8010c8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010c8e:	f000 f843 	bl	8010d18 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010c92:	4b02      	ldr	r3, [pc, #8]	; (8010c9c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010c94:	4618      	mov	r0, r3
 8010c96:	3708      	adds	r7, #8
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}
 8010c9c:	20000170 	.word	0x20000170

08010ca0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b082      	sub	sp, #8
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	6039      	str	r1, [r7, #0]
 8010caa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010cac:	79fb      	ldrb	r3, [r7, #7]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d105      	bne.n	8010cbe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010cb2:	683a      	ldr	r2, [r7, #0]
 8010cb4:	4907      	ldr	r1, [pc, #28]	; (8010cd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010cb6:	4808      	ldr	r0, [pc, #32]	; (8010cd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010cb8:	f7ff fd47 	bl	801074a <USBD_GetString>
 8010cbc:	e004      	b.n	8010cc8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010cbe:	683a      	ldr	r2, [r7, #0]
 8010cc0:	4904      	ldr	r1, [pc, #16]	; (8010cd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010cc2:	4805      	ldr	r0, [pc, #20]	; (8010cd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010cc4:	f7ff fd41 	bl	801074a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010cc8:	4b02      	ldr	r3, [pc, #8]	; (8010cd4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010cca:	4618      	mov	r0, r3
 8010ccc:	3708      	adds	r7, #8
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	bd80      	pop	{r7, pc}
 8010cd2:	bf00      	nop
 8010cd4:	20002074 	.word	0x20002074
 8010cd8:	08014204 	.word	0x08014204

08010cdc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b082      	sub	sp, #8
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	6039      	str	r1, [r7, #0]
 8010ce6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010ce8:	79fb      	ldrb	r3, [r7, #7]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d105      	bne.n	8010cfa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010cee:	683a      	ldr	r2, [r7, #0]
 8010cf0:	4907      	ldr	r1, [pc, #28]	; (8010d10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010cf2:	4808      	ldr	r0, [pc, #32]	; (8010d14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010cf4:	f7ff fd29 	bl	801074a <USBD_GetString>
 8010cf8:	e004      	b.n	8010d04 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010cfa:	683a      	ldr	r2, [r7, #0]
 8010cfc:	4904      	ldr	r1, [pc, #16]	; (8010d10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010cfe:	4805      	ldr	r0, [pc, #20]	; (8010d14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010d00:	f7ff fd23 	bl	801074a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010d04:	4b02      	ldr	r3, [pc, #8]	; (8010d10 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010d06:	4618      	mov	r0, r3
 8010d08:	3708      	adds	r7, #8
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bd80      	pop	{r7, pc}
 8010d0e:	bf00      	nop
 8010d10:	20002074 	.word	0x20002074
 8010d14:	08014210 	.word	0x08014210

08010d18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b084      	sub	sp, #16
 8010d1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010d1e:	4b0f      	ldr	r3, [pc, #60]	; (8010d5c <Get_SerialNum+0x44>)
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010d24:	4b0e      	ldr	r3, [pc, #56]	; (8010d60 <Get_SerialNum+0x48>)
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010d2a:	4b0e      	ldr	r3, [pc, #56]	; (8010d64 <Get_SerialNum+0x4c>)
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010d30:	68fa      	ldr	r2, [r7, #12]
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	4413      	add	r3, r2
 8010d36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d009      	beq.n	8010d52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010d3e:	2208      	movs	r2, #8
 8010d40:	4909      	ldr	r1, [pc, #36]	; (8010d68 <Get_SerialNum+0x50>)
 8010d42:	68f8      	ldr	r0, [r7, #12]
 8010d44:	f000 f814 	bl	8010d70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010d48:	2204      	movs	r2, #4
 8010d4a:	4908      	ldr	r1, [pc, #32]	; (8010d6c <Get_SerialNum+0x54>)
 8010d4c:	68b8      	ldr	r0, [r7, #8]
 8010d4e:	f000 f80f 	bl	8010d70 <IntToUnicode>
  }
}
 8010d52:	bf00      	nop
 8010d54:	3710      	adds	r7, #16
 8010d56:	46bd      	mov	sp, r7
 8010d58:	bd80      	pop	{r7, pc}
 8010d5a:	bf00      	nop
 8010d5c:	1fff7590 	.word	0x1fff7590
 8010d60:	1fff7594 	.word	0x1fff7594
 8010d64:	1fff7598 	.word	0x1fff7598
 8010d68:	20000172 	.word	0x20000172
 8010d6c:	20000182 	.word	0x20000182

08010d70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010d70:	b480      	push	{r7}
 8010d72:	b087      	sub	sp, #28
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	60f8      	str	r0, [r7, #12]
 8010d78:	60b9      	str	r1, [r7, #8]
 8010d7a:	4613      	mov	r3, r2
 8010d7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010d7e:	2300      	movs	r3, #0
 8010d80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010d82:	2300      	movs	r3, #0
 8010d84:	75fb      	strb	r3, [r7, #23]
 8010d86:	e027      	b.n	8010dd8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	0f1b      	lsrs	r3, r3, #28
 8010d8c:	2b09      	cmp	r3, #9
 8010d8e:	d80b      	bhi.n	8010da8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	0f1b      	lsrs	r3, r3, #28
 8010d94:	b2da      	uxtb	r2, r3
 8010d96:	7dfb      	ldrb	r3, [r7, #23]
 8010d98:	005b      	lsls	r3, r3, #1
 8010d9a:	4619      	mov	r1, r3
 8010d9c:	68bb      	ldr	r3, [r7, #8]
 8010d9e:	440b      	add	r3, r1
 8010da0:	3230      	adds	r2, #48	; 0x30
 8010da2:	b2d2      	uxtb	r2, r2
 8010da4:	701a      	strb	r2, [r3, #0]
 8010da6:	e00a      	b.n	8010dbe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	0f1b      	lsrs	r3, r3, #28
 8010dac:	b2da      	uxtb	r2, r3
 8010dae:	7dfb      	ldrb	r3, [r7, #23]
 8010db0:	005b      	lsls	r3, r3, #1
 8010db2:	4619      	mov	r1, r3
 8010db4:	68bb      	ldr	r3, [r7, #8]
 8010db6:	440b      	add	r3, r1
 8010db8:	3237      	adds	r2, #55	; 0x37
 8010dba:	b2d2      	uxtb	r2, r2
 8010dbc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	011b      	lsls	r3, r3, #4
 8010dc2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010dc4:	7dfb      	ldrb	r3, [r7, #23]
 8010dc6:	005b      	lsls	r3, r3, #1
 8010dc8:	3301      	adds	r3, #1
 8010dca:	68ba      	ldr	r2, [r7, #8]
 8010dcc:	4413      	add	r3, r2
 8010dce:	2200      	movs	r2, #0
 8010dd0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010dd2:	7dfb      	ldrb	r3, [r7, #23]
 8010dd4:	3301      	adds	r3, #1
 8010dd6:	75fb      	strb	r3, [r7, #23]
 8010dd8:	7dfa      	ldrb	r2, [r7, #23]
 8010dda:	79fb      	ldrb	r3, [r7, #7]
 8010ddc:	429a      	cmp	r2, r3
 8010dde:	d3d3      	bcc.n	8010d88 <IntToUnicode+0x18>
  }
}
 8010de0:	bf00      	nop
 8010de2:	bf00      	nop
 8010de4:	371c      	adds	r7, #28
 8010de6:	46bd      	mov	sp, r7
 8010de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dec:	4770      	bx	lr
	...

08010df0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b0b0      	sub	sp, #192	; 0xc0
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010df8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010dfc:	2200      	movs	r2, #0
 8010dfe:	601a      	str	r2, [r3, #0]
 8010e00:	605a      	str	r2, [r3, #4]
 8010e02:	609a      	str	r2, [r3, #8]
 8010e04:	60da      	str	r2, [r3, #12]
 8010e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010e08:	f107 0318 	add.w	r3, r7, #24
 8010e0c:	2294      	movs	r2, #148	; 0x94
 8010e0e:	2100      	movs	r1, #0
 8010e10:	4618      	mov	r0, r3
 8010e12:	f000 fc0b 	bl	801162c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010e1e:	d163      	bne.n	8010ee8 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010e24:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8010e26:	2300      	movs	r3, #0
 8010e28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010e2c:	f107 0318 	add.w	r3, r7, #24
 8010e30:	4618      	mov	r0, r3
 8010e32:	f7f4 ff59 	bl	8005ce8 <HAL_RCCEx_PeriphCLKConfig>
 8010e36:	4603      	mov	r3, r0
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d001      	beq.n	8010e40 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8010e3c:	f7f1 fa4e 	bl	80022dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010e40:	4b2b      	ldr	r3, [pc, #172]	; (8010ef0 <HAL_PCD_MspInit+0x100>)
 8010e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e44:	4a2a      	ldr	r2, [pc, #168]	; (8010ef0 <HAL_PCD_MspInit+0x100>)
 8010e46:	f043 0301 	orr.w	r3, r3, #1
 8010e4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010e4c:	4b28      	ldr	r3, [pc, #160]	; (8010ef0 <HAL_PCD_MspInit+0x100>)
 8010e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e50:	f003 0301 	and.w	r3, r3, #1
 8010e54:	617b      	str	r3, [r7, #20]
 8010e56:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010e58:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010e5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e60:	2302      	movs	r3, #2
 8010e62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e66:	2300      	movs	r3, #0
 8010e68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e6c:	2303      	movs	r3, #3
 8010e6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010e72:	230a      	movs	r3, #10
 8010e74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010e78:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010e7c:	4619      	mov	r1, r3
 8010e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010e82:	f7f2 fa7d 	bl	8003380 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010e86:	4b1a      	ldr	r3, [pc, #104]	; (8010ef0 <HAL_PCD_MspInit+0x100>)
 8010e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e8a:	4a19      	ldr	r2, [pc, #100]	; (8010ef0 <HAL_PCD_MspInit+0x100>)
 8010e8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010e92:	4b17      	ldr	r3, [pc, #92]	; (8010ef0 <HAL_PCD_MspInit+0x100>)
 8010e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010e9a:	613b      	str	r3, [r7, #16]
 8010e9c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010e9e:	4b14      	ldr	r3, [pc, #80]	; (8010ef0 <HAL_PCD_MspInit+0x100>)
 8010ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d114      	bne.n	8010ed4 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010eaa:	4b11      	ldr	r3, [pc, #68]	; (8010ef0 <HAL_PCD_MspInit+0x100>)
 8010eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010eae:	4a10      	ldr	r2, [pc, #64]	; (8010ef0 <HAL_PCD_MspInit+0x100>)
 8010eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010eb4:	6593      	str	r3, [r2, #88]	; 0x58
 8010eb6:	4b0e      	ldr	r3, [pc, #56]	; (8010ef0 <HAL_PCD_MspInit+0x100>)
 8010eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010ebe:	60fb      	str	r3, [r7, #12]
 8010ec0:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8010ec2:	f7f3 fffd 	bl	8004ec0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8010ec6:	4b0a      	ldr	r3, [pc, #40]	; (8010ef0 <HAL_PCD_MspInit+0x100>)
 8010ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010eca:	4a09      	ldr	r2, [pc, #36]	; (8010ef0 <HAL_PCD_MspInit+0x100>)
 8010ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8010ed2:	e001      	b.n	8010ed8 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8010ed4:	f7f3 fff4 	bl	8004ec0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010ed8:	2200      	movs	r2, #0
 8010eda:	2100      	movs	r1, #0
 8010edc:	2043      	movs	r0, #67	; 0x43
 8010ede:	f7f1 feea 	bl	8002cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010ee2:	2043      	movs	r0, #67	; 0x43
 8010ee4:	f7f1 ff03 	bl	8002cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010ee8:	bf00      	nop
 8010eea:	37c0      	adds	r7, #192	; 0xc0
 8010eec:	46bd      	mov	sp, r7
 8010eee:	bd80      	pop	{r7, pc}
 8010ef0:	40021000 	.word	0x40021000

08010ef4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b082      	sub	sp, #8
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010f08:	4619      	mov	r1, r3
 8010f0a:	4610      	mov	r0, r2
 8010f0c:	f7fe fc36 	bl	800f77c <USBD_LL_SetupStage>
}
 8010f10:	bf00      	nop
 8010f12:	3708      	adds	r7, #8
 8010f14:	46bd      	mov	sp, r7
 8010f16:	bd80      	pop	{r7, pc}

08010f18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b082      	sub	sp, #8
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
 8010f20:	460b      	mov	r3, r1
 8010f22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010f2a:	78fa      	ldrb	r2, [r7, #3]
 8010f2c:	6879      	ldr	r1, [r7, #4]
 8010f2e:	4613      	mov	r3, r2
 8010f30:	00db      	lsls	r3, r3, #3
 8010f32:	4413      	add	r3, r2
 8010f34:	009b      	lsls	r3, r3, #2
 8010f36:	440b      	add	r3, r1
 8010f38:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010f3c:	681a      	ldr	r2, [r3, #0]
 8010f3e:	78fb      	ldrb	r3, [r7, #3]
 8010f40:	4619      	mov	r1, r3
 8010f42:	f7fe fc70 	bl	800f826 <USBD_LL_DataOutStage>
}
 8010f46:	bf00      	nop
 8010f48:	3708      	adds	r7, #8
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}

08010f4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f4e:	b580      	push	{r7, lr}
 8010f50:	b082      	sub	sp, #8
 8010f52:	af00      	add	r7, sp, #0
 8010f54:	6078      	str	r0, [r7, #4]
 8010f56:	460b      	mov	r3, r1
 8010f58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010f60:	78fa      	ldrb	r2, [r7, #3]
 8010f62:	6879      	ldr	r1, [r7, #4]
 8010f64:	4613      	mov	r3, r2
 8010f66:	00db      	lsls	r3, r3, #3
 8010f68:	4413      	add	r3, r2
 8010f6a:	009b      	lsls	r3, r3, #2
 8010f6c:	440b      	add	r3, r1
 8010f6e:	334c      	adds	r3, #76	; 0x4c
 8010f70:	681a      	ldr	r2, [r3, #0]
 8010f72:	78fb      	ldrb	r3, [r7, #3]
 8010f74:	4619      	mov	r1, r3
 8010f76:	f7fe fcb9 	bl	800f8ec <USBD_LL_DataInStage>
}
 8010f7a:	bf00      	nop
 8010f7c:	3708      	adds	r7, #8
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	bd80      	pop	{r7, pc}

08010f82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f82:	b580      	push	{r7, lr}
 8010f84:	b082      	sub	sp, #8
 8010f86:	af00      	add	r7, sp, #0
 8010f88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010f90:	4618      	mov	r0, r3
 8010f92:	f7fe fdcd 	bl	800fb30 <USBD_LL_SOF>
}
 8010f96:	bf00      	nop
 8010f98:	3708      	adds	r7, #8
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	bd80      	pop	{r7, pc}

08010f9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f9e:	b580      	push	{r7, lr}
 8010fa0:	b084      	sub	sp, #16
 8010fa2:	af00      	add	r7, sp, #0
 8010fa4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010fa6:	2301      	movs	r3, #1
 8010fa8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	68db      	ldr	r3, [r3, #12]
 8010fae:	2b02      	cmp	r3, #2
 8010fb0:	d001      	beq.n	8010fb6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010fb2:	f7f1 f993 	bl	80022dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010fbc:	7bfa      	ldrb	r2, [r7, #15]
 8010fbe:	4611      	mov	r1, r2
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	f7fe fd77 	bl	800fab4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f7fe fd23 	bl	800fa18 <USBD_LL_Reset>
}
 8010fd2:	bf00      	nop
 8010fd4:	3710      	adds	r7, #16
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	bd80      	pop	{r7, pc}
	...

08010fdc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b082      	sub	sp, #8
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	687a      	ldr	r2, [r7, #4]
 8010ff0:	6812      	ldr	r2, [r2, #0]
 8010ff2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010ff6:	f043 0301 	orr.w	r3, r3, #1
 8010ffa:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011002:	4618      	mov	r0, r3
 8011004:	f7fe fd66 	bl	800fad4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	6a1b      	ldr	r3, [r3, #32]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d005      	beq.n	801101c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011010:	4b04      	ldr	r3, [pc, #16]	; (8011024 <HAL_PCD_SuspendCallback+0x48>)
 8011012:	691b      	ldr	r3, [r3, #16]
 8011014:	4a03      	ldr	r2, [pc, #12]	; (8011024 <HAL_PCD_SuspendCallback+0x48>)
 8011016:	f043 0306 	orr.w	r3, r3, #6
 801101a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801101c:	bf00      	nop
 801101e:	3708      	adds	r7, #8
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}
 8011024:	e000ed00 	.word	0xe000ed00

08011028 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b082      	sub	sp, #8
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	687a      	ldr	r2, [r7, #4]
 801103c:	6812      	ldr	r2, [r2, #0]
 801103e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011042:	f023 0301 	bic.w	r3, r3, #1
 8011046:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	6a1b      	ldr	r3, [r3, #32]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d007      	beq.n	8011060 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011050:	4b08      	ldr	r3, [pc, #32]	; (8011074 <HAL_PCD_ResumeCallback+0x4c>)
 8011052:	691b      	ldr	r3, [r3, #16]
 8011054:	4a07      	ldr	r2, [pc, #28]	; (8011074 <HAL_PCD_ResumeCallback+0x4c>)
 8011056:	f023 0306 	bic.w	r3, r3, #6
 801105a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801105c:	f000 faa6 	bl	80115ac <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011066:	4618      	mov	r0, r3
 8011068:	f7fe fd4a 	bl	800fb00 <USBD_LL_Resume>
}
 801106c:	bf00      	nop
 801106e:	3708      	adds	r7, #8
 8011070:	46bd      	mov	sp, r7
 8011072:	bd80      	pop	{r7, pc}
 8011074:	e000ed00 	.word	0xe000ed00

08011078 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b082      	sub	sp, #8
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
 8011080:	460b      	mov	r3, r1
 8011082:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801108a:	78fa      	ldrb	r2, [r7, #3]
 801108c:	4611      	mov	r1, r2
 801108e:	4618      	mov	r0, r3
 8011090:	f7fe fd96 	bl	800fbc0 <USBD_LL_IsoOUTIncomplete>
}
 8011094:	bf00      	nop
 8011096:	3708      	adds	r7, #8
 8011098:	46bd      	mov	sp, r7
 801109a:	bd80      	pop	{r7, pc}

0801109c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b082      	sub	sp, #8
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
 80110a4:	460b      	mov	r3, r1
 80110a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80110ae:	78fa      	ldrb	r2, [r7, #3]
 80110b0:	4611      	mov	r1, r2
 80110b2:	4618      	mov	r0, r3
 80110b4:	f7fe fd5e 	bl	800fb74 <USBD_LL_IsoINIncomplete>
}
 80110b8:	bf00      	nop
 80110ba:	3708      	adds	r7, #8
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd80      	pop	{r7, pc}

080110c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b082      	sub	sp, #8
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80110ce:	4618      	mov	r0, r3
 80110d0:	f7fe fd9c 	bl	800fc0c <USBD_LL_DevConnected>
}
 80110d4:	bf00      	nop
 80110d6:	3708      	adds	r7, #8
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}

080110dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b082      	sub	sp, #8
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80110ea:	4618      	mov	r0, r3
 80110ec:	f7fe fd99 	bl	800fc22 <USBD_LL_DevDisconnected>
}
 80110f0:	bf00      	nop
 80110f2:	3708      	adds	r7, #8
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd80      	pop	{r7, pc}

080110f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b082      	sub	sp, #8
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	781b      	ldrb	r3, [r3, #0]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d139      	bne.n	801117c <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011108:	4a1f      	ldr	r2, [pc, #124]	; (8011188 <USBD_LL_Init+0x90>)
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	4a1d      	ldr	r2, [pc, #116]	; (8011188 <USBD_LL_Init+0x90>)
 8011114:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011118:	4b1b      	ldr	r3, [pc, #108]	; (8011188 <USBD_LL_Init+0x90>)
 801111a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801111e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8011120:	4b19      	ldr	r3, [pc, #100]	; (8011188 <USBD_LL_Init+0x90>)
 8011122:	2206      	movs	r2, #6
 8011124:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011126:	4b18      	ldr	r3, [pc, #96]	; (8011188 <USBD_LL_Init+0x90>)
 8011128:	2202      	movs	r2, #2
 801112a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801112c:	4b16      	ldr	r3, [pc, #88]	; (8011188 <USBD_LL_Init+0x90>)
 801112e:	2200      	movs	r2, #0
 8011130:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011132:	4b15      	ldr	r3, [pc, #84]	; (8011188 <USBD_LL_Init+0x90>)
 8011134:	2200      	movs	r2, #0
 8011136:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011138:	4b13      	ldr	r3, [pc, #76]	; (8011188 <USBD_LL_Init+0x90>)
 801113a:	2200      	movs	r2, #0
 801113c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801113e:	4b12      	ldr	r3, [pc, #72]	; (8011188 <USBD_LL_Init+0x90>)
 8011140:	2200      	movs	r2, #0
 8011142:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011144:	4b10      	ldr	r3, [pc, #64]	; (8011188 <USBD_LL_Init+0x90>)
 8011146:	2200      	movs	r2, #0
 8011148:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801114a:	4b0f      	ldr	r3, [pc, #60]	; (8011188 <USBD_LL_Init+0x90>)
 801114c:	2200      	movs	r2, #0
 801114e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011150:	480d      	ldr	r0, [pc, #52]	; (8011188 <USBD_LL_Init+0x90>)
 8011152:	f7f2 fc25 	bl	80039a0 <HAL_PCD_Init>
 8011156:	4603      	mov	r3, r0
 8011158:	2b00      	cmp	r3, #0
 801115a:	d001      	beq.n	8011160 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 801115c:	f7f1 f8be 	bl	80022dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011160:	2180      	movs	r1, #128	; 0x80
 8011162:	4809      	ldr	r0, [pc, #36]	; (8011188 <USBD_LL_Init+0x90>)
 8011164:	f7f3 fda7 	bl	8004cb6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011168:	2240      	movs	r2, #64	; 0x40
 801116a:	2100      	movs	r1, #0
 801116c:	4806      	ldr	r0, [pc, #24]	; (8011188 <USBD_LL_Init+0x90>)
 801116e:	f7f3 fd5b 	bl	8004c28 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011172:	2280      	movs	r2, #128	; 0x80
 8011174:	2101      	movs	r1, #1
 8011176:	4804      	ldr	r0, [pc, #16]	; (8011188 <USBD_LL_Init+0x90>)
 8011178:	f7f3 fd56 	bl	8004c28 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801117c:	2300      	movs	r3, #0
}
 801117e:	4618      	mov	r0, r3
 8011180:	3708      	adds	r7, #8
 8011182:	46bd      	mov	sp, r7
 8011184:	bd80      	pop	{r7, pc}
 8011186:	bf00      	nop
 8011188:	20002274 	.word	0x20002274

0801118c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b084      	sub	sp, #16
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011194:	2300      	movs	r3, #0
 8011196:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011198:	2300      	movs	r3, #0
 801119a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80111a2:	4618      	mov	r0, r3
 80111a4:	f7f2 fd20 	bl	8003be8 <HAL_PCD_Start>
 80111a8:	4603      	mov	r3, r0
 80111aa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80111ac:	7bbb      	ldrb	r3, [r7, #14]
 80111ae:	2b03      	cmp	r3, #3
 80111b0:	d816      	bhi.n	80111e0 <USBD_LL_Start+0x54>
 80111b2:	a201      	add	r2, pc, #4	; (adr r2, 80111b8 <USBD_LL_Start+0x2c>)
 80111b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111b8:	080111c9 	.word	0x080111c9
 80111bc:	080111cf 	.word	0x080111cf
 80111c0:	080111d5 	.word	0x080111d5
 80111c4:	080111db 	.word	0x080111db
    case HAL_OK :
      usb_status = USBD_OK;
 80111c8:	2300      	movs	r3, #0
 80111ca:	73fb      	strb	r3, [r7, #15]
    break;
 80111cc:	e00b      	b.n	80111e6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80111ce:	2303      	movs	r3, #3
 80111d0:	73fb      	strb	r3, [r7, #15]
    break;
 80111d2:	e008      	b.n	80111e6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80111d4:	2301      	movs	r3, #1
 80111d6:	73fb      	strb	r3, [r7, #15]
    break;
 80111d8:	e005      	b.n	80111e6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80111da:	2303      	movs	r3, #3
 80111dc:	73fb      	strb	r3, [r7, #15]
    break;
 80111de:	e002      	b.n	80111e6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80111e0:	2303      	movs	r3, #3
 80111e2:	73fb      	strb	r3, [r7, #15]
    break;
 80111e4:	bf00      	nop
  }
  return usb_status;
 80111e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80111e8:	4618      	mov	r0, r3
 80111ea:	3710      	adds	r7, #16
 80111ec:	46bd      	mov	sp, r7
 80111ee:	bd80      	pop	{r7, pc}

080111f0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b084      	sub	sp, #16
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
 80111f8:	4608      	mov	r0, r1
 80111fa:	4611      	mov	r1, r2
 80111fc:	461a      	mov	r2, r3
 80111fe:	4603      	mov	r3, r0
 8011200:	70fb      	strb	r3, [r7, #3]
 8011202:	460b      	mov	r3, r1
 8011204:	70bb      	strb	r3, [r7, #2]
 8011206:	4613      	mov	r3, r2
 8011208:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801120a:	2300      	movs	r3, #0
 801120c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801120e:	2300      	movs	r3, #0
 8011210:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011218:	78bb      	ldrb	r3, [r7, #2]
 801121a:	883a      	ldrh	r2, [r7, #0]
 801121c:	78f9      	ldrb	r1, [r7, #3]
 801121e:	f7f3 f9ca 	bl	80045b6 <HAL_PCD_EP_Open>
 8011222:	4603      	mov	r3, r0
 8011224:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011226:	7bbb      	ldrb	r3, [r7, #14]
 8011228:	2b03      	cmp	r3, #3
 801122a:	d817      	bhi.n	801125c <USBD_LL_OpenEP+0x6c>
 801122c:	a201      	add	r2, pc, #4	; (adr r2, 8011234 <USBD_LL_OpenEP+0x44>)
 801122e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011232:	bf00      	nop
 8011234:	08011245 	.word	0x08011245
 8011238:	0801124b 	.word	0x0801124b
 801123c:	08011251 	.word	0x08011251
 8011240:	08011257 	.word	0x08011257
    case HAL_OK :
      usb_status = USBD_OK;
 8011244:	2300      	movs	r3, #0
 8011246:	73fb      	strb	r3, [r7, #15]
    break;
 8011248:	e00b      	b.n	8011262 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801124a:	2303      	movs	r3, #3
 801124c:	73fb      	strb	r3, [r7, #15]
    break;
 801124e:	e008      	b.n	8011262 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011250:	2301      	movs	r3, #1
 8011252:	73fb      	strb	r3, [r7, #15]
    break;
 8011254:	e005      	b.n	8011262 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011256:	2303      	movs	r3, #3
 8011258:	73fb      	strb	r3, [r7, #15]
    break;
 801125a:	e002      	b.n	8011262 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 801125c:	2303      	movs	r3, #3
 801125e:	73fb      	strb	r3, [r7, #15]
    break;
 8011260:	bf00      	nop
  }
  return usb_status;
 8011262:	7bfb      	ldrb	r3, [r7, #15]
}
 8011264:	4618      	mov	r0, r3
 8011266:	3710      	adds	r7, #16
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}

0801126c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b084      	sub	sp, #16
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
 8011274:	460b      	mov	r3, r1
 8011276:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011278:	2300      	movs	r3, #0
 801127a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801127c:	2300      	movs	r3, #0
 801127e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011286:	78fa      	ldrb	r2, [r7, #3]
 8011288:	4611      	mov	r1, r2
 801128a:	4618      	mov	r0, r3
 801128c:	f7f3 f9fb 	bl	8004686 <HAL_PCD_EP_Close>
 8011290:	4603      	mov	r3, r0
 8011292:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011294:	7bbb      	ldrb	r3, [r7, #14]
 8011296:	2b03      	cmp	r3, #3
 8011298:	d816      	bhi.n	80112c8 <USBD_LL_CloseEP+0x5c>
 801129a:	a201      	add	r2, pc, #4	; (adr r2, 80112a0 <USBD_LL_CloseEP+0x34>)
 801129c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112a0:	080112b1 	.word	0x080112b1
 80112a4:	080112b7 	.word	0x080112b7
 80112a8:	080112bd 	.word	0x080112bd
 80112ac:	080112c3 	.word	0x080112c3
    case HAL_OK :
      usb_status = USBD_OK;
 80112b0:	2300      	movs	r3, #0
 80112b2:	73fb      	strb	r3, [r7, #15]
    break;
 80112b4:	e00b      	b.n	80112ce <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80112b6:	2303      	movs	r3, #3
 80112b8:	73fb      	strb	r3, [r7, #15]
    break;
 80112ba:	e008      	b.n	80112ce <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80112bc:	2301      	movs	r3, #1
 80112be:	73fb      	strb	r3, [r7, #15]
    break;
 80112c0:	e005      	b.n	80112ce <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80112c2:	2303      	movs	r3, #3
 80112c4:	73fb      	strb	r3, [r7, #15]
    break;
 80112c6:	e002      	b.n	80112ce <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80112c8:	2303      	movs	r3, #3
 80112ca:	73fb      	strb	r3, [r7, #15]
    break;
 80112cc:	bf00      	nop
  }
  return usb_status;
 80112ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80112d0:	4618      	mov	r0, r3
 80112d2:	3710      	adds	r7, #16
 80112d4:	46bd      	mov	sp, r7
 80112d6:	bd80      	pop	{r7, pc}

080112d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b084      	sub	sp, #16
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
 80112e0:	460b      	mov	r3, r1
 80112e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112e4:	2300      	movs	r3, #0
 80112e6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112e8:	2300      	movs	r3, #0
 80112ea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80112f2:	78fa      	ldrb	r2, [r7, #3]
 80112f4:	4611      	mov	r1, r2
 80112f6:	4618      	mov	r0, r3
 80112f8:	f7f3 faa2 	bl	8004840 <HAL_PCD_EP_SetStall>
 80112fc:	4603      	mov	r3, r0
 80112fe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011300:	7bbb      	ldrb	r3, [r7, #14]
 8011302:	2b03      	cmp	r3, #3
 8011304:	d816      	bhi.n	8011334 <USBD_LL_StallEP+0x5c>
 8011306:	a201      	add	r2, pc, #4	; (adr r2, 801130c <USBD_LL_StallEP+0x34>)
 8011308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801130c:	0801131d 	.word	0x0801131d
 8011310:	08011323 	.word	0x08011323
 8011314:	08011329 	.word	0x08011329
 8011318:	0801132f 	.word	0x0801132f
    case HAL_OK :
      usb_status = USBD_OK;
 801131c:	2300      	movs	r3, #0
 801131e:	73fb      	strb	r3, [r7, #15]
    break;
 8011320:	e00b      	b.n	801133a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011322:	2303      	movs	r3, #3
 8011324:	73fb      	strb	r3, [r7, #15]
    break;
 8011326:	e008      	b.n	801133a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011328:	2301      	movs	r3, #1
 801132a:	73fb      	strb	r3, [r7, #15]
    break;
 801132c:	e005      	b.n	801133a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801132e:	2303      	movs	r3, #3
 8011330:	73fb      	strb	r3, [r7, #15]
    break;
 8011332:	e002      	b.n	801133a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8011334:	2303      	movs	r3, #3
 8011336:	73fb      	strb	r3, [r7, #15]
    break;
 8011338:	bf00      	nop
  }
  return usb_status;
 801133a:	7bfb      	ldrb	r3, [r7, #15]
}
 801133c:	4618      	mov	r0, r3
 801133e:	3710      	adds	r7, #16
 8011340:	46bd      	mov	sp, r7
 8011342:	bd80      	pop	{r7, pc}

08011344 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b084      	sub	sp, #16
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
 801134c:	460b      	mov	r3, r1
 801134e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011350:	2300      	movs	r3, #0
 8011352:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011354:	2300      	movs	r3, #0
 8011356:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801135e:	78fa      	ldrb	r2, [r7, #3]
 8011360:	4611      	mov	r1, r2
 8011362:	4618      	mov	r0, r3
 8011364:	f7f3 face 	bl	8004904 <HAL_PCD_EP_ClrStall>
 8011368:	4603      	mov	r3, r0
 801136a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801136c:	7bbb      	ldrb	r3, [r7, #14]
 801136e:	2b03      	cmp	r3, #3
 8011370:	d816      	bhi.n	80113a0 <USBD_LL_ClearStallEP+0x5c>
 8011372:	a201      	add	r2, pc, #4	; (adr r2, 8011378 <USBD_LL_ClearStallEP+0x34>)
 8011374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011378:	08011389 	.word	0x08011389
 801137c:	0801138f 	.word	0x0801138f
 8011380:	08011395 	.word	0x08011395
 8011384:	0801139b 	.word	0x0801139b
    case HAL_OK :
      usb_status = USBD_OK;
 8011388:	2300      	movs	r3, #0
 801138a:	73fb      	strb	r3, [r7, #15]
    break;
 801138c:	e00b      	b.n	80113a6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801138e:	2303      	movs	r3, #3
 8011390:	73fb      	strb	r3, [r7, #15]
    break;
 8011392:	e008      	b.n	80113a6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011394:	2301      	movs	r3, #1
 8011396:	73fb      	strb	r3, [r7, #15]
    break;
 8011398:	e005      	b.n	80113a6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801139a:	2303      	movs	r3, #3
 801139c:	73fb      	strb	r3, [r7, #15]
    break;
 801139e:	e002      	b.n	80113a6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80113a0:	2303      	movs	r3, #3
 80113a2:	73fb      	strb	r3, [r7, #15]
    break;
 80113a4:	bf00      	nop
  }
  return usb_status;
 80113a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80113a8:	4618      	mov	r0, r3
 80113aa:	3710      	adds	r7, #16
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bd80      	pop	{r7, pc}

080113b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80113b0:	b480      	push	{r7}
 80113b2:	b085      	sub	sp, #20
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	460b      	mov	r3, r1
 80113ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80113c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80113c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	da0b      	bge.n	80113e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80113cc:	78fb      	ldrb	r3, [r7, #3]
 80113ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80113d2:	68f9      	ldr	r1, [r7, #12]
 80113d4:	4613      	mov	r3, r2
 80113d6:	00db      	lsls	r3, r3, #3
 80113d8:	4413      	add	r3, r2
 80113da:	009b      	lsls	r3, r3, #2
 80113dc:	440b      	add	r3, r1
 80113de:	333e      	adds	r3, #62	; 0x3e
 80113e0:	781b      	ldrb	r3, [r3, #0]
 80113e2:	e00b      	b.n	80113fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80113e4:	78fb      	ldrb	r3, [r7, #3]
 80113e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80113ea:	68f9      	ldr	r1, [r7, #12]
 80113ec:	4613      	mov	r3, r2
 80113ee:	00db      	lsls	r3, r3, #3
 80113f0:	4413      	add	r3, r2
 80113f2:	009b      	lsls	r3, r3, #2
 80113f4:	440b      	add	r3, r1
 80113f6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80113fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80113fc:	4618      	mov	r0, r3
 80113fe:	3714      	adds	r7, #20
 8011400:	46bd      	mov	sp, r7
 8011402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011406:	4770      	bx	lr

08011408 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b084      	sub	sp, #16
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
 8011410:	460b      	mov	r3, r1
 8011412:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011414:	2300      	movs	r3, #0
 8011416:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011418:	2300      	movs	r3, #0
 801141a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011422:	78fa      	ldrb	r2, [r7, #3]
 8011424:	4611      	mov	r1, r2
 8011426:	4618      	mov	r0, r3
 8011428:	f7f3 f8a0 	bl	800456c <HAL_PCD_SetAddress>
 801142c:	4603      	mov	r3, r0
 801142e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011430:	7bbb      	ldrb	r3, [r7, #14]
 8011432:	2b03      	cmp	r3, #3
 8011434:	d816      	bhi.n	8011464 <USBD_LL_SetUSBAddress+0x5c>
 8011436:	a201      	add	r2, pc, #4	; (adr r2, 801143c <USBD_LL_SetUSBAddress+0x34>)
 8011438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801143c:	0801144d 	.word	0x0801144d
 8011440:	08011453 	.word	0x08011453
 8011444:	08011459 	.word	0x08011459
 8011448:	0801145f 	.word	0x0801145f
    case HAL_OK :
      usb_status = USBD_OK;
 801144c:	2300      	movs	r3, #0
 801144e:	73fb      	strb	r3, [r7, #15]
    break;
 8011450:	e00b      	b.n	801146a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011452:	2303      	movs	r3, #3
 8011454:	73fb      	strb	r3, [r7, #15]
    break;
 8011456:	e008      	b.n	801146a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011458:	2301      	movs	r3, #1
 801145a:	73fb      	strb	r3, [r7, #15]
    break;
 801145c:	e005      	b.n	801146a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801145e:	2303      	movs	r3, #3
 8011460:	73fb      	strb	r3, [r7, #15]
    break;
 8011462:	e002      	b.n	801146a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8011464:	2303      	movs	r3, #3
 8011466:	73fb      	strb	r3, [r7, #15]
    break;
 8011468:	bf00      	nop
  }
  return usb_status;
 801146a:	7bfb      	ldrb	r3, [r7, #15]
}
 801146c:	4618      	mov	r0, r3
 801146e:	3710      	adds	r7, #16
 8011470:	46bd      	mov	sp, r7
 8011472:	bd80      	pop	{r7, pc}

08011474 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b086      	sub	sp, #24
 8011478:	af00      	add	r7, sp, #0
 801147a:	60f8      	str	r0, [r7, #12]
 801147c:	607a      	str	r2, [r7, #4]
 801147e:	603b      	str	r3, [r7, #0]
 8011480:	460b      	mov	r3, r1
 8011482:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011484:	2300      	movs	r3, #0
 8011486:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011488:	2300      	movs	r3, #0
 801148a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011492:	7af9      	ldrb	r1, [r7, #11]
 8011494:	683b      	ldr	r3, [r7, #0]
 8011496:	687a      	ldr	r2, [r7, #4]
 8011498:	f7f3 f995 	bl	80047c6 <HAL_PCD_EP_Transmit>
 801149c:	4603      	mov	r3, r0
 801149e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80114a0:	7dbb      	ldrb	r3, [r7, #22]
 80114a2:	2b03      	cmp	r3, #3
 80114a4:	d816      	bhi.n	80114d4 <USBD_LL_Transmit+0x60>
 80114a6:	a201      	add	r2, pc, #4	; (adr r2, 80114ac <USBD_LL_Transmit+0x38>)
 80114a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114ac:	080114bd 	.word	0x080114bd
 80114b0:	080114c3 	.word	0x080114c3
 80114b4:	080114c9 	.word	0x080114c9
 80114b8:	080114cf 	.word	0x080114cf
    case HAL_OK :
      usb_status = USBD_OK;
 80114bc:	2300      	movs	r3, #0
 80114be:	75fb      	strb	r3, [r7, #23]
    break;
 80114c0:	e00b      	b.n	80114da <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80114c2:	2303      	movs	r3, #3
 80114c4:	75fb      	strb	r3, [r7, #23]
    break;
 80114c6:	e008      	b.n	80114da <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80114c8:	2301      	movs	r3, #1
 80114ca:	75fb      	strb	r3, [r7, #23]
    break;
 80114cc:	e005      	b.n	80114da <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80114ce:	2303      	movs	r3, #3
 80114d0:	75fb      	strb	r3, [r7, #23]
    break;
 80114d2:	e002      	b.n	80114da <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80114d4:	2303      	movs	r3, #3
 80114d6:	75fb      	strb	r3, [r7, #23]
    break;
 80114d8:	bf00      	nop
  }
  return usb_status;
 80114da:	7dfb      	ldrb	r3, [r7, #23]
}
 80114dc:	4618      	mov	r0, r3
 80114de:	3718      	adds	r7, #24
 80114e0:	46bd      	mov	sp, r7
 80114e2:	bd80      	pop	{r7, pc}

080114e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b086      	sub	sp, #24
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	60f8      	str	r0, [r7, #12]
 80114ec:	607a      	str	r2, [r7, #4]
 80114ee:	603b      	str	r3, [r7, #0]
 80114f0:	460b      	mov	r3, r1
 80114f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114f4:	2300      	movs	r3, #0
 80114f6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114f8:	2300      	movs	r3, #0
 80114fa:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011502:	7af9      	ldrb	r1, [r7, #11]
 8011504:	683b      	ldr	r3, [r7, #0]
 8011506:	687a      	ldr	r2, [r7, #4]
 8011508:	f7f3 f907 	bl	800471a <HAL_PCD_EP_Receive>
 801150c:	4603      	mov	r3, r0
 801150e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8011510:	7dbb      	ldrb	r3, [r7, #22]
 8011512:	2b03      	cmp	r3, #3
 8011514:	d816      	bhi.n	8011544 <USBD_LL_PrepareReceive+0x60>
 8011516:	a201      	add	r2, pc, #4	; (adr r2, 801151c <USBD_LL_PrepareReceive+0x38>)
 8011518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801151c:	0801152d 	.word	0x0801152d
 8011520:	08011533 	.word	0x08011533
 8011524:	08011539 	.word	0x08011539
 8011528:	0801153f 	.word	0x0801153f
    case HAL_OK :
      usb_status = USBD_OK;
 801152c:	2300      	movs	r3, #0
 801152e:	75fb      	strb	r3, [r7, #23]
    break;
 8011530:	e00b      	b.n	801154a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011532:	2303      	movs	r3, #3
 8011534:	75fb      	strb	r3, [r7, #23]
    break;
 8011536:	e008      	b.n	801154a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011538:	2301      	movs	r3, #1
 801153a:	75fb      	strb	r3, [r7, #23]
    break;
 801153c:	e005      	b.n	801154a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801153e:	2303      	movs	r3, #3
 8011540:	75fb      	strb	r3, [r7, #23]
    break;
 8011542:	e002      	b.n	801154a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8011544:	2303      	movs	r3, #3
 8011546:	75fb      	strb	r3, [r7, #23]
    break;
 8011548:	bf00      	nop
  }
  return usb_status;
 801154a:	7dfb      	ldrb	r3, [r7, #23]
}
 801154c:	4618      	mov	r0, r3
 801154e:	3718      	adds	r7, #24
 8011550:	46bd      	mov	sp, r7
 8011552:	bd80      	pop	{r7, pc}

08011554 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b082      	sub	sp, #8
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
 801155c:	460b      	mov	r3, r1
 801155e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011566:	78fa      	ldrb	r2, [r7, #3]
 8011568:	4611      	mov	r1, r2
 801156a:	4618      	mov	r0, r3
 801156c:	f7f3 f913 	bl	8004796 <HAL_PCD_EP_GetRxCount>
 8011570:	4603      	mov	r3, r0
}
 8011572:	4618      	mov	r0, r3
 8011574:	3708      	adds	r7, #8
 8011576:	46bd      	mov	sp, r7
 8011578:	bd80      	pop	{r7, pc}
	...

0801157c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801157c:	b480      	push	{r7}
 801157e:	b083      	sub	sp, #12
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011584:	4b03      	ldr	r3, [pc, #12]	; (8011594 <USBD_static_malloc+0x18>)
}
 8011586:	4618      	mov	r0, r3
 8011588:	370c      	adds	r7, #12
 801158a:	46bd      	mov	sp, r7
 801158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011590:	4770      	bx	lr
 8011592:	bf00      	nop
 8011594:	20002780 	.word	0x20002780

08011598 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011598:	b480      	push	{r7}
 801159a:	b083      	sub	sp, #12
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]

}
 80115a0:	bf00      	nop
 80115a2:	370c      	adds	r7, #12
 80115a4:	46bd      	mov	sp, r7
 80115a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115aa:	4770      	bx	lr

080115ac <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80115b0:	f7f0 fb70 	bl	8001c94 <SystemClock_Config>
}
 80115b4:	bf00      	nop
 80115b6:	bd80      	pop	{r7, pc}

080115b8 <__libc_init_array>:
 80115b8:	b570      	push	{r4, r5, r6, lr}
 80115ba:	4d0d      	ldr	r5, [pc, #52]	; (80115f0 <__libc_init_array+0x38>)
 80115bc:	4c0d      	ldr	r4, [pc, #52]	; (80115f4 <__libc_init_array+0x3c>)
 80115be:	1b64      	subs	r4, r4, r5
 80115c0:	10a4      	asrs	r4, r4, #2
 80115c2:	2600      	movs	r6, #0
 80115c4:	42a6      	cmp	r6, r4
 80115c6:	d109      	bne.n	80115dc <__libc_init_array+0x24>
 80115c8:	4d0b      	ldr	r5, [pc, #44]	; (80115f8 <__libc_init_array+0x40>)
 80115ca:	4c0c      	ldr	r4, [pc, #48]	; (80115fc <__libc_init_array+0x44>)
 80115cc:	f002 fda2 	bl	8014114 <_init>
 80115d0:	1b64      	subs	r4, r4, r5
 80115d2:	10a4      	asrs	r4, r4, #2
 80115d4:	2600      	movs	r6, #0
 80115d6:	42a6      	cmp	r6, r4
 80115d8:	d105      	bne.n	80115e6 <__libc_init_array+0x2e>
 80115da:	bd70      	pop	{r4, r5, r6, pc}
 80115dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80115e0:	4798      	blx	r3
 80115e2:	3601      	adds	r6, #1
 80115e4:	e7ee      	b.n	80115c4 <__libc_init_array+0xc>
 80115e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80115ea:	4798      	blx	r3
 80115ec:	3601      	adds	r6, #1
 80115ee:	e7f2      	b.n	80115d6 <__libc_init_array+0x1e>
 80115f0:	08014690 	.word	0x08014690
 80115f4:	08014690 	.word	0x08014690
 80115f8:	08014690 	.word	0x08014690
 80115fc:	08014694 	.word	0x08014694

08011600 <malloc>:
 8011600:	4b02      	ldr	r3, [pc, #8]	; (801160c <malloc+0xc>)
 8011602:	4601      	mov	r1, r0
 8011604:	6818      	ldr	r0, [r3, #0]
 8011606:	f000 b885 	b.w	8011714 <_malloc_r>
 801160a:	bf00      	nop
 801160c:	2000018c 	.word	0x2000018c

08011610 <memcpy>:
 8011610:	440a      	add	r2, r1
 8011612:	4291      	cmp	r1, r2
 8011614:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011618:	d100      	bne.n	801161c <memcpy+0xc>
 801161a:	4770      	bx	lr
 801161c:	b510      	push	{r4, lr}
 801161e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011622:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011626:	4291      	cmp	r1, r2
 8011628:	d1f9      	bne.n	801161e <memcpy+0xe>
 801162a:	bd10      	pop	{r4, pc}

0801162c <memset>:
 801162c:	4402      	add	r2, r0
 801162e:	4603      	mov	r3, r0
 8011630:	4293      	cmp	r3, r2
 8011632:	d100      	bne.n	8011636 <memset+0xa>
 8011634:	4770      	bx	lr
 8011636:	f803 1b01 	strb.w	r1, [r3], #1
 801163a:	e7f9      	b.n	8011630 <memset+0x4>

0801163c <_free_r>:
 801163c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801163e:	2900      	cmp	r1, #0
 8011640:	d044      	beq.n	80116cc <_free_r+0x90>
 8011642:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011646:	9001      	str	r0, [sp, #4]
 8011648:	2b00      	cmp	r3, #0
 801164a:	f1a1 0404 	sub.w	r4, r1, #4
 801164e:	bfb8      	it	lt
 8011650:	18e4      	addlt	r4, r4, r3
 8011652:	f001 fd21 	bl	8013098 <__malloc_lock>
 8011656:	4a1e      	ldr	r2, [pc, #120]	; (80116d0 <_free_r+0x94>)
 8011658:	9801      	ldr	r0, [sp, #4]
 801165a:	6813      	ldr	r3, [r2, #0]
 801165c:	b933      	cbnz	r3, 801166c <_free_r+0x30>
 801165e:	6063      	str	r3, [r4, #4]
 8011660:	6014      	str	r4, [r2, #0]
 8011662:	b003      	add	sp, #12
 8011664:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011668:	f001 bd1c 	b.w	80130a4 <__malloc_unlock>
 801166c:	42a3      	cmp	r3, r4
 801166e:	d908      	bls.n	8011682 <_free_r+0x46>
 8011670:	6825      	ldr	r5, [r4, #0]
 8011672:	1961      	adds	r1, r4, r5
 8011674:	428b      	cmp	r3, r1
 8011676:	bf01      	itttt	eq
 8011678:	6819      	ldreq	r1, [r3, #0]
 801167a:	685b      	ldreq	r3, [r3, #4]
 801167c:	1949      	addeq	r1, r1, r5
 801167e:	6021      	streq	r1, [r4, #0]
 8011680:	e7ed      	b.n	801165e <_free_r+0x22>
 8011682:	461a      	mov	r2, r3
 8011684:	685b      	ldr	r3, [r3, #4]
 8011686:	b10b      	cbz	r3, 801168c <_free_r+0x50>
 8011688:	42a3      	cmp	r3, r4
 801168a:	d9fa      	bls.n	8011682 <_free_r+0x46>
 801168c:	6811      	ldr	r1, [r2, #0]
 801168e:	1855      	adds	r5, r2, r1
 8011690:	42a5      	cmp	r5, r4
 8011692:	d10b      	bne.n	80116ac <_free_r+0x70>
 8011694:	6824      	ldr	r4, [r4, #0]
 8011696:	4421      	add	r1, r4
 8011698:	1854      	adds	r4, r2, r1
 801169a:	42a3      	cmp	r3, r4
 801169c:	6011      	str	r1, [r2, #0]
 801169e:	d1e0      	bne.n	8011662 <_free_r+0x26>
 80116a0:	681c      	ldr	r4, [r3, #0]
 80116a2:	685b      	ldr	r3, [r3, #4]
 80116a4:	6053      	str	r3, [r2, #4]
 80116a6:	4421      	add	r1, r4
 80116a8:	6011      	str	r1, [r2, #0]
 80116aa:	e7da      	b.n	8011662 <_free_r+0x26>
 80116ac:	d902      	bls.n	80116b4 <_free_r+0x78>
 80116ae:	230c      	movs	r3, #12
 80116b0:	6003      	str	r3, [r0, #0]
 80116b2:	e7d6      	b.n	8011662 <_free_r+0x26>
 80116b4:	6825      	ldr	r5, [r4, #0]
 80116b6:	1961      	adds	r1, r4, r5
 80116b8:	428b      	cmp	r3, r1
 80116ba:	bf04      	itt	eq
 80116bc:	6819      	ldreq	r1, [r3, #0]
 80116be:	685b      	ldreq	r3, [r3, #4]
 80116c0:	6063      	str	r3, [r4, #4]
 80116c2:	bf04      	itt	eq
 80116c4:	1949      	addeq	r1, r1, r5
 80116c6:	6021      	streq	r1, [r4, #0]
 80116c8:	6054      	str	r4, [r2, #4]
 80116ca:	e7ca      	b.n	8011662 <_free_r+0x26>
 80116cc:	b003      	add	sp, #12
 80116ce:	bd30      	pop	{r4, r5, pc}
 80116d0:	200029a0 	.word	0x200029a0

080116d4 <sbrk_aligned>:
 80116d4:	b570      	push	{r4, r5, r6, lr}
 80116d6:	4e0e      	ldr	r6, [pc, #56]	; (8011710 <sbrk_aligned+0x3c>)
 80116d8:	460c      	mov	r4, r1
 80116da:	6831      	ldr	r1, [r6, #0]
 80116dc:	4605      	mov	r5, r0
 80116de:	b911      	cbnz	r1, 80116e6 <sbrk_aligned+0x12>
 80116e0:	f000 fd0e 	bl	8012100 <_sbrk_r>
 80116e4:	6030      	str	r0, [r6, #0]
 80116e6:	4621      	mov	r1, r4
 80116e8:	4628      	mov	r0, r5
 80116ea:	f000 fd09 	bl	8012100 <_sbrk_r>
 80116ee:	1c43      	adds	r3, r0, #1
 80116f0:	d00a      	beq.n	8011708 <sbrk_aligned+0x34>
 80116f2:	1cc4      	adds	r4, r0, #3
 80116f4:	f024 0403 	bic.w	r4, r4, #3
 80116f8:	42a0      	cmp	r0, r4
 80116fa:	d007      	beq.n	801170c <sbrk_aligned+0x38>
 80116fc:	1a21      	subs	r1, r4, r0
 80116fe:	4628      	mov	r0, r5
 8011700:	f000 fcfe 	bl	8012100 <_sbrk_r>
 8011704:	3001      	adds	r0, #1
 8011706:	d101      	bne.n	801170c <sbrk_aligned+0x38>
 8011708:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801170c:	4620      	mov	r0, r4
 801170e:	bd70      	pop	{r4, r5, r6, pc}
 8011710:	200029a4 	.word	0x200029a4

08011714 <_malloc_r>:
 8011714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011718:	1ccd      	adds	r5, r1, #3
 801171a:	f025 0503 	bic.w	r5, r5, #3
 801171e:	3508      	adds	r5, #8
 8011720:	2d0c      	cmp	r5, #12
 8011722:	bf38      	it	cc
 8011724:	250c      	movcc	r5, #12
 8011726:	2d00      	cmp	r5, #0
 8011728:	4607      	mov	r7, r0
 801172a:	db01      	blt.n	8011730 <_malloc_r+0x1c>
 801172c:	42a9      	cmp	r1, r5
 801172e:	d905      	bls.n	801173c <_malloc_r+0x28>
 8011730:	230c      	movs	r3, #12
 8011732:	603b      	str	r3, [r7, #0]
 8011734:	2600      	movs	r6, #0
 8011736:	4630      	mov	r0, r6
 8011738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801173c:	4e2e      	ldr	r6, [pc, #184]	; (80117f8 <_malloc_r+0xe4>)
 801173e:	f001 fcab 	bl	8013098 <__malloc_lock>
 8011742:	6833      	ldr	r3, [r6, #0]
 8011744:	461c      	mov	r4, r3
 8011746:	bb34      	cbnz	r4, 8011796 <_malloc_r+0x82>
 8011748:	4629      	mov	r1, r5
 801174a:	4638      	mov	r0, r7
 801174c:	f7ff ffc2 	bl	80116d4 <sbrk_aligned>
 8011750:	1c43      	adds	r3, r0, #1
 8011752:	4604      	mov	r4, r0
 8011754:	d14d      	bne.n	80117f2 <_malloc_r+0xde>
 8011756:	6834      	ldr	r4, [r6, #0]
 8011758:	4626      	mov	r6, r4
 801175a:	2e00      	cmp	r6, #0
 801175c:	d140      	bne.n	80117e0 <_malloc_r+0xcc>
 801175e:	6823      	ldr	r3, [r4, #0]
 8011760:	4631      	mov	r1, r6
 8011762:	4638      	mov	r0, r7
 8011764:	eb04 0803 	add.w	r8, r4, r3
 8011768:	f000 fcca 	bl	8012100 <_sbrk_r>
 801176c:	4580      	cmp	r8, r0
 801176e:	d13a      	bne.n	80117e6 <_malloc_r+0xd2>
 8011770:	6821      	ldr	r1, [r4, #0]
 8011772:	3503      	adds	r5, #3
 8011774:	1a6d      	subs	r5, r5, r1
 8011776:	f025 0503 	bic.w	r5, r5, #3
 801177a:	3508      	adds	r5, #8
 801177c:	2d0c      	cmp	r5, #12
 801177e:	bf38      	it	cc
 8011780:	250c      	movcc	r5, #12
 8011782:	4629      	mov	r1, r5
 8011784:	4638      	mov	r0, r7
 8011786:	f7ff ffa5 	bl	80116d4 <sbrk_aligned>
 801178a:	3001      	adds	r0, #1
 801178c:	d02b      	beq.n	80117e6 <_malloc_r+0xd2>
 801178e:	6823      	ldr	r3, [r4, #0]
 8011790:	442b      	add	r3, r5
 8011792:	6023      	str	r3, [r4, #0]
 8011794:	e00e      	b.n	80117b4 <_malloc_r+0xa0>
 8011796:	6822      	ldr	r2, [r4, #0]
 8011798:	1b52      	subs	r2, r2, r5
 801179a:	d41e      	bmi.n	80117da <_malloc_r+0xc6>
 801179c:	2a0b      	cmp	r2, #11
 801179e:	d916      	bls.n	80117ce <_malloc_r+0xba>
 80117a0:	1961      	adds	r1, r4, r5
 80117a2:	42a3      	cmp	r3, r4
 80117a4:	6025      	str	r5, [r4, #0]
 80117a6:	bf18      	it	ne
 80117a8:	6059      	strne	r1, [r3, #4]
 80117aa:	6863      	ldr	r3, [r4, #4]
 80117ac:	bf08      	it	eq
 80117ae:	6031      	streq	r1, [r6, #0]
 80117b0:	5162      	str	r2, [r4, r5]
 80117b2:	604b      	str	r3, [r1, #4]
 80117b4:	4638      	mov	r0, r7
 80117b6:	f104 060b 	add.w	r6, r4, #11
 80117ba:	f001 fc73 	bl	80130a4 <__malloc_unlock>
 80117be:	f026 0607 	bic.w	r6, r6, #7
 80117c2:	1d23      	adds	r3, r4, #4
 80117c4:	1af2      	subs	r2, r6, r3
 80117c6:	d0b6      	beq.n	8011736 <_malloc_r+0x22>
 80117c8:	1b9b      	subs	r3, r3, r6
 80117ca:	50a3      	str	r3, [r4, r2]
 80117cc:	e7b3      	b.n	8011736 <_malloc_r+0x22>
 80117ce:	6862      	ldr	r2, [r4, #4]
 80117d0:	42a3      	cmp	r3, r4
 80117d2:	bf0c      	ite	eq
 80117d4:	6032      	streq	r2, [r6, #0]
 80117d6:	605a      	strne	r2, [r3, #4]
 80117d8:	e7ec      	b.n	80117b4 <_malloc_r+0xa0>
 80117da:	4623      	mov	r3, r4
 80117dc:	6864      	ldr	r4, [r4, #4]
 80117de:	e7b2      	b.n	8011746 <_malloc_r+0x32>
 80117e0:	4634      	mov	r4, r6
 80117e2:	6876      	ldr	r6, [r6, #4]
 80117e4:	e7b9      	b.n	801175a <_malloc_r+0x46>
 80117e6:	230c      	movs	r3, #12
 80117e8:	603b      	str	r3, [r7, #0]
 80117ea:	4638      	mov	r0, r7
 80117ec:	f001 fc5a 	bl	80130a4 <__malloc_unlock>
 80117f0:	e7a1      	b.n	8011736 <_malloc_r+0x22>
 80117f2:	6025      	str	r5, [r4, #0]
 80117f4:	e7de      	b.n	80117b4 <_malloc_r+0xa0>
 80117f6:	bf00      	nop
 80117f8:	200029a0 	.word	0x200029a0

080117fc <__cvt>:
 80117fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011800:	ec55 4b10 	vmov	r4, r5, d0
 8011804:	2d00      	cmp	r5, #0
 8011806:	460e      	mov	r6, r1
 8011808:	4619      	mov	r1, r3
 801180a:	462b      	mov	r3, r5
 801180c:	bfbb      	ittet	lt
 801180e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011812:	461d      	movlt	r5, r3
 8011814:	2300      	movge	r3, #0
 8011816:	232d      	movlt	r3, #45	; 0x2d
 8011818:	700b      	strb	r3, [r1, #0]
 801181a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801181c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011820:	4691      	mov	r9, r2
 8011822:	f023 0820 	bic.w	r8, r3, #32
 8011826:	bfbc      	itt	lt
 8011828:	4622      	movlt	r2, r4
 801182a:	4614      	movlt	r4, r2
 801182c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011830:	d005      	beq.n	801183e <__cvt+0x42>
 8011832:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011836:	d100      	bne.n	801183a <__cvt+0x3e>
 8011838:	3601      	adds	r6, #1
 801183a:	2102      	movs	r1, #2
 801183c:	e000      	b.n	8011840 <__cvt+0x44>
 801183e:	2103      	movs	r1, #3
 8011840:	ab03      	add	r3, sp, #12
 8011842:	9301      	str	r3, [sp, #4]
 8011844:	ab02      	add	r3, sp, #8
 8011846:	9300      	str	r3, [sp, #0]
 8011848:	ec45 4b10 	vmov	d0, r4, r5
 801184c:	4653      	mov	r3, sl
 801184e:	4632      	mov	r2, r6
 8011850:	f000 fd12 	bl	8012278 <_dtoa_r>
 8011854:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011858:	4607      	mov	r7, r0
 801185a:	d102      	bne.n	8011862 <__cvt+0x66>
 801185c:	f019 0f01 	tst.w	r9, #1
 8011860:	d022      	beq.n	80118a8 <__cvt+0xac>
 8011862:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011866:	eb07 0906 	add.w	r9, r7, r6
 801186a:	d110      	bne.n	801188e <__cvt+0x92>
 801186c:	783b      	ldrb	r3, [r7, #0]
 801186e:	2b30      	cmp	r3, #48	; 0x30
 8011870:	d10a      	bne.n	8011888 <__cvt+0x8c>
 8011872:	2200      	movs	r2, #0
 8011874:	2300      	movs	r3, #0
 8011876:	4620      	mov	r0, r4
 8011878:	4629      	mov	r1, r5
 801187a:	f7ef f93d 	bl	8000af8 <__aeabi_dcmpeq>
 801187e:	b918      	cbnz	r0, 8011888 <__cvt+0x8c>
 8011880:	f1c6 0601 	rsb	r6, r6, #1
 8011884:	f8ca 6000 	str.w	r6, [sl]
 8011888:	f8da 3000 	ldr.w	r3, [sl]
 801188c:	4499      	add	r9, r3
 801188e:	2200      	movs	r2, #0
 8011890:	2300      	movs	r3, #0
 8011892:	4620      	mov	r0, r4
 8011894:	4629      	mov	r1, r5
 8011896:	f7ef f92f 	bl	8000af8 <__aeabi_dcmpeq>
 801189a:	b108      	cbz	r0, 80118a0 <__cvt+0xa4>
 801189c:	f8cd 900c 	str.w	r9, [sp, #12]
 80118a0:	2230      	movs	r2, #48	; 0x30
 80118a2:	9b03      	ldr	r3, [sp, #12]
 80118a4:	454b      	cmp	r3, r9
 80118a6:	d307      	bcc.n	80118b8 <__cvt+0xbc>
 80118a8:	9b03      	ldr	r3, [sp, #12]
 80118aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80118ac:	1bdb      	subs	r3, r3, r7
 80118ae:	4638      	mov	r0, r7
 80118b0:	6013      	str	r3, [r2, #0]
 80118b2:	b004      	add	sp, #16
 80118b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118b8:	1c59      	adds	r1, r3, #1
 80118ba:	9103      	str	r1, [sp, #12]
 80118bc:	701a      	strb	r2, [r3, #0]
 80118be:	e7f0      	b.n	80118a2 <__cvt+0xa6>

080118c0 <__exponent>:
 80118c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80118c2:	4603      	mov	r3, r0
 80118c4:	2900      	cmp	r1, #0
 80118c6:	bfb8      	it	lt
 80118c8:	4249      	neglt	r1, r1
 80118ca:	f803 2b02 	strb.w	r2, [r3], #2
 80118ce:	bfb4      	ite	lt
 80118d0:	222d      	movlt	r2, #45	; 0x2d
 80118d2:	222b      	movge	r2, #43	; 0x2b
 80118d4:	2909      	cmp	r1, #9
 80118d6:	7042      	strb	r2, [r0, #1]
 80118d8:	dd2a      	ble.n	8011930 <__exponent+0x70>
 80118da:	f10d 0407 	add.w	r4, sp, #7
 80118de:	46a4      	mov	ip, r4
 80118e0:	270a      	movs	r7, #10
 80118e2:	46a6      	mov	lr, r4
 80118e4:	460a      	mov	r2, r1
 80118e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80118ea:	fb07 1516 	mls	r5, r7, r6, r1
 80118ee:	3530      	adds	r5, #48	; 0x30
 80118f0:	2a63      	cmp	r2, #99	; 0x63
 80118f2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80118f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80118fa:	4631      	mov	r1, r6
 80118fc:	dcf1      	bgt.n	80118e2 <__exponent+0x22>
 80118fe:	3130      	adds	r1, #48	; 0x30
 8011900:	f1ae 0502 	sub.w	r5, lr, #2
 8011904:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011908:	1c44      	adds	r4, r0, #1
 801190a:	4629      	mov	r1, r5
 801190c:	4561      	cmp	r1, ip
 801190e:	d30a      	bcc.n	8011926 <__exponent+0x66>
 8011910:	f10d 0209 	add.w	r2, sp, #9
 8011914:	eba2 020e 	sub.w	r2, r2, lr
 8011918:	4565      	cmp	r5, ip
 801191a:	bf88      	it	hi
 801191c:	2200      	movhi	r2, #0
 801191e:	4413      	add	r3, r2
 8011920:	1a18      	subs	r0, r3, r0
 8011922:	b003      	add	sp, #12
 8011924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011926:	f811 2b01 	ldrb.w	r2, [r1], #1
 801192a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801192e:	e7ed      	b.n	801190c <__exponent+0x4c>
 8011930:	2330      	movs	r3, #48	; 0x30
 8011932:	3130      	adds	r1, #48	; 0x30
 8011934:	7083      	strb	r3, [r0, #2]
 8011936:	70c1      	strb	r1, [r0, #3]
 8011938:	1d03      	adds	r3, r0, #4
 801193a:	e7f1      	b.n	8011920 <__exponent+0x60>

0801193c <_printf_float>:
 801193c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011940:	ed2d 8b02 	vpush	{d8}
 8011944:	b08d      	sub	sp, #52	; 0x34
 8011946:	460c      	mov	r4, r1
 8011948:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801194c:	4616      	mov	r6, r2
 801194e:	461f      	mov	r7, r3
 8011950:	4605      	mov	r5, r0
 8011952:	f001 fb87 	bl	8013064 <_localeconv_r>
 8011956:	f8d0 a000 	ldr.w	sl, [r0]
 801195a:	4650      	mov	r0, sl
 801195c:	f7ee fc50 	bl	8000200 <strlen>
 8011960:	2300      	movs	r3, #0
 8011962:	930a      	str	r3, [sp, #40]	; 0x28
 8011964:	6823      	ldr	r3, [r4, #0]
 8011966:	9305      	str	r3, [sp, #20]
 8011968:	f8d8 3000 	ldr.w	r3, [r8]
 801196c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011970:	3307      	adds	r3, #7
 8011972:	f023 0307 	bic.w	r3, r3, #7
 8011976:	f103 0208 	add.w	r2, r3, #8
 801197a:	f8c8 2000 	str.w	r2, [r8]
 801197e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011982:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011986:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801198a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801198e:	9307      	str	r3, [sp, #28]
 8011990:	f8cd 8018 	str.w	r8, [sp, #24]
 8011994:	ee08 0a10 	vmov	s16, r0
 8011998:	4b9f      	ldr	r3, [pc, #636]	; (8011c18 <_printf_float+0x2dc>)
 801199a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801199e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80119a2:	f7ef f8db 	bl	8000b5c <__aeabi_dcmpun>
 80119a6:	bb88      	cbnz	r0, 8011a0c <_printf_float+0xd0>
 80119a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80119ac:	4b9a      	ldr	r3, [pc, #616]	; (8011c18 <_printf_float+0x2dc>)
 80119ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80119b2:	f7ef f8b5 	bl	8000b20 <__aeabi_dcmple>
 80119b6:	bb48      	cbnz	r0, 8011a0c <_printf_float+0xd0>
 80119b8:	2200      	movs	r2, #0
 80119ba:	2300      	movs	r3, #0
 80119bc:	4640      	mov	r0, r8
 80119be:	4649      	mov	r1, r9
 80119c0:	f7ef f8a4 	bl	8000b0c <__aeabi_dcmplt>
 80119c4:	b110      	cbz	r0, 80119cc <_printf_float+0x90>
 80119c6:	232d      	movs	r3, #45	; 0x2d
 80119c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119cc:	4b93      	ldr	r3, [pc, #588]	; (8011c1c <_printf_float+0x2e0>)
 80119ce:	4894      	ldr	r0, [pc, #592]	; (8011c20 <_printf_float+0x2e4>)
 80119d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80119d4:	bf94      	ite	ls
 80119d6:	4698      	movls	r8, r3
 80119d8:	4680      	movhi	r8, r0
 80119da:	2303      	movs	r3, #3
 80119dc:	6123      	str	r3, [r4, #16]
 80119de:	9b05      	ldr	r3, [sp, #20]
 80119e0:	f023 0204 	bic.w	r2, r3, #4
 80119e4:	6022      	str	r2, [r4, #0]
 80119e6:	f04f 0900 	mov.w	r9, #0
 80119ea:	9700      	str	r7, [sp, #0]
 80119ec:	4633      	mov	r3, r6
 80119ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80119f0:	4621      	mov	r1, r4
 80119f2:	4628      	mov	r0, r5
 80119f4:	f000 f9d8 	bl	8011da8 <_printf_common>
 80119f8:	3001      	adds	r0, #1
 80119fa:	f040 8090 	bne.w	8011b1e <_printf_float+0x1e2>
 80119fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a02:	b00d      	add	sp, #52	; 0x34
 8011a04:	ecbd 8b02 	vpop	{d8}
 8011a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a0c:	4642      	mov	r2, r8
 8011a0e:	464b      	mov	r3, r9
 8011a10:	4640      	mov	r0, r8
 8011a12:	4649      	mov	r1, r9
 8011a14:	f7ef f8a2 	bl	8000b5c <__aeabi_dcmpun>
 8011a18:	b140      	cbz	r0, 8011a2c <_printf_float+0xf0>
 8011a1a:	464b      	mov	r3, r9
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	bfbc      	itt	lt
 8011a20:	232d      	movlt	r3, #45	; 0x2d
 8011a22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011a26:	487f      	ldr	r0, [pc, #508]	; (8011c24 <_printf_float+0x2e8>)
 8011a28:	4b7f      	ldr	r3, [pc, #508]	; (8011c28 <_printf_float+0x2ec>)
 8011a2a:	e7d1      	b.n	80119d0 <_printf_float+0x94>
 8011a2c:	6863      	ldr	r3, [r4, #4]
 8011a2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011a32:	9206      	str	r2, [sp, #24]
 8011a34:	1c5a      	adds	r2, r3, #1
 8011a36:	d13f      	bne.n	8011ab8 <_printf_float+0x17c>
 8011a38:	2306      	movs	r3, #6
 8011a3a:	6063      	str	r3, [r4, #4]
 8011a3c:	9b05      	ldr	r3, [sp, #20]
 8011a3e:	6861      	ldr	r1, [r4, #4]
 8011a40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011a44:	2300      	movs	r3, #0
 8011a46:	9303      	str	r3, [sp, #12]
 8011a48:	ab0a      	add	r3, sp, #40	; 0x28
 8011a4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011a4e:	ab09      	add	r3, sp, #36	; 0x24
 8011a50:	ec49 8b10 	vmov	d0, r8, r9
 8011a54:	9300      	str	r3, [sp, #0]
 8011a56:	6022      	str	r2, [r4, #0]
 8011a58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011a5c:	4628      	mov	r0, r5
 8011a5e:	f7ff fecd 	bl	80117fc <__cvt>
 8011a62:	9b06      	ldr	r3, [sp, #24]
 8011a64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011a66:	2b47      	cmp	r3, #71	; 0x47
 8011a68:	4680      	mov	r8, r0
 8011a6a:	d108      	bne.n	8011a7e <_printf_float+0x142>
 8011a6c:	1cc8      	adds	r0, r1, #3
 8011a6e:	db02      	blt.n	8011a76 <_printf_float+0x13a>
 8011a70:	6863      	ldr	r3, [r4, #4]
 8011a72:	4299      	cmp	r1, r3
 8011a74:	dd41      	ble.n	8011afa <_printf_float+0x1be>
 8011a76:	f1ab 0b02 	sub.w	fp, fp, #2
 8011a7a:	fa5f fb8b 	uxtb.w	fp, fp
 8011a7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011a82:	d820      	bhi.n	8011ac6 <_printf_float+0x18a>
 8011a84:	3901      	subs	r1, #1
 8011a86:	465a      	mov	r2, fp
 8011a88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011a8c:	9109      	str	r1, [sp, #36]	; 0x24
 8011a8e:	f7ff ff17 	bl	80118c0 <__exponent>
 8011a92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a94:	1813      	adds	r3, r2, r0
 8011a96:	2a01      	cmp	r2, #1
 8011a98:	4681      	mov	r9, r0
 8011a9a:	6123      	str	r3, [r4, #16]
 8011a9c:	dc02      	bgt.n	8011aa4 <_printf_float+0x168>
 8011a9e:	6822      	ldr	r2, [r4, #0]
 8011aa0:	07d2      	lsls	r2, r2, #31
 8011aa2:	d501      	bpl.n	8011aa8 <_printf_float+0x16c>
 8011aa4:	3301      	adds	r3, #1
 8011aa6:	6123      	str	r3, [r4, #16]
 8011aa8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d09c      	beq.n	80119ea <_printf_float+0xae>
 8011ab0:	232d      	movs	r3, #45	; 0x2d
 8011ab2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ab6:	e798      	b.n	80119ea <_printf_float+0xae>
 8011ab8:	9a06      	ldr	r2, [sp, #24]
 8011aba:	2a47      	cmp	r2, #71	; 0x47
 8011abc:	d1be      	bne.n	8011a3c <_printf_float+0x100>
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d1bc      	bne.n	8011a3c <_printf_float+0x100>
 8011ac2:	2301      	movs	r3, #1
 8011ac4:	e7b9      	b.n	8011a3a <_printf_float+0xfe>
 8011ac6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011aca:	d118      	bne.n	8011afe <_printf_float+0x1c2>
 8011acc:	2900      	cmp	r1, #0
 8011ace:	6863      	ldr	r3, [r4, #4]
 8011ad0:	dd0b      	ble.n	8011aea <_printf_float+0x1ae>
 8011ad2:	6121      	str	r1, [r4, #16]
 8011ad4:	b913      	cbnz	r3, 8011adc <_printf_float+0x1a0>
 8011ad6:	6822      	ldr	r2, [r4, #0]
 8011ad8:	07d0      	lsls	r0, r2, #31
 8011ada:	d502      	bpl.n	8011ae2 <_printf_float+0x1a6>
 8011adc:	3301      	adds	r3, #1
 8011ade:	440b      	add	r3, r1
 8011ae0:	6123      	str	r3, [r4, #16]
 8011ae2:	65a1      	str	r1, [r4, #88]	; 0x58
 8011ae4:	f04f 0900 	mov.w	r9, #0
 8011ae8:	e7de      	b.n	8011aa8 <_printf_float+0x16c>
 8011aea:	b913      	cbnz	r3, 8011af2 <_printf_float+0x1b6>
 8011aec:	6822      	ldr	r2, [r4, #0]
 8011aee:	07d2      	lsls	r2, r2, #31
 8011af0:	d501      	bpl.n	8011af6 <_printf_float+0x1ba>
 8011af2:	3302      	adds	r3, #2
 8011af4:	e7f4      	b.n	8011ae0 <_printf_float+0x1a4>
 8011af6:	2301      	movs	r3, #1
 8011af8:	e7f2      	b.n	8011ae0 <_printf_float+0x1a4>
 8011afa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b00:	4299      	cmp	r1, r3
 8011b02:	db05      	blt.n	8011b10 <_printf_float+0x1d4>
 8011b04:	6823      	ldr	r3, [r4, #0]
 8011b06:	6121      	str	r1, [r4, #16]
 8011b08:	07d8      	lsls	r0, r3, #31
 8011b0a:	d5ea      	bpl.n	8011ae2 <_printf_float+0x1a6>
 8011b0c:	1c4b      	adds	r3, r1, #1
 8011b0e:	e7e7      	b.n	8011ae0 <_printf_float+0x1a4>
 8011b10:	2900      	cmp	r1, #0
 8011b12:	bfd4      	ite	le
 8011b14:	f1c1 0202 	rsble	r2, r1, #2
 8011b18:	2201      	movgt	r2, #1
 8011b1a:	4413      	add	r3, r2
 8011b1c:	e7e0      	b.n	8011ae0 <_printf_float+0x1a4>
 8011b1e:	6823      	ldr	r3, [r4, #0]
 8011b20:	055a      	lsls	r2, r3, #21
 8011b22:	d407      	bmi.n	8011b34 <_printf_float+0x1f8>
 8011b24:	6923      	ldr	r3, [r4, #16]
 8011b26:	4642      	mov	r2, r8
 8011b28:	4631      	mov	r1, r6
 8011b2a:	4628      	mov	r0, r5
 8011b2c:	47b8      	blx	r7
 8011b2e:	3001      	adds	r0, #1
 8011b30:	d12c      	bne.n	8011b8c <_printf_float+0x250>
 8011b32:	e764      	b.n	80119fe <_printf_float+0xc2>
 8011b34:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011b38:	f240 80e0 	bls.w	8011cfc <_printf_float+0x3c0>
 8011b3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011b40:	2200      	movs	r2, #0
 8011b42:	2300      	movs	r3, #0
 8011b44:	f7ee ffd8 	bl	8000af8 <__aeabi_dcmpeq>
 8011b48:	2800      	cmp	r0, #0
 8011b4a:	d034      	beq.n	8011bb6 <_printf_float+0x27a>
 8011b4c:	4a37      	ldr	r2, [pc, #220]	; (8011c2c <_printf_float+0x2f0>)
 8011b4e:	2301      	movs	r3, #1
 8011b50:	4631      	mov	r1, r6
 8011b52:	4628      	mov	r0, r5
 8011b54:	47b8      	blx	r7
 8011b56:	3001      	adds	r0, #1
 8011b58:	f43f af51 	beq.w	80119fe <_printf_float+0xc2>
 8011b5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011b60:	429a      	cmp	r2, r3
 8011b62:	db02      	blt.n	8011b6a <_printf_float+0x22e>
 8011b64:	6823      	ldr	r3, [r4, #0]
 8011b66:	07d8      	lsls	r0, r3, #31
 8011b68:	d510      	bpl.n	8011b8c <_printf_float+0x250>
 8011b6a:	ee18 3a10 	vmov	r3, s16
 8011b6e:	4652      	mov	r2, sl
 8011b70:	4631      	mov	r1, r6
 8011b72:	4628      	mov	r0, r5
 8011b74:	47b8      	blx	r7
 8011b76:	3001      	adds	r0, #1
 8011b78:	f43f af41 	beq.w	80119fe <_printf_float+0xc2>
 8011b7c:	f04f 0800 	mov.w	r8, #0
 8011b80:	f104 091a 	add.w	r9, r4, #26
 8011b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b86:	3b01      	subs	r3, #1
 8011b88:	4543      	cmp	r3, r8
 8011b8a:	dc09      	bgt.n	8011ba0 <_printf_float+0x264>
 8011b8c:	6823      	ldr	r3, [r4, #0]
 8011b8e:	079b      	lsls	r3, r3, #30
 8011b90:	f100 8105 	bmi.w	8011d9e <_printf_float+0x462>
 8011b94:	68e0      	ldr	r0, [r4, #12]
 8011b96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b98:	4298      	cmp	r0, r3
 8011b9a:	bfb8      	it	lt
 8011b9c:	4618      	movlt	r0, r3
 8011b9e:	e730      	b.n	8011a02 <_printf_float+0xc6>
 8011ba0:	2301      	movs	r3, #1
 8011ba2:	464a      	mov	r2, r9
 8011ba4:	4631      	mov	r1, r6
 8011ba6:	4628      	mov	r0, r5
 8011ba8:	47b8      	blx	r7
 8011baa:	3001      	adds	r0, #1
 8011bac:	f43f af27 	beq.w	80119fe <_printf_float+0xc2>
 8011bb0:	f108 0801 	add.w	r8, r8, #1
 8011bb4:	e7e6      	b.n	8011b84 <_printf_float+0x248>
 8011bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	dc39      	bgt.n	8011c30 <_printf_float+0x2f4>
 8011bbc:	4a1b      	ldr	r2, [pc, #108]	; (8011c2c <_printf_float+0x2f0>)
 8011bbe:	2301      	movs	r3, #1
 8011bc0:	4631      	mov	r1, r6
 8011bc2:	4628      	mov	r0, r5
 8011bc4:	47b8      	blx	r7
 8011bc6:	3001      	adds	r0, #1
 8011bc8:	f43f af19 	beq.w	80119fe <_printf_float+0xc2>
 8011bcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011bd0:	4313      	orrs	r3, r2
 8011bd2:	d102      	bne.n	8011bda <_printf_float+0x29e>
 8011bd4:	6823      	ldr	r3, [r4, #0]
 8011bd6:	07d9      	lsls	r1, r3, #31
 8011bd8:	d5d8      	bpl.n	8011b8c <_printf_float+0x250>
 8011bda:	ee18 3a10 	vmov	r3, s16
 8011bde:	4652      	mov	r2, sl
 8011be0:	4631      	mov	r1, r6
 8011be2:	4628      	mov	r0, r5
 8011be4:	47b8      	blx	r7
 8011be6:	3001      	adds	r0, #1
 8011be8:	f43f af09 	beq.w	80119fe <_printf_float+0xc2>
 8011bec:	f04f 0900 	mov.w	r9, #0
 8011bf0:	f104 0a1a 	add.w	sl, r4, #26
 8011bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bf6:	425b      	negs	r3, r3
 8011bf8:	454b      	cmp	r3, r9
 8011bfa:	dc01      	bgt.n	8011c00 <_printf_float+0x2c4>
 8011bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bfe:	e792      	b.n	8011b26 <_printf_float+0x1ea>
 8011c00:	2301      	movs	r3, #1
 8011c02:	4652      	mov	r2, sl
 8011c04:	4631      	mov	r1, r6
 8011c06:	4628      	mov	r0, r5
 8011c08:	47b8      	blx	r7
 8011c0a:	3001      	adds	r0, #1
 8011c0c:	f43f aef7 	beq.w	80119fe <_printf_float+0xc2>
 8011c10:	f109 0901 	add.w	r9, r9, #1
 8011c14:	e7ee      	b.n	8011bf4 <_printf_float+0x2b8>
 8011c16:	bf00      	nop
 8011c18:	7fefffff 	.word	0x7fefffff
 8011c1c:	080142a8 	.word	0x080142a8
 8011c20:	080142ac 	.word	0x080142ac
 8011c24:	080142b4 	.word	0x080142b4
 8011c28:	080142b0 	.word	0x080142b0
 8011c2c:	080142b8 	.word	0x080142b8
 8011c30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011c34:	429a      	cmp	r2, r3
 8011c36:	bfa8      	it	ge
 8011c38:	461a      	movge	r2, r3
 8011c3a:	2a00      	cmp	r2, #0
 8011c3c:	4691      	mov	r9, r2
 8011c3e:	dc37      	bgt.n	8011cb0 <_printf_float+0x374>
 8011c40:	f04f 0b00 	mov.w	fp, #0
 8011c44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011c48:	f104 021a 	add.w	r2, r4, #26
 8011c4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011c4e:	9305      	str	r3, [sp, #20]
 8011c50:	eba3 0309 	sub.w	r3, r3, r9
 8011c54:	455b      	cmp	r3, fp
 8011c56:	dc33      	bgt.n	8011cc0 <_printf_float+0x384>
 8011c58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011c5c:	429a      	cmp	r2, r3
 8011c5e:	db3b      	blt.n	8011cd8 <_printf_float+0x39c>
 8011c60:	6823      	ldr	r3, [r4, #0]
 8011c62:	07da      	lsls	r2, r3, #31
 8011c64:	d438      	bmi.n	8011cd8 <_printf_float+0x39c>
 8011c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c68:	9a05      	ldr	r2, [sp, #20]
 8011c6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011c6c:	1a9a      	subs	r2, r3, r2
 8011c6e:	eba3 0901 	sub.w	r9, r3, r1
 8011c72:	4591      	cmp	r9, r2
 8011c74:	bfa8      	it	ge
 8011c76:	4691      	movge	r9, r2
 8011c78:	f1b9 0f00 	cmp.w	r9, #0
 8011c7c:	dc35      	bgt.n	8011cea <_printf_float+0x3ae>
 8011c7e:	f04f 0800 	mov.w	r8, #0
 8011c82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011c86:	f104 0a1a 	add.w	sl, r4, #26
 8011c8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011c8e:	1a9b      	subs	r3, r3, r2
 8011c90:	eba3 0309 	sub.w	r3, r3, r9
 8011c94:	4543      	cmp	r3, r8
 8011c96:	f77f af79 	ble.w	8011b8c <_printf_float+0x250>
 8011c9a:	2301      	movs	r3, #1
 8011c9c:	4652      	mov	r2, sl
 8011c9e:	4631      	mov	r1, r6
 8011ca0:	4628      	mov	r0, r5
 8011ca2:	47b8      	blx	r7
 8011ca4:	3001      	adds	r0, #1
 8011ca6:	f43f aeaa 	beq.w	80119fe <_printf_float+0xc2>
 8011caa:	f108 0801 	add.w	r8, r8, #1
 8011cae:	e7ec      	b.n	8011c8a <_printf_float+0x34e>
 8011cb0:	4613      	mov	r3, r2
 8011cb2:	4631      	mov	r1, r6
 8011cb4:	4642      	mov	r2, r8
 8011cb6:	4628      	mov	r0, r5
 8011cb8:	47b8      	blx	r7
 8011cba:	3001      	adds	r0, #1
 8011cbc:	d1c0      	bne.n	8011c40 <_printf_float+0x304>
 8011cbe:	e69e      	b.n	80119fe <_printf_float+0xc2>
 8011cc0:	2301      	movs	r3, #1
 8011cc2:	4631      	mov	r1, r6
 8011cc4:	4628      	mov	r0, r5
 8011cc6:	9205      	str	r2, [sp, #20]
 8011cc8:	47b8      	blx	r7
 8011cca:	3001      	adds	r0, #1
 8011ccc:	f43f ae97 	beq.w	80119fe <_printf_float+0xc2>
 8011cd0:	9a05      	ldr	r2, [sp, #20]
 8011cd2:	f10b 0b01 	add.w	fp, fp, #1
 8011cd6:	e7b9      	b.n	8011c4c <_printf_float+0x310>
 8011cd8:	ee18 3a10 	vmov	r3, s16
 8011cdc:	4652      	mov	r2, sl
 8011cde:	4631      	mov	r1, r6
 8011ce0:	4628      	mov	r0, r5
 8011ce2:	47b8      	blx	r7
 8011ce4:	3001      	adds	r0, #1
 8011ce6:	d1be      	bne.n	8011c66 <_printf_float+0x32a>
 8011ce8:	e689      	b.n	80119fe <_printf_float+0xc2>
 8011cea:	9a05      	ldr	r2, [sp, #20]
 8011cec:	464b      	mov	r3, r9
 8011cee:	4442      	add	r2, r8
 8011cf0:	4631      	mov	r1, r6
 8011cf2:	4628      	mov	r0, r5
 8011cf4:	47b8      	blx	r7
 8011cf6:	3001      	adds	r0, #1
 8011cf8:	d1c1      	bne.n	8011c7e <_printf_float+0x342>
 8011cfa:	e680      	b.n	80119fe <_printf_float+0xc2>
 8011cfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011cfe:	2a01      	cmp	r2, #1
 8011d00:	dc01      	bgt.n	8011d06 <_printf_float+0x3ca>
 8011d02:	07db      	lsls	r3, r3, #31
 8011d04:	d538      	bpl.n	8011d78 <_printf_float+0x43c>
 8011d06:	2301      	movs	r3, #1
 8011d08:	4642      	mov	r2, r8
 8011d0a:	4631      	mov	r1, r6
 8011d0c:	4628      	mov	r0, r5
 8011d0e:	47b8      	blx	r7
 8011d10:	3001      	adds	r0, #1
 8011d12:	f43f ae74 	beq.w	80119fe <_printf_float+0xc2>
 8011d16:	ee18 3a10 	vmov	r3, s16
 8011d1a:	4652      	mov	r2, sl
 8011d1c:	4631      	mov	r1, r6
 8011d1e:	4628      	mov	r0, r5
 8011d20:	47b8      	blx	r7
 8011d22:	3001      	adds	r0, #1
 8011d24:	f43f ae6b 	beq.w	80119fe <_printf_float+0xc2>
 8011d28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011d2c:	2200      	movs	r2, #0
 8011d2e:	2300      	movs	r3, #0
 8011d30:	f7ee fee2 	bl	8000af8 <__aeabi_dcmpeq>
 8011d34:	b9d8      	cbnz	r0, 8011d6e <_printf_float+0x432>
 8011d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d38:	f108 0201 	add.w	r2, r8, #1
 8011d3c:	3b01      	subs	r3, #1
 8011d3e:	4631      	mov	r1, r6
 8011d40:	4628      	mov	r0, r5
 8011d42:	47b8      	blx	r7
 8011d44:	3001      	adds	r0, #1
 8011d46:	d10e      	bne.n	8011d66 <_printf_float+0x42a>
 8011d48:	e659      	b.n	80119fe <_printf_float+0xc2>
 8011d4a:	2301      	movs	r3, #1
 8011d4c:	4652      	mov	r2, sl
 8011d4e:	4631      	mov	r1, r6
 8011d50:	4628      	mov	r0, r5
 8011d52:	47b8      	blx	r7
 8011d54:	3001      	adds	r0, #1
 8011d56:	f43f ae52 	beq.w	80119fe <_printf_float+0xc2>
 8011d5a:	f108 0801 	add.w	r8, r8, #1
 8011d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d60:	3b01      	subs	r3, #1
 8011d62:	4543      	cmp	r3, r8
 8011d64:	dcf1      	bgt.n	8011d4a <_printf_float+0x40e>
 8011d66:	464b      	mov	r3, r9
 8011d68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011d6c:	e6dc      	b.n	8011b28 <_printf_float+0x1ec>
 8011d6e:	f04f 0800 	mov.w	r8, #0
 8011d72:	f104 0a1a 	add.w	sl, r4, #26
 8011d76:	e7f2      	b.n	8011d5e <_printf_float+0x422>
 8011d78:	2301      	movs	r3, #1
 8011d7a:	4642      	mov	r2, r8
 8011d7c:	e7df      	b.n	8011d3e <_printf_float+0x402>
 8011d7e:	2301      	movs	r3, #1
 8011d80:	464a      	mov	r2, r9
 8011d82:	4631      	mov	r1, r6
 8011d84:	4628      	mov	r0, r5
 8011d86:	47b8      	blx	r7
 8011d88:	3001      	adds	r0, #1
 8011d8a:	f43f ae38 	beq.w	80119fe <_printf_float+0xc2>
 8011d8e:	f108 0801 	add.w	r8, r8, #1
 8011d92:	68e3      	ldr	r3, [r4, #12]
 8011d94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011d96:	1a5b      	subs	r3, r3, r1
 8011d98:	4543      	cmp	r3, r8
 8011d9a:	dcf0      	bgt.n	8011d7e <_printf_float+0x442>
 8011d9c:	e6fa      	b.n	8011b94 <_printf_float+0x258>
 8011d9e:	f04f 0800 	mov.w	r8, #0
 8011da2:	f104 0919 	add.w	r9, r4, #25
 8011da6:	e7f4      	b.n	8011d92 <_printf_float+0x456>

08011da8 <_printf_common>:
 8011da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dac:	4616      	mov	r6, r2
 8011dae:	4699      	mov	r9, r3
 8011db0:	688a      	ldr	r2, [r1, #8]
 8011db2:	690b      	ldr	r3, [r1, #16]
 8011db4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011db8:	4293      	cmp	r3, r2
 8011dba:	bfb8      	it	lt
 8011dbc:	4613      	movlt	r3, r2
 8011dbe:	6033      	str	r3, [r6, #0]
 8011dc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011dc4:	4607      	mov	r7, r0
 8011dc6:	460c      	mov	r4, r1
 8011dc8:	b10a      	cbz	r2, 8011dce <_printf_common+0x26>
 8011dca:	3301      	adds	r3, #1
 8011dcc:	6033      	str	r3, [r6, #0]
 8011dce:	6823      	ldr	r3, [r4, #0]
 8011dd0:	0699      	lsls	r1, r3, #26
 8011dd2:	bf42      	ittt	mi
 8011dd4:	6833      	ldrmi	r3, [r6, #0]
 8011dd6:	3302      	addmi	r3, #2
 8011dd8:	6033      	strmi	r3, [r6, #0]
 8011dda:	6825      	ldr	r5, [r4, #0]
 8011ddc:	f015 0506 	ands.w	r5, r5, #6
 8011de0:	d106      	bne.n	8011df0 <_printf_common+0x48>
 8011de2:	f104 0a19 	add.w	sl, r4, #25
 8011de6:	68e3      	ldr	r3, [r4, #12]
 8011de8:	6832      	ldr	r2, [r6, #0]
 8011dea:	1a9b      	subs	r3, r3, r2
 8011dec:	42ab      	cmp	r3, r5
 8011dee:	dc26      	bgt.n	8011e3e <_printf_common+0x96>
 8011df0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011df4:	1e13      	subs	r3, r2, #0
 8011df6:	6822      	ldr	r2, [r4, #0]
 8011df8:	bf18      	it	ne
 8011dfa:	2301      	movne	r3, #1
 8011dfc:	0692      	lsls	r2, r2, #26
 8011dfe:	d42b      	bmi.n	8011e58 <_printf_common+0xb0>
 8011e00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011e04:	4649      	mov	r1, r9
 8011e06:	4638      	mov	r0, r7
 8011e08:	47c0      	blx	r8
 8011e0a:	3001      	adds	r0, #1
 8011e0c:	d01e      	beq.n	8011e4c <_printf_common+0xa4>
 8011e0e:	6823      	ldr	r3, [r4, #0]
 8011e10:	68e5      	ldr	r5, [r4, #12]
 8011e12:	6832      	ldr	r2, [r6, #0]
 8011e14:	f003 0306 	and.w	r3, r3, #6
 8011e18:	2b04      	cmp	r3, #4
 8011e1a:	bf08      	it	eq
 8011e1c:	1aad      	subeq	r5, r5, r2
 8011e1e:	68a3      	ldr	r3, [r4, #8]
 8011e20:	6922      	ldr	r2, [r4, #16]
 8011e22:	bf0c      	ite	eq
 8011e24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011e28:	2500      	movne	r5, #0
 8011e2a:	4293      	cmp	r3, r2
 8011e2c:	bfc4      	itt	gt
 8011e2e:	1a9b      	subgt	r3, r3, r2
 8011e30:	18ed      	addgt	r5, r5, r3
 8011e32:	2600      	movs	r6, #0
 8011e34:	341a      	adds	r4, #26
 8011e36:	42b5      	cmp	r5, r6
 8011e38:	d11a      	bne.n	8011e70 <_printf_common+0xc8>
 8011e3a:	2000      	movs	r0, #0
 8011e3c:	e008      	b.n	8011e50 <_printf_common+0xa8>
 8011e3e:	2301      	movs	r3, #1
 8011e40:	4652      	mov	r2, sl
 8011e42:	4649      	mov	r1, r9
 8011e44:	4638      	mov	r0, r7
 8011e46:	47c0      	blx	r8
 8011e48:	3001      	adds	r0, #1
 8011e4a:	d103      	bne.n	8011e54 <_printf_common+0xac>
 8011e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e54:	3501      	adds	r5, #1
 8011e56:	e7c6      	b.n	8011de6 <_printf_common+0x3e>
 8011e58:	18e1      	adds	r1, r4, r3
 8011e5a:	1c5a      	adds	r2, r3, #1
 8011e5c:	2030      	movs	r0, #48	; 0x30
 8011e5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011e62:	4422      	add	r2, r4
 8011e64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011e68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011e6c:	3302      	adds	r3, #2
 8011e6e:	e7c7      	b.n	8011e00 <_printf_common+0x58>
 8011e70:	2301      	movs	r3, #1
 8011e72:	4622      	mov	r2, r4
 8011e74:	4649      	mov	r1, r9
 8011e76:	4638      	mov	r0, r7
 8011e78:	47c0      	blx	r8
 8011e7a:	3001      	adds	r0, #1
 8011e7c:	d0e6      	beq.n	8011e4c <_printf_common+0xa4>
 8011e7e:	3601      	adds	r6, #1
 8011e80:	e7d9      	b.n	8011e36 <_printf_common+0x8e>
	...

08011e84 <_printf_i>:
 8011e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011e88:	7e0f      	ldrb	r7, [r1, #24]
 8011e8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011e8c:	2f78      	cmp	r7, #120	; 0x78
 8011e8e:	4691      	mov	r9, r2
 8011e90:	4680      	mov	r8, r0
 8011e92:	460c      	mov	r4, r1
 8011e94:	469a      	mov	sl, r3
 8011e96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011e9a:	d807      	bhi.n	8011eac <_printf_i+0x28>
 8011e9c:	2f62      	cmp	r7, #98	; 0x62
 8011e9e:	d80a      	bhi.n	8011eb6 <_printf_i+0x32>
 8011ea0:	2f00      	cmp	r7, #0
 8011ea2:	f000 80d8 	beq.w	8012056 <_printf_i+0x1d2>
 8011ea6:	2f58      	cmp	r7, #88	; 0x58
 8011ea8:	f000 80a3 	beq.w	8011ff2 <_printf_i+0x16e>
 8011eac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011eb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011eb4:	e03a      	b.n	8011f2c <_printf_i+0xa8>
 8011eb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011eba:	2b15      	cmp	r3, #21
 8011ebc:	d8f6      	bhi.n	8011eac <_printf_i+0x28>
 8011ebe:	a101      	add	r1, pc, #4	; (adr r1, 8011ec4 <_printf_i+0x40>)
 8011ec0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011ec4:	08011f1d 	.word	0x08011f1d
 8011ec8:	08011f31 	.word	0x08011f31
 8011ecc:	08011ead 	.word	0x08011ead
 8011ed0:	08011ead 	.word	0x08011ead
 8011ed4:	08011ead 	.word	0x08011ead
 8011ed8:	08011ead 	.word	0x08011ead
 8011edc:	08011f31 	.word	0x08011f31
 8011ee0:	08011ead 	.word	0x08011ead
 8011ee4:	08011ead 	.word	0x08011ead
 8011ee8:	08011ead 	.word	0x08011ead
 8011eec:	08011ead 	.word	0x08011ead
 8011ef0:	0801203d 	.word	0x0801203d
 8011ef4:	08011f61 	.word	0x08011f61
 8011ef8:	0801201f 	.word	0x0801201f
 8011efc:	08011ead 	.word	0x08011ead
 8011f00:	08011ead 	.word	0x08011ead
 8011f04:	0801205f 	.word	0x0801205f
 8011f08:	08011ead 	.word	0x08011ead
 8011f0c:	08011f61 	.word	0x08011f61
 8011f10:	08011ead 	.word	0x08011ead
 8011f14:	08011ead 	.word	0x08011ead
 8011f18:	08012027 	.word	0x08012027
 8011f1c:	682b      	ldr	r3, [r5, #0]
 8011f1e:	1d1a      	adds	r2, r3, #4
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	602a      	str	r2, [r5, #0]
 8011f24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011f2c:	2301      	movs	r3, #1
 8011f2e:	e0a3      	b.n	8012078 <_printf_i+0x1f4>
 8011f30:	6820      	ldr	r0, [r4, #0]
 8011f32:	6829      	ldr	r1, [r5, #0]
 8011f34:	0606      	lsls	r6, r0, #24
 8011f36:	f101 0304 	add.w	r3, r1, #4
 8011f3a:	d50a      	bpl.n	8011f52 <_printf_i+0xce>
 8011f3c:	680e      	ldr	r6, [r1, #0]
 8011f3e:	602b      	str	r3, [r5, #0]
 8011f40:	2e00      	cmp	r6, #0
 8011f42:	da03      	bge.n	8011f4c <_printf_i+0xc8>
 8011f44:	232d      	movs	r3, #45	; 0x2d
 8011f46:	4276      	negs	r6, r6
 8011f48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f4c:	485e      	ldr	r0, [pc, #376]	; (80120c8 <_printf_i+0x244>)
 8011f4e:	230a      	movs	r3, #10
 8011f50:	e019      	b.n	8011f86 <_printf_i+0x102>
 8011f52:	680e      	ldr	r6, [r1, #0]
 8011f54:	602b      	str	r3, [r5, #0]
 8011f56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011f5a:	bf18      	it	ne
 8011f5c:	b236      	sxthne	r6, r6
 8011f5e:	e7ef      	b.n	8011f40 <_printf_i+0xbc>
 8011f60:	682b      	ldr	r3, [r5, #0]
 8011f62:	6820      	ldr	r0, [r4, #0]
 8011f64:	1d19      	adds	r1, r3, #4
 8011f66:	6029      	str	r1, [r5, #0]
 8011f68:	0601      	lsls	r1, r0, #24
 8011f6a:	d501      	bpl.n	8011f70 <_printf_i+0xec>
 8011f6c:	681e      	ldr	r6, [r3, #0]
 8011f6e:	e002      	b.n	8011f76 <_printf_i+0xf2>
 8011f70:	0646      	lsls	r6, r0, #25
 8011f72:	d5fb      	bpl.n	8011f6c <_printf_i+0xe8>
 8011f74:	881e      	ldrh	r6, [r3, #0]
 8011f76:	4854      	ldr	r0, [pc, #336]	; (80120c8 <_printf_i+0x244>)
 8011f78:	2f6f      	cmp	r7, #111	; 0x6f
 8011f7a:	bf0c      	ite	eq
 8011f7c:	2308      	moveq	r3, #8
 8011f7e:	230a      	movne	r3, #10
 8011f80:	2100      	movs	r1, #0
 8011f82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011f86:	6865      	ldr	r5, [r4, #4]
 8011f88:	60a5      	str	r5, [r4, #8]
 8011f8a:	2d00      	cmp	r5, #0
 8011f8c:	bfa2      	ittt	ge
 8011f8e:	6821      	ldrge	r1, [r4, #0]
 8011f90:	f021 0104 	bicge.w	r1, r1, #4
 8011f94:	6021      	strge	r1, [r4, #0]
 8011f96:	b90e      	cbnz	r6, 8011f9c <_printf_i+0x118>
 8011f98:	2d00      	cmp	r5, #0
 8011f9a:	d04d      	beq.n	8012038 <_printf_i+0x1b4>
 8011f9c:	4615      	mov	r5, r2
 8011f9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011fa2:	fb03 6711 	mls	r7, r3, r1, r6
 8011fa6:	5dc7      	ldrb	r7, [r0, r7]
 8011fa8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011fac:	4637      	mov	r7, r6
 8011fae:	42bb      	cmp	r3, r7
 8011fb0:	460e      	mov	r6, r1
 8011fb2:	d9f4      	bls.n	8011f9e <_printf_i+0x11a>
 8011fb4:	2b08      	cmp	r3, #8
 8011fb6:	d10b      	bne.n	8011fd0 <_printf_i+0x14c>
 8011fb8:	6823      	ldr	r3, [r4, #0]
 8011fba:	07de      	lsls	r6, r3, #31
 8011fbc:	d508      	bpl.n	8011fd0 <_printf_i+0x14c>
 8011fbe:	6923      	ldr	r3, [r4, #16]
 8011fc0:	6861      	ldr	r1, [r4, #4]
 8011fc2:	4299      	cmp	r1, r3
 8011fc4:	bfde      	ittt	le
 8011fc6:	2330      	movle	r3, #48	; 0x30
 8011fc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011fcc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011fd0:	1b52      	subs	r2, r2, r5
 8011fd2:	6122      	str	r2, [r4, #16]
 8011fd4:	f8cd a000 	str.w	sl, [sp]
 8011fd8:	464b      	mov	r3, r9
 8011fda:	aa03      	add	r2, sp, #12
 8011fdc:	4621      	mov	r1, r4
 8011fde:	4640      	mov	r0, r8
 8011fe0:	f7ff fee2 	bl	8011da8 <_printf_common>
 8011fe4:	3001      	adds	r0, #1
 8011fe6:	d14c      	bne.n	8012082 <_printf_i+0x1fe>
 8011fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011fec:	b004      	add	sp, #16
 8011fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ff2:	4835      	ldr	r0, [pc, #212]	; (80120c8 <_printf_i+0x244>)
 8011ff4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011ff8:	6829      	ldr	r1, [r5, #0]
 8011ffa:	6823      	ldr	r3, [r4, #0]
 8011ffc:	f851 6b04 	ldr.w	r6, [r1], #4
 8012000:	6029      	str	r1, [r5, #0]
 8012002:	061d      	lsls	r5, r3, #24
 8012004:	d514      	bpl.n	8012030 <_printf_i+0x1ac>
 8012006:	07df      	lsls	r7, r3, #31
 8012008:	bf44      	itt	mi
 801200a:	f043 0320 	orrmi.w	r3, r3, #32
 801200e:	6023      	strmi	r3, [r4, #0]
 8012010:	b91e      	cbnz	r6, 801201a <_printf_i+0x196>
 8012012:	6823      	ldr	r3, [r4, #0]
 8012014:	f023 0320 	bic.w	r3, r3, #32
 8012018:	6023      	str	r3, [r4, #0]
 801201a:	2310      	movs	r3, #16
 801201c:	e7b0      	b.n	8011f80 <_printf_i+0xfc>
 801201e:	6823      	ldr	r3, [r4, #0]
 8012020:	f043 0320 	orr.w	r3, r3, #32
 8012024:	6023      	str	r3, [r4, #0]
 8012026:	2378      	movs	r3, #120	; 0x78
 8012028:	4828      	ldr	r0, [pc, #160]	; (80120cc <_printf_i+0x248>)
 801202a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801202e:	e7e3      	b.n	8011ff8 <_printf_i+0x174>
 8012030:	0659      	lsls	r1, r3, #25
 8012032:	bf48      	it	mi
 8012034:	b2b6      	uxthmi	r6, r6
 8012036:	e7e6      	b.n	8012006 <_printf_i+0x182>
 8012038:	4615      	mov	r5, r2
 801203a:	e7bb      	b.n	8011fb4 <_printf_i+0x130>
 801203c:	682b      	ldr	r3, [r5, #0]
 801203e:	6826      	ldr	r6, [r4, #0]
 8012040:	6961      	ldr	r1, [r4, #20]
 8012042:	1d18      	adds	r0, r3, #4
 8012044:	6028      	str	r0, [r5, #0]
 8012046:	0635      	lsls	r5, r6, #24
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	d501      	bpl.n	8012050 <_printf_i+0x1cc>
 801204c:	6019      	str	r1, [r3, #0]
 801204e:	e002      	b.n	8012056 <_printf_i+0x1d2>
 8012050:	0670      	lsls	r0, r6, #25
 8012052:	d5fb      	bpl.n	801204c <_printf_i+0x1c8>
 8012054:	8019      	strh	r1, [r3, #0]
 8012056:	2300      	movs	r3, #0
 8012058:	6123      	str	r3, [r4, #16]
 801205a:	4615      	mov	r5, r2
 801205c:	e7ba      	b.n	8011fd4 <_printf_i+0x150>
 801205e:	682b      	ldr	r3, [r5, #0]
 8012060:	1d1a      	adds	r2, r3, #4
 8012062:	602a      	str	r2, [r5, #0]
 8012064:	681d      	ldr	r5, [r3, #0]
 8012066:	6862      	ldr	r2, [r4, #4]
 8012068:	2100      	movs	r1, #0
 801206a:	4628      	mov	r0, r5
 801206c:	f7ee f8d0 	bl	8000210 <memchr>
 8012070:	b108      	cbz	r0, 8012076 <_printf_i+0x1f2>
 8012072:	1b40      	subs	r0, r0, r5
 8012074:	6060      	str	r0, [r4, #4]
 8012076:	6863      	ldr	r3, [r4, #4]
 8012078:	6123      	str	r3, [r4, #16]
 801207a:	2300      	movs	r3, #0
 801207c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012080:	e7a8      	b.n	8011fd4 <_printf_i+0x150>
 8012082:	6923      	ldr	r3, [r4, #16]
 8012084:	462a      	mov	r2, r5
 8012086:	4649      	mov	r1, r9
 8012088:	4640      	mov	r0, r8
 801208a:	47d0      	blx	sl
 801208c:	3001      	adds	r0, #1
 801208e:	d0ab      	beq.n	8011fe8 <_printf_i+0x164>
 8012090:	6823      	ldr	r3, [r4, #0]
 8012092:	079b      	lsls	r3, r3, #30
 8012094:	d413      	bmi.n	80120be <_printf_i+0x23a>
 8012096:	68e0      	ldr	r0, [r4, #12]
 8012098:	9b03      	ldr	r3, [sp, #12]
 801209a:	4298      	cmp	r0, r3
 801209c:	bfb8      	it	lt
 801209e:	4618      	movlt	r0, r3
 80120a0:	e7a4      	b.n	8011fec <_printf_i+0x168>
 80120a2:	2301      	movs	r3, #1
 80120a4:	4632      	mov	r2, r6
 80120a6:	4649      	mov	r1, r9
 80120a8:	4640      	mov	r0, r8
 80120aa:	47d0      	blx	sl
 80120ac:	3001      	adds	r0, #1
 80120ae:	d09b      	beq.n	8011fe8 <_printf_i+0x164>
 80120b0:	3501      	adds	r5, #1
 80120b2:	68e3      	ldr	r3, [r4, #12]
 80120b4:	9903      	ldr	r1, [sp, #12]
 80120b6:	1a5b      	subs	r3, r3, r1
 80120b8:	42ab      	cmp	r3, r5
 80120ba:	dcf2      	bgt.n	80120a2 <_printf_i+0x21e>
 80120bc:	e7eb      	b.n	8012096 <_printf_i+0x212>
 80120be:	2500      	movs	r5, #0
 80120c0:	f104 0619 	add.w	r6, r4, #25
 80120c4:	e7f5      	b.n	80120b2 <_printf_i+0x22e>
 80120c6:	bf00      	nop
 80120c8:	080142ba 	.word	0x080142ba
 80120cc:	080142cb 	.word	0x080142cb

080120d0 <iprintf>:
 80120d0:	b40f      	push	{r0, r1, r2, r3}
 80120d2:	4b0a      	ldr	r3, [pc, #40]	; (80120fc <iprintf+0x2c>)
 80120d4:	b513      	push	{r0, r1, r4, lr}
 80120d6:	681c      	ldr	r4, [r3, #0]
 80120d8:	b124      	cbz	r4, 80120e4 <iprintf+0x14>
 80120da:	69a3      	ldr	r3, [r4, #24]
 80120dc:	b913      	cbnz	r3, 80120e4 <iprintf+0x14>
 80120de:	4620      	mov	r0, r4
 80120e0:	f000 ff10 	bl	8012f04 <__sinit>
 80120e4:	ab05      	add	r3, sp, #20
 80120e6:	9a04      	ldr	r2, [sp, #16]
 80120e8:	68a1      	ldr	r1, [r4, #8]
 80120ea:	9301      	str	r3, [sp, #4]
 80120ec:	4620      	mov	r0, r4
 80120ee:	f001 fba3 	bl	8013838 <_vfiprintf_r>
 80120f2:	b002      	add	sp, #8
 80120f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120f8:	b004      	add	sp, #16
 80120fa:	4770      	bx	lr
 80120fc:	2000018c 	.word	0x2000018c

08012100 <_sbrk_r>:
 8012100:	b538      	push	{r3, r4, r5, lr}
 8012102:	4d06      	ldr	r5, [pc, #24]	; (801211c <_sbrk_r+0x1c>)
 8012104:	2300      	movs	r3, #0
 8012106:	4604      	mov	r4, r0
 8012108:	4608      	mov	r0, r1
 801210a:	602b      	str	r3, [r5, #0]
 801210c:	f001 ffea 	bl	80140e4 <_sbrk>
 8012110:	1c43      	adds	r3, r0, #1
 8012112:	d102      	bne.n	801211a <_sbrk_r+0x1a>
 8012114:	682b      	ldr	r3, [r5, #0]
 8012116:	b103      	cbz	r3, 801211a <_sbrk_r+0x1a>
 8012118:	6023      	str	r3, [r4, #0]
 801211a:	bd38      	pop	{r3, r4, r5, pc}
 801211c:	200029ac 	.word	0x200029ac

08012120 <__assert_func>:
 8012120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012122:	4614      	mov	r4, r2
 8012124:	461a      	mov	r2, r3
 8012126:	4b09      	ldr	r3, [pc, #36]	; (801214c <__assert_func+0x2c>)
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	4605      	mov	r5, r0
 801212c:	68d8      	ldr	r0, [r3, #12]
 801212e:	b14c      	cbz	r4, 8012144 <__assert_func+0x24>
 8012130:	4b07      	ldr	r3, [pc, #28]	; (8012150 <__assert_func+0x30>)
 8012132:	9100      	str	r1, [sp, #0]
 8012134:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012138:	4906      	ldr	r1, [pc, #24]	; (8012154 <__assert_func+0x34>)
 801213a:	462b      	mov	r3, r5
 801213c:	f000 ff60 	bl	8013000 <fiprintf>
 8012140:	f001 fdce 	bl	8013ce0 <abort>
 8012144:	4b04      	ldr	r3, [pc, #16]	; (8012158 <__assert_func+0x38>)
 8012146:	461c      	mov	r4, r3
 8012148:	e7f3      	b.n	8012132 <__assert_func+0x12>
 801214a:	bf00      	nop
 801214c:	2000018c 	.word	0x2000018c
 8012150:	080142dc 	.word	0x080142dc
 8012154:	080142e9 	.word	0x080142e9
 8012158:	08014317 	.word	0x08014317

0801215c <quorem>:
 801215c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012160:	6903      	ldr	r3, [r0, #16]
 8012162:	690c      	ldr	r4, [r1, #16]
 8012164:	42a3      	cmp	r3, r4
 8012166:	4607      	mov	r7, r0
 8012168:	f2c0 8081 	blt.w	801226e <quorem+0x112>
 801216c:	3c01      	subs	r4, #1
 801216e:	f101 0814 	add.w	r8, r1, #20
 8012172:	f100 0514 	add.w	r5, r0, #20
 8012176:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801217a:	9301      	str	r3, [sp, #4]
 801217c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012180:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012184:	3301      	adds	r3, #1
 8012186:	429a      	cmp	r2, r3
 8012188:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801218c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012190:	fbb2 f6f3 	udiv	r6, r2, r3
 8012194:	d331      	bcc.n	80121fa <quorem+0x9e>
 8012196:	f04f 0e00 	mov.w	lr, #0
 801219a:	4640      	mov	r0, r8
 801219c:	46ac      	mov	ip, r5
 801219e:	46f2      	mov	sl, lr
 80121a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80121a4:	b293      	uxth	r3, r2
 80121a6:	fb06 e303 	mla	r3, r6, r3, lr
 80121aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80121ae:	b29b      	uxth	r3, r3
 80121b0:	ebaa 0303 	sub.w	r3, sl, r3
 80121b4:	f8dc a000 	ldr.w	sl, [ip]
 80121b8:	0c12      	lsrs	r2, r2, #16
 80121ba:	fa13 f38a 	uxtah	r3, r3, sl
 80121be:	fb06 e202 	mla	r2, r6, r2, lr
 80121c2:	9300      	str	r3, [sp, #0]
 80121c4:	9b00      	ldr	r3, [sp, #0]
 80121c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80121ca:	b292      	uxth	r2, r2
 80121cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80121d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80121d4:	f8bd 3000 	ldrh.w	r3, [sp]
 80121d8:	4581      	cmp	r9, r0
 80121da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80121de:	f84c 3b04 	str.w	r3, [ip], #4
 80121e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80121e6:	d2db      	bcs.n	80121a0 <quorem+0x44>
 80121e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80121ec:	b92b      	cbnz	r3, 80121fa <quorem+0x9e>
 80121ee:	9b01      	ldr	r3, [sp, #4]
 80121f0:	3b04      	subs	r3, #4
 80121f2:	429d      	cmp	r5, r3
 80121f4:	461a      	mov	r2, r3
 80121f6:	d32e      	bcc.n	8012256 <quorem+0xfa>
 80121f8:	613c      	str	r4, [r7, #16]
 80121fa:	4638      	mov	r0, r7
 80121fc:	f001 f9da 	bl	80135b4 <__mcmp>
 8012200:	2800      	cmp	r0, #0
 8012202:	db24      	blt.n	801224e <quorem+0xf2>
 8012204:	3601      	adds	r6, #1
 8012206:	4628      	mov	r0, r5
 8012208:	f04f 0c00 	mov.w	ip, #0
 801220c:	f858 2b04 	ldr.w	r2, [r8], #4
 8012210:	f8d0 e000 	ldr.w	lr, [r0]
 8012214:	b293      	uxth	r3, r2
 8012216:	ebac 0303 	sub.w	r3, ip, r3
 801221a:	0c12      	lsrs	r2, r2, #16
 801221c:	fa13 f38e 	uxtah	r3, r3, lr
 8012220:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012224:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012228:	b29b      	uxth	r3, r3
 801222a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801222e:	45c1      	cmp	r9, r8
 8012230:	f840 3b04 	str.w	r3, [r0], #4
 8012234:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012238:	d2e8      	bcs.n	801220c <quorem+0xb0>
 801223a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801223e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012242:	b922      	cbnz	r2, 801224e <quorem+0xf2>
 8012244:	3b04      	subs	r3, #4
 8012246:	429d      	cmp	r5, r3
 8012248:	461a      	mov	r2, r3
 801224a:	d30a      	bcc.n	8012262 <quorem+0x106>
 801224c:	613c      	str	r4, [r7, #16]
 801224e:	4630      	mov	r0, r6
 8012250:	b003      	add	sp, #12
 8012252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012256:	6812      	ldr	r2, [r2, #0]
 8012258:	3b04      	subs	r3, #4
 801225a:	2a00      	cmp	r2, #0
 801225c:	d1cc      	bne.n	80121f8 <quorem+0x9c>
 801225e:	3c01      	subs	r4, #1
 8012260:	e7c7      	b.n	80121f2 <quorem+0x96>
 8012262:	6812      	ldr	r2, [r2, #0]
 8012264:	3b04      	subs	r3, #4
 8012266:	2a00      	cmp	r2, #0
 8012268:	d1f0      	bne.n	801224c <quorem+0xf0>
 801226a:	3c01      	subs	r4, #1
 801226c:	e7eb      	b.n	8012246 <quorem+0xea>
 801226e:	2000      	movs	r0, #0
 8012270:	e7ee      	b.n	8012250 <quorem+0xf4>
 8012272:	0000      	movs	r0, r0
 8012274:	0000      	movs	r0, r0
	...

08012278 <_dtoa_r>:
 8012278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801227c:	ed2d 8b04 	vpush	{d8-d9}
 8012280:	ec57 6b10 	vmov	r6, r7, d0
 8012284:	b093      	sub	sp, #76	; 0x4c
 8012286:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012288:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801228c:	9106      	str	r1, [sp, #24]
 801228e:	ee10 aa10 	vmov	sl, s0
 8012292:	4604      	mov	r4, r0
 8012294:	9209      	str	r2, [sp, #36]	; 0x24
 8012296:	930c      	str	r3, [sp, #48]	; 0x30
 8012298:	46bb      	mov	fp, r7
 801229a:	b975      	cbnz	r5, 80122ba <_dtoa_r+0x42>
 801229c:	2010      	movs	r0, #16
 801229e:	f7ff f9af 	bl	8011600 <malloc>
 80122a2:	4602      	mov	r2, r0
 80122a4:	6260      	str	r0, [r4, #36]	; 0x24
 80122a6:	b920      	cbnz	r0, 80122b2 <_dtoa_r+0x3a>
 80122a8:	4ba7      	ldr	r3, [pc, #668]	; (8012548 <_dtoa_r+0x2d0>)
 80122aa:	21ea      	movs	r1, #234	; 0xea
 80122ac:	48a7      	ldr	r0, [pc, #668]	; (801254c <_dtoa_r+0x2d4>)
 80122ae:	f7ff ff37 	bl	8012120 <__assert_func>
 80122b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80122b6:	6005      	str	r5, [r0, #0]
 80122b8:	60c5      	str	r5, [r0, #12]
 80122ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80122bc:	6819      	ldr	r1, [r3, #0]
 80122be:	b151      	cbz	r1, 80122d6 <_dtoa_r+0x5e>
 80122c0:	685a      	ldr	r2, [r3, #4]
 80122c2:	604a      	str	r2, [r1, #4]
 80122c4:	2301      	movs	r3, #1
 80122c6:	4093      	lsls	r3, r2
 80122c8:	608b      	str	r3, [r1, #8]
 80122ca:	4620      	mov	r0, r4
 80122cc:	f000 ff30 	bl	8013130 <_Bfree>
 80122d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80122d2:	2200      	movs	r2, #0
 80122d4:	601a      	str	r2, [r3, #0]
 80122d6:	1e3b      	subs	r3, r7, #0
 80122d8:	bfaa      	itet	ge
 80122da:	2300      	movge	r3, #0
 80122dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80122e0:	f8c8 3000 	strge.w	r3, [r8]
 80122e4:	4b9a      	ldr	r3, [pc, #616]	; (8012550 <_dtoa_r+0x2d8>)
 80122e6:	bfbc      	itt	lt
 80122e8:	2201      	movlt	r2, #1
 80122ea:	f8c8 2000 	strlt.w	r2, [r8]
 80122ee:	ea33 030b 	bics.w	r3, r3, fp
 80122f2:	d11b      	bne.n	801232c <_dtoa_r+0xb4>
 80122f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80122f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80122fa:	6013      	str	r3, [r2, #0]
 80122fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012300:	4333      	orrs	r3, r6
 8012302:	f000 8592 	beq.w	8012e2a <_dtoa_r+0xbb2>
 8012306:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012308:	b963      	cbnz	r3, 8012324 <_dtoa_r+0xac>
 801230a:	4b92      	ldr	r3, [pc, #584]	; (8012554 <_dtoa_r+0x2dc>)
 801230c:	e022      	b.n	8012354 <_dtoa_r+0xdc>
 801230e:	4b92      	ldr	r3, [pc, #584]	; (8012558 <_dtoa_r+0x2e0>)
 8012310:	9301      	str	r3, [sp, #4]
 8012312:	3308      	adds	r3, #8
 8012314:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012316:	6013      	str	r3, [r2, #0]
 8012318:	9801      	ldr	r0, [sp, #4]
 801231a:	b013      	add	sp, #76	; 0x4c
 801231c:	ecbd 8b04 	vpop	{d8-d9}
 8012320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012324:	4b8b      	ldr	r3, [pc, #556]	; (8012554 <_dtoa_r+0x2dc>)
 8012326:	9301      	str	r3, [sp, #4]
 8012328:	3303      	adds	r3, #3
 801232a:	e7f3      	b.n	8012314 <_dtoa_r+0x9c>
 801232c:	2200      	movs	r2, #0
 801232e:	2300      	movs	r3, #0
 8012330:	4650      	mov	r0, sl
 8012332:	4659      	mov	r1, fp
 8012334:	f7ee fbe0 	bl	8000af8 <__aeabi_dcmpeq>
 8012338:	ec4b ab19 	vmov	d9, sl, fp
 801233c:	4680      	mov	r8, r0
 801233e:	b158      	cbz	r0, 8012358 <_dtoa_r+0xe0>
 8012340:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012342:	2301      	movs	r3, #1
 8012344:	6013      	str	r3, [r2, #0]
 8012346:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012348:	2b00      	cmp	r3, #0
 801234a:	f000 856b 	beq.w	8012e24 <_dtoa_r+0xbac>
 801234e:	4883      	ldr	r0, [pc, #524]	; (801255c <_dtoa_r+0x2e4>)
 8012350:	6018      	str	r0, [r3, #0]
 8012352:	1e43      	subs	r3, r0, #1
 8012354:	9301      	str	r3, [sp, #4]
 8012356:	e7df      	b.n	8012318 <_dtoa_r+0xa0>
 8012358:	ec4b ab10 	vmov	d0, sl, fp
 801235c:	aa10      	add	r2, sp, #64	; 0x40
 801235e:	a911      	add	r1, sp, #68	; 0x44
 8012360:	4620      	mov	r0, r4
 8012362:	f001 f9cd 	bl	8013700 <__d2b>
 8012366:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801236a:	ee08 0a10 	vmov	s16, r0
 801236e:	2d00      	cmp	r5, #0
 8012370:	f000 8084 	beq.w	801247c <_dtoa_r+0x204>
 8012374:	ee19 3a90 	vmov	r3, s19
 8012378:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801237c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012380:	4656      	mov	r6, sl
 8012382:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012386:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801238a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801238e:	4b74      	ldr	r3, [pc, #464]	; (8012560 <_dtoa_r+0x2e8>)
 8012390:	2200      	movs	r2, #0
 8012392:	4630      	mov	r0, r6
 8012394:	4639      	mov	r1, r7
 8012396:	f7ed ff8f 	bl	80002b8 <__aeabi_dsub>
 801239a:	a365      	add	r3, pc, #404	; (adr r3, 8012530 <_dtoa_r+0x2b8>)
 801239c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123a0:	f7ee f942 	bl	8000628 <__aeabi_dmul>
 80123a4:	a364      	add	r3, pc, #400	; (adr r3, 8012538 <_dtoa_r+0x2c0>)
 80123a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123aa:	f7ed ff87 	bl	80002bc <__adddf3>
 80123ae:	4606      	mov	r6, r0
 80123b0:	4628      	mov	r0, r5
 80123b2:	460f      	mov	r7, r1
 80123b4:	f7ee f8ce 	bl	8000554 <__aeabi_i2d>
 80123b8:	a361      	add	r3, pc, #388	; (adr r3, 8012540 <_dtoa_r+0x2c8>)
 80123ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123be:	f7ee f933 	bl	8000628 <__aeabi_dmul>
 80123c2:	4602      	mov	r2, r0
 80123c4:	460b      	mov	r3, r1
 80123c6:	4630      	mov	r0, r6
 80123c8:	4639      	mov	r1, r7
 80123ca:	f7ed ff77 	bl	80002bc <__adddf3>
 80123ce:	4606      	mov	r6, r0
 80123d0:	460f      	mov	r7, r1
 80123d2:	f7ee fbd9 	bl	8000b88 <__aeabi_d2iz>
 80123d6:	2200      	movs	r2, #0
 80123d8:	9000      	str	r0, [sp, #0]
 80123da:	2300      	movs	r3, #0
 80123dc:	4630      	mov	r0, r6
 80123de:	4639      	mov	r1, r7
 80123e0:	f7ee fb94 	bl	8000b0c <__aeabi_dcmplt>
 80123e4:	b150      	cbz	r0, 80123fc <_dtoa_r+0x184>
 80123e6:	9800      	ldr	r0, [sp, #0]
 80123e8:	f7ee f8b4 	bl	8000554 <__aeabi_i2d>
 80123ec:	4632      	mov	r2, r6
 80123ee:	463b      	mov	r3, r7
 80123f0:	f7ee fb82 	bl	8000af8 <__aeabi_dcmpeq>
 80123f4:	b910      	cbnz	r0, 80123fc <_dtoa_r+0x184>
 80123f6:	9b00      	ldr	r3, [sp, #0]
 80123f8:	3b01      	subs	r3, #1
 80123fa:	9300      	str	r3, [sp, #0]
 80123fc:	9b00      	ldr	r3, [sp, #0]
 80123fe:	2b16      	cmp	r3, #22
 8012400:	d85a      	bhi.n	80124b8 <_dtoa_r+0x240>
 8012402:	9a00      	ldr	r2, [sp, #0]
 8012404:	4b57      	ldr	r3, [pc, #348]	; (8012564 <_dtoa_r+0x2ec>)
 8012406:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801240a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801240e:	ec51 0b19 	vmov	r0, r1, d9
 8012412:	f7ee fb7b 	bl	8000b0c <__aeabi_dcmplt>
 8012416:	2800      	cmp	r0, #0
 8012418:	d050      	beq.n	80124bc <_dtoa_r+0x244>
 801241a:	9b00      	ldr	r3, [sp, #0]
 801241c:	3b01      	subs	r3, #1
 801241e:	9300      	str	r3, [sp, #0]
 8012420:	2300      	movs	r3, #0
 8012422:	930b      	str	r3, [sp, #44]	; 0x2c
 8012424:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012426:	1b5d      	subs	r5, r3, r5
 8012428:	1e6b      	subs	r3, r5, #1
 801242a:	9305      	str	r3, [sp, #20]
 801242c:	bf45      	ittet	mi
 801242e:	f1c5 0301 	rsbmi	r3, r5, #1
 8012432:	9304      	strmi	r3, [sp, #16]
 8012434:	2300      	movpl	r3, #0
 8012436:	2300      	movmi	r3, #0
 8012438:	bf4c      	ite	mi
 801243a:	9305      	strmi	r3, [sp, #20]
 801243c:	9304      	strpl	r3, [sp, #16]
 801243e:	9b00      	ldr	r3, [sp, #0]
 8012440:	2b00      	cmp	r3, #0
 8012442:	db3d      	blt.n	80124c0 <_dtoa_r+0x248>
 8012444:	9b05      	ldr	r3, [sp, #20]
 8012446:	9a00      	ldr	r2, [sp, #0]
 8012448:	920a      	str	r2, [sp, #40]	; 0x28
 801244a:	4413      	add	r3, r2
 801244c:	9305      	str	r3, [sp, #20]
 801244e:	2300      	movs	r3, #0
 8012450:	9307      	str	r3, [sp, #28]
 8012452:	9b06      	ldr	r3, [sp, #24]
 8012454:	2b09      	cmp	r3, #9
 8012456:	f200 8089 	bhi.w	801256c <_dtoa_r+0x2f4>
 801245a:	2b05      	cmp	r3, #5
 801245c:	bfc4      	itt	gt
 801245e:	3b04      	subgt	r3, #4
 8012460:	9306      	strgt	r3, [sp, #24]
 8012462:	9b06      	ldr	r3, [sp, #24]
 8012464:	f1a3 0302 	sub.w	r3, r3, #2
 8012468:	bfcc      	ite	gt
 801246a:	2500      	movgt	r5, #0
 801246c:	2501      	movle	r5, #1
 801246e:	2b03      	cmp	r3, #3
 8012470:	f200 8087 	bhi.w	8012582 <_dtoa_r+0x30a>
 8012474:	e8df f003 	tbb	[pc, r3]
 8012478:	59383a2d 	.word	0x59383a2d
 801247c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012480:	441d      	add	r5, r3
 8012482:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012486:	2b20      	cmp	r3, #32
 8012488:	bfc1      	itttt	gt
 801248a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801248e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012492:	fa0b f303 	lslgt.w	r3, fp, r3
 8012496:	fa26 f000 	lsrgt.w	r0, r6, r0
 801249a:	bfda      	itte	le
 801249c:	f1c3 0320 	rsble	r3, r3, #32
 80124a0:	fa06 f003 	lslle.w	r0, r6, r3
 80124a4:	4318      	orrgt	r0, r3
 80124a6:	f7ee f845 	bl	8000534 <__aeabi_ui2d>
 80124aa:	2301      	movs	r3, #1
 80124ac:	4606      	mov	r6, r0
 80124ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80124b2:	3d01      	subs	r5, #1
 80124b4:	930e      	str	r3, [sp, #56]	; 0x38
 80124b6:	e76a      	b.n	801238e <_dtoa_r+0x116>
 80124b8:	2301      	movs	r3, #1
 80124ba:	e7b2      	b.n	8012422 <_dtoa_r+0x1aa>
 80124bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80124be:	e7b1      	b.n	8012424 <_dtoa_r+0x1ac>
 80124c0:	9b04      	ldr	r3, [sp, #16]
 80124c2:	9a00      	ldr	r2, [sp, #0]
 80124c4:	1a9b      	subs	r3, r3, r2
 80124c6:	9304      	str	r3, [sp, #16]
 80124c8:	4253      	negs	r3, r2
 80124ca:	9307      	str	r3, [sp, #28]
 80124cc:	2300      	movs	r3, #0
 80124ce:	930a      	str	r3, [sp, #40]	; 0x28
 80124d0:	e7bf      	b.n	8012452 <_dtoa_r+0x1da>
 80124d2:	2300      	movs	r3, #0
 80124d4:	9308      	str	r3, [sp, #32]
 80124d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124d8:	2b00      	cmp	r3, #0
 80124da:	dc55      	bgt.n	8012588 <_dtoa_r+0x310>
 80124dc:	2301      	movs	r3, #1
 80124de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80124e2:	461a      	mov	r2, r3
 80124e4:	9209      	str	r2, [sp, #36]	; 0x24
 80124e6:	e00c      	b.n	8012502 <_dtoa_r+0x28a>
 80124e8:	2301      	movs	r3, #1
 80124ea:	e7f3      	b.n	80124d4 <_dtoa_r+0x25c>
 80124ec:	2300      	movs	r3, #0
 80124ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80124f0:	9308      	str	r3, [sp, #32]
 80124f2:	9b00      	ldr	r3, [sp, #0]
 80124f4:	4413      	add	r3, r2
 80124f6:	9302      	str	r3, [sp, #8]
 80124f8:	3301      	adds	r3, #1
 80124fa:	2b01      	cmp	r3, #1
 80124fc:	9303      	str	r3, [sp, #12]
 80124fe:	bfb8      	it	lt
 8012500:	2301      	movlt	r3, #1
 8012502:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012504:	2200      	movs	r2, #0
 8012506:	6042      	str	r2, [r0, #4]
 8012508:	2204      	movs	r2, #4
 801250a:	f102 0614 	add.w	r6, r2, #20
 801250e:	429e      	cmp	r6, r3
 8012510:	6841      	ldr	r1, [r0, #4]
 8012512:	d93d      	bls.n	8012590 <_dtoa_r+0x318>
 8012514:	4620      	mov	r0, r4
 8012516:	f000 fdcb 	bl	80130b0 <_Balloc>
 801251a:	9001      	str	r0, [sp, #4]
 801251c:	2800      	cmp	r0, #0
 801251e:	d13b      	bne.n	8012598 <_dtoa_r+0x320>
 8012520:	4b11      	ldr	r3, [pc, #68]	; (8012568 <_dtoa_r+0x2f0>)
 8012522:	4602      	mov	r2, r0
 8012524:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012528:	e6c0      	b.n	80122ac <_dtoa_r+0x34>
 801252a:	2301      	movs	r3, #1
 801252c:	e7df      	b.n	80124ee <_dtoa_r+0x276>
 801252e:	bf00      	nop
 8012530:	636f4361 	.word	0x636f4361
 8012534:	3fd287a7 	.word	0x3fd287a7
 8012538:	8b60c8b3 	.word	0x8b60c8b3
 801253c:	3fc68a28 	.word	0x3fc68a28
 8012540:	509f79fb 	.word	0x509f79fb
 8012544:	3fd34413 	.word	0x3fd34413
 8012548:	08014426 	.word	0x08014426
 801254c:	0801443d 	.word	0x0801443d
 8012550:	7ff00000 	.word	0x7ff00000
 8012554:	08014422 	.word	0x08014422
 8012558:	08014419 	.word	0x08014419
 801255c:	080142b9 	.word	0x080142b9
 8012560:	3ff80000 	.word	0x3ff80000
 8012564:	080145a0 	.word	0x080145a0
 8012568:	08014498 	.word	0x08014498
 801256c:	2501      	movs	r5, #1
 801256e:	2300      	movs	r3, #0
 8012570:	9306      	str	r3, [sp, #24]
 8012572:	9508      	str	r5, [sp, #32]
 8012574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012578:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801257c:	2200      	movs	r2, #0
 801257e:	2312      	movs	r3, #18
 8012580:	e7b0      	b.n	80124e4 <_dtoa_r+0x26c>
 8012582:	2301      	movs	r3, #1
 8012584:	9308      	str	r3, [sp, #32]
 8012586:	e7f5      	b.n	8012574 <_dtoa_r+0x2fc>
 8012588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801258a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801258e:	e7b8      	b.n	8012502 <_dtoa_r+0x28a>
 8012590:	3101      	adds	r1, #1
 8012592:	6041      	str	r1, [r0, #4]
 8012594:	0052      	lsls	r2, r2, #1
 8012596:	e7b8      	b.n	801250a <_dtoa_r+0x292>
 8012598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801259a:	9a01      	ldr	r2, [sp, #4]
 801259c:	601a      	str	r2, [r3, #0]
 801259e:	9b03      	ldr	r3, [sp, #12]
 80125a0:	2b0e      	cmp	r3, #14
 80125a2:	f200 809d 	bhi.w	80126e0 <_dtoa_r+0x468>
 80125a6:	2d00      	cmp	r5, #0
 80125a8:	f000 809a 	beq.w	80126e0 <_dtoa_r+0x468>
 80125ac:	9b00      	ldr	r3, [sp, #0]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	dd32      	ble.n	8012618 <_dtoa_r+0x3a0>
 80125b2:	4ab7      	ldr	r2, [pc, #732]	; (8012890 <_dtoa_r+0x618>)
 80125b4:	f003 030f 	and.w	r3, r3, #15
 80125b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80125bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80125c0:	9b00      	ldr	r3, [sp, #0]
 80125c2:	05d8      	lsls	r0, r3, #23
 80125c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80125c8:	d516      	bpl.n	80125f8 <_dtoa_r+0x380>
 80125ca:	4bb2      	ldr	r3, [pc, #712]	; (8012894 <_dtoa_r+0x61c>)
 80125cc:	ec51 0b19 	vmov	r0, r1, d9
 80125d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80125d4:	f7ee f952 	bl	800087c <__aeabi_ddiv>
 80125d8:	f007 070f 	and.w	r7, r7, #15
 80125dc:	4682      	mov	sl, r0
 80125de:	468b      	mov	fp, r1
 80125e0:	2503      	movs	r5, #3
 80125e2:	4eac      	ldr	r6, [pc, #688]	; (8012894 <_dtoa_r+0x61c>)
 80125e4:	b957      	cbnz	r7, 80125fc <_dtoa_r+0x384>
 80125e6:	4642      	mov	r2, r8
 80125e8:	464b      	mov	r3, r9
 80125ea:	4650      	mov	r0, sl
 80125ec:	4659      	mov	r1, fp
 80125ee:	f7ee f945 	bl	800087c <__aeabi_ddiv>
 80125f2:	4682      	mov	sl, r0
 80125f4:	468b      	mov	fp, r1
 80125f6:	e028      	b.n	801264a <_dtoa_r+0x3d2>
 80125f8:	2502      	movs	r5, #2
 80125fa:	e7f2      	b.n	80125e2 <_dtoa_r+0x36a>
 80125fc:	07f9      	lsls	r1, r7, #31
 80125fe:	d508      	bpl.n	8012612 <_dtoa_r+0x39a>
 8012600:	4640      	mov	r0, r8
 8012602:	4649      	mov	r1, r9
 8012604:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012608:	f7ee f80e 	bl	8000628 <__aeabi_dmul>
 801260c:	3501      	adds	r5, #1
 801260e:	4680      	mov	r8, r0
 8012610:	4689      	mov	r9, r1
 8012612:	107f      	asrs	r7, r7, #1
 8012614:	3608      	adds	r6, #8
 8012616:	e7e5      	b.n	80125e4 <_dtoa_r+0x36c>
 8012618:	f000 809b 	beq.w	8012752 <_dtoa_r+0x4da>
 801261c:	9b00      	ldr	r3, [sp, #0]
 801261e:	4f9d      	ldr	r7, [pc, #628]	; (8012894 <_dtoa_r+0x61c>)
 8012620:	425e      	negs	r6, r3
 8012622:	4b9b      	ldr	r3, [pc, #620]	; (8012890 <_dtoa_r+0x618>)
 8012624:	f006 020f 	and.w	r2, r6, #15
 8012628:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012630:	ec51 0b19 	vmov	r0, r1, d9
 8012634:	f7ed fff8 	bl	8000628 <__aeabi_dmul>
 8012638:	1136      	asrs	r6, r6, #4
 801263a:	4682      	mov	sl, r0
 801263c:	468b      	mov	fp, r1
 801263e:	2300      	movs	r3, #0
 8012640:	2502      	movs	r5, #2
 8012642:	2e00      	cmp	r6, #0
 8012644:	d17a      	bne.n	801273c <_dtoa_r+0x4c4>
 8012646:	2b00      	cmp	r3, #0
 8012648:	d1d3      	bne.n	80125f2 <_dtoa_r+0x37a>
 801264a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801264c:	2b00      	cmp	r3, #0
 801264e:	f000 8082 	beq.w	8012756 <_dtoa_r+0x4de>
 8012652:	4b91      	ldr	r3, [pc, #580]	; (8012898 <_dtoa_r+0x620>)
 8012654:	2200      	movs	r2, #0
 8012656:	4650      	mov	r0, sl
 8012658:	4659      	mov	r1, fp
 801265a:	f7ee fa57 	bl	8000b0c <__aeabi_dcmplt>
 801265e:	2800      	cmp	r0, #0
 8012660:	d079      	beq.n	8012756 <_dtoa_r+0x4de>
 8012662:	9b03      	ldr	r3, [sp, #12]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d076      	beq.n	8012756 <_dtoa_r+0x4de>
 8012668:	9b02      	ldr	r3, [sp, #8]
 801266a:	2b00      	cmp	r3, #0
 801266c:	dd36      	ble.n	80126dc <_dtoa_r+0x464>
 801266e:	9b00      	ldr	r3, [sp, #0]
 8012670:	4650      	mov	r0, sl
 8012672:	4659      	mov	r1, fp
 8012674:	1e5f      	subs	r7, r3, #1
 8012676:	2200      	movs	r2, #0
 8012678:	4b88      	ldr	r3, [pc, #544]	; (801289c <_dtoa_r+0x624>)
 801267a:	f7ed ffd5 	bl	8000628 <__aeabi_dmul>
 801267e:	9e02      	ldr	r6, [sp, #8]
 8012680:	4682      	mov	sl, r0
 8012682:	468b      	mov	fp, r1
 8012684:	3501      	adds	r5, #1
 8012686:	4628      	mov	r0, r5
 8012688:	f7ed ff64 	bl	8000554 <__aeabi_i2d>
 801268c:	4652      	mov	r2, sl
 801268e:	465b      	mov	r3, fp
 8012690:	f7ed ffca 	bl	8000628 <__aeabi_dmul>
 8012694:	4b82      	ldr	r3, [pc, #520]	; (80128a0 <_dtoa_r+0x628>)
 8012696:	2200      	movs	r2, #0
 8012698:	f7ed fe10 	bl	80002bc <__adddf3>
 801269c:	46d0      	mov	r8, sl
 801269e:	46d9      	mov	r9, fp
 80126a0:	4682      	mov	sl, r0
 80126a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80126a6:	2e00      	cmp	r6, #0
 80126a8:	d158      	bne.n	801275c <_dtoa_r+0x4e4>
 80126aa:	4b7e      	ldr	r3, [pc, #504]	; (80128a4 <_dtoa_r+0x62c>)
 80126ac:	2200      	movs	r2, #0
 80126ae:	4640      	mov	r0, r8
 80126b0:	4649      	mov	r1, r9
 80126b2:	f7ed fe01 	bl	80002b8 <__aeabi_dsub>
 80126b6:	4652      	mov	r2, sl
 80126b8:	465b      	mov	r3, fp
 80126ba:	4680      	mov	r8, r0
 80126bc:	4689      	mov	r9, r1
 80126be:	f7ee fa43 	bl	8000b48 <__aeabi_dcmpgt>
 80126c2:	2800      	cmp	r0, #0
 80126c4:	f040 8295 	bne.w	8012bf2 <_dtoa_r+0x97a>
 80126c8:	4652      	mov	r2, sl
 80126ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80126ce:	4640      	mov	r0, r8
 80126d0:	4649      	mov	r1, r9
 80126d2:	f7ee fa1b 	bl	8000b0c <__aeabi_dcmplt>
 80126d6:	2800      	cmp	r0, #0
 80126d8:	f040 8289 	bne.w	8012bee <_dtoa_r+0x976>
 80126dc:	ec5b ab19 	vmov	sl, fp, d9
 80126e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	f2c0 8148 	blt.w	8012978 <_dtoa_r+0x700>
 80126e8:	9a00      	ldr	r2, [sp, #0]
 80126ea:	2a0e      	cmp	r2, #14
 80126ec:	f300 8144 	bgt.w	8012978 <_dtoa_r+0x700>
 80126f0:	4b67      	ldr	r3, [pc, #412]	; (8012890 <_dtoa_r+0x618>)
 80126f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80126f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80126fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	f280 80d5 	bge.w	80128ac <_dtoa_r+0x634>
 8012702:	9b03      	ldr	r3, [sp, #12]
 8012704:	2b00      	cmp	r3, #0
 8012706:	f300 80d1 	bgt.w	80128ac <_dtoa_r+0x634>
 801270a:	f040 826f 	bne.w	8012bec <_dtoa_r+0x974>
 801270e:	4b65      	ldr	r3, [pc, #404]	; (80128a4 <_dtoa_r+0x62c>)
 8012710:	2200      	movs	r2, #0
 8012712:	4640      	mov	r0, r8
 8012714:	4649      	mov	r1, r9
 8012716:	f7ed ff87 	bl	8000628 <__aeabi_dmul>
 801271a:	4652      	mov	r2, sl
 801271c:	465b      	mov	r3, fp
 801271e:	f7ee fa09 	bl	8000b34 <__aeabi_dcmpge>
 8012722:	9e03      	ldr	r6, [sp, #12]
 8012724:	4637      	mov	r7, r6
 8012726:	2800      	cmp	r0, #0
 8012728:	f040 8245 	bne.w	8012bb6 <_dtoa_r+0x93e>
 801272c:	9d01      	ldr	r5, [sp, #4]
 801272e:	2331      	movs	r3, #49	; 0x31
 8012730:	f805 3b01 	strb.w	r3, [r5], #1
 8012734:	9b00      	ldr	r3, [sp, #0]
 8012736:	3301      	adds	r3, #1
 8012738:	9300      	str	r3, [sp, #0]
 801273a:	e240      	b.n	8012bbe <_dtoa_r+0x946>
 801273c:	07f2      	lsls	r2, r6, #31
 801273e:	d505      	bpl.n	801274c <_dtoa_r+0x4d4>
 8012740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012744:	f7ed ff70 	bl	8000628 <__aeabi_dmul>
 8012748:	3501      	adds	r5, #1
 801274a:	2301      	movs	r3, #1
 801274c:	1076      	asrs	r6, r6, #1
 801274e:	3708      	adds	r7, #8
 8012750:	e777      	b.n	8012642 <_dtoa_r+0x3ca>
 8012752:	2502      	movs	r5, #2
 8012754:	e779      	b.n	801264a <_dtoa_r+0x3d2>
 8012756:	9f00      	ldr	r7, [sp, #0]
 8012758:	9e03      	ldr	r6, [sp, #12]
 801275a:	e794      	b.n	8012686 <_dtoa_r+0x40e>
 801275c:	9901      	ldr	r1, [sp, #4]
 801275e:	4b4c      	ldr	r3, [pc, #304]	; (8012890 <_dtoa_r+0x618>)
 8012760:	4431      	add	r1, r6
 8012762:	910d      	str	r1, [sp, #52]	; 0x34
 8012764:	9908      	ldr	r1, [sp, #32]
 8012766:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801276a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801276e:	2900      	cmp	r1, #0
 8012770:	d043      	beq.n	80127fa <_dtoa_r+0x582>
 8012772:	494d      	ldr	r1, [pc, #308]	; (80128a8 <_dtoa_r+0x630>)
 8012774:	2000      	movs	r0, #0
 8012776:	f7ee f881 	bl	800087c <__aeabi_ddiv>
 801277a:	4652      	mov	r2, sl
 801277c:	465b      	mov	r3, fp
 801277e:	f7ed fd9b 	bl	80002b8 <__aeabi_dsub>
 8012782:	9d01      	ldr	r5, [sp, #4]
 8012784:	4682      	mov	sl, r0
 8012786:	468b      	mov	fp, r1
 8012788:	4649      	mov	r1, r9
 801278a:	4640      	mov	r0, r8
 801278c:	f7ee f9fc 	bl	8000b88 <__aeabi_d2iz>
 8012790:	4606      	mov	r6, r0
 8012792:	f7ed fedf 	bl	8000554 <__aeabi_i2d>
 8012796:	4602      	mov	r2, r0
 8012798:	460b      	mov	r3, r1
 801279a:	4640      	mov	r0, r8
 801279c:	4649      	mov	r1, r9
 801279e:	f7ed fd8b 	bl	80002b8 <__aeabi_dsub>
 80127a2:	3630      	adds	r6, #48	; 0x30
 80127a4:	f805 6b01 	strb.w	r6, [r5], #1
 80127a8:	4652      	mov	r2, sl
 80127aa:	465b      	mov	r3, fp
 80127ac:	4680      	mov	r8, r0
 80127ae:	4689      	mov	r9, r1
 80127b0:	f7ee f9ac 	bl	8000b0c <__aeabi_dcmplt>
 80127b4:	2800      	cmp	r0, #0
 80127b6:	d163      	bne.n	8012880 <_dtoa_r+0x608>
 80127b8:	4642      	mov	r2, r8
 80127ba:	464b      	mov	r3, r9
 80127bc:	4936      	ldr	r1, [pc, #216]	; (8012898 <_dtoa_r+0x620>)
 80127be:	2000      	movs	r0, #0
 80127c0:	f7ed fd7a 	bl	80002b8 <__aeabi_dsub>
 80127c4:	4652      	mov	r2, sl
 80127c6:	465b      	mov	r3, fp
 80127c8:	f7ee f9a0 	bl	8000b0c <__aeabi_dcmplt>
 80127cc:	2800      	cmp	r0, #0
 80127ce:	f040 80b5 	bne.w	801293c <_dtoa_r+0x6c4>
 80127d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80127d4:	429d      	cmp	r5, r3
 80127d6:	d081      	beq.n	80126dc <_dtoa_r+0x464>
 80127d8:	4b30      	ldr	r3, [pc, #192]	; (801289c <_dtoa_r+0x624>)
 80127da:	2200      	movs	r2, #0
 80127dc:	4650      	mov	r0, sl
 80127de:	4659      	mov	r1, fp
 80127e0:	f7ed ff22 	bl	8000628 <__aeabi_dmul>
 80127e4:	4b2d      	ldr	r3, [pc, #180]	; (801289c <_dtoa_r+0x624>)
 80127e6:	4682      	mov	sl, r0
 80127e8:	468b      	mov	fp, r1
 80127ea:	4640      	mov	r0, r8
 80127ec:	4649      	mov	r1, r9
 80127ee:	2200      	movs	r2, #0
 80127f0:	f7ed ff1a 	bl	8000628 <__aeabi_dmul>
 80127f4:	4680      	mov	r8, r0
 80127f6:	4689      	mov	r9, r1
 80127f8:	e7c6      	b.n	8012788 <_dtoa_r+0x510>
 80127fa:	4650      	mov	r0, sl
 80127fc:	4659      	mov	r1, fp
 80127fe:	f7ed ff13 	bl	8000628 <__aeabi_dmul>
 8012802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012804:	9d01      	ldr	r5, [sp, #4]
 8012806:	930f      	str	r3, [sp, #60]	; 0x3c
 8012808:	4682      	mov	sl, r0
 801280a:	468b      	mov	fp, r1
 801280c:	4649      	mov	r1, r9
 801280e:	4640      	mov	r0, r8
 8012810:	f7ee f9ba 	bl	8000b88 <__aeabi_d2iz>
 8012814:	4606      	mov	r6, r0
 8012816:	f7ed fe9d 	bl	8000554 <__aeabi_i2d>
 801281a:	3630      	adds	r6, #48	; 0x30
 801281c:	4602      	mov	r2, r0
 801281e:	460b      	mov	r3, r1
 8012820:	4640      	mov	r0, r8
 8012822:	4649      	mov	r1, r9
 8012824:	f7ed fd48 	bl	80002b8 <__aeabi_dsub>
 8012828:	f805 6b01 	strb.w	r6, [r5], #1
 801282c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801282e:	429d      	cmp	r5, r3
 8012830:	4680      	mov	r8, r0
 8012832:	4689      	mov	r9, r1
 8012834:	f04f 0200 	mov.w	r2, #0
 8012838:	d124      	bne.n	8012884 <_dtoa_r+0x60c>
 801283a:	4b1b      	ldr	r3, [pc, #108]	; (80128a8 <_dtoa_r+0x630>)
 801283c:	4650      	mov	r0, sl
 801283e:	4659      	mov	r1, fp
 8012840:	f7ed fd3c 	bl	80002bc <__adddf3>
 8012844:	4602      	mov	r2, r0
 8012846:	460b      	mov	r3, r1
 8012848:	4640      	mov	r0, r8
 801284a:	4649      	mov	r1, r9
 801284c:	f7ee f97c 	bl	8000b48 <__aeabi_dcmpgt>
 8012850:	2800      	cmp	r0, #0
 8012852:	d173      	bne.n	801293c <_dtoa_r+0x6c4>
 8012854:	4652      	mov	r2, sl
 8012856:	465b      	mov	r3, fp
 8012858:	4913      	ldr	r1, [pc, #76]	; (80128a8 <_dtoa_r+0x630>)
 801285a:	2000      	movs	r0, #0
 801285c:	f7ed fd2c 	bl	80002b8 <__aeabi_dsub>
 8012860:	4602      	mov	r2, r0
 8012862:	460b      	mov	r3, r1
 8012864:	4640      	mov	r0, r8
 8012866:	4649      	mov	r1, r9
 8012868:	f7ee f950 	bl	8000b0c <__aeabi_dcmplt>
 801286c:	2800      	cmp	r0, #0
 801286e:	f43f af35 	beq.w	80126dc <_dtoa_r+0x464>
 8012872:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012874:	1e6b      	subs	r3, r5, #1
 8012876:	930f      	str	r3, [sp, #60]	; 0x3c
 8012878:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801287c:	2b30      	cmp	r3, #48	; 0x30
 801287e:	d0f8      	beq.n	8012872 <_dtoa_r+0x5fa>
 8012880:	9700      	str	r7, [sp, #0]
 8012882:	e049      	b.n	8012918 <_dtoa_r+0x6a0>
 8012884:	4b05      	ldr	r3, [pc, #20]	; (801289c <_dtoa_r+0x624>)
 8012886:	f7ed fecf 	bl	8000628 <__aeabi_dmul>
 801288a:	4680      	mov	r8, r0
 801288c:	4689      	mov	r9, r1
 801288e:	e7bd      	b.n	801280c <_dtoa_r+0x594>
 8012890:	080145a0 	.word	0x080145a0
 8012894:	08014578 	.word	0x08014578
 8012898:	3ff00000 	.word	0x3ff00000
 801289c:	40240000 	.word	0x40240000
 80128a0:	401c0000 	.word	0x401c0000
 80128a4:	40140000 	.word	0x40140000
 80128a8:	3fe00000 	.word	0x3fe00000
 80128ac:	9d01      	ldr	r5, [sp, #4]
 80128ae:	4656      	mov	r6, sl
 80128b0:	465f      	mov	r7, fp
 80128b2:	4642      	mov	r2, r8
 80128b4:	464b      	mov	r3, r9
 80128b6:	4630      	mov	r0, r6
 80128b8:	4639      	mov	r1, r7
 80128ba:	f7ed ffdf 	bl	800087c <__aeabi_ddiv>
 80128be:	f7ee f963 	bl	8000b88 <__aeabi_d2iz>
 80128c2:	4682      	mov	sl, r0
 80128c4:	f7ed fe46 	bl	8000554 <__aeabi_i2d>
 80128c8:	4642      	mov	r2, r8
 80128ca:	464b      	mov	r3, r9
 80128cc:	f7ed feac 	bl	8000628 <__aeabi_dmul>
 80128d0:	4602      	mov	r2, r0
 80128d2:	460b      	mov	r3, r1
 80128d4:	4630      	mov	r0, r6
 80128d6:	4639      	mov	r1, r7
 80128d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80128dc:	f7ed fcec 	bl	80002b8 <__aeabi_dsub>
 80128e0:	f805 6b01 	strb.w	r6, [r5], #1
 80128e4:	9e01      	ldr	r6, [sp, #4]
 80128e6:	9f03      	ldr	r7, [sp, #12]
 80128e8:	1bae      	subs	r6, r5, r6
 80128ea:	42b7      	cmp	r7, r6
 80128ec:	4602      	mov	r2, r0
 80128ee:	460b      	mov	r3, r1
 80128f0:	d135      	bne.n	801295e <_dtoa_r+0x6e6>
 80128f2:	f7ed fce3 	bl	80002bc <__adddf3>
 80128f6:	4642      	mov	r2, r8
 80128f8:	464b      	mov	r3, r9
 80128fa:	4606      	mov	r6, r0
 80128fc:	460f      	mov	r7, r1
 80128fe:	f7ee f923 	bl	8000b48 <__aeabi_dcmpgt>
 8012902:	b9d0      	cbnz	r0, 801293a <_dtoa_r+0x6c2>
 8012904:	4642      	mov	r2, r8
 8012906:	464b      	mov	r3, r9
 8012908:	4630      	mov	r0, r6
 801290a:	4639      	mov	r1, r7
 801290c:	f7ee f8f4 	bl	8000af8 <__aeabi_dcmpeq>
 8012910:	b110      	cbz	r0, 8012918 <_dtoa_r+0x6a0>
 8012912:	f01a 0f01 	tst.w	sl, #1
 8012916:	d110      	bne.n	801293a <_dtoa_r+0x6c2>
 8012918:	4620      	mov	r0, r4
 801291a:	ee18 1a10 	vmov	r1, s16
 801291e:	f000 fc07 	bl	8013130 <_Bfree>
 8012922:	2300      	movs	r3, #0
 8012924:	9800      	ldr	r0, [sp, #0]
 8012926:	702b      	strb	r3, [r5, #0]
 8012928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801292a:	3001      	adds	r0, #1
 801292c:	6018      	str	r0, [r3, #0]
 801292e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012930:	2b00      	cmp	r3, #0
 8012932:	f43f acf1 	beq.w	8012318 <_dtoa_r+0xa0>
 8012936:	601d      	str	r5, [r3, #0]
 8012938:	e4ee      	b.n	8012318 <_dtoa_r+0xa0>
 801293a:	9f00      	ldr	r7, [sp, #0]
 801293c:	462b      	mov	r3, r5
 801293e:	461d      	mov	r5, r3
 8012940:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012944:	2a39      	cmp	r2, #57	; 0x39
 8012946:	d106      	bne.n	8012956 <_dtoa_r+0x6de>
 8012948:	9a01      	ldr	r2, [sp, #4]
 801294a:	429a      	cmp	r2, r3
 801294c:	d1f7      	bne.n	801293e <_dtoa_r+0x6c6>
 801294e:	9901      	ldr	r1, [sp, #4]
 8012950:	2230      	movs	r2, #48	; 0x30
 8012952:	3701      	adds	r7, #1
 8012954:	700a      	strb	r2, [r1, #0]
 8012956:	781a      	ldrb	r2, [r3, #0]
 8012958:	3201      	adds	r2, #1
 801295a:	701a      	strb	r2, [r3, #0]
 801295c:	e790      	b.n	8012880 <_dtoa_r+0x608>
 801295e:	4ba6      	ldr	r3, [pc, #664]	; (8012bf8 <_dtoa_r+0x980>)
 8012960:	2200      	movs	r2, #0
 8012962:	f7ed fe61 	bl	8000628 <__aeabi_dmul>
 8012966:	2200      	movs	r2, #0
 8012968:	2300      	movs	r3, #0
 801296a:	4606      	mov	r6, r0
 801296c:	460f      	mov	r7, r1
 801296e:	f7ee f8c3 	bl	8000af8 <__aeabi_dcmpeq>
 8012972:	2800      	cmp	r0, #0
 8012974:	d09d      	beq.n	80128b2 <_dtoa_r+0x63a>
 8012976:	e7cf      	b.n	8012918 <_dtoa_r+0x6a0>
 8012978:	9a08      	ldr	r2, [sp, #32]
 801297a:	2a00      	cmp	r2, #0
 801297c:	f000 80d7 	beq.w	8012b2e <_dtoa_r+0x8b6>
 8012980:	9a06      	ldr	r2, [sp, #24]
 8012982:	2a01      	cmp	r2, #1
 8012984:	f300 80ba 	bgt.w	8012afc <_dtoa_r+0x884>
 8012988:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801298a:	2a00      	cmp	r2, #0
 801298c:	f000 80b2 	beq.w	8012af4 <_dtoa_r+0x87c>
 8012990:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012994:	9e07      	ldr	r6, [sp, #28]
 8012996:	9d04      	ldr	r5, [sp, #16]
 8012998:	9a04      	ldr	r2, [sp, #16]
 801299a:	441a      	add	r2, r3
 801299c:	9204      	str	r2, [sp, #16]
 801299e:	9a05      	ldr	r2, [sp, #20]
 80129a0:	2101      	movs	r1, #1
 80129a2:	441a      	add	r2, r3
 80129a4:	4620      	mov	r0, r4
 80129a6:	9205      	str	r2, [sp, #20]
 80129a8:	f000 fc7a 	bl	80132a0 <__i2b>
 80129ac:	4607      	mov	r7, r0
 80129ae:	2d00      	cmp	r5, #0
 80129b0:	dd0c      	ble.n	80129cc <_dtoa_r+0x754>
 80129b2:	9b05      	ldr	r3, [sp, #20]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	dd09      	ble.n	80129cc <_dtoa_r+0x754>
 80129b8:	42ab      	cmp	r3, r5
 80129ba:	9a04      	ldr	r2, [sp, #16]
 80129bc:	bfa8      	it	ge
 80129be:	462b      	movge	r3, r5
 80129c0:	1ad2      	subs	r2, r2, r3
 80129c2:	9204      	str	r2, [sp, #16]
 80129c4:	9a05      	ldr	r2, [sp, #20]
 80129c6:	1aed      	subs	r5, r5, r3
 80129c8:	1ad3      	subs	r3, r2, r3
 80129ca:	9305      	str	r3, [sp, #20]
 80129cc:	9b07      	ldr	r3, [sp, #28]
 80129ce:	b31b      	cbz	r3, 8012a18 <_dtoa_r+0x7a0>
 80129d0:	9b08      	ldr	r3, [sp, #32]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	f000 80af 	beq.w	8012b36 <_dtoa_r+0x8be>
 80129d8:	2e00      	cmp	r6, #0
 80129da:	dd13      	ble.n	8012a04 <_dtoa_r+0x78c>
 80129dc:	4639      	mov	r1, r7
 80129de:	4632      	mov	r2, r6
 80129e0:	4620      	mov	r0, r4
 80129e2:	f000 fd1d 	bl	8013420 <__pow5mult>
 80129e6:	ee18 2a10 	vmov	r2, s16
 80129ea:	4601      	mov	r1, r0
 80129ec:	4607      	mov	r7, r0
 80129ee:	4620      	mov	r0, r4
 80129f0:	f000 fc6c 	bl	80132cc <__multiply>
 80129f4:	ee18 1a10 	vmov	r1, s16
 80129f8:	4680      	mov	r8, r0
 80129fa:	4620      	mov	r0, r4
 80129fc:	f000 fb98 	bl	8013130 <_Bfree>
 8012a00:	ee08 8a10 	vmov	s16, r8
 8012a04:	9b07      	ldr	r3, [sp, #28]
 8012a06:	1b9a      	subs	r2, r3, r6
 8012a08:	d006      	beq.n	8012a18 <_dtoa_r+0x7a0>
 8012a0a:	ee18 1a10 	vmov	r1, s16
 8012a0e:	4620      	mov	r0, r4
 8012a10:	f000 fd06 	bl	8013420 <__pow5mult>
 8012a14:	ee08 0a10 	vmov	s16, r0
 8012a18:	2101      	movs	r1, #1
 8012a1a:	4620      	mov	r0, r4
 8012a1c:	f000 fc40 	bl	80132a0 <__i2b>
 8012a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	4606      	mov	r6, r0
 8012a26:	f340 8088 	ble.w	8012b3a <_dtoa_r+0x8c2>
 8012a2a:	461a      	mov	r2, r3
 8012a2c:	4601      	mov	r1, r0
 8012a2e:	4620      	mov	r0, r4
 8012a30:	f000 fcf6 	bl	8013420 <__pow5mult>
 8012a34:	9b06      	ldr	r3, [sp, #24]
 8012a36:	2b01      	cmp	r3, #1
 8012a38:	4606      	mov	r6, r0
 8012a3a:	f340 8081 	ble.w	8012b40 <_dtoa_r+0x8c8>
 8012a3e:	f04f 0800 	mov.w	r8, #0
 8012a42:	6933      	ldr	r3, [r6, #16]
 8012a44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012a48:	6918      	ldr	r0, [r3, #16]
 8012a4a:	f000 fbd9 	bl	8013200 <__hi0bits>
 8012a4e:	f1c0 0020 	rsb	r0, r0, #32
 8012a52:	9b05      	ldr	r3, [sp, #20]
 8012a54:	4418      	add	r0, r3
 8012a56:	f010 001f 	ands.w	r0, r0, #31
 8012a5a:	f000 8092 	beq.w	8012b82 <_dtoa_r+0x90a>
 8012a5e:	f1c0 0320 	rsb	r3, r0, #32
 8012a62:	2b04      	cmp	r3, #4
 8012a64:	f340 808a 	ble.w	8012b7c <_dtoa_r+0x904>
 8012a68:	f1c0 001c 	rsb	r0, r0, #28
 8012a6c:	9b04      	ldr	r3, [sp, #16]
 8012a6e:	4403      	add	r3, r0
 8012a70:	9304      	str	r3, [sp, #16]
 8012a72:	9b05      	ldr	r3, [sp, #20]
 8012a74:	4403      	add	r3, r0
 8012a76:	4405      	add	r5, r0
 8012a78:	9305      	str	r3, [sp, #20]
 8012a7a:	9b04      	ldr	r3, [sp, #16]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	dd07      	ble.n	8012a90 <_dtoa_r+0x818>
 8012a80:	ee18 1a10 	vmov	r1, s16
 8012a84:	461a      	mov	r2, r3
 8012a86:	4620      	mov	r0, r4
 8012a88:	f000 fd24 	bl	80134d4 <__lshift>
 8012a8c:	ee08 0a10 	vmov	s16, r0
 8012a90:	9b05      	ldr	r3, [sp, #20]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	dd05      	ble.n	8012aa2 <_dtoa_r+0x82a>
 8012a96:	4631      	mov	r1, r6
 8012a98:	461a      	mov	r2, r3
 8012a9a:	4620      	mov	r0, r4
 8012a9c:	f000 fd1a 	bl	80134d4 <__lshift>
 8012aa0:	4606      	mov	r6, r0
 8012aa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d06e      	beq.n	8012b86 <_dtoa_r+0x90e>
 8012aa8:	ee18 0a10 	vmov	r0, s16
 8012aac:	4631      	mov	r1, r6
 8012aae:	f000 fd81 	bl	80135b4 <__mcmp>
 8012ab2:	2800      	cmp	r0, #0
 8012ab4:	da67      	bge.n	8012b86 <_dtoa_r+0x90e>
 8012ab6:	9b00      	ldr	r3, [sp, #0]
 8012ab8:	3b01      	subs	r3, #1
 8012aba:	ee18 1a10 	vmov	r1, s16
 8012abe:	9300      	str	r3, [sp, #0]
 8012ac0:	220a      	movs	r2, #10
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	4620      	mov	r0, r4
 8012ac6:	f000 fb55 	bl	8013174 <__multadd>
 8012aca:	9b08      	ldr	r3, [sp, #32]
 8012acc:	ee08 0a10 	vmov	s16, r0
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	f000 81b1 	beq.w	8012e38 <_dtoa_r+0xbc0>
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	4639      	mov	r1, r7
 8012ada:	220a      	movs	r2, #10
 8012adc:	4620      	mov	r0, r4
 8012ade:	f000 fb49 	bl	8013174 <__multadd>
 8012ae2:	9b02      	ldr	r3, [sp, #8]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	4607      	mov	r7, r0
 8012ae8:	f300 808e 	bgt.w	8012c08 <_dtoa_r+0x990>
 8012aec:	9b06      	ldr	r3, [sp, #24]
 8012aee:	2b02      	cmp	r3, #2
 8012af0:	dc51      	bgt.n	8012b96 <_dtoa_r+0x91e>
 8012af2:	e089      	b.n	8012c08 <_dtoa_r+0x990>
 8012af4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012af6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012afa:	e74b      	b.n	8012994 <_dtoa_r+0x71c>
 8012afc:	9b03      	ldr	r3, [sp, #12]
 8012afe:	1e5e      	subs	r6, r3, #1
 8012b00:	9b07      	ldr	r3, [sp, #28]
 8012b02:	42b3      	cmp	r3, r6
 8012b04:	bfbf      	itttt	lt
 8012b06:	9b07      	ldrlt	r3, [sp, #28]
 8012b08:	9607      	strlt	r6, [sp, #28]
 8012b0a:	1af2      	sublt	r2, r6, r3
 8012b0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012b0e:	bfb6      	itet	lt
 8012b10:	189b      	addlt	r3, r3, r2
 8012b12:	1b9e      	subge	r6, r3, r6
 8012b14:	930a      	strlt	r3, [sp, #40]	; 0x28
 8012b16:	9b03      	ldr	r3, [sp, #12]
 8012b18:	bfb8      	it	lt
 8012b1a:	2600      	movlt	r6, #0
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	bfb7      	itett	lt
 8012b20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8012b24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8012b28:	1a9d      	sublt	r5, r3, r2
 8012b2a:	2300      	movlt	r3, #0
 8012b2c:	e734      	b.n	8012998 <_dtoa_r+0x720>
 8012b2e:	9e07      	ldr	r6, [sp, #28]
 8012b30:	9d04      	ldr	r5, [sp, #16]
 8012b32:	9f08      	ldr	r7, [sp, #32]
 8012b34:	e73b      	b.n	80129ae <_dtoa_r+0x736>
 8012b36:	9a07      	ldr	r2, [sp, #28]
 8012b38:	e767      	b.n	8012a0a <_dtoa_r+0x792>
 8012b3a:	9b06      	ldr	r3, [sp, #24]
 8012b3c:	2b01      	cmp	r3, #1
 8012b3e:	dc18      	bgt.n	8012b72 <_dtoa_r+0x8fa>
 8012b40:	f1ba 0f00 	cmp.w	sl, #0
 8012b44:	d115      	bne.n	8012b72 <_dtoa_r+0x8fa>
 8012b46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012b4a:	b993      	cbnz	r3, 8012b72 <_dtoa_r+0x8fa>
 8012b4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012b50:	0d1b      	lsrs	r3, r3, #20
 8012b52:	051b      	lsls	r3, r3, #20
 8012b54:	b183      	cbz	r3, 8012b78 <_dtoa_r+0x900>
 8012b56:	9b04      	ldr	r3, [sp, #16]
 8012b58:	3301      	adds	r3, #1
 8012b5a:	9304      	str	r3, [sp, #16]
 8012b5c:	9b05      	ldr	r3, [sp, #20]
 8012b5e:	3301      	adds	r3, #1
 8012b60:	9305      	str	r3, [sp, #20]
 8012b62:	f04f 0801 	mov.w	r8, #1
 8012b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	f47f af6a 	bne.w	8012a42 <_dtoa_r+0x7ca>
 8012b6e:	2001      	movs	r0, #1
 8012b70:	e76f      	b.n	8012a52 <_dtoa_r+0x7da>
 8012b72:	f04f 0800 	mov.w	r8, #0
 8012b76:	e7f6      	b.n	8012b66 <_dtoa_r+0x8ee>
 8012b78:	4698      	mov	r8, r3
 8012b7a:	e7f4      	b.n	8012b66 <_dtoa_r+0x8ee>
 8012b7c:	f43f af7d 	beq.w	8012a7a <_dtoa_r+0x802>
 8012b80:	4618      	mov	r0, r3
 8012b82:	301c      	adds	r0, #28
 8012b84:	e772      	b.n	8012a6c <_dtoa_r+0x7f4>
 8012b86:	9b03      	ldr	r3, [sp, #12]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	dc37      	bgt.n	8012bfc <_dtoa_r+0x984>
 8012b8c:	9b06      	ldr	r3, [sp, #24]
 8012b8e:	2b02      	cmp	r3, #2
 8012b90:	dd34      	ble.n	8012bfc <_dtoa_r+0x984>
 8012b92:	9b03      	ldr	r3, [sp, #12]
 8012b94:	9302      	str	r3, [sp, #8]
 8012b96:	9b02      	ldr	r3, [sp, #8]
 8012b98:	b96b      	cbnz	r3, 8012bb6 <_dtoa_r+0x93e>
 8012b9a:	4631      	mov	r1, r6
 8012b9c:	2205      	movs	r2, #5
 8012b9e:	4620      	mov	r0, r4
 8012ba0:	f000 fae8 	bl	8013174 <__multadd>
 8012ba4:	4601      	mov	r1, r0
 8012ba6:	4606      	mov	r6, r0
 8012ba8:	ee18 0a10 	vmov	r0, s16
 8012bac:	f000 fd02 	bl	80135b4 <__mcmp>
 8012bb0:	2800      	cmp	r0, #0
 8012bb2:	f73f adbb 	bgt.w	801272c <_dtoa_r+0x4b4>
 8012bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bb8:	9d01      	ldr	r5, [sp, #4]
 8012bba:	43db      	mvns	r3, r3
 8012bbc:	9300      	str	r3, [sp, #0]
 8012bbe:	f04f 0800 	mov.w	r8, #0
 8012bc2:	4631      	mov	r1, r6
 8012bc4:	4620      	mov	r0, r4
 8012bc6:	f000 fab3 	bl	8013130 <_Bfree>
 8012bca:	2f00      	cmp	r7, #0
 8012bcc:	f43f aea4 	beq.w	8012918 <_dtoa_r+0x6a0>
 8012bd0:	f1b8 0f00 	cmp.w	r8, #0
 8012bd4:	d005      	beq.n	8012be2 <_dtoa_r+0x96a>
 8012bd6:	45b8      	cmp	r8, r7
 8012bd8:	d003      	beq.n	8012be2 <_dtoa_r+0x96a>
 8012bda:	4641      	mov	r1, r8
 8012bdc:	4620      	mov	r0, r4
 8012bde:	f000 faa7 	bl	8013130 <_Bfree>
 8012be2:	4639      	mov	r1, r7
 8012be4:	4620      	mov	r0, r4
 8012be6:	f000 faa3 	bl	8013130 <_Bfree>
 8012bea:	e695      	b.n	8012918 <_dtoa_r+0x6a0>
 8012bec:	2600      	movs	r6, #0
 8012bee:	4637      	mov	r7, r6
 8012bf0:	e7e1      	b.n	8012bb6 <_dtoa_r+0x93e>
 8012bf2:	9700      	str	r7, [sp, #0]
 8012bf4:	4637      	mov	r7, r6
 8012bf6:	e599      	b.n	801272c <_dtoa_r+0x4b4>
 8012bf8:	40240000 	.word	0x40240000
 8012bfc:	9b08      	ldr	r3, [sp, #32]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	f000 80ca 	beq.w	8012d98 <_dtoa_r+0xb20>
 8012c04:	9b03      	ldr	r3, [sp, #12]
 8012c06:	9302      	str	r3, [sp, #8]
 8012c08:	2d00      	cmp	r5, #0
 8012c0a:	dd05      	ble.n	8012c18 <_dtoa_r+0x9a0>
 8012c0c:	4639      	mov	r1, r7
 8012c0e:	462a      	mov	r2, r5
 8012c10:	4620      	mov	r0, r4
 8012c12:	f000 fc5f 	bl	80134d4 <__lshift>
 8012c16:	4607      	mov	r7, r0
 8012c18:	f1b8 0f00 	cmp.w	r8, #0
 8012c1c:	d05b      	beq.n	8012cd6 <_dtoa_r+0xa5e>
 8012c1e:	6879      	ldr	r1, [r7, #4]
 8012c20:	4620      	mov	r0, r4
 8012c22:	f000 fa45 	bl	80130b0 <_Balloc>
 8012c26:	4605      	mov	r5, r0
 8012c28:	b928      	cbnz	r0, 8012c36 <_dtoa_r+0x9be>
 8012c2a:	4b87      	ldr	r3, [pc, #540]	; (8012e48 <_dtoa_r+0xbd0>)
 8012c2c:	4602      	mov	r2, r0
 8012c2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012c32:	f7ff bb3b 	b.w	80122ac <_dtoa_r+0x34>
 8012c36:	693a      	ldr	r2, [r7, #16]
 8012c38:	3202      	adds	r2, #2
 8012c3a:	0092      	lsls	r2, r2, #2
 8012c3c:	f107 010c 	add.w	r1, r7, #12
 8012c40:	300c      	adds	r0, #12
 8012c42:	f7fe fce5 	bl	8011610 <memcpy>
 8012c46:	2201      	movs	r2, #1
 8012c48:	4629      	mov	r1, r5
 8012c4a:	4620      	mov	r0, r4
 8012c4c:	f000 fc42 	bl	80134d4 <__lshift>
 8012c50:	9b01      	ldr	r3, [sp, #4]
 8012c52:	f103 0901 	add.w	r9, r3, #1
 8012c56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8012c5a:	4413      	add	r3, r2
 8012c5c:	9305      	str	r3, [sp, #20]
 8012c5e:	f00a 0301 	and.w	r3, sl, #1
 8012c62:	46b8      	mov	r8, r7
 8012c64:	9304      	str	r3, [sp, #16]
 8012c66:	4607      	mov	r7, r0
 8012c68:	4631      	mov	r1, r6
 8012c6a:	ee18 0a10 	vmov	r0, s16
 8012c6e:	f7ff fa75 	bl	801215c <quorem>
 8012c72:	4641      	mov	r1, r8
 8012c74:	9002      	str	r0, [sp, #8]
 8012c76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012c7a:	ee18 0a10 	vmov	r0, s16
 8012c7e:	f000 fc99 	bl	80135b4 <__mcmp>
 8012c82:	463a      	mov	r2, r7
 8012c84:	9003      	str	r0, [sp, #12]
 8012c86:	4631      	mov	r1, r6
 8012c88:	4620      	mov	r0, r4
 8012c8a:	f000 fcaf 	bl	80135ec <__mdiff>
 8012c8e:	68c2      	ldr	r2, [r0, #12]
 8012c90:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8012c94:	4605      	mov	r5, r0
 8012c96:	bb02      	cbnz	r2, 8012cda <_dtoa_r+0xa62>
 8012c98:	4601      	mov	r1, r0
 8012c9a:	ee18 0a10 	vmov	r0, s16
 8012c9e:	f000 fc89 	bl	80135b4 <__mcmp>
 8012ca2:	4602      	mov	r2, r0
 8012ca4:	4629      	mov	r1, r5
 8012ca6:	4620      	mov	r0, r4
 8012ca8:	9207      	str	r2, [sp, #28]
 8012caa:	f000 fa41 	bl	8013130 <_Bfree>
 8012cae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8012cb2:	ea43 0102 	orr.w	r1, r3, r2
 8012cb6:	9b04      	ldr	r3, [sp, #16]
 8012cb8:	430b      	orrs	r3, r1
 8012cba:	464d      	mov	r5, r9
 8012cbc:	d10f      	bne.n	8012cde <_dtoa_r+0xa66>
 8012cbe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012cc2:	d02a      	beq.n	8012d1a <_dtoa_r+0xaa2>
 8012cc4:	9b03      	ldr	r3, [sp, #12]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	dd02      	ble.n	8012cd0 <_dtoa_r+0xa58>
 8012cca:	9b02      	ldr	r3, [sp, #8]
 8012ccc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8012cd0:	f88b a000 	strb.w	sl, [fp]
 8012cd4:	e775      	b.n	8012bc2 <_dtoa_r+0x94a>
 8012cd6:	4638      	mov	r0, r7
 8012cd8:	e7ba      	b.n	8012c50 <_dtoa_r+0x9d8>
 8012cda:	2201      	movs	r2, #1
 8012cdc:	e7e2      	b.n	8012ca4 <_dtoa_r+0xa2c>
 8012cde:	9b03      	ldr	r3, [sp, #12]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	db04      	blt.n	8012cee <_dtoa_r+0xa76>
 8012ce4:	9906      	ldr	r1, [sp, #24]
 8012ce6:	430b      	orrs	r3, r1
 8012ce8:	9904      	ldr	r1, [sp, #16]
 8012cea:	430b      	orrs	r3, r1
 8012cec:	d122      	bne.n	8012d34 <_dtoa_r+0xabc>
 8012cee:	2a00      	cmp	r2, #0
 8012cf0:	ddee      	ble.n	8012cd0 <_dtoa_r+0xa58>
 8012cf2:	ee18 1a10 	vmov	r1, s16
 8012cf6:	2201      	movs	r2, #1
 8012cf8:	4620      	mov	r0, r4
 8012cfa:	f000 fbeb 	bl	80134d4 <__lshift>
 8012cfe:	4631      	mov	r1, r6
 8012d00:	ee08 0a10 	vmov	s16, r0
 8012d04:	f000 fc56 	bl	80135b4 <__mcmp>
 8012d08:	2800      	cmp	r0, #0
 8012d0a:	dc03      	bgt.n	8012d14 <_dtoa_r+0xa9c>
 8012d0c:	d1e0      	bne.n	8012cd0 <_dtoa_r+0xa58>
 8012d0e:	f01a 0f01 	tst.w	sl, #1
 8012d12:	d0dd      	beq.n	8012cd0 <_dtoa_r+0xa58>
 8012d14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012d18:	d1d7      	bne.n	8012cca <_dtoa_r+0xa52>
 8012d1a:	2339      	movs	r3, #57	; 0x39
 8012d1c:	f88b 3000 	strb.w	r3, [fp]
 8012d20:	462b      	mov	r3, r5
 8012d22:	461d      	mov	r5, r3
 8012d24:	3b01      	subs	r3, #1
 8012d26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012d2a:	2a39      	cmp	r2, #57	; 0x39
 8012d2c:	d071      	beq.n	8012e12 <_dtoa_r+0xb9a>
 8012d2e:	3201      	adds	r2, #1
 8012d30:	701a      	strb	r2, [r3, #0]
 8012d32:	e746      	b.n	8012bc2 <_dtoa_r+0x94a>
 8012d34:	2a00      	cmp	r2, #0
 8012d36:	dd07      	ble.n	8012d48 <_dtoa_r+0xad0>
 8012d38:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012d3c:	d0ed      	beq.n	8012d1a <_dtoa_r+0xaa2>
 8012d3e:	f10a 0301 	add.w	r3, sl, #1
 8012d42:	f88b 3000 	strb.w	r3, [fp]
 8012d46:	e73c      	b.n	8012bc2 <_dtoa_r+0x94a>
 8012d48:	9b05      	ldr	r3, [sp, #20]
 8012d4a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8012d4e:	4599      	cmp	r9, r3
 8012d50:	d047      	beq.n	8012de2 <_dtoa_r+0xb6a>
 8012d52:	ee18 1a10 	vmov	r1, s16
 8012d56:	2300      	movs	r3, #0
 8012d58:	220a      	movs	r2, #10
 8012d5a:	4620      	mov	r0, r4
 8012d5c:	f000 fa0a 	bl	8013174 <__multadd>
 8012d60:	45b8      	cmp	r8, r7
 8012d62:	ee08 0a10 	vmov	s16, r0
 8012d66:	f04f 0300 	mov.w	r3, #0
 8012d6a:	f04f 020a 	mov.w	r2, #10
 8012d6e:	4641      	mov	r1, r8
 8012d70:	4620      	mov	r0, r4
 8012d72:	d106      	bne.n	8012d82 <_dtoa_r+0xb0a>
 8012d74:	f000 f9fe 	bl	8013174 <__multadd>
 8012d78:	4680      	mov	r8, r0
 8012d7a:	4607      	mov	r7, r0
 8012d7c:	f109 0901 	add.w	r9, r9, #1
 8012d80:	e772      	b.n	8012c68 <_dtoa_r+0x9f0>
 8012d82:	f000 f9f7 	bl	8013174 <__multadd>
 8012d86:	4639      	mov	r1, r7
 8012d88:	4680      	mov	r8, r0
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	220a      	movs	r2, #10
 8012d8e:	4620      	mov	r0, r4
 8012d90:	f000 f9f0 	bl	8013174 <__multadd>
 8012d94:	4607      	mov	r7, r0
 8012d96:	e7f1      	b.n	8012d7c <_dtoa_r+0xb04>
 8012d98:	9b03      	ldr	r3, [sp, #12]
 8012d9a:	9302      	str	r3, [sp, #8]
 8012d9c:	9d01      	ldr	r5, [sp, #4]
 8012d9e:	ee18 0a10 	vmov	r0, s16
 8012da2:	4631      	mov	r1, r6
 8012da4:	f7ff f9da 	bl	801215c <quorem>
 8012da8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012dac:	9b01      	ldr	r3, [sp, #4]
 8012dae:	f805 ab01 	strb.w	sl, [r5], #1
 8012db2:	1aea      	subs	r2, r5, r3
 8012db4:	9b02      	ldr	r3, [sp, #8]
 8012db6:	4293      	cmp	r3, r2
 8012db8:	dd09      	ble.n	8012dce <_dtoa_r+0xb56>
 8012dba:	ee18 1a10 	vmov	r1, s16
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	220a      	movs	r2, #10
 8012dc2:	4620      	mov	r0, r4
 8012dc4:	f000 f9d6 	bl	8013174 <__multadd>
 8012dc8:	ee08 0a10 	vmov	s16, r0
 8012dcc:	e7e7      	b.n	8012d9e <_dtoa_r+0xb26>
 8012dce:	9b02      	ldr	r3, [sp, #8]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	bfc8      	it	gt
 8012dd4:	461d      	movgt	r5, r3
 8012dd6:	9b01      	ldr	r3, [sp, #4]
 8012dd8:	bfd8      	it	le
 8012dda:	2501      	movle	r5, #1
 8012ddc:	441d      	add	r5, r3
 8012dde:	f04f 0800 	mov.w	r8, #0
 8012de2:	ee18 1a10 	vmov	r1, s16
 8012de6:	2201      	movs	r2, #1
 8012de8:	4620      	mov	r0, r4
 8012dea:	f000 fb73 	bl	80134d4 <__lshift>
 8012dee:	4631      	mov	r1, r6
 8012df0:	ee08 0a10 	vmov	s16, r0
 8012df4:	f000 fbde 	bl	80135b4 <__mcmp>
 8012df8:	2800      	cmp	r0, #0
 8012dfa:	dc91      	bgt.n	8012d20 <_dtoa_r+0xaa8>
 8012dfc:	d102      	bne.n	8012e04 <_dtoa_r+0xb8c>
 8012dfe:	f01a 0f01 	tst.w	sl, #1
 8012e02:	d18d      	bne.n	8012d20 <_dtoa_r+0xaa8>
 8012e04:	462b      	mov	r3, r5
 8012e06:	461d      	mov	r5, r3
 8012e08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012e0c:	2a30      	cmp	r2, #48	; 0x30
 8012e0e:	d0fa      	beq.n	8012e06 <_dtoa_r+0xb8e>
 8012e10:	e6d7      	b.n	8012bc2 <_dtoa_r+0x94a>
 8012e12:	9a01      	ldr	r2, [sp, #4]
 8012e14:	429a      	cmp	r2, r3
 8012e16:	d184      	bne.n	8012d22 <_dtoa_r+0xaaa>
 8012e18:	9b00      	ldr	r3, [sp, #0]
 8012e1a:	3301      	adds	r3, #1
 8012e1c:	9300      	str	r3, [sp, #0]
 8012e1e:	2331      	movs	r3, #49	; 0x31
 8012e20:	7013      	strb	r3, [r2, #0]
 8012e22:	e6ce      	b.n	8012bc2 <_dtoa_r+0x94a>
 8012e24:	4b09      	ldr	r3, [pc, #36]	; (8012e4c <_dtoa_r+0xbd4>)
 8012e26:	f7ff ba95 	b.w	8012354 <_dtoa_r+0xdc>
 8012e2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	f47f aa6e 	bne.w	801230e <_dtoa_r+0x96>
 8012e32:	4b07      	ldr	r3, [pc, #28]	; (8012e50 <_dtoa_r+0xbd8>)
 8012e34:	f7ff ba8e 	b.w	8012354 <_dtoa_r+0xdc>
 8012e38:	9b02      	ldr	r3, [sp, #8]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	dcae      	bgt.n	8012d9c <_dtoa_r+0xb24>
 8012e3e:	9b06      	ldr	r3, [sp, #24]
 8012e40:	2b02      	cmp	r3, #2
 8012e42:	f73f aea8 	bgt.w	8012b96 <_dtoa_r+0x91e>
 8012e46:	e7a9      	b.n	8012d9c <_dtoa_r+0xb24>
 8012e48:	08014498 	.word	0x08014498
 8012e4c:	080142b8 	.word	0x080142b8
 8012e50:	08014419 	.word	0x08014419

08012e54 <std>:
 8012e54:	2300      	movs	r3, #0
 8012e56:	b510      	push	{r4, lr}
 8012e58:	4604      	mov	r4, r0
 8012e5a:	e9c0 3300 	strd	r3, r3, [r0]
 8012e5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012e62:	6083      	str	r3, [r0, #8]
 8012e64:	8181      	strh	r1, [r0, #12]
 8012e66:	6643      	str	r3, [r0, #100]	; 0x64
 8012e68:	81c2      	strh	r2, [r0, #14]
 8012e6a:	6183      	str	r3, [r0, #24]
 8012e6c:	4619      	mov	r1, r3
 8012e6e:	2208      	movs	r2, #8
 8012e70:	305c      	adds	r0, #92	; 0x5c
 8012e72:	f7fe fbdb 	bl	801162c <memset>
 8012e76:	4b05      	ldr	r3, [pc, #20]	; (8012e8c <std+0x38>)
 8012e78:	6263      	str	r3, [r4, #36]	; 0x24
 8012e7a:	4b05      	ldr	r3, [pc, #20]	; (8012e90 <std+0x3c>)
 8012e7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8012e7e:	4b05      	ldr	r3, [pc, #20]	; (8012e94 <std+0x40>)
 8012e80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012e82:	4b05      	ldr	r3, [pc, #20]	; (8012e98 <std+0x44>)
 8012e84:	6224      	str	r4, [r4, #32]
 8012e86:	6323      	str	r3, [r4, #48]	; 0x30
 8012e88:	bd10      	pop	{r4, pc}
 8012e8a:	bf00      	nop
 8012e8c:	08013a99 	.word	0x08013a99
 8012e90:	08013abb 	.word	0x08013abb
 8012e94:	08013af3 	.word	0x08013af3
 8012e98:	08013b17 	.word	0x08013b17

08012e9c <_cleanup_r>:
 8012e9c:	4901      	ldr	r1, [pc, #4]	; (8012ea4 <_cleanup_r+0x8>)
 8012e9e:	f000 b8c1 	b.w	8013024 <_fwalk_reent>
 8012ea2:	bf00      	nop
 8012ea4:	08013e1d 	.word	0x08013e1d

08012ea8 <__sfmoreglue>:
 8012ea8:	b570      	push	{r4, r5, r6, lr}
 8012eaa:	2268      	movs	r2, #104	; 0x68
 8012eac:	1e4d      	subs	r5, r1, #1
 8012eae:	4355      	muls	r5, r2
 8012eb0:	460e      	mov	r6, r1
 8012eb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012eb6:	f7fe fc2d 	bl	8011714 <_malloc_r>
 8012eba:	4604      	mov	r4, r0
 8012ebc:	b140      	cbz	r0, 8012ed0 <__sfmoreglue+0x28>
 8012ebe:	2100      	movs	r1, #0
 8012ec0:	e9c0 1600 	strd	r1, r6, [r0]
 8012ec4:	300c      	adds	r0, #12
 8012ec6:	60a0      	str	r0, [r4, #8]
 8012ec8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012ecc:	f7fe fbae 	bl	801162c <memset>
 8012ed0:	4620      	mov	r0, r4
 8012ed2:	bd70      	pop	{r4, r5, r6, pc}

08012ed4 <__sfp_lock_acquire>:
 8012ed4:	4801      	ldr	r0, [pc, #4]	; (8012edc <__sfp_lock_acquire+0x8>)
 8012ed6:	f000 b8ca 	b.w	801306e <__retarget_lock_acquire_recursive>
 8012eda:	bf00      	nop
 8012edc:	200029a9 	.word	0x200029a9

08012ee0 <__sfp_lock_release>:
 8012ee0:	4801      	ldr	r0, [pc, #4]	; (8012ee8 <__sfp_lock_release+0x8>)
 8012ee2:	f000 b8c5 	b.w	8013070 <__retarget_lock_release_recursive>
 8012ee6:	bf00      	nop
 8012ee8:	200029a9 	.word	0x200029a9

08012eec <__sinit_lock_acquire>:
 8012eec:	4801      	ldr	r0, [pc, #4]	; (8012ef4 <__sinit_lock_acquire+0x8>)
 8012eee:	f000 b8be 	b.w	801306e <__retarget_lock_acquire_recursive>
 8012ef2:	bf00      	nop
 8012ef4:	200029aa 	.word	0x200029aa

08012ef8 <__sinit_lock_release>:
 8012ef8:	4801      	ldr	r0, [pc, #4]	; (8012f00 <__sinit_lock_release+0x8>)
 8012efa:	f000 b8b9 	b.w	8013070 <__retarget_lock_release_recursive>
 8012efe:	bf00      	nop
 8012f00:	200029aa 	.word	0x200029aa

08012f04 <__sinit>:
 8012f04:	b510      	push	{r4, lr}
 8012f06:	4604      	mov	r4, r0
 8012f08:	f7ff fff0 	bl	8012eec <__sinit_lock_acquire>
 8012f0c:	69a3      	ldr	r3, [r4, #24]
 8012f0e:	b11b      	cbz	r3, 8012f18 <__sinit+0x14>
 8012f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f14:	f7ff bff0 	b.w	8012ef8 <__sinit_lock_release>
 8012f18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012f1c:	6523      	str	r3, [r4, #80]	; 0x50
 8012f1e:	4b13      	ldr	r3, [pc, #76]	; (8012f6c <__sinit+0x68>)
 8012f20:	4a13      	ldr	r2, [pc, #76]	; (8012f70 <__sinit+0x6c>)
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	62a2      	str	r2, [r4, #40]	; 0x28
 8012f26:	42a3      	cmp	r3, r4
 8012f28:	bf04      	itt	eq
 8012f2a:	2301      	moveq	r3, #1
 8012f2c:	61a3      	streq	r3, [r4, #24]
 8012f2e:	4620      	mov	r0, r4
 8012f30:	f000 f820 	bl	8012f74 <__sfp>
 8012f34:	6060      	str	r0, [r4, #4]
 8012f36:	4620      	mov	r0, r4
 8012f38:	f000 f81c 	bl	8012f74 <__sfp>
 8012f3c:	60a0      	str	r0, [r4, #8]
 8012f3e:	4620      	mov	r0, r4
 8012f40:	f000 f818 	bl	8012f74 <__sfp>
 8012f44:	2200      	movs	r2, #0
 8012f46:	60e0      	str	r0, [r4, #12]
 8012f48:	2104      	movs	r1, #4
 8012f4a:	6860      	ldr	r0, [r4, #4]
 8012f4c:	f7ff ff82 	bl	8012e54 <std>
 8012f50:	68a0      	ldr	r0, [r4, #8]
 8012f52:	2201      	movs	r2, #1
 8012f54:	2109      	movs	r1, #9
 8012f56:	f7ff ff7d 	bl	8012e54 <std>
 8012f5a:	68e0      	ldr	r0, [r4, #12]
 8012f5c:	2202      	movs	r2, #2
 8012f5e:	2112      	movs	r1, #18
 8012f60:	f7ff ff78 	bl	8012e54 <std>
 8012f64:	2301      	movs	r3, #1
 8012f66:	61a3      	str	r3, [r4, #24]
 8012f68:	e7d2      	b.n	8012f10 <__sinit+0xc>
 8012f6a:	bf00      	nop
 8012f6c:	080142a4 	.word	0x080142a4
 8012f70:	08012e9d 	.word	0x08012e9d

08012f74 <__sfp>:
 8012f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f76:	4607      	mov	r7, r0
 8012f78:	f7ff ffac 	bl	8012ed4 <__sfp_lock_acquire>
 8012f7c:	4b1e      	ldr	r3, [pc, #120]	; (8012ff8 <__sfp+0x84>)
 8012f7e:	681e      	ldr	r6, [r3, #0]
 8012f80:	69b3      	ldr	r3, [r6, #24]
 8012f82:	b913      	cbnz	r3, 8012f8a <__sfp+0x16>
 8012f84:	4630      	mov	r0, r6
 8012f86:	f7ff ffbd 	bl	8012f04 <__sinit>
 8012f8a:	3648      	adds	r6, #72	; 0x48
 8012f8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012f90:	3b01      	subs	r3, #1
 8012f92:	d503      	bpl.n	8012f9c <__sfp+0x28>
 8012f94:	6833      	ldr	r3, [r6, #0]
 8012f96:	b30b      	cbz	r3, 8012fdc <__sfp+0x68>
 8012f98:	6836      	ldr	r6, [r6, #0]
 8012f9a:	e7f7      	b.n	8012f8c <__sfp+0x18>
 8012f9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012fa0:	b9d5      	cbnz	r5, 8012fd8 <__sfp+0x64>
 8012fa2:	4b16      	ldr	r3, [pc, #88]	; (8012ffc <__sfp+0x88>)
 8012fa4:	60e3      	str	r3, [r4, #12]
 8012fa6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012faa:	6665      	str	r5, [r4, #100]	; 0x64
 8012fac:	f000 f85e 	bl	801306c <__retarget_lock_init_recursive>
 8012fb0:	f7ff ff96 	bl	8012ee0 <__sfp_lock_release>
 8012fb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012fb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012fbc:	6025      	str	r5, [r4, #0]
 8012fbe:	61a5      	str	r5, [r4, #24]
 8012fc0:	2208      	movs	r2, #8
 8012fc2:	4629      	mov	r1, r5
 8012fc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012fc8:	f7fe fb30 	bl	801162c <memset>
 8012fcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012fd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012fd4:	4620      	mov	r0, r4
 8012fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fd8:	3468      	adds	r4, #104	; 0x68
 8012fda:	e7d9      	b.n	8012f90 <__sfp+0x1c>
 8012fdc:	2104      	movs	r1, #4
 8012fde:	4638      	mov	r0, r7
 8012fe0:	f7ff ff62 	bl	8012ea8 <__sfmoreglue>
 8012fe4:	4604      	mov	r4, r0
 8012fe6:	6030      	str	r0, [r6, #0]
 8012fe8:	2800      	cmp	r0, #0
 8012fea:	d1d5      	bne.n	8012f98 <__sfp+0x24>
 8012fec:	f7ff ff78 	bl	8012ee0 <__sfp_lock_release>
 8012ff0:	230c      	movs	r3, #12
 8012ff2:	603b      	str	r3, [r7, #0]
 8012ff4:	e7ee      	b.n	8012fd4 <__sfp+0x60>
 8012ff6:	bf00      	nop
 8012ff8:	080142a4 	.word	0x080142a4
 8012ffc:	ffff0001 	.word	0xffff0001

08013000 <fiprintf>:
 8013000:	b40e      	push	{r1, r2, r3}
 8013002:	b503      	push	{r0, r1, lr}
 8013004:	4601      	mov	r1, r0
 8013006:	ab03      	add	r3, sp, #12
 8013008:	4805      	ldr	r0, [pc, #20]	; (8013020 <fiprintf+0x20>)
 801300a:	f853 2b04 	ldr.w	r2, [r3], #4
 801300e:	6800      	ldr	r0, [r0, #0]
 8013010:	9301      	str	r3, [sp, #4]
 8013012:	f000 fc11 	bl	8013838 <_vfiprintf_r>
 8013016:	b002      	add	sp, #8
 8013018:	f85d eb04 	ldr.w	lr, [sp], #4
 801301c:	b003      	add	sp, #12
 801301e:	4770      	bx	lr
 8013020:	2000018c 	.word	0x2000018c

08013024 <_fwalk_reent>:
 8013024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013028:	4606      	mov	r6, r0
 801302a:	4688      	mov	r8, r1
 801302c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013030:	2700      	movs	r7, #0
 8013032:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013036:	f1b9 0901 	subs.w	r9, r9, #1
 801303a:	d505      	bpl.n	8013048 <_fwalk_reent+0x24>
 801303c:	6824      	ldr	r4, [r4, #0]
 801303e:	2c00      	cmp	r4, #0
 8013040:	d1f7      	bne.n	8013032 <_fwalk_reent+0xe>
 8013042:	4638      	mov	r0, r7
 8013044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013048:	89ab      	ldrh	r3, [r5, #12]
 801304a:	2b01      	cmp	r3, #1
 801304c:	d907      	bls.n	801305e <_fwalk_reent+0x3a>
 801304e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013052:	3301      	adds	r3, #1
 8013054:	d003      	beq.n	801305e <_fwalk_reent+0x3a>
 8013056:	4629      	mov	r1, r5
 8013058:	4630      	mov	r0, r6
 801305a:	47c0      	blx	r8
 801305c:	4307      	orrs	r7, r0
 801305e:	3568      	adds	r5, #104	; 0x68
 8013060:	e7e9      	b.n	8013036 <_fwalk_reent+0x12>
	...

08013064 <_localeconv_r>:
 8013064:	4800      	ldr	r0, [pc, #0]	; (8013068 <_localeconv_r+0x4>)
 8013066:	4770      	bx	lr
 8013068:	200002e0 	.word	0x200002e0

0801306c <__retarget_lock_init_recursive>:
 801306c:	4770      	bx	lr

0801306e <__retarget_lock_acquire_recursive>:
 801306e:	4770      	bx	lr

08013070 <__retarget_lock_release_recursive>:
 8013070:	4770      	bx	lr

08013072 <__ascii_mbtowc>:
 8013072:	b082      	sub	sp, #8
 8013074:	b901      	cbnz	r1, 8013078 <__ascii_mbtowc+0x6>
 8013076:	a901      	add	r1, sp, #4
 8013078:	b142      	cbz	r2, 801308c <__ascii_mbtowc+0x1a>
 801307a:	b14b      	cbz	r3, 8013090 <__ascii_mbtowc+0x1e>
 801307c:	7813      	ldrb	r3, [r2, #0]
 801307e:	600b      	str	r3, [r1, #0]
 8013080:	7812      	ldrb	r2, [r2, #0]
 8013082:	1e10      	subs	r0, r2, #0
 8013084:	bf18      	it	ne
 8013086:	2001      	movne	r0, #1
 8013088:	b002      	add	sp, #8
 801308a:	4770      	bx	lr
 801308c:	4610      	mov	r0, r2
 801308e:	e7fb      	b.n	8013088 <__ascii_mbtowc+0x16>
 8013090:	f06f 0001 	mvn.w	r0, #1
 8013094:	e7f8      	b.n	8013088 <__ascii_mbtowc+0x16>
	...

08013098 <__malloc_lock>:
 8013098:	4801      	ldr	r0, [pc, #4]	; (80130a0 <__malloc_lock+0x8>)
 801309a:	f7ff bfe8 	b.w	801306e <__retarget_lock_acquire_recursive>
 801309e:	bf00      	nop
 80130a0:	200029a8 	.word	0x200029a8

080130a4 <__malloc_unlock>:
 80130a4:	4801      	ldr	r0, [pc, #4]	; (80130ac <__malloc_unlock+0x8>)
 80130a6:	f7ff bfe3 	b.w	8013070 <__retarget_lock_release_recursive>
 80130aa:	bf00      	nop
 80130ac:	200029a8 	.word	0x200029a8

080130b0 <_Balloc>:
 80130b0:	b570      	push	{r4, r5, r6, lr}
 80130b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80130b4:	4604      	mov	r4, r0
 80130b6:	460d      	mov	r5, r1
 80130b8:	b976      	cbnz	r6, 80130d8 <_Balloc+0x28>
 80130ba:	2010      	movs	r0, #16
 80130bc:	f7fe faa0 	bl	8011600 <malloc>
 80130c0:	4602      	mov	r2, r0
 80130c2:	6260      	str	r0, [r4, #36]	; 0x24
 80130c4:	b920      	cbnz	r0, 80130d0 <_Balloc+0x20>
 80130c6:	4b18      	ldr	r3, [pc, #96]	; (8013128 <_Balloc+0x78>)
 80130c8:	4818      	ldr	r0, [pc, #96]	; (801312c <_Balloc+0x7c>)
 80130ca:	2166      	movs	r1, #102	; 0x66
 80130cc:	f7ff f828 	bl	8012120 <__assert_func>
 80130d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80130d4:	6006      	str	r6, [r0, #0]
 80130d6:	60c6      	str	r6, [r0, #12]
 80130d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80130da:	68f3      	ldr	r3, [r6, #12]
 80130dc:	b183      	cbz	r3, 8013100 <_Balloc+0x50>
 80130de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80130e0:	68db      	ldr	r3, [r3, #12]
 80130e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80130e6:	b9b8      	cbnz	r0, 8013118 <_Balloc+0x68>
 80130e8:	2101      	movs	r1, #1
 80130ea:	fa01 f605 	lsl.w	r6, r1, r5
 80130ee:	1d72      	adds	r2, r6, #5
 80130f0:	0092      	lsls	r2, r2, #2
 80130f2:	4620      	mov	r0, r4
 80130f4:	f000 fb60 	bl	80137b8 <_calloc_r>
 80130f8:	b160      	cbz	r0, 8013114 <_Balloc+0x64>
 80130fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80130fe:	e00e      	b.n	801311e <_Balloc+0x6e>
 8013100:	2221      	movs	r2, #33	; 0x21
 8013102:	2104      	movs	r1, #4
 8013104:	4620      	mov	r0, r4
 8013106:	f000 fb57 	bl	80137b8 <_calloc_r>
 801310a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801310c:	60f0      	str	r0, [r6, #12]
 801310e:	68db      	ldr	r3, [r3, #12]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d1e4      	bne.n	80130de <_Balloc+0x2e>
 8013114:	2000      	movs	r0, #0
 8013116:	bd70      	pop	{r4, r5, r6, pc}
 8013118:	6802      	ldr	r2, [r0, #0]
 801311a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801311e:	2300      	movs	r3, #0
 8013120:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013124:	e7f7      	b.n	8013116 <_Balloc+0x66>
 8013126:	bf00      	nop
 8013128:	08014426 	.word	0x08014426
 801312c:	08014516 	.word	0x08014516

08013130 <_Bfree>:
 8013130:	b570      	push	{r4, r5, r6, lr}
 8013132:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013134:	4605      	mov	r5, r0
 8013136:	460c      	mov	r4, r1
 8013138:	b976      	cbnz	r6, 8013158 <_Bfree+0x28>
 801313a:	2010      	movs	r0, #16
 801313c:	f7fe fa60 	bl	8011600 <malloc>
 8013140:	4602      	mov	r2, r0
 8013142:	6268      	str	r0, [r5, #36]	; 0x24
 8013144:	b920      	cbnz	r0, 8013150 <_Bfree+0x20>
 8013146:	4b09      	ldr	r3, [pc, #36]	; (801316c <_Bfree+0x3c>)
 8013148:	4809      	ldr	r0, [pc, #36]	; (8013170 <_Bfree+0x40>)
 801314a:	218a      	movs	r1, #138	; 0x8a
 801314c:	f7fe ffe8 	bl	8012120 <__assert_func>
 8013150:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013154:	6006      	str	r6, [r0, #0]
 8013156:	60c6      	str	r6, [r0, #12]
 8013158:	b13c      	cbz	r4, 801316a <_Bfree+0x3a>
 801315a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801315c:	6862      	ldr	r2, [r4, #4]
 801315e:	68db      	ldr	r3, [r3, #12]
 8013160:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013164:	6021      	str	r1, [r4, #0]
 8013166:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801316a:	bd70      	pop	{r4, r5, r6, pc}
 801316c:	08014426 	.word	0x08014426
 8013170:	08014516 	.word	0x08014516

08013174 <__multadd>:
 8013174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013178:	690d      	ldr	r5, [r1, #16]
 801317a:	4607      	mov	r7, r0
 801317c:	460c      	mov	r4, r1
 801317e:	461e      	mov	r6, r3
 8013180:	f101 0c14 	add.w	ip, r1, #20
 8013184:	2000      	movs	r0, #0
 8013186:	f8dc 3000 	ldr.w	r3, [ip]
 801318a:	b299      	uxth	r1, r3
 801318c:	fb02 6101 	mla	r1, r2, r1, r6
 8013190:	0c1e      	lsrs	r6, r3, #16
 8013192:	0c0b      	lsrs	r3, r1, #16
 8013194:	fb02 3306 	mla	r3, r2, r6, r3
 8013198:	b289      	uxth	r1, r1
 801319a:	3001      	adds	r0, #1
 801319c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80131a0:	4285      	cmp	r5, r0
 80131a2:	f84c 1b04 	str.w	r1, [ip], #4
 80131a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80131aa:	dcec      	bgt.n	8013186 <__multadd+0x12>
 80131ac:	b30e      	cbz	r6, 80131f2 <__multadd+0x7e>
 80131ae:	68a3      	ldr	r3, [r4, #8]
 80131b0:	42ab      	cmp	r3, r5
 80131b2:	dc19      	bgt.n	80131e8 <__multadd+0x74>
 80131b4:	6861      	ldr	r1, [r4, #4]
 80131b6:	4638      	mov	r0, r7
 80131b8:	3101      	adds	r1, #1
 80131ba:	f7ff ff79 	bl	80130b0 <_Balloc>
 80131be:	4680      	mov	r8, r0
 80131c0:	b928      	cbnz	r0, 80131ce <__multadd+0x5a>
 80131c2:	4602      	mov	r2, r0
 80131c4:	4b0c      	ldr	r3, [pc, #48]	; (80131f8 <__multadd+0x84>)
 80131c6:	480d      	ldr	r0, [pc, #52]	; (80131fc <__multadd+0x88>)
 80131c8:	21b5      	movs	r1, #181	; 0xb5
 80131ca:	f7fe ffa9 	bl	8012120 <__assert_func>
 80131ce:	6922      	ldr	r2, [r4, #16]
 80131d0:	3202      	adds	r2, #2
 80131d2:	f104 010c 	add.w	r1, r4, #12
 80131d6:	0092      	lsls	r2, r2, #2
 80131d8:	300c      	adds	r0, #12
 80131da:	f7fe fa19 	bl	8011610 <memcpy>
 80131de:	4621      	mov	r1, r4
 80131e0:	4638      	mov	r0, r7
 80131e2:	f7ff ffa5 	bl	8013130 <_Bfree>
 80131e6:	4644      	mov	r4, r8
 80131e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80131ec:	3501      	adds	r5, #1
 80131ee:	615e      	str	r6, [r3, #20]
 80131f0:	6125      	str	r5, [r4, #16]
 80131f2:	4620      	mov	r0, r4
 80131f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131f8:	08014498 	.word	0x08014498
 80131fc:	08014516 	.word	0x08014516

08013200 <__hi0bits>:
 8013200:	0c03      	lsrs	r3, r0, #16
 8013202:	041b      	lsls	r3, r3, #16
 8013204:	b9d3      	cbnz	r3, 801323c <__hi0bits+0x3c>
 8013206:	0400      	lsls	r0, r0, #16
 8013208:	2310      	movs	r3, #16
 801320a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801320e:	bf04      	itt	eq
 8013210:	0200      	lsleq	r0, r0, #8
 8013212:	3308      	addeq	r3, #8
 8013214:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013218:	bf04      	itt	eq
 801321a:	0100      	lsleq	r0, r0, #4
 801321c:	3304      	addeq	r3, #4
 801321e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013222:	bf04      	itt	eq
 8013224:	0080      	lsleq	r0, r0, #2
 8013226:	3302      	addeq	r3, #2
 8013228:	2800      	cmp	r0, #0
 801322a:	db05      	blt.n	8013238 <__hi0bits+0x38>
 801322c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013230:	f103 0301 	add.w	r3, r3, #1
 8013234:	bf08      	it	eq
 8013236:	2320      	moveq	r3, #32
 8013238:	4618      	mov	r0, r3
 801323a:	4770      	bx	lr
 801323c:	2300      	movs	r3, #0
 801323e:	e7e4      	b.n	801320a <__hi0bits+0xa>

08013240 <__lo0bits>:
 8013240:	6803      	ldr	r3, [r0, #0]
 8013242:	f013 0207 	ands.w	r2, r3, #7
 8013246:	4601      	mov	r1, r0
 8013248:	d00b      	beq.n	8013262 <__lo0bits+0x22>
 801324a:	07da      	lsls	r2, r3, #31
 801324c:	d423      	bmi.n	8013296 <__lo0bits+0x56>
 801324e:	0798      	lsls	r0, r3, #30
 8013250:	bf49      	itett	mi
 8013252:	085b      	lsrmi	r3, r3, #1
 8013254:	089b      	lsrpl	r3, r3, #2
 8013256:	2001      	movmi	r0, #1
 8013258:	600b      	strmi	r3, [r1, #0]
 801325a:	bf5c      	itt	pl
 801325c:	600b      	strpl	r3, [r1, #0]
 801325e:	2002      	movpl	r0, #2
 8013260:	4770      	bx	lr
 8013262:	b298      	uxth	r0, r3
 8013264:	b9a8      	cbnz	r0, 8013292 <__lo0bits+0x52>
 8013266:	0c1b      	lsrs	r3, r3, #16
 8013268:	2010      	movs	r0, #16
 801326a:	b2da      	uxtb	r2, r3
 801326c:	b90a      	cbnz	r2, 8013272 <__lo0bits+0x32>
 801326e:	3008      	adds	r0, #8
 8013270:	0a1b      	lsrs	r3, r3, #8
 8013272:	071a      	lsls	r2, r3, #28
 8013274:	bf04      	itt	eq
 8013276:	091b      	lsreq	r3, r3, #4
 8013278:	3004      	addeq	r0, #4
 801327a:	079a      	lsls	r2, r3, #30
 801327c:	bf04      	itt	eq
 801327e:	089b      	lsreq	r3, r3, #2
 8013280:	3002      	addeq	r0, #2
 8013282:	07da      	lsls	r2, r3, #31
 8013284:	d403      	bmi.n	801328e <__lo0bits+0x4e>
 8013286:	085b      	lsrs	r3, r3, #1
 8013288:	f100 0001 	add.w	r0, r0, #1
 801328c:	d005      	beq.n	801329a <__lo0bits+0x5a>
 801328e:	600b      	str	r3, [r1, #0]
 8013290:	4770      	bx	lr
 8013292:	4610      	mov	r0, r2
 8013294:	e7e9      	b.n	801326a <__lo0bits+0x2a>
 8013296:	2000      	movs	r0, #0
 8013298:	4770      	bx	lr
 801329a:	2020      	movs	r0, #32
 801329c:	4770      	bx	lr
	...

080132a0 <__i2b>:
 80132a0:	b510      	push	{r4, lr}
 80132a2:	460c      	mov	r4, r1
 80132a4:	2101      	movs	r1, #1
 80132a6:	f7ff ff03 	bl	80130b0 <_Balloc>
 80132aa:	4602      	mov	r2, r0
 80132ac:	b928      	cbnz	r0, 80132ba <__i2b+0x1a>
 80132ae:	4b05      	ldr	r3, [pc, #20]	; (80132c4 <__i2b+0x24>)
 80132b0:	4805      	ldr	r0, [pc, #20]	; (80132c8 <__i2b+0x28>)
 80132b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80132b6:	f7fe ff33 	bl	8012120 <__assert_func>
 80132ba:	2301      	movs	r3, #1
 80132bc:	6144      	str	r4, [r0, #20]
 80132be:	6103      	str	r3, [r0, #16]
 80132c0:	bd10      	pop	{r4, pc}
 80132c2:	bf00      	nop
 80132c4:	08014498 	.word	0x08014498
 80132c8:	08014516 	.word	0x08014516

080132cc <__multiply>:
 80132cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132d0:	4691      	mov	r9, r2
 80132d2:	690a      	ldr	r2, [r1, #16]
 80132d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80132d8:	429a      	cmp	r2, r3
 80132da:	bfb8      	it	lt
 80132dc:	460b      	movlt	r3, r1
 80132de:	460c      	mov	r4, r1
 80132e0:	bfbc      	itt	lt
 80132e2:	464c      	movlt	r4, r9
 80132e4:	4699      	movlt	r9, r3
 80132e6:	6927      	ldr	r7, [r4, #16]
 80132e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80132ec:	68a3      	ldr	r3, [r4, #8]
 80132ee:	6861      	ldr	r1, [r4, #4]
 80132f0:	eb07 060a 	add.w	r6, r7, sl
 80132f4:	42b3      	cmp	r3, r6
 80132f6:	b085      	sub	sp, #20
 80132f8:	bfb8      	it	lt
 80132fa:	3101      	addlt	r1, #1
 80132fc:	f7ff fed8 	bl	80130b0 <_Balloc>
 8013300:	b930      	cbnz	r0, 8013310 <__multiply+0x44>
 8013302:	4602      	mov	r2, r0
 8013304:	4b44      	ldr	r3, [pc, #272]	; (8013418 <__multiply+0x14c>)
 8013306:	4845      	ldr	r0, [pc, #276]	; (801341c <__multiply+0x150>)
 8013308:	f240 115d 	movw	r1, #349	; 0x15d
 801330c:	f7fe ff08 	bl	8012120 <__assert_func>
 8013310:	f100 0514 	add.w	r5, r0, #20
 8013314:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013318:	462b      	mov	r3, r5
 801331a:	2200      	movs	r2, #0
 801331c:	4543      	cmp	r3, r8
 801331e:	d321      	bcc.n	8013364 <__multiply+0x98>
 8013320:	f104 0314 	add.w	r3, r4, #20
 8013324:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013328:	f109 0314 	add.w	r3, r9, #20
 801332c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013330:	9202      	str	r2, [sp, #8]
 8013332:	1b3a      	subs	r2, r7, r4
 8013334:	3a15      	subs	r2, #21
 8013336:	f022 0203 	bic.w	r2, r2, #3
 801333a:	3204      	adds	r2, #4
 801333c:	f104 0115 	add.w	r1, r4, #21
 8013340:	428f      	cmp	r7, r1
 8013342:	bf38      	it	cc
 8013344:	2204      	movcc	r2, #4
 8013346:	9201      	str	r2, [sp, #4]
 8013348:	9a02      	ldr	r2, [sp, #8]
 801334a:	9303      	str	r3, [sp, #12]
 801334c:	429a      	cmp	r2, r3
 801334e:	d80c      	bhi.n	801336a <__multiply+0x9e>
 8013350:	2e00      	cmp	r6, #0
 8013352:	dd03      	ble.n	801335c <__multiply+0x90>
 8013354:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013358:	2b00      	cmp	r3, #0
 801335a:	d05a      	beq.n	8013412 <__multiply+0x146>
 801335c:	6106      	str	r6, [r0, #16]
 801335e:	b005      	add	sp, #20
 8013360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013364:	f843 2b04 	str.w	r2, [r3], #4
 8013368:	e7d8      	b.n	801331c <__multiply+0x50>
 801336a:	f8b3 a000 	ldrh.w	sl, [r3]
 801336e:	f1ba 0f00 	cmp.w	sl, #0
 8013372:	d024      	beq.n	80133be <__multiply+0xf2>
 8013374:	f104 0e14 	add.w	lr, r4, #20
 8013378:	46a9      	mov	r9, r5
 801337a:	f04f 0c00 	mov.w	ip, #0
 801337e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013382:	f8d9 1000 	ldr.w	r1, [r9]
 8013386:	fa1f fb82 	uxth.w	fp, r2
 801338a:	b289      	uxth	r1, r1
 801338c:	fb0a 110b 	mla	r1, sl, fp, r1
 8013390:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013394:	f8d9 2000 	ldr.w	r2, [r9]
 8013398:	4461      	add	r1, ip
 801339a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801339e:	fb0a c20b 	mla	r2, sl, fp, ip
 80133a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80133a6:	b289      	uxth	r1, r1
 80133a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80133ac:	4577      	cmp	r7, lr
 80133ae:	f849 1b04 	str.w	r1, [r9], #4
 80133b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80133b6:	d8e2      	bhi.n	801337e <__multiply+0xb2>
 80133b8:	9a01      	ldr	r2, [sp, #4]
 80133ba:	f845 c002 	str.w	ip, [r5, r2]
 80133be:	9a03      	ldr	r2, [sp, #12]
 80133c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80133c4:	3304      	adds	r3, #4
 80133c6:	f1b9 0f00 	cmp.w	r9, #0
 80133ca:	d020      	beq.n	801340e <__multiply+0x142>
 80133cc:	6829      	ldr	r1, [r5, #0]
 80133ce:	f104 0c14 	add.w	ip, r4, #20
 80133d2:	46ae      	mov	lr, r5
 80133d4:	f04f 0a00 	mov.w	sl, #0
 80133d8:	f8bc b000 	ldrh.w	fp, [ip]
 80133dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80133e0:	fb09 220b 	mla	r2, r9, fp, r2
 80133e4:	4492      	add	sl, r2
 80133e6:	b289      	uxth	r1, r1
 80133e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80133ec:	f84e 1b04 	str.w	r1, [lr], #4
 80133f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80133f4:	f8be 1000 	ldrh.w	r1, [lr]
 80133f8:	0c12      	lsrs	r2, r2, #16
 80133fa:	fb09 1102 	mla	r1, r9, r2, r1
 80133fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8013402:	4567      	cmp	r7, ip
 8013404:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013408:	d8e6      	bhi.n	80133d8 <__multiply+0x10c>
 801340a:	9a01      	ldr	r2, [sp, #4]
 801340c:	50a9      	str	r1, [r5, r2]
 801340e:	3504      	adds	r5, #4
 8013410:	e79a      	b.n	8013348 <__multiply+0x7c>
 8013412:	3e01      	subs	r6, #1
 8013414:	e79c      	b.n	8013350 <__multiply+0x84>
 8013416:	bf00      	nop
 8013418:	08014498 	.word	0x08014498
 801341c:	08014516 	.word	0x08014516

08013420 <__pow5mult>:
 8013420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013424:	4615      	mov	r5, r2
 8013426:	f012 0203 	ands.w	r2, r2, #3
 801342a:	4606      	mov	r6, r0
 801342c:	460f      	mov	r7, r1
 801342e:	d007      	beq.n	8013440 <__pow5mult+0x20>
 8013430:	4c25      	ldr	r4, [pc, #148]	; (80134c8 <__pow5mult+0xa8>)
 8013432:	3a01      	subs	r2, #1
 8013434:	2300      	movs	r3, #0
 8013436:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801343a:	f7ff fe9b 	bl	8013174 <__multadd>
 801343e:	4607      	mov	r7, r0
 8013440:	10ad      	asrs	r5, r5, #2
 8013442:	d03d      	beq.n	80134c0 <__pow5mult+0xa0>
 8013444:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013446:	b97c      	cbnz	r4, 8013468 <__pow5mult+0x48>
 8013448:	2010      	movs	r0, #16
 801344a:	f7fe f8d9 	bl	8011600 <malloc>
 801344e:	4602      	mov	r2, r0
 8013450:	6270      	str	r0, [r6, #36]	; 0x24
 8013452:	b928      	cbnz	r0, 8013460 <__pow5mult+0x40>
 8013454:	4b1d      	ldr	r3, [pc, #116]	; (80134cc <__pow5mult+0xac>)
 8013456:	481e      	ldr	r0, [pc, #120]	; (80134d0 <__pow5mult+0xb0>)
 8013458:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801345c:	f7fe fe60 	bl	8012120 <__assert_func>
 8013460:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013464:	6004      	str	r4, [r0, #0]
 8013466:	60c4      	str	r4, [r0, #12]
 8013468:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801346c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013470:	b94c      	cbnz	r4, 8013486 <__pow5mult+0x66>
 8013472:	f240 2171 	movw	r1, #625	; 0x271
 8013476:	4630      	mov	r0, r6
 8013478:	f7ff ff12 	bl	80132a0 <__i2b>
 801347c:	2300      	movs	r3, #0
 801347e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013482:	4604      	mov	r4, r0
 8013484:	6003      	str	r3, [r0, #0]
 8013486:	f04f 0900 	mov.w	r9, #0
 801348a:	07eb      	lsls	r3, r5, #31
 801348c:	d50a      	bpl.n	80134a4 <__pow5mult+0x84>
 801348e:	4639      	mov	r1, r7
 8013490:	4622      	mov	r2, r4
 8013492:	4630      	mov	r0, r6
 8013494:	f7ff ff1a 	bl	80132cc <__multiply>
 8013498:	4639      	mov	r1, r7
 801349a:	4680      	mov	r8, r0
 801349c:	4630      	mov	r0, r6
 801349e:	f7ff fe47 	bl	8013130 <_Bfree>
 80134a2:	4647      	mov	r7, r8
 80134a4:	106d      	asrs	r5, r5, #1
 80134a6:	d00b      	beq.n	80134c0 <__pow5mult+0xa0>
 80134a8:	6820      	ldr	r0, [r4, #0]
 80134aa:	b938      	cbnz	r0, 80134bc <__pow5mult+0x9c>
 80134ac:	4622      	mov	r2, r4
 80134ae:	4621      	mov	r1, r4
 80134b0:	4630      	mov	r0, r6
 80134b2:	f7ff ff0b 	bl	80132cc <__multiply>
 80134b6:	6020      	str	r0, [r4, #0]
 80134b8:	f8c0 9000 	str.w	r9, [r0]
 80134bc:	4604      	mov	r4, r0
 80134be:	e7e4      	b.n	801348a <__pow5mult+0x6a>
 80134c0:	4638      	mov	r0, r7
 80134c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134c6:	bf00      	nop
 80134c8:	08014668 	.word	0x08014668
 80134cc:	08014426 	.word	0x08014426
 80134d0:	08014516 	.word	0x08014516

080134d4 <__lshift>:
 80134d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80134d8:	460c      	mov	r4, r1
 80134da:	6849      	ldr	r1, [r1, #4]
 80134dc:	6923      	ldr	r3, [r4, #16]
 80134de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80134e2:	68a3      	ldr	r3, [r4, #8]
 80134e4:	4607      	mov	r7, r0
 80134e6:	4691      	mov	r9, r2
 80134e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80134ec:	f108 0601 	add.w	r6, r8, #1
 80134f0:	42b3      	cmp	r3, r6
 80134f2:	db0b      	blt.n	801350c <__lshift+0x38>
 80134f4:	4638      	mov	r0, r7
 80134f6:	f7ff fddb 	bl	80130b0 <_Balloc>
 80134fa:	4605      	mov	r5, r0
 80134fc:	b948      	cbnz	r0, 8013512 <__lshift+0x3e>
 80134fe:	4602      	mov	r2, r0
 8013500:	4b2a      	ldr	r3, [pc, #168]	; (80135ac <__lshift+0xd8>)
 8013502:	482b      	ldr	r0, [pc, #172]	; (80135b0 <__lshift+0xdc>)
 8013504:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013508:	f7fe fe0a 	bl	8012120 <__assert_func>
 801350c:	3101      	adds	r1, #1
 801350e:	005b      	lsls	r3, r3, #1
 8013510:	e7ee      	b.n	80134f0 <__lshift+0x1c>
 8013512:	2300      	movs	r3, #0
 8013514:	f100 0114 	add.w	r1, r0, #20
 8013518:	f100 0210 	add.w	r2, r0, #16
 801351c:	4618      	mov	r0, r3
 801351e:	4553      	cmp	r3, sl
 8013520:	db37      	blt.n	8013592 <__lshift+0xbe>
 8013522:	6920      	ldr	r0, [r4, #16]
 8013524:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013528:	f104 0314 	add.w	r3, r4, #20
 801352c:	f019 091f 	ands.w	r9, r9, #31
 8013530:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013534:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013538:	d02f      	beq.n	801359a <__lshift+0xc6>
 801353a:	f1c9 0e20 	rsb	lr, r9, #32
 801353e:	468a      	mov	sl, r1
 8013540:	f04f 0c00 	mov.w	ip, #0
 8013544:	681a      	ldr	r2, [r3, #0]
 8013546:	fa02 f209 	lsl.w	r2, r2, r9
 801354a:	ea42 020c 	orr.w	r2, r2, ip
 801354e:	f84a 2b04 	str.w	r2, [sl], #4
 8013552:	f853 2b04 	ldr.w	r2, [r3], #4
 8013556:	4298      	cmp	r0, r3
 8013558:	fa22 fc0e 	lsr.w	ip, r2, lr
 801355c:	d8f2      	bhi.n	8013544 <__lshift+0x70>
 801355e:	1b03      	subs	r3, r0, r4
 8013560:	3b15      	subs	r3, #21
 8013562:	f023 0303 	bic.w	r3, r3, #3
 8013566:	3304      	adds	r3, #4
 8013568:	f104 0215 	add.w	r2, r4, #21
 801356c:	4290      	cmp	r0, r2
 801356e:	bf38      	it	cc
 8013570:	2304      	movcc	r3, #4
 8013572:	f841 c003 	str.w	ip, [r1, r3]
 8013576:	f1bc 0f00 	cmp.w	ip, #0
 801357a:	d001      	beq.n	8013580 <__lshift+0xac>
 801357c:	f108 0602 	add.w	r6, r8, #2
 8013580:	3e01      	subs	r6, #1
 8013582:	4638      	mov	r0, r7
 8013584:	612e      	str	r6, [r5, #16]
 8013586:	4621      	mov	r1, r4
 8013588:	f7ff fdd2 	bl	8013130 <_Bfree>
 801358c:	4628      	mov	r0, r5
 801358e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013592:	f842 0f04 	str.w	r0, [r2, #4]!
 8013596:	3301      	adds	r3, #1
 8013598:	e7c1      	b.n	801351e <__lshift+0x4a>
 801359a:	3904      	subs	r1, #4
 801359c:	f853 2b04 	ldr.w	r2, [r3], #4
 80135a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80135a4:	4298      	cmp	r0, r3
 80135a6:	d8f9      	bhi.n	801359c <__lshift+0xc8>
 80135a8:	e7ea      	b.n	8013580 <__lshift+0xac>
 80135aa:	bf00      	nop
 80135ac:	08014498 	.word	0x08014498
 80135b0:	08014516 	.word	0x08014516

080135b4 <__mcmp>:
 80135b4:	b530      	push	{r4, r5, lr}
 80135b6:	6902      	ldr	r2, [r0, #16]
 80135b8:	690c      	ldr	r4, [r1, #16]
 80135ba:	1b12      	subs	r2, r2, r4
 80135bc:	d10e      	bne.n	80135dc <__mcmp+0x28>
 80135be:	f100 0314 	add.w	r3, r0, #20
 80135c2:	3114      	adds	r1, #20
 80135c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80135c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80135cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80135d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80135d4:	42a5      	cmp	r5, r4
 80135d6:	d003      	beq.n	80135e0 <__mcmp+0x2c>
 80135d8:	d305      	bcc.n	80135e6 <__mcmp+0x32>
 80135da:	2201      	movs	r2, #1
 80135dc:	4610      	mov	r0, r2
 80135de:	bd30      	pop	{r4, r5, pc}
 80135e0:	4283      	cmp	r3, r0
 80135e2:	d3f3      	bcc.n	80135cc <__mcmp+0x18>
 80135e4:	e7fa      	b.n	80135dc <__mcmp+0x28>
 80135e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80135ea:	e7f7      	b.n	80135dc <__mcmp+0x28>

080135ec <__mdiff>:
 80135ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135f0:	460c      	mov	r4, r1
 80135f2:	4606      	mov	r6, r0
 80135f4:	4611      	mov	r1, r2
 80135f6:	4620      	mov	r0, r4
 80135f8:	4690      	mov	r8, r2
 80135fa:	f7ff ffdb 	bl	80135b4 <__mcmp>
 80135fe:	1e05      	subs	r5, r0, #0
 8013600:	d110      	bne.n	8013624 <__mdiff+0x38>
 8013602:	4629      	mov	r1, r5
 8013604:	4630      	mov	r0, r6
 8013606:	f7ff fd53 	bl	80130b0 <_Balloc>
 801360a:	b930      	cbnz	r0, 801361a <__mdiff+0x2e>
 801360c:	4b3a      	ldr	r3, [pc, #232]	; (80136f8 <__mdiff+0x10c>)
 801360e:	4602      	mov	r2, r0
 8013610:	f240 2132 	movw	r1, #562	; 0x232
 8013614:	4839      	ldr	r0, [pc, #228]	; (80136fc <__mdiff+0x110>)
 8013616:	f7fe fd83 	bl	8012120 <__assert_func>
 801361a:	2301      	movs	r3, #1
 801361c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013620:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013624:	bfa4      	itt	ge
 8013626:	4643      	movge	r3, r8
 8013628:	46a0      	movge	r8, r4
 801362a:	4630      	mov	r0, r6
 801362c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013630:	bfa6      	itte	ge
 8013632:	461c      	movge	r4, r3
 8013634:	2500      	movge	r5, #0
 8013636:	2501      	movlt	r5, #1
 8013638:	f7ff fd3a 	bl	80130b0 <_Balloc>
 801363c:	b920      	cbnz	r0, 8013648 <__mdiff+0x5c>
 801363e:	4b2e      	ldr	r3, [pc, #184]	; (80136f8 <__mdiff+0x10c>)
 8013640:	4602      	mov	r2, r0
 8013642:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013646:	e7e5      	b.n	8013614 <__mdiff+0x28>
 8013648:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801364c:	6926      	ldr	r6, [r4, #16]
 801364e:	60c5      	str	r5, [r0, #12]
 8013650:	f104 0914 	add.w	r9, r4, #20
 8013654:	f108 0514 	add.w	r5, r8, #20
 8013658:	f100 0e14 	add.w	lr, r0, #20
 801365c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013660:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013664:	f108 0210 	add.w	r2, r8, #16
 8013668:	46f2      	mov	sl, lr
 801366a:	2100      	movs	r1, #0
 801366c:	f859 3b04 	ldr.w	r3, [r9], #4
 8013670:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013674:	fa1f f883 	uxth.w	r8, r3
 8013678:	fa11 f18b 	uxtah	r1, r1, fp
 801367c:	0c1b      	lsrs	r3, r3, #16
 801367e:	eba1 0808 	sub.w	r8, r1, r8
 8013682:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013686:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801368a:	fa1f f888 	uxth.w	r8, r8
 801368e:	1419      	asrs	r1, r3, #16
 8013690:	454e      	cmp	r6, r9
 8013692:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013696:	f84a 3b04 	str.w	r3, [sl], #4
 801369a:	d8e7      	bhi.n	801366c <__mdiff+0x80>
 801369c:	1b33      	subs	r3, r6, r4
 801369e:	3b15      	subs	r3, #21
 80136a0:	f023 0303 	bic.w	r3, r3, #3
 80136a4:	3304      	adds	r3, #4
 80136a6:	3415      	adds	r4, #21
 80136a8:	42a6      	cmp	r6, r4
 80136aa:	bf38      	it	cc
 80136ac:	2304      	movcc	r3, #4
 80136ae:	441d      	add	r5, r3
 80136b0:	4473      	add	r3, lr
 80136b2:	469e      	mov	lr, r3
 80136b4:	462e      	mov	r6, r5
 80136b6:	4566      	cmp	r6, ip
 80136b8:	d30e      	bcc.n	80136d8 <__mdiff+0xec>
 80136ba:	f10c 0203 	add.w	r2, ip, #3
 80136be:	1b52      	subs	r2, r2, r5
 80136c0:	f022 0203 	bic.w	r2, r2, #3
 80136c4:	3d03      	subs	r5, #3
 80136c6:	45ac      	cmp	ip, r5
 80136c8:	bf38      	it	cc
 80136ca:	2200      	movcc	r2, #0
 80136cc:	441a      	add	r2, r3
 80136ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80136d2:	b17b      	cbz	r3, 80136f4 <__mdiff+0x108>
 80136d4:	6107      	str	r7, [r0, #16]
 80136d6:	e7a3      	b.n	8013620 <__mdiff+0x34>
 80136d8:	f856 8b04 	ldr.w	r8, [r6], #4
 80136dc:	fa11 f288 	uxtah	r2, r1, r8
 80136e0:	1414      	asrs	r4, r2, #16
 80136e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80136e6:	b292      	uxth	r2, r2
 80136e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80136ec:	f84e 2b04 	str.w	r2, [lr], #4
 80136f0:	1421      	asrs	r1, r4, #16
 80136f2:	e7e0      	b.n	80136b6 <__mdiff+0xca>
 80136f4:	3f01      	subs	r7, #1
 80136f6:	e7ea      	b.n	80136ce <__mdiff+0xe2>
 80136f8:	08014498 	.word	0x08014498
 80136fc:	08014516 	.word	0x08014516

08013700 <__d2b>:
 8013700:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013704:	4689      	mov	r9, r1
 8013706:	2101      	movs	r1, #1
 8013708:	ec57 6b10 	vmov	r6, r7, d0
 801370c:	4690      	mov	r8, r2
 801370e:	f7ff fccf 	bl	80130b0 <_Balloc>
 8013712:	4604      	mov	r4, r0
 8013714:	b930      	cbnz	r0, 8013724 <__d2b+0x24>
 8013716:	4602      	mov	r2, r0
 8013718:	4b25      	ldr	r3, [pc, #148]	; (80137b0 <__d2b+0xb0>)
 801371a:	4826      	ldr	r0, [pc, #152]	; (80137b4 <__d2b+0xb4>)
 801371c:	f240 310a 	movw	r1, #778	; 0x30a
 8013720:	f7fe fcfe 	bl	8012120 <__assert_func>
 8013724:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013728:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801372c:	bb35      	cbnz	r5, 801377c <__d2b+0x7c>
 801372e:	2e00      	cmp	r6, #0
 8013730:	9301      	str	r3, [sp, #4]
 8013732:	d028      	beq.n	8013786 <__d2b+0x86>
 8013734:	4668      	mov	r0, sp
 8013736:	9600      	str	r6, [sp, #0]
 8013738:	f7ff fd82 	bl	8013240 <__lo0bits>
 801373c:	9900      	ldr	r1, [sp, #0]
 801373e:	b300      	cbz	r0, 8013782 <__d2b+0x82>
 8013740:	9a01      	ldr	r2, [sp, #4]
 8013742:	f1c0 0320 	rsb	r3, r0, #32
 8013746:	fa02 f303 	lsl.w	r3, r2, r3
 801374a:	430b      	orrs	r3, r1
 801374c:	40c2      	lsrs	r2, r0
 801374e:	6163      	str	r3, [r4, #20]
 8013750:	9201      	str	r2, [sp, #4]
 8013752:	9b01      	ldr	r3, [sp, #4]
 8013754:	61a3      	str	r3, [r4, #24]
 8013756:	2b00      	cmp	r3, #0
 8013758:	bf14      	ite	ne
 801375a:	2202      	movne	r2, #2
 801375c:	2201      	moveq	r2, #1
 801375e:	6122      	str	r2, [r4, #16]
 8013760:	b1d5      	cbz	r5, 8013798 <__d2b+0x98>
 8013762:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013766:	4405      	add	r5, r0
 8013768:	f8c9 5000 	str.w	r5, [r9]
 801376c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013770:	f8c8 0000 	str.w	r0, [r8]
 8013774:	4620      	mov	r0, r4
 8013776:	b003      	add	sp, #12
 8013778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801377c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013780:	e7d5      	b.n	801372e <__d2b+0x2e>
 8013782:	6161      	str	r1, [r4, #20]
 8013784:	e7e5      	b.n	8013752 <__d2b+0x52>
 8013786:	a801      	add	r0, sp, #4
 8013788:	f7ff fd5a 	bl	8013240 <__lo0bits>
 801378c:	9b01      	ldr	r3, [sp, #4]
 801378e:	6163      	str	r3, [r4, #20]
 8013790:	2201      	movs	r2, #1
 8013792:	6122      	str	r2, [r4, #16]
 8013794:	3020      	adds	r0, #32
 8013796:	e7e3      	b.n	8013760 <__d2b+0x60>
 8013798:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801379c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80137a0:	f8c9 0000 	str.w	r0, [r9]
 80137a4:	6918      	ldr	r0, [r3, #16]
 80137a6:	f7ff fd2b 	bl	8013200 <__hi0bits>
 80137aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80137ae:	e7df      	b.n	8013770 <__d2b+0x70>
 80137b0:	08014498 	.word	0x08014498
 80137b4:	08014516 	.word	0x08014516

080137b8 <_calloc_r>:
 80137b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80137ba:	fba1 2402 	umull	r2, r4, r1, r2
 80137be:	b94c      	cbnz	r4, 80137d4 <_calloc_r+0x1c>
 80137c0:	4611      	mov	r1, r2
 80137c2:	9201      	str	r2, [sp, #4]
 80137c4:	f7fd ffa6 	bl	8011714 <_malloc_r>
 80137c8:	9a01      	ldr	r2, [sp, #4]
 80137ca:	4605      	mov	r5, r0
 80137cc:	b930      	cbnz	r0, 80137dc <_calloc_r+0x24>
 80137ce:	4628      	mov	r0, r5
 80137d0:	b003      	add	sp, #12
 80137d2:	bd30      	pop	{r4, r5, pc}
 80137d4:	220c      	movs	r2, #12
 80137d6:	6002      	str	r2, [r0, #0]
 80137d8:	2500      	movs	r5, #0
 80137da:	e7f8      	b.n	80137ce <_calloc_r+0x16>
 80137dc:	4621      	mov	r1, r4
 80137de:	f7fd ff25 	bl	801162c <memset>
 80137e2:	e7f4      	b.n	80137ce <_calloc_r+0x16>

080137e4 <__sfputc_r>:
 80137e4:	6893      	ldr	r3, [r2, #8]
 80137e6:	3b01      	subs	r3, #1
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	b410      	push	{r4}
 80137ec:	6093      	str	r3, [r2, #8]
 80137ee:	da08      	bge.n	8013802 <__sfputc_r+0x1e>
 80137f0:	6994      	ldr	r4, [r2, #24]
 80137f2:	42a3      	cmp	r3, r4
 80137f4:	db01      	blt.n	80137fa <__sfputc_r+0x16>
 80137f6:	290a      	cmp	r1, #10
 80137f8:	d103      	bne.n	8013802 <__sfputc_r+0x1e>
 80137fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80137fe:	f000 b98f 	b.w	8013b20 <__swbuf_r>
 8013802:	6813      	ldr	r3, [r2, #0]
 8013804:	1c58      	adds	r0, r3, #1
 8013806:	6010      	str	r0, [r2, #0]
 8013808:	7019      	strb	r1, [r3, #0]
 801380a:	4608      	mov	r0, r1
 801380c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013810:	4770      	bx	lr

08013812 <__sfputs_r>:
 8013812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013814:	4606      	mov	r6, r0
 8013816:	460f      	mov	r7, r1
 8013818:	4614      	mov	r4, r2
 801381a:	18d5      	adds	r5, r2, r3
 801381c:	42ac      	cmp	r4, r5
 801381e:	d101      	bne.n	8013824 <__sfputs_r+0x12>
 8013820:	2000      	movs	r0, #0
 8013822:	e007      	b.n	8013834 <__sfputs_r+0x22>
 8013824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013828:	463a      	mov	r2, r7
 801382a:	4630      	mov	r0, r6
 801382c:	f7ff ffda 	bl	80137e4 <__sfputc_r>
 8013830:	1c43      	adds	r3, r0, #1
 8013832:	d1f3      	bne.n	801381c <__sfputs_r+0xa>
 8013834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013838 <_vfiprintf_r>:
 8013838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801383c:	460d      	mov	r5, r1
 801383e:	b09d      	sub	sp, #116	; 0x74
 8013840:	4614      	mov	r4, r2
 8013842:	4698      	mov	r8, r3
 8013844:	4606      	mov	r6, r0
 8013846:	b118      	cbz	r0, 8013850 <_vfiprintf_r+0x18>
 8013848:	6983      	ldr	r3, [r0, #24]
 801384a:	b90b      	cbnz	r3, 8013850 <_vfiprintf_r+0x18>
 801384c:	f7ff fb5a 	bl	8012f04 <__sinit>
 8013850:	4b89      	ldr	r3, [pc, #548]	; (8013a78 <_vfiprintf_r+0x240>)
 8013852:	429d      	cmp	r5, r3
 8013854:	d11b      	bne.n	801388e <_vfiprintf_r+0x56>
 8013856:	6875      	ldr	r5, [r6, #4]
 8013858:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801385a:	07d9      	lsls	r1, r3, #31
 801385c:	d405      	bmi.n	801386a <_vfiprintf_r+0x32>
 801385e:	89ab      	ldrh	r3, [r5, #12]
 8013860:	059a      	lsls	r2, r3, #22
 8013862:	d402      	bmi.n	801386a <_vfiprintf_r+0x32>
 8013864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013866:	f7ff fc02 	bl	801306e <__retarget_lock_acquire_recursive>
 801386a:	89ab      	ldrh	r3, [r5, #12]
 801386c:	071b      	lsls	r3, r3, #28
 801386e:	d501      	bpl.n	8013874 <_vfiprintf_r+0x3c>
 8013870:	692b      	ldr	r3, [r5, #16]
 8013872:	b9eb      	cbnz	r3, 80138b0 <_vfiprintf_r+0x78>
 8013874:	4629      	mov	r1, r5
 8013876:	4630      	mov	r0, r6
 8013878:	f000 f9c4 	bl	8013c04 <__swsetup_r>
 801387c:	b1c0      	cbz	r0, 80138b0 <_vfiprintf_r+0x78>
 801387e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013880:	07dc      	lsls	r4, r3, #31
 8013882:	d50e      	bpl.n	80138a2 <_vfiprintf_r+0x6a>
 8013884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013888:	b01d      	add	sp, #116	; 0x74
 801388a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801388e:	4b7b      	ldr	r3, [pc, #492]	; (8013a7c <_vfiprintf_r+0x244>)
 8013890:	429d      	cmp	r5, r3
 8013892:	d101      	bne.n	8013898 <_vfiprintf_r+0x60>
 8013894:	68b5      	ldr	r5, [r6, #8]
 8013896:	e7df      	b.n	8013858 <_vfiprintf_r+0x20>
 8013898:	4b79      	ldr	r3, [pc, #484]	; (8013a80 <_vfiprintf_r+0x248>)
 801389a:	429d      	cmp	r5, r3
 801389c:	bf08      	it	eq
 801389e:	68f5      	ldreq	r5, [r6, #12]
 80138a0:	e7da      	b.n	8013858 <_vfiprintf_r+0x20>
 80138a2:	89ab      	ldrh	r3, [r5, #12]
 80138a4:	0598      	lsls	r0, r3, #22
 80138a6:	d4ed      	bmi.n	8013884 <_vfiprintf_r+0x4c>
 80138a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80138aa:	f7ff fbe1 	bl	8013070 <__retarget_lock_release_recursive>
 80138ae:	e7e9      	b.n	8013884 <_vfiprintf_r+0x4c>
 80138b0:	2300      	movs	r3, #0
 80138b2:	9309      	str	r3, [sp, #36]	; 0x24
 80138b4:	2320      	movs	r3, #32
 80138b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80138ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80138be:	2330      	movs	r3, #48	; 0x30
 80138c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013a84 <_vfiprintf_r+0x24c>
 80138c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80138c8:	f04f 0901 	mov.w	r9, #1
 80138cc:	4623      	mov	r3, r4
 80138ce:	469a      	mov	sl, r3
 80138d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80138d4:	b10a      	cbz	r2, 80138da <_vfiprintf_r+0xa2>
 80138d6:	2a25      	cmp	r2, #37	; 0x25
 80138d8:	d1f9      	bne.n	80138ce <_vfiprintf_r+0x96>
 80138da:	ebba 0b04 	subs.w	fp, sl, r4
 80138de:	d00b      	beq.n	80138f8 <_vfiprintf_r+0xc0>
 80138e0:	465b      	mov	r3, fp
 80138e2:	4622      	mov	r2, r4
 80138e4:	4629      	mov	r1, r5
 80138e6:	4630      	mov	r0, r6
 80138e8:	f7ff ff93 	bl	8013812 <__sfputs_r>
 80138ec:	3001      	adds	r0, #1
 80138ee:	f000 80aa 	beq.w	8013a46 <_vfiprintf_r+0x20e>
 80138f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80138f4:	445a      	add	r2, fp
 80138f6:	9209      	str	r2, [sp, #36]	; 0x24
 80138f8:	f89a 3000 	ldrb.w	r3, [sl]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	f000 80a2 	beq.w	8013a46 <_vfiprintf_r+0x20e>
 8013902:	2300      	movs	r3, #0
 8013904:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013908:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801390c:	f10a 0a01 	add.w	sl, sl, #1
 8013910:	9304      	str	r3, [sp, #16]
 8013912:	9307      	str	r3, [sp, #28]
 8013914:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013918:	931a      	str	r3, [sp, #104]	; 0x68
 801391a:	4654      	mov	r4, sl
 801391c:	2205      	movs	r2, #5
 801391e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013922:	4858      	ldr	r0, [pc, #352]	; (8013a84 <_vfiprintf_r+0x24c>)
 8013924:	f7ec fc74 	bl	8000210 <memchr>
 8013928:	9a04      	ldr	r2, [sp, #16]
 801392a:	b9d8      	cbnz	r0, 8013964 <_vfiprintf_r+0x12c>
 801392c:	06d1      	lsls	r1, r2, #27
 801392e:	bf44      	itt	mi
 8013930:	2320      	movmi	r3, #32
 8013932:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013936:	0713      	lsls	r3, r2, #28
 8013938:	bf44      	itt	mi
 801393a:	232b      	movmi	r3, #43	; 0x2b
 801393c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013940:	f89a 3000 	ldrb.w	r3, [sl]
 8013944:	2b2a      	cmp	r3, #42	; 0x2a
 8013946:	d015      	beq.n	8013974 <_vfiprintf_r+0x13c>
 8013948:	9a07      	ldr	r2, [sp, #28]
 801394a:	4654      	mov	r4, sl
 801394c:	2000      	movs	r0, #0
 801394e:	f04f 0c0a 	mov.w	ip, #10
 8013952:	4621      	mov	r1, r4
 8013954:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013958:	3b30      	subs	r3, #48	; 0x30
 801395a:	2b09      	cmp	r3, #9
 801395c:	d94e      	bls.n	80139fc <_vfiprintf_r+0x1c4>
 801395e:	b1b0      	cbz	r0, 801398e <_vfiprintf_r+0x156>
 8013960:	9207      	str	r2, [sp, #28]
 8013962:	e014      	b.n	801398e <_vfiprintf_r+0x156>
 8013964:	eba0 0308 	sub.w	r3, r0, r8
 8013968:	fa09 f303 	lsl.w	r3, r9, r3
 801396c:	4313      	orrs	r3, r2
 801396e:	9304      	str	r3, [sp, #16]
 8013970:	46a2      	mov	sl, r4
 8013972:	e7d2      	b.n	801391a <_vfiprintf_r+0xe2>
 8013974:	9b03      	ldr	r3, [sp, #12]
 8013976:	1d19      	adds	r1, r3, #4
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	9103      	str	r1, [sp, #12]
 801397c:	2b00      	cmp	r3, #0
 801397e:	bfbb      	ittet	lt
 8013980:	425b      	neglt	r3, r3
 8013982:	f042 0202 	orrlt.w	r2, r2, #2
 8013986:	9307      	strge	r3, [sp, #28]
 8013988:	9307      	strlt	r3, [sp, #28]
 801398a:	bfb8      	it	lt
 801398c:	9204      	strlt	r2, [sp, #16]
 801398e:	7823      	ldrb	r3, [r4, #0]
 8013990:	2b2e      	cmp	r3, #46	; 0x2e
 8013992:	d10c      	bne.n	80139ae <_vfiprintf_r+0x176>
 8013994:	7863      	ldrb	r3, [r4, #1]
 8013996:	2b2a      	cmp	r3, #42	; 0x2a
 8013998:	d135      	bne.n	8013a06 <_vfiprintf_r+0x1ce>
 801399a:	9b03      	ldr	r3, [sp, #12]
 801399c:	1d1a      	adds	r2, r3, #4
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	9203      	str	r2, [sp, #12]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	bfb8      	it	lt
 80139a6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80139aa:	3402      	adds	r4, #2
 80139ac:	9305      	str	r3, [sp, #20]
 80139ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013a94 <_vfiprintf_r+0x25c>
 80139b2:	7821      	ldrb	r1, [r4, #0]
 80139b4:	2203      	movs	r2, #3
 80139b6:	4650      	mov	r0, sl
 80139b8:	f7ec fc2a 	bl	8000210 <memchr>
 80139bc:	b140      	cbz	r0, 80139d0 <_vfiprintf_r+0x198>
 80139be:	2340      	movs	r3, #64	; 0x40
 80139c0:	eba0 000a 	sub.w	r0, r0, sl
 80139c4:	fa03 f000 	lsl.w	r0, r3, r0
 80139c8:	9b04      	ldr	r3, [sp, #16]
 80139ca:	4303      	orrs	r3, r0
 80139cc:	3401      	adds	r4, #1
 80139ce:	9304      	str	r3, [sp, #16]
 80139d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139d4:	482c      	ldr	r0, [pc, #176]	; (8013a88 <_vfiprintf_r+0x250>)
 80139d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80139da:	2206      	movs	r2, #6
 80139dc:	f7ec fc18 	bl	8000210 <memchr>
 80139e0:	2800      	cmp	r0, #0
 80139e2:	d03f      	beq.n	8013a64 <_vfiprintf_r+0x22c>
 80139e4:	4b29      	ldr	r3, [pc, #164]	; (8013a8c <_vfiprintf_r+0x254>)
 80139e6:	bb1b      	cbnz	r3, 8013a30 <_vfiprintf_r+0x1f8>
 80139e8:	9b03      	ldr	r3, [sp, #12]
 80139ea:	3307      	adds	r3, #7
 80139ec:	f023 0307 	bic.w	r3, r3, #7
 80139f0:	3308      	adds	r3, #8
 80139f2:	9303      	str	r3, [sp, #12]
 80139f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139f6:	443b      	add	r3, r7
 80139f8:	9309      	str	r3, [sp, #36]	; 0x24
 80139fa:	e767      	b.n	80138cc <_vfiprintf_r+0x94>
 80139fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8013a00:	460c      	mov	r4, r1
 8013a02:	2001      	movs	r0, #1
 8013a04:	e7a5      	b.n	8013952 <_vfiprintf_r+0x11a>
 8013a06:	2300      	movs	r3, #0
 8013a08:	3401      	adds	r4, #1
 8013a0a:	9305      	str	r3, [sp, #20]
 8013a0c:	4619      	mov	r1, r3
 8013a0e:	f04f 0c0a 	mov.w	ip, #10
 8013a12:	4620      	mov	r0, r4
 8013a14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a18:	3a30      	subs	r2, #48	; 0x30
 8013a1a:	2a09      	cmp	r2, #9
 8013a1c:	d903      	bls.n	8013a26 <_vfiprintf_r+0x1ee>
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d0c5      	beq.n	80139ae <_vfiprintf_r+0x176>
 8013a22:	9105      	str	r1, [sp, #20]
 8013a24:	e7c3      	b.n	80139ae <_vfiprintf_r+0x176>
 8013a26:	fb0c 2101 	mla	r1, ip, r1, r2
 8013a2a:	4604      	mov	r4, r0
 8013a2c:	2301      	movs	r3, #1
 8013a2e:	e7f0      	b.n	8013a12 <_vfiprintf_r+0x1da>
 8013a30:	ab03      	add	r3, sp, #12
 8013a32:	9300      	str	r3, [sp, #0]
 8013a34:	462a      	mov	r2, r5
 8013a36:	4b16      	ldr	r3, [pc, #88]	; (8013a90 <_vfiprintf_r+0x258>)
 8013a38:	a904      	add	r1, sp, #16
 8013a3a:	4630      	mov	r0, r6
 8013a3c:	f7fd ff7e 	bl	801193c <_printf_float>
 8013a40:	4607      	mov	r7, r0
 8013a42:	1c78      	adds	r0, r7, #1
 8013a44:	d1d6      	bne.n	80139f4 <_vfiprintf_r+0x1bc>
 8013a46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013a48:	07d9      	lsls	r1, r3, #31
 8013a4a:	d405      	bmi.n	8013a58 <_vfiprintf_r+0x220>
 8013a4c:	89ab      	ldrh	r3, [r5, #12]
 8013a4e:	059a      	lsls	r2, r3, #22
 8013a50:	d402      	bmi.n	8013a58 <_vfiprintf_r+0x220>
 8013a52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013a54:	f7ff fb0c 	bl	8013070 <__retarget_lock_release_recursive>
 8013a58:	89ab      	ldrh	r3, [r5, #12]
 8013a5a:	065b      	lsls	r3, r3, #25
 8013a5c:	f53f af12 	bmi.w	8013884 <_vfiprintf_r+0x4c>
 8013a60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a62:	e711      	b.n	8013888 <_vfiprintf_r+0x50>
 8013a64:	ab03      	add	r3, sp, #12
 8013a66:	9300      	str	r3, [sp, #0]
 8013a68:	462a      	mov	r2, r5
 8013a6a:	4b09      	ldr	r3, [pc, #36]	; (8013a90 <_vfiprintf_r+0x258>)
 8013a6c:	a904      	add	r1, sp, #16
 8013a6e:	4630      	mov	r0, r6
 8013a70:	f7fe fa08 	bl	8011e84 <_printf_i>
 8013a74:	e7e4      	b.n	8013a40 <_vfiprintf_r+0x208>
 8013a76:	bf00      	nop
 8013a78:	080144cc 	.word	0x080144cc
 8013a7c:	080144ec 	.word	0x080144ec
 8013a80:	080144ac 	.word	0x080144ac
 8013a84:	08014674 	.word	0x08014674
 8013a88:	0801467e 	.word	0x0801467e
 8013a8c:	0801193d 	.word	0x0801193d
 8013a90:	08013813 	.word	0x08013813
 8013a94:	0801467a 	.word	0x0801467a

08013a98 <__sread>:
 8013a98:	b510      	push	{r4, lr}
 8013a9a:	460c      	mov	r4, r1
 8013a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013aa0:	f000 fa70 	bl	8013f84 <_read_r>
 8013aa4:	2800      	cmp	r0, #0
 8013aa6:	bfab      	itete	ge
 8013aa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013aaa:	89a3      	ldrhlt	r3, [r4, #12]
 8013aac:	181b      	addge	r3, r3, r0
 8013aae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013ab2:	bfac      	ite	ge
 8013ab4:	6563      	strge	r3, [r4, #84]	; 0x54
 8013ab6:	81a3      	strhlt	r3, [r4, #12]
 8013ab8:	bd10      	pop	{r4, pc}

08013aba <__swrite>:
 8013aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013abe:	461f      	mov	r7, r3
 8013ac0:	898b      	ldrh	r3, [r1, #12]
 8013ac2:	05db      	lsls	r3, r3, #23
 8013ac4:	4605      	mov	r5, r0
 8013ac6:	460c      	mov	r4, r1
 8013ac8:	4616      	mov	r6, r2
 8013aca:	d505      	bpl.n	8013ad8 <__swrite+0x1e>
 8013acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ad0:	2302      	movs	r3, #2
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	f000 f9de 	bl	8013e94 <_lseek_r>
 8013ad8:	89a3      	ldrh	r3, [r4, #12]
 8013ada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013ade:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013ae2:	81a3      	strh	r3, [r4, #12]
 8013ae4:	4632      	mov	r2, r6
 8013ae6:	463b      	mov	r3, r7
 8013ae8:	4628      	mov	r0, r5
 8013aea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013aee:	f000 b877 	b.w	8013be0 <_write_r>

08013af2 <__sseek>:
 8013af2:	b510      	push	{r4, lr}
 8013af4:	460c      	mov	r4, r1
 8013af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013afa:	f000 f9cb 	bl	8013e94 <_lseek_r>
 8013afe:	1c43      	adds	r3, r0, #1
 8013b00:	89a3      	ldrh	r3, [r4, #12]
 8013b02:	bf15      	itete	ne
 8013b04:	6560      	strne	r0, [r4, #84]	; 0x54
 8013b06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013b0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013b0e:	81a3      	strheq	r3, [r4, #12]
 8013b10:	bf18      	it	ne
 8013b12:	81a3      	strhne	r3, [r4, #12]
 8013b14:	bd10      	pop	{r4, pc}

08013b16 <__sclose>:
 8013b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b1a:	f000 b8e9 	b.w	8013cf0 <_close_r>
	...

08013b20 <__swbuf_r>:
 8013b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b22:	460e      	mov	r6, r1
 8013b24:	4614      	mov	r4, r2
 8013b26:	4605      	mov	r5, r0
 8013b28:	b118      	cbz	r0, 8013b32 <__swbuf_r+0x12>
 8013b2a:	6983      	ldr	r3, [r0, #24]
 8013b2c:	b90b      	cbnz	r3, 8013b32 <__swbuf_r+0x12>
 8013b2e:	f7ff f9e9 	bl	8012f04 <__sinit>
 8013b32:	4b21      	ldr	r3, [pc, #132]	; (8013bb8 <__swbuf_r+0x98>)
 8013b34:	429c      	cmp	r4, r3
 8013b36:	d12b      	bne.n	8013b90 <__swbuf_r+0x70>
 8013b38:	686c      	ldr	r4, [r5, #4]
 8013b3a:	69a3      	ldr	r3, [r4, #24]
 8013b3c:	60a3      	str	r3, [r4, #8]
 8013b3e:	89a3      	ldrh	r3, [r4, #12]
 8013b40:	071a      	lsls	r2, r3, #28
 8013b42:	d52f      	bpl.n	8013ba4 <__swbuf_r+0x84>
 8013b44:	6923      	ldr	r3, [r4, #16]
 8013b46:	b36b      	cbz	r3, 8013ba4 <__swbuf_r+0x84>
 8013b48:	6923      	ldr	r3, [r4, #16]
 8013b4a:	6820      	ldr	r0, [r4, #0]
 8013b4c:	1ac0      	subs	r0, r0, r3
 8013b4e:	6963      	ldr	r3, [r4, #20]
 8013b50:	b2f6      	uxtb	r6, r6
 8013b52:	4283      	cmp	r3, r0
 8013b54:	4637      	mov	r7, r6
 8013b56:	dc04      	bgt.n	8013b62 <__swbuf_r+0x42>
 8013b58:	4621      	mov	r1, r4
 8013b5a:	4628      	mov	r0, r5
 8013b5c:	f000 f95e 	bl	8013e1c <_fflush_r>
 8013b60:	bb30      	cbnz	r0, 8013bb0 <__swbuf_r+0x90>
 8013b62:	68a3      	ldr	r3, [r4, #8]
 8013b64:	3b01      	subs	r3, #1
 8013b66:	60a3      	str	r3, [r4, #8]
 8013b68:	6823      	ldr	r3, [r4, #0]
 8013b6a:	1c5a      	adds	r2, r3, #1
 8013b6c:	6022      	str	r2, [r4, #0]
 8013b6e:	701e      	strb	r6, [r3, #0]
 8013b70:	6963      	ldr	r3, [r4, #20]
 8013b72:	3001      	adds	r0, #1
 8013b74:	4283      	cmp	r3, r0
 8013b76:	d004      	beq.n	8013b82 <__swbuf_r+0x62>
 8013b78:	89a3      	ldrh	r3, [r4, #12]
 8013b7a:	07db      	lsls	r3, r3, #31
 8013b7c:	d506      	bpl.n	8013b8c <__swbuf_r+0x6c>
 8013b7e:	2e0a      	cmp	r6, #10
 8013b80:	d104      	bne.n	8013b8c <__swbuf_r+0x6c>
 8013b82:	4621      	mov	r1, r4
 8013b84:	4628      	mov	r0, r5
 8013b86:	f000 f949 	bl	8013e1c <_fflush_r>
 8013b8a:	b988      	cbnz	r0, 8013bb0 <__swbuf_r+0x90>
 8013b8c:	4638      	mov	r0, r7
 8013b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b90:	4b0a      	ldr	r3, [pc, #40]	; (8013bbc <__swbuf_r+0x9c>)
 8013b92:	429c      	cmp	r4, r3
 8013b94:	d101      	bne.n	8013b9a <__swbuf_r+0x7a>
 8013b96:	68ac      	ldr	r4, [r5, #8]
 8013b98:	e7cf      	b.n	8013b3a <__swbuf_r+0x1a>
 8013b9a:	4b09      	ldr	r3, [pc, #36]	; (8013bc0 <__swbuf_r+0xa0>)
 8013b9c:	429c      	cmp	r4, r3
 8013b9e:	bf08      	it	eq
 8013ba0:	68ec      	ldreq	r4, [r5, #12]
 8013ba2:	e7ca      	b.n	8013b3a <__swbuf_r+0x1a>
 8013ba4:	4621      	mov	r1, r4
 8013ba6:	4628      	mov	r0, r5
 8013ba8:	f000 f82c 	bl	8013c04 <__swsetup_r>
 8013bac:	2800      	cmp	r0, #0
 8013bae:	d0cb      	beq.n	8013b48 <__swbuf_r+0x28>
 8013bb0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013bb4:	e7ea      	b.n	8013b8c <__swbuf_r+0x6c>
 8013bb6:	bf00      	nop
 8013bb8:	080144cc 	.word	0x080144cc
 8013bbc:	080144ec 	.word	0x080144ec
 8013bc0:	080144ac 	.word	0x080144ac

08013bc4 <__ascii_wctomb>:
 8013bc4:	b149      	cbz	r1, 8013bda <__ascii_wctomb+0x16>
 8013bc6:	2aff      	cmp	r2, #255	; 0xff
 8013bc8:	bf85      	ittet	hi
 8013bca:	238a      	movhi	r3, #138	; 0x8a
 8013bcc:	6003      	strhi	r3, [r0, #0]
 8013bce:	700a      	strbls	r2, [r1, #0]
 8013bd0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013bd4:	bf98      	it	ls
 8013bd6:	2001      	movls	r0, #1
 8013bd8:	4770      	bx	lr
 8013bda:	4608      	mov	r0, r1
 8013bdc:	4770      	bx	lr
	...

08013be0 <_write_r>:
 8013be0:	b538      	push	{r3, r4, r5, lr}
 8013be2:	4d07      	ldr	r5, [pc, #28]	; (8013c00 <_write_r+0x20>)
 8013be4:	4604      	mov	r4, r0
 8013be6:	4608      	mov	r0, r1
 8013be8:	4611      	mov	r1, r2
 8013bea:	2200      	movs	r2, #0
 8013bec:	602a      	str	r2, [r5, #0]
 8013bee:	461a      	mov	r2, r3
 8013bf0:	f000 fa86 	bl	8014100 <_write>
 8013bf4:	1c43      	adds	r3, r0, #1
 8013bf6:	d102      	bne.n	8013bfe <_write_r+0x1e>
 8013bf8:	682b      	ldr	r3, [r5, #0]
 8013bfa:	b103      	cbz	r3, 8013bfe <_write_r+0x1e>
 8013bfc:	6023      	str	r3, [r4, #0]
 8013bfe:	bd38      	pop	{r3, r4, r5, pc}
 8013c00:	200029ac 	.word	0x200029ac

08013c04 <__swsetup_r>:
 8013c04:	4b32      	ldr	r3, [pc, #200]	; (8013cd0 <__swsetup_r+0xcc>)
 8013c06:	b570      	push	{r4, r5, r6, lr}
 8013c08:	681d      	ldr	r5, [r3, #0]
 8013c0a:	4606      	mov	r6, r0
 8013c0c:	460c      	mov	r4, r1
 8013c0e:	b125      	cbz	r5, 8013c1a <__swsetup_r+0x16>
 8013c10:	69ab      	ldr	r3, [r5, #24]
 8013c12:	b913      	cbnz	r3, 8013c1a <__swsetup_r+0x16>
 8013c14:	4628      	mov	r0, r5
 8013c16:	f7ff f975 	bl	8012f04 <__sinit>
 8013c1a:	4b2e      	ldr	r3, [pc, #184]	; (8013cd4 <__swsetup_r+0xd0>)
 8013c1c:	429c      	cmp	r4, r3
 8013c1e:	d10f      	bne.n	8013c40 <__swsetup_r+0x3c>
 8013c20:	686c      	ldr	r4, [r5, #4]
 8013c22:	89a3      	ldrh	r3, [r4, #12]
 8013c24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013c28:	0719      	lsls	r1, r3, #28
 8013c2a:	d42c      	bmi.n	8013c86 <__swsetup_r+0x82>
 8013c2c:	06dd      	lsls	r5, r3, #27
 8013c2e:	d411      	bmi.n	8013c54 <__swsetup_r+0x50>
 8013c30:	2309      	movs	r3, #9
 8013c32:	6033      	str	r3, [r6, #0]
 8013c34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013c38:	81a3      	strh	r3, [r4, #12]
 8013c3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013c3e:	e03e      	b.n	8013cbe <__swsetup_r+0xba>
 8013c40:	4b25      	ldr	r3, [pc, #148]	; (8013cd8 <__swsetup_r+0xd4>)
 8013c42:	429c      	cmp	r4, r3
 8013c44:	d101      	bne.n	8013c4a <__swsetup_r+0x46>
 8013c46:	68ac      	ldr	r4, [r5, #8]
 8013c48:	e7eb      	b.n	8013c22 <__swsetup_r+0x1e>
 8013c4a:	4b24      	ldr	r3, [pc, #144]	; (8013cdc <__swsetup_r+0xd8>)
 8013c4c:	429c      	cmp	r4, r3
 8013c4e:	bf08      	it	eq
 8013c50:	68ec      	ldreq	r4, [r5, #12]
 8013c52:	e7e6      	b.n	8013c22 <__swsetup_r+0x1e>
 8013c54:	0758      	lsls	r0, r3, #29
 8013c56:	d512      	bpl.n	8013c7e <__swsetup_r+0x7a>
 8013c58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c5a:	b141      	cbz	r1, 8013c6e <__swsetup_r+0x6a>
 8013c5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c60:	4299      	cmp	r1, r3
 8013c62:	d002      	beq.n	8013c6a <__swsetup_r+0x66>
 8013c64:	4630      	mov	r0, r6
 8013c66:	f7fd fce9 	bl	801163c <_free_r>
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	6363      	str	r3, [r4, #52]	; 0x34
 8013c6e:	89a3      	ldrh	r3, [r4, #12]
 8013c70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013c74:	81a3      	strh	r3, [r4, #12]
 8013c76:	2300      	movs	r3, #0
 8013c78:	6063      	str	r3, [r4, #4]
 8013c7a:	6923      	ldr	r3, [r4, #16]
 8013c7c:	6023      	str	r3, [r4, #0]
 8013c7e:	89a3      	ldrh	r3, [r4, #12]
 8013c80:	f043 0308 	orr.w	r3, r3, #8
 8013c84:	81a3      	strh	r3, [r4, #12]
 8013c86:	6923      	ldr	r3, [r4, #16]
 8013c88:	b94b      	cbnz	r3, 8013c9e <__swsetup_r+0x9a>
 8013c8a:	89a3      	ldrh	r3, [r4, #12]
 8013c8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013c94:	d003      	beq.n	8013c9e <__swsetup_r+0x9a>
 8013c96:	4621      	mov	r1, r4
 8013c98:	4630      	mov	r0, r6
 8013c9a:	f000 f933 	bl	8013f04 <__smakebuf_r>
 8013c9e:	89a0      	ldrh	r0, [r4, #12]
 8013ca0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013ca4:	f010 0301 	ands.w	r3, r0, #1
 8013ca8:	d00a      	beq.n	8013cc0 <__swsetup_r+0xbc>
 8013caa:	2300      	movs	r3, #0
 8013cac:	60a3      	str	r3, [r4, #8]
 8013cae:	6963      	ldr	r3, [r4, #20]
 8013cb0:	425b      	negs	r3, r3
 8013cb2:	61a3      	str	r3, [r4, #24]
 8013cb4:	6923      	ldr	r3, [r4, #16]
 8013cb6:	b943      	cbnz	r3, 8013cca <__swsetup_r+0xc6>
 8013cb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013cbc:	d1ba      	bne.n	8013c34 <__swsetup_r+0x30>
 8013cbe:	bd70      	pop	{r4, r5, r6, pc}
 8013cc0:	0781      	lsls	r1, r0, #30
 8013cc2:	bf58      	it	pl
 8013cc4:	6963      	ldrpl	r3, [r4, #20]
 8013cc6:	60a3      	str	r3, [r4, #8]
 8013cc8:	e7f4      	b.n	8013cb4 <__swsetup_r+0xb0>
 8013cca:	2000      	movs	r0, #0
 8013ccc:	e7f7      	b.n	8013cbe <__swsetup_r+0xba>
 8013cce:	bf00      	nop
 8013cd0:	2000018c 	.word	0x2000018c
 8013cd4:	080144cc 	.word	0x080144cc
 8013cd8:	080144ec 	.word	0x080144ec
 8013cdc:	080144ac 	.word	0x080144ac

08013ce0 <abort>:
 8013ce0:	b508      	push	{r3, lr}
 8013ce2:	2006      	movs	r0, #6
 8013ce4:	f000 f988 	bl	8013ff8 <raise>
 8013ce8:	2001      	movs	r0, #1
 8013cea:	f000 fa11 	bl	8014110 <_exit>
	...

08013cf0 <_close_r>:
 8013cf0:	b538      	push	{r3, r4, r5, lr}
 8013cf2:	4d06      	ldr	r5, [pc, #24]	; (8013d0c <_close_r+0x1c>)
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	4604      	mov	r4, r0
 8013cf8:	4608      	mov	r0, r1
 8013cfa:	602b      	str	r3, [r5, #0]
 8013cfc:	f000 f9ba 	bl	8014074 <_close>
 8013d00:	1c43      	adds	r3, r0, #1
 8013d02:	d102      	bne.n	8013d0a <_close_r+0x1a>
 8013d04:	682b      	ldr	r3, [r5, #0]
 8013d06:	b103      	cbz	r3, 8013d0a <_close_r+0x1a>
 8013d08:	6023      	str	r3, [r4, #0]
 8013d0a:	bd38      	pop	{r3, r4, r5, pc}
 8013d0c:	200029ac 	.word	0x200029ac

08013d10 <__sflush_r>:
 8013d10:	898a      	ldrh	r2, [r1, #12]
 8013d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d16:	4605      	mov	r5, r0
 8013d18:	0710      	lsls	r0, r2, #28
 8013d1a:	460c      	mov	r4, r1
 8013d1c:	d458      	bmi.n	8013dd0 <__sflush_r+0xc0>
 8013d1e:	684b      	ldr	r3, [r1, #4]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	dc05      	bgt.n	8013d30 <__sflush_r+0x20>
 8013d24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	dc02      	bgt.n	8013d30 <__sflush_r+0x20>
 8013d2a:	2000      	movs	r0, #0
 8013d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013d32:	2e00      	cmp	r6, #0
 8013d34:	d0f9      	beq.n	8013d2a <__sflush_r+0x1a>
 8013d36:	2300      	movs	r3, #0
 8013d38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013d3c:	682f      	ldr	r7, [r5, #0]
 8013d3e:	602b      	str	r3, [r5, #0]
 8013d40:	d032      	beq.n	8013da8 <__sflush_r+0x98>
 8013d42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013d44:	89a3      	ldrh	r3, [r4, #12]
 8013d46:	075a      	lsls	r2, r3, #29
 8013d48:	d505      	bpl.n	8013d56 <__sflush_r+0x46>
 8013d4a:	6863      	ldr	r3, [r4, #4]
 8013d4c:	1ac0      	subs	r0, r0, r3
 8013d4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013d50:	b10b      	cbz	r3, 8013d56 <__sflush_r+0x46>
 8013d52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013d54:	1ac0      	subs	r0, r0, r3
 8013d56:	2300      	movs	r3, #0
 8013d58:	4602      	mov	r2, r0
 8013d5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013d5c:	6a21      	ldr	r1, [r4, #32]
 8013d5e:	4628      	mov	r0, r5
 8013d60:	47b0      	blx	r6
 8013d62:	1c43      	adds	r3, r0, #1
 8013d64:	89a3      	ldrh	r3, [r4, #12]
 8013d66:	d106      	bne.n	8013d76 <__sflush_r+0x66>
 8013d68:	6829      	ldr	r1, [r5, #0]
 8013d6a:	291d      	cmp	r1, #29
 8013d6c:	d82c      	bhi.n	8013dc8 <__sflush_r+0xb8>
 8013d6e:	4a2a      	ldr	r2, [pc, #168]	; (8013e18 <__sflush_r+0x108>)
 8013d70:	40ca      	lsrs	r2, r1
 8013d72:	07d6      	lsls	r6, r2, #31
 8013d74:	d528      	bpl.n	8013dc8 <__sflush_r+0xb8>
 8013d76:	2200      	movs	r2, #0
 8013d78:	6062      	str	r2, [r4, #4]
 8013d7a:	04d9      	lsls	r1, r3, #19
 8013d7c:	6922      	ldr	r2, [r4, #16]
 8013d7e:	6022      	str	r2, [r4, #0]
 8013d80:	d504      	bpl.n	8013d8c <__sflush_r+0x7c>
 8013d82:	1c42      	adds	r2, r0, #1
 8013d84:	d101      	bne.n	8013d8a <__sflush_r+0x7a>
 8013d86:	682b      	ldr	r3, [r5, #0]
 8013d88:	b903      	cbnz	r3, 8013d8c <__sflush_r+0x7c>
 8013d8a:	6560      	str	r0, [r4, #84]	; 0x54
 8013d8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013d8e:	602f      	str	r7, [r5, #0]
 8013d90:	2900      	cmp	r1, #0
 8013d92:	d0ca      	beq.n	8013d2a <__sflush_r+0x1a>
 8013d94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013d98:	4299      	cmp	r1, r3
 8013d9a:	d002      	beq.n	8013da2 <__sflush_r+0x92>
 8013d9c:	4628      	mov	r0, r5
 8013d9e:	f7fd fc4d 	bl	801163c <_free_r>
 8013da2:	2000      	movs	r0, #0
 8013da4:	6360      	str	r0, [r4, #52]	; 0x34
 8013da6:	e7c1      	b.n	8013d2c <__sflush_r+0x1c>
 8013da8:	6a21      	ldr	r1, [r4, #32]
 8013daa:	2301      	movs	r3, #1
 8013dac:	4628      	mov	r0, r5
 8013dae:	47b0      	blx	r6
 8013db0:	1c41      	adds	r1, r0, #1
 8013db2:	d1c7      	bne.n	8013d44 <__sflush_r+0x34>
 8013db4:	682b      	ldr	r3, [r5, #0]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d0c4      	beq.n	8013d44 <__sflush_r+0x34>
 8013dba:	2b1d      	cmp	r3, #29
 8013dbc:	d001      	beq.n	8013dc2 <__sflush_r+0xb2>
 8013dbe:	2b16      	cmp	r3, #22
 8013dc0:	d101      	bne.n	8013dc6 <__sflush_r+0xb6>
 8013dc2:	602f      	str	r7, [r5, #0]
 8013dc4:	e7b1      	b.n	8013d2a <__sflush_r+0x1a>
 8013dc6:	89a3      	ldrh	r3, [r4, #12]
 8013dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013dcc:	81a3      	strh	r3, [r4, #12]
 8013dce:	e7ad      	b.n	8013d2c <__sflush_r+0x1c>
 8013dd0:	690f      	ldr	r7, [r1, #16]
 8013dd2:	2f00      	cmp	r7, #0
 8013dd4:	d0a9      	beq.n	8013d2a <__sflush_r+0x1a>
 8013dd6:	0793      	lsls	r3, r2, #30
 8013dd8:	680e      	ldr	r6, [r1, #0]
 8013dda:	bf08      	it	eq
 8013ddc:	694b      	ldreq	r3, [r1, #20]
 8013dde:	600f      	str	r7, [r1, #0]
 8013de0:	bf18      	it	ne
 8013de2:	2300      	movne	r3, #0
 8013de4:	eba6 0807 	sub.w	r8, r6, r7
 8013de8:	608b      	str	r3, [r1, #8]
 8013dea:	f1b8 0f00 	cmp.w	r8, #0
 8013dee:	dd9c      	ble.n	8013d2a <__sflush_r+0x1a>
 8013df0:	6a21      	ldr	r1, [r4, #32]
 8013df2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013df4:	4643      	mov	r3, r8
 8013df6:	463a      	mov	r2, r7
 8013df8:	4628      	mov	r0, r5
 8013dfa:	47b0      	blx	r6
 8013dfc:	2800      	cmp	r0, #0
 8013dfe:	dc06      	bgt.n	8013e0e <__sflush_r+0xfe>
 8013e00:	89a3      	ldrh	r3, [r4, #12]
 8013e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e06:	81a3      	strh	r3, [r4, #12]
 8013e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e0c:	e78e      	b.n	8013d2c <__sflush_r+0x1c>
 8013e0e:	4407      	add	r7, r0
 8013e10:	eba8 0800 	sub.w	r8, r8, r0
 8013e14:	e7e9      	b.n	8013dea <__sflush_r+0xda>
 8013e16:	bf00      	nop
 8013e18:	20400001 	.word	0x20400001

08013e1c <_fflush_r>:
 8013e1c:	b538      	push	{r3, r4, r5, lr}
 8013e1e:	690b      	ldr	r3, [r1, #16]
 8013e20:	4605      	mov	r5, r0
 8013e22:	460c      	mov	r4, r1
 8013e24:	b913      	cbnz	r3, 8013e2c <_fflush_r+0x10>
 8013e26:	2500      	movs	r5, #0
 8013e28:	4628      	mov	r0, r5
 8013e2a:	bd38      	pop	{r3, r4, r5, pc}
 8013e2c:	b118      	cbz	r0, 8013e36 <_fflush_r+0x1a>
 8013e2e:	6983      	ldr	r3, [r0, #24]
 8013e30:	b90b      	cbnz	r3, 8013e36 <_fflush_r+0x1a>
 8013e32:	f7ff f867 	bl	8012f04 <__sinit>
 8013e36:	4b14      	ldr	r3, [pc, #80]	; (8013e88 <_fflush_r+0x6c>)
 8013e38:	429c      	cmp	r4, r3
 8013e3a:	d11b      	bne.n	8013e74 <_fflush_r+0x58>
 8013e3c:	686c      	ldr	r4, [r5, #4]
 8013e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d0ef      	beq.n	8013e26 <_fflush_r+0xa>
 8013e46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013e48:	07d0      	lsls	r0, r2, #31
 8013e4a:	d404      	bmi.n	8013e56 <_fflush_r+0x3a>
 8013e4c:	0599      	lsls	r1, r3, #22
 8013e4e:	d402      	bmi.n	8013e56 <_fflush_r+0x3a>
 8013e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e52:	f7ff f90c 	bl	801306e <__retarget_lock_acquire_recursive>
 8013e56:	4628      	mov	r0, r5
 8013e58:	4621      	mov	r1, r4
 8013e5a:	f7ff ff59 	bl	8013d10 <__sflush_r>
 8013e5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013e60:	07da      	lsls	r2, r3, #31
 8013e62:	4605      	mov	r5, r0
 8013e64:	d4e0      	bmi.n	8013e28 <_fflush_r+0xc>
 8013e66:	89a3      	ldrh	r3, [r4, #12]
 8013e68:	059b      	lsls	r3, r3, #22
 8013e6a:	d4dd      	bmi.n	8013e28 <_fflush_r+0xc>
 8013e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e6e:	f7ff f8ff 	bl	8013070 <__retarget_lock_release_recursive>
 8013e72:	e7d9      	b.n	8013e28 <_fflush_r+0xc>
 8013e74:	4b05      	ldr	r3, [pc, #20]	; (8013e8c <_fflush_r+0x70>)
 8013e76:	429c      	cmp	r4, r3
 8013e78:	d101      	bne.n	8013e7e <_fflush_r+0x62>
 8013e7a:	68ac      	ldr	r4, [r5, #8]
 8013e7c:	e7df      	b.n	8013e3e <_fflush_r+0x22>
 8013e7e:	4b04      	ldr	r3, [pc, #16]	; (8013e90 <_fflush_r+0x74>)
 8013e80:	429c      	cmp	r4, r3
 8013e82:	bf08      	it	eq
 8013e84:	68ec      	ldreq	r4, [r5, #12]
 8013e86:	e7da      	b.n	8013e3e <_fflush_r+0x22>
 8013e88:	080144cc 	.word	0x080144cc
 8013e8c:	080144ec 	.word	0x080144ec
 8013e90:	080144ac 	.word	0x080144ac

08013e94 <_lseek_r>:
 8013e94:	b538      	push	{r3, r4, r5, lr}
 8013e96:	4d07      	ldr	r5, [pc, #28]	; (8013eb4 <_lseek_r+0x20>)
 8013e98:	4604      	mov	r4, r0
 8013e9a:	4608      	mov	r0, r1
 8013e9c:	4611      	mov	r1, r2
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	602a      	str	r2, [r5, #0]
 8013ea2:	461a      	mov	r2, r3
 8013ea4:	f000 f90e 	bl	80140c4 <_lseek>
 8013ea8:	1c43      	adds	r3, r0, #1
 8013eaa:	d102      	bne.n	8013eb2 <_lseek_r+0x1e>
 8013eac:	682b      	ldr	r3, [r5, #0]
 8013eae:	b103      	cbz	r3, 8013eb2 <_lseek_r+0x1e>
 8013eb0:	6023      	str	r3, [r4, #0]
 8013eb2:	bd38      	pop	{r3, r4, r5, pc}
 8013eb4:	200029ac 	.word	0x200029ac

08013eb8 <__swhatbuf_r>:
 8013eb8:	b570      	push	{r4, r5, r6, lr}
 8013eba:	460e      	mov	r6, r1
 8013ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ec0:	2900      	cmp	r1, #0
 8013ec2:	b096      	sub	sp, #88	; 0x58
 8013ec4:	4614      	mov	r4, r2
 8013ec6:	461d      	mov	r5, r3
 8013ec8:	da08      	bge.n	8013edc <__swhatbuf_r+0x24>
 8013eca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013ece:	2200      	movs	r2, #0
 8013ed0:	602a      	str	r2, [r5, #0]
 8013ed2:	061a      	lsls	r2, r3, #24
 8013ed4:	d410      	bmi.n	8013ef8 <__swhatbuf_r+0x40>
 8013ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013eda:	e00e      	b.n	8013efa <__swhatbuf_r+0x42>
 8013edc:	466a      	mov	r2, sp
 8013ede:	f000 f8a7 	bl	8014030 <_fstat_r>
 8013ee2:	2800      	cmp	r0, #0
 8013ee4:	dbf1      	blt.n	8013eca <__swhatbuf_r+0x12>
 8013ee6:	9a01      	ldr	r2, [sp, #4]
 8013ee8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013eec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013ef0:	425a      	negs	r2, r3
 8013ef2:	415a      	adcs	r2, r3
 8013ef4:	602a      	str	r2, [r5, #0]
 8013ef6:	e7ee      	b.n	8013ed6 <__swhatbuf_r+0x1e>
 8013ef8:	2340      	movs	r3, #64	; 0x40
 8013efa:	2000      	movs	r0, #0
 8013efc:	6023      	str	r3, [r4, #0]
 8013efe:	b016      	add	sp, #88	; 0x58
 8013f00:	bd70      	pop	{r4, r5, r6, pc}
	...

08013f04 <__smakebuf_r>:
 8013f04:	898b      	ldrh	r3, [r1, #12]
 8013f06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013f08:	079d      	lsls	r5, r3, #30
 8013f0a:	4606      	mov	r6, r0
 8013f0c:	460c      	mov	r4, r1
 8013f0e:	d507      	bpl.n	8013f20 <__smakebuf_r+0x1c>
 8013f10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013f14:	6023      	str	r3, [r4, #0]
 8013f16:	6123      	str	r3, [r4, #16]
 8013f18:	2301      	movs	r3, #1
 8013f1a:	6163      	str	r3, [r4, #20]
 8013f1c:	b002      	add	sp, #8
 8013f1e:	bd70      	pop	{r4, r5, r6, pc}
 8013f20:	ab01      	add	r3, sp, #4
 8013f22:	466a      	mov	r2, sp
 8013f24:	f7ff ffc8 	bl	8013eb8 <__swhatbuf_r>
 8013f28:	9900      	ldr	r1, [sp, #0]
 8013f2a:	4605      	mov	r5, r0
 8013f2c:	4630      	mov	r0, r6
 8013f2e:	f7fd fbf1 	bl	8011714 <_malloc_r>
 8013f32:	b948      	cbnz	r0, 8013f48 <__smakebuf_r+0x44>
 8013f34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f38:	059a      	lsls	r2, r3, #22
 8013f3a:	d4ef      	bmi.n	8013f1c <__smakebuf_r+0x18>
 8013f3c:	f023 0303 	bic.w	r3, r3, #3
 8013f40:	f043 0302 	orr.w	r3, r3, #2
 8013f44:	81a3      	strh	r3, [r4, #12]
 8013f46:	e7e3      	b.n	8013f10 <__smakebuf_r+0xc>
 8013f48:	4b0d      	ldr	r3, [pc, #52]	; (8013f80 <__smakebuf_r+0x7c>)
 8013f4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8013f4c:	89a3      	ldrh	r3, [r4, #12]
 8013f4e:	6020      	str	r0, [r4, #0]
 8013f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f54:	81a3      	strh	r3, [r4, #12]
 8013f56:	9b00      	ldr	r3, [sp, #0]
 8013f58:	6163      	str	r3, [r4, #20]
 8013f5a:	9b01      	ldr	r3, [sp, #4]
 8013f5c:	6120      	str	r0, [r4, #16]
 8013f5e:	b15b      	cbz	r3, 8013f78 <__smakebuf_r+0x74>
 8013f60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f64:	4630      	mov	r0, r6
 8013f66:	f000 f875 	bl	8014054 <_isatty_r>
 8013f6a:	b128      	cbz	r0, 8013f78 <__smakebuf_r+0x74>
 8013f6c:	89a3      	ldrh	r3, [r4, #12]
 8013f6e:	f023 0303 	bic.w	r3, r3, #3
 8013f72:	f043 0301 	orr.w	r3, r3, #1
 8013f76:	81a3      	strh	r3, [r4, #12]
 8013f78:	89a0      	ldrh	r0, [r4, #12]
 8013f7a:	4305      	orrs	r5, r0
 8013f7c:	81a5      	strh	r5, [r4, #12]
 8013f7e:	e7cd      	b.n	8013f1c <__smakebuf_r+0x18>
 8013f80:	08012e9d 	.word	0x08012e9d

08013f84 <_read_r>:
 8013f84:	b538      	push	{r3, r4, r5, lr}
 8013f86:	4d07      	ldr	r5, [pc, #28]	; (8013fa4 <_read_r+0x20>)
 8013f88:	4604      	mov	r4, r0
 8013f8a:	4608      	mov	r0, r1
 8013f8c:	4611      	mov	r1, r2
 8013f8e:	2200      	movs	r2, #0
 8013f90:	602a      	str	r2, [r5, #0]
 8013f92:	461a      	mov	r2, r3
 8013f94:	f000 f89e 	bl	80140d4 <_read>
 8013f98:	1c43      	adds	r3, r0, #1
 8013f9a:	d102      	bne.n	8013fa2 <_read_r+0x1e>
 8013f9c:	682b      	ldr	r3, [r5, #0]
 8013f9e:	b103      	cbz	r3, 8013fa2 <_read_r+0x1e>
 8013fa0:	6023      	str	r3, [r4, #0]
 8013fa2:	bd38      	pop	{r3, r4, r5, pc}
 8013fa4:	200029ac 	.word	0x200029ac

08013fa8 <_raise_r>:
 8013fa8:	291f      	cmp	r1, #31
 8013faa:	b538      	push	{r3, r4, r5, lr}
 8013fac:	4604      	mov	r4, r0
 8013fae:	460d      	mov	r5, r1
 8013fb0:	d904      	bls.n	8013fbc <_raise_r+0x14>
 8013fb2:	2316      	movs	r3, #22
 8013fb4:	6003      	str	r3, [r0, #0]
 8013fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013fba:	bd38      	pop	{r3, r4, r5, pc}
 8013fbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013fbe:	b112      	cbz	r2, 8013fc6 <_raise_r+0x1e>
 8013fc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013fc4:	b94b      	cbnz	r3, 8013fda <_raise_r+0x32>
 8013fc6:	4620      	mov	r0, r4
 8013fc8:	f000 f830 	bl	801402c <_getpid_r>
 8013fcc:	462a      	mov	r2, r5
 8013fce:	4601      	mov	r1, r0
 8013fd0:	4620      	mov	r0, r4
 8013fd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013fd6:	f000 b817 	b.w	8014008 <_kill_r>
 8013fda:	2b01      	cmp	r3, #1
 8013fdc:	d00a      	beq.n	8013ff4 <_raise_r+0x4c>
 8013fde:	1c59      	adds	r1, r3, #1
 8013fe0:	d103      	bne.n	8013fea <_raise_r+0x42>
 8013fe2:	2316      	movs	r3, #22
 8013fe4:	6003      	str	r3, [r0, #0]
 8013fe6:	2001      	movs	r0, #1
 8013fe8:	e7e7      	b.n	8013fba <_raise_r+0x12>
 8013fea:	2400      	movs	r4, #0
 8013fec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013ff0:	4628      	mov	r0, r5
 8013ff2:	4798      	blx	r3
 8013ff4:	2000      	movs	r0, #0
 8013ff6:	e7e0      	b.n	8013fba <_raise_r+0x12>

08013ff8 <raise>:
 8013ff8:	4b02      	ldr	r3, [pc, #8]	; (8014004 <raise+0xc>)
 8013ffa:	4601      	mov	r1, r0
 8013ffc:	6818      	ldr	r0, [r3, #0]
 8013ffe:	f7ff bfd3 	b.w	8013fa8 <_raise_r>
 8014002:	bf00      	nop
 8014004:	2000018c 	.word	0x2000018c

08014008 <_kill_r>:
 8014008:	b538      	push	{r3, r4, r5, lr}
 801400a:	4d07      	ldr	r5, [pc, #28]	; (8014028 <_kill_r+0x20>)
 801400c:	2300      	movs	r3, #0
 801400e:	4604      	mov	r4, r0
 8014010:	4608      	mov	r0, r1
 8014012:	4611      	mov	r1, r2
 8014014:	602b      	str	r3, [r5, #0]
 8014016:	f000 f84d 	bl	80140b4 <_kill>
 801401a:	1c43      	adds	r3, r0, #1
 801401c:	d102      	bne.n	8014024 <_kill_r+0x1c>
 801401e:	682b      	ldr	r3, [r5, #0]
 8014020:	b103      	cbz	r3, 8014024 <_kill_r+0x1c>
 8014022:	6023      	str	r3, [r4, #0]
 8014024:	bd38      	pop	{r3, r4, r5, pc}
 8014026:	bf00      	nop
 8014028:	200029ac 	.word	0x200029ac

0801402c <_getpid_r>:
 801402c:	f000 b832 	b.w	8014094 <_getpid>

08014030 <_fstat_r>:
 8014030:	b538      	push	{r3, r4, r5, lr}
 8014032:	4d07      	ldr	r5, [pc, #28]	; (8014050 <_fstat_r+0x20>)
 8014034:	2300      	movs	r3, #0
 8014036:	4604      	mov	r4, r0
 8014038:	4608      	mov	r0, r1
 801403a:	4611      	mov	r1, r2
 801403c:	602b      	str	r3, [r5, #0]
 801403e:	f000 f821 	bl	8014084 <_fstat>
 8014042:	1c43      	adds	r3, r0, #1
 8014044:	d102      	bne.n	801404c <_fstat_r+0x1c>
 8014046:	682b      	ldr	r3, [r5, #0]
 8014048:	b103      	cbz	r3, 801404c <_fstat_r+0x1c>
 801404a:	6023      	str	r3, [r4, #0]
 801404c:	bd38      	pop	{r3, r4, r5, pc}
 801404e:	bf00      	nop
 8014050:	200029ac 	.word	0x200029ac

08014054 <_isatty_r>:
 8014054:	b538      	push	{r3, r4, r5, lr}
 8014056:	4d06      	ldr	r5, [pc, #24]	; (8014070 <_isatty_r+0x1c>)
 8014058:	2300      	movs	r3, #0
 801405a:	4604      	mov	r4, r0
 801405c:	4608      	mov	r0, r1
 801405e:	602b      	str	r3, [r5, #0]
 8014060:	f000 f820 	bl	80140a4 <_isatty>
 8014064:	1c43      	adds	r3, r0, #1
 8014066:	d102      	bne.n	801406e <_isatty_r+0x1a>
 8014068:	682b      	ldr	r3, [r5, #0]
 801406a:	b103      	cbz	r3, 801406e <_isatty_r+0x1a>
 801406c:	6023      	str	r3, [r4, #0]
 801406e:	bd38      	pop	{r3, r4, r5, pc}
 8014070:	200029ac 	.word	0x200029ac

08014074 <_close>:
 8014074:	4b02      	ldr	r3, [pc, #8]	; (8014080 <_close+0xc>)
 8014076:	2258      	movs	r2, #88	; 0x58
 8014078:	601a      	str	r2, [r3, #0]
 801407a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801407e:	4770      	bx	lr
 8014080:	200029ac 	.word	0x200029ac

08014084 <_fstat>:
 8014084:	4b02      	ldr	r3, [pc, #8]	; (8014090 <_fstat+0xc>)
 8014086:	2258      	movs	r2, #88	; 0x58
 8014088:	601a      	str	r2, [r3, #0]
 801408a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801408e:	4770      	bx	lr
 8014090:	200029ac 	.word	0x200029ac

08014094 <_getpid>:
 8014094:	4b02      	ldr	r3, [pc, #8]	; (80140a0 <_getpid+0xc>)
 8014096:	2258      	movs	r2, #88	; 0x58
 8014098:	601a      	str	r2, [r3, #0]
 801409a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801409e:	4770      	bx	lr
 80140a0:	200029ac 	.word	0x200029ac

080140a4 <_isatty>:
 80140a4:	4b02      	ldr	r3, [pc, #8]	; (80140b0 <_isatty+0xc>)
 80140a6:	2258      	movs	r2, #88	; 0x58
 80140a8:	601a      	str	r2, [r3, #0]
 80140aa:	2000      	movs	r0, #0
 80140ac:	4770      	bx	lr
 80140ae:	bf00      	nop
 80140b0:	200029ac 	.word	0x200029ac

080140b4 <_kill>:
 80140b4:	4b02      	ldr	r3, [pc, #8]	; (80140c0 <_kill+0xc>)
 80140b6:	2258      	movs	r2, #88	; 0x58
 80140b8:	601a      	str	r2, [r3, #0]
 80140ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80140be:	4770      	bx	lr
 80140c0:	200029ac 	.word	0x200029ac

080140c4 <_lseek>:
 80140c4:	4b02      	ldr	r3, [pc, #8]	; (80140d0 <_lseek+0xc>)
 80140c6:	2258      	movs	r2, #88	; 0x58
 80140c8:	601a      	str	r2, [r3, #0]
 80140ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80140ce:	4770      	bx	lr
 80140d0:	200029ac 	.word	0x200029ac

080140d4 <_read>:
 80140d4:	4b02      	ldr	r3, [pc, #8]	; (80140e0 <_read+0xc>)
 80140d6:	2258      	movs	r2, #88	; 0x58
 80140d8:	601a      	str	r2, [r3, #0]
 80140da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80140de:	4770      	bx	lr
 80140e0:	200029ac 	.word	0x200029ac

080140e4 <_sbrk>:
 80140e4:	4a04      	ldr	r2, [pc, #16]	; (80140f8 <_sbrk+0x14>)
 80140e6:	6811      	ldr	r1, [r2, #0]
 80140e8:	4603      	mov	r3, r0
 80140ea:	b909      	cbnz	r1, 80140f0 <_sbrk+0xc>
 80140ec:	4903      	ldr	r1, [pc, #12]	; (80140fc <_sbrk+0x18>)
 80140ee:	6011      	str	r1, [r2, #0]
 80140f0:	6810      	ldr	r0, [r2, #0]
 80140f2:	4403      	add	r3, r0
 80140f4:	6013      	str	r3, [r2, #0]
 80140f6:	4770      	bx	lr
 80140f8:	200029b0 	.word	0x200029b0
 80140fc:	200029b8 	.word	0x200029b8

08014100 <_write>:
 8014100:	4b02      	ldr	r3, [pc, #8]	; (801410c <_write+0xc>)
 8014102:	2258      	movs	r2, #88	; 0x58
 8014104:	601a      	str	r2, [r3, #0]
 8014106:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801410a:	4770      	bx	lr
 801410c:	200029ac 	.word	0x200029ac

08014110 <_exit>:
 8014110:	e7fe      	b.n	8014110 <_exit>
	...

08014114 <_init>:
 8014114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014116:	bf00      	nop
 8014118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801411a:	bc08      	pop	{r3}
 801411c:	469e      	mov	lr, r3
 801411e:	4770      	bx	lr

08014120 <_fini>:
 8014120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014122:	bf00      	nop
 8014124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014126:	bc08      	pop	{r3}
 8014128:	469e      	mov	lr, r3
 801412a:	4770      	bx	lr
