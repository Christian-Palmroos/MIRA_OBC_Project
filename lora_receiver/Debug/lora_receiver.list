
lora_receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013f24  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  080140e8  080140e8  000240e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014640  08014640  0003035c  2**0
                  CONTENTS
  4 .ARM          00000008  08014640  08014640  00024640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014648  08014648  0003035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014648  08014648  00024648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801464c  0801464c  0002464c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000035c  20000000  08014650  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002658  2000035c  080149ac  0003035c  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200029b4  080149ac  000329b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003035c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b90a  00000000  00000000  0003038c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005797  00000000  00000000  0005bc96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002308  00000000  00000000  00061430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020c0  00000000  00000000  00063738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008378  00000000  00000000  000657f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c873  00000000  00000000  0006db70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011c67b  00000000  00000000  0009a3e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b6a5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a5f8  00000000  00000000  001b6ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001c10a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001c1174  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000035c 	.word	0x2000035c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080140cc 	.word	0x080140cc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000360 	.word	0x20000360
 80001fc:	080140cc 	.word	0x080140cc

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8000ee6:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000ee8:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <BSP_I2C2_Init+0x74>)
 8000eea:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <BSP_I2C2_Init+0x78>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	4918      	ldr	r1, [pc, #96]	; (8000f54 <BSP_I2C2_Init+0x78>)
 8000ef4:	600a      	str	r2, [r1, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d122      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8000efa:	4814      	ldr	r0, [pc, #80]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000efc:	f002 fc87 	bl	800380e <HAL_I2C_GetState>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d11c      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8000f06:	4811      	ldr	r0, [pc, #68]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f08:	f000 f86a 	bl	8000fe0 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d116      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8000f12:	480e      	ldr	r0, [pc, #56]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f14:	f000 f820 	bl	8000f58 <MX_I2C2_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f1e:	f06f 0307 	mvn.w	r3, #7
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	e00c      	b.n	8000f40 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f26:	2100      	movs	r1, #0
 8000f28:	4808      	ldr	r0, [pc, #32]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f2a:	f002 fc7e 	bl	800382a <HAL_I2CEx_ConfigAnalogFilter>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f34:	f06f 0307 	mvn.w	r3, #7
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	e001      	b.n	8000f40 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000378 	.word	0x20000378
 8000f50:	40005800 	.word	0x40005800
 8000f54:	200003cc 	.word	0x200003cc

08000f58 <MX_I2C2_Init>:
}

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <MX_I2C2_Init+0x80>)
 8000f68:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x307075B1;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <MX_I2C2_Init+0x84>)
 8000f6e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f002 fba8 	bl	80036f0 <HAL_I2C_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000faa:	2100      	movs	r1, #0
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f002 fc3c 	bl	800382a <HAL_I2CEx_ConfigAnalogFilter>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f002 fc7e 	bl	80038c0 <HAL_I2CEx_ConfigDigitalFilter>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40005800 	.word	0x40005800
 8000fdc:	307075b1 	.word	0x307075b1

08000fe0 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0ae      	sub	sp, #184	; 0xb8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	2294      	movs	r2, #148	; 0x94
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f010 faf7 	bl	80115e4 <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4618      	mov	r0, r3
 8001004:	f004 fe4c 	bl	8005ca0 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001008:	4b23      	ldr	r3, [pc, #140]	; (8001098 <I2C2_MspInit+0xb8>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	4a22      	ldr	r2, [pc, #136]	; (8001098 <I2C2_MspInit+0xb8>)
 800100e:	f043 0302 	orr.w	r3, r3, #2
 8001012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001014:	4b20      	ldr	r3, [pc, #128]	; (8001098 <I2C2_MspInit+0xb8>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8001020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001024:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001028:	2312      	movs	r3, #18
 800102a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 800103a:	2304      	movs	r3, #4
 800103c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001040:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001044:	4619      	mov	r1, r3
 8001046:	4815      	ldr	r0, [pc, #84]	; (800109c <I2C2_MspInit+0xbc>)
 8001048:	f002 f976 	bl	8003338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 800104c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001050:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001054:	2312      	movs	r3, #18
 8001056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8001066:	2304      	movs	r3, #4
 8001068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 800106c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001070:	4619      	mov	r1, r3
 8001072:	480a      	ldr	r0, [pc, #40]	; (800109c <I2C2_MspInit+0xbc>)
 8001074:	f002 f960 	bl	8003338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <I2C2_MspInit+0xb8>)
 800107a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107c:	4a06      	ldr	r2, [pc, #24]	; (8001098 <I2C2_MspInit+0xb8>)
 800107e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001082:	6593      	str	r3, [r2, #88]	; 0x58
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <I2C2_MspInit+0xb8>)
 8001086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001090:	bf00      	nop
 8001092:	37b8      	adds	r7, #184	; 0xb8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40021000 	.word	0x40021000
 800109c:	48000400 	.word	0x48000400

080010a0 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6858      	ldr	r0, [r3, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	8adb      	ldrh	r3, [r3, #22]
 80010c2:	2200      	movs	r2, #0
 80010c4:	4619      	mov	r1, r3
 80010c6:	f002 fae1 	bl	800368c <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	1cf9      	adds	r1, r7, #3
 80010d4:	2201      	movs	r2, #1
 80010d6:	f008 f811 	bl	80090fc <HAL_SPI_Transmit>
 80010da:	4603      	mov	r3, r0
 80010dc:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6818      	ldr	r0, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f107 010f 	add.w	r1, r7, #15
 80010ea:	2201      	movs	r2, #1
 80010ec:	f008 f974 	bl	80093d8 <HAL_SPI_Receive>
 80010f0:	4603      	mov	r3, r0
 80010f2:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6858      	ldr	r0, [r3, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	8adb      	ldrh	r3, [r3, #22]
 80010fc:	2201      	movs	r2, #1
 80010fe:	4619      	mov	r1, r3
 8001100:	f002 fac4 	bl	800368c <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8001104:	7bfb      	ldrb	r3, [r7, #15]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	460b      	mov	r3, r1
 8001118:	70fb      	strb	r3, [r7, #3]
 800111a:	4613      	mov	r3, r2
 800111c:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 800111e:	78fb      	ldrb	r3, [r7, #3]
 8001120:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001124:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8001126:	78bb      	ldrb	r3, [r7, #2]
 8001128:	021b      	lsls	r3, r3, #8
 800112a:	b21a      	sxth	r2, r3
 800112c:	78fb      	ldrb	r3, [r7, #3]
 800112e:	b21b      	sxth	r3, r3
 8001130:	4313      	orrs	r3, r2
 8001132:	b21b      	sxth	r3, r3
 8001134:	b29b      	uxth	r3, r3
 8001136:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6858      	ldr	r0, [r3, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	8adb      	ldrh	r3, [r3, #22]
 8001140:	2200      	movs	r2, #0
 8001142:	4619      	mov	r1, r3
 8001144:	f002 faa2 	bl	800368c <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6818      	ldr	r0, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f107 010a 	add.w	r1, r7, #10
 8001154:	2202      	movs	r2, #2
 8001156:	f007 ffd1 	bl	80090fc <HAL_SPI_Transmit>
 800115a:	4603      	mov	r3, r0
 800115c:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6858      	ldr	r0, [r3, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	8adb      	ldrh	r3, [r3, #22]
 8001166:	2201      	movs	r2, #1
 8001168:	4619      	mov	r1, r3
 800116a:	f002 fa8f 	bl	800368c <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b088      	sub	sp, #32
 800117a:	af00      	add	r7, sp, #0
 800117c:	60f8      	str	r0, [r7, #12]
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	4611      	mov	r1, r2
 8001182:	461a      	mov	r2, r3
 8001184:	460b      	mov	r3, r1
 8001186:	71fb      	strb	r3, [r7, #7]
 8001188:	4613      	mov	r3, r2
 800118a:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6858      	ldr	r0, [r3, #4]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	8adb      	ldrh	r3, [r3, #22]
 8001198:	2200      	movs	r2, #0
 800119a:	4619      	mov	r1, r3
 800119c:	f002 fa76 	bl	800368c <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f107 0117 	add.w	r1, r7, #23
 80011ac:	2201      	movs	r2, #1
 80011ae:	f007 ffa5 	bl	80090fc <HAL_SPI_Transmit>
 80011b2:	4603      	mov	r3, r0
 80011b4:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 80011b6:	79bb      	ldrb	r3, [r7, #6]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d108      	bne.n	80011ce <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	79fa      	ldrb	r2, [r7, #7]
 80011c2:	b292      	uxth	r2, r2
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f008 fc4a 	bl	8009a60 <HAL_SPI_Transmit_DMA>
 80011cc:	e012      	b.n	80011f4 <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6818      	ldr	r0, [r3, #0]
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	68b9      	ldr	r1, [r7, #8]
 80011dc:	f007 ff8e 	bl	80090fc <HAL_SPI_Transmit>
 80011e0:	4603      	mov	r3, r0
 80011e2:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6858      	ldr	r0, [r3, #4]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	8adb      	ldrh	r3, [r3, #22]
 80011ec:	2201      	movs	r2, #1
 80011ee:	4619      	mov	r1, r3
 80011f0:	f002 fa4c 	bl	800368c <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 80011f4:	3720      	adds	r7, #32
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <read_fifo>:

// Reads data "len" size from FIFO into buffer
static void read_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b088      	sub	sp, #32
 80011fe:	af00      	add	r7, sp, #0
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	4611      	mov	r1, r2
 8001206:	461a      	mov	r2, r3
 8001208:	460b      	mov	r3, r1
 800120a:	71fb      	strb	r3, [r7, #7]
 800120c:	4613      	mov	r3, r2
 800120e:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO;
 8001210:	2300      	movs	r3, #0
 8001212:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6858      	ldr	r0, [r3, #4]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	8adb      	ldrh	r3, [r3, #22]
 800121c:	2200      	movs	r2, #0
 800121e:	4619      	mov	r1, r3
 8001220:	f002 fa34 	bl	800368c <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6818      	ldr	r0, [r3, #0]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f107 0117 	add.w	r1, r7, #23
 8001230:	2201      	movs	r2, #1
 8001232:	f007 ff63 	bl	80090fc <HAL_SPI_Transmit>
 8001236:	4603      	mov	r3, r0
 8001238:	61fb      	str	r3, [r7, #28]
  uint32_t res2;
  if (mode == TRANSFER_MODE_DMA) {
 800123a:	79bb      	ldrb	r3, [r7, #6]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d10a      	bne.n	8001256 <read_fifo+0x5c>
    res2 = HAL_SPI_Receive_DMA(lora->spi, buffer, len);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	79fa      	ldrb	r2, [r7, #7]
 8001246:	b292      	uxth	r2, r2
 8001248:	68b9      	ldr	r1, [r7, #8]
 800124a:	4618      	mov	r0, r3
 800124c:	f008 fcfc 	bl	8009c48 <HAL_SPI_Receive_DMA>
 8001250:	4603      	mov	r3, r0
 8001252:	61bb      	str	r3, [r7, #24]
  }

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI receive/transmit failed");
  }
}
 8001254:	e012      	b.n	800127c <read_fifo+0x82>
    res2 = HAL_SPI_Receive(lora->spi, buffer, len, lora->spi_timeout);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6818      	ldr	r0, [r3, #0]
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	b29a      	uxth	r2, r3
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	68b9      	ldr	r1, [r7, #8]
 8001264:	f008 f8b8 	bl	80093d8 <HAL_SPI_Receive>
 8001268:	4603      	mov	r3, r0
 800126a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6858      	ldr	r0, [r3, #4]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	8adb      	ldrh	r3, [r3, #22]
 8001274:	2201      	movs	r2, #1
 8001276:	4619      	mov	r1, r3
 8001278:	f002 fa08 	bl	800368c <HAL_GPIO_WritePin>
}
 800127c:	bf00      	nop
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <set_mode>:

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8001290:	78fb      	ldrb	r3, [r7, #3]
 8001292:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001296:	b2db      	uxtb	r3, r3
 8001298:	461a      	mov	r2, r3
 800129a:	2101      	movs	r1, #1
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ff36 	bl	800110e <write_register>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	2b2c      	cmp	r3, #44	; 0x2c
 80012bc:	d801      	bhi.n	80012c2 <set_OCP+0x16>
    imax = 45;
 80012be:	232d      	movs	r3, #45	; 0x2d
 80012c0:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 80012c2:	78fb      	ldrb	r3, [r7, #3]
 80012c4:	2bf0      	cmp	r3, #240	; 0xf0
 80012c6:	d901      	bls.n	80012cc <set_OCP+0x20>
    imax = 240;
 80012c8:	23f0      	movs	r3, #240	; 0xf0
 80012ca:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 80012cc:	78fb      	ldrb	r3, [r7, #3]
 80012ce:	2b81      	cmp	r3, #129	; 0x81
 80012d0:	d809      	bhi.n	80012e6 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 80012d2:	78fb      	ldrb	r3, [r7, #3]
 80012d4:	3b2d      	subs	r3, #45	; 0x2d
 80012d6:	4a0f      	ldr	r2, [pc, #60]	; (8001314 <set_OCP+0x68>)
 80012d8:	fb82 1203 	smull	r1, r2, r2, r3
 80012dc:	1052      	asrs	r2, r2, #1
 80012de:	17db      	asrs	r3, r3, #31
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	e008      	b.n	80012f8 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 80012e6:	78fb      	ldrb	r3, [r7, #3]
 80012e8:	331e      	adds	r3, #30
 80012ea:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <set_OCP+0x68>)
 80012ec:	fb82 1203 	smull	r1, r2, r2, r3
 80012f0:	1092      	asrs	r2, r2, #2
 80012f2:	17db      	asrs	r3, r3, #31
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	f043 0320 	orr.w	r3, r3, #32
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	461a      	mov	r2, r3
 8001302:	210b      	movs	r1, #11
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff02 	bl	800110e <write_register>
}
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	66666667 	.word	0x66666667

08001318 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8001318:	b5b0      	push	{r4, r5, r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8001320:	211d      	movs	r1, #29
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff febc 	bl	80010a0 <read_register>
 8001328:	4603      	mov	r3, r0
 800132a:	091b      	lsrs	r3, r3, #4
 800132c:	b2db      	uxtb	r3, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2200      	movs	r2, #0
 8001332:	461c      	mov	r4, r3
 8001334:	4615      	mov	r5, r2
 8001336:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 800133a:	211e      	movs	r1, #30
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff feaf 	bl	80010a0 <read_register>
 8001342:	4603      	mov	r3, r0
 8001344:	091b      	lsrs	r3, r3, #4
 8001346:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8001348:	2304      	movs	r3, #4
 800134a:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	2b0a      	cmp	r3, #10
 8001350:	d908      	bls.n	8001364 <set_low_data_rate_optimization+0x4c>
 8001352:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001356:	1fd1      	subs	r1, r2, #7
 8001358:	430b      	orrs	r3, r1
 800135a:	d103      	bne.n	8001364 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 800135c:	7ffb      	ldrb	r3, [r7, #31]
 800135e:	f043 0308 	orr.w	r3, r3, #8
 8001362:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8001364:	7ffb      	ldrb	r3, [r7, #31]
 8001366:	461a      	mov	r2, r3
 8001368:	2126      	movs	r1, #38	; 0x26
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff fecf 	bl	800110e <write_register>
}
 8001370:	bf00      	nop
 8001372:	3720      	adds	r7, #32
 8001374:	46bd      	mov	sp, r7
 8001376:	bdb0      	pop	{r4, r5, r7, pc}

08001378 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8001380:	2100      	movs	r1, #0
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ff7e 	bl	8001284 <set_mode>
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8001398:	2101      	movs	r1, #1
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ff72 	bl	8001284 <set_mode>
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 80013b0:	211d      	movs	r1, #29
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff fe74 	bl	80010a0 <read_register>
 80013b8:	4603      	mov	r3, r0
 80013ba:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	f023 0301 	bic.w	r3, r3, #1
 80013c2:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	461a      	mov	r2, r3
 80013c8:	211d      	movs	r1, #29
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff fe9f 	bl	800110e <write_register>
}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10e      	bne.n	800140a <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	2b0f      	cmp	r3, #15
 80013f0:	d901      	bls.n	80013f6 <lora_set_tx_power+0x1e>
      level = 15;
 80013f2:	230f      	movs	r3, #15
 80013f4:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 80013f6:	78fb      	ldrb	r3, [r7, #3]
 80013f8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	461a      	mov	r2, r3
 8001400:	2109      	movs	r1, #9
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff fe83 	bl	800110e <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8001408:	e02e      	b.n	8001468 <lora_set_tx_power+0x90>
    if (level > 20) {
 800140a:	78fb      	ldrb	r3, [r7, #3]
 800140c:	2b14      	cmp	r3, #20
 800140e:	d901      	bls.n	8001414 <lora_set_tx_power+0x3c>
      level = 20;
 8001410:	2314      	movs	r3, #20
 8001412:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8001414:	78fb      	ldrb	r3, [r7, #3]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d801      	bhi.n	800141e <lora_set_tx_power+0x46>
      level = 2;
 800141a:	2302      	movs	r3, #2
 800141c:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 800141e:	78fb      	ldrb	r3, [r7, #3]
 8001420:	2b11      	cmp	r3, #17
 8001422:	d90c      	bls.n	800143e <lora_set_tx_power+0x66>
      level -= 3;
 8001424:	78fb      	ldrb	r3, [r7, #3]
 8001426:	3b03      	subs	r3, #3
 8001428:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 800142a:	2287      	movs	r2, #135	; 0x87
 800142c:	214d      	movs	r1, #77	; 0x4d
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff fe6d 	bl	800110e <write_register>
      set_OCP(lora, 140);
 8001434:	218c      	movs	r1, #140	; 0x8c
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ff38 	bl	80012ac <set_OCP>
 800143c:	e008      	b.n	8001450 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 800143e:	2284      	movs	r2, #132	; 0x84
 8001440:	214d      	movs	r1, #77	; 0x4d
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff fe63 	bl	800110e <write_register>
      set_OCP(lora, 97);
 8001448:	2161      	movs	r1, #97	; 0x61
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ff2e 	bl	80012ac <set_OCP>
    level -= 2;
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	3b02      	subs	r3, #2
 8001454:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8001456:	78fb      	ldrb	r3, [r7, #3]
 8001458:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800145c:	b2db      	uxtb	r3, r3
 800145e:	461a      	mov	r2, r3
 8001460:	2109      	movs	r1, #9
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff fe53 	bl	800110e <write_register>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 800147c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001480:	f04f 0000 	mov.w	r0, #0
 8001484:	f04f 0100 	mov.w	r1, #0
 8001488:	04d9      	lsls	r1, r3, #19
 800148a:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800148e:	04d0      	lsls	r0, r2, #19
 8001490:	4a19      	ldr	r2, [pc, #100]	; (80014f8 <lora_set_frequency+0x88>)
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	f7ff fb9f 	bl	8000bd8 <__aeabi_uldivmod>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 80014a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	f04f 0300 	mov.w	r3, #0
 80014ae:	0c02      	lsrs	r2, r0, #16
 80014b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80014b4:	0c0b      	lsrs	r3, r1, #16
 80014b6:	b2d3      	uxtb	r3, r2
 80014b8:	461a      	mov	r2, r3
 80014ba:	2106      	movs	r1, #6
 80014bc:	68f8      	ldr	r0, [r7, #12]
 80014be:	f7ff fe26 	bl	800110e <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 80014c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	f04f 0300 	mov.w	r3, #0
 80014ce:	0a02      	lsrs	r2, r0, #8
 80014d0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80014d4:	0a0b      	lsrs	r3, r1, #8
 80014d6:	b2d3      	uxtb	r3, r2
 80014d8:	461a      	mov	r2, r3
 80014da:	2107      	movs	r1, #7
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f7ff fe16 	bl	800110e <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 80014e2:	7c3b      	ldrb	r3, [r7, #16]
 80014e4:	461a      	mov	r2, r3
 80014e6:	2108      	movs	r1, #8
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f7ff fe10 	bl	800110e <write_register>
}
 80014ee:	bf00      	nop
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	01e84800 	.word	0x01e84800

080014fc <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	2b05      	cmp	r3, #5
 800150c:	d802      	bhi.n	8001514 <lora_set_spreading_factor+0x18>
    sf = 6;
 800150e:	2306      	movs	r3, #6
 8001510:	70fb      	strb	r3, [r7, #3]
 8001512:	e004      	b.n	800151e <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8001514:	78fb      	ldrb	r3, [r7, #3]
 8001516:	2b0c      	cmp	r3, #12
 8001518:	d901      	bls.n	800151e <lora_set_spreading_factor+0x22>
    sf = 12;
 800151a:	230c      	movs	r3, #12
 800151c:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	2b06      	cmp	r3, #6
 8001522:	d10a      	bne.n	800153a <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8001524:	22c5      	movs	r2, #197	; 0xc5
 8001526:	2131      	movs	r1, #49	; 0x31
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff fdf0 	bl	800110e <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 800152e:	220c      	movs	r2, #12
 8001530:	2137      	movs	r1, #55	; 0x37
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff fdeb 	bl	800110e <write_register>
 8001538:	e009      	b.n	800154e <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 800153a:	22c3      	movs	r2, #195	; 0xc3
 800153c:	2131      	movs	r1, #49	; 0x31
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff fde5 	bl	800110e <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8001544:	220a      	movs	r2, #10
 8001546:	2137      	movs	r1, #55	; 0x37
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff fde0 	bl	800110e <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 800154e:	211e      	movs	r1, #30
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff fda5 	bl	80010a0 <read_register>
 8001556:	4603      	mov	r3, r0
 8001558:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 800155a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	b25a      	sxtb	r2, r3
 8001564:	78fb      	ldrb	r3, [r7, #3]
 8001566:	011b      	lsls	r3, r3, #4
 8001568:	b25b      	sxtb	r3, r3
 800156a:	4313      	orrs	r3, r2
 800156c:	b25b      	sxtb	r3, r3
 800156e:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	461a      	mov	r2, r3
 8001574:	211e      	movs	r1, #30
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff fdc9 	bl	800110e <write_register>

  set_low_data_rate_optimization(lora);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff fecb 	bl	8001318 <set_low_data_rate_optimization>
}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	460b      	mov	r3, r1
 8001594:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8001596:	887b      	ldrh	r3, [r7, #2]
 8001598:	0a1b      	lsrs	r3, r3, #8
 800159a:	b29b      	uxth	r3, r3
 800159c:	b2db      	uxtb	r3, r3
 800159e:	461a      	mov	r2, r3
 80015a0:	2120      	movs	r1, #32
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff fdb3 	bl	800110e <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 80015a8:	887b      	ldrh	r3, [r7, #2]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	f003 030f 	and.w	r3, r3, #15
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	461a      	mov	r2, r3
 80015b4:	2121      	movs	r1, #33	; 0x21
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff fda9 	bl	800110e <write_register>
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 80015cc:	2142      	movs	r1, #66	; 0x42
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff fd66 	bl	80010a0 <read_register>
 80015d4:	4603      	mov	r3, r0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b084      	sub	sp, #16
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 80015e6:	2101      	movs	r1, #1
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff fd59 	bl	80010a0 <read_register>
 80015ee:	4603      	mov	r3, r0
 80015f0:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	2b03      	cmp	r3, #3
 80015fa:	d101      	bne.n	8001600 <lora_is_transmitting+0x22>
 80015fc:	2305      	movs	r3, #5
 80015fe:	e000      	b.n	8001602 <lora_is_transmitting+0x24>
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b084      	sub	sp, #16
 800160e:	af00      	add	r7, sp, #0
 8001610:	60f8      	str	r0, [r7, #12]
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	4611      	mov	r1, r2
 8001616:	461a      	mov	r2, r3
 8001618:	460b      	mov	r3, r1
 800161a:	71fb      	strb	r3, [r7, #7]
 800161c:	4613      	mov	r3, r2
 800161e:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f7ff ffdc 	bl	80015de <lora_is_transmitting>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <lora_send_packet_base+0x26>
    return LORA_BUSY;
 800162c:	2305      	movs	r3, #5
 800162e:	e02a      	b.n	8001686 <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 8001630:	2101      	movs	r1, #1
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f7ff fe26 	bl	8001284 <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f000 f904 	bl	8001846 <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	7d1b      	ldrb	r3, [r3, #20]
 8001642:	461a      	mov	r2, r3
 8001644:	210d      	movs	r1, #13
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f7ff fd61 	bl	800110e <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	7d1b      	ldrb	r3, [r3, #20]
 8001650:	461a      	mov	r2, r3
 8001652:	210e      	movs	r1, #14
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f7ff fd5a 	bl	800110e <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	461a      	mov	r2, r3
 800165e:	2122      	movs	r1, #34	; 0x22
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f7ff fd54 	bl	800110e <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 8001666:	79bb      	ldrb	r3, [r7, #6]
 8001668:	79fa      	ldrb	r2, [r7, #7]
 800166a:	68b9      	ldr	r1, [r7, #8]
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f7ff fd82 	bl	8001176 <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 8001672:	79bb      	ldrb	r3, [r7, #6]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d101      	bne.n	800167c <lora_send_packet_base+0x72>
    return LORA_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	e004      	b.n	8001686 <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 800167c:	2103      	movs	r1, #3
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f7ff fe00 	bl	8001284 <set_mode>
  return LORA_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b084      	sub	sp, #16
 8001692:	af00      	add	r7, sp, #0
 8001694:	60f8      	str	r0, [r7, #12]
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	4613      	mov	r3, r2
 800169a:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 800169c:	79fa      	ldrb	r2, [r7, #7]
 800169e:	2302      	movs	r3, #2
 80016a0:	68b9      	ldr	r1, [r7, #8]
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f7ff ffb1 	bl	800160a <lora_send_packet_base>
 80016a8:	4603      	mov	r3, r0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <lora_is_packet_available>:
    write_register(lora, REG_MODEM_CONFIG_2, mc2);
  }
}

uint8_t lora_is_packet_available(lora_sx1276 *lora)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t irqs = read_register(lora, REG_IRQ_FLAGS);
 80016ba:	2112      	movs	r1, #18
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff fcef 	bl	80010a0 <read_register>
 80016c2:	4603      	mov	r3, r0
 80016c4:	73fb      	strb	r3, [r7, #15]

  // In case of Single receive mode RX_TIMEOUT will be issued
  return  irqs & (IRQ_FLAGS_RX_DONE | IRQ_FLAGS_RX_TIMEOUT);
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016cc:	b2db      	uxtb	r3, r3
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <lora_pending_packet_length>:

uint8_t lora_pending_packet_length(lora_sx1276 *lora)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b084      	sub	sp, #16
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  uint8_t len;

  // Query for current header mode - implicit / explicit
  uint8_t implicit = read_register(lora, REG_MODEM_CONFIG_1) & MC1_IMPLICIT_HEADER_MODE;
 80016de:	211d      	movs	r1, #29
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff fcdd 	bl	80010a0 <read_register>
 80016e6:	4603      	mov	r3, r0
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	73bb      	strb	r3, [r7, #14]
  if (implicit) {
 80016ee:	7bbb      	ldrb	r3, [r7, #14]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d006      	beq.n	8001702 <lora_pending_packet_length+0x2c>
    len = read_register(lora, REG_PAYLOAD_LENGTH);
 80016f4:	2122      	movs	r1, #34	; 0x22
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff fcd2 	bl	80010a0 <read_register>
 80016fc:	4603      	mov	r3, r0
 80016fe:	73fb      	strb	r3, [r7, #15]
 8001700:	e005      	b.n	800170e <lora_pending_packet_length+0x38>
  } else {
    len = read_register(lora, REG_RX_NB_BYTES);
 8001702:	2113      	movs	r1, #19
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff fccb 	bl	80010a0 <read_register>
 800170a:	4603      	mov	r3, r0
 800170c:	73fb      	strb	r3, [r7, #15]
  }

  return len;
 800170e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <lora_receive_packet_base>:


static uint8_t lora_receive_packet_base(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error, uint8_t mode)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	4613      	mov	r3, r2
 8001726:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint8_t res = LORA_EMPTY;
 8001728:	2306      	movs	r3, #6
 800172a:	75fb      	strb	r3, [r7, #23]
  uint8_t len = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	75bb      	strb	r3, [r7, #22]

  // Read/Reset IRQs
  uint8_t state = read_register(lora, REG_IRQ_FLAGS);
 8001730:	2112      	movs	r1, #18
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f7ff fcb4 	bl	80010a0 <read_register>
 8001738:	4603      	mov	r3, r0
 800173a:	757b      	strb	r3, [r7, #21]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 800173c:	22f0      	movs	r2, #240	; 0xf0
 800173e:	2112      	movs	r1, #18
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f7ff fce4 	bl	800110e <write_register>

  if (state & IRQ_FLAGS_RX_TIMEOUT) {
 8001746:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800174a:	2b00      	cmp	r3, #0
 800174c:	da02      	bge.n	8001754 <lora_receive_packet_base+0x3c>
    DEBUGF("timeout");
    res = LORA_TIMEOUT;
 800174e:	2302      	movs	r3, #2
 8001750:	75fb      	strb	r3, [r7, #23]
    goto done;
 8001752:	e030      	b.n	80017b6 <lora_receive_packet_base+0x9e>
  }

  if (state & IRQ_FLAGS_RX_DONE) {
 8001754:	7d7b      	ldrb	r3, [r7, #21]
 8001756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800175a:	2b00      	cmp	r3, #0
 800175c:	d02a      	beq.n	80017b4 <lora_receive_packet_base+0x9c>
    if (!(state & IRQ_FLAGS_VALID_HEADER)) {
 800175e:	7d7b      	ldrb	r3, [r7, #21]
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	2b00      	cmp	r3, #0
 8001766:	d102      	bne.n	800176e <lora_receive_packet_base+0x56>
      DEBUGF("invalid header");
      res = LORA_INVALID_HEADER;
 8001768:	2303      	movs	r3, #3
 800176a:	75fb      	strb	r3, [r7, #23]
      goto done;
 800176c:	e023      	b.n	80017b6 <lora_receive_packet_base+0x9e>
    }
    // Packet has been received
    if (state & IRQ_FLAGS_PAYLOAD_CRC_ERROR) {
 800176e:	7d7b      	ldrb	r3, [r7, #21]
 8001770:	f003 0320 	and.w	r3, r3, #32
 8001774:	2b00      	cmp	r3, #0
 8001776:	d002      	beq.n	800177e <lora_receive_packet_base+0x66>
      DEBUGF("CRC error");
      res = LORA_CRC_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	75fb      	strb	r3, [r7, #23]
      goto done;
 800177c:	e01b      	b.n	80017b6 <lora_receive_packet_base+0x9e>
    }
    // Query for current header mode - implicit / explicit
    len = lora_pending_packet_length(lora);
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f7ff ffa9 	bl	80016d6 <lora_pending_packet_length>
 8001784:	4603      	mov	r3, r0
 8001786:	75bb      	strb	r3, [r7, #22]
    // Set FIFO to beginning of the packet
    uint8_t offset = read_register(lora, REG_FIFO_RX_CURRENT_ADDR);
 8001788:	2110      	movs	r1, #16
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f7ff fc88 	bl	80010a0 <read_register>
 8001790:	4603      	mov	r3, r0
 8001792:	753b      	strb	r3, [r7, #20]
    write_register(lora, REG_FIFO_ADDR_PTR, offset);
 8001794:	7d3b      	ldrb	r3, [r7, #20]
 8001796:	461a      	mov	r2, r3
 8001798:	210d      	movs	r1, #13
 800179a:	68f8      	ldr	r0, [r7, #12]
 800179c:	f7ff fcb7 	bl	800110e <write_register>
    // Read payload
    read_fifo(lora, buffer, len, mode);
 80017a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017a4:	7dba      	ldrb	r2, [r7, #22]
 80017a6:	68b9      	ldr	r1, [r7, #8]
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f7ff fd26 	bl	80011fa <read_fifo>
    res = LORA_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	75fb      	strb	r3, [r7, #23]
 80017b2:	e000      	b.n	80017b6 <lora_receive_packet_base+0x9e>
  }

done:
 80017b4:	bf00      	nop
  if (error) {
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d002      	beq.n	80017c2 <lora_receive_packet_base+0xaa>
    *error = res;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	7dfa      	ldrb	r2, [r7, #23]
 80017c0:	701a      	strb	r2, [r3, #0]
  }

  return len;
 80017c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <lora_receive_packet>:

uint8_t lora_receive_packet(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	4613      	mov	r3, r2
 80017da:	71fb      	strb	r3, [r7, #7]
  return lora_receive_packet_base(lora, buffer, buffer_len, error, TRANSFER_MODE_BLOCKING);
 80017dc:	79fa      	ldrb	r2, [r7, #7]
 80017de:	2302      	movs	r3, #2
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	f7ff ff96 	bl	8001718 <lora_receive_packet_base>
 80017ec:	4603      	mov	r3, r0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <lora_receive_packet_blocking>:
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
}

uint8_t lora_receive_packet_blocking(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len,
                   uint32_t timeout, uint8_t *error)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b086      	sub	sp, #24
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	60f8      	str	r0, [r7, #12]
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	603b      	str	r3, [r7, #0]
 8001802:	4613      	mov	r3, r2
 8001804:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint32_t elapsed = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]

  // Wait up to timeout for packet
  while (elapsed < timeout) {
 800180a:	e00b      	b.n	8001824 <lora_receive_packet_blocking+0x2e>
    if (lora_is_packet_available(lora)) {
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f7ff ff50 	bl	80016b2 <lora_is_packet_available>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10a      	bne.n	800182e <lora_receive_packet_blocking+0x38>
      break;
    }
    HAL_Delay(1);
 8001818:	2001      	movs	r0, #1
 800181a:	f001 f929 	bl	8002a70 <HAL_Delay>
    elapsed++;
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	3301      	adds	r3, #1
 8001822:	617b      	str	r3, [r7, #20]
  while (elapsed < timeout) {
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d3ef      	bcc.n	800180c <lora_receive_packet_blocking+0x16>
 800182c:	e000      	b.n	8001830 <lora_receive_packet_blocking+0x3a>
      break;
 800182e:	bf00      	nop
  }

  return lora_receive_packet(lora, buffer, buffer_len, error);
 8001830:	79fa      	ldrb	r2, [r7, #7]
 8001832:	6a3b      	ldr	r3, [r7, #32]
 8001834:	68b9      	ldr	r1, [r7, #8]
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f7ff ffc8 	bl	80017cc <lora_receive_packet>
 800183c:	4603      	mov	r3, r0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 800184e:	2208      	movs	r2, #8
 8001850:	2112      	movs	r1, #18
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff fc5b 	bl	800110e <write_register>
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
 800186c:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	68ba      	ldr	r2, [r7, #8]
 8001872:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	887a      	ldrh	r2, [r7, #2]
 800187e:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8001880:	6a3a      	ldr	r2, [r7, #32]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2201      	movs	r2, #1
 800188a:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2200      	movs	r2, #0
 8001896:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800189e:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f7ff fe8f 	bl	80015c4 <lora_version>
 80018a6:	4603      	mov	r3, r0
 80018a8:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 80018aa:	7dfb      	ldrb	r3, [r7, #23]
 80018ac:	2b12      	cmp	r3, #18
 80018ae:	d001      	beq.n	80018b4 <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 80018b0:	2304      	movs	r3, #4
 80018b2:	e031      	b.n	8001918 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f7ff fd5f 	bl	8001378 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f7ff fd5c 	bl	8001378 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 80018c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f7ff fdd3 	bl	8001470 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 80018ca:	2107      	movs	r1, #7
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f7ff fe15 	bl	80014fc <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 80018d2:	210a      	movs	r1, #10
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f7ff fe58 	bl	800158a <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f7ff fd64 	bl	80013a8 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 80018e0:	210c      	movs	r1, #12
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f7ff fbdc 	bl	80010a0 <read_register>
 80018e8:	4603      	mov	r3, r0
 80018ea:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 80018ec:	7dbb      	ldrb	r3, [r7, #22]
 80018ee:	f043 0303 	orr.w	r3, r3, #3
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	461a      	mov	r2, r3
 80018f6:	210c      	movs	r1, #12
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f7ff fc08 	bl	800110e <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 80018fe:	2204      	movs	r2, #4
 8001900:	2126      	movs	r1, #38	; 0x26
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f7ff fc03 	bl	800110e <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8001908:	2111      	movs	r1, #17
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f7ff fd64 	bl	80013d8 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f7ff fd3d 	bl	8001390 <lora_mode_standby>

  return LORA_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b0a4      	sub	sp, #144	; 0x90
 8001924:	af02      	add	r7, sp, #8
	lora_sx1276 lora;


	// Time progress tracking using tick
	double system_time_counter;
	system_time_counter = 0;
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	uint8_t system_time_buffer[25] = {0};
 8001932:	2300      	movs	r3, #0
 8001934:	64bb      	str	r3, [r7, #72]	; 0x48
 8001936:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
 8001944:	611a      	str	r2, [r3, #16]
 8001946:	751a      	strb	r2, [r3, #20]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001948:	f001 f81d 	bl	8002986 <HAL_Init>

	/* USER CODE BEGIN Init */

	// Initialize HAL for UART interrupts
	HAL_MspInit();
 800194c:	f000 fcac 	bl	80022a8 <HAL_MspInit>
	// Initialize I2C2 with custom driver
	BSP_I2C2_Init();
 8001950:	f7ff fac4 	bl	8000edc <BSP_I2C2_Init>

	//Initialize Msp for both UARTs
	HAL_UART_MspInit(&huart1);
 8001954:	48a2      	ldr	r0, [pc, #648]	; (8001be0 <main+0x2c0>)
 8001956:	f000 fe0f 	bl	8002578 <HAL_UART_MspInit>
	HAL_UART_MspInit(&huart2);
 800195a:	48a2      	ldr	r0, [pc, #648]	; (8001be4 <main+0x2c4>)
 800195c:	f000 fe0c 	bl	8002578 <HAL_UART_MspInit>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001960:	f000 f974 	bl	8001c4c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001964:	f000 fbc6 	bl	80020f4 <MX_GPIO_Init>
	MX_DMA_Init();
 8001968:	f000 fba0 	bl	80020ac <MX_DMA_Init>
	MX_I2C1_Init();
 800196c:	f000 f9ec 	bl	8001d48 <MX_I2C1_Init>
	MX_SDMMC1_SD_Init();
 8001970:	f000 fa2a 	bl	8001dc8 <MX_SDMMC1_SD_Init>
	MX_SPI1_Init();
 8001974:	f000 fa4a 	bl	8001e0c <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8001978:	f000 fafc 	bl	8001f74 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800197c:	f000 fb46 	bl	800200c <MX_USART2_UART_Init>
	MX_FATFS_Init();
 8001980:	f00d f972 	bl	800ec68 <MX_FATFS_Init>
	MX_USB_DEVICE_Init();
 8001984:	f00e fffa 	bl	801097c <MX_USB_DEVICE_Init>
	MX_TIM17_Init();
 8001988:	f000 fa7e 	bl	8001e88 <MX_TIM17_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 800198c:	f000 f9b0 	bl	8001cf0 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */


	// WAIT FOR USB CONNECTION
	HAL_Delay(8000);
 8001990:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001994:	f001 f86c 	bl	8002a70 <HAL_Delay>
	while (CDC_Transmit_FS ("START\n", 6) == USBD_BUSY);
 8001998:	bf00      	nop
 800199a:	2106      	movs	r1, #6
 800199c:	4892      	ldr	r0, [pc, #584]	; (8001be8 <main+0x2c8>)
 800199e:	f00f f8bb 	bl	8010b18 <CDC_Transmit_FS>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d0f8      	beq.n	800199a <main+0x7a>


	/// LoRa Init /////////////////////////////////////////////////////////////////////////////////
	uint8_t lora_res = lora_init(&lora, &hspi1, LORA_NSS_GPIO_Port, LORA_NSS_Pin, LORA_BASE_FREQUENCY_US);
 80019a8:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80019ac:	a38a      	add	r3, pc, #552	; (adr r3, 8001bd8 <main+0x2b8>)
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	e9cd 2300 	strd	r2, r3, [sp]
 80019b6:	2320      	movs	r3, #32
 80019b8:	4a8c      	ldr	r2, [pc, #560]	; (8001bec <main+0x2cc>)
 80019ba:	498d      	ldr	r1, [pc, #564]	; (8001bf0 <main+0x2d0>)
 80019bc:	f7ff ff50 	bl	8001860 <lora_init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (lora_res != LORA_OK) {
 80019c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d007      	beq.n	80019de <main+0xbe>
		// Initialization failed
		while (CDC_Transmit_FS ("LORA INIT NOT OK!\n", 18) == USBD_BUSY);
 80019ce:	bf00      	nop
 80019d0:	2112      	movs	r1, #18
 80019d2:	4888      	ldr	r0, [pc, #544]	; (8001bf4 <main+0x2d4>)
 80019d4:	f00f f8a0 	bl	8010b18 <CDC_Transmit_FS>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d0f8      	beq.n	80019d0 <main+0xb0>
	}
	lora_res = lora_send_packet(&lora, (uint8_t *)"test", 4);
 80019de:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019e2:	2204      	movs	r2, #4
 80019e4:	4984      	ldr	r1, [pc, #528]	; (8001bf8 <main+0x2d8>)
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fe51 	bl	800168e <lora_send_packet>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (lora_res != LORA_OK) {
 80019f2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d007      	beq.n	8001a0a <main+0xea>
		// Send failed
		while (CDC_Transmit_FS ("LORA SEND NOT OK!\n", 18) == USBD_BUSY);
 80019fa:	bf00      	nop
 80019fc:	2112      	movs	r1, #18
 80019fe:	487f      	ldr	r0, [pc, #508]	; (8001bfc <main+0x2dc>)
 8001a00:	f00f f88a 	bl	8010b18 <CDC_Transmit_FS>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d0f8      	beq.n	80019fc <main+0xdc>
	}
	if (lora_res == LORA_OK) {
 8001a0a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d107      	bne.n	8001a22 <main+0x102>
		// All good
		while (CDC_Transmit_FS ("LORA OK!\n", 9) == USBD_BUSY);
 8001a12:	bf00      	nop
 8001a14:	2109      	movs	r1, #9
 8001a16:	487a      	ldr	r0, [pc, #488]	; (8001c00 <main+0x2e0>)
 8001a18:	f00f f87e 	bl	8010b18 <CDC_Transmit_FS>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d0f8      	beq.n	8001a14 <main+0xf4>


	/// System timers Init /////////////////////////////////////////////////////////////////////////////////

	// Start timers
	HAL_TIM_Base_Start_IT(&htim17);
 8001a22:	4878      	ldr	r0, [pc, #480]	; (8001c04 <main+0x2e4>)
 8001a24:	f008 ff54 	bl	800a8d0 <HAL_TIM_Base_Start_IT>
	tick = 0;
 8001a28:	4b77      	ldr	r3, [pc, #476]	; (8001c08 <main+0x2e8>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
	tickGPS = 0;
 8001a2e:	4b77      	ldr	r3, [pc, #476]	; (8001c0c <main+0x2ec>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
	/* USER CODE BEGIN WHILE */

	/// Pre-main program /////////////////////////////////////////////////////////////////////////////////
	/// Pre-main program /////////////////////////////////////////////////////////////////////////////////
	/// Pre-main program /////////////////////////////////////////////////////////////////////////////////
	HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8001a34:	2108      	movs	r1, #8
 8001a36:	4876      	ldr	r0, [pc, #472]	; (8001c10 <main+0x2f0>)
 8001a38:	f001 fe40 	bl	80036bc <HAL_GPIO_TogglePin>
	while (1) {

		while (usb_Rx_ready == 0);
 8001a3c:	bf00      	nop
 8001a3e:	4b75      	ldr	r3, [pc, #468]	; (8001c14 <main+0x2f4>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0fa      	beq.n	8001a3e <main+0x11e>
		usb_Rx_ready = 0;
 8001a48:	4b72      	ldr	r3, [pc, #456]	; (8001c14 <main+0x2f4>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]

		if (usb_Rx_buffer[1] == USB_LORA) {
 8001a4e:	4b72      	ldr	r3, [pc, #456]	; (8001c18 <main+0x2f8>)
 8001a50:	785a      	ldrb	r2, [r3, #1]
 8001a52:	4b72      	ldr	r3, [pc, #456]	; (8001c1c <main+0x2fc>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d139      	bne.n	8001ace <main+0x1ae>
			if (usb_Rx_buffer[0] == USB_CHECKSTATUS) {
 8001a5a:	4b6f      	ldr	r3, [pc, #444]	; (8001c18 <main+0x2f8>)
 8001a5c:	781a      	ldrb	r2, [r3, #0]
 8001a5e:	4b70      	ldr	r3, [pc, #448]	; (8001c20 <main+0x300>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d0ea      	beq.n	8001a3c <main+0x11c>

			}
			else if (usb_Rx_buffer[1] == USB_TESTOUTPUT) {
 8001a66:	4b6c      	ldr	r3, [pc, #432]	; (8001c18 <main+0x2f8>)
 8001a68:	785a      	ldrb	r2, [r3, #1]
 8001a6a:	4b6e      	ldr	r3, [pc, #440]	; (8001c24 <main+0x304>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d1e4      	bne.n	8001a3c <main+0x11c>
				lora_res = lora_receive_packet_blocking(&lora, &lora_Rx_buffer, sizeof(lora_Rx_buffer), 2000, &lora_error);
 8001a72:	f107 0108 	add.w	r1, r7, #8
 8001a76:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8001a7a:	1dfb      	adds	r3, r7, #7
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a82:	2240      	movs	r2, #64	; 0x40
 8001a84:	f7ff feb7 	bl	80017f6 <lora_receive_packet_blocking>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (lora_res != LORA_OK) {
 8001a8e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d008      	beq.n	8001aa8 <main+0x188>
					while (CDC_Transmit_FS ("ERROR!\n", sizeof("ERROR!\n")) == USBD_BUSY);
 8001a96:	bf00      	nop
 8001a98:	2108      	movs	r1, #8
 8001a9a:	4863      	ldr	r0, [pc, #396]	; (8001c28 <main+0x308>)
 8001a9c:	f00f f83c 	bl	8010b18 <CDC_Transmit_FS>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d0f8      	beq.n	8001a98 <main+0x178>
 8001aa6:	e7c9      	b.n	8001a3c <main+0x11c>
				}
				else {
					while (CDC_Transmit_FS ("Lora packet received!\n", sizeof("Lora packet received!\n")) == USBD_BUSY);
 8001aa8:	bf00      	nop
 8001aaa:	2117      	movs	r1, #23
 8001aac:	485f      	ldr	r0, [pc, #380]	; (8001c2c <main+0x30c>)
 8001aae:	f00f f833 	bl	8010b18 <CDC_Transmit_FS>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d0f8      	beq.n	8001aaa <main+0x18a>
					while (CDC_Transmit_FS (lora_Rx_buffer, sizeof(lora_Rx_buffer)) == USBD_BUSY);
 8001ab8:	bf00      	nop
 8001aba:	f107 0308 	add.w	r3, r7, #8
 8001abe:	2140      	movs	r1, #64	; 0x40
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f00f f829 	bl	8010b18 <CDC_Transmit_FS>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d0f6      	beq.n	8001aba <main+0x19a>
 8001acc:	e7b6      	b.n	8001a3c <main+0x11c>
			}

		}


		else if (usb_Rx_buffer[0] == USB_TIMERS) {
 8001ace:	4b52      	ldr	r3, [pc, #328]	; (8001c18 <main+0x2f8>)
 8001ad0:	781a      	ldrb	r2, [r3, #0]
 8001ad2:	4b57      	ldr	r3, [pc, #348]	; (8001c30 <main+0x310>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d138      	bne.n	8001b4c <main+0x22c>
			if (usb_Rx_buffer[1] == USB_CHECKSTATUS) {
 8001ada:	4b4f      	ldr	r3, [pc, #316]	; (8001c18 <main+0x2f8>)
 8001adc:	785a      	ldrb	r2, [r3, #1]
 8001ade:	4b50      	ldr	r3, [pc, #320]	; (8001c20 <main+0x300>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d0aa      	beq.n	8001a3c <main+0x11c>

			}
			else if (usb_Rx_buffer[1] == USB_TESTOUTPUT) {
 8001ae6:	4b4c      	ldr	r3, [pc, #304]	; (8001c18 <main+0x2f8>)
 8001ae8:	785a      	ldrb	r2, [r3, #1]
 8001aea:	4b4e      	ldr	r3, [pc, #312]	; (8001c24 <main+0x304>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d1a4      	bne.n	8001a3c <main+0x11c>
				if (tick == 0) {
 8001af2:	4b45      	ldr	r3, [pc, #276]	; (8001c08 <main+0x2e8>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d110      	bne.n	8001b1e <main+0x1fe>
					tick = 10;
 8001afc:	4b42      	ldr	r3, [pc, #264]	; (8001c08 <main+0x2e8>)
 8001afe:	220a      	movs	r2, #10
 8001b00:	701a      	strb	r2, [r3, #0]
					while (tick != 0);
 8001b02:	bf00      	nop
 8001b04:	4b40      	ldr	r3, [pc, #256]	; (8001c08 <main+0x2e8>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1fa      	bne.n	8001b04 <main+0x1e4>
					while (CDC_Transmit_FS ("Tick works!\n", 13) == USBD_BUSY);
 8001b0e:	bf00      	nop
 8001b10:	210d      	movs	r1, #13
 8001b12:	4848      	ldr	r0, [pc, #288]	; (8001c34 <main+0x314>)
 8001b14:	f00f f800 	bl	8010b18 <CDC_Transmit_FS>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d0f8      	beq.n	8001b10 <main+0x1f0>
				}

				if (tickGPS == 0) {
 8001b1e:	4b3b      	ldr	r3, [pc, #236]	; (8001c0c <main+0x2ec>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d189      	bne.n	8001a3c <main+0x11c>
					tickGPS = 10;
 8001b28:	4b38      	ldr	r3, [pc, #224]	; (8001c0c <main+0x2ec>)
 8001b2a:	220a      	movs	r2, #10
 8001b2c:	701a      	strb	r2, [r3, #0]
					while (tickGPS != 0);
 8001b2e:	bf00      	nop
 8001b30:	4b36      	ldr	r3, [pc, #216]	; (8001c0c <main+0x2ec>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1fa      	bne.n	8001b30 <main+0x210>
					while (CDC_Transmit_FS ("GPStick works!\n", 16) == USBD_BUSY);
 8001b3a:	bf00      	nop
 8001b3c:	2110      	movs	r1, #16
 8001b3e:	483e      	ldr	r0, [pc, #248]	; (8001c38 <main+0x318>)
 8001b40:	f00e ffea 	bl	8010b18 <CDC_Transmit_FS>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d0f8      	beq.n	8001b3c <main+0x21c>
 8001b4a:	e777      	b.n	8001a3c <main+0x11c>
			}

		}


		else if (usb_Rx_buffer[1] == USB_FLIGHTMODE) {
 8001b4c:	4b32      	ldr	r3, [pc, #200]	; (8001c18 <main+0x2f8>)
 8001b4e:	785a      	ldrb	r2, [r3, #1]
 8001b50:	4b3a      	ldr	r3, [pc, #232]	; (8001c3c <main+0x31c>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d108      	bne.n	8001b6a <main+0x24a>
			while (CDC_Transmit_FS ("OK", 2) == USBD_BUSY);
 8001b58:	bf00      	nop
 8001b5a:	2102      	movs	r1, #2
 8001b5c:	4838      	ldr	r0, [pc, #224]	; (8001c40 <main+0x320>)
 8001b5e:	f00e ffdb 	bl	8010b18 <CDC_Transmit_FS>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d0f8      	beq.n	8001b5a <main+0x23a>
			break;
 8001b68:	e00f      	b.n	8001b8a <main+0x26a>
		}


		else if (usb_Rx_buffer[1] == USB_PING) {
 8001b6a:	4b2b      	ldr	r3, [pc, #172]	; (8001c18 <main+0x2f8>)
 8001b6c:	785a      	ldrb	r2, [r3, #1]
 8001b6e:	4b35      	ldr	r3, [pc, #212]	; (8001c44 <main+0x324>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	f47f af62 	bne.w	8001a3c <main+0x11c>

			while (CDC_Transmit_FS ("PONG", 4) == USBD_BUSY);
 8001b78:	bf00      	nop
 8001b7a:	2104      	movs	r1, #4
 8001b7c:	4832      	ldr	r0, [pc, #200]	; (8001c48 <main+0x328>)
 8001b7e:	f00e ffcb 	bl	8010b18 <CDC_Transmit_FS>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d0f8      	beq.n	8001b7a <main+0x25a>
		while (usb_Rx_ready == 0);
 8001b88:	e758      	b.n	8001a3c <main+0x11c>
			//break;
		}

	}
	HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8001b8a:	2108      	movs	r1, #8
 8001b8c:	4820      	ldr	r0, [pc, #128]	; (8001c10 <main+0x2f0>)
 8001b8e:	f001 fd95 	bl	80036bc <HAL_GPIO_TogglePin>
	// Reset timers before main program
	tick = 0;
 8001b92:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <main+0x2e8>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	701a      	strb	r2, [r3, #0]
	tickGPS = 0;
 8001b98:	4b1c      	ldr	r3, [pc, #112]	; (8001c0c <main+0x2ec>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8001b9e:	2140      	movs	r1, #64	; 0x40
 8001ba0:	481b      	ldr	r0, [pc, #108]	; (8001c10 <main+0x2f0>)
 8001ba2:	f001 fd8b 	bl	80036bc <HAL_GPIO_TogglePin>
	/// Main program /////////////////////////////////////////////////////////////////////////////////
	while (1)
	{


		lora_res = lora_receive_packet_blocking(&lora, &lora_Rx_buffer, sizeof(lora_Rx_buffer), 1000, &lora_error);
 8001ba6:	f107 0108 	add.w	r1, r7, #8
 8001baa:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8001bae:	1dfb      	adds	r3, r7, #7
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb6:	2240      	movs	r2, #64	; 0x40
 8001bb8:	f7ff fe1d 	bl	80017f6 <lora_receive_packet_blocking>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		while (CDC_Transmit_FS (lora_Rx_buffer, sizeof(lora_Rx_buffer)) == USBD_BUSY);
 8001bc2:	bf00      	nop
 8001bc4:	f107 0308 	add.w	r3, r7, #8
 8001bc8:	2140      	movs	r1, #64	; 0x40
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f00e ffa4 	bl	8010b18 <CDC_Transmit_FS>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d0f6      	beq.n	8001bc4 <main+0x2a4>
		lora_res = lora_receive_packet_blocking(&lora, &lora_Rx_buffer, sizeof(lora_Rx_buffer), 1000, &lora_error);
 8001bd6:	e7e6      	b.n	8001ba6 <main+0x286>
 8001bd8:	3689cac0 	.word	0x3689cac0
 8001bdc:	00000000 	.word	0x00000000
 8001be0:	20000554 	.word	0x20000554
 8001be4:	200005e4 	.word	0x200005e4
 8001be8:	080140e8 	.word	0x080140e8
 8001bec:	48000800 	.word	0x48000800
 8001bf0:	200004a4 	.word	0x200004a4
 8001bf4:	080140f0 	.word	0x080140f0
 8001bf8:	08014104 	.word	0x08014104
 8001bfc:	0801410c 	.word	0x0801410c
 8001c00:	08014120 	.word	0x08014120
 8001c04:	20000508 	.word	0x20000508
 8001c08:	20000d80 	.word	0x20000d80
 8001c0c:	20000d81 	.word	0x20000d81
 8001c10:	48000c00 	.word	0x48000c00
 8001c14:	20001072 	.word	0x20001072
 8001c18:	20001070 	.word	0x20001070
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	20000001 	.word	0x20000001
 8001c24:	20000002 	.word	0x20000002
 8001c28:	0801412c 	.word	0x0801412c
 8001c2c:	08014134 	.word	0x08014134
 8001c30:	20000003 	.word	0x20000003
 8001c34:	0801414c 	.word	0x0801414c
 8001c38:	0801415c 	.word	0x0801415c
 8001c3c:	20000004 	.word	0x20000004
 8001c40:	0801416c 	.word	0x0801416c
 8001c44:	20000005 	.word	0x20000005
 8001c48:	08014170 	.word	0x08014170

08001c4c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b096      	sub	sp, #88	; 0x58
 8001c50:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	2244      	movs	r2, #68	; 0x44
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f00f fcc2 	bl	80115e4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c60:	463b      	mov	r3, r7
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]
 8001c6c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f003 f85e 	bl	8004d30 <HAL_PWREx_ControlVoltageScaling>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <SystemClock_Config+0x32>
	{
		Error_Handler();
 8001c7a:	f000 fb0b 	bl	8002294 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001c7e:	2321      	movs	r3, #33	; 0x21
 8001c80:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c86:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c90:	2303      	movs	r3, #3
 8001c92:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001c94:	2301      	movs	r3, #1
 8001c96:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 30;
 8001c98:	231e      	movs	r3, #30
 8001c9a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	4618      	mov	r0, r3
 8001cae:	f003 f8f3 	bl	8004e98 <HAL_RCC_OscConfig>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <SystemClock_Config+0x70>
	{
		Error_Handler();
 8001cb8:	f000 faec 	bl	8002294 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cbc:	230f      	movs	r3, #15
 8001cbe:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cd0:	463b      	mov	r3, r7
 8001cd2:	2105      	movs	r1, #5
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f003 fcf9 	bl	80056cc <HAL_RCC_ClockConfig>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8001ce0:	f000 fad8 	bl	8002294 <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 8001ce4:	f003 fef0 	bl	8005ac8 <HAL_RCC_EnableCSS>
}
 8001ce8:	bf00      	nop
 8001cea:	3758      	adds	r7, #88	; 0x58
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
	/* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	201a      	movs	r0, #26
 8001cfa:	f000 ffb8 	bl	8002c6e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001cfe:	201a      	movs	r0, #26
 8001d00:	f000 ffd1 	bl	8002ca6 <HAL_NVIC_EnableIRQ>
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2100      	movs	r1, #0
 8001d08:	2026      	movs	r0, #38	; 0x26
 8001d0a:	f000 ffb0 	bl	8002c6e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d0e:	2026      	movs	r0, #38	; 0x26
 8001d10:	f000 ffc9 	bl	8002ca6 <HAL_NVIC_EnableIRQ>
	/* USART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2100      	movs	r1, #0
 8001d18:	2025      	movs	r0, #37	; 0x25
 8001d1a:	f000 ffa8 	bl	8002c6e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d1e:	2025      	movs	r0, #37	; 0x25
 8001d20:	f000 ffc1 	bl	8002ca6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d24:	2200      	movs	r2, #0
 8001d26:	2100      	movs	r1, #0
 8001d28:	200b      	movs	r0, #11
 8001d2a:	f000 ffa0 	bl	8002c6e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001d2e:	200b      	movs	r0, #11
 8001d30:	f000 ffb9 	bl	8002ca6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2100      	movs	r1, #0
 8001d38:	200c      	movs	r0, #12
 8001d3a:	f000 ff98 	bl	8002c6e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001d3e:	200c      	movs	r0, #12
 8001d40:	f000 ffb1 	bl	8002ca6 <HAL_NVIC_EnableIRQ>
}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <MX_I2C1_Init+0x74>)
 8001d4e:	4a1c      	ldr	r2, [pc, #112]	; (8001dc0 <MX_I2C1_Init+0x78>)
 8001d50:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x307075B1;
 8001d52:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <MX_I2C1_Init+0x74>)
 8001d54:	4a1b      	ldr	r2, [pc, #108]	; (8001dc4 <MX_I2C1_Init+0x7c>)
 8001d56:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001d58:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <MX_I2C1_Init+0x74>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d5e:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <MX_I2C1_Init+0x74>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d64:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <MX_I2C1_Init+0x74>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001d6a:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <MX_I2C1_Init+0x74>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d70:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <MX_I2C1_Init+0x74>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d76:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <MX_I2C1_Init+0x74>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <MX_I2C1_Init+0x74>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d82:	480e      	ldr	r0, [pc, #56]	; (8001dbc <MX_I2C1_Init+0x74>)
 8001d84:	f001 fcb4 	bl	80036f0 <HAL_I2C_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8001d8e:	f000 fa81 	bl	8002294 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d92:	2100      	movs	r1, #0
 8001d94:	4809      	ldr	r0, [pc, #36]	; (8001dbc <MX_I2C1_Init+0x74>)
 8001d96:	f001 fd48 	bl	800382a <HAL_I2CEx_ConfigAnalogFilter>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8001da0:	f000 fa78 	bl	8002294 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001da4:	2100      	movs	r1, #0
 8001da6:	4805      	ldr	r0, [pc, #20]	; (8001dbc <MX_I2C1_Init+0x74>)
 8001da8:	f001 fd8a 	bl	80038c0 <HAL_I2CEx_ConfigDigitalFilter>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8001db2:	f000 fa6f 	bl	8002294 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200003d0 	.word	0x200003d0
 8001dc0:	40005400 	.word	0x40005400
 8001dc4:	307075b1 	.word	0x307075b1

08001dc8 <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8001dcc:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <MX_SDMMC1_SD_Init+0x3c>)
 8001dce:	4a0e      	ldr	r2, [pc, #56]	; (8001e08 <MX_SDMMC1_SD_Init+0x40>)
 8001dd0:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <MX_SDMMC1_SD_Init+0x3c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <MX_SDMMC1_SD_Init+0x3c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <MX_SDMMC1_SD_Init+0x3c>)
 8001de0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001de4:	60da      	str	r2, [r3, #12]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001de6:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <MX_SDMMC1_SD_Init+0x3c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	611a      	str	r2, [r3, #16]
	hsd1.Init.ClockDiv = 0;
 8001dec:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <MX_SDMMC1_SD_Init+0x3c>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	615a      	str	r2, [r3, #20]
	hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8001df2:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <MX_SDMMC1_SD_Init+0x3c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20000424 	.word	0x20000424
 8001e08:	50062400 	.word	0x50062400

08001e0c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001e10:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <MX_SPI1_Init+0x74>)
 8001e12:	4a1c      	ldr	r2, [pc, #112]	; (8001e84 <MX_SPI1_Init+0x78>)
 8001e14:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e16:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <MX_SPI1_Init+0x74>)
 8001e18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e1c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <MX_SPI1_Init+0x74>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e24:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <MX_SPI1_Init+0x74>)
 8001e26:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e2a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e2c:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <MX_SPI1_Init+0x74>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <MX_SPI1_Init+0x74>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <MX_SPI1_Init+0x74>)
 8001e3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e3e:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001e40:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <MX_SPI1_Init+0x74>)
 8001e42:	2228      	movs	r2, #40	; 0x28
 8001e44:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <MX_SPI1_Init+0x74>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <MX_SPI1_Init+0x74>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <MX_SPI1_Init+0x74>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001e58:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <MX_SPI1_Init+0x74>)
 8001e5a:	2207      	movs	r2, #7
 8001e5c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <MX_SPI1_Init+0x74>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <MX_SPI1_Init+0x74>)
 8001e66:	2208      	movs	r2, #8
 8001e68:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e6a:	4805      	ldr	r0, [pc, #20]	; (8001e80 <MX_SPI1_Init+0x74>)
 8001e6c:	f007 f8a3 	bl	8008fb6 <HAL_SPI_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 8001e76:	f000 fa0d 	bl	8002294 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200004a4 	.word	0x200004a4
 8001e84:	40013000 	.word	0x40013000

08001e88 <MX_TIM17_Init>:
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b092      	sub	sp, #72	; 0x48
 8001e8c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM17_Init 0 */

	/* USER CODE END TIM17_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 8001e8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
 8001e9c:	611a      	str	r2, [r3, #16]
 8001e9e:	615a      	str	r2, [r3, #20]
 8001ea0:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ea2:	463b      	mov	r3, r7
 8001ea4:	222c      	movs	r2, #44	; 0x2c
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f00f fb9b 	bl	80115e4 <memset>

	/* USER CODE BEGIN TIM17_Init 1 */

	/* USER CODE END TIM17_Init 1 */
	htim17.Instance = TIM17;
 8001eae:	4b2f      	ldr	r3, [pc, #188]	; (8001f6c <MX_TIM17_Init+0xe4>)
 8001eb0:	4a2f      	ldr	r2, [pc, #188]	; (8001f70 <MX_TIM17_Init+0xe8>)
 8001eb2:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = 999;
 8001eb4:	4b2d      	ldr	r3, [pc, #180]	; (8001f6c <MX_TIM17_Init+0xe4>)
 8001eb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001eba:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ebc:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <MX_TIM17_Init+0xe4>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 11999;
 8001ec2:	4b2a      	ldr	r3, [pc, #168]	; (8001f6c <MX_TIM17_Init+0xe4>)
 8001ec4:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001ec8:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eca:	4b28      	ldr	r3, [pc, #160]	; (8001f6c <MX_TIM17_Init+0xe4>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 8001ed0:	4b26      	ldr	r3, [pc, #152]	; (8001f6c <MX_TIM17_Init+0xe4>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	615a      	str	r2, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ed6:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <MX_TIM17_Init+0xe4>)
 8001ed8:	2280      	movs	r2, #128	; 0x80
 8001eda:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001edc:	4823      	ldr	r0, [pc, #140]	; (8001f6c <MX_TIM17_Init+0xe4>)
 8001ede:	f008 fc9f 	bl	800a820 <HAL_TIM_Base_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM17_Init+0x64>
	{
		Error_Handler();
 8001ee8:	f000 f9d4 	bl	8002294 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8001eec:	481f      	ldr	r0, [pc, #124]	; (8001f6c <MX_TIM17_Init+0xe4>)
 8001eee:	f008 fd5f 	bl	800a9b0 <HAL_TIM_OC_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM17_Init+0x74>
	{
		Error_Handler();
 8001ef8:	f000 f9cc 	bl	8002294 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.Pulse = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f04:	2300      	movs	r3, #0
 8001f06:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f10:	2300      	movs	r3, #0
 8001f12:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f14:	2300      	movs	r3, #0
 8001f16:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4812      	ldr	r0, [pc, #72]	; (8001f6c <MX_TIM17_Init+0xe4>)
 8001f22:	f008 fec5 	bl	800acb0 <HAL_TIM_OC_ConfigChannel>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM17_Init+0xa8>
	{
		Error_Handler();
 8001f2c:	f000 f9b2 	bl	8002294 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f48:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001f4e:	463b      	mov	r3, r7
 8001f50:	4619      	mov	r1, r3
 8001f52:	4806      	ldr	r0, [pc, #24]	; (8001f6c <MX_TIM17_Init+0xe4>)
 8001f54:	f009 fac8 	bl	800b4e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM17_Init+0xda>
	{
		Error_Handler();
 8001f5e:	f000 f999 	bl	8002294 <Error_Handler>
	}
	/* USER CODE BEGIN TIM17_Init 2 */

	/* USER CODE END TIM17_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	3748      	adds	r7, #72	; 0x48
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000508 	.word	0x20000508
 8001f70:	40014800 	.word	0x40014800

08001f74 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001f78:	4b22      	ldr	r3, [pc, #136]	; (8002004 <MX_USART1_UART_Init+0x90>)
 8001f7a:	4a23      	ldr	r2, [pc, #140]	; (8002008 <MX_USART1_UART_Init+0x94>)
 8001f7c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001f7e:	4b21      	ldr	r3, [pc, #132]	; (8002004 <MX_USART1_UART_Init+0x90>)
 8001f80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f84:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f86:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <MX_USART1_UART_Init+0x90>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <MX_USART1_UART_Init+0x90>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001f92:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <MX_USART1_UART_Init+0x90>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001f98:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <MX_USART1_UART_Init+0x90>)
 8001f9a:	220c      	movs	r2, #12
 8001f9c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f9e:	4b19      	ldr	r3, [pc, #100]	; (8002004 <MX_USART1_UART_Init+0x90>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa4:	4b17      	ldr	r3, [pc, #92]	; (8002004 <MX_USART1_UART_Init+0x90>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001faa:	4b16      	ldr	r3, [pc, #88]	; (8002004 <MX_USART1_UART_Init+0x90>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fb0:	4b14      	ldr	r3, [pc, #80]	; (8002004 <MX_USART1_UART_Init+0x90>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fb6:	4b13      	ldr	r3, [pc, #76]	; (8002004 <MX_USART1_UART_Init+0x90>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fbc:	4811      	ldr	r0, [pc, #68]	; (8002004 <MX_USART1_UART_Init+0x90>)
 8001fbe:	f009 fb2f 	bl	800b620 <HAL_UART_Init>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 8001fc8:	f000 f964 	bl	8002294 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fcc:	2100      	movs	r1, #0
 8001fce:	480d      	ldr	r0, [pc, #52]	; (8002004 <MX_USART1_UART_Init+0x90>)
 8001fd0:	f00a fc5d 	bl	800c88e <HAL_UARTEx_SetTxFifoThreshold>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_USART1_UART_Init+0x6a>
	{
		Error_Handler();
 8001fda:	f000 f95b 	bl	8002294 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4808      	ldr	r0, [pc, #32]	; (8002004 <MX_USART1_UART_Init+0x90>)
 8001fe2:	f00a fc92 	bl	800c90a <HAL_UARTEx_SetRxFifoThreshold>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_USART1_UART_Init+0x7c>
	{
		Error_Handler();
 8001fec:	f000 f952 	bl	8002294 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ff0:	4804      	ldr	r0, [pc, #16]	; (8002004 <MX_USART1_UART_Init+0x90>)
 8001ff2:	f00a fc13 	bl	800c81c <HAL_UARTEx_DisableFifoMode>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 8001ffc:	f000 f94a 	bl	8002294 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002000:	bf00      	nop
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000554 	.word	0x20000554
 8002008:	40013800 	.word	0x40013800

0800200c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002010:	4b24      	ldr	r3, [pc, #144]	; (80020a4 <MX_USART2_UART_Init+0x98>)
 8002012:	4a25      	ldr	r2, [pc, #148]	; (80020a8 <MX_USART2_UART_Init+0x9c>)
 8002014:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8002016:	4b23      	ldr	r3, [pc, #140]	; (80020a4 <MX_USART2_UART_Init+0x98>)
 8002018:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800201c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800201e:	4b21      	ldr	r3, [pc, #132]	; (80020a4 <MX_USART2_UART_Init+0x98>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002024:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <MX_USART2_UART_Init+0x98>)
 8002026:	2200      	movs	r2, #0
 8002028:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800202a:	4b1e      	ldr	r3, [pc, #120]	; (80020a4 <MX_USART2_UART_Init+0x98>)
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002030:	4b1c      	ldr	r3, [pc, #112]	; (80020a4 <MX_USART2_UART_Init+0x98>)
 8002032:	220c      	movs	r2, #12
 8002034:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002036:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <MX_USART2_UART_Init+0x98>)
 8002038:	2200      	movs	r2, #0
 800203a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800203c:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <MX_USART2_UART_Init+0x98>)
 800203e:	2200      	movs	r2, #0
 8002040:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002042:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <MX_USART2_UART_Init+0x98>)
 8002044:	2200      	movs	r2, #0
 8002046:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002048:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <MX_USART2_UART_Init+0x98>)
 800204a:	2200      	movs	r2, #0
 800204c:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800204e:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <MX_USART2_UART_Init+0x98>)
 8002050:	2210      	movs	r2, #16
 8002052:	629a      	str	r2, [r3, #40]	; 0x28
	huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002054:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <MX_USART2_UART_Init+0x98>)
 8002056:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800205a:	63da      	str	r2, [r3, #60]	; 0x3c
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800205c:	4811      	ldr	r0, [pc, #68]	; (80020a4 <MX_USART2_UART_Init+0x98>)
 800205e:	f009 fadf 	bl	800b620 <HAL_UART_Init>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_USART2_UART_Init+0x60>
	{
		Error_Handler();
 8002068:	f000 f914 	bl	8002294 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800206c:	2100      	movs	r1, #0
 800206e:	480d      	ldr	r0, [pc, #52]	; (80020a4 <MX_USART2_UART_Init+0x98>)
 8002070:	f00a fc0d 	bl	800c88e <HAL_UARTEx_SetTxFifoThreshold>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_USART2_UART_Init+0x72>
	{
		Error_Handler();
 800207a:	f000 f90b 	bl	8002294 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800207e:	2100      	movs	r1, #0
 8002080:	4808      	ldr	r0, [pc, #32]	; (80020a4 <MX_USART2_UART_Init+0x98>)
 8002082:	f00a fc42 	bl	800c90a <HAL_UARTEx_SetRxFifoThreshold>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_USART2_UART_Init+0x84>
	{
		Error_Handler();
 800208c:	f000 f902 	bl	8002294 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002090:	4804      	ldr	r0, [pc, #16]	; (80020a4 <MX_USART2_UART_Init+0x98>)
 8002092:	f00a fbc3 	bl	800c81c <HAL_UARTEx_DisableFifoMode>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_USART2_UART_Init+0x94>
	{
		Error_Handler();
 800209c:	f000 f8fa 	bl	8002294 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	200005e4 	.word	0x200005e4
 80020a8:	40004400 	.word	0x40004400

080020ac <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80020b2:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <MX_DMA_Init+0x44>)
 80020b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b6:	4a0e      	ldr	r2, [pc, #56]	; (80020f0 <MX_DMA_Init+0x44>)
 80020b8:	f043 0304 	orr.w	r3, r3, #4
 80020bc:	6493      	str	r3, [r2, #72]	; 0x48
 80020be:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <MX_DMA_Init+0x44>)
 80020c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	607b      	str	r3, [r7, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <MX_DMA_Init+0x44>)
 80020cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ce:	4a08      	ldr	r2, [pc, #32]	; (80020f0 <MX_DMA_Init+0x44>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6493      	str	r3, [r2, #72]	; 0x48
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <MX_DMA_Init+0x44>)
 80020d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]

}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40021000 	.word	0x40021000

080020f4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08c      	sub	sp, #48	; 0x30
 80020f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fa:	f107 031c 	add.w	r3, r7, #28
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]
 8002104:	609a      	str	r2, [r3, #8]
 8002106:	60da      	str	r2, [r3, #12]
 8002108:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800210a:	4b5d      	ldr	r3, [pc, #372]	; (8002280 <MX_GPIO_Init+0x18c>)
 800210c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210e:	4a5c      	ldr	r2, [pc, #368]	; (8002280 <MX_GPIO_Init+0x18c>)
 8002110:	f043 0310 	orr.w	r3, r3, #16
 8002114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002116:	4b5a      	ldr	r3, [pc, #360]	; (8002280 <MX_GPIO_Init+0x18c>)
 8002118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	61bb      	str	r3, [r7, #24]
 8002120:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002122:	4b57      	ldr	r3, [pc, #348]	; (8002280 <MX_GPIO_Init+0x18c>)
 8002124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002126:	4a56      	ldr	r2, [pc, #344]	; (8002280 <MX_GPIO_Init+0x18c>)
 8002128:	f043 0304 	orr.w	r3, r3, #4
 800212c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800212e:	4b54      	ldr	r3, [pc, #336]	; (8002280 <MX_GPIO_Init+0x18c>)
 8002130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800213a:	4b51      	ldr	r3, [pc, #324]	; (8002280 <MX_GPIO_Init+0x18c>)
 800213c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213e:	4a50      	ldr	r2, [pc, #320]	; (8002280 <MX_GPIO_Init+0x18c>)
 8002140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002146:	4b4e      	ldr	r3, [pc, #312]	; (8002280 <MX_GPIO_Init+0x18c>)
 8002148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002152:	4b4b      	ldr	r3, [pc, #300]	; (8002280 <MX_GPIO_Init+0x18c>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	4a4a      	ldr	r2, [pc, #296]	; (8002280 <MX_GPIO_Init+0x18c>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800215e:	4b48      	ldr	r3, [pc, #288]	; (8002280 <MX_GPIO_Init+0x18c>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800216a:	4b45      	ldr	r3, [pc, #276]	; (8002280 <MX_GPIO_Init+0x18c>)
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216e:	4a44      	ldr	r2, [pc, #272]	; (8002280 <MX_GPIO_Init+0x18c>)
 8002170:	f043 0302 	orr.w	r3, r3, #2
 8002174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002176:	4b42      	ldr	r3, [pc, #264]	; (8002280 <MX_GPIO_Init+0x18c>)
 8002178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002182:	4b3f      	ldr	r3, [pc, #252]	; (8002280 <MX_GPIO_Init+0x18c>)
 8002184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002186:	4a3e      	ldr	r2, [pc, #248]	; (8002280 <MX_GPIO_Init+0x18c>)
 8002188:	f043 0308 	orr.w	r3, r3, #8
 800218c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800218e:	4b3c      	ldr	r3, [pc, #240]	; (8002280 <MX_GPIO_Init+0x18c>)
 8002190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	607b      	str	r3, [r7, #4]
 8002198:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 800219a:	2200      	movs	r2, #0
 800219c:	f641 013c 	movw	r1, #6204	; 0x183c
 80021a0:	4838      	ldr	r0, [pc, #224]	; (8002284 <MX_GPIO_Init+0x190>)
 80021a2:	f001 fa73 	bl	800368c <HAL_GPIO_WritePin>
			|MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_SET);
 80021a6:	2201      	movs	r2, #1
 80021a8:	2130      	movs	r1, #48	; 0x30
 80021aa:	4837      	ldr	r0, [pc, #220]	; (8002288 <MX_GPIO_Init+0x194>)
 80021ac:	f001 fa6e 	bl	800368c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80021b0:	2200      	movs	r2, #0
 80021b2:	2178      	movs	r1, #120	; 0x78
 80021b4:	4835      	ldr	r0, [pc, #212]	; (800228c <MX_GPIO_Init+0x198>)
 80021b6:	f001 fa69 	bl	800368c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
	GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 80021ba:	f641 033c 	movw	r3, #6204	; 0x183c
 80021be:	61fb      	str	r3, [r7, #28]
			|MIRA_EN_PWR_Pin|OCPEN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c0:	2301      	movs	r3, #1
 80021c2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c8:	2300      	movs	r3, #0
 80021ca:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021cc:	f107 031c 	add.w	r3, r7, #28
 80021d0:	4619      	mov	r1, r3
 80021d2:	482c      	ldr	r0, [pc, #176]	; (8002284 <MX_GPIO_Init+0x190>)
 80021d4:	f001 f8b0 	bl	8003338 <HAL_GPIO_Init>

	/*Configure GPIO pin : CHG_INT_Pin */
	GPIO_InitStruct.Pin = CHG_INT_Pin;
 80021d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021dc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021de:	2300      	movs	r3, #0
 80021e0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 80021e6:	f107 031c 	add.w	r3, r7, #28
 80021ea:	4619      	mov	r1, r3
 80021ec:	4826      	ldr	r0, [pc, #152]	; (8002288 <MX_GPIO_Init+0x194>)
 80021ee:	f001 f8a3 	bl	8003338 <HAL_GPIO_Init>

	/*Configure GPIO pins : LORA_DIG0_Pin CARD_DETECT_Pin */
	GPIO_InitStruct.Pin = LORA_DIG0_Pin|CARD_DETECT_Pin;
 80021f2:	f248 0302 	movw	r3, #32770	; 0x8002
 80021f6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021f8:	2300      	movs	r3, #0
 80021fa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002200:	f107 031c 	add.w	r3, r7, #28
 8002204:	4619      	mov	r1, r3
 8002206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800220a:	f001 f895 	bl	8003338 <HAL_GPIO_Init>

	/*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
	GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 800220e:	2330      	movs	r3, #48	; 0x30
 8002210:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002212:	2301      	movs	r3, #1
 8002214:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221a:	2300      	movs	r3, #0
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221e:	f107 031c 	add.w	r3, r7, #28
 8002222:	4619      	mov	r1, r3
 8002224:	4818      	ldr	r0, [pc, #96]	; (8002288 <MX_GPIO_Init+0x194>)
 8002226:	f001 f887 	bl	8003338 <HAL_GPIO_Init>

	/*Configure GPIO pin : OCPFAULT_Pin */
	GPIO_InitStruct.Pin = OCPFAULT_Pin;
 800222a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800222e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002230:	2300      	movs	r3, #0
 8002232:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002234:	2301      	movs	r3, #1
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 8002238:	f107 031c 	add.w	r3, r7, #28
 800223c:	4619      	mov	r1, r3
 800223e:	4811      	ldr	r0, [pc, #68]	; (8002284 <MX_GPIO_Init+0x190>)
 8002240:	f001 f87a 	bl	8003338 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8002244:	2378      	movs	r3, #120	; 0x78
 8002246:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002248:	2301      	movs	r3, #1
 800224a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002250:	2300      	movs	r3, #0
 8002252:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002254:	f107 031c 	add.w	r3, r7, #28
 8002258:	4619      	mov	r1, r3
 800225a:	480c      	ldr	r0, [pc, #48]	; (800228c <MX_GPIO_Init+0x198>)
 800225c:	f001 f86c 	bl	8003338 <HAL_GPIO_Init>

	/*Configure GPIO pin : POWERGOOD_Pin */
	GPIO_InitStruct.Pin = POWERGOOD_Pin;
 8002260:	2320      	movs	r3, #32
 8002262:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002264:	2300      	movs	r3, #0
 8002266:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 800226c:	f107 031c 	add.w	r3, r7, #28
 8002270:	4619      	mov	r1, r3
 8002272:	4807      	ldr	r0, [pc, #28]	; (8002290 <MX_GPIO_Init+0x19c>)
 8002274:	f001 f860 	bl	8003338 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002278:	bf00      	nop
 800227a:	3730      	adds	r7, #48	; 0x30
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40021000 	.word	0x40021000
 8002284:	48001000 	.word	0x48001000
 8002288:	48000800 	.word	0x48000800
 800228c:	48000c00 	.word	0x48000c00
 8002290:	48000400 	.word	0x48000400

08002294 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002298:	b672      	cpsid	i
}
 800229a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	printf("Error_Handler() called");
 800229c:	4801      	ldr	r0, [pc, #4]	; (80022a4 <Error_Handler+0x10>)
 800229e:	f00f fef3 	bl	8012088 <iprintf>
	while (1)
 80022a2:	e7fe      	b.n	80022a2 <Error_Handler+0xe>
 80022a4:	08014178 	.word	0x08014178

080022a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ae:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <HAL_MspInit+0x44>)
 80022b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b2:	4a0e      	ldr	r2, [pc, #56]	; (80022ec <HAL_MspInit+0x44>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6613      	str	r3, [r2, #96]	; 0x60
 80022ba:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <HAL_MspInit+0x44>)
 80022bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	4b09      	ldr	r3, [pc, #36]	; (80022ec <HAL_MspInit+0x44>)
 80022c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ca:	4a08      	ldr	r2, [pc, #32]	; (80022ec <HAL_MspInit+0x44>)
 80022cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d0:	6593      	str	r3, [r2, #88]	; 0x58
 80022d2:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_MspInit+0x44>)
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022da:	603b      	str	r3, [r7, #0]
 80022dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	40021000 	.word	0x40021000

080022f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b0ae      	sub	sp, #184	; 0xb8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002308:	f107 0310 	add.w	r3, r7, #16
 800230c:	2294      	movs	r2, #148	; 0x94
 800230e:	2100      	movs	r1, #0
 8002310:	4618      	mov	r0, r3
 8002312:	f00f f967 	bl	80115e4 <memset>
  if(hi2c->Instance==I2C1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a21      	ldr	r2, [pc, #132]	; (80023a0 <HAL_I2C_MspInit+0xb0>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d13a      	bne.n	8002396 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002320:	2340      	movs	r3, #64	; 0x40
 8002322:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002324:	2300      	movs	r3, #0
 8002326:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002328:	f107 0310 	add.w	r3, r7, #16
 800232c:	4618      	mov	r0, r3
 800232e:	f003 fcb7 	bl	8005ca0 <HAL_RCCEx_PeriphCLKConfig>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002338:	f7ff ffac 	bl	8002294 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233c:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <HAL_I2C_MspInit+0xb4>)
 800233e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002340:	4a18      	ldr	r2, [pc, #96]	; (80023a4 <HAL_I2C_MspInit+0xb4>)
 8002342:	f043 0302 	orr.w	r3, r3, #2
 8002346:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002348:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <HAL_I2C_MspInit+0xb4>)
 800234a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002354:	23c0      	movs	r3, #192	; 0xc0
 8002356:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800235a:	2312      	movs	r3, #18
 800235c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002366:	2303      	movs	r3, #3
 8002368:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800236c:	2304      	movs	r3, #4
 800236e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002372:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002376:	4619      	mov	r1, r3
 8002378:	480b      	ldr	r0, [pc, #44]	; (80023a8 <HAL_I2C_MspInit+0xb8>)
 800237a:	f000 ffdd 	bl	8003338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <HAL_I2C_MspInit+0xb4>)
 8002380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002382:	4a08      	ldr	r2, [pc, #32]	; (80023a4 <HAL_I2C_MspInit+0xb4>)
 8002384:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002388:	6593      	str	r3, [r2, #88]	; 0x58
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_I2C_MspInit+0xb4>)
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002396:	bf00      	nop
 8002398:	37b8      	adds	r7, #184	; 0xb8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40005400 	.word	0x40005400
 80023a4:	40021000 	.word	0x40021000
 80023a8:	48000400 	.word	0x48000400

080023ac <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b0b0      	sub	sp, #192	; 0xc0
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023c4:	f107 0318 	add.w	r3, r7, #24
 80023c8:	2294      	movs	r2, #148	; 0x94
 80023ca:	2100      	movs	r1, #0
 80023cc:	4618      	mov	r0, r3
 80023ce:	f00f f909 	bl	80115e4 <memset>
  if(hsd->Instance==SDMMC1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a33      	ldr	r2, [pc, #204]	; (80024a4 <HAL_SD_MspInit+0xf8>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d15e      	bne.n	800249a <HAL_SD_MspInit+0xee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80023dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80023e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 80023e2:	2300      	movs	r3, #0
 80023e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023e8:	f107 0318 	add.w	r3, r7, #24
 80023ec:	4618      	mov	r0, r3
 80023ee:	f003 fc57 	bl	8005ca0 <HAL_RCCEx_PeriphCLKConfig>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 80023f8:	f7ff ff4c 	bl	8002294 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80023fc:	4b2a      	ldr	r3, [pc, #168]	; (80024a8 <HAL_SD_MspInit+0xfc>)
 80023fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002400:	4a29      	ldr	r2, [pc, #164]	; (80024a8 <HAL_SD_MspInit+0xfc>)
 8002402:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002406:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002408:	4b27      	ldr	r3, [pc, #156]	; (80024a8 <HAL_SD_MspInit+0xfc>)
 800240a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002414:	4b24      	ldr	r3, [pc, #144]	; (80024a8 <HAL_SD_MspInit+0xfc>)
 8002416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002418:	4a23      	ldr	r2, [pc, #140]	; (80024a8 <HAL_SD_MspInit+0xfc>)
 800241a:	f043 0304 	orr.w	r3, r3, #4
 800241e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002420:	4b21      	ldr	r3, [pc, #132]	; (80024a8 <HAL_SD_MspInit+0xfc>)
 8002422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800242c:	4b1e      	ldr	r3, [pc, #120]	; (80024a8 <HAL_SD_MspInit+0xfc>)
 800242e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002430:	4a1d      	ldr	r2, [pc, #116]	; (80024a8 <HAL_SD_MspInit+0xfc>)
 8002432:	f043 0308 	orr.w	r3, r3, #8
 8002436:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002438:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <HAL_SD_MspInit+0xfc>)
 800243a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002444:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002448:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244c:	2302      	movs	r3, #2
 800244e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002458:	2303      	movs	r3, #3
 800245a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800245e:	230c      	movs	r3, #12
 8002460:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002464:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002468:	4619      	mov	r1, r3
 800246a:	4810      	ldr	r0, [pc, #64]	; (80024ac <HAL_SD_MspInit+0x100>)
 800246c:	f000 ff64 	bl	8003338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002470:	2304      	movs	r3, #4
 8002472:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002476:	2302      	movs	r3, #2
 8002478:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002482:	2303      	movs	r3, #3
 8002484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002488:	230c      	movs	r3, #12
 800248a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800248e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002492:	4619      	mov	r1, r3
 8002494:	4806      	ldr	r0, [pc, #24]	; (80024b0 <HAL_SD_MspInit+0x104>)
 8002496:	f000 ff4f 	bl	8003338 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800249a:	bf00      	nop
 800249c:	37c0      	adds	r7, #192	; 0xc0
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	50062400 	.word	0x50062400
 80024a8:	40021000 	.word	0x40021000
 80024ac:	48000800 	.word	0x48000800
 80024b0:	48000c00 	.word	0x48000c00

080024b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08a      	sub	sp, #40	; 0x28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f107 0314 	add.w	r3, r7, #20
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a17      	ldr	r2, [pc, #92]	; (8002530 <HAL_SPI_MspInit+0x7c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d128      	bne.n	8002528 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024d6:	4b17      	ldr	r3, [pc, #92]	; (8002534 <HAL_SPI_MspInit+0x80>)
 80024d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024da:	4a16      	ldr	r2, [pc, #88]	; (8002534 <HAL_SPI_MspInit+0x80>)
 80024dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024e0:	6613      	str	r3, [r2, #96]	; 0x60
 80024e2:	4b14      	ldr	r3, [pc, #80]	; (8002534 <HAL_SPI_MspInit+0x80>)
 80024e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ee:	4b11      	ldr	r3, [pc, #68]	; (8002534 <HAL_SPI_MspInit+0x80>)
 80024f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f2:	4a10      	ldr	r2, [pc, #64]	; (8002534 <HAL_SPI_MspInit+0x80>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024fa:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <HAL_SPI_MspInit+0x80>)
 80024fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|LORA0_SCK_Pin|LORA0_MISO_Pin|LORA0_MOSI_Pin;
 8002506:	23f0      	movs	r3, #240	; 0xf0
 8002508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250a:	2302      	movs	r3, #2
 800250c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002512:	2303      	movs	r3, #3
 8002514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002516:	2305      	movs	r3, #5
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251a:	f107 0314 	add.w	r3, r7, #20
 800251e:	4619      	mov	r1, r3
 8002520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002524:	f000 ff08 	bl	8003338 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002528:	bf00      	nop
 800252a:	3728      	adds	r7, #40	; 0x28
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40013000 	.word	0x40013000
 8002534:	40021000 	.word	0x40021000

08002538 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a0a      	ldr	r2, [pc, #40]	; (8002570 <HAL_TIM_Base_MspInit+0x38>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d10b      	bne.n	8002562 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800254a:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <HAL_TIM_Base_MspInit+0x3c>)
 800254c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800254e:	4a09      	ldr	r2, [pc, #36]	; (8002574 <HAL_TIM_Base_MspInit+0x3c>)
 8002550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002554:	6613      	str	r3, [r2, #96]	; 0x60
 8002556:	4b07      	ldr	r3, [pc, #28]	; (8002574 <HAL_TIM_Base_MspInit+0x3c>)
 8002558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800255a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002562:	bf00      	nop
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40014800 	.word	0x40014800
 8002574:	40021000 	.word	0x40021000

08002578 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b0b0      	sub	sp, #192	; 0xc0
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002580:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002590:	f107 0318 	add.w	r3, r7, #24
 8002594:	2294      	movs	r2, #148	; 0x94
 8002596:	2100      	movs	r1, #0
 8002598:	4618      	mov	r0, r3
 800259a:	f00f f823 	bl	80115e4 <memset>
  if(huart->Instance==USART1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a6c      	ldr	r2, [pc, #432]	; (8002754 <HAL_UART_MspInit+0x1dc>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	f040 8090 	bne.w	80026ca <HAL_UART_MspInit+0x152>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80025aa:	2301      	movs	r3, #1
 80025ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80025ae:	2300      	movs	r3, #0
 80025b0:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025b2:	f107 0318 	add.w	r3, r7, #24
 80025b6:	4618      	mov	r0, r3
 80025b8:	f003 fb72 	bl	8005ca0 <HAL_RCCEx_PeriphCLKConfig>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80025c2:	f7ff fe67 	bl	8002294 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025c6:	4b64      	ldr	r3, [pc, #400]	; (8002758 <HAL_UART_MspInit+0x1e0>)
 80025c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ca:	4a63      	ldr	r2, [pc, #396]	; (8002758 <HAL_UART_MspInit+0x1e0>)
 80025cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025d0:	6613      	str	r3, [r2, #96]	; 0x60
 80025d2:	4b61      	ldr	r3, [pc, #388]	; (8002758 <HAL_UART_MspInit+0x1e0>)
 80025d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025de:	4b5e      	ldr	r3, [pc, #376]	; (8002758 <HAL_UART_MspInit+0x1e0>)
 80025e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e2:	4a5d      	ldr	r2, [pc, #372]	; (8002758 <HAL_UART_MspInit+0x1e0>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ea:	4b5b      	ldr	r3, [pc, #364]	; (8002758 <HAL_UART_MspInit+0x1e0>)
 80025ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 80025f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fe:	2302      	movs	r3, #2
 8002600:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260a:	2303      	movs	r3, #3
 800260c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002610:	2307      	movs	r3, #7
 8002612:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002616:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800261a:	4619      	mov	r1, r3
 800261c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002620:	f000 fe8a 	bl	8003338 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8002624:	4b4d      	ldr	r3, [pc, #308]	; (800275c <HAL_UART_MspInit+0x1e4>)
 8002626:	4a4e      	ldr	r2, [pc, #312]	; (8002760 <HAL_UART_MspInit+0x1e8>)
 8002628:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800262a:	4b4c      	ldr	r3, [pc, #304]	; (800275c <HAL_UART_MspInit+0x1e4>)
 800262c:	2218      	movs	r2, #24
 800262e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002630:	4b4a      	ldr	r3, [pc, #296]	; (800275c <HAL_UART_MspInit+0x1e4>)
 8002632:	2200      	movs	r2, #0
 8002634:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002636:	4b49      	ldr	r3, [pc, #292]	; (800275c <HAL_UART_MspInit+0x1e4>)
 8002638:	2200      	movs	r2, #0
 800263a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800263c:	4b47      	ldr	r3, [pc, #284]	; (800275c <HAL_UART_MspInit+0x1e4>)
 800263e:	2280      	movs	r2, #128	; 0x80
 8002640:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002642:	4b46      	ldr	r3, [pc, #280]	; (800275c <HAL_UART_MspInit+0x1e4>)
 8002644:	2200      	movs	r2, #0
 8002646:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002648:	4b44      	ldr	r3, [pc, #272]	; (800275c <HAL_UART_MspInit+0x1e4>)
 800264a:	2200      	movs	r2, #0
 800264c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800264e:	4b43      	ldr	r3, [pc, #268]	; (800275c <HAL_UART_MspInit+0x1e4>)
 8002650:	2200      	movs	r2, #0
 8002652:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002654:	4b41      	ldr	r3, [pc, #260]	; (800275c <HAL_UART_MspInit+0x1e4>)
 8002656:	2200      	movs	r2, #0
 8002658:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800265a:	4840      	ldr	r0, [pc, #256]	; (800275c <HAL_UART_MspInit+0x1e4>)
 800265c:	f000 fb3e 	bl	8002cdc <HAL_DMA_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8002666:	f7ff fe15 	bl	8002294 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a3b      	ldr	r2, [pc, #236]	; (800275c <HAL_UART_MspInit+0x1e4>)
 800266e:	67da      	str	r2, [r3, #124]	; 0x7c
 8002670:	4a3a      	ldr	r2, [pc, #232]	; (800275c <HAL_UART_MspInit+0x1e4>)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8002676:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <HAL_UART_MspInit+0x1ec>)
 8002678:	4a3b      	ldr	r2, [pc, #236]	; (8002768 <HAL_UART_MspInit+0x1f0>)
 800267a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800267c:	4b39      	ldr	r3, [pc, #228]	; (8002764 <HAL_UART_MspInit+0x1ec>)
 800267e:	2219      	movs	r2, #25
 8002680:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002682:	4b38      	ldr	r3, [pc, #224]	; (8002764 <HAL_UART_MspInit+0x1ec>)
 8002684:	2210      	movs	r2, #16
 8002686:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002688:	4b36      	ldr	r3, [pc, #216]	; (8002764 <HAL_UART_MspInit+0x1ec>)
 800268a:	2200      	movs	r2, #0
 800268c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800268e:	4b35      	ldr	r3, [pc, #212]	; (8002764 <HAL_UART_MspInit+0x1ec>)
 8002690:	2280      	movs	r2, #128	; 0x80
 8002692:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002694:	4b33      	ldr	r3, [pc, #204]	; (8002764 <HAL_UART_MspInit+0x1ec>)
 8002696:	2200      	movs	r2, #0
 8002698:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800269a:	4b32      	ldr	r3, [pc, #200]	; (8002764 <HAL_UART_MspInit+0x1ec>)
 800269c:	2200      	movs	r2, #0
 800269e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80026a0:	4b30      	ldr	r3, [pc, #192]	; (8002764 <HAL_UART_MspInit+0x1ec>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026a6:	4b2f      	ldr	r3, [pc, #188]	; (8002764 <HAL_UART_MspInit+0x1ec>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80026ac:	482d      	ldr	r0, [pc, #180]	; (8002764 <HAL_UART_MspInit+0x1ec>)
 80026ae:	f000 fb15 	bl	8002cdc <HAL_DMA_Init>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <HAL_UART_MspInit+0x144>
    {
      Error_Handler();
 80026b8:	f7ff fdec 	bl	8002294 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a29      	ldr	r2, [pc, #164]	; (8002764 <HAL_UART_MspInit+0x1ec>)
 80026c0:	679a      	str	r2, [r3, #120]	; 0x78
 80026c2:	4a28      	ldr	r2, [pc, #160]	; (8002764 <HAL_UART_MspInit+0x1ec>)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026c8:	e040      	b.n	800274c <HAL_UART_MspInit+0x1d4>
  else if(huart->Instance==USART2)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a27      	ldr	r2, [pc, #156]	; (800276c <HAL_UART_MspInit+0x1f4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d13b      	bne.n	800274c <HAL_UART_MspInit+0x1d4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80026d4:	2302      	movs	r3, #2
 80026d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80026d8:	2300      	movs	r3, #0
 80026da:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026dc:	f107 0318 	add.w	r3, r7, #24
 80026e0:	4618      	mov	r0, r3
 80026e2:	f003 fadd 	bl	8005ca0 <HAL_RCCEx_PeriphCLKConfig>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_UART_MspInit+0x178>
      Error_Handler();
 80026ec:	f7ff fdd2 	bl	8002294 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026f0:	4b19      	ldr	r3, [pc, #100]	; (8002758 <HAL_UART_MspInit+0x1e0>)
 80026f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f4:	4a18      	ldr	r2, [pc, #96]	; (8002758 <HAL_UART_MspInit+0x1e0>)
 80026f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026fa:	6593      	str	r3, [r2, #88]	; 0x58
 80026fc:	4b16      	ldr	r3, [pc, #88]	; (8002758 <HAL_UART_MspInit+0x1e0>)
 80026fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002708:	4b13      	ldr	r3, [pc, #76]	; (8002758 <HAL_UART_MspInit+0x1e0>)
 800270a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270c:	4a12      	ldr	r2, [pc, #72]	; (8002758 <HAL_UART_MspInit+0x1e0>)
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002714:	4b10      	ldr	r3, [pc, #64]	; (8002758 <HAL_UART_MspInit+0x1e0>)
 8002716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8002720:	230c      	movs	r3, #12
 8002722:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002726:	2302      	movs	r3, #2
 8002728:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002732:	2303      	movs	r3, #3
 8002734:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002738:	2307      	movs	r3, #7
 800273a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002742:	4619      	mov	r1, r3
 8002744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002748:	f000 fdf6 	bl	8003338 <HAL_GPIO_Init>
}
 800274c:	bf00      	nop
 800274e:	37c0      	adds	r7, #192	; 0xc0
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40013800 	.word	0x40013800
 8002758:	40021000 	.word	0x40021000
 800275c:	20000674 	.word	0x20000674
 8002760:	40020008 	.word	0x40020008
 8002764:	200006d4 	.word	0x200006d4
 8002768:	4002001c 	.word	0x4002001c
 800276c:	40004400 	.word	0x40004400

08002770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002774:	f003 f9b8 	bl	8005ae8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8002778:	e7fe      	b.n	8002778 <NMI_Handler+0x8>

0800277a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800277e:	e7fe      	b.n	800277e <HardFault_Handler+0x4>

08002780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002784:	e7fe      	b.n	8002784 <MemManage_Handler+0x4>

08002786 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002786:	b480      	push	{r7}
 8002788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800278a:	e7fe      	b.n	800278a <BusFault_Handler+0x4>

0800278c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002790:	e7fe      	b.n	8002790 <UsageFault_Handler+0x4>

08002792 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002792:	b480      	push	{r7}
 8002794:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ae:	b480      	push	{r7}
 80027b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027c0:	f000 f936 	bl	8002a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80027cc:	4802      	ldr	r0, [pc, #8]	; (80027d8 <DMA1_Channel1_IRQHandler+0x10>)
 80027ce:	f000 fc63 	bl	8003098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000674 	.word	0x20000674

080027dc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80027e0:	4802      	ldr	r0, [pc, #8]	; (80027ec <DMA1_Channel2_IRQHandler+0x10>)
 80027e2:	f000 fc59 	bl	8003098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	200006d4 	.word	0x200006d4

080027f0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	if (tick) {tick--;}
 80027f4:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d006      	beq.n	800280c <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>
 80027fe:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	b2db      	uxtb	r3, r3
 8002804:	3b01      	subs	r3, #1
 8002806:	b2da      	uxtb	r2, r3
 8002808:	4b09      	ldr	r3, [pc, #36]	; (8002830 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 800280a:	701a      	strb	r2, [r3, #0]
	if (tickGPS) {tickGPS--;}
 800280c:	4b09      	ldr	r3, [pc, #36]	; (8002834 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d006      	beq.n	8002824 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>
 8002816:	4b07      	ldr	r3, [pc, #28]	; (8002834 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	3b01      	subs	r3, #1
 800281e:	b2da      	uxtb	r2, r3
 8002820:	4b04      	ldr	r3, [pc, #16]	; (8002834 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 8002822:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002824:	4804      	ldr	r0, [pc, #16]	; (8002838 <TIM1_TRG_COM_TIM17_IRQHandler+0x48>)
 8002826:	f008 f924 	bl	800aa72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000d80 	.word	0x20000d80
 8002834:	20000d81 	.word	0x20000d81
 8002838:	20000508 	.word	0x20000508

0800283c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
//		if (mira_rxBuffer == mira_rxBuffer1) {mira_rxBuffer = mira_rxBuffer2;}
//		else {mira_rxBuffer = mira_rxBuffer1;}
//		HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
//	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002840:	4802      	ldr	r0, [pc, #8]	; (800284c <USART1_IRQHandler+0x10>)
 8002842:	f008 ff3d 	bl	800b6c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20000554 	.word	0x20000554

08002850 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	char c = huart2.Instance->RDR;
 8002856:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <USART2_IRQHandler+0x90>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800285c:	b29b      	uxth	r3, r3
 800285e:	71fb      	strb	r3, [r7, #7]
	if (gps_rxBufferPos < gps_RXBUFSIZE - 1)
 8002860:	4b20      	ldr	r3, [pc, #128]	; (80028e4 <USART2_IRQHandler+0x94>)
 8002862:	781b      	ldrb	r3, [r3, #0]
	{ gps_rxBuffer[gps_rxBufferPos++] = (uint8_t) c; }
 8002864:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <USART2_IRQHandler+0x98>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	4b1e      	ldr	r3, [pc, #120]	; (80028e4 <USART2_IRQHandler+0x94>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	1c59      	adds	r1, r3, #1
 8002870:	b2c8      	uxtb	r0, r1
 8002872:	491c      	ldr	r1, [pc, #112]	; (80028e4 <USART2_IRQHandler+0x94>)
 8002874:	7008      	strb	r0, [r1, #0]
 8002876:	4413      	add	r3, r2
 8002878:	79fa      	ldrb	r2, [r7, #7]
 800287a:	701a      	strb	r2, [r3, #0]

	if ((c == '\n') && (gps_send_ready))// && (tickGPS == 0))// && (tickGPS == 0)) //(c == '\r') ||
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	2b0a      	cmp	r3, #10
 8002880:	d126      	bne.n	80028d0 <USART2_IRQHandler+0x80>
 8002882:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <USART2_IRQHandler+0x9c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d022      	beq.n	80028d0 <USART2_IRQHandler+0x80>
	{
		//tickGPS = 1;
		gps_rxBuffer[gps_rxBufferPos] = 0;
 800288a:	4b17      	ldr	r3, [pc, #92]	; (80028e8 <USART2_IRQHandler+0x98>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a15      	ldr	r2, [pc, #84]	; (80028e4 <USART2_IRQHandler+0x94>)
 8002890:	7812      	ldrb	r2, [r2, #0]
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	4413      	add	r3, r2
 8002896:	2200      	movs	r2, #0
 8002898:	701a      	strb	r2, [r3, #0]
		gps_data_ready |= 1;
 800289a:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <USART2_IRQHandler+0xa0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	4a13      	ldr	r2, [pc, #76]	; (80028f0 <USART2_IRQHandler+0xa0>)
 80028a4:	6013      	str	r3, [r2, #0]
		gps_send_ready ^= 1;
 80028a6:	4b11      	ldr	r3, [pc, #68]	; (80028ec <USART2_IRQHandler+0x9c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f083 0301 	eor.w	r3, r3, #1
 80028ae:	4a0f      	ldr	r2, [pc, #60]	; (80028ec <USART2_IRQHandler+0x9c>)
 80028b0:	6013      	str	r3, [r2, #0]
		gps_rxBufferPos = 0;
 80028b2:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <USART2_IRQHandler+0x94>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
		if (gps_rxBuffer == gps_rxBuffer1) {gps_rxBuffer = gps_rxBuffer2;}
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <USART2_IRQHandler+0x98>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0d      	ldr	r2, [pc, #52]	; (80028f4 <USART2_IRQHandler+0xa4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d103      	bne.n	80028ca <USART2_IRQHandler+0x7a>
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <USART2_IRQHandler+0x98>)
 80028c4:	4a0c      	ldr	r2, [pc, #48]	; (80028f8 <USART2_IRQHandler+0xa8>)
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	e002      	b.n	80028d0 <USART2_IRQHandler+0x80>
		else {gps_rxBuffer = gps_rxBuffer1;}
 80028ca:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <USART2_IRQHandler+0x98>)
 80028cc:	4a09      	ldr	r2, [pc, #36]	; (80028f4 <USART2_IRQHandler+0xa4>)
 80028ce:	601a      	str	r2, [r3, #0]

	//HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
	//rchar = huart2.Instance->RDR;

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028d0:	4803      	ldr	r0, [pc, #12]	; (80028e0 <USART2_IRQHandler+0x90>)
 80028d2:	f008 fef5 	bl	800b6c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	//ATOMIC_SET_BIT(huart2.Instance->CR3, USART_CR3_EIE);
  /* USER CODE END USART2_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	200005e4 	.word	0x200005e4
 80028e4:	20000d78 	.word	0x20000d78
 80028e8:	20000d74 	.word	0x20000d74
 80028ec:	20000008 	.word	0x20000008
 80028f0:	20000d7c 	.word	0x20000d7c
 80028f4:	20000734 	.word	0x20000734
 80028f8:	20000a54 	.word	0x20000a54

080028fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002900:	4802      	ldr	r0, [pc, #8]	; (800290c <OTG_FS_IRQHandler+0x10>)
 8002902:	f001 f97c 	bl	8003bfe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20002274 	.word	0x20002274

08002910 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002914:	4b06      	ldr	r3, [pc, #24]	; (8002930 <SystemInit+0x20>)
 8002916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291a:	4a05      	ldr	r2, [pc, #20]	; (8002930 <SystemInit+0x20>)
 800291c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800296c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002938:	f7ff ffea 	bl	8002910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800293c:	480c      	ldr	r0, [pc, #48]	; (8002970 <LoopForever+0x6>)
  ldr r1, =_edata
 800293e:	490d      	ldr	r1, [pc, #52]	; (8002974 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002940:	4a0d      	ldr	r2, [pc, #52]	; (8002978 <LoopForever+0xe>)
  movs r3, #0
 8002942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002944:	e002      	b.n	800294c <LoopCopyDataInit>

08002946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800294a:	3304      	adds	r3, #4

0800294c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800294c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800294e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002950:	d3f9      	bcc.n	8002946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002952:	4a0a      	ldr	r2, [pc, #40]	; (800297c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002954:	4c0a      	ldr	r4, [pc, #40]	; (8002980 <LoopForever+0x16>)
  movs r3, #0
 8002956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002958:	e001      	b.n	800295e <LoopFillZerobss>

0800295a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800295a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800295c:	3204      	adds	r2, #4

0800295e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800295e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002960:	d3fb      	bcc.n	800295a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002962:	f00e fe05 	bl	8011570 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002966:	f7fe ffdb 	bl	8001920 <main>

0800296a <LoopForever>:

LoopForever:
    b LoopForever
 800296a:	e7fe      	b.n	800296a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800296c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002974:	2000035c 	.word	0x2000035c
  ldr r2, =_sidata
 8002978:	08014650 	.word	0x08014650
  ldr r2, =_sbss
 800297c:	2000035c 	.word	0x2000035c
  ldr r4, =_ebss
 8002980:	200029b4 	.word	0x200029b4

08002984 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002984:	e7fe      	b.n	8002984 <ADC1_IRQHandler>

08002986 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002990:	2003      	movs	r0, #3
 8002992:	f000 f961 	bl	8002c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002996:	200f      	movs	r0, #15
 8002998:	f000 f80e 	bl	80029b8 <HAL_InitTick>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	71fb      	strb	r3, [r7, #7]
 80029a6:	e001      	b.n	80029ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029a8:	f7ff fc7e 	bl	80022a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029ac:	79fb      	ldrb	r3, [r7, #7]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80029c4:	4b17      	ldr	r3, [pc, #92]	; (8002a24 <HAL_InitTick+0x6c>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d023      	beq.n	8002a14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80029cc:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <HAL_InitTick+0x70>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4b14      	ldr	r3, [pc, #80]	; (8002a24 <HAL_InitTick+0x6c>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	4619      	mov	r1, r3
 80029d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029da:	fbb3 f3f1 	udiv	r3, r3, r1
 80029de:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 f96d 	bl	8002cc2 <HAL_SYSTICK_Config>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10f      	bne.n	8002a0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b0f      	cmp	r3, #15
 80029f2:	d809      	bhi.n	8002a08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029f4:	2200      	movs	r2, #0
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029fc:	f000 f937 	bl	8002c6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a00:	4a0a      	ldr	r2, [pc, #40]	; (8002a2c <HAL_InitTick+0x74>)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	e007      	b.n	8002a18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	73fb      	strb	r3, [r7, #15]
 8002a0c:	e004      	b.n	8002a18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]
 8002a12:	e001      	b.n	8002a18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000014 	.word	0x20000014
 8002a28:	2000000c 	.word	0x2000000c
 8002a2c:	20000010 	.word	0x20000010

08002a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <HAL_IncTick+0x20>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_IncTick+0x24>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4413      	add	r3, r2
 8002a40:	4a04      	ldr	r2, [pc, #16]	; (8002a54 <HAL_IncTick+0x24>)
 8002a42:	6013      	str	r3, [r2, #0]
}
 8002a44:	bf00      	nop
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	20000014 	.word	0x20000014
 8002a54:	20000d84 	.word	0x20000d84

08002a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a5c:	4b03      	ldr	r3, [pc, #12]	; (8002a6c <HAL_GetTick+0x14>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	20000d84 	.word	0x20000d84

08002a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a78:	f7ff ffee 	bl	8002a58 <HAL_GetTick>
 8002a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a88:	d005      	beq.n	8002a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002a8a:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <HAL_Delay+0x44>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4413      	add	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a96:	bf00      	nop
 8002a98:	f7ff ffde 	bl	8002a58 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d8f7      	bhi.n	8002a98 <HAL_Delay+0x28>
  {
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000014 	.word	0x20000014

08002ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aea:	4a04      	ldr	r2, [pc, #16]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	60d3      	str	r3, [r2, #12]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <__NVIC_GetPriorityGrouping+0x18>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	0a1b      	lsrs	r3, r3, #8
 8002b0a:	f003 0307 	and.w	r3, r3, #7
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	db0b      	blt.n	8002b46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	f003 021f 	and.w	r2, r3, #31
 8002b34:	4907      	ldr	r1, [pc, #28]	; (8002b54 <__NVIC_EnableIRQ+0x38>)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	e000e100 	.word	0xe000e100

08002b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	6039      	str	r1, [r7, #0]
 8002b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	db0a      	blt.n	8002b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	490c      	ldr	r1, [pc, #48]	; (8002ba4 <__NVIC_SetPriority+0x4c>)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	0112      	lsls	r2, r2, #4
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b80:	e00a      	b.n	8002b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	4908      	ldr	r1, [pc, #32]	; (8002ba8 <__NVIC_SetPriority+0x50>)
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	3b04      	subs	r3, #4
 8002b90:	0112      	lsls	r2, r2, #4
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	440b      	add	r3, r1
 8002b96:	761a      	strb	r2, [r3, #24]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000e100 	.word	0xe000e100
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b089      	sub	sp, #36	; 0x24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f1c3 0307 	rsb	r3, r3, #7
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	bf28      	it	cs
 8002bca:	2304      	movcs	r3, #4
 8002bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	2b06      	cmp	r3, #6
 8002bd4:	d902      	bls.n	8002bdc <NVIC_EncodePriority+0x30>
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3b03      	subs	r3, #3
 8002bda:	e000      	b.n	8002bde <NVIC_EncodePriority+0x32>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43da      	mvns	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	401a      	ands	r2, r3
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	43d9      	mvns	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c04:	4313      	orrs	r3, r2
         );
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3724      	adds	r7, #36	; 0x24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c24:	d301      	bcc.n	8002c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c26:	2301      	movs	r3, #1
 8002c28:	e00f      	b.n	8002c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c2a:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <SysTick_Config+0x40>)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c32:	210f      	movs	r1, #15
 8002c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c38:	f7ff ff8e 	bl	8002b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <SysTick_Config+0x40>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c42:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <SysTick_Config+0x40>)
 8002c44:	2207      	movs	r2, #7
 8002c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	e000e010 	.word	0xe000e010

08002c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff ff29 	bl	8002ab8 <__NVIC_SetPriorityGrouping>
}
 8002c66:	bf00      	nop
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b086      	sub	sp, #24
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	4603      	mov	r3, r0
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c80:	f7ff ff3e 	bl	8002b00 <__NVIC_GetPriorityGrouping>
 8002c84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	6978      	ldr	r0, [r7, #20]
 8002c8c:	f7ff ff8e 	bl	8002bac <NVIC_EncodePriority>
 8002c90:	4602      	mov	r2, r0
 8002c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c96:	4611      	mov	r1, r2
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff ff5d 	bl	8002b58 <__NVIC_SetPriority>
}
 8002c9e:	bf00      	nop
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4603      	mov	r3, r0
 8002cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff ff31 	bl	8002b1c <__NVIC_EnableIRQ>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7ff ffa2 	bl	8002c14 <SysTick_Config>
 8002cd0:	4603      	mov	r3, r0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e08d      	b.n	8002e0a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	4b47      	ldr	r3, [pc, #284]	; (8002e14 <HAL_DMA_Init+0x138>)
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d80f      	bhi.n	8002d1a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	4b45      	ldr	r3, [pc, #276]	; (8002e18 <HAL_DMA_Init+0x13c>)
 8002d02:	4413      	add	r3, r2
 8002d04:	4a45      	ldr	r2, [pc, #276]	; (8002e1c <HAL_DMA_Init+0x140>)
 8002d06:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0a:	091b      	lsrs	r3, r3, #4
 8002d0c:	009a      	lsls	r2, r3, #2
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a42      	ldr	r2, [pc, #264]	; (8002e20 <HAL_DMA_Init+0x144>)
 8002d16:	641a      	str	r2, [r3, #64]	; 0x40
 8002d18:	e00e      	b.n	8002d38 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4b40      	ldr	r3, [pc, #256]	; (8002e24 <HAL_DMA_Init+0x148>)
 8002d22:	4413      	add	r3, r2
 8002d24:	4a3d      	ldr	r2, [pc, #244]	; (8002e1c <HAL_DMA_Init+0x140>)
 8002d26:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2a:	091b      	lsrs	r3, r3, #4
 8002d2c:	009a      	lsls	r2, r3, #2
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a3c      	ldr	r2, [pc, #240]	; (8002e28 <HAL_DMA_Init+0x14c>)
 8002d36:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fa72 	bl	8003274 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d98:	d102      	bne.n	8002da0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002db4:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d010      	beq.n	8002de0 <HAL_DMA_Init+0x104>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d80c      	bhi.n	8002de0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 fa92 	bl	80032f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	e008      	b.n	8002df2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40020407 	.word	0x40020407
 8002e18:	bffdfff8 	.word	0xbffdfff8
 8002e1c:	cccccccd 	.word	0xcccccccd
 8002e20:	40020000 	.word	0x40020000
 8002e24:	bffdfbf8 	.word	0xbffdfbf8
 8002e28:	40020400 	.word	0x40020400

08002e2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
 8002e38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_DMA_Start_IT+0x20>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e066      	b.n	8002f1a <HAL_DMA_Start_IT+0xee>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d155      	bne.n	8002f0c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0201 	bic.w	r2, r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	68b9      	ldr	r1, [r7, #8]
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 f9b6 	bl	80031f6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d008      	beq.n	8002ea4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 020e 	orr.w	r2, r2, #14
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	e00f      	b.n	8002ec4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0204 	bic.w	r2, r2, #4
 8002eb2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 020a 	orr.w	r2, r2, #10
 8002ec2:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d007      	beq.n	8002ee2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002edc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ee0:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d007      	beq.n	8002efa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ef8:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f042 0201 	orr.w	r2, r2, #1
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	e005      	b.n	8002f18 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f14:	2302      	movs	r3, #2
 8002f16:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b085      	sub	sp, #20
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d008      	beq.n	8002f4c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e040      	b.n	8002fce <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 020e 	bic.w	r2, r2, #14
 8002f5a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f6a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0201 	bic.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f80:	f003 021c 	and.w	r2, r3, #28
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	2101      	movs	r1, #1
 8002f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f8e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f98:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00c      	beq.n	8002fbc <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fb0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002fba:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b084      	sub	sp, #16
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d005      	beq.n	8002ffe <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	73fb      	strb	r3, [r7, #15]
 8002ffc:	e047      	b.n	800308e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 020e 	bic.w	r2, r2, #14
 800300c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0201 	bic.w	r2, r2, #1
 800301c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003028:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800302c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003032:	f003 021c 	and.w	r2, r3, #28
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	2101      	movs	r1, #1
 800303c:	fa01 f202 	lsl.w	r2, r1, r2
 8003040:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800304a:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00c      	beq.n	800306e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003062:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800306c:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	4798      	blx	r3
    }
  }
  return status;
 800308e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b4:	f003 031c 	and.w	r3, r3, #28
 80030b8:	2204      	movs	r2, #4
 80030ba:	409a      	lsls	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4013      	ands	r3, r2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d026      	beq.n	8003112 <HAL_DMA_IRQHandler+0x7a>
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d021      	beq.n	8003112 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d107      	bne.n	80030ec <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0204 	bic.w	r2, r2, #4
 80030ea:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f0:	f003 021c 	and.w	r2, r3, #28
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	2104      	movs	r1, #4
 80030fa:	fa01 f202 	lsl.w	r2, r1, r2
 80030fe:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003104:	2b00      	cmp	r3, #0
 8003106:	d071      	beq.n	80031ec <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003110:	e06c      	b.n	80031ec <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	f003 031c 	and.w	r3, r3, #28
 800311a:	2202      	movs	r2, #2
 800311c:	409a      	lsls	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4013      	ands	r3, r2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d02e      	beq.n	8003184 <HAL_DMA_IRQHandler+0xec>
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d029      	beq.n	8003184 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10b      	bne.n	8003156 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 020a 	bic.w	r2, r2, #10
 800314c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315a:	f003 021c 	and.w	r2, r3, #28
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	2102      	movs	r1, #2
 8003164:	fa01 f202 	lsl.w	r2, r1, r2
 8003168:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d038      	beq.n	80031ec <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003182:	e033      	b.n	80031ec <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003188:	f003 031c 	and.w	r3, r3, #28
 800318c:	2208      	movs	r2, #8
 800318e:	409a      	lsls	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4013      	ands	r3, r2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d02a      	beq.n	80031ee <HAL_DMA_IRQHandler+0x156>
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d025      	beq.n	80031ee <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 020e 	bic.w	r2, r2, #14
 80031b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	f003 021c 	and.w	r2, r3, #28
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	2101      	movs	r1, #1
 80031c0:	fa01 f202 	lsl.w	r2, r1, r2
 80031c4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d004      	beq.n	80031ee <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80031ec:	bf00      	nop
 80031ee:	bf00      	nop
}
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b085      	sub	sp, #20
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
 8003202:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800320c:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003212:	2b00      	cmp	r3, #0
 8003214:	d004      	beq.n	8003220 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800321e:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003224:	f003 021c 	and.w	r2, r3, #28
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	2101      	movs	r1, #1
 800322e:	fa01 f202 	lsl.w	r2, r1, r2
 8003232:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2b10      	cmp	r3, #16
 8003242:	d108      	bne.n	8003256 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003254:	e007      	b.n	8003266 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	60da      	str	r2, [r3, #12]
}
 8003266:	bf00      	nop
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	461a      	mov	r2, r3
 8003282:	4b17      	ldr	r3, [pc, #92]	; (80032e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003284:	429a      	cmp	r2, r3
 8003286:	d80a      	bhi.n	800329e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328c:	089b      	lsrs	r3, r3, #2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003294:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6493      	str	r3, [r2, #72]	; 0x48
 800329c:	e007      	b.n	80032ae <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a2:	089b      	lsrs	r3, r3, #2
 80032a4:	009a      	lsls	r2, r3, #2
 80032a6:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80032a8:	4413      	add	r3, r2
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	3b08      	subs	r3, #8
 80032b6:	4a0c      	ldr	r2, [pc, #48]	; (80032e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80032b8:	fba2 2303 	umull	r2, r3, r2, r3
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a0a      	ldr	r2, [pc, #40]	; (80032ec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80032c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f003 031f 	and.w	r3, r3, #31
 80032cc:	2201      	movs	r2, #1
 80032ce:	409a      	lsls	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80032d4:	bf00      	nop
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	40020407 	.word	0x40020407
 80032e4:	4002081c 	.word	0x4002081c
 80032e8:	cccccccd 	.word	0xcccccccd
 80032ec:	40020880 	.word	0x40020880

080032f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	461a      	mov	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a08      	ldr	r2, [pc, #32]	; (8003334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003312:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	3b01      	subs	r3, #1
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	2201      	movs	r2, #1
 800331e:	409a      	lsls	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003324:	bf00      	nop
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	1000823f 	.word	0x1000823f
 8003334:	40020940 	.word	0x40020940

08003338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003346:	e166      	b.n	8003616 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	2101      	movs	r1, #1
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	fa01 f303 	lsl.w	r3, r1, r3
 8003354:	4013      	ands	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 8158 	beq.w	8003610 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 0303 	and.w	r3, r3, #3
 8003368:	2b01      	cmp	r3, #1
 800336a:	d005      	beq.n	8003378 <HAL_GPIO_Init+0x40>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d130      	bne.n	80033da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	2203      	movs	r2, #3
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033ae:	2201      	movs	r2, #1
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4013      	ands	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	091b      	lsrs	r3, r3, #4
 80033c4:	f003 0201 	and.w	r2, r3, #1
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d017      	beq.n	8003416 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	2203      	movs	r2, #3
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43db      	mvns	r3, r3
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4013      	ands	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d123      	bne.n	800346a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	08da      	lsrs	r2, r3, #3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3208      	adds	r2, #8
 800342a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800342e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	220f      	movs	r2, #15
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43db      	mvns	r3, r3
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4013      	ands	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	691a      	ldr	r2, [r3, #16]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	08da      	lsrs	r2, r3, #3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3208      	adds	r2, #8
 8003464:	6939      	ldr	r1, [r7, #16]
 8003466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	2203      	movs	r2, #3
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43db      	mvns	r3, r3
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4013      	ands	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f003 0203 	and.w	r2, r3, #3
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 80b2 	beq.w	8003610 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ac:	4b61      	ldr	r3, [pc, #388]	; (8003634 <HAL_GPIO_Init+0x2fc>)
 80034ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b0:	4a60      	ldr	r2, [pc, #384]	; (8003634 <HAL_GPIO_Init+0x2fc>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	6613      	str	r3, [r2, #96]	; 0x60
 80034b8:	4b5e      	ldr	r3, [pc, #376]	; (8003634 <HAL_GPIO_Init+0x2fc>)
 80034ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	60bb      	str	r3, [r7, #8]
 80034c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034c4:	4a5c      	ldr	r2, [pc, #368]	; (8003638 <HAL_GPIO_Init+0x300>)
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	089b      	lsrs	r3, r3, #2
 80034ca:	3302      	adds	r3, #2
 80034cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	220f      	movs	r2, #15
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4013      	ands	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034ee:	d02b      	beq.n	8003548 <HAL_GPIO_Init+0x210>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a52      	ldr	r2, [pc, #328]	; (800363c <HAL_GPIO_Init+0x304>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d025      	beq.n	8003544 <HAL_GPIO_Init+0x20c>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a51      	ldr	r2, [pc, #324]	; (8003640 <HAL_GPIO_Init+0x308>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d01f      	beq.n	8003540 <HAL_GPIO_Init+0x208>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a50      	ldr	r2, [pc, #320]	; (8003644 <HAL_GPIO_Init+0x30c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d019      	beq.n	800353c <HAL_GPIO_Init+0x204>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a4f      	ldr	r2, [pc, #316]	; (8003648 <HAL_GPIO_Init+0x310>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d013      	beq.n	8003538 <HAL_GPIO_Init+0x200>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a4e      	ldr	r2, [pc, #312]	; (800364c <HAL_GPIO_Init+0x314>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d00d      	beq.n	8003534 <HAL_GPIO_Init+0x1fc>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a4d      	ldr	r2, [pc, #308]	; (8003650 <HAL_GPIO_Init+0x318>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d007      	beq.n	8003530 <HAL_GPIO_Init+0x1f8>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a4c      	ldr	r2, [pc, #304]	; (8003654 <HAL_GPIO_Init+0x31c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d101      	bne.n	800352c <HAL_GPIO_Init+0x1f4>
 8003528:	2307      	movs	r3, #7
 800352a:	e00e      	b.n	800354a <HAL_GPIO_Init+0x212>
 800352c:	2308      	movs	r3, #8
 800352e:	e00c      	b.n	800354a <HAL_GPIO_Init+0x212>
 8003530:	2306      	movs	r3, #6
 8003532:	e00a      	b.n	800354a <HAL_GPIO_Init+0x212>
 8003534:	2305      	movs	r3, #5
 8003536:	e008      	b.n	800354a <HAL_GPIO_Init+0x212>
 8003538:	2304      	movs	r3, #4
 800353a:	e006      	b.n	800354a <HAL_GPIO_Init+0x212>
 800353c:	2303      	movs	r3, #3
 800353e:	e004      	b.n	800354a <HAL_GPIO_Init+0x212>
 8003540:	2302      	movs	r3, #2
 8003542:	e002      	b.n	800354a <HAL_GPIO_Init+0x212>
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <HAL_GPIO_Init+0x212>
 8003548:	2300      	movs	r3, #0
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	f002 0203 	and.w	r2, r2, #3
 8003550:	0092      	lsls	r2, r2, #2
 8003552:	4093      	lsls	r3, r2
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800355a:	4937      	ldr	r1, [pc, #220]	; (8003638 <HAL_GPIO_Init+0x300>)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	089b      	lsrs	r3, r3, #2
 8003560:	3302      	adds	r3, #2
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003568:	4b3b      	ldr	r3, [pc, #236]	; (8003658 <HAL_GPIO_Init+0x320>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	43db      	mvns	r3, r3
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4013      	ands	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800358c:	4a32      	ldr	r2, [pc, #200]	; (8003658 <HAL_GPIO_Init+0x320>)
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003592:	4b31      	ldr	r3, [pc, #196]	; (8003658 <HAL_GPIO_Init+0x320>)
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	43db      	mvns	r3, r3
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4013      	ands	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035b6:	4a28      	ldr	r2, [pc, #160]	; (8003658 <HAL_GPIO_Init+0x320>)
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035bc:	4b26      	ldr	r3, [pc, #152]	; (8003658 <HAL_GPIO_Init+0x320>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	43db      	mvns	r3, r3
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4013      	ands	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035e0:	4a1d      	ldr	r2, [pc, #116]	; (8003658 <HAL_GPIO_Init+0x320>)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80035e6:	4b1c      	ldr	r3, [pc, #112]	; (8003658 <HAL_GPIO_Init+0x320>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	43db      	mvns	r3, r3
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4013      	ands	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800360a:	4a13      	ldr	r2, [pc, #76]	; (8003658 <HAL_GPIO_Init+0x320>)
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	3301      	adds	r3, #1
 8003614:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	f47f ae91 	bne.w	8003348 <HAL_GPIO_Init+0x10>
  }
}
 8003626:	bf00      	nop
 8003628:	bf00      	nop
 800362a:	371c      	adds	r7, #28
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	40021000 	.word	0x40021000
 8003638:	40010000 	.word	0x40010000
 800363c:	48000400 	.word	0x48000400
 8003640:	48000800 	.word	0x48000800
 8003644:	48000c00 	.word	0x48000c00
 8003648:	48001000 	.word	0x48001000
 800364c:	48001400 	.word	0x48001400
 8003650:	48001800 	.word	0x48001800
 8003654:	48001c00 	.word	0x48001c00
 8003658:	40010400 	.word	0x40010400

0800365c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	887b      	ldrh	r3, [r7, #2]
 800366e:	4013      	ands	r3, r2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003674:	2301      	movs	r3, #1
 8003676:	73fb      	strb	r3, [r7, #15]
 8003678:	e001      	b.n	800367e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800367a:	2300      	movs	r3, #0
 800367c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800367e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	807b      	strh	r3, [r7, #2]
 8003698:	4613      	mov	r3, r2
 800369a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800369c:	787b      	ldrb	r3, [r7, #1]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036a2:	887a      	ldrh	r2, [r7, #2]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036a8:	e002      	b.n	80036b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036aa:	887a      	ldrh	r2, [r7, #2]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036ce:	887a      	ldrh	r2, [r7, #2]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4013      	ands	r3, r2
 80036d4:	041a      	lsls	r2, r3, #16
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	43d9      	mvns	r1, r3
 80036da:	887b      	ldrh	r3, [r7, #2]
 80036dc:	400b      	ands	r3, r1
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	619a      	str	r2, [r3, #24]
}
 80036e4:	bf00      	nop
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e081      	b.n	8003806 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fe fdea 	bl	80022f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2224      	movs	r2, #36	; 0x24
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0201 	bic.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003740:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003750:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d107      	bne.n	800376a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003766:	609a      	str	r2, [r3, #8]
 8003768:	e006      	b.n	8003778 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003776:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	2b02      	cmp	r3, #2
 800377e:	d104      	bne.n	800378a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003788:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800379c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69d9      	ldr	r1, [r3, #28]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a1a      	ldr	r2, [r3, #32]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0201 	orr.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800381c:	b2db      	uxtb	r3, r3
}
 800381e:	4618      	mov	r0, r3
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
 8003832:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b20      	cmp	r3, #32
 800383e:	d138      	bne.n	80038b2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800384a:	2302      	movs	r3, #2
 800384c:	e032      	b.n	80038b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2224      	movs	r2, #36	; 0x24
 800385a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0201 	bic.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800387c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6819      	ldr	r1, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f042 0201 	orr.w	r2, r2, #1
 800389c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2220      	movs	r2, #32
 80038a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	e000      	b.n	80038b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038b2:	2302      	movs	r3, #2
  }
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b20      	cmp	r3, #32
 80038d4:	d139      	bne.n	800394a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e033      	b.n	800394c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2224      	movs	r2, #36	; 0x24
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0201 	bic.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003912:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	4313      	orrs	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f042 0201 	orr.w	r2, r2, #1
 8003934:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2220      	movs	r2, #32
 800393a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	e000      	b.n	800394c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800394a:	2302      	movs	r3, #2
  }
}
 800394c:	4618      	mov	r0, r3
 800394e:	3714      	adds	r7, #20
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800395a:	b08f      	sub	sp, #60	; 0x3c
 800395c:	af0a      	add	r7, sp, #40	; 0x28
 800395e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e116      	b.n	8003b98 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d106      	bne.n	800398a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f00d fa0f 	bl	8010da8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2203      	movs	r2, #3
 800398e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399a:	2b00      	cmp	r3, #0
 800399c:	d102      	bne.n	80039a4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f009 fefa 	bl	800d7a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	687e      	ldr	r6, [r7, #4]
 80039b6:	466d      	mov	r5, sp
 80039b8:	f106 0410 	add.w	r4, r6, #16
 80039bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80039cc:	1d33      	adds	r3, r6, #4
 80039ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039d0:	6838      	ldr	r0, [r7, #0]
 80039d2:	f009 fe0d 	bl	800d5f0 <USB_CoreInit>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0d7      	b.n	8003b98 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2100      	movs	r1, #0
 80039ee:	4618      	mov	r0, r3
 80039f0:	f009 fee8 	bl	800d7c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039f4:	2300      	movs	r3, #0
 80039f6:	73fb      	strb	r3, [r7, #15]
 80039f8:	e04a      	b.n	8003a90 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039fa:	7bfa      	ldrb	r2, [r7, #15]
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4613      	mov	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	333d      	adds	r3, #61	; 0x3d
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a0e:	7bfa      	ldrb	r2, [r7, #15]
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	4413      	add	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	333c      	adds	r3, #60	; 0x3c
 8003a1e:	7bfa      	ldrb	r2, [r7, #15]
 8003a20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a22:	7bfa      	ldrb	r2, [r7, #15]
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
 8003a26:	b298      	uxth	r0, r3
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	4413      	add	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	3344      	adds	r3, #68	; 0x44
 8003a36:	4602      	mov	r2, r0
 8003a38:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a3a:	7bfa      	ldrb	r2, [r7, #15]
 8003a3c:	6879      	ldr	r1, [r7, #4]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	4413      	add	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	440b      	add	r3, r1
 8003a48:	3340      	adds	r3, #64	; 0x40
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a4e:	7bfa      	ldrb	r2, [r7, #15]
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	4413      	add	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	3348      	adds	r3, #72	; 0x48
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a62:	7bfa      	ldrb	r2, [r7, #15]
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	334c      	adds	r3, #76	; 0x4c
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a76:	7bfa      	ldrb	r2, [r7, #15]
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	4413      	add	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	440b      	add	r3, r1
 8003a84:	3354      	adds	r3, #84	; 0x54
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]
 8003a90:	7bfa      	ldrb	r2, [r7, #15]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d3af      	bcc.n	80039fa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	73fb      	strb	r3, [r7, #15]
 8003a9e:	e044      	b.n	8003b2a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003aa0:	7bfa      	ldrb	r2, [r7, #15]
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ab6:	7bfa      	ldrb	r2, [r7, #15]
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	4613      	mov	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003ac8:	7bfa      	ldrb	r2, [r7, #15]
 8003aca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003acc:	7bfa      	ldrb	r2, [r7, #15]
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ade:	2200      	movs	r2, #0
 8003ae0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ae2:	7bfa      	ldrb	r2, [r7, #15]
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	440b      	add	r3, r1
 8003af0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003af8:	7bfa      	ldrb	r2, [r7, #15]
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b0e:	7bfa      	ldrb	r2, [r7, #15]
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	4413      	add	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	3301      	adds	r3, #1
 8003b28:	73fb      	strb	r3, [r7, #15]
 8003b2a:	7bfa      	ldrb	r2, [r7, #15]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d3b5      	bcc.n	8003aa0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	603b      	str	r3, [r7, #0]
 8003b3a:	687e      	ldr	r6, [r7, #4]
 8003b3c:	466d      	mov	r5, sp
 8003b3e:	f106 0410 	add.w	r4, r6, #16
 8003b42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b52:	1d33      	adds	r3, r6, #4
 8003b54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b56:	6838      	ldr	r0, [r7, #0]
 8003b58:	f009 fe80 	bl	800d85c <USB_DevInit>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d005      	beq.n	8003b6e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2202      	movs	r2, #2
 8003b66:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e014      	b.n	8003b98 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d102      	bne.n	8003b8c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f001 f882 	bl	8004c90 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f00a ff08 	bl	800e9a6 <USB_DevDisconnect>

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ba0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_PCD_Start+0x1c>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e01c      	b.n	8003bf6 <HAL_PCD_Start+0x56>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d105      	bne.n	8003bd8 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f009 fdcf 	bl	800d780 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f00a febc 	bl	800e964 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003bfe:	b590      	push	{r4, r7, lr}
 8003c00:	b08d      	sub	sp, #52	; 0x34
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f00a ff7a 	bl	800eb0e <USB_GetMode>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f040 847e 	bne.w	800451e <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f00a fede 	bl	800e9e8 <USB_ReadInterrupts>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 8474 	beq.w	800451c <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	0a1b      	lsrs	r3, r3, #8
 8003c3e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f00a fecb 	bl	800e9e8 <USB_ReadInterrupts>
 8003c52:	4603      	mov	r3, r0
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d107      	bne.n	8003c6c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695a      	ldr	r2, [r3, #20]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f002 0202 	and.w	r2, r2, #2
 8003c6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f00a feb9 	bl	800e9e8 <USB_ReadInterrupts>
 8003c76:	4603      	mov	r3, r0
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	2b10      	cmp	r3, #16
 8003c7e:	d161      	bne.n	8003d44 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699a      	ldr	r2, [r3, #24]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0210 	bic.w	r2, r2, #16
 8003c8e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	f003 020f 	and.w	r2, r3, #15
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	4413      	add	r3, r2
 8003cac:	3304      	adds	r3, #4
 8003cae:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	0c5b      	lsrs	r3, r3, #17
 8003cb4:	f003 030f 	and.w	r3, r3, #15
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d124      	bne.n	8003d06 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d035      	beq.n	8003d34 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	091b      	lsrs	r3, r3, #4
 8003cd0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003cd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	461a      	mov	r2, r3
 8003cda:	6a38      	ldr	r0, [r7, #32]
 8003cdc:	f00a fcf0 	bl	800e6c0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	091b      	lsrs	r3, r3, #4
 8003ce8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cec:	441a      	add	r2, r3
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	6a1a      	ldr	r2, [r3, #32]
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	091b      	lsrs	r3, r3, #4
 8003cfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cfe:	441a      	add	r2, r3
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	621a      	str	r2, [r3, #32]
 8003d04:	e016      	b.n	8003d34 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	0c5b      	lsrs	r3, r3, #17
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	2b06      	cmp	r3, #6
 8003d10:	d110      	bne.n	8003d34 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d18:	2208      	movs	r2, #8
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	6a38      	ldr	r0, [r7, #32]
 8003d1e:	f00a fccf 	bl	800e6c0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	6a1a      	ldr	r2, [r3, #32]
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	091b      	lsrs	r3, r3, #4
 8003d2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d2e:	441a      	add	r2, r3
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699a      	ldr	r2, [r3, #24]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0210 	orr.w	r2, r2, #16
 8003d42:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f00a fe4d 	bl	800e9e8 <USB_ReadInterrupts>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d54:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d58:	f040 80a7 	bne.w	8003eaa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f00a fe52 	bl	800ea0e <USB_ReadDevAllOutEpInterrupt>
 8003d6a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003d6c:	e099      	b.n	8003ea2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 808e 	beq.w	8003e96 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	4611      	mov	r1, r2
 8003d84:	4618      	mov	r0, r3
 8003d86:	f00a fe76 	bl	800ea76 <USB_ReadDevOutEPInterrupt>
 8003d8a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00c      	beq.n	8003db0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	015a      	lsls	r2, r3, #5
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da2:	461a      	mov	r2, r3
 8003da4:	2301      	movs	r3, #1
 8003da6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003da8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fe96 	bl	8004adc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00c      	beq.n	8003dd4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	2308      	movs	r3, #8
 8003dca:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003dcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 fed2 	bl	8004b78 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	f003 0310 	and.w	r3, r3, #16
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d008      	beq.n	8003df0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dea:	461a      	mov	r2, r3
 8003dec:	2310      	movs	r3, #16
 8003dee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d030      	beq.n	8003e5c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e02:	2b80      	cmp	r3, #128	; 0x80
 8003e04:	d109      	bne.n	8003e1a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	69fa      	ldr	r2, [r7, #28]
 8003e10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e18:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	4413      	add	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	78db      	ldrb	r3, [r3, #3]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d108      	bne.n	8003e4a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	4619      	mov	r1, r3
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f00d f8f3 	bl	8011030 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e56:	461a      	mov	r2, r3
 8003e58:	2302      	movs	r3, #2
 8003e5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d008      	beq.n	8003e78 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	015a      	lsls	r2, r3, #5
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e72:	461a      	mov	r2, r3
 8003e74:	2320      	movs	r3, #32
 8003e76:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d009      	beq.n	8003e96 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e94:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	3301      	adds	r3, #1
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9e:	085b      	lsrs	r3, r3, #1
 8003ea0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f47f af62 	bne.w	8003d6e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f00a fd9a 	bl	800e9e8 <USB_ReadInterrupts>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ebe:	f040 80a4 	bne.w	800400a <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f00a fdbb 	bl	800ea42 <USB_ReadDevAllInEpInterrupt>
 8003ecc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003ed2:	e096      	b.n	8004002 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 808b 	beq.w	8003ff6 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	4611      	mov	r1, r2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f00a fde1 	bl	800eab2 <USB_ReadDevInEPInterrupt>
 8003ef0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d020      	beq.n	8003f3e <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	2201      	movs	r2, #1
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	43db      	mvns	r3, r3
 8003f16:	69f9      	ldr	r1, [r7, #28]
 8003f18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	2301      	movs	r3, #1
 8003f30:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	4619      	mov	r1, r3
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f00c ffe4 	bl	8010f06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d008      	beq.n	8003f5a <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f54:	461a      	mov	r2, r3
 8003f56:	2308      	movs	r3, #8
 8003f58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f003 0310 	and.w	r3, r3, #16
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d008      	beq.n	8003f76 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f70:	461a      	mov	r2, r3
 8003f72:	2310      	movs	r3, #16
 8003f74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	2340      	movs	r3, #64	; 0x40
 8003f90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d023      	beq.n	8003fe4 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003f9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f9e:	6a38      	ldr	r0, [r7, #32]
 8003fa0:	f009 fda8 	bl	800daf4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	4413      	add	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	3338      	adds	r3, #56	; 0x38
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	78db      	ldrb	r3, [r3, #3]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d108      	bne.n	8003fd2 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	4619      	mov	r1, r3
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f00d f841 	bl	8011054 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fde:	461a      	mov	r2, r3
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003fee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 fcea 	bl	80049ca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffe:	085b      	lsrs	r3, r3, #1
 8004000:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004004:	2b00      	cmp	r3, #0
 8004006:	f47f af65 	bne.w	8003ed4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f00a fcea 	bl	800e9e8 <USB_ReadInterrupts>
 8004014:	4603      	mov	r3, r0
 8004016:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800401a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800401e:	d122      	bne.n	8004066 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	69fa      	ldr	r2, [r7, #28]
 800402a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800402e:	f023 0301 	bic.w	r3, r3, #1
 8004032:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800403a:	2b01      	cmp	r3, #1
 800403c:	d108      	bne.n	8004050 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004046:	2100      	movs	r1, #0
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 fe45 	bl	8004cd8 <HAL_PCDEx_LPM_Callback>
 800404e:	e002      	b.n	8004056 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f00c ffc5 	bl	8010fe0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695a      	ldr	r2, [r3, #20]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004064:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f00a fcbc 	bl	800e9e8 <USB_ReadInterrupts>
 8004070:	4603      	mov	r3, r0
 8004072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800407a:	d112      	bne.n	80040a2 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b01      	cmp	r3, #1
 800408a:	d102      	bne.n	8004092 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f00c ff81 	bl	8010f94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695a      	ldr	r2, [r3, #20]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80040a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f00a fc9e 	bl	800e9e8 <USB_ReadInterrupts>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040b6:	d121      	bne.n	80040fc <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695a      	ldr	r2, [r3, #20]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80040c6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d111      	bne.n	80040f6 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e0:	089b      	lsrs	r3, r3, #2
 80040e2:	f003 020f 	and.w	r2, r3, #15
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80040ec:	2101      	movs	r1, #1
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fdf2 	bl	8004cd8 <HAL_PCDEx_LPM_Callback>
 80040f4:	e002      	b.n	80040fc <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f00c ff4c 	bl	8010f94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f00a fc71 	bl	800e9e8 <USB_ReadInterrupts>
 8004106:	4603      	mov	r3, r0
 8004108:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800410c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004110:	f040 80b5 	bne.w	800427e <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	69fa      	ldr	r2, [r7, #28]
 800411e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004122:	f023 0301 	bic.w	r3, r3, #1
 8004126:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2110      	movs	r1, #16
 800412e:	4618      	mov	r0, r3
 8004130:	f009 fce0 	bl	800daf4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004134:	2300      	movs	r3, #0
 8004136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004138:	e046      	b.n	80041c8 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800413a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	4413      	add	r3, r2
 8004142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004146:	461a      	mov	r2, r3
 8004148:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800414c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800414e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004150:	015a      	lsls	r2, r3, #5
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	4413      	add	r3, r2
 8004156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800415e:	0151      	lsls	r1, r2, #5
 8004160:	69fa      	ldr	r2, [r7, #28]
 8004162:	440a      	add	r2, r1
 8004164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004168:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800416c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800416e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	4413      	add	r3, r2
 8004176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417a:	461a      	mov	r2, r3
 800417c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004180:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004192:	0151      	lsls	r1, r2, #5
 8004194:	69fa      	ldr	r2, [r7, #28]
 8004196:	440a      	add	r2, r1
 8004198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800419c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80041a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041b2:	0151      	lsls	r1, r2, #5
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	440a      	add	r2, r1
 80041b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041c0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c4:	3301      	adds	r3, #1
 80041c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d3b3      	bcc.n	800413a <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041e0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80041e4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d016      	beq.n	800421c <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041f8:	69fa      	ldr	r2, [r7, #28]
 80041fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041fe:	f043 030b 	orr.w	r3, r3, #11
 8004202:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800420c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420e:	69fa      	ldr	r2, [r7, #28]
 8004210:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004214:	f043 030b 	orr.w	r3, r3, #11
 8004218:	6453      	str	r3, [r2, #68]	; 0x44
 800421a:	e015      	b.n	8004248 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800422a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800422e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004232:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	69fa      	ldr	r2, [r7, #28]
 800423e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004242:	f043 030b 	orr.w	r3, r3, #11
 8004246:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	69fa      	ldr	r2, [r7, #28]
 8004252:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004256:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800425a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004266:	4619      	mov	r1, r3
 8004268:	4610      	mov	r0, r2
 800426a:	f00a fc81 	bl	800eb70 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695a      	ldr	r2, [r3, #20]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800427c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f00a fbb0 	bl	800e9e8 <USB_ReadInterrupts>
 8004288:	4603      	mov	r3, r0
 800428a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800428e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004292:	d124      	bne.n	80042de <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4618      	mov	r0, r3
 800429a:	f00a fc46 	bl	800eb2a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f009 fca3 	bl	800dbee <USB_GetDevSpeed>
 80042a8:	4603      	mov	r3, r0
 80042aa:	461a      	mov	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681c      	ldr	r4, [r3, #0]
 80042b4:	f001 fbd0 	bl	8005a58 <HAL_RCC_GetHCLKFreq>
 80042b8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	461a      	mov	r2, r3
 80042c2:	4620      	mov	r0, r4
 80042c4:	f009 f9c0 	bl	800d648 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f00c fe44 	bl	8010f56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695a      	ldr	r2, [r3, #20]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80042dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f00a fb80 	bl	800e9e8 <USB_ReadInterrupts>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d10a      	bne.n	8004308 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f00c fe21 	bl	8010f3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695a      	ldr	r2, [r3, #20]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f002 0208 	and.w	r2, r2, #8
 8004306:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4618      	mov	r0, r3
 800430e:	f00a fb6b 	bl	800e9e8 <USB_ReadInterrupts>
 8004312:	4603      	mov	r3, r0
 8004314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004318:	2b80      	cmp	r3, #128	; 0x80
 800431a:	d122      	bne.n	8004362 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004328:	2301      	movs	r3, #1
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
 800432c:	e014      	b.n	8004358 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004332:	4613      	mov	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	4413      	add	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	440b      	add	r3, r1
 800433c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d105      	bne.n	8004352 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	b2db      	uxtb	r3, r3
 800434a:	4619      	mov	r1, r3
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 fb0b 	bl	8004968 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	3301      	adds	r3, #1
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800435e:	429a      	cmp	r2, r3
 8004360:	d3e5      	bcc.n	800432e <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f00a fb3e 	bl	800e9e8 <USB_ReadInterrupts>
 800436c:	4603      	mov	r3, r0
 800436e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004376:	d13b      	bne.n	80043f0 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004378:	2301      	movs	r3, #1
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
 800437c:	e02b      	b.n	80043d6 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004392:	4613      	mov	r3, r2
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	4413      	add	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	440b      	add	r3, r1
 800439c:	3340      	adds	r3, #64	; 0x40
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d115      	bne.n	80043d0 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80043a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	da12      	bge.n	80043d0 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ae:	4613      	mov	r3, r2
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	4413      	add	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	440b      	add	r3, r1
 80043b8:	333f      	adds	r3, #63	; 0x3f
 80043ba:	2201      	movs	r2, #1
 80043bc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	4619      	mov	r1, r3
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 facc 	bl	8004968 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	3301      	adds	r3, #1
 80043d4:	627b      	str	r3, [r7, #36]	; 0x24
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043dc:	429a      	cmp	r2, r3
 80043de:	d3ce      	bcc.n	800437e <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	695a      	ldr	r2, [r3, #20]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80043ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f00a faf7 	bl	800e9e8 <USB_ReadInterrupts>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004400:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004404:	d155      	bne.n	80044b2 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004406:	2301      	movs	r3, #1
 8004408:	627b      	str	r3, [r7, #36]	; 0x24
 800440a:	e045      	b.n	8004498 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	4413      	add	r3, r2
 8004414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004420:	4613      	mov	r3, r2
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	4413      	add	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d12e      	bne.n	8004492 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004434:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004436:	2b00      	cmp	r3, #0
 8004438:	da2b      	bge.n	8004492 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004446:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800444a:	429a      	cmp	r2, r3
 800444c:	d121      	bne.n	8004492 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800444e:	6879      	ldr	r1, [r7, #4]
 8004450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004452:	4613      	mov	r3, r2
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	440b      	add	r3, r1
 800445c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004460:	2201      	movs	r2, #1
 8004462:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10a      	bne.n	8004492 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	69fa      	ldr	r2, [r7, #28]
 8004486:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800448a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800448e:	6053      	str	r3, [r2, #4]
            break;
 8004490:	e007      	b.n	80044a2 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004494:	3301      	adds	r3, #1
 8004496:	627b      	str	r3, [r7, #36]	; 0x24
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800449e:	429a      	cmp	r2, r3
 80044a0:	d3b4      	bcc.n	800440c <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695a      	ldr	r2, [r3, #20]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80044b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f00a fa96 	bl	800e9e8 <USB_ReadInterrupts>
 80044bc:	4603      	mov	r3, r0
 80044be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80044c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c6:	d10a      	bne.n	80044de <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f00c fdd5 	bl	8011078 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695a      	ldr	r2, [r3, #20]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80044dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f00a fa80 	bl	800e9e8 <USB_ReadInterrupts>
 80044e8:	4603      	mov	r3, r0
 80044ea:	f003 0304 	and.w	r3, r3, #4
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d115      	bne.n	800451e <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f00c fdc5 	bl	8011094 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6859      	ldr	r1, [r3, #4]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	430a      	orrs	r2, r1
 8004518:	605a      	str	r2, [r3, #4]
 800451a:	e000      	b.n	800451e <HAL_PCD_IRQHandler+0x920>
      return;
 800451c:	bf00      	nop
    }
  }
}
 800451e:	3734      	adds	r7, #52	; 0x34
 8004520:	46bd      	mov	sp, r7
 8004522:	bd90      	pop	{r4, r7, pc}

08004524 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	460b      	mov	r3, r1
 800452e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_PCD_SetAddress+0x1a>
 800453a:	2302      	movs	r3, #2
 800453c:	e013      	b.n	8004566 <HAL_PCD_SetAddress+0x42>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	78fa      	ldrb	r2, [r7, #3]
 800454a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	78fa      	ldrb	r2, [r7, #3]
 8004554:	4611      	mov	r1, r2
 8004556:	4618      	mov	r0, r3
 8004558:	f00a f9de 	bl	800e918 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b084      	sub	sp, #16
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	4608      	mov	r0, r1
 8004578:	4611      	mov	r1, r2
 800457a:	461a      	mov	r2, r3
 800457c:	4603      	mov	r3, r0
 800457e:	70fb      	strb	r3, [r7, #3]
 8004580:	460b      	mov	r3, r1
 8004582:	803b      	strh	r3, [r7, #0]
 8004584:	4613      	mov	r3, r2
 8004586:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004588:	2300      	movs	r3, #0
 800458a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800458c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004590:	2b00      	cmp	r3, #0
 8004592:	da0f      	bge.n	80045b4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004594:	78fb      	ldrb	r3, [r7, #3]
 8004596:	f003 020f 	and.w	r2, r3, #15
 800459a:	4613      	mov	r3, r2
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	4413      	add	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	3338      	adds	r3, #56	; 0x38
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	4413      	add	r3, r2
 80045a8:	3304      	adds	r3, #4
 80045aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2201      	movs	r2, #1
 80045b0:	705a      	strb	r2, [r3, #1]
 80045b2:	e00f      	b.n	80045d4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045b4:	78fb      	ldrb	r3, [r7, #3]
 80045b6:	f003 020f 	and.w	r2, r3, #15
 80045ba:	4613      	mov	r3, r2
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	4413      	add	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	4413      	add	r3, r2
 80045ca:	3304      	adds	r3, #4
 80045cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80045d4:	78fb      	ldrb	r3, [r7, #3]
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80045e0:	883a      	ldrh	r2, [r7, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	78ba      	ldrb	r2, [r7, #2]
 80045ea:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	785b      	ldrb	r3, [r3, #1]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d004      	beq.n	80045fe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80045fe:	78bb      	ldrb	r3, [r7, #2]
 8004600:	2b02      	cmp	r3, #2
 8004602:	d102      	bne.n	800460a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <HAL_PCD_EP_Open+0xaa>
 8004614:	2302      	movs	r3, #2
 8004616:	e00e      	b.n	8004636 <HAL_PCD_EP_Open+0xc8>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68f9      	ldr	r1, [r7, #12]
 8004626:	4618      	mov	r0, r3
 8004628:	f009 fb00 	bl	800dc2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004634:	7afb      	ldrb	r3, [r7, #11]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b084      	sub	sp, #16
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
 8004646:	460b      	mov	r3, r1
 8004648:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800464a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800464e:	2b00      	cmp	r3, #0
 8004650:	da0f      	bge.n	8004672 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004652:	78fb      	ldrb	r3, [r7, #3]
 8004654:	f003 020f 	and.w	r2, r3, #15
 8004658:	4613      	mov	r3, r2
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	3338      	adds	r3, #56	; 0x38
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	4413      	add	r3, r2
 8004666:	3304      	adds	r3, #4
 8004668:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2201      	movs	r2, #1
 800466e:	705a      	strb	r2, [r3, #1]
 8004670:	e00f      	b.n	8004692 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004672:	78fb      	ldrb	r3, [r7, #3]
 8004674:	f003 020f 	and.w	r2, r3, #15
 8004678:	4613      	mov	r3, r2
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	4413      	add	r3, r2
 8004688:	3304      	adds	r3, #4
 800468a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004692:	78fb      	ldrb	r3, [r7, #3]
 8004694:	f003 030f 	and.w	r3, r3, #15
 8004698:	b2da      	uxtb	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d101      	bne.n	80046ac <HAL_PCD_EP_Close+0x6e>
 80046a8:	2302      	movs	r3, #2
 80046aa:	e00e      	b.n	80046ca <HAL_PCD_EP_Close+0x8c>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68f9      	ldr	r1, [r7, #12]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f009 fb3e 	bl	800dd3c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b086      	sub	sp, #24
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	60f8      	str	r0, [r7, #12]
 80046da:	607a      	str	r2, [r7, #4]
 80046dc:	603b      	str	r3, [r7, #0]
 80046de:	460b      	mov	r3, r1
 80046e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046e2:	7afb      	ldrb	r3, [r7, #11]
 80046e4:	f003 020f 	and.w	r2, r3, #15
 80046e8:	4613      	mov	r3, r2
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	4413      	add	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4413      	add	r3, r2
 80046f8:	3304      	adds	r3, #4
 80046fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2200      	movs	r2, #0
 800470c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2200      	movs	r2, #0
 8004712:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004714:	7afb      	ldrb	r3, [r7, #11]
 8004716:	f003 030f 	and.w	r3, r3, #15
 800471a:	b2da      	uxtb	r2, r3
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004720:	7afb      	ldrb	r3, [r7, #11]
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6979      	ldr	r1, [r7, #20]
 8004730:	4618      	mov	r0, r3
 8004732:	f009 fdbf 	bl	800e2b4 <USB_EP0StartXfer>
 8004736:	e005      	b.n	8004744 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6979      	ldr	r1, [r7, #20]
 800473e:	4618      	mov	r0, r3
 8004740:	f009 fbd8 	bl	800def4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	460b      	mov	r3, r1
 8004758:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800475a:	78fb      	ldrb	r3, [r7, #3]
 800475c:	f003 020f 	and.w	r2, r3, #15
 8004760:	6879      	ldr	r1, [r7, #4]
 8004762:	4613      	mov	r3, r2
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	4413      	add	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	440b      	add	r3, r1
 800476c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004770:	681b      	ldr	r3, [r3, #0]
}
 8004772:	4618      	mov	r0, r3
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b086      	sub	sp, #24
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	603b      	str	r3, [r7, #0]
 800478a:	460b      	mov	r3, r1
 800478c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800478e:	7afb      	ldrb	r3, [r7, #11]
 8004790:	f003 020f 	and.w	r2, r3, #15
 8004794:	4613      	mov	r3, r2
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	4413      	add	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	3338      	adds	r3, #56	; 0x38
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	4413      	add	r3, r2
 80047a2:	3304      	adds	r3, #4
 80047a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2200      	movs	r2, #0
 80047b6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	2201      	movs	r2, #1
 80047bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047be:	7afb      	ldrb	r3, [r7, #11]
 80047c0:	f003 030f 	and.w	r3, r3, #15
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047ca:	7afb      	ldrb	r3, [r7, #11]
 80047cc:	f003 030f 	and.w	r3, r3, #15
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d106      	bne.n	80047e2 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6979      	ldr	r1, [r7, #20]
 80047da:	4618      	mov	r0, r3
 80047dc:	f009 fd6a 	bl	800e2b4 <USB_EP0StartXfer>
 80047e0:	e005      	b.n	80047ee <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6979      	ldr	r1, [r7, #20]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f009 fb83 	bl	800def4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004804:	78fb      	ldrb	r3, [r7, #3]
 8004806:	f003 020f 	and.w	r2, r3, #15
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	429a      	cmp	r2, r3
 8004810:	d901      	bls.n	8004816 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e04e      	b.n	80048b4 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004816:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800481a:	2b00      	cmp	r3, #0
 800481c:	da0f      	bge.n	800483e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800481e:	78fb      	ldrb	r3, [r7, #3]
 8004820:	f003 020f 	and.w	r2, r3, #15
 8004824:	4613      	mov	r3, r2
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	3338      	adds	r3, #56	; 0x38
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	4413      	add	r3, r2
 8004832:	3304      	adds	r3, #4
 8004834:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2201      	movs	r2, #1
 800483a:	705a      	strb	r2, [r3, #1]
 800483c:	e00d      	b.n	800485a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800483e:	78fa      	ldrb	r2, [r7, #3]
 8004840:	4613      	mov	r3, r2
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	4413      	add	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	4413      	add	r3, r2
 8004850:	3304      	adds	r3, #4
 8004852:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2201      	movs	r2, #1
 800485e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004860:	78fb      	ldrb	r3, [r7, #3]
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	b2da      	uxtb	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_PCD_EP_SetStall+0x82>
 8004876:	2302      	movs	r3, #2
 8004878:	e01c      	b.n	80048b4 <HAL_PCD_EP_SetStall+0xbc>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68f9      	ldr	r1, [r7, #12]
 8004888:	4618      	mov	r0, r3
 800488a:	f009 ff71 	bl	800e770 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800488e:	78fb      	ldrb	r3, [r7, #3]
 8004890:	f003 030f 	and.w	r3, r3, #15
 8004894:	2b00      	cmp	r3, #0
 8004896:	d108      	bne.n	80048aa <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80048a2:	4619      	mov	r1, r3
 80048a4:	4610      	mov	r0, r2
 80048a6:	f00a f963 	bl	800eb70 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80048c8:	78fb      	ldrb	r3, [r7, #3]
 80048ca:	f003 020f 	and.w	r2, r3, #15
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d901      	bls.n	80048da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e042      	b.n	8004960 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	da0f      	bge.n	8004902 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048e2:	78fb      	ldrb	r3, [r7, #3]
 80048e4:	f003 020f 	and.w	r2, r3, #15
 80048e8:	4613      	mov	r3, r2
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	4413      	add	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	3338      	adds	r3, #56	; 0x38
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	4413      	add	r3, r2
 80048f6:	3304      	adds	r3, #4
 80048f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	705a      	strb	r2, [r3, #1]
 8004900:	e00f      	b.n	8004922 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004902:	78fb      	ldrb	r3, [r7, #3]
 8004904:	f003 020f 	and.w	r2, r3, #15
 8004908:	4613      	mov	r3, r2
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	4413      	add	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	4413      	add	r3, r2
 8004918:	3304      	adds	r3, #4
 800491a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004928:	78fb      	ldrb	r3, [r7, #3]
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	b2da      	uxtb	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800493a:	2b01      	cmp	r3, #1
 800493c:	d101      	bne.n	8004942 <HAL_PCD_EP_ClrStall+0x86>
 800493e:	2302      	movs	r3, #2
 8004940:	e00e      	b.n	8004960 <HAL_PCD_EP_ClrStall+0xa4>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68f9      	ldr	r1, [r7, #12]
 8004950:	4618      	mov	r0, r3
 8004952:	f009 ff7b 	bl	800e84c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	460b      	mov	r3, r1
 8004972:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004974:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004978:	2b00      	cmp	r3, #0
 800497a:	da0c      	bge.n	8004996 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800497c:	78fb      	ldrb	r3, [r7, #3]
 800497e:	f003 020f 	and.w	r2, r3, #15
 8004982:	4613      	mov	r3, r2
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	4413      	add	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	3338      	adds	r3, #56	; 0x38
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	4413      	add	r3, r2
 8004990:	3304      	adds	r3, #4
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	e00c      	b.n	80049b0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004996:	78fb      	ldrb	r3, [r7, #3]
 8004998:	f003 020f 	and.w	r2, r3, #15
 800499c:	4613      	mov	r3, r2
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	4413      	add	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	4413      	add	r3, r2
 80049ac:	3304      	adds	r3, #4
 80049ae:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68f9      	ldr	r1, [r7, #12]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f009 fd9e 	bl	800e4f8 <USB_EPStopXfer>
 80049bc:	4603      	mov	r3, r0
 80049be:	72fb      	strb	r3, [r7, #11]

  return ret;
 80049c0:	7afb      	ldrb	r3, [r7, #11]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b088      	sub	sp, #32
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	4613      	mov	r3, r2
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	4413      	add	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	3338      	adds	r3, #56	; 0x38
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	4413      	add	r3, r2
 80049ee:	3304      	adds	r3, #4
 80049f0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a1a      	ldr	r2, [r3, #32]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d901      	bls.n	8004a02 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e067      	b.n	8004ad2 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	699a      	ldr	r2, [r3, #24]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	69fa      	ldr	r2, [r7, #28]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d902      	bls.n	8004a1e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	3303      	adds	r3, #3
 8004a22:	089b      	lsrs	r3, r3, #2
 8004a24:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a26:	e026      	b.n	8004a76 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	699a      	ldr	r2, [r3, #24]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	69fa      	ldr	r2, [r7, #28]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d902      	bls.n	8004a44 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	3303      	adds	r3, #3
 8004a48:	089b      	lsrs	r3, r3, #2
 8004a4a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6919      	ldr	r1, [r3, #16]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	6978      	ldr	r0, [r7, #20]
 8004a5a:	f009 fdf7 	bl	800e64c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	691a      	ldr	r2, [r3, #16]
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	441a      	add	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a1a      	ldr	r2, [r3, #32]
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	441a      	add	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	015a      	lsls	r2, r3, #5
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d809      	bhi.n	8004aa0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6a1a      	ldr	r2, [r3, #32]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d203      	bcs.n	8004aa0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1c3      	bne.n	8004a28 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	699a      	ldr	r2, [r3, #24]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d811      	bhi.n	8004ad0 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	43db      	mvns	r3, r3
 8004ac6:	6939      	ldr	r1, [r7, #16]
 8004ac8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004acc:	4013      	ands	r3, r2
 8004ace:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3720      	adds	r7, #32
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	333c      	adds	r3, #60	; 0x3c
 8004af4:	3304      	adds	r3, #4
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4a19      	ldr	r2, [pc, #100]	; (8004b74 <PCD_EP_OutXfrComplete_int+0x98>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d124      	bne.n	8004b5c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00a      	beq.n	8004b32 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b28:	461a      	mov	r2, r3
 8004b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b2e:	6093      	str	r3, [r2, #8]
 8004b30:	e01a      	b.n	8004b68 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f003 0320 	and.w	r3, r3, #32
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d008      	beq.n	8004b4e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b48:	461a      	mov	r2, r3
 8004b4a:	2320      	movs	r3, #32
 8004b4c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	4619      	mov	r1, r3
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f00c f9bb 	bl	8010ed0 <HAL_PCD_DataOutStageCallback>
 8004b5a:	e005      	b.n	8004b68 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	4619      	mov	r1, r3
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f00c f9b4 	bl	8010ed0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	4f54310a 	.word	0x4f54310a

08004b78 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	333c      	adds	r3, #60	; 0x3c
 8004b90:	3304      	adds	r3, #4
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4a0c      	ldr	r2, [pc, #48]	; (8004bdc <PCD_EP_OutSetupPacket_int+0x64>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d90e      	bls.n	8004bcc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d009      	beq.n	8004bcc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f00c f96d 	bl	8010eac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	4f54300a 	.word	0x4f54300a

08004be0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	70fb      	strb	r3, [r7, #3]
 8004bec:	4613      	mov	r3, r2
 8004bee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004bf8:	78fb      	ldrb	r3, [r7, #3]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d107      	bne.n	8004c0e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004bfe:	883b      	ldrh	r3, [r7, #0]
 8004c00:	0419      	lsls	r1, r3, #16
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	629a      	str	r2, [r3, #40]	; 0x28
 8004c0c:	e028      	b.n	8004c60 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c14:	0c1b      	lsrs	r3, r3, #16
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	4413      	add	r3, r2
 8004c1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	73fb      	strb	r3, [r7, #15]
 8004c20:	e00d      	b.n	8004c3e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
 8004c28:	3340      	adds	r3, #64	; 0x40
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	0c1b      	lsrs	r3, r3, #16
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	4413      	add	r3, r2
 8004c36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	73fb      	strb	r3, [r7, #15]
 8004c3e:	7bfa      	ldrb	r2, [r7, #15]
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d3ec      	bcc.n	8004c22 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004c48:	883b      	ldrh	r3, [r7, #0]
 8004c4a:	0418      	lsls	r0, r3, #16
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6819      	ldr	r1, [r3, #0]
 8004c50:	78fb      	ldrb	r3, [r7, #3]
 8004c52:	3b01      	subs	r3, #1
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	4302      	orrs	r2, r0
 8004c58:	3340      	adds	r3, #64	; 0x40
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	460b      	mov	r3, r1
 8004c78:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	887a      	ldrh	r2, [r7, #2]
 8004c80:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc2:	f043 0303 	orr.w	r3, r3, #3
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cf4:	4b0d      	ldr	r3, [pc, #52]	; (8004d2c <HAL_PWREx_GetVoltageRange+0x3c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d00:	d102      	bne.n	8004d08 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d06:	e00b      	b.n	8004d20 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004d08:	4b08      	ldr	r3, [pc, #32]	; (8004d2c <HAL_PWREx_GetVoltageRange+0x3c>)
 8004d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d16:	d102      	bne.n	8004d1e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004d18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d1c:	e000      	b.n	8004d20 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004d1e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40007000 	.word	0x40007000

08004d30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d141      	bne.n	8004dc2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d3e:	4b4b      	ldr	r3, [pc, #300]	; (8004e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d4a:	d131      	bne.n	8004db0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d4c:	4b47      	ldr	r3, [pc, #284]	; (8004e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d52:	4a46      	ldr	r2, [pc, #280]	; (8004e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d5c:	4b43      	ldr	r3, [pc, #268]	; (8004e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d64:	4a41      	ldr	r2, [pc, #260]	; (8004e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004d6c:	4b40      	ldr	r3, [pc, #256]	; (8004e70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2232      	movs	r2, #50	; 0x32
 8004d72:	fb02 f303 	mul.w	r3, r2, r3
 8004d76:	4a3f      	ldr	r2, [pc, #252]	; (8004e74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d78:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7c:	0c9b      	lsrs	r3, r3, #18
 8004d7e:	3301      	adds	r3, #1
 8004d80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d82:	e002      	b.n	8004d8a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d8a:	4b38      	ldr	r3, [pc, #224]	; (8004e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d96:	d102      	bne.n	8004d9e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f2      	bne.n	8004d84 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d9e:	4b33      	ldr	r3, [pc, #204]	; (8004e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004daa:	d158      	bne.n	8004e5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e057      	b.n	8004e60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004db0:	4b2e      	ldr	r3, [pc, #184]	; (8004e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004db6:	4a2d      	ldr	r2, [pc, #180]	; (8004e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004dc0:	e04d      	b.n	8004e5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dc8:	d141      	bne.n	8004e4e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004dca:	4b28      	ldr	r3, [pc, #160]	; (8004e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dd6:	d131      	bne.n	8004e3c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004dd8:	4b24      	ldr	r3, [pc, #144]	; (8004e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dde:	4a23      	ldr	r2, [pc, #140]	; (8004e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004de8:	4b20      	ldr	r3, [pc, #128]	; (8004e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004df0:	4a1e      	ldr	r2, [pc, #120]	; (8004e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004df6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004df8:	4b1d      	ldr	r3, [pc, #116]	; (8004e70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2232      	movs	r2, #50	; 0x32
 8004dfe:	fb02 f303 	mul.w	r3, r2, r3
 8004e02:	4a1c      	ldr	r2, [pc, #112]	; (8004e74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e04:	fba2 2303 	umull	r2, r3, r2, r3
 8004e08:	0c9b      	lsrs	r3, r3, #18
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e0e:	e002      	b.n	8004e16 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e16:	4b15      	ldr	r3, [pc, #84]	; (8004e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e22:	d102      	bne.n	8004e2a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1f2      	bne.n	8004e10 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e2a:	4b10      	ldr	r3, [pc, #64]	; (8004e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e36:	d112      	bne.n	8004e5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e011      	b.n	8004e60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e3c:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e42:	4a0a      	ldr	r2, [pc, #40]	; (8004e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004e4c:	e007      	b.n	8004e5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e4e:	4b07      	ldr	r3, [pc, #28]	; (8004e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e56:	4a05      	ldr	r2, [pc, #20]	; (8004e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e5c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3714      	adds	r7, #20
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	40007000 	.word	0x40007000
 8004e70:	2000000c 	.word	0x2000000c
 8004e74:	431bde83 	.word	0x431bde83

08004e78 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004e7c:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	4a04      	ldr	r2, [pc, #16]	; (8004e94 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e86:	6053      	str	r3, [r2, #4]
}
 8004e88:	bf00      	nop
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40007000 	.word	0x40007000

08004e98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b088      	sub	sp, #32
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d102      	bne.n	8004eac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	f000 bc08 	b.w	80056bc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eac:	4b96      	ldr	r3, [pc, #600]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f003 030c 	and.w	r3, r3, #12
 8004eb4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004eb6:	4b94      	ldr	r3, [pc, #592]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0310 	and.w	r3, r3, #16
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 80e4 	beq.w	8005096 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d007      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x4c>
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	2b0c      	cmp	r3, #12
 8004ed8:	f040 808b 	bne.w	8004ff2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	f040 8087 	bne.w	8004ff2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ee4:	4b88      	ldr	r3, [pc, #544]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d005      	beq.n	8004efc <HAL_RCC_OscConfig+0x64>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e3df      	b.n	80056bc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a1a      	ldr	r2, [r3, #32]
 8004f00:	4b81      	ldr	r3, [pc, #516]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0308 	and.w	r3, r3, #8
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d004      	beq.n	8004f16 <HAL_RCC_OscConfig+0x7e>
 8004f0c:	4b7e      	ldr	r3, [pc, #504]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f14:	e005      	b.n	8004f22 <HAL_RCC_OscConfig+0x8a>
 8004f16:	4b7c      	ldr	r3, [pc, #496]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 8004f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f1c:	091b      	lsrs	r3, r3, #4
 8004f1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d223      	bcs.n	8004f6e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 fdf8 	bl	8005b20 <RCC_SetFlashLatencyFromMSIRange>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e3c0      	b.n	80056bc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f3a:	4b73      	ldr	r3, [pc, #460]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a72      	ldr	r2, [pc, #456]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 8004f40:	f043 0308 	orr.w	r3, r3, #8
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	4b70      	ldr	r3, [pc, #448]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	496d      	ldr	r1, [pc, #436]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f58:	4b6b      	ldr	r3, [pc, #428]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	021b      	lsls	r3, r3, #8
 8004f66:	4968      	ldr	r1, [pc, #416]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	604b      	str	r3, [r1, #4]
 8004f6c:	e025      	b.n	8004fba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f6e:	4b66      	ldr	r3, [pc, #408]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a65      	ldr	r2, [pc, #404]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 8004f74:	f043 0308 	orr.w	r3, r3, #8
 8004f78:	6013      	str	r3, [r2, #0]
 8004f7a:	4b63      	ldr	r3, [pc, #396]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	4960      	ldr	r1, [pc, #384]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f8c:	4b5e      	ldr	r3, [pc, #376]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	021b      	lsls	r3, r3, #8
 8004f9a:	495b      	ldr	r1, [pc, #364]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d109      	bne.n	8004fba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 fdb8 	bl	8005b20 <RCC_SetFlashLatencyFromMSIRange>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e380      	b.n	80056bc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fba:	f000 fcc1 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	4b51      	ldr	r3, [pc, #324]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	091b      	lsrs	r3, r3, #4
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	4950      	ldr	r1, [pc, #320]	; (800510c <HAL_RCC_OscConfig+0x274>)
 8004fcc:	5ccb      	ldrb	r3, [r1, r3]
 8004fce:	f003 031f 	and.w	r3, r3, #31
 8004fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd6:	4a4e      	ldr	r2, [pc, #312]	; (8005110 <HAL_RCC_OscConfig+0x278>)
 8004fd8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004fda:	4b4e      	ldr	r3, [pc, #312]	; (8005114 <HAL_RCC_OscConfig+0x27c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7fd fcea 	bl	80029b8 <HAL_InitTick>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d052      	beq.n	8005094 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
 8004ff0:	e364      	b.n	80056bc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d032      	beq.n	8005060 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ffa:	4b43      	ldr	r3, [pc, #268]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a42      	ldr	r2, [pc, #264]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 8005000:	f043 0301 	orr.w	r3, r3, #1
 8005004:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005006:	f7fd fd27 	bl	8002a58 <HAL_GetTick>
 800500a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800500e:	f7fd fd23 	bl	8002a58 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e34d      	b.n	80056bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005020:	4b39      	ldr	r3, [pc, #228]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0f0      	beq.n	800500e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800502c:	4b36      	ldr	r3, [pc, #216]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a35      	ldr	r2, [pc, #212]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 8005032:	f043 0308 	orr.w	r3, r3, #8
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	4b33      	ldr	r3, [pc, #204]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	4930      	ldr	r1, [pc, #192]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 8005046:	4313      	orrs	r3, r2
 8005048:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800504a:	4b2f      	ldr	r3, [pc, #188]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	021b      	lsls	r3, r3, #8
 8005058:	492b      	ldr	r1, [pc, #172]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 800505a:	4313      	orrs	r3, r2
 800505c:	604b      	str	r3, [r1, #4]
 800505e:	e01a      	b.n	8005096 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005060:	4b29      	ldr	r3, [pc, #164]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a28      	ldr	r2, [pc, #160]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 8005066:	f023 0301 	bic.w	r3, r3, #1
 800506a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800506c:	f7fd fcf4 	bl	8002a58 <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005074:	f7fd fcf0 	bl	8002a58 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e31a      	b.n	80056bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005086:	4b20      	ldr	r3, [pc, #128]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1f0      	bne.n	8005074 <HAL_RCC_OscConfig+0x1dc>
 8005092:	e000      	b.n	8005096 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005094:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d073      	beq.n	800518a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d005      	beq.n	80050b4 <HAL_RCC_OscConfig+0x21c>
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	2b0c      	cmp	r3, #12
 80050ac:	d10e      	bne.n	80050cc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2b03      	cmp	r3, #3
 80050b2:	d10b      	bne.n	80050cc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b4:	4b14      	ldr	r3, [pc, #80]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d063      	beq.n	8005188 <HAL_RCC_OscConfig+0x2f0>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d15f      	bne.n	8005188 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e2f7      	b.n	80056bc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d4:	d106      	bne.n	80050e4 <HAL_RCC_OscConfig+0x24c>
 80050d6:	4b0c      	ldr	r3, [pc, #48]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a0b      	ldr	r2, [pc, #44]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 80050dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e0:	6013      	str	r3, [r2, #0]
 80050e2:	e025      	b.n	8005130 <HAL_RCC_OscConfig+0x298>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050ec:	d114      	bne.n	8005118 <HAL_RCC_OscConfig+0x280>
 80050ee:	4b06      	ldr	r3, [pc, #24]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a05      	ldr	r2, [pc, #20]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 80050f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050f8:	6013      	str	r3, [r2, #0]
 80050fa:	4b03      	ldr	r3, [pc, #12]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a02      	ldr	r2, [pc, #8]	; (8005108 <HAL_RCC_OscConfig+0x270>)
 8005100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	e013      	b.n	8005130 <HAL_RCC_OscConfig+0x298>
 8005108:	40021000 	.word	0x40021000
 800510c:	080141d8 	.word	0x080141d8
 8005110:	2000000c 	.word	0x2000000c
 8005114:	20000010 	.word	0x20000010
 8005118:	4ba0      	ldr	r3, [pc, #640]	; (800539c <HAL_RCC_OscConfig+0x504>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a9f      	ldr	r2, [pc, #636]	; (800539c <HAL_RCC_OscConfig+0x504>)
 800511e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005122:	6013      	str	r3, [r2, #0]
 8005124:	4b9d      	ldr	r3, [pc, #628]	; (800539c <HAL_RCC_OscConfig+0x504>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a9c      	ldr	r2, [pc, #624]	; (800539c <HAL_RCC_OscConfig+0x504>)
 800512a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800512e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d013      	beq.n	8005160 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005138:	f7fd fc8e 	bl	8002a58 <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005140:	f7fd fc8a 	bl	8002a58 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b64      	cmp	r3, #100	; 0x64
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e2b4      	b.n	80056bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005152:	4b92      	ldr	r3, [pc, #584]	; (800539c <HAL_RCC_OscConfig+0x504>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d0f0      	beq.n	8005140 <HAL_RCC_OscConfig+0x2a8>
 800515e:	e014      	b.n	800518a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005160:	f7fd fc7a 	bl	8002a58 <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005166:	e008      	b.n	800517a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005168:	f7fd fc76 	bl	8002a58 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b64      	cmp	r3, #100	; 0x64
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e2a0      	b.n	80056bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800517a:	4b88      	ldr	r3, [pc, #544]	; (800539c <HAL_RCC_OscConfig+0x504>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1f0      	bne.n	8005168 <HAL_RCC_OscConfig+0x2d0>
 8005186:	e000      	b.n	800518a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d060      	beq.n	8005258 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	2b04      	cmp	r3, #4
 800519a:	d005      	beq.n	80051a8 <HAL_RCC_OscConfig+0x310>
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	2b0c      	cmp	r3, #12
 80051a0:	d119      	bne.n	80051d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d116      	bne.n	80051d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051a8:	4b7c      	ldr	r3, [pc, #496]	; (800539c <HAL_RCC_OscConfig+0x504>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d005      	beq.n	80051c0 <HAL_RCC_OscConfig+0x328>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e27d      	b.n	80056bc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c0:	4b76      	ldr	r3, [pc, #472]	; (800539c <HAL_RCC_OscConfig+0x504>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	061b      	lsls	r3, r3, #24
 80051ce:	4973      	ldr	r1, [pc, #460]	; (800539c <HAL_RCC_OscConfig+0x504>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051d4:	e040      	b.n	8005258 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d023      	beq.n	8005226 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051de:	4b6f      	ldr	r3, [pc, #444]	; (800539c <HAL_RCC_OscConfig+0x504>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a6e      	ldr	r2, [pc, #440]	; (800539c <HAL_RCC_OscConfig+0x504>)
 80051e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ea:	f7fd fc35 	bl	8002a58 <HAL_GetTick>
 80051ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051f0:	e008      	b.n	8005204 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f2:	f7fd fc31 	bl	8002a58 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e25b      	b.n	80056bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005204:	4b65      	ldr	r3, [pc, #404]	; (800539c <HAL_RCC_OscConfig+0x504>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0f0      	beq.n	80051f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005210:	4b62      	ldr	r3, [pc, #392]	; (800539c <HAL_RCC_OscConfig+0x504>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	061b      	lsls	r3, r3, #24
 800521e:	495f      	ldr	r1, [pc, #380]	; (800539c <HAL_RCC_OscConfig+0x504>)
 8005220:	4313      	orrs	r3, r2
 8005222:	604b      	str	r3, [r1, #4]
 8005224:	e018      	b.n	8005258 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005226:	4b5d      	ldr	r3, [pc, #372]	; (800539c <HAL_RCC_OscConfig+0x504>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a5c      	ldr	r2, [pc, #368]	; (800539c <HAL_RCC_OscConfig+0x504>)
 800522c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005232:	f7fd fc11 	bl	8002a58 <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005238:	e008      	b.n	800524c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800523a:	f7fd fc0d 	bl	8002a58 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e237      	b.n	80056bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800524c:	4b53      	ldr	r3, [pc, #332]	; (800539c <HAL_RCC_OscConfig+0x504>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1f0      	bne.n	800523a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0308 	and.w	r3, r3, #8
 8005260:	2b00      	cmp	r3, #0
 8005262:	d03c      	beq.n	80052de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d01c      	beq.n	80052a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800526c:	4b4b      	ldr	r3, [pc, #300]	; (800539c <HAL_RCC_OscConfig+0x504>)
 800526e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005272:	4a4a      	ldr	r2, [pc, #296]	; (800539c <HAL_RCC_OscConfig+0x504>)
 8005274:	f043 0301 	orr.w	r3, r3, #1
 8005278:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800527c:	f7fd fbec 	bl	8002a58 <HAL_GetTick>
 8005280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005284:	f7fd fbe8 	bl	8002a58 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e212      	b.n	80056bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005296:	4b41      	ldr	r3, [pc, #260]	; (800539c <HAL_RCC_OscConfig+0x504>)
 8005298:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0ef      	beq.n	8005284 <HAL_RCC_OscConfig+0x3ec>
 80052a4:	e01b      	b.n	80052de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052a6:	4b3d      	ldr	r3, [pc, #244]	; (800539c <HAL_RCC_OscConfig+0x504>)
 80052a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052ac:	4a3b      	ldr	r2, [pc, #236]	; (800539c <HAL_RCC_OscConfig+0x504>)
 80052ae:	f023 0301 	bic.w	r3, r3, #1
 80052b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b6:	f7fd fbcf 	bl	8002a58 <HAL_GetTick>
 80052ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052bc:	e008      	b.n	80052d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052be:	f7fd fbcb 	bl	8002a58 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e1f5      	b.n	80056bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052d0:	4b32      	ldr	r3, [pc, #200]	; (800539c <HAL_RCC_OscConfig+0x504>)
 80052d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1ef      	bne.n	80052be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0304 	and.w	r3, r3, #4
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 80a6 	beq.w	8005438 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ec:	2300      	movs	r3, #0
 80052ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80052f0:	4b2a      	ldr	r3, [pc, #168]	; (800539c <HAL_RCC_OscConfig+0x504>)
 80052f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10d      	bne.n	8005318 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052fc:	4b27      	ldr	r3, [pc, #156]	; (800539c <HAL_RCC_OscConfig+0x504>)
 80052fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005300:	4a26      	ldr	r2, [pc, #152]	; (800539c <HAL_RCC_OscConfig+0x504>)
 8005302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005306:	6593      	str	r3, [r2, #88]	; 0x58
 8005308:	4b24      	ldr	r3, [pc, #144]	; (800539c <HAL_RCC_OscConfig+0x504>)
 800530a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005310:	60bb      	str	r3, [r7, #8]
 8005312:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005314:	2301      	movs	r3, #1
 8005316:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005318:	4b21      	ldr	r3, [pc, #132]	; (80053a0 <HAL_RCC_OscConfig+0x508>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005320:	2b00      	cmp	r3, #0
 8005322:	d118      	bne.n	8005356 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005324:	4b1e      	ldr	r3, [pc, #120]	; (80053a0 <HAL_RCC_OscConfig+0x508>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a1d      	ldr	r2, [pc, #116]	; (80053a0 <HAL_RCC_OscConfig+0x508>)
 800532a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800532e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005330:	f7fd fb92 	bl	8002a58 <HAL_GetTick>
 8005334:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005336:	e008      	b.n	800534a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005338:	f7fd fb8e 	bl	8002a58 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e1b8      	b.n	80056bc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800534a:	4b15      	ldr	r3, [pc, #84]	; (80053a0 <HAL_RCC_OscConfig+0x508>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0f0      	beq.n	8005338 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d108      	bne.n	8005370 <HAL_RCC_OscConfig+0x4d8>
 800535e:	4b0f      	ldr	r3, [pc, #60]	; (800539c <HAL_RCC_OscConfig+0x504>)
 8005360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005364:	4a0d      	ldr	r2, [pc, #52]	; (800539c <HAL_RCC_OscConfig+0x504>)
 8005366:	f043 0301 	orr.w	r3, r3, #1
 800536a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800536e:	e029      	b.n	80053c4 <HAL_RCC_OscConfig+0x52c>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	2b05      	cmp	r3, #5
 8005376:	d115      	bne.n	80053a4 <HAL_RCC_OscConfig+0x50c>
 8005378:	4b08      	ldr	r3, [pc, #32]	; (800539c <HAL_RCC_OscConfig+0x504>)
 800537a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800537e:	4a07      	ldr	r2, [pc, #28]	; (800539c <HAL_RCC_OscConfig+0x504>)
 8005380:	f043 0304 	orr.w	r3, r3, #4
 8005384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005388:	4b04      	ldr	r3, [pc, #16]	; (800539c <HAL_RCC_OscConfig+0x504>)
 800538a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538e:	4a03      	ldr	r2, [pc, #12]	; (800539c <HAL_RCC_OscConfig+0x504>)
 8005390:	f043 0301 	orr.w	r3, r3, #1
 8005394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005398:	e014      	b.n	80053c4 <HAL_RCC_OscConfig+0x52c>
 800539a:	bf00      	nop
 800539c:	40021000 	.word	0x40021000
 80053a0:	40007000 	.word	0x40007000
 80053a4:	4b9d      	ldr	r3, [pc, #628]	; (800561c <HAL_RCC_OscConfig+0x784>)
 80053a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053aa:	4a9c      	ldr	r2, [pc, #624]	; (800561c <HAL_RCC_OscConfig+0x784>)
 80053ac:	f023 0301 	bic.w	r3, r3, #1
 80053b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053b4:	4b99      	ldr	r3, [pc, #612]	; (800561c <HAL_RCC_OscConfig+0x784>)
 80053b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ba:	4a98      	ldr	r2, [pc, #608]	; (800561c <HAL_RCC_OscConfig+0x784>)
 80053bc:	f023 0304 	bic.w	r3, r3, #4
 80053c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d016      	beq.n	80053fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053cc:	f7fd fb44 	bl	8002a58 <HAL_GetTick>
 80053d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053d2:	e00a      	b.n	80053ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053d4:	f7fd fb40 	bl	8002a58 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e168      	b.n	80056bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ea:	4b8c      	ldr	r3, [pc, #560]	; (800561c <HAL_RCC_OscConfig+0x784>)
 80053ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d0ed      	beq.n	80053d4 <HAL_RCC_OscConfig+0x53c>
 80053f8:	e015      	b.n	8005426 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053fa:	f7fd fb2d 	bl	8002a58 <HAL_GetTick>
 80053fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005400:	e00a      	b.n	8005418 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005402:	f7fd fb29 	bl	8002a58 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005410:	4293      	cmp	r3, r2
 8005412:	d901      	bls.n	8005418 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e151      	b.n	80056bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005418:	4b80      	ldr	r3, [pc, #512]	; (800561c <HAL_RCC_OscConfig+0x784>)
 800541a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1ed      	bne.n	8005402 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005426:	7ffb      	ldrb	r3, [r7, #31]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d105      	bne.n	8005438 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800542c:	4b7b      	ldr	r3, [pc, #492]	; (800561c <HAL_RCC_OscConfig+0x784>)
 800542e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005430:	4a7a      	ldr	r2, [pc, #488]	; (800561c <HAL_RCC_OscConfig+0x784>)
 8005432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005436:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0320 	and.w	r3, r3, #32
 8005440:	2b00      	cmp	r3, #0
 8005442:	d03c      	beq.n	80054be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	2b00      	cmp	r3, #0
 800544a:	d01c      	beq.n	8005486 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800544c:	4b73      	ldr	r3, [pc, #460]	; (800561c <HAL_RCC_OscConfig+0x784>)
 800544e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005452:	4a72      	ldr	r2, [pc, #456]	; (800561c <HAL_RCC_OscConfig+0x784>)
 8005454:	f043 0301 	orr.w	r3, r3, #1
 8005458:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800545c:	f7fd fafc 	bl	8002a58 <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005464:	f7fd faf8 	bl	8002a58 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e122      	b.n	80056bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005476:	4b69      	ldr	r3, [pc, #420]	; (800561c <HAL_RCC_OscConfig+0x784>)
 8005478:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0ef      	beq.n	8005464 <HAL_RCC_OscConfig+0x5cc>
 8005484:	e01b      	b.n	80054be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005486:	4b65      	ldr	r3, [pc, #404]	; (800561c <HAL_RCC_OscConfig+0x784>)
 8005488:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800548c:	4a63      	ldr	r2, [pc, #396]	; (800561c <HAL_RCC_OscConfig+0x784>)
 800548e:	f023 0301 	bic.w	r3, r3, #1
 8005492:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005496:	f7fd fadf 	bl	8002a58 <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800549c:	e008      	b.n	80054b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800549e:	f7fd fadb 	bl	8002a58 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d901      	bls.n	80054b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e105      	b.n	80056bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054b0:	4b5a      	ldr	r3, [pc, #360]	; (800561c <HAL_RCC_OscConfig+0x784>)
 80054b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1ef      	bne.n	800549e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 80f9 	beq.w	80056ba <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	f040 80cf 	bne.w	8005670 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80054d2:	4b52      	ldr	r3, [pc, #328]	; (800561c <HAL_RCC_OscConfig+0x784>)
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f003 0203 	and.w	r2, r3, #3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d12c      	bne.n	8005540 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f0:	3b01      	subs	r3, #1
 80054f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d123      	bne.n	8005540 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005502:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005504:	429a      	cmp	r2, r3
 8005506:	d11b      	bne.n	8005540 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005512:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005514:	429a      	cmp	r2, r3
 8005516:	d113      	bne.n	8005540 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005522:	085b      	lsrs	r3, r3, #1
 8005524:	3b01      	subs	r3, #1
 8005526:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005528:	429a      	cmp	r2, r3
 800552a:	d109      	bne.n	8005540 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005536:	085b      	lsrs	r3, r3, #1
 8005538:	3b01      	subs	r3, #1
 800553a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800553c:	429a      	cmp	r2, r3
 800553e:	d071      	beq.n	8005624 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	2b0c      	cmp	r3, #12
 8005544:	d068      	beq.n	8005618 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005546:	4b35      	ldr	r3, [pc, #212]	; (800561c <HAL_RCC_OscConfig+0x784>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d105      	bne.n	800555e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005552:	4b32      	ldr	r3, [pc, #200]	; (800561c <HAL_RCC_OscConfig+0x784>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e0ac      	b.n	80056bc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005562:	4b2e      	ldr	r3, [pc, #184]	; (800561c <HAL_RCC_OscConfig+0x784>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a2d      	ldr	r2, [pc, #180]	; (800561c <HAL_RCC_OscConfig+0x784>)
 8005568:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800556c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800556e:	f7fd fa73 	bl	8002a58 <HAL_GetTick>
 8005572:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005574:	e008      	b.n	8005588 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005576:	f7fd fa6f 	bl	8002a58 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b02      	cmp	r3, #2
 8005582:	d901      	bls.n	8005588 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e099      	b.n	80056bc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005588:	4b24      	ldr	r3, [pc, #144]	; (800561c <HAL_RCC_OscConfig+0x784>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1f0      	bne.n	8005576 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005594:	4b21      	ldr	r3, [pc, #132]	; (800561c <HAL_RCC_OscConfig+0x784>)
 8005596:	68da      	ldr	r2, [r3, #12]
 8005598:	4b21      	ldr	r3, [pc, #132]	; (8005620 <HAL_RCC_OscConfig+0x788>)
 800559a:	4013      	ands	r3, r2
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80055a4:	3a01      	subs	r2, #1
 80055a6:	0112      	lsls	r2, r2, #4
 80055a8:	4311      	orrs	r1, r2
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055ae:	0212      	lsls	r2, r2, #8
 80055b0:	4311      	orrs	r1, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80055b6:	0852      	lsrs	r2, r2, #1
 80055b8:	3a01      	subs	r2, #1
 80055ba:	0552      	lsls	r2, r2, #21
 80055bc:	4311      	orrs	r1, r2
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80055c2:	0852      	lsrs	r2, r2, #1
 80055c4:	3a01      	subs	r2, #1
 80055c6:	0652      	lsls	r2, r2, #25
 80055c8:	4311      	orrs	r1, r2
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055ce:	06d2      	lsls	r2, r2, #27
 80055d0:	430a      	orrs	r2, r1
 80055d2:	4912      	ldr	r1, [pc, #72]	; (800561c <HAL_RCC_OscConfig+0x784>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80055d8:	4b10      	ldr	r3, [pc, #64]	; (800561c <HAL_RCC_OscConfig+0x784>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a0f      	ldr	r2, [pc, #60]	; (800561c <HAL_RCC_OscConfig+0x784>)
 80055de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055e4:	4b0d      	ldr	r3, [pc, #52]	; (800561c <HAL_RCC_OscConfig+0x784>)
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	4a0c      	ldr	r2, [pc, #48]	; (800561c <HAL_RCC_OscConfig+0x784>)
 80055ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80055f0:	f7fd fa32 	bl	8002a58 <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055f6:	e008      	b.n	800560a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f8:	f7fd fa2e 	bl	8002a58 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e058      	b.n	80056bc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800560a:	4b04      	ldr	r3, [pc, #16]	; (800561c <HAL_RCC_OscConfig+0x784>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d0f0      	beq.n	80055f8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005616:	e050      	b.n	80056ba <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e04f      	b.n	80056bc <HAL_RCC_OscConfig+0x824>
 800561c:	40021000 	.word	0x40021000
 8005620:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005624:	4b27      	ldr	r3, [pc, #156]	; (80056c4 <HAL_RCC_OscConfig+0x82c>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d144      	bne.n	80056ba <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005630:	4b24      	ldr	r3, [pc, #144]	; (80056c4 <HAL_RCC_OscConfig+0x82c>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a23      	ldr	r2, [pc, #140]	; (80056c4 <HAL_RCC_OscConfig+0x82c>)
 8005636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800563a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800563c:	4b21      	ldr	r3, [pc, #132]	; (80056c4 <HAL_RCC_OscConfig+0x82c>)
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	4a20      	ldr	r2, [pc, #128]	; (80056c4 <HAL_RCC_OscConfig+0x82c>)
 8005642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005646:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005648:	f7fd fa06 	bl	8002a58 <HAL_GetTick>
 800564c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800564e:	e008      	b.n	8005662 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005650:	f7fd fa02 	bl	8002a58 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e02c      	b.n	80056bc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005662:	4b18      	ldr	r3, [pc, #96]	; (80056c4 <HAL_RCC_OscConfig+0x82c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d0f0      	beq.n	8005650 <HAL_RCC_OscConfig+0x7b8>
 800566e:	e024      	b.n	80056ba <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	2b0c      	cmp	r3, #12
 8005674:	d01f      	beq.n	80056b6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005676:	4b13      	ldr	r3, [pc, #76]	; (80056c4 <HAL_RCC_OscConfig+0x82c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a12      	ldr	r2, [pc, #72]	; (80056c4 <HAL_RCC_OscConfig+0x82c>)
 800567c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005682:	f7fd f9e9 	bl	8002a58 <HAL_GetTick>
 8005686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005688:	e008      	b.n	800569c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800568a:	f7fd f9e5 	bl	8002a58 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	2b02      	cmp	r3, #2
 8005696:	d901      	bls.n	800569c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e00f      	b.n	80056bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800569c:	4b09      	ldr	r3, [pc, #36]	; (80056c4 <HAL_RCC_OscConfig+0x82c>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1f0      	bne.n	800568a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80056a8:	4b06      	ldr	r3, [pc, #24]	; (80056c4 <HAL_RCC_OscConfig+0x82c>)
 80056aa:	68da      	ldr	r2, [r3, #12]
 80056ac:	4905      	ldr	r1, [pc, #20]	; (80056c4 <HAL_RCC_OscConfig+0x82c>)
 80056ae:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <HAL_RCC_OscConfig+0x830>)
 80056b0:	4013      	ands	r3, r2
 80056b2:	60cb      	str	r3, [r1, #12]
 80056b4:	e001      	b.n	80056ba <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e000      	b.n	80056bc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3720      	adds	r7, #32
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	40021000 	.word	0x40021000
 80056c8:	feeefffc 	.word	0xfeeefffc

080056cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80056d6:	2300      	movs	r3, #0
 80056d8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e11d      	b.n	8005920 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056e4:	4b90      	ldr	r3, [pc, #576]	; (8005928 <HAL_RCC_ClockConfig+0x25c>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 030f 	and.w	r3, r3, #15
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d910      	bls.n	8005714 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056f2:	4b8d      	ldr	r3, [pc, #564]	; (8005928 <HAL_RCC_ClockConfig+0x25c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f023 020f 	bic.w	r2, r3, #15
 80056fa:	498b      	ldr	r1, [pc, #556]	; (8005928 <HAL_RCC_ClockConfig+0x25c>)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	4313      	orrs	r3, r2
 8005700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005702:	4b89      	ldr	r3, [pc, #548]	; (8005928 <HAL_RCC_ClockConfig+0x25c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 030f 	and.w	r3, r3, #15
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	429a      	cmp	r2, r3
 800570e:	d001      	beq.n	8005714 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e105      	b.n	8005920 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d010      	beq.n	8005742 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	4b81      	ldr	r3, [pc, #516]	; (800592c <HAL_RCC_ClockConfig+0x260>)
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800572c:	429a      	cmp	r2, r3
 800572e:	d908      	bls.n	8005742 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005730:	4b7e      	ldr	r3, [pc, #504]	; (800592c <HAL_RCC_ClockConfig+0x260>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	497b      	ldr	r1, [pc, #492]	; (800592c <HAL_RCC_ClockConfig+0x260>)
 800573e:	4313      	orrs	r3, r2
 8005740:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b00      	cmp	r3, #0
 800574c:	d079      	beq.n	8005842 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	2b03      	cmp	r3, #3
 8005754:	d11e      	bne.n	8005794 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005756:	4b75      	ldr	r3, [pc, #468]	; (800592c <HAL_RCC_ClockConfig+0x260>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e0dc      	b.n	8005920 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005766:	f000 fa35 	bl	8005bd4 <RCC_GetSysClockFreqFromPLLSource>
 800576a:	4603      	mov	r3, r0
 800576c:	4a70      	ldr	r2, [pc, #448]	; (8005930 <HAL_RCC_ClockConfig+0x264>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d946      	bls.n	8005800 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005772:	4b6e      	ldr	r3, [pc, #440]	; (800592c <HAL_RCC_ClockConfig+0x260>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d140      	bne.n	8005800 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800577e:	4b6b      	ldr	r3, [pc, #428]	; (800592c <HAL_RCC_ClockConfig+0x260>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005786:	4a69      	ldr	r2, [pc, #420]	; (800592c <HAL_RCC_ClockConfig+0x260>)
 8005788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800578c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800578e:	2380      	movs	r3, #128	; 0x80
 8005790:	617b      	str	r3, [r7, #20]
 8005792:	e035      	b.n	8005800 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	2b02      	cmp	r3, #2
 800579a:	d107      	bne.n	80057ac <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800579c:	4b63      	ldr	r3, [pc, #396]	; (800592c <HAL_RCC_ClockConfig+0x260>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d115      	bne.n	80057d4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e0b9      	b.n	8005920 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d107      	bne.n	80057c4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057b4:	4b5d      	ldr	r3, [pc, #372]	; (800592c <HAL_RCC_ClockConfig+0x260>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0302 	and.w	r3, r3, #2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d109      	bne.n	80057d4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e0ad      	b.n	8005920 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057c4:	4b59      	ldr	r3, [pc, #356]	; (800592c <HAL_RCC_ClockConfig+0x260>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e0a5      	b.n	8005920 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80057d4:	f000 f8b4 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 80057d8:	4603      	mov	r3, r0
 80057da:	4a55      	ldr	r2, [pc, #340]	; (8005930 <HAL_RCC_ClockConfig+0x264>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d90f      	bls.n	8005800 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80057e0:	4b52      	ldr	r3, [pc, #328]	; (800592c <HAL_RCC_ClockConfig+0x260>)
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d109      	bne.n	8005800 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057ec:	4b4f      	ldr	r3, [pc, #316]	; (800592c <HAL_RCC_ClockConfig+0x260>)
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057f4:	4a4d      	ldr	r2, [pc, #308]	; (800592c <HAL_RCC_ClockConfig+0x260>)
 80057f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057fa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80057fc:	2380      	movs	r3, #128	; 0x80
 80057fe:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005800:	4b4a      	ldr	r3, [pc, #296]	; (800592c <HAL_RCC_ClockConfig+0x260>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f023 0203 	bic.w	r2, r3, #3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	4947      	ldr	r1, [pc, #284]	; (800592c <HAL_RCC_ClockConfig+0x260>)
 800580e:	4313      	orrs	r3, r2
 8005810:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005812:	f7fd f921 	bl	8002a58 <HAL_GetTick>
 8005816:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005818:	e00a      	b.n	8005830 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800581a:	f7fd f91d 	bl	8002a58 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	f241 3288 	movw	r2, #5000	; 0x1388
 8005828:	4293      	cmp	r3, r2
 800582a:	d901      	bls.n	8005830 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e077      	b.n	8005920 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005830:	4b3e      	ldr	r3, [pc, #248]	; (800592c <HAL_RCC_ClockConfig+0x260>)
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f003 020c 	and.w	r2, r3, #12
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	429a      	cmp	r2, r3
 8005840:	d1eb      	bne.n	800581a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2b80      	cmp	r3, #128	; 0x80
 8005846:	d105      	bne.n	8005854 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005848:	4b38      	ldr	r3, [pc, #224]	; (800592c <HAL_RCC_ClockConfig+0x260>)
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	4a37      	ldr	r2, [pc, #220]	; (800592c <HAL_RCC_ClockConfig+0x260>)
 800584e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005852:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d010      	beq.n	8005882 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	4b31      	ldr	r3, [pc, #196]	; (800592c <HAL_RCC_ClockConfig+0x260>)
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800586c:	429a      	cmp	r2, r3
 800586e:	d208      	bcs.n	8005882 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005870:	4b2e      	ldr	r3, [pc, #184]	; (800592c <HAL_RCC_ClockConfig+0x260>)
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	492b      	ldr	r1, [pc, #172]	; (800592c <HAL_RCC_ClockConfig+0x260>)
 800587e:	4313      	orrs	r3, r2
 8005880:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005882:	4b29      	ldr	r3, [pc, #164]	; (8005928 <HAL_RCC_ClockConfig+0x25c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	429a      	cmp	r2, r3
 800588e:	d210      	bcs.n	80058b2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005890:	4b25      	ldr	r3, [pc, #148]	; (8005928 <HAL_RCC_ClockConfig+0x25c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f023 020f 	bic.w	r2, r3, #15
 8005898:	4923      	ldr	r1, [pc, #140]	; (8005928 <HAL_RCC_ClockConfig+0x25c>)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	4313      	orrs	r3, r2
 800589e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058a0:	4b21      	ldr	r3, [pc, #132]	; (8005928 <HAL_RCC_ClockConfig+0x25c>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 030f 	and.w	r3, r3, #15
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d001      	beq.n	80058b2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e036      	b.n	8005920 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0304 	and.w	r3, r3, #4
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d008      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058be:	4b1b      	ldr	r3, [pc, #108]	; (800592c <HAL_RCC_ClockConfig+0x260>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	4918      	ldr	r1, [pc, #96]	; (800592c <HAL_RCC_ClockConfig+0x260>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0308 	and.w	r3, r3, #8
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d009      	beq.n	80058f0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058dc:	4b13      	ldr	r3, [pc, #76]	; (800592c <HAL_RCC_ClockConfig+0x260>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	00db      	lsls	r3, r3, #3
 80058ea:	4910      	ldr	r1, [pc, #64]	; (800592c <HAL_RCC_ClockConfig+0x260>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80058f0:	f000 f826 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 80058f4:	4602      	mov	r2, r0
 80058f6:	4b0d      	ldr	r3, [pc, #52]	; (800592c <HAL_RCC_ClockConfig+0x260>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	091b      	lsrs	r3, r3, #4
 80058fc:	f003 030f 	and.w	r3, r3, #15
 8005900:	490c      	ldr	r1, [pc, #48]	; (8005934 <HAL_RCC_ClockConfig+0x268>)
 8005902:	5ccb      	ldrb	r3, [r1, r3]
 8005904:	f003 031f 	and.w	r3, r3, #31
 8005908:	fa22 f303 	lsr.w	r3, r2, r3
 800590c:	4a0a      	ldr	r2, [pc, #40]	; (8005938 <HAL_RCC_ClockConfig+0x26c>)
 800590e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005910:	4b0a      	ldr	r3, [pc, #40]	; (800593c <HAL_RCC_ClockConfig+0x270>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4618      	mov	r0, r3
 8005916:	f7fd f84f 	bl	80029b8 <HAL_InitTick>
 800591a:	4603      	mov	r3, r0
 800591c:	73fb      	strb	r3, [r7, #15]

  return status;
 800591e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3718      	adds	r7, #24
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	40022000 	.word	0x40022000
 800592c:	40021000 	.word	0x40021000
 8005930:	04c4b400 	.word	0x04c4b400
 8005934:	080141d8 	.word	0x080141d8
 8005938:	2000000c 	.word	0x2000000c
 800593c:	20000010 	.word	0x20000010

08005940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005940:	b480      	push	{r7}
 8005942:	b089      	sub	sp, #36	; 0x24
 8005944:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	61fb      	str	r3, [r7, #28]
 800594a:	2300      	movs	r3, #0
 800594c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800594e:	4b3e      	ldr	r3, [pc, #248]	; (8005a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f003 030c 	and.w	r3, r3, #12
 8005956:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005958:	4b3b      	ldr	r3, [pc, #236]	; (8005a48 <HAL_RCC_GetSysClockFreq+0x108>)
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f003 0303 	and.w	r3, r3, #3
 8005960:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d005      	beq.n	8005974 <HAL_RCC_GetSysClockFreq+0x34>
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	2b0c      	cmp	r3, #12
 800596c:	d121      	bne.n	80059b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d11e      	bne.n	80059b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005974:	4b34      	ldr	r3, [pc, #208]	; (8005a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0308 	and.w	r3, r3, #8
 800597c:	2b00      	cmp	r3, #0
 800597e:	d107      	bne.n	8005990 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005980:	4b31      	ldr	r3, [pc, #196]	; (8005a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005986:	0a1b      	lsrs	r3, r3, #8
 8005988:	f003 030f 	and.w	r3, r3, #15
 800598c:	61fb      	str	r3, [r7, #28]
 800598e:	e005      	b.n	800599c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005990:	4b2d      	ldr	r3, [pc, #180]	; (8005a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	091b      	lsrs	r3, r3, #4
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800599c:	4a2b      	ldr	r2, [pc, #172]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x10c>)
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10d      	bne.n	80059c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059b0:	e00a      	b.n	80059c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	2b04      	cmp	r3, #4
 80059b6:	d102      	bne.n	80059be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059b8:	4b25      	ldr	r3, [pc, #148]	; (8005a50 <HAL_RCC_GetSysClockFreq+0x110>)
 80059ba:	61bb      	str	r3, [r7, #24]
 80059bc:	e004      	b.n	80059c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	2b08      	cmp	r3, #8
 80059c2:	d101      	bne.n	80059c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059c4:	4b23      	ldr	r3, [pc, #140]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x114>)
 80059c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	2b0c      	cmp	r3, #12
 80059cc:	d134      	bne.n	8005a38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059ce:	4b1e      	ldr	r3, [pc, #120]	; (8005a48 <HAL_RCC_GetSysClockFreq+0x108>)
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d003      	beq.n	80059e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2b03      	cmp	r3, #3
 80059e2:	d003      	beq.n	80059ec <HAL_RCC_GetSysClockFreq+0xac>
 80059e4:	e005      	b.n	80059f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80059e6:	4b1a      	ldr	r3, [pc, #104]	; (8005a50 <HAL_RCC_GetSysClockFreq+0x110>)
 80059e8:	617b      	str	r3, [r7, #20]
      break;
 80059ea:	e005      	b.n	80059f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80059ec:	4b19      	ldr	r3, [pc, #100]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x114>)
 80059ee:	617b      	str	r3, [r7, #20]
      break;
 80059f0:	e002      	b.n	80059f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	617b      	str	r3, [r7, #20]
      break;
 80059f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059f8:	4b13      	ldr	r3, [pc, #76]	; (8005a48 <HAL_RCC_GetSysClockFreq+0x108>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	091b      	lsrs	r3, r3, #4
 80059fe:	f003 030f 	and.w	r3, r3, #15
 8005a02:	3301      	adds	r3, #1
 8005a04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005a06:	4b10      	ldr	r3, [pc, #64]	; (8005a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	0a1b      	lsrs	r3, r3, #8
 8005a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	fb03 f202 	mul.w	r2, r3, r2
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a1e:	4b0a      	ldr	r3, [pc, #40]	; (8005a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	0e5b      	lsrs	r3, r3, #25
 8005a24:	f003 0303 	and.w	r3, r3, #3
 8005a28:	3301      	adds	r3, #1
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005a38:	69bb      	ldr	r3, [r7, #24]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3724      	adds	r7, #36	; 0x24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	40021000 	.word	0x40021000
 8005a4c:	080141f0 	.word	0x080141f0
 8005a50:	00f42400 	.word	0x00f42400
 8005a54:	007a1200 	.word	0x007a1200

08005a58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a5c:	4b03      	ldr	r3, [pc, #12]	; (8005a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	2000000c 	.word	0x2000000c

08005a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005a74:	f7ff fff0 	bl	8005a58 <HAL_RCC_GetHCLKFreq>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	4b06      	ldr	r3, [pc, #24]	; (8005a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	0a1b      	lsrs	r3, r3, #8
 8005a80:	f003 0307 	and.w	r3, r3, #7
 8005a84:	4904      	ldr	r1, [pc, #16]	; (8005a98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a86:	5ccb      	ldrb	r3, [r1, r3]
 8005a88:	f003 031f 	and.w	r3, r3, #31
 8005a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	40021000 	.word	0x40021000
 8005a98:	080141e8 	.word	0x080141e8

08005a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005aa0:	f7ff ffda 	bl	8005a58 <HAL_RCC_GetHCLKFreq>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	4b06      	ldr	r3, [pc, #24]	; (8005ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	0adb      	lsrs	r3, r3, #11
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	4904      	ldr	r1, [pc, #16]	; (8005ac4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ab2:	5ccb      	ldrb	r3, [r1, r3]
 8005ab4:	f003 031f 	and.w	r3, r3, #31
 8005ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	40021000 	.word	0x40021000
 8005ac4:	080141e8 	.word	0x080141e8

08005ac8 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005acc:	4b05      	ldr	r3, [pc, #20]	; (8005ae4 <HAL_RCC_EnableCSS+0x1c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a04      	ldr	r2, [pc, #16]	; (8005ae4 <HAL_RCC_EnableCSS+0x1c>)
 8005ad2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ad6:	6013      	str	r3, [r2, #0]
}
 8005ad8:	bf00      	nop
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	40021000 	.word	0x40021000

08005ae8 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005aec:	4b07      	ldr	r3, [pc, #28]	; (8005b0c <HAL_RCC_NMI_IRQHandler+0x24>)
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005af8:	d105      	bne.n	8005b06 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005afa:	f000 f809 	bl	8005b10 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005afe:	4b03      	ldr	r3, [pc, #12]	; (8005b0c <HAL_RCC_NMI_IRQHandler+0x24>)
 8005b00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b04:	621a      	str	r2, [r3, #32]
  }
}
 8005b06:	bf00      	nop
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	40021000 	.word	0x40021000

08005b10 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005b10:	b480      	push	{r7}
 8005b12:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
	...

08005b20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005b28:	2300      	movs	r3, #0
 8005b2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005b2c:	4b27      	ldr	r3, [pc, #156]	; (8005bcc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d003      	beq.n	8005b40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005b38:	f7ff f8da 	bl	8004cf0 <HAL_PWREx_GetVoltageRange>
 8005b3c:	6178      	str	r0, [r7, #20]
 8005b3e:	e014      	b.n	8005b6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b40:	4b22      	ldr	r3, [pc, #136]	; (8005bcc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b44:	4a21      	ldr	r2, [pc, #132]	; (8005bcc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b4a:	6593      	str	r3, [r2, #88]	; 0x58
 8005b4c:	4b1f      	ldr	r3, [pc, #124]	; (8005bcc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005b58:	f7ff f8ca 	bl	8004cf0 <HAL_PWREx_GetVoltageRange>
 8005b5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005b5e:	4b1b      	ldr	r3, [pc, #108]	; (8005bcc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b62:	4a1a      	ldr	r2, [pc, #104]	; (8005bcc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b68:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b70:	d10b      	bne.n	8005b8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2b80      	cmp	r3, #128	; 0x80
 8005b76:	d913      	bls.n	8005ba0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2ba0      	cmp	r3, #160	; 0xa0
 8005b7c:	d902      	bls.n	8005b84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005b7e:	2302      	movs	r3, #2
 8005b80:	613b      	str	r3, [r7, #16]
 8005b82:	e00d      	b.n	8005ba0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b84:	2301      	movs	r3, #1
 8005b86:	613b      	str	r3, [r7, #16]
 8005b88:	e00a      	b.n	8005ba0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b8e:	d902      	bls.n	8005b96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005b90:	2302      	movs	r3, #2
 8005b92:	613b      	str	r3, [r7, #16]
 8005b94:	e004      	b.n	8005ba0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b70      	cmp	r3, #112	; 0x70
 8005b9a:	d101      	bne.n	8005ba0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005ba0:	4b0b      	ldr	r3, [pc, #44]	; (8005bd0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f023 020f 	bic.w	r2, r3, #15
 8005ba8:	4909      	ldr	r1, [pc, #36]	; (8005bd0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005bb0:	4b07      	ldr	r3, [pc, #28]	; (8005bd0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 030f 	and.w	r3, r3, #15
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d001      	beq.n	8005bc2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e000      	b.n	8005bc4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3718      	adds	r7, #24
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	40022000 	.word	0x40022000

08005bd4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005bda:	4b2d      	ldr	r3, [pc, #180]	; (8005c90 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f003 0303 	and.w	r3, r3, #3
 8005be2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d00b      	beq.n	8005c02 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d825      	bhi.n	8005c3c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d008      	beq.n	8005c08 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d11f      	bne.n	8005c3c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005bfc:	4b25      	ldr	r3, [pc, #148]	; (8005c94 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005bfe:	613b      	str	r3, [r7, #16]
    break;
 8005c00:	e01f      	b.n	8005c42 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005c02:	4b25      	ldr	r3, [pc, #148]	; (8005c98 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005c04:	613b      	str	r3, [r7, #16]
    break;
 8005c06:	e01c      	b.n	8005c42 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c08:	4b21      	ldr	r3, [pc, #132]	; (8005c90 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0308 	and.w	r3, r3, #8
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d107      	bne.n	8005c24 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c14:	4b1e      	ldr	r3, [pc, #120]	; (8005c90 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c1a:	0a1b      	lsrs	r3, r3, #8
 8005c1c:	f003 030f 	and.w	r3, r3, #15
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	e005      	b.n	8005c30 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005c24:	4b1a      	ldr	r3, [pc, #104]	; (8005c90 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	091b      	lsrs	r3, r3, #4
 8005c2a:	f003 030f 	and.w	r3, r3, #15
 8005c2e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005c30:	4a1a      	ldr	r2, [pc, #104]	; (8005c9c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c38:	613b      	str	r3, [r7, #16]
    break;
 8005c3a:	e002      	b.n	8005c42 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	613b      	str	r3, [r7, #16]
    break;
 8005c40:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c42:	4b13      	ldr	r3, [pc, #76]	; (8005c90 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	091b      	lsrs	r3, r3, #4
 8005c48:	f003 030f 	and.w	r3, r3, #15
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005c50:	4b0f      	ldr	r3, [pc, #60]	; (8005c90 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	0a1b      	lsrs	r3, r3, #8
 8005c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	fb03 f202 	mul.w	r2, r3, r2
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c66:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c68:	4b09      	ldr	r3, [pc, #36]	; (8005c90 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	0e5b      	lsrs	r3, r3, #25
 8005c6e:	f003 0303 	and.w	r3, r3, #3
 8005c72:	3301      	adds	r3, #1
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c80:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005c82:	683b      	ldr	r3, [r7, #0]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	371c      	adds	r7, #28
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	40021000 	.word	0x40021000
 8005c94:	00f42400 	.word	0x00f42400
 8005c98:	007a1200 	.word	0x007a1200
 8005c9c:	080141f0 	.word	0x080141f0

08005ca0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ca8:	2300      	movs	r3, #0
 8005caa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cac:	2300      	movs	r3, #0
 8005cae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d040      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cc0:	2b80      	cmp	r3, #128	; 0x80
 8005cc2:	d02a      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005cc4:	2b80      	cmp	r3, #128	; 0x80
 8005cc6:	d825      	bhi.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005cc8:	2b60      	cmp	r3, #96	; 0x60
 8005cca:	d026      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ccc:	2b60      	cmp	r3, #96	; 0x60
 8005cce:	d821      	bhi.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005cd0:	2b40      	cmp	r3, #64	; 0x40
 8005cd2:	d006      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005cd4:	2b40      	cmp	r3, #64	; 0x40
 8005cd6:	d81d      	bhi.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d009      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	d010      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005ce0:	e018      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ce2:	4b89      	ldr	r3, [pc, #548]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	4a88      	ldr	r2, [pc, #544]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cec:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cee:	e015      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f001 fa24 	bl	8007144 <RCCEx_PLLSAI1_Config>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d00:	e00c      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	3320      	adds	r3, #32
 8005d06:	2100      	movs	r1, #0
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f001 fb0f 	bl	800732c <RCCEx_PLLSAI2_Config>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d12:	e003      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	74fb      	strb	r3, [r7, #19]
      break;
 8005d18:	e000      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005d1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d1c:	7cfb      	ldrb	r3, [r7, #19]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10b      	bne.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d22:	4b79      	ldr	r3, [pc, #484]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d28:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d30:	4975      	ldr	r1, [pc, #468]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005d38:	e001      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d3a:	7cfb      	ldrb	r3, [r7, #19]
 8005d3c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d047      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d52:	d030      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d58:	d82a      	bhi.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005d5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d5e:	d02a      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005d60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d64:	d824      	bhi.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005d66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d6a:	d008      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d70:	d81e      	bhi.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00a      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d7a:	d010      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005d7c:	e018      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d7e:	4b62      	ldr	r3, [pc, #392]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	4a61      	ldr	r2, [pc, #388]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d88:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d8a:	e015      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	3304      	adds	r3, #4
 8005d90:	2100      	movs	r1, #0
 8005d92:	4618      	mov	r0, r3
 8005d94:	f001 f9d6 	bl	8007144 <RCCEx_PLLSAI1_Config>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d9c:	e00c      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	3320      	adds	r3, #32
 8005da2:	2100      	movs	r1, #0
 8005da4:	4618      	mov	r0, r3
 8005da6:	f001 fac1 	bl	800732c <RCCEx_PLLSAI2_Config>
 8005daa:	4603      	mov	r3, r0
 8005dac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005dae:	e003      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	74fb      	strb	r3, [r7, #19]
      break;
 8005db4:	e000      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005db6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005db8:	7cfb      	ldrb	r3, [r7, #19]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10b      	bne.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005dbe:	4b52      	ldr	r3, [pc, #328]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005dc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dcc:	494e      	ldr	r1, [pc, #312]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005dd4:	e001      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd6:	7cfb      	ldrb	r3, [r7, #19]
 8005dd8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 809f 	beq.w	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005de8:	2300      	movs	r3, #0
 8005dea:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005dec:	4b46      	ldr	r3, [pc, #280]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e000      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00d      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e02:	4b41      	ldr	r3, [pc, #260]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e06:	4a40      	ldr	r2, [pc, #256]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8005e0e:	4b3e      	ldr	r3, [pc, #248]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e16:	60bb      	str	r3, [r7, #8]
 8005e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e1e:	4b3b      	ldr	r3, [pc, #236]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a3a      	ldr	r2, [pc, #232]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e2a:	f7fc fe15 	bl	8002a58 <HAL_GetTick>
 8005e2e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e30:	e009      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e32:	f7fc fe11 	bl	8002a58 <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d902      	bls.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	74fb      	strb	r3, [r7, #19]
        break;
 8005e44:	e005      	b.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e46:	4b31      	ldr	r3, [pc, #196]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d0ef      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005e52:	7cfb      	ldrb	r3, [r7, #19]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d15b      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e58:	4b2b      	ldr	r3, [pc, #172]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e62:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d01f      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d019      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e76:	4b24      	ldr	r3, [pc, #144]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e80:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e82:	4b21      	ldr	r3, [pc, #132]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e88:	4a1f      	ldr	r2, [pc, #124]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e92:	4b1d      	ldr	r3, [pc, #116]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e98:	4a1b      	ldr	r2, [pc, #108]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ea2:	4a19      	ldr	r2, [pc, #100]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d016      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb4:	f7fc fdd0 	bl	8002a58 <HAL_GetTick>
 8005eb8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005eba:	e00b      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ebc:	f7fc fdcc 	bl	8002a58 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d902      	bls.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	74fb      	strb	r3, [r7, #19]
            break;
 8005ed2:	e006      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ed4:	4b0c      	ldr	r3, [pc, #48]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d0ec      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005ee2:	7cfb      	ldrb	r3, [r7, #19]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10c      	bne.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ee8:	4b07      	ldr	r3, [pc, #28]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef8:	4903      	ldr	r1, [pc, #12]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005f00:	e008      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f02:	7cfb      	ldrb	r3, [r7, #19]
 8005f04:	74bb      	strb	r3, [r7, #18]
 8005f06:	e005      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005f08:	40021000 	.word	0x40021000
 8005f0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f10:	7cfb      	ldrb	r3, [r7, #19]
 8005f12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f14:	7c7b      	ldrb	r3, [r7, #17]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d105      	bne.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f1a:	4ba0      	ldr	r3, [pc, #640]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f1e:	4a9f      	ldr	r2, [pc, #636]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00a      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f32:	4b9a      	ldr	r3, [pc, #616]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f38:	f023 0203 	bic.w	r2, r3, #3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f40:	4996      	ldr	r1, [pc, #600]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00a      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f54:	4b91      	ldr	r3, [pc, #580]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f5a:	f023 020c 	bic.w	r2, r3, #12
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	498e      	ldr	r1, [pc, #568]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0304 	and.w	r3, r3, #4
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00a      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f76:	4b89      	ldr	r3, [pc, #548]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f84:	4985      	ldr	r1, [pc, #532]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0308 	and.w	r3, r3, #8
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00a      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f98:	4b80      	ldr	r3, [pc, #512]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fa6:	497d      	ldr	r1, [pc, #500]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0310 	and.w	r3, r3, #16
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00a      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005fba:	4b78      	ldr	r3, [pc, #480]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fc8:	4974      	ldr	r1, [pc, #464]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0320 	and.w	r3, r3, #32
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00a      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fdc:	4b6f      	ldr	r3, [pc, #444]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fea:	496c      	ldr	r1, [pc, #432]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00a      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ffe:	4b67      	ldr	r3, [pc, #412]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006004:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800600c:	4963      	ldr	r1, [pc, #396]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800600e:	4313      	orrs	r3, r2
 8006010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00a      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006020:	4b5e      	ldr	r3, [pc, #376]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006026:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800602e:	495b      	ldr	r1, [pc, #364]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006030:	4313      	orrs	r3, r2
 8006032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00a      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006042:	4b56      	ldr	r3, [pc, #344]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006048:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006050:	4952      	ldr	r1, [pc, #328]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006052:	4313      	orrs	r3, r2
 8006054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00a      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006064:	4b4d      	ldr	r3, [pc, #308]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800606a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006072:	494a      	ldr	r1, [pc, #296]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006074:	4313      	orrs	r3, r2
 8006076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00a      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006086:	4b45      	ldr	r3, [pc, #276]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006094:	4941      	ldr	r1, [pc, #260]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006096:	4313      	orrs	r3, r2
 8006098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00a      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80060a8:	4b3c      	ldr	r3, [pc, #240]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060ae:	f023 0203 	bic.w	r2, r3, #3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060b6:	4939      	ldr	r1, [pc, #228]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d028      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060ca:	4b34      	ldr	r3, [pc, #208]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060d8:	4930      	ldr	r1, [pc, #192]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060e8:	d106      	bne.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060ea:	4b2c      	ldr	r3, [pc, #176]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	4a2b      	ldr	r2, [pc, #172]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060f4:	60d3      	str	r3, [r2, #12]
 80060f6:	e011      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006100:	d10c      	bne.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	3304      	adds	r3, #4
 8006106:	2101      	movs	r1, #1
 8006108:	4618      	mov	r0, r3
 800610a:	f001 f81b 	bl	8007144 <RCCEx_PLLSAI1_Config>
 800610e:	4603      	mov	r3, r0
 8006110:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006112:	7cfb      	ldrb	r3, [r7, #19]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006118:	7cfb      	ldrb	r3, [r7, #19]
 800611a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d04d      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800612c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006130:	d108      	bne.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006132:	4b1a      	ldr	r3, [pc, #104]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006134:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006138:	4a18      	ldr	r2, [pc, #96]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800613a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800613e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006142:	e012      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006144:	4b15      	ldr	r3, [pc, #84]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006146:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800614a:	4a14      	ldr	r2, [pc, #80]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800614c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006150:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006154:	4b11      	ldr	r3, [pc, #68]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800615a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006162:	490e      	ldr	r1, [pc, #56]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006164:	4313      	orrs	r3, r2
 8006166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800616e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006172:	d106      	bne.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006174:	4b09      	ldr	r3, [pc, #36]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	4a08      	ldr	r2, [pc, #32]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800617a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800617e:	60d3      	str	r3, [r2, #12]
 8006180:	e020      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006186:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800618a:	d109      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800618c:	4b03      	ldr	r3, [pc, #12]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	4a02      	ldr	r2, [pc, #8]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006196:	60d3      	str	r3, [r2, #12]
 8006198:	e014      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800619a:	bf00      	nop
 800619c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061a8:	d10c      	bne.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	3304      	adds	r3, #4
 80061ae:	2101      	movs	r1, #1
 80061b0:	4618      	mov	r0, r3
 80061b2:	f000 ffc7 	bl	8007144 <RCCEx_PLLSAI1_Config>
 80061b6:	4603      	mov	r3, r0
 80061b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061ba:	7cfb      	ldrb	r3, [r7, #19]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80061c0:	7cfb      	ldrb	r3, [r7, #19]
 80061c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d028      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061d0:	4b4a      	ldr	r3, [pc, #296]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061de:	4947      	ldr	r1, [pc, #284]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061ee:	d106      	bne.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061f0:	4b42      	ldr	r3, [pc, #264]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	4a41      	ldr	r2, [pc, #260]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061fa:	60d3      	str	r3, [r2, #12]
 80061fc:	e011      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006202:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006206:	d10c      	bne.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3304      	adds	r3, #4
 800620c:	2101      	movs	r1, #1
 800620e:	4618      	mov	r0, r3
 8006210:	f000 ff98 	bl	8007144 <RCCEx_PLLSAI1_Config>
 8006214:	4603      	mov	r3, r0
 8006216:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006218:	7cfb      	ldrb	r3, [r7, #19]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800621e:	7cfb      	ldrb	r3, [r7, #19]
 8006220:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800622a:	2b00      	cmp	r3, #0
 800622c:	d01e      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800622e:	4b33      	ldr	r3, [pc, #204]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006234:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800623e:	492f      	ldr	r1, [pc, #188]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006240:	4313      	orrs	r3, r2
 8006242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800624c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006250:	d10c      	bne.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	3304      	adds	r3, #4
 8006256:	2102      	movs	r1, #2
 8006258:	4618      	mov	r0, r3
 800625a:	f000 ff73 	bl	8007144 <RCCEx_PLLSAI1_Config>
 800625e:	4603      	mov	r3, r0
 8006260:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006262:	7cfb      	ldrb	r3, [r7, #19]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006268:	7cfb      	ldrb	r3, [r7, #19]
 800626a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00b      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006278:	4b20      	ldr	r3, [pc, #128]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800627a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800627e:	f023 0204 	bic.w	r2, r3, #4
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006288:	491c      	ldr	r1, [pc, #112]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800628a:	4313      	orrs	r3, r2
 800628c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00b      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800629c:	4b17      	ldr	r3, [pc, #92]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800629e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062a2:	f023 0218 	bic.w	r2, r3, #24
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ac:	4913      	ldr	r1, [pc, #76]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d017      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80062c0:	4b0e      	ldr	r3, [pc, #56]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062d0:	490a      	ldr	r1, [pc, #40]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062e2:	d105      	bne.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062e4:	4b05      	ldr	r3, [pc, #20]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	4a04      	ldr	r2, [pc, #16]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80062f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3718      	adds	r7, #24
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	40021000 	.word	0x40021000

08006300 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b088      	sub	sp, #32
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006308:	2300      	movs	r3, #0
 800630a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006312:	d13e      	bne.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006314:	4bb6      	ldr	r3, [pc, #728]	; (80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800631a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800631e:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006326:	d028      	beq.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800632e:	f200 86f4 	bhi.w	800711a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006338:	d005      	beq.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006340:	d00e      	beq.n	8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8006342:	f000 beea 	b.w	800711a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006346:	4baa      	ldr	r3, [pc, #680]	; (80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b02      	cmp	r3, #2
 8006352:	f040 86e4 	bne.w	800711e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8006356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800635a:	61fb      	str	r3, [r7, #28]
      break;
 800635c:	f000 bedf 	b.w	800711e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006360:	4ba3      	ldr	r3, [pc, #652]	; (80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b02      	cmp	r3, #2
 800636c:	f040 86d9 	bne.w	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8006370:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006374:	61fb      	str	r3, [r7, #28]
      break;
 8006376:	f000 bed4 	b.w	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800637a:	4b9d      	ldr	r3, [pc, #628]	; (80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006382:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006386:	f040 86ce 	bne.w	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 800638a:	4b9a      	ldr	r3, [pc, #616]	; (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800638c:	61fb      	str	r3, [r7, #28]
      break;
 800638e:	f000 beca 	b.w	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006392:	4b97      	ldr	r3, [pc, #604]	; (80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	f003 0303 	and.w	r3, r3, #3
 800639a:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	2b03      	cmp	r3, #3
 80063a0:	d036      	beq.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	2b03      	cmp	r3, #3
 80063a6:	d840      	bhi.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d003      	beq.n	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d020      	beq.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80063b4:	e039      	b.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80063b6:	4b8e      	ldr	r3, [pc, #568]	; (80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d116      	bne.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80063c2:	4b8b      	ldr	r3, [pc, #556]	; (80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0308 	and.w	r3, r3, #8
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d005      	beq.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80063ce:	4b88      	ldr	r3, [pc, #544]	; (80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	091b      	lsrs	r3, r3, #4
 80063d4:	f003 030f 	and.w	r3, r3, #15
 80063d8:	e005      	b.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80063da:	4b85      	ldr	r3, [pc, #532]	; (80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80063dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063e0:	0a1b      	lsrs	r3, r3, #8
 80063e2:	f003 030f 	and.w	r3, r3, #15
 80063e6:	4a84      	ldr	r2, [pc, #528]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80063e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80063ee:	e01f      	b.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80063f0:	2300      	movs	r3, #0
 80063f2:	61bb      	str	r3, [r7, #24]
      break;
 80063f4:	e01c      	b.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063f6:	4b7e      	ldr	r3, [pc, #504]	; (80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006402:	d102      	bne.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8006404:	4b7d      	ldr	r3, [pc, #500]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006406:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006408:	e012      	b.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800640a:	2300      	movs	r3, #0
 800640c:	61bb      	str	r3, [r7, #24]
      break;
 800640e:	e00f      	b.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006410:	4b77      	ldr	r3, [pc, #476]	; (80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006418:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800641c:	d102      	bne.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800641e:	4b78      	ldr	r3, [pc, #480]	; (8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8006420:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006422:	e005      	b.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	61bb      	str	r3, [r7, #24]
      break;
 8006428:	e002      	b.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800642a:	2300      	movs	r3, #0
 800642c:	61bb      	str	r3, [r7, #24]
      break;
 800642e:	bf00      	nop
    }

    switch(PeriphClk)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006436:	f000 8606 	beq.w	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006440:	f200 8673 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800644a:	f000 8469 	beq.w	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006454:	f200 8669 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800645e:	f000 8531 	beq.w	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006468:	f200 865f 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006472:	f000 8187 	beq.w	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800647c:	f200 8655 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006486:	f000 80cd 	beq.w	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006490:	f200 864b 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800649a:	f000 8430 	beq.w	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a4:	f200 8641 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064ae:	f000 83e4 	beq.w	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064b8:	f200 8637 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064c2:	f000 80af 	beq.w	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064cc:	f200 862d 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d6:	f000 809d 	beq.w	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064e0:	f200 8623 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ea:	f000 808b 	beq.w	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064f4:	f200 8619 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064fe:	f000 8554 	beq.w	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006508:	f200 860f 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006512:	f000 8500 	beq.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800651c:	f200 8605 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006526:	f000 84a1 	beq.w	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006530:	f200 85fb 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b80      	cmp	r3, #128	; 0x80
 8006538:	f000 846c 	beq.w	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b80      	cmp	r3, #128	; 0x80
 8006540:	f200 85f3 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b20      	cmp	r3, #32
 8006548:	d84c      	bhi.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 85ec 	beq.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	3b01      	subs	r3, #1
 8006556:	2b1f      	cmp	r3, #31
 8006558:	f200 85e7 	bhi.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800655c:	a201      	add	r2, pc, #4	; (adr r2, 8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800655e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006562:	bf00      	nop
 8006564:	08006979 	.word	0x08006979
 8006568:	080069e7 	.word	0x080069e7
 800656c:	0800712b 	.word	0x0800712b
 8006570:	08006a7b 	.word	0x08006a7b
 8006574:	0800712b 	.word	0x0800712b
 8006578:	0800712b 	.word	0x0800712b
 800657c:	0800712b 	.word	0x0800712b
 8006580:	08006af3 	.word	0x08006af3
 8006584:	0800712b 	.word	0x0800712b
 8006588:	0800712b 	.word	0x0800712b
 800658c:	0800712b 	.word	0x0800712b
 8006590:	0800712b 	.word	0x0800712b
 8006594:	0800712b 	.word	0x0800712b
 8006598:	0800712b 	.word	0x0800712b
 800659c:	0800712b 	.word	0x0800712b
 80065a0:	08006b77 	.word	0x08006b77
 80065a4:	0800712b 	.word	0x0800712b
 80065a8:	0800712b 	.word	0x0800712b
 80065ac:	0800712b 	.word	0x0800712b
 80065b0:	0800712b 	.word	0x0800712b
 80065b4:	0800712b 	.word	0x0800712b
 80065b8:	0800712b 	.word	0x0800712b
 80065bc:	0800712b 	.word	0x0800712b
 80065c0:	0800712b 	.word	0x0800712b
 80065c4:	0800712b 	.word	0x0800712b
 80065c8:	0800712b 	.word	0x0800712b
 80065cc:	0800712b 	.word	0x0800712b
 80065d0:	0800712b 	.word	0x0800712b
 80065d4:	0800712b 	.word	0x0800712b
 80065d8:	0800712b 	.word	0x0800712b
 80065dc:	0800712b 	.word	0x0800712b
 80065e0:	08006bf9 	.word	0x08006bf9
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b40      	cmp	r3, #64	; 0x40
 80065e8:	f000 83e8 	beq.w	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80065ec:	f000 bd9d 	b.w	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80065f0:	40021000 	.word	0x40021000
 80065f4:	0003d090 	.word	0x0003d090
 80065f8:	080141f0 	.word	0x080141f0
 80065fc:	00f42400 	.word	0x00f42400
 8006600:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006604:	69b9      	ldr	r1, [r7, #24]
 8006606:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800660a:	f000 ff83 	bl	8007514 <RCCEx_GetSAIxPeriphCLKFreq>
 800660e:	61f8      	str	r0, [r7, #28]
      break;
 8006610:	f000 bd8e 	b.w	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8006614:	69b9      	ldr	r1, [r7, #24]
 8006616:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800661a:	f000 ff7b 	bl	8007514 <RCCEx_GetSAIxPeriphCLKFreq>
 800661e:	61f8      	str	r0, [r7, #28]
      break;
 8006620:	f000 bd86 	b.w	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006624:	4b9a      	ldr	r3, [pc, #616]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800662a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800662e:	60fb      	str	r3, [r7, #12]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006636:	d015      	beq.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800663e:	f200 8092 	bhi.w	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006648:	d029      	beq.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006650:	f200 8089 	bhi.w	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d07b      	beq.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006660:	d04a      	beq.n	80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8006662:	e080      	b.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006664:	4b8a      	ldr	r3, [pc, #552]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0302 	and.w	r3, r3, #2
 800666c:	2b02      	cmp	r3, #2
 800666e:	d17d      	bne.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006670:	4b87      	ldr	r3, [pc, #540]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0308 	and.w	r3, r3, #8
 8006678:	2b00      	cmp	r3, #0
 800667a:	d005      	beq.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 800667c:	4b84      	ldr	r3, [pc, #528]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	091b      	lsrs	r3, r3, #4
 8006682:	f003 030f 	and.w	r3, r3, #15
 8006686:	e005      	b.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8006688:	4b81      	ldr	r3, [pc, #516]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800668a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800668e:	0a1b      	lsrs	r3, r3, #8
 8006690:	f003 030f 	and.w	r3, r3, #15
 8006694:	4a7f      	ldr	r2, [pc, #508]	; (8006894 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800669a:	61fb      	str	r3, [r7, #28]
          break;
 800669c:	e066      	b.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800669e:	4b7c      	ldr	r3, [pc, #496]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066aa:	d162      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80066ac:	4b78      	ldr	r3, [pc, #480]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066b8:	d15b      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80066ba:	4b75      	ldr	r3, [pc, #468]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	0a1b      	lsrs	r3, r3, #8
 80066c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066c4:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	fb03 f202 	mul.w	r2, r3, r2
 80066ce:	4b70      	ldr	r3, [pc, #448]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	091b      	lsrs	r3, r3, #4
 80066d4:	f003 030f 	and.w	r3, r3, #15
 80066d8:	3301      	adds	r3, #1
 80066da:	fbb2 f3f3 	udiv	r3, r2, r3
 80066de:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80066e0:	4b6b      	ldr	r3, [pc, #428]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	0d5b      	lsrs	r3, r3, #21
 80066e6:	f003 0303 	and.w	r3, r3, #3
 80066ea:	3301      	adds	r3, #1
 80066ec:	005b      	lsls	r3, r3, #1
 80066ee:	69ba      	ldr	r2, [r7, #24]
 80066f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f4:	61fb      	str	r3, [r7, #28]
          break;
 80066f6:	e03c      	b.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80066f8:	4b65      	ldr	r3, [pc, #404]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006700:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006704:	d138      	bne.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006706:	4b62      	ldr	r3, [pc, #392]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800670e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006712:	d131      	bne.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006714:	4b5e      	ldr	r3, [pc, #376]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	0a1b      	lsrs	r3, r3, #8
 800671a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800671e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	fb03 f202 	mul.w	r2, r3, r2
 8006728:	4b59      	ldr	r3, [pc, #356]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	091b      	lsrs	r3, r3, #4
 800672e:	f003 030f 	and.w	r3, r3, #15
 8006732:	3301      	adds	r3, #1
 8006734:	fbb2 f3f3 	udiv	r3, r2, r3
 8006738:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800673a:	4b55      	ldr	r3, [pc, #340]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	0d5b      	lsrs	r3, r3, #21
 8006740:	f003 0303 	and.w	r3, r3, #3
 8006744:	3301      	adds	r3, #1
 8006746:	005b      	lsls	r3, r3, #1
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	fbb2 f3f3 	udiv	r3, r2, r3
 800674e:	61fb      	str	r3, [r7, #28]
          break;
 8006750:	e012      	b.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006752:	4b4f      	ldr	r3, [pc, #316]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006754:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006758:	f003 0302 	and.w	r3, r3, #2
 800675c:	2b02      	cmp	r3, #2
 800675e:	d10e      	bne.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8006760:	4b4d      	ldr	r3, [pc, #308]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006762:	61fb      	str	r3, [r7, #28]
          break;
 8006764:	e00b      	b.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8006766:	bf00      	nop
 8006768:	f000 bce2 	b.w	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800676c:	bf00      	nop
 800676e:	f000 bcdf 	b.w	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006772:	bf00      	nop
 8006774:	f000 bcdc 	b.w	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006778:	bf00      	nop
 800677a:	f000 bcd9 	b.w	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800677e:	bf00      	nop
        break;
 8006780:	f000 bcd6 	b.w	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8006784:	4b42      	ldr	r3, [pc, #264]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006786:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800678a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800678e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006792:	d13d      	bne.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006794:	4b3e      	ldr	r3, [pc, #248]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800679c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067a0:	f040 84c5 	bne.w	800712e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80067a4:	4b3a      	ldr	r3, [pc, #232]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067b0:	f040 84bd 	bne.w	800712e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80067b4:	4b36      	ldr	r3, [pc, #216]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	0a1b      	lsrs	r3, r3, #8
 80067ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067be:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	fb03 f202 	mul.w	r2, r3, r2
 80067c8:	4b31      	ldr	r3, [pc, #196]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	091b      	lsrs	r3, r3, #4
 80067ce:	f003 030f 	and.w	r3, r3, #15
 80067d2:	3301      	adds	r3, #1
 80067d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d8:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80067da:	4b2d      	ldr	r3, [pc, #180]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	0edb      	lsrs	r3, r3, #27
 80067e0:	f003 031f 	and.w	r3, r3, #31
 80067e4:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10a      	bne.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80067ec:	4b28      	ldr	r3, [pc, #160]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d002      	beq.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 80067f8:	2311      	movs	r3, #17
 80067fa:	617b      	str	r3, [r7, #20]
 80067fc:	e001      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 80067fe:	2307      	movs	r3, #7
 8006800:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8006802:	69ba      	ldr	r2, [r7, #24]
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	fbb2 f3f3 	udiv	r3, r2, r3
 800680a:	61fb      	str	r3, [r7, #28]
      break;
 800680c:	f000 bc8f 	b.w	800712e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006810:	4b1f      	ldr	r3, [pc, #124]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006816:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800681a:	60fb      	str	r3, [r7, #12]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006822:	d016      	beq.n	8006852 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800682a:	f200 809b 	bhi.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006834:	d032      	beq.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800683c:	f200 8092 	bhi.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 8084 	beq.w	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800684e:	d052      	beq.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8006850:	e088      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006852:	4b0f      	ldr	r3, [pc, #60]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0302 	and.w	r3, r3, #2
 800685a:	2b02      	cmp	r3, #2
 800685c:	f040 8084 	bne.w	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006860:	4b0b      	ldr	r3, [pc, #44]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0308 	and.w	r3, r3, #8
 8006868:	2b00      	cmp	r3, #0
 800686a:	d005      	beq.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800686c:	4b08      	ldr	r3, [pc, #32]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	091b      	lsrs	r3, r3, #4
 8006872:	f003 030f 	and.w	r3, r3, #15
 8006876:	e005      	b.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8006878:	4b05      	ldr	r3, [pc, #20]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800687a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800687e:	0a1b      	lsrs	r3, r3, #8
 8006880:	f003 030f 	and.w	r3, r3, #15
 8006884:	4a03      	ldr	r2, [pc, #12]	; (8006894 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800688a:	61fb      	str	r3, [r7, #28]
          break;
 800688c:	e06c      	b.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800688e:	bf00      	nop
 8006890:	40021000 	.word	0x40021000
 8006894:	080141f0 	.word	0x080141f0
 8006898:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800689c:	4ba5      	ldr	r3, [pc, #660]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068a8:	d160      	bne.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80068aa:	4ba2      	ldr	r3, [pc, #648]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068b6:	d159      	bne.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80068b8:	4b9e      	ldr	r3, [pc, #632]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	0a1b      	lsrs	r3, r3, #8
 80068be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068c2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	fb03 f202 	mul.w	r2, r3, r2
 80068cc:	4b99      	ldr	r3, [pc, #612]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	091b      	lsrs	r3, r3, #4
 80068d2:	f003 030f 	and.w	r3, r3, #15
 80068d6:	3301      	adds	r3, #1
 80068d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068dc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80068de:	4b95      	ldr	r3, [pc, #596]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	0d5b      	lsrs	r3, r3, #21
 80068e4:	f003 0303 	and.w	r3, r3, #3
 80068e8:	3301      	adds	r3, #1
 80068ea:	005b      	lsls	r3, r3, #1
 80068ec:	69ba      	ldr	r2, [r7, #24]
 80068ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f2:	61fb      	str	r3, [r7, #28]
          break;
 80068f4:	e03a      	b.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80068f6:	4b8f      	ldr	r3, [pc, #572]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006902:	d135      	bne.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006904:	4b8b      	ldr	r3, [pc, #556]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800690c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006910:	d12e      	bne.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006912:	4b88      	ldr	r3, [pc, #544]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	0a1b      	lsrs	r3, r3, #8
 8006918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800691c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	fb03 f202 	mul.w	r2, r3, r2
 8006926:	4b83      	ldr	r3, [pc, #524]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	091b      	lsrs	r3, r3, #4
 800692c:	f003 030f 	and.w	r3, r3, #15
 8006930:	3301      	adds	r3, #1
 8006932:	fbb2 f3f3 	udiv	r3, r2, r3
 8006936:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006938:	4b7e      	ldr	r3, [pc, #504]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	0d5b      	lsrs	r3, r3, #21
 800693e:	f003 0303 	and.w	r3, r3, #3
 8006942:	3301      	adds	r3, #1
 8006944:	005b      	lsls	r3, r3, #1
 8006946:	69ba      	ldr	r2, [r7, #24]
 8006948:	fbb2 f3f3 	udiv	r3, r2, r3
 800694c:	61fb      	str	r3, [r7, #28]
          break;
 800694e:	e00f      	b.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006950:	4b78      	ldr	r3, [pc, #480]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006952:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b02      	cmp	r3, #2
 800695c:	d10a      	bne.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 800695e:	4b76      	ldr	r3, [pc, #472]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006960:	61fb      	str	r3, [r7, #28]
          break;
 8006962:	e007      	b.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8006964:	bf00      	nop
 8006966:	e3e2      	b.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006968:	bf00      	nop
 800696a:	e3e0      	b.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800696c:	bf00      	nop
 800696e:	e3de      	b.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006970:	bf00      	nop
 8006972:	e3dc      	b.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006974:	bf00      	nop
      break;
 8006976:	e3da      	b.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006978:	4b6e      	ldr	r3, [pc, #440]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800697a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800697e:	f003 0303 	and.w	r3, r3, #3
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2b03      	cmp	r3, #3
 8006988:	d827      	bhi.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800698a:	a201      	add	r2, pc, #4	; (adr r2, 8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 800698c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006990:	080069a1 	.word	0x080069a1
 8006994:	080069a9 	.word	0x080069a9
 8006998:	080069b1 	.word	0x080069b1
 800699c:	080069c5 	.word	0x080069c5
          frequency = HAL_RCC_GetPCLK2Freq();
 80069a0:	f7ff f87c 	bl	8005a9c <HAL_RCC_GetPCLK2Freq>
 80069a4:	61f8      	str	r0, [r7, #28]
          break;
 80069a6:	e01d      	b.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 80069a8:	f7fe ffca 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 80069ac:	61f8      	str	r0, [r7, #28]
          break;
 80069ae:	e019      	b.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069b0:	4b60      	ldr	r3, [pc, #384]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069bc:	d10f      	bne.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 80069be:	4b5f      	ldr	r3, [pc, #380]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069c0:	61fb      	str	r3, [r7, #28]
          break;
 80069c2:	e00c      	b.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80069c4:	4b5b      	ldr	r3, [pc, #364]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80069c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d107      	bne.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 80069d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069d6:	61fb      	str	r3, [r7, #28]
          break;
 80069d8:	e003      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 80069da:	bf00      	nop
 80069dc:	e3a8      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80069de:	bf00      	nop
 80069e0:	e3a6      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80069e2:	bf00      	nop
        break;
 80069e4:	e3a4      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80069e6:	4b53      	ldr	r3, [pc, #332]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80069e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ec:	f003 030c 	and.w	r3, r3, #12
 80069f0:	60fb      	str	r3, [r7, #12]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2b0c      	cmp	r3, #12
 80069f6:	d83a      	bhi.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80069f8:	a201      	add	r2, pc, #4	; (adr r2, 8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 80069fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fe:	bf00      	nop
 8006a00:	08006a35 	.word	0x08006a35
 8006a04:	08006a6f 	.word	0x08006a6f
 8006a08:	08006a6f 	.word	0x08006a6f
 8006a0c:	08006a6f 	.word	0x08006a6f
 8006a10:	08006a3d 	.word	0x08006a3d
 8006a14:	08006a6f 	.word	0x08006a6f
 8006a18:	08006a6f 	.word	0x08006a6f
 8006a1c:	08006a6f 	.word	0x08006a6f
 8006a20:	08006a45 	.word	0x08006a45
 8006a24:	08006a6f 	.word	0x08006a6f
 8006a28:	08006a6f 	.word	0x08006a6f
 8006a2c:	08006a6f 	.word	0x08006a6f
 8006a30:	08006a59 	.word	0x08006a59
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a34:	f7ff f81c 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 8006a38:	61f8      	str	r0, [r7, #28]
          break;
 8006a3a:	e01d      	b.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8006a3c:	f7fe ff80 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8006a40:	61f8      	str	r0, [r7, #28]
          break;
 8006a42:	e019      	b.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a44:	4b3b      	ldr	r3, [pc, #236]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a50:	d10f      	bne.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8006a52:	4b3a      	ldr	r3, [pc, #232]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a54:	61fb      	str	r3, [r7, #28]
          break;
 8006a56:	e00c      	b.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a58:	4b36      	ldr	r3, [pc, #216]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a5e:	f003 0302 	and.w	r3, r3, #2
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d107      	bne.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8006a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a6a:	61fb      	str	r3, [r7, #28]
          break;
 8006a6c:	e003      	b.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8006a6e:	bf00      	nop
 8006a70:	e35e      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a72:	bf00      	nop
 8006a74:	e35c      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a76:	bf00      	nop
        break;
 8006a78:	e35a      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006a7a:	4b2e      	ldr	r3, [pc, #184]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a84:	60fb      	str	r3, [r7, #12]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b30      	cmp	r3, #48	; 0x30
 8006a8a:	d021      	beq.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2b30      	cmp	r3, #48	; 0x30
 8006a90:	d829      	bhi.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2b20      	cmp	r3, #32
 8006a96:	d011      	beq.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2b20      	cmp	r3, #32
 8006a9c:	d823      	bhi.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d003      	beq.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b10      	cmp	r3, #16
 8006aa8:	d004      	beq.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8006aaa:	e01c      	b.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006aac:	f7fe ffe0 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 8006ab0:	61f8      	str	r0, [r7, #28]
          break;
 8006ab2:	e01d      	b.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ab4:	f7fe ff44 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8006ab8:	61f8      	str	r0, [r7, #28]
          break;
 8006aba:	e019      	b.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006abc:	4b1d      	ldr	r3, [pc, #116]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ac8:	d10f      	bne.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8006aca:	4b1c      	ldr	r3, [pc, #112]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006acc:	61fb      	str	r3, [r7, #28]
          break;
 8006ace:	e00c      	b.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006ad0:	4b18      	ldr	r3, [pc, #96]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d107      	bne.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8006ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ae2:	61fb      	str	r3, [r7, #28]
          break;
 8006ae4:	e003      	b.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8006ae6:	bf00      	nop
 8006ae8:	e322      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006aea:	bf00      	nop
 8006aec:	e320      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006aee:	bf00      	nop
        break;
 8006af0:	e31e      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006af2:	4b10      	ldr	r3, [pc, #64]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006afc:	60fb      	str	r3, [r7, #12]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2bc0      	cmp	r3, #192	; 0xc0
 8006b02:	d027      	beq.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2bc0      	cmp	r3, #192	; 0xc0
 8006b08:	d82f      	bhi.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2b80      	cmp	r3, #128	; 0x80
 8006b0e:	d017      	beq.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2b80      	cmp	r3, #128	; 0x80
 8006b14:	d829      	bhi.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2b40      	cmp	r3, #64	; 0x40
 8006b20:	d004      	beq.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8006b22:	e022      	b.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b24:	f7fe ffa4 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 8006b28:	61f8      	str	r0, [r7, #28]
          break;
 8006b2a:	e023      	b.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8006b2c:	f7fe ff08 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8006b30:	61f8      	str	r0, [r7, #28]
          break;
 8006b32:	e01f      	b.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8006b34:	40021000 	.word	0x40021000
 8006b38:	02dc6c00 	.word	0x02dc6c00
 8006b3c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b40:	4b9b      	ldr	r3, [pc, #620]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b4c:	d10f      	bne.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8006b4e:	4b99      	ldr	r3, [pc, #612]	; (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006b50:	61fb      	str	r3, [r7, #28]
          break;
 8006b52:	e00c      	b.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b54:	4b96      	ldr	r3, [pc, #600]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d107      	bne.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8006b62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b66:	61fb      	str	r3, [r7, #28]
          break;
 8006b68:	e003      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8006b6a:	bf00      	nop
 8006b6c:	e2e0      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006b6e:	bf00      	nop
 8006b70:	e2de      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006b72:	bf00      	nop
        break;
 8006b74:	e2dc      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006b76:	4b8e      	ldr	r3, [pc, #568]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b80:	60fb      	str	r3, [r7, #12]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b88:	d025      	beq.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b90:	d82c      	bhi.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b98:	d013      	beq.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ba0:	d824      	bhi.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d004      	beq.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bae:	d004      	beq.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8006bb0:	e01c      	b.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006bb2:	f7fe ff5d 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 8006bb6:	61f8      	str	r0, [r7, #28]
          break;
 8006bb8:	e01d      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006bba:	f7fe fec1 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8006bbe:	61f8      	str	r0, [r7, #28]
          break;
 8006bc0:	e019      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006bc2:	4b7b      	ldr	r3, [pc, #492]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bce:	d10f      	bne.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8006bd0:	4b78      	ldr	r3, [pc, #480]	; (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006bd2:	61fb      	str	r3, [r7, #28]
          break;
 8006bd4:	e00c      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006bd6:	4b76      	ldr	r3, [pc, #472]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d107      	bne.n	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8006be4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006be8:	61fb      	str	r3, [r7, #28]
          break;
 8006bea:	e003      	b.n	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8006bec:	bf00      	nop
 8006bee:	e29f      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006bf0:	bf00      	nop
 8006bf2:	e29d      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006bf4:	bf00      	nop
        break;
 8006bf6:	e29b      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006bf8:	4b6d      	ldr	r3, [pc, #436]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bfe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c0a:	d025      	beq.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c12:	d82c      	bhi.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c1a:	d013      	beq.n	8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c22:	d824      	bhi.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d004      	beq.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c30:	d004      	beq.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8006c32:	e01c      	b.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c34:	f7fe ff1c 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 8006c38:	61f8      	str	r0, [r7, #28]
          break;
 8006c3a:	e01d      	b.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c3c:	f7fe fe80 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8006c40:	61f8      	str	r0, [r7, #28]
          break;
 8006c42:	e019      	b.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c44:	4b5a      	ldr	r3, [pc, #360]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c50:	d10f      	bne.n	8006c72 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8006c52:	4b58      	ldr	r3, [pc, #352]	; (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006c54:	61fb      	str	r3, [r7, #28]
          break;
 8006c56:	e00c      	b.n	8006c72 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c58:	4b55      	ldr	r3, [pc, #340]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c5e:	f003 0302 	and.w	r3, r3, #2
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d107      	bne.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8006c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c6a:	61fb      	str	r3, [r7, #28]
          break;
 8006c6c:	e003      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8006c6e:	bf00      	nop
 8006c70:	e25e      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006c72:	bf00      	nop
 8006c74:	e25c      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006c76:	bf00      	nop
        break;
 8006c78:	e25a      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006c7a:	4b4d      	ldr	r3, [pc, #308]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c84:	60fb      	str	r3, [r7, #12]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c8c:	d007      	beq.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c94:	d12f      	bne.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c96:	f7fe fe53 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8006c9a:	61f8      	str	r0, [r7, #28]
          break;
 8006c9c:	e02e      	b.n	8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8006c9e:	4b44      	ldr	r3, [pc, #272]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ca6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006caa:	d126      	bne.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8006cac:	4b40      	ldr	r3, [pc, #256]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d020      	beq.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006cb8:	4b3d      	ldr	r3, [pc, #244]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	0a1b      	lsrs	r3, r3, #8
 8006cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cc2:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	fb03 f202 	mul.w	r2, r3, r2
 8006ccc:	4b38      	ldr	r3, [pc, #224]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	091b      	lsrs	r3, r3, #4
 8006cd2:	f003 030f 	and.w	r3, r3, #15
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cdc:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006cde:	4b34      	ldr	r3, [pc, #208]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	0e5b      	lsrs	r3, r3, #25
 8006ce4:	f003 0303 	and.w	r3, r3, #3
 8006ce8:	3301      	adds	r3, #1
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf2:	61fb      	str	r3, [r7, #28]
          break;
 8006cf4:	e001      	b.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8006cf6:	bf00      	nop
 8006cf8:	e21a      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006cfa:	bf00      	nop
        break;
 8006cfc:	e218      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006cfe:	4b2c      	ldr	r3, [pc, #176]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d04:	f003 0304 	and.w	r3, r3, #4
 8006d08:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d103      	bne.n	8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006d10:	f7fe fec4 	bl	8005a9c <HAL_RCC_GetPCLK2Freq>
 8006d14:	61f8      	str	r0, [r7, #28]
        break;
 8006d16:	e20b      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d18:	f7fe fe12 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8006d1c:	61f8      	str	r0, [r7, #28]
        break;
 8006d1e:	e207      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8006d20:	4b23      	ldr	r3, [pc, #140]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d26:	f003 0318 	and.w	r3, r3, #24
 8006d2a:	60fb      	str	r3, [r7, #12]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2b10      	cmp	r3, #16
 8006d30:	d010      	beq.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2b10      	cmp	r3, #16
 8006d36:	d834      	bhi.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	d024      	beq.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8006d44:	e02d      	b.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006d46:	69b9      	ldr	r1, [r7, #24]
 8006d48:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006d4c:	f000 fbe2 	bl	8007514 <RCCEx_GetSAIxPeriphCLKFreq>
 8006d50:	61f8      	str	r0, [r7, #28]
          break;
 8006d52:	e02b      	b.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006d54:	4b16      	ldr	r3, [pc, #88]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 0302 	and.w	r3, r3, #2
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d122      	bne.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006d60:	4b13      	ldr	r3, [pc, #76]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0308 	and.w	r3, r3, #8
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d005      	beq.n	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8006d6c:	4b10      	ldr	r3, [pc, #64]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	091b      	lsrs	r3, r3, #4
 8006d72:	f003 030f 	and.w	r3, r3, #15
 8006d76:	e005      	b.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8006d78:	4b0d      	ldr	r3, [pc, #52]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d7e:	0a1b      	lsrs	r3, r3, #8
 8006d80:	f003 030f 	and.w	r3, r3, #15
 8006d84:	4a0c      	ldr	r2, [pc, #48]	; (8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d8a:	61fb      	str	r3, [r7, #28]
          break;
 8006d8c:	e00b      	b.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d8e:	4b08      	ldr	r3, [pc, #32]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d9a:	d106      	bne.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8006d9c:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006d9e:	61fb      	str	r3, [r7, #28]
          break;
 8006da0:	e003      	b.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8006da2:	bf00      	nop
 8006da4:	e1c4      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006da6:	bf00      	nop
 8006da8:	e1c2      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006daa:	bf00      	nop
        break;
 8006dac:	e1c0      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8006dae:	bf00      	nop
 8006db0:	40021000 	.word	0x40021000
 8006db4:	00f42400 	.word	0x00f42400
 8006db8:	080141f0 	.word	0x080141f0
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006dbc:	4b96      	ldr	r3, [pc, #600]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006dc6:	60fb      	str	r3, [r7, #12]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dce:	d013      	beq.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dd6:	d819      	bhi.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d004      	beq.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006de4:	d004      	beq.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8006de6:	e011      	b.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006de8:	f7fe fe42 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 8006dec:	61f8      	str	r0, [r7, #28]
          break;
 8006dee:	e010      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8006df0:	f7fe fda6 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8006df4:	61f8      	str	r0, [r7, #28]
          break;
 8006df6:	e00c      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006df8:	4b87      	ldr	r3, [pc, #540]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e04:	d104      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8006e06:	4b85      	ldr	r3, [pc, #532]	; (800701c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006e08:	61fb      	str	r3, [r7, #28]
          break;
 8006e0a:	e001      	b.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8006e0c:	bf00      	nop
 8006e0e:	e18f      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006e10:	bf00      	nop
        break;
 8006e12:	e18d      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006e14:	4b80      	ldr	r3, [pc, #512]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006e1e:	60fb      	str	r3, [r7, #12]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e26:	d013      	beq.n	8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e2e:	d819      	bhi.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d004      	beq.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e3c:	d004      	beq.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8006e3e:	e011      	b.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e40:	f7fe fe16 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 8006e44:	61f8      	str	r0, [r7, #28]
          break;
 8006e46:	e010      	b.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006e48:	f7fe fd7a 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8006e4c:	61f8      	str	r0, [r7, #28]
          break;
 8006e4e:	e00c      	b.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e50:	4b71      	ldr	r3, [pc, #452]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e5c:	d104      	bne.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8006e5e:	4b6f      	ldr	r3, [pc, #444]	; (800701c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006e60:	61fb      	str	r3, [r7, #28]
          break;
 8006e62:	e001      	b.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8006e64:	bf00      	nop
 8006e66:	e163      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006e68:	bf00      	nop
        break;
 8006e6a:	e161      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006e6c:	4b6a      	ldr	r3, [pc, #424]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e76:	60fb      	str	r3, [r7, #12]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e7e:	d013      	beq.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e86:	d819      	bhi.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d004      	beq.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e94:	d004      	beq.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8006e96:	e011      	b.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e98:	f7fe fdea 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 8006e9c:	61f8      	str	r0, [r7, #28]
          break;
 8006e9e:	e010      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ea0:	f7fe fd4e 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8006ea4:	61f8      	str	r0, [r7, #28]
          break;
 8006ea6:	e00c      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ea8:	4b5b      	ldr	r3, [pc, #364]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eb4:	d104      	bne.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8006eb6:	4b59      	ldr	r3, [pc, #356]	; (800701c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006eb8:	61fb      	str	r3, [r7, #28]
          break;
 8006eba:	e001      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8006ebc:	bf00      	nop
 8006ebe:	e137      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006ec0:	bf00      	nop
        break;
 8006ec2:	e135      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006ec4:	4b54      	ldr	r3, [pc, #336]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006ec6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006eca:	f003 0303 	and.w	r3, r3, #3
 8006ece:	60fb      	str	r3, [r7, #12]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d011      	beq.n	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d818      	bhi.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d003      	beq.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d004      	beq.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8006ee8:	e011      	b.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006eea:	f7fe fdc1 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 8006eee:	61f8      	str	r0, [r7, #28]
          break;
 8006ef0:	e010      	b.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ef2:	f7fe fd25 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8006ef6:	61f8      	str	r0, [r7, #28]
          break;
 8006ef8:	e00c      	b.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006efa:	4b47      	ldr	r3, [pc, #284]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f06:	d104      	bne.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8006f08:	4b44      	ldr	r3, [pc, #272]	; (800701c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006f0a:	61fb      	str	r3, [r7, #28]
          break;
 8006f0c:	e001      	b.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8006f0e:	bf00      	nop
 8006f10:	e10e      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006f12:	bf00      	nop
        break;
 8006f14:	e10c      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006f16:	4b40      	ldr	r3, [pc, #256]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f1c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006f20:	60fb      	str	r3, [r7, #12]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006f28:	d02c      	beq.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006f30:	d833      	bhi.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006f38:	d01a      	beq.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006f40:	d82b      	bhi.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d004      	beq.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f4e:	d004      	beq.n	8006f5a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8006f50:	e023      	b.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f52:	f7fe fd8d 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 8006f56:	61f8      	str	r0, [r7, #28]
          break;
 8006f58:	e026      	b.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006f5a:	4b2f      	ldr	r3, [pc, #188]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f60:	f003 0302 	and.w	r3, r3, #2
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d11a      	bne.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8006f68:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006f6c:	61fb      	str	r3, [r7, #28]
          break;
 8006f6e:	e016      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f70:	4b29      	ldr	r3, [pc, #164]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f7c:	d111      	bne.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8006f7e:	4b27      	ldr	r3, [pc, #156]	; (800701c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006f80:	61fb      	str	r3, [r7, #28]
          break;
 8006f82:	e00e      	b.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006f84:	4b24      	ldr	r3, [pc, #144]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f8a:	f003 0302 	and.w	r3, r3, #2
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d109      	bne.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8006f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f96:	61fb      	str	r3, [r7, #28]
          break;
 8006f98:	e005      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8006f9a:	bf00      	nop
 8006f9c:	e0c8      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006f9e:	bf00      	nop
 8006fa0:	e0c6      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006fa2:	bf00      	nop
 8006fa4:	e0c4      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006fa6:	bf00      	nop
        break;
 8006fa8:	e0c2      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006faa:	4b1b      	ldr	r3, [pc, #108]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fb0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006fb4:	60fb      	str	r3, [r7, #12]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006fbc:	d030      	beq.n	8007020 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006fc4:	d837      	bhi.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fcc:	d01a      	beq.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fd4:	d82f      	bhi.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d004      	beq.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fe2:	d004      	beq.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8006fe4:	e027      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006fe6:	f7fe fd43 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 8006fea:	61f8      	str	r0, [r7, #28]
          break;
 8006fec:	e02a      	b.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006fee:	4b0a      	ldr	r3, [pc, #40]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ff4:	f003 0302 	and.w	r3, r3, #2
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d11e      	bne.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8006ffc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007000:	61fb      	str	r3, [r7, #28]
          break;
 8007002:	e01a      	b.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007004:	4b04      	ldr	r3, [pc, #16]	; (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800700c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007010:	d115      	bne.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8007012:	4b02      	ldr	r3, [pc, #8]	; (800701c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007014:	61fb      	str	r3, [r7, #28]
          break;
 8007016:	e012      	b.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8007018:	40021000 	.word	0x40021000
 800701c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007020:	4b46      	ldr	r3, [pc, #280]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007026:	f003 0302 	and.w	r3, r3, #2
 800702a:	2b02      	cmp	r3, #2
 800702c:	d109      	bne.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 800702e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007032:	61fb      	str	r3, [r7, #28]
          break;
 8007034:	e005      	b.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8007036:	bf00      	nop
 8007038:	e07a      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800703a:	bf00      	nop
 800703c:	e078      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800703e:	bf00      	nop
 8007040:	e076      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007042:	bf00      	nop
        break;
 8007044:	e074      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007046:	4b3d      	ldr	r3, [pc, #244]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007048:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800704c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007050:	60fb      	str	r3, [r7, #12]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007058:	d02c      	beq.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007060:	d855      	bhi.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d004      	beq.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800706e:	d004      	beq.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8007070:	e04d      	b.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8007072:	f7fe fc65 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8007076:	61f8      	str	r0, [r7, #28]
          break;
 8007078:	e04e      	b.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800707a:	4b30      	ldr	r3, [pc, #192]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b02      	cmp	r3, #2
 8007084:	d145      	bne.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007086:	4b2d      	ldr	r3, [pc, #180]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0308 	and.w	r3, r3, #8
 800708e:	2b00      	cmp	r3, #0
 8007090:	d005      	beq.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8007092:	4b2a      	ldr	r3, [pc, #168]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	091b      	lsrs	r3, r3, #4
 8007098:	f003 030f 	and.w	r3, r3, #15
 800709c:	e005      	b.n	80070aa <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800709e:	4b27      	ldr	r3, [pc, #156]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80070a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070a4:	0a1b      	lsrs	r3, r3, #8
 80070a6:	f003 030f 	and.w	r3, r3, #15
 80070aa:	4a25      	ldr	r2, [pc, #148]	; (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 80070ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070b0:	61fb      	str	r3, [r7, #28]
          break;
 80070b2:	e02e      	b.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80070b4:	4b21      	ldr	r3, [pc, #132]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070c0:	d129      	bne.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80070c2:	4b1e      	ldr	r3, [pc, #120]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070ce:	d122      	bne.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80070d0:	4b1a      	ldr	r3, [pc, #104]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	0a1b      	lsrs	r3, r3, #8
 80070d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070da:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	fb03 f202 	mul.w	r2, r3, r2
 80070e4:	4b15      	ldr	r3, [pc, #84]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	091b      	lsrs	r3, r3, #4
 80070ea:	f003 030f 	and.w	r3, r3, #15
 80070ee:	3301      	adds	r3, #1
 80070f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80070f6:	4b11      	ldr	r3, [pc, #68]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	0d5b      	lsrs	r3, r3, #21
 80070fc:	f003 0303 	and.w	r3, r3, #3
 8007100:	3301      	adds	r3, #1
 8007102:	005b      	lsls	r3, r3, #1
 8007104:	69ba      	ldr	r2, [r7, #24]
 8007106:	fbb2 f3f3 	udiv	r3, r2, r3
 800710a:	61fb      	str	r3, [r7, #28]
          break;
 800710c:	e003      	b.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 800710e:	bf00      	nop
 8007110:	e00e      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007112:	bf00      	nop
 8007114:	e00c      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007116:	bf00      	nop
        break;
 8007118:	e00a      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800711a:	bf00      	nop
 800711c:	e008      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800711e:	bf00      	nop
 8007120:	e006      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007122:	bf00      	nop
 8007124:	e004      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007126:	bf00      	nop
 8007128:	e002      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800712a:	bf00      	nop
 800712c:	e000      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800712e:	bf00      	nop
    }
  }

  return(frequency);
 8007130:	69fb      	ldr	r3, [r7, #28]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3720      	adds	r7, #32
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	40021000 	.word	0x40021000
 8007140:	080141f0 	.word	0x080141f0

08007144 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800714e:	2300      	movs	r3, #0
 8007150:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007152:	4b72      	ldr	r3, [pc, #456]	; (800731c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	f003 0303 	and.w	r3, r3, #3
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00e      	beq.n	800717c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800715e:	4b6f      	ldr	r3, [pc, #444]	; (800731c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	f003 0203 	and.w	r2, r3, #3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	429a      	cmp	r2, r3
 800716c:	d103      	bne.n	8007176 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
       ||
 8007172:	2b00      	cmp	r3, #0
 8007174:	d142      	bne.n	80071fc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	73fb      	strb	r3, [r7, #15]
 800717a:	e03f      	b.n	80071fc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b03      	cmp	r3, #3
 8007182:	d018      	beq.n	80071b6 <RCCEx_PLLSAI1_Config+0x72>
 8007184:	2b03      	cmp	r3, #3
 8007186:	d825      	bhi.n	80071d4 <RCCEx_PLLSAI1_Config+0x90>
 8007188:	2b01      	cmp	r3, #1
 800718a:	d002      	beq.n	8007192 <RCCEx_PLLSAI1_Config+0x4e>
 800718c:	2b02      	cmp	r3, #2
 800718e:	d009      	beq.n	80071a4 <RCCEx_PLLSAI1_Config+0x60>
 8007190:	e020      	b.n	80071d4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007192:	4b62      	ldr	r3, [pc, #392]	; (800731c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	2b00      	cmp	r3, #0
 800719c:	d11d      	bne.n	80071da <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071a2:	e01a      	b.n	80071da <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80071a4:	4b5d      	ldr	r3, [pc, #372]	; (800731c <RCCEx_PLLSAI1_Config+0x1d8>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d116      	bne.n	80071de <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071b4:	e013      	b.n	80071de <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80071b6:	4b59      	ldr	r3, [pc, #356]	; (800731c <RCCEx_PLLSAI1_Config+0x1d8>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10f      	bne.n	80071e2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80071c2:	4b56      	ldr	r3, [pc, #344]	; (800731c <RCCEx_PLLSAI1_Config+0x1d8>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d109      	bne.n	80071e2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80071d2:	e006      	b.n	80071e2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	73fb      	strb	r3, [r7, #15]
      break;
 80071d8:	e004      	b.n	80071e4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80071da:	bf00      	nop
 80071dc:	e002      	b.n	80071e4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80071de:	bf00      	nop
 80071e0:	e000      	b.n	80071e4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80071e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d108      	bne.n	80071fc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80071ea:	4b4c      	ldr	r3, [pc, #304]	; (800731c <RCCEx_PLLSAI1_Config+0x1d8>)
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	f023 0203 	bic.w	r2, r3, #3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4949      	ldr	r1, [pc, #292]	; (800731c <RCCEx_PLLSAI1_Config+0x1d8>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f040 8086 	bne.w	8007310 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007204:	4b45      	ldr	r3, [pc, #276]	; (800731c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a44      	ldr	r2, [pc, #272]	; (800731c <RCCEx_PLLSAI1_Config+0x1d8>)
 800720a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800720e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007210:	f7fb fc22 	bl	8002a58 <HAL_GetTick>
 8007214:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007216:	e009      	b.n	800722c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007218:	f7fb fc1e 	bl	8002a58 <HAL_GetTick>
 800721c:	4602      	mov	r2, r0
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	2b02      	cmp	r3, #2
 8007224:	d902      	bls.n	800722c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	73fb      	strb	r3, [r7, #15]
        break;
 800722a:	e005      	b.n	8007238 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800722c:	4b3b      	ldr	r3, [pc, #236]	; (800731c <RCCEx_PLLSAI1_Config+0x1d8>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1ef      	bne.n	8007218 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007238:	7bfb      	ldrb	r3, [r7, #15]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d168      	bne.n	8007310 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d113      	bne.n	800726c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007244:	4b35      	ldr	r3, [pc, #212]	; (800731c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007246:	691a      	ldr	r2, [r3, #16]
 8007248:	4b35      	ldr	r3, [pc, #212]	; (8007320 <RCCEx_PLLSAI1_Config+0x1dc>)
 800724a:	4013      	ands	r3, r2
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	6892      	ldr	r2, [r2, #8]
 8007250:	0211      	lsls	r1, r2, #8
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	68d2      	ldr	r2, [r2, #12]
 8007256:	06d2      	lsls	r2, r2, #27
 8007258:	4311      	orrs	r1, r2
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	6852      	ldr	r2, [r2, #4]
 800725e:	3a01      	subs	r2, #1
 8007260:	0112      	lsls	r2, r2, #4
 8007262:	430a      	orrs	r2, r1
 8007264:	492d      	ldr	r1, [pc, #180]	; (800731c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007266:	4313      	orrs	r3, r2
 8007268:	610b      	str	r3, [r1, #16]
 800726a:	e02d      	b.n	80072c8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d115      	bne.n	800729e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007272:	4b2a      	ldr	r3, [pc, #168]	; (800731c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007274:	691a      	ldr	r2, [r3, #16]
 8007276:	4b2b      	ldr	r3, [pc, #172]	; (8007324 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007278:	4013      	ands	r3, r2
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	6892      	ldr	r2, [r2, #8]
 800727e:	0211      	lsls	r1, r2, #8
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	6912      	ldr	r2, [r2, #16]
 8007284:	0852      	lsrs	r2, r2, #1
 8007286:	3a01      	subs	r2, #1
 8007288:	0552      	lsls	r2, r2, #21
 800728a:	4311      	orrs	r1, r2
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	6852      	ldr	r2, [r2, #4]
 8007290:	3a01      	subs	r2, #1
 8007292:	0112      	lsls	r2, r2, #4
 8007294:	430a      	orrs	r2, r1
 8007296:	4921      	ldr	r1, [pc, #132]	; (800731c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007298:	4313      	orrs	r3, r2
 800729a:	610b      	str	r3, [r1, #16]
 800729c:	e014      	b.n	80072c8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800729e:	4b1f      	ldr	r3, [pc, #124]	; (800731c <RCCEx_PLLSAI1_Config+0x1d8>)
 80072a0:	691a      	ldr	r2, [r3, #16]
 80072a2:	4b21      	ldr	r3, [pc, #132]	; (8007328 <RCCEx_PLLSAI1_Config+0x1e4>)
 80072a4:	4013      	ands	r3, r2
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	6892      	ldr	r2, [r2, #8]
 80072aa:	0211      	lsls	r1, r2, #8
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	6952      	ldr	r2, [r2, #20]
 80072b0:	0852      	lsrs	r2, r2, #1
 80072b2:	3a01      	subs	r2, #1
 80072b4:	0652      	lsls	r2, r2, #25
 80072b6:	4311      	orrs	r1, r2
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	6852      	ldr	r2, [r2, #4]
 80072bc:	3a01      	subs	r2, #1
 80072be:	0112      	lsls	r2, r2, #4
 80072c0:	430a      	orrs	r2, r1
 80072c2:	4916      	ldr	r1, [pc, #88]	; (800731c <RCCEx_PLLSAI1_Config+0x1d8>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80072c8:	4b14      	ldr	r3, [pc, #80]	; (800731c <RCCEx_PLLSAI1_Config+0x1d8>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a13      	ldr	r2, [pc, #76]	; (800731c <RCCEx_PLLSAI1_Config+0x1d8>)
 80072ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80072d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072d4:	f7fb fbc0 	bl	8002a58 <HAL_GetTick>
 80072d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80072da:	e009      	b.n	80072f0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80072dc:	f7fb fbbc 	bl	8002a58 <HAL_GetTick>
 80072e0:	4602      	mov	r2, r0
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d902      	bls.n	80072f0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	73fb      	strb	r3, [r7, #15]
          break;
 80072ee:	e005      	b.n	80072fc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80072f0:	4b0a      	ldr	r3, [pc, #40]	; (800731c <RCCEx_PLLSAI1_Config+0x1d8>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d0ef      	beq.n	80072dc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80072fc:	7bfb      	ldrb	r3, [r7, #15]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d106      	bne.n	8007310 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007302:	4b06      	ldr	r3, [pc, #24]	; (800731c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007304:	691a      	ldr	r2, [r3, #16]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	4904      	ldr	r1, [pc, #16]	; (800731c <RCCEx_PLLSAI1_Config+0x1d8>)
 800730c:	4313      	orrs	r3, r2
 800730e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007310:	7bfb      	ldrb	r3, [r7, #15]
}
 8007312:	4618      	mov	r0, r3
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	40021000 	.word	0x40021000
 8007320:	07ff800f 	.word	0x07ff800f
 8007324:	ff9f800f 	.word	0xff9f800f
 8007328:	f9ff800f 	.word	0xf9ff800f

0800732c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007336:	2300      	movs	r3, #0
 8007338:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800733a:	4b72      	ldr	r3, [pc, #456]	; (8007504 <RCCEx_PLLSAI2_Config+0x1d8>)
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	f003 0303 	and.w	r3, r3, #3
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00e      	beq.n	8007364 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007346:	4b6f      	ldr	r3, [pc, #444]	; (8007504 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f003 0203 	and.w	r2, r3, #3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	429a      	cmp	r2, r3
 8007354:	d103      	bne.n	800735e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
       ||
 800735a:	2b00      	cmp	r3, #0
 800735c:	d142      	bne.n	80073e4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	73fb      	strb	r3, [r7, #15]
 8007362:	e03f      	b.n	80073e4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b03      	cmp	r3, #3
 800736a:	d018      	beq.n	800739e <RCCEx_PLLSAI2_Config+0x72>
 800736c:	2b03      	cmp	r3, #3
 800736e:	d825      	bhi.n	80073bc <RCCEx_PLLSAI2_Config+0x90>
 8007370:	2b01      	cmp	r3, #1
 8007372:	d002      	beq.n	800737a <RCCEx_PLLSAI2_Config+0x4e>
 8007374:	2b02      	cmp	r3, #2
 8007376:	d009      	beq.n	800738c <RCCEx_PLLSAI2_Config+0x60>
 8007378:	e020      	b.n	80073bc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800737a:	4b62      	ldr	r3, [pc, #392]	; (8007504 <RCCEx_PLLSAI2_Config+0x1d8>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0302 	and.w	r3, r3, #2
 8007382:	2b00      	cmp	r3, #0
 8007384:	d11d      	bne.n	80073c2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800738a:	e01a      	b.n	80073c2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800738c:	4b5d      	ldr	r3, [pc, #372]	; (8007504 <RCCEx_PLLSAI2_Config+0x1d8>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007394:	2b00      	cmp	r3, #0
 8007396:	d116      	bne.n	80073c6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800739c:	e013      	b.n	80073c6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800739e:	4b59      	ldr	r3, [pc, #356]	; (8007504 <RCCEx_PLLSAI2_Config+0x1d8>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10f      	bne.n	80073ca <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80073aa:	4b56      	ldr	r3, [pc, #344]	; (8007504 <RCCEx_PLLSAI2_Config+0x1d8>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d109      	bne.n	80073ca <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80073ba:	e006      	b.n	80073ca <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	73fb      	strb	r3, [r7, #15]
      break;
 80073c0:	e004      	b.n	80073cc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80073c2:	bf00      	nop
 80073c4:	e002      	b.n	80073cc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80073c6:	bf00      	nop
 80073c8:	e000      	b.n	80073cc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80073ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80073cc:	7bfb      	ldrb	r3, [r7, #15]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d108      	bne.n	80073e4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80073d2:	4b4c      	ldr	r3, [pc, #304]	; (8007504 <RCCEx_PLLSAI2_Config+0x1d8>)
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	f023 0203 	bic.w	r2, r3, #3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4949      	ldr	r1, [pc, #292]	; (8007504 <RCCEx_PLLSAI2_Config+0x1d8>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f040 8086 	bne.w	80074f8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80073ec:	4b45      	ldr	r3, [pc, #276]	; (8007504 <RCCEx_PLLSAI2_Config+0x1d8>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a44      	ldr	r2, [pc, #272]	; (8007504 <RCCEx_PLLSAI2_Config+0x1d8>)
 80073f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073f8:	f7fb fb2e 	bl	8002a58 <HAL_GetTick>
 80073fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80073fe:	e009      	b.n	8007414 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007400:	f7fb fb2a 	bl	8002a58 <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	2b02      	cmp	r3, #2
 800740c:	d902      	bls.n	8007414 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	73fb      	strb	r3, [r7, #15]
        break;
 8007412:	e005      	b.n	8007420 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007414:	4b3b      	ldr	r3, [pc, #236]	; (8007504 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1ef      	bne.n	8007400 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007420:	7bfb      	ldrb	r3, [r7, #15]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d168      	bne.n	80074f8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d113      	bne.n	8007454 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800742c:	4b35      	ldr	r3, [pc, #212]	; (8007504 <RCCEx_PLLSAI2_Config+0x1d8>)
 800742e:	695a      	ldr	r2, [r3, #20]
 8007430:	4b35      	ldr	r3, [pc, #212]	; (8007508 <RCCEx_PLLSAI2_Config+0x1dc>)
 8007432:	4013      	ands	r3, r2
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	6892      	ldr	r2, [r2, #8]
 8007438:	0211      	lsls	r1, r2, #8
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	68d2      	ldr	r2, [r2, #12]
 800743e:	06d2      	lsls	r2, r2, #27
 8007440:	4311      	orrs	r1, r2
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	6852      	ldr	r2, [r2, #4]
 8007446:	3a01      	subs	r2, #1
 8007448:	0112      	lsls	r2, r2, #4
 800744a:	430a      	orrs	r2, r1
 800744c:	492d      	ldr	r1, [pc, #180]	; (8007504 <RCCEx_PLLSAI2_Config+0x1d8>)
 800744e:	4313      	orrs	r3, r2
 8007450:	614b      	str	r3, [r1, #20]
 8007452:	e02d      	b.n	80074b0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d115      	bne.n	8007486 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800745a:	4b2a      	ldr	r3, [pc, #168]	; (8007504 <RCCEx_PLLSAI2_Config+0x1d8>)
 800745c:	695a      	ldr	r2, [r3, #20]
 800745e:	4b2b      	ldr	r3, [pc, #172]	; (800750c <RCCEx_PLLSAI2_Config+0x1e0>)
 8007460:	4013      	ands	r3, r2
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	6892      	ldr	r2, [r2, #8]
 8007466:	0211      	lsls	r1, r2, #8
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	6912      	ldr	r2, [r2, #16]
 800746c:	0852      	lsrs	r2, r2, #1
 800746e:	3a01      	subs	r2, #1
 8007470:	0552      	lsls	r2, r2, #21
 8007472:	4311      	orrs	r1, r2
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	6852      	ldr	r2, [r2, #4]
 8007478:	3a01      	subs	r2, #1
 800747a:	0112      	lsls	r2, r2, #4
 800747c:	430a      	orrs	r2, r1
 800747e:	4921      	ldr	r1, [pc, #132]	; (8007504 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007480:	4313      	orrs	r3, r2
 8007482:	614b      	str	r3, [r1, #20]
 8007484:	e014      	b.n	80074b0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007486:	4b1f      	ldr	r3, [pc, #124]	; (8007504 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007488:	695a      	ldr	r2, [r3, #20]
 800748a:	4b21      	ldr	r3, [pc, #132]	; (8007510 <RCCEx_PLLSAI2_Config+0x1e4>)
 800748c:	4013      	ands	r3, r2
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	6892      	ldr	r2, [r2, #8]
 8007492:	0211      	lsls	r1, r2, #8
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	6952      	ldr	r2, [r2, #20]
 8007498:	0852      	lsrs	r2, r2, #1
 800749a:	3a01      	subs	r2, #1
 800749c:	0652      	lsls	r2, r2, #25
 800749e:	4311      	orrs	r1, r2
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	6852      	ldr	r2, [r2, #4]
 80074a4:	3a01      	subs	r2, #1
 80074a6:	0112      	lsls	r2, r2, #4
 80074a8:	430a      	orrs	r2, r1
 80074aa:	4916      	ldr	r1, [pc, #88]	; (8007504 <RCCEx_PLLSAI2_Config+0x1d8>)
 80074ac:	4313      	orrs	r3, r2
 80074ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80074b0:	4b14      	ldr	r3, [pc, #80]	; (8007504 <RCCEx_PLLSAI2_Config+0x1d8>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a13      	ldr	r2, [pc, #76]	; (8007504 <RCCEx_PLLSAI2_Config+0x1d8>)
 80074b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074bc:	f7fb facc 	bl	8002a58 <HAL_GetTick>
 80074c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80074c2:	e009      	b.n	80074d8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80074c4:	f7fb fac8 	bl	8002a58 <HAL_GetTick>
 80074c8:	4602      	mov	r2, r0
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d902      	bls.n	80074d8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	73fb      	strb	r3, [r7, #15]
          break;
 80074d6:	e005      	b.n	80074e4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80074d8:	4b0a      	ldr	r3, [pc, #40]	; (8007504 <RCCEx_PLLSAI2_Config+0x1d8>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d0ef      	beq.n	80074c4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d106      	bne.n	80074f8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80074ea:	4b06      	ldr	r3, [pc, #24]	; (8007504 <RCCEx_PLLSAI2_Config+0x1d8>)
 80074ec:	695a      	ldr	r2, [r3, #20]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	4904      	ldr	r1, [pc, #16]	; (8007504 <RCCEx_PLLSAI2_Config+0x1d8>)
 80074f4:	4313      	orrs	r3, r2
 80074f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	40021000 	.word	0x40021000
 8007508:	07ff800f 	.word	0x07ff800f
 800750c:	ff9f800f 	.word	0xff9f800f
 8007510:	f9ff800f 	.word	0xf9ff800f

08007514 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8007514:	b480      	push	{r7}
 8007516:	b089      	sub	sp, #36	; 0x24
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800751e:	2300      	movs	r3, #0
 8007520:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8007526:	2300      	movs	r3, #0
 8007528:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007530:	d10b      	bne.n	800754a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007532:	4b7e      	ldr	r3, [pc, #504]	; (800772c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007534:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007538:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800753c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	2b60      	cmp	r3, #96	; 0x60
 8007542:	d112      	bne.n	800756a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007544:	4b7a      	ldr	r3, [pc, #488]	; (8007730 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8007546:	61fb      	str	r3, [r7, #28]
 8007548:	e00f      	b.n	800756a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007550:	d10b      	bne.n	800756a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007552:	4b76      	ldr	r3, [pc, #472]	; (800772c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007554:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007558:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800755c:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007564:	d101      	bne.n	800756a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8007566:	4b72      	ldr	r3, [pc, #456]	; (8007730 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8007568:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	2b00      	cmp	r3, #0
 800756e:	f040 80d6 	bne.w	800771e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	2b40      	cmp	r3, #64	; 0x40
 800757a:	d003      	beq.n	8007584 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007582:	d13b      	bne.n	80075fc <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007584:	4b69      	ldr	r3, [pc, #420]	; (800772c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800758c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007590:	f040 80c4 	bne.w	800771c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8007594:	4b65      	ldr	r3, [pc, #404]	; (800772c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 80bd 	beq.w	800771c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80075a2:	4b62      	ldr	r3, [pc, #392]	; (800772c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	091b      	lsrs	r3, r3, #4
 80075a8:	f003 030f 	and.w	r3, r3, #15
 80075ac:	3301      	adds	r3, #1
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80075b6:	4b5d      	ldr	r3, [pc, #372]	; (800772c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	0a1b      	lsrs	r3, r3, #8
 80075bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075c0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80075c2:	4b5a      	ldr	r3, [pc, #360]	; (800772c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	0edb      	lsrs	r3, r3, #27
 80075c8:	f003 031f 	and.w	r3, r3, #31
 80075cc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10a      	bne.n	80075ea <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80075d4:	4b55      	ldr	r3, [pc, #340]	; (800772c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d002      	beq.n	80075e6 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 80075e0:	2311      	movs	r3, #17
 80075e2:	617b      	str	r3, [r7, #20]
 80075e4:	e001      	b.n	80075ea <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 80075e6:	2307      	movs	r3, #7
 80075e8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	fb03 f202 	mul.w	r2, r3, r2
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075f8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80075fa:	e08f      	b.n	800771c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d13a      	bne.n	8007678 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8007602:	4b4a      	ldr	r3, [pc, #296]	; (800772c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800760a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800760e:	f040 8086 	bne.w	800771e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8007612:	4b46      	ldr	r3, [pc, #280]	; (800772c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d07f      	beq.n	800771e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800761e:	4b43      	ldr	r3, [pc, #268]	; (800772c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	091b      	lsrs	r3, r3, #4
 8007624:	f003 030f 	and.w	r3, r3, #15
 8007628:	3301      	adds	r3, #1
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007630:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007632:	4b3e      	ldr	r3, [pc, #248]	; (800772c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	0a1b      	lsrs	r3, r3, #8
 8007638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800763c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800763e:	4b3b      	ldr	r3, [pc, #236]	; (800772c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	0edb      	lsrs	r3, r3, #27
 8007644:	f003 031f 	and.w	r3, r3, #31
 8007648:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10a      	bne.n	8007666 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8007650:	4b36      	ldr	r3, [pc, #216]	; (800772c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d002      	beq.n	8007662 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800765c:	2311      	movs	r3, #17
 800765e:	617b      	str	r3, [r7, #20]
 8007660:	e001      	b.n	8007666 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8007662:	2307      	movs	r3, #7
 8007664:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	fb03 f202 	mul.w	r2, r3, r2
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	fbb2 f3f3 	udiv	r3, r2, r3
 8007674:	61fb      	str	r3, [r7, #28]
 8007676:	e052      	b.n	800771e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	2b80      	cmp	r3, #128	; 0x80
 800767c:	d003      	beq.n	8007686 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007684:	d109      	bne.n	800769a <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007686:	4b29      	ldr	r3, [pc, #164]	; (800772c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800768e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007692:	d144      	bne.n	800771e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8007694:	4b27      	ldr	r3, [pc, #156]	; (8007734 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8007696:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007698:	e041      	b.n	800771e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	2b20      	cmp	r3, #32
 800769e:	d003      	beq.n	80076a8 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076a6:	d13a      	bne.n	800771e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80076a8:	4b20      	ldr	r3, [pc, #128]	; (800772c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076b4:	d133      	bne.n	800771e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80076b6:	4b1d      	ldr	r3, [pc, #116]	; (800772c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d02d      	beq.n	800771e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80076c2:	4b1a      	ldr	r3, [pc, #104]	; (800772c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	091b      	lsrs	r3, r3, #4
 80076c8:	f003 030f 	and.w	r3, r3, #15
 80076cc:	3301      	adds	r3, #1
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80076d6:	4b15      	ldr	r3, [pc, #84]	; (800772c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	0a1b      	lsrs	r3, r3, #8
 80076dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076e0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80076e2:	4b12      	ldr	r3, [pc, #72]	; (800772c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	0edb      	lsrs	r3, r3, #27
 80076e8:	f003 031f 	and.w	r3, r3, #31
 80076ec:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10a      	bne.n	800770a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80076f4:	4b0d      	ldr	r3, [pc, #52]	; (800772c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80076f6:	695b      	ldr	r3, [r3, #20]
 80076f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d002      	beq.n	8007706 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8007700:	2311      	movs	r3, #17
 8007702:	617b      	str	r3, [r7, #20]
 8007704:	e001      	b.n	800770a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8007706:	2307      	movs	r3, #7
 8007708:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	fb03 f202 	mul.w	r2, r3, r2
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	fbb2 f3f3 	udiv	r3, r2, r3
 8007718:	61fb      	str	r3, [r7, #28]
 800771a:	e000      	b.n	800771e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800771c:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800771e:	69fb      	ldr	r3, [r7, #28]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3724      	adds	r7, #36	; 0x24
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	40021000 	.word	0x40021000
 8007730:	001fff68 	.word	0x001fff68
 8007734:	00f42400 	.word	0x00f42400

08007738 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b08a      	sub	sp, #40	; 0x28
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d101      	bne.n	800774a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e078      	b.n	800783c <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d105      	bne.n	8007762 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f7fa fe25 	bl	80023ac <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2203      	movs	r2, #3
 8007766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f86a 	bl	8007844 <HAL_SD_InitCard>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d001      	beq.n	800777a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e060      	b.n	800783c <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800777a:	f107 0308 	add.w	r3, r7, #8
 800777e:	4619      	mov	r1, r3
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fdcd 	bl	8008320 <HAL_SD_GetCardStatus>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d001      	beq.n	8007790 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e055      	b.n	800783c <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007790:	7e3b      	ldrb	r3, [r7, #24]
 8007792:	b2db      	uxtb	r3, r3
 8007794:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007796:	7e7b      	ldrb	r3, [r7, #25]
 8007798:	b2db      	uxtb	r3, r3
 800779a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d10a      	bne.n	80077ba <HAL_SD_Init+0x82>
 80077a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d102      	bne.n	80077b0 <HAL_SD_Init+0x78>
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d004      	beq.n	80077ba <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80077b8:	e00b      	b.n	80077d2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d104      	bne.n	80077cc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80077ca:	e002      	b.n	80077d2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	4619      	mov	r1, r3
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 fe83 	bl	80084e4 <HAL_SD_ConfigWideBusOperation>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d001      	beq.n	80077e8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e029      	b.n	800783c <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80077e8:	f7fb f936 	bl	8002a58 <HAL_GetTick>
 80077ec:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80077ee:	e014      	b.n	800781a <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 80077f0:	f7fb f932 	bl	8002a58 <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077fe:	d10c      	bne.n	800781a <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007806:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e010      	b.n	800783c <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 ff76 	bl	800870c <HAL_SD_GetCardState>
 8007820:	4603      	mov	r3, r0
 8007822:	2b04      	cmp	r3, #4
 8007824:	d1e4      	bne.n	80077f0 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3728      	adds	r7, #40	; 0x28
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007844:	b5b0      	push	{r4, r5, r7, lr}
 8007846:	b08e      	sub	sp, #56	; 0x38
 8007848:	af04      	add	r7, sp, #16
 800784a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800784c:	2300      	movs	r3, #0
 800784e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007850:	2300      	movs	r3, #0
 8007852:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007854:	2300      	movs	r3, #0
 8007856:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007858:	2300      	movs	r3, #0
 800785a:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800785c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007860:	f7fe fd4e 	bl	8006300 <HAL_RCCEx_GetPeriphCLKFreq>
 8007864:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007868:	2b00      	cmp	r3, #0
 800786a:	d109      	bne.n	8007880 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800787a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e079      	b.n	8007974 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	0a1b      	lsrs	r3, r3, #8
 8007884:	4a3d      	ldr	r2, [pc, #244]	; (800797c <HAL_SD_InitCard+0x138>)
 8007886:	fba2 2303 	umull	r2, r3, r2, r3
 800788a:	091b      	lsrs	r3, r3, #4
 800788c:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d107      	bne.n	80078ac <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f042 0210 	orr.w	r2, r2, #16
 80078aa:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681d      	ldr	r5, [r3, #0]
 80078b0:	466c      	mov	r4, sp
 80078b2:	f107 0314 	add.w	r3, r7, #20
 80078b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80078ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80078be:	f107 0308 	add.w	r3, r7, #8
 80078c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80078c4:	4628      	mov	r0, r5
 80078c6:	f005 f8ad 	bl	800ca24 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4618      	mov	r0, r3
 80078d0:	f005 f8f0 	bl	800cab4 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	005b      	lsls	r3, r3, #1
 80078d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078da:	fbb2 f3f3 	udiv	r3, r2, r3
 80078de:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80078e0:	4a27      	ldr	r2, [pc, #156]	; (8007980 <HAL_SD_InitCard+0x13c>)
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e8:	3301      	adds	r3, #1
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7fb f8c0 	bl	8002a70 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 ffeb 	bl	80088cc <SD_PowerON>
 80078f6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078f8:	6a3b      	ldr	r3, [r7, #32]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00b      	beq.n	8007916 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	431a      	orrs	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e02e      	b.n	8007974 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 ff18 	bl	800874c <SD_InitCard>
 800791c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800791e:	6a3b      	ldr	r3, [r7, #32]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00b      	beq.n	800793c <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007930:	6a3b      	ldr	r3, [r7, #32]
 8007932:	431a      	orrs	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	e01b      	b.n	8007974 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007944:	4618      	mov	r0, r3
 8007946:	f005 f94b 	bl	800cbe0 <SDMMC_CmdBlockLength>
 800794a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800794c:	6a3b      	ldr	r3, [r7, #32]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00f      	beq.n	8007972 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a0b      	ldr	r2, [pc, #44]	; (8007984 <HAL_SD_InitCard+0x140>)
 8007958:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	431a      	orrs	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e000      	b.n	8007974 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3728      	adds	r7, #40	; 0x28
 8007978:	46bd      	mov	sp, r7
 800797a:	bdb0      	pop	{r4, r5, r7, pc}
 800797c:	014f8b59 	.word	0x014f8b59
 8007980:	00012110 	.word	0x00012110
 8007984:	1fe00fff 	.word	0x1fe00fff

08007988 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b092      	sub	sp, #72	; 0x48
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
 8007994:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007996:	f7fb f85f 	bl	8002a58 <HAL_GetTick>
 800799a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d107      	bne.n	80079ba <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e170      	b.n	8007c9c <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	f040 8163 	bne.w	8007c8e <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80079ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	441a      	add	r2, r3
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079d8:	429a      	cmp	r2, r3
 80079da:	d907      	bls.n	80079ec <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e157      	b.n	8007c9c <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2203      	movs	r2, #3
 80079f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2200      	movs	r2, #0
 80079fa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d002      	beq.n	8007a0a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a06:	025b      	lsls	r3, r3, #9
 8007a08:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a0e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	025b      	lsls	r3, r3, #9
 8007a14:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007a16:	2390      	movs	r3, #144	; 0x90
 8007a18:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007a1a:	2302      	movs	r3, #2
 8007a1c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007a22:	2300      	movs	r3, #0
 8007a24:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f107 0214 	add.w	r2, r7, #20
 8007a2e:	4611      	mov	r1, r2
 8007a30:	4618      	mov	r0, r3
 8007a32:	f005 f8a9 	bl	800cb88 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68da      	ldr	r2, [r3, #12]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a44:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d90a      	bls.n	8007a62 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2202      	movs	r2, #2
 8007a50:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f005 f907 	bl	800cc6c <SDMMC_CmdReadMultiBlock>
 8007a5e:	6478      	str	r0, [r7, #68]	; 0x44
 8007a60:	e009      	b.n	8007a76 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2201      	movs	r2, #1
 8007a66:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f005 f8d9 	bl	800cc26 <SDMMC_CmdReadSingleBlock>
 8007a74:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d012      	beq.n	8007aa2 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a88      	ldr	r2, [pc, #544]	; (8007ca4 <HAL_SD_ReadBlocks+0x31c>)
 8007a82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a8a:	431a      	orrs	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e0fc      	b.n	8007c9c <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007aa6:	e061      	b.n	8007b6c <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d03c      	beq.n	8007b30 <HAL_SD_ReadBlocks+0x1a8>
 8007ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d039      	beq.n	8007b30 <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007abc:	2300      	movs	r3, #0
 8007abe:	643b      	str	r3, [r7, #64]	; 0x40
 8007ac0:	e033      	b.n	8007b2a <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f004 ffd6 	bl	800ca78 <SDMMC_ReadFIFO>
 8007acc:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad8:	3301      	adds	r3, #1
 8007ada:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae4:	0a1b      	lsrs	r3, r3, #8
 8007ae6:	b2da      	uxtb	r2, r3
 8007ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aea:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aee:	3301      	adds	r3, #1
 8007af0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007af4:	3b01      	subs	r3, #1
 8007af6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afa:	0c1b      	lsrs	r3, r3, #16
 8007afc:	b2da      	uxtb	r2, r3
 8007afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b00:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b04:	3301      	adds	r3, #1
 8007b06:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b10:	0e1b      	lsrs	r3, r3, #24
 8007b12:	b2da      	uxtb	r2, r3
 8007b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b16:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b20:	3b01      	subs	r3, #1
 8007b22:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8007b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b26:	3301      	adds	r3, #1
 8007b28:	643b      	str	r3, [r7, #64]	; 0x40
 8007b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b2c:	2b07      	cmp	r3, #7
 8007b2e:	d9c8      	bls.n	8007ac2 <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007b30:	f7fa ff92 	bl	8002a58 <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d902      	bls.n	8007b46 <HAL_SD_ReadBlocks+0x1be>
 8007b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d112      	bne.n	8007b6c <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a56      	ldr	r2, [pc, #344]	; (8007ca4 <HAL_SD_ReadBlocks+0x31c>)
 8007b4c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b52:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e097      	b.n	8007c9c <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b72:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d096      	beq.n	8007aa8 <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68da      	ldr	r2, [r3, #12]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b88:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d022      	beq.n	8007bde <HAL_SD_ReadBlocks+0x256>
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d91f      	bls.n	8007bde <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba2:	2b03      	cmp	r3, #3
 8007ba4:	d01b      	beq.n	8007bde <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4618      	mov	r0, r3
 8007bac:	f005 f8c8 	bl	800cd40 <SDMMC_CmdStopTransfer>
 8007bb0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d012      	beq.n	8007bde <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a39      	ldr	r2, [pc, #228]	; (8007ca4 <HAL_SD_ReadBlocks+0x31c>)
 8007bbe:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bc6:	431a      	orrs	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e05e      	b.n	8007c9c <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be4:	f003 0308 	and.w	r3, r3, #8
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d012      	beq.n	8007c12 <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a2c      	ldr	r2, [pc, #176]	; (8007ca4 <HAL_SD_ReadBlocks+0x31c>)
 8007bf2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf8:	f043 0208 	orr.w	r2, r3, #8
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e044      	b.n	8007c9c <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c18:	f003 0302 	and.w	r3, r3, #2
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d012      	beq.n	8007c46 <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a1f      	ldr	r2, [pc, #124]	; (8007ca4 <HAL_SD_ReadBlocks+0x31c>)
 8007c26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2c:	f043 0202 	orr.w	r2, r3, #2
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e02a      	b.n	8007c9c <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c4c:	f003 0320 	and.w	r3, r3, #32
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d012      	beq.n	8007c7a <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a12      	ldr	r2, [pc, #72]	; (8007ca4 <HAL_SD_ReadBlocks+0x31c>)
 8007c5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c60:	f043 0220 	orr.w	r2, r3, #32
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e010      	b.n	8007c9c <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a0a      	ldr	r2, [pc, #40]	; (8007ca8 <HAL_SD_ReadBlocks+0x320>)
 8007c80:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	e006      	b.n	8007c9c <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
  }
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3748      	adds	r7, #72	; 0x48
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	1fe00fff 	.word	0x1fe00fff
 8007ca8:	18000f3a 	.word	0x18000f3a

08007cac <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b092      	sub	sp, #72	; 0x48
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]
 8007cb8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007cba:	f7fa fecd 	bl	8002a58 <HAL_GetTick>
 8007cbe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d107      	bne.n	8007cde <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e174      	b.n	8007fc8 <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	f040 8167 	bne.w	8007fba <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007cf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	441a      	add	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d907      	bls.n	8007d10 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d04:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e15b      	b.n	8007fc8 <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2203      	movs	r2, #3
 8007d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d002      	beq.n	8007d2e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2a:	025b      	lsls	r3, r3, #9
 8007d2c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d32:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	025b      	lsls	r3, r3, #9
 8007d38:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007d3a:	2390      	movs	r3, #144	; 0x90
 8007d3c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007d42:	2300      	movs	r3, #0
 8007d44:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007d46:	2300      	movs	r3, #0
 8007d48:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f107 0218 	add.w	r2, r7, #24
 8007d52:	4611      	mov	r1, r2
 8007d54:	4618      	mov	r0, r3
 8007d56:	f004 ff17 	bl	800cb88 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68da      	ldr	r2, [r3, #12]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d68:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d90a      	bls.n	8007d86 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2220      	movs	r2, #32
 8007d74:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f004 ffbb 	bl	800ccf8 <SDMMC_CmdWriteMultiBlock>
 8007d82:	6478      	str	r0, [r7, #68]	; 0x44
 8007d84:	e009      	b.n	8007d9a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2210      	movs	r2, #16
 8007d8a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d92:	4618      	mov	r0, r3
 8007d94:	f004 ff8d 	bl	800ccb2 <SDMMC_CmdWriteSingleBlock>
 8007d98:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d012      	beq.n	8007dc6 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a8a      	ldr	r2, [pc, #552]	; (8007fd0 <HAL_SD_WriteBlocks+0x324>)
 8007da6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dae:	431a      	orrs	r2, r3
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e100      	b.n	8007fc8 <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007dca:	e065      	b.n	8007e98 <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d040      	beq.n	8007e5c <HAL_SD_WriteBlocks+0x1b0>
 8007dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d03d      	beq.n	8007e5c <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007de0:	2300      	movs	r3, #0
 8007de2:	643b      	str	r3, [r7, #64]	; 0x40
 8007de4:	e037      	b.n	8007e56 <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 8007de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dee:	3301      	adds	r3, #1
 8007df0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007df4:	3b01      	subs	r3, #1
 8007df6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	021a      	lsls	r2, r3, #8
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e06:	3301      	adds	r3, #1
 8007e08:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	041a      	lsls	r2, r3, #16
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e1e:	3301      	adds	r3, #1
 8007e20:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e24:	3b01      	subs	r3, #1
 8007e26:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	061a      	lsls	r2, r3, #24
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e36:	3301      	adds	r3, #1
 8007e38:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f107 0214 	add.w	r2, r7, #20
 8007e48:	4611      	mov	r1, r2
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f004 fe21 	bl	800ca92 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e52:	3301      	adds	r3, #1
 8007e54:	643b      	str	r3, [r7, #64]	; 0x40
 8007e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e58:	2b07      	cmp	r3, #7
 8007e5a:	d9c4      	bls.n	8007de6 <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007e5c:	f7fa fdfc 	bl	8002a58 <HAL_GetTick>
 8007e60:	4602      	mov	r2, r0
 8007e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d902      	bls.n	8007e72 <HAL_SD_WriteBlocks+0x1c6>
 8007e6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d112      	bne.n	8007e98 <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a56      	ldr	r2, [pc, #344]	; (8007fd0 <HAL_SD_WriteBlocks+0x324>)
 8007e78:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e80:	431a      	orrs	r2, r3
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e097      	b.n	8007fc8 <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e9e:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d092      	beq.n	8007dcc <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68da      	ldr	r2, [r3, #12]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007eb4:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d022      	beq.n	8007f0a <HAL_SD_WriteBlocks+0x25e>
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d91f      	bls.n	8007f0a <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ece:	2b03      	cmp	r3, #3
 8007ed0:	d01b      	beq.n	8007f0a <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f004 ff32 	bl	800cd40 <SDMMC_CmdStopTransfer>
 8007edc:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d012      	beq.n	8007f0a <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a39      	ldr	r2, [pc, #228]	; (8007fd0 <HAL_SD_WriteBlocks+0x324>)
 8007eea:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ef2:	431a      	orrs	r2, r3
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2200      	movs	r2, #0
 8007f04:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e05e      	b.n	8007fc8 <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f10:	f003 0308 	and.w	r3, r3, #8
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d012      	beq.n	8007f3e <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a2c      	ldr	r2, [pc, #176]	; (8007fd0 <HAL_SD_WriteBlocks+0x324>)
 8007f1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f24:	f043 0208 	orr.w	r2, r3, #8
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e044      	b.n	8007fc8 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f44:	f003 0302 	and.w	r3, r3, #2
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d012      	beq.n	8007f72 <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a1f      	ldr	r2, [pc, #124]	; (8007fd0 <HAL_SD_WriteBlocks+0x324>)
 8007f52:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f58:	f043 0202 	orr.w	r2, r3, #2
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e02a      	b.n	8007fc8 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f78:	f003 0310 	and.w	r3, r3, #16
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d012      	beq.n	8007fa6 <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a12      	ldr	r2, [pc, #72]	; (8007fd0 <HAL_SD_WriteBlocks+0x324>)
 8007f86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f8c:	f043 0210 	orr.w	r2, r3, #16
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e010      	b.n	8007fc8 <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a0a      	ldr	r2, [pc, #40]	; (8007fd4 <HAL_SD_WriteBlocks+0x328>)
 8007fac:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	e006      	b.n	8007fc8 <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
  }
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3748      	adds	r7, #72	; 0x48
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	1fe00fff 	.word	0x1fe00fff
 8007fd4:	18000f3a 	.word	0x18000f3a

08007fd8 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fe6:	0f9b      	lsrs	r3, r3, #30
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ff2:	0e9b      	lsrs	r3, r3, #26
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	f003 030f 	and.w	r3, r3, #15
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008004:	0e1b      	lsrs	r3, r3, #24
 8008006:	b2db      	uxtb	r3, r3
 8008008:	f003 0303 	and.w	r3, r3, #3
 800800c:	b2da      	uxtb	r2, r3
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008016:	0c1b      	lsrs	r3, r3, #16
 8008018:	b2da      	uxtb	r2, r3
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008022:	0a1b      	lsrs	r3, r3, #8
 8008024:	b2da      	uxtb	r2, r3
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800802e:	b2da      	uxtb	r2, r3
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008038:	0d1b      	lsrs	r3, r3, #20
 800803a:	b29a      	uxth	r2, r3
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008044:	0c1b      	lsrs	r3, r3, #16
 8008046:	b2db      	uxtb	r3, r3
 8008048:	f003 030f 	and.w	r3, r3, #15
 800804c:	b2da      	uxtb	r2, r3
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008056:	0bdb      	lsrs	r3, r3, #15
 8008058:	b2db      	uxtb	r3, r3
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	b2da      	uxtb	r2, r3
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008068:	0b9b      	lsrs	r3, r3, #14
 800806a:	b2db      	uxtb	r3, r3
 800806c:	f003 0301 	and.w	r3, r3, #1
 8008070:	b2da      	uxtb	r2, r3
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800807a:	0b5b      	lsrs	r3, r3, #13
 800807c:	b2db      	uxtb	r3, r3
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	b2da      	uxtb	r2, r3
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800808c:	0b1b      	lsrs	r3, r3, #12
 800808e:	b2db      	uxtb	r3, r3
 8008090:	f003 0301 	and.w	r3, r3, #1
 8008094:	b2da      	uxtb	r2, r3
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	2200      	movs	r2, #0
 800809e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d163      	bne.n	8008170 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080ac:	009a      	lsls	r2, r3, #2
 80080ae:	f640 73fc 	movw	r3, #4092	; 0xffc
 80080b2:	4013      	ands	r3, r2
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80080b8:	0f92      	lsrs	r2, r2, #30
 80080ba:	431a      	orrs	r2, r3
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080c4:	0edb      	lsrs	r3, r3, #27
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	f003 0307 	and.w	r3, r3, #7
 80080cc:	b2da      	uxtb	r2, r3
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080d6:	0e1b      	lsrs	r3, r3, #24
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	f003 0307 	and.w	r3, r3, #7
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080e8:	0d5b      	lsrs	r3, r3, #21
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	f003 0307 	and.w	r3, r3, #7
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080fa:	0c9b      	lsrs	r3, r3, #18
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	f003 0307 	and.w	r3, r3, #7
 8008102:	b2da      	uxtb	r2, r3
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800810c:	0bdb      	lsrs	r3, r3, #15
 800810e:	b2db      	uxtb	r3, r3
 8008110:	f003 0307 	and.w	r3, r3, #7
 8008114:	b2da      	uxtb	r2, r3
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	1c5a      	adds	r2, r3, #1
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	7e1b      	ldrb	r3, [r3, #24]
 8008128:	b2db      	uxtb	r3, r3
 800812a:	f003 0307 	and.w	r3, r3, #7
 800812e:	3302      	adds	r3, #2
 8008130:	2201      	movs	r2, #1
 8008132:	fa02 f303 	lsl.w	r3, r2, r3
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800813a:	fb03 f202 	mul.w	r2, r3, r2
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	7a1b      	ldrb	r3, [r3, #8]
 8008146:	b2db      	uxtb	r3, r3
 8008148:	f003 030f 	and.w	r3, r3, #15
 800814c:	2201      	movs	r2, #1
 800814e:	409a      	lsls	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800815c:	0a52      	lsrs	r2, r2, #9
 800815e:	fb03 f202 	mul.w	r2, r3, r2
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800816c:	659a      	str	r2, [r3, #88]	; 0x58
 800816e:	e031      	b.n	80081d4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008174:	2b01      	cmp	r3, #1
 8008176:	d11d      	bne.n	80081b4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800817c:	041b      	lsls	r3, r3, #16
 800817e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008186:	0c1b      	lsrs	r3, r3, #16
 8008188:	431a      	orrs	r2, r3
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	3301      	adds	r3, #1
 8008194:	029a      	lsls	r2, r3, #10
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081a8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	659a      	str	r2, [r3, #88]	; 0x58
 80081b2:	e00f      	b.n	80081d4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a58      	ldr	r2, [pc, #352]	; (800831c <HAL_SD_GetCardCSD+0x344>)
 80081ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e09d      	b.n	8008310 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081d8:	0b9b      	lsrs	r3, r3, #14
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	f003 0301 	and.w	r3, r3, #1
 80081e0:	b2da      	uxtb	r2, r3
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081ea:	09db      	lsrs	r3, r3, #7
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081f2:	b2da      	uxtb	r2, r3
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008202:	b2da      	uxtb	r2, r3
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800820c:	0fdb      	lsrs	r3, r3, #31
 800820e:	b2da      	uxtb	r2, r3
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008218:	0f5b      	lsrs	r3, r3, #29
 800821a:	b2db      	uxtb	r3, r3
 800821c:	f003 0303 	and.w	r3, r3, #3
 8008220:	b2da      	uxtb	r2, r3
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800822a:	0e9b      	lsrs	r3, r3, #26
 800822c:	b2db      	uxtb	r3, r3
 800822e:	f003 0307 	and.w	r3, r3, #7
 8008232:	b2da      	uxtb	r2, r3
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800823c:	0d9b      	lsrs	r3, r3, #22
 800823e:	b2db      	uxtb	r3, r3
 8008240:	f003 030f 	and.w	r3, r3, #15
 8008244:	b2da      	uxtb	r2, r3
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800824e:	0d5b      	lsrs	r3, r3, #21
 8008250:	b2db      	uxtb	r3, r3
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	b2da      	uxtb	r2, r3
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800826a:	0c1b      	lsrs	r3, r3, #16
 800826c:	b2db      	uxtb	r3, r3
 800826e:	f003 0301 	and.w	r3, r3, #1
 8008272:	b2da      	uxtb	r2, r3
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800827e:	0bdb      	lsrs	r3, r3, #15
 8008280:	b2db      	uxtb	r3, r3
 8008282:	f003 0301 	and.w	r3, r3, #1
 8008286:	b2da      	uxtb	r2, r3
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008292:	0b9b      	lsrs	r3, r3, #14
 8008294:	b2db      	uxtb	r3, r3
 8008296:	f003 0301 	and.w	r3, r3, #1
 800829a:	b2da      	uxtb	r2, r3
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082a6:	0b5b      	lsrs	r3, r3, #13
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	b2da      	uxtb	r2, r3
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ba:	0b1b      	lsrs	r3, r3, #12
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	f003 0301 	and.w	r3, r3, #1
 80082c2:	b2da      	uxtb	r2, r3
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ce:	0a9b      	lsrs	r3, r3, #10
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	f003 0303 	and.w	r3, r3, #3
 80082d6:	b2da      	uxtb	r2, r3
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082e2:	0a1b      	lsrs	r3, r3, #8
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	f003 0303 	and.w	r3, r3, #3
 80082ea:	b2da      	uxtb	r2, r3
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082f6:	085b      	lsrs	r3, r3, #1
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082fe:	b2da      	uxtb	r2, r3
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	2201      	movs	r2, #1
 800830a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr
 800831c:	1fe00fff 	.word	0x1fe00fff

08008320 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b094      	sub	sp, #80	; 0x50
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800832a:	2300      	movs	r3, #0
 800832c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008330:	f107 0308 	add.w	r3, r7, #8
 8008334:	4619      	mov	r1, r3
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fbd4 	bl	8008ae4 <SD_SendSDStatus>
 800833c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800833e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008340:	2b00      	cmp	r3, #0
 8008342:	d011      	beq.n	8008368 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a4f      	ldr	r2, [pc, #316]	; (8008488 <HAL_SD_GetCardStatus+0x168>)
 800834a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008352:	431a      	orrs	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008366:	e070      	b.n	800844a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	099b      	lsrs	r3, r3, #6
 800836c:	b2db      	uxtb	r3, r3
 800836e:	f003 0303 	and.w	r3, r3, #3
 8008372:	b2da      	uxtb	r2, r3
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	095b      	lsrs	r3, r3, #5
 800837c:	b2db      	uxtb	r3, r3
 800837e:	f003 0301 	and.w	r3, r3, #1
 8008382:	b2da      	uxtb	r2, r3
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	0a1b      	lsrs	r3, r3, #8
 800838c:	b29b      	uxth	r3, r3
 800838e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008392:	b29a      	uxth	r2, r3
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	0e1b      	lsrs	r3, r3, #24
 8008398:	b29b      	uxth	r3, r3
 800839a:	4313      	orrs	r3, r2
 800839c:	b29a      	uxth	r2, r3
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	061a      	lsls	r2, r3, #24
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	021b      	lsls	r3, r3, #8
 80083aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80083ae:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	0a1b      	lsrs	r3, r3, #8
 80083b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80083b8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	0e1b      	lsrs	r3, r3, #24
 80083be:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	b2da      	uxtb	r2, r3
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	0a1b      	lsrs	r3, r3, #8
 80083d0:	b2da      	uxtb	r2, r3
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	0d1b      	lsrs	r3, r3, #20
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	f003 030f 	and.w	r3, r3, #15
 80083e0:	b2da      	uxtb	r2, r3
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	0c1b      	lsrs	r3, r3, #16
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	4313      	orrs	r3, r2
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	0a9b      	lsrs	r3, r3, #10
 8008406:	b2db      	uxtb	r3, r3
 8008408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800840c:	b2da      	uxtb	r2, r3
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	0a1b      	lsrs	r3, r3, #8
 8008416:	b2db      	uxtb	r3, r3
 8008418:	f003 0303 	and.w	r3, r3, #3
 800841c:	b2da      	uxtb	r2, r3
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	091b      	lsrs	r3, r3, #4
 8008426:	b2db      	uxtb	r3, r3
 8008428:	f003 030f 	and.w	r3, r3, #15
 800842c:	b2da      	uxtb	r2, r3
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	b2db      	uxtb	r3, r3
 8008436:	f003 030f 	and.w	r3, r3, #15
 800843a:	b2da      	uxtb	r2, r3
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	0e1b      	lsrs	r3, r3, #24
 8008444:	b2da      	uxtb	r2, r3
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008452:	4618      	mov	r0, r3
 8008454:	f004 fbc4 	bl	800cbe0 <SDMMC_CmdBlockLength>
 8008458:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800845a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00d      	beq.n	800847c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a08      	ldr	r2, [pc, #32]	; (8008488 <HAL_SD_GetCardStatus+0x168>)
 8008466:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800846c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800847c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008480:	4618      	mov	r0, r3
 8008482:	3750      	adds	r7, #80	; 0x50
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	1fe00fff 	.word	0x1fe00fff

0800848c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80084e4:	b5b0      	push	{r4, r5, r7, lr}
 80084e6:	b090      	sub	sp, #64	; 0x40
 80084e8:	af04      	add	r7, sp, #16
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80084ee:	2300      	movs	r3, #0
 80084f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2203      	movs	r2, #3
 80084f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008500:	2b03      	cmp	r3, #3
 8008502:	d02e      	beq.n	8008562 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800850a:	d106      	bne.n	800851a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008510:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	639a      	str	r2, [r3, #56]	; 0x38
 8008518:	e029      	b.n	800856e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008520:	d10a      	bne.n	8008538 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fbd6 	bl	8008cd4 <SD_WideBus_Enable>
 8008528:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800852e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008530:	431a      	orrs	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	639a      	str	r2, [r3, #56]	; 0x38
 8008536:	e01a      	b.n	800856e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10a      	bne.n	8008554 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fc13 	bl	8008d6a <SD_WideBus_Disable>
 8008544:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800854a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854c:	431a      	orrs	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	639a      	str	r2, [r3, #56]	; 0x38
 8008552:	e00c      	b.n	800856e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008558:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	639a      	str	r2, [r3, #56]	; 0x38
 8008560:	e005      	b.n	800856e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008566:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008572:	2b00      	cmp	r3, #0
 8008574:	d007      	beq.n	8008586 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a60      	ldr	r2, [pc, #384]	; (80086fc <HAL_SD_ConfigWideBusOperation+0x218>)
 800857c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008584:	e097      	b.n	80086b6 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8008586:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800858a:	f7fd feb9 	bl	8006300 <HAL_RCCEx_GetPeriphCLKFreq>
 800858e:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8008590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008592:	2b00      	cmp	r3, #0
 8008594:	f000 8086 	beq.w	80086a4 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	695a      	ldr	r2, [r3, #20]
 80085b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b4:	4952      	ldr	r1, [pc, #328]	; (8008700 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80085b6:	fba1 1303 	umull	r1, r3, r1, r3
 80085ba:	0e1b      	lsrs	r3, r3, #24
 80085bc:	429a      	cmp	r2, r3
 80085be:	d303      	bcc.n	80085c8 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	695b      	ldr	r3, [r3, #20]
 80085c4:	61fb      	str	r3, [r7, #28]
 80085c6:	e05a      	b.n	800867e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085d0:	d103      	bne.n	80085da <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	61fb      	str	r3, [r7, #28]
 80085d8:	e051      	b.n	800867e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085e2:	d126      	bne.n	8008632 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	695b      	ldr	r3, [r3, #20]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10e      	bne.n	800860a <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80085ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ee:	4a45      	ldr	r2, [pc, #276]	; (8008704 <HAL_SD_ConfigWideBusOperation+0x220>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d906      	bls.n	8008602 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80085f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f6:	4a42      	ldr	r2, [pc, #264]	; (8008700 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80085f8:	fba2 2303 	umull	r2, r3, r2, r3
 80085fc:	0e5b      	lsrs	r3, r3, #25
 80085fe:	61fb      	str	r3, [r7, #28]
 8008600:	e03d      	b.n	800867e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	61fb      	str	r3, [r7, #28]
 8008608:	e039      	b.n	800867e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	005b      	lsls	r3, r3, #1
 8008610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008612:	fbb2 f3f3 	udiv	r3, r2, r3
 8008616:	4a3b      	ldr	r2, [pc, #236]	; (8008704 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d906      	bls.n	800862a <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800861c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861e:	4a38      	ldr	r2, [pc, #224]	; (8008700 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008620:	fba2 2303 	umull	r2, r3, r2, r3
 8008624:	0e5b      	lsrs	r3, r3, #25
 8008626:	61fb      	str	r3, [r7, #28]
 8008628:	e029      	b.n	800867e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	695b      	ldr	r3, [r3, #20]
 800862e:	61fb      	str	r3, [r7, #28]
 8008630:	e025      	b.n	800867e <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	695b      	ldr	r3, [r3, #20]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d10e      	bne.n	8008658 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800863a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863c:	4a32      	ldr	r2, [pc, #200]	; (8008708 <HAL_SD_ConfigWideBusOperation+0x224>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d906      	bls.n	8008650 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008644:	4a2e      	ldr	r2, [pc, #184]	; (8008700 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008646:	fba2 2303 	umull	r2, r3, r2, r3
 800864a:	0e1b      	lsrs	r3, r3, #24
 800864c:	61fb      	str	r3, [r7, #28]
 800864e:	e016      	b.n	800867e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	695b      	ldr	r3, [r3, #20]
 8008654:	61fb      	str	r3, [r7, #28]
 8008656:	e012      	b.n	800867e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	695b      	ldr	r3, [r3, #20]
 800865c:	005b      	lsls	r3, r3, #1
 800865e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008660:	fbb2 f3f3 	udiv	r3, r2, r3
 8008664:	4a28      	ldr	r2, [pc, #160]	; (8008708 <HAL_SD_ConfigWideBusOperation+0x224>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d906      	bls.n	8008678 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866c:	4a24      	ldr	r2, [pc, #144]	; (8008700 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800866e:	fba2 2303 	umull	r2, r3, r2, r3
 8008672:	0e1b      	lsrs	r3, r3, #24
 8008674:	61fb      	str	r3, [r7, #28]
 8008676:	e002      	b.n	800867e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681d      	ldr	r5, [r3, #0]
 8008688:	466c      	mov	r4, sp
 800868a:	f107 0318 	add.w	r3, r7, #24
 800868e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008692:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008696:	f107 030c 	add.w	r3, r7, #12
 800869a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800869c:	4628      	mov	r0, r5
 800869e:	f004 f9c1 	bl	800ca24 <SDMMC_Init>
 80086a2:	e008      	b.n	80086b6 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80086be:	4618      	mov	r0, r3
 80086c0:	f004 fa8e 	bl	800cbe0 <SDMMC_CmdBlockLength>
 80086c4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80086c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00c      	beq.n	80086e6 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a0a      	ldr	r2, [pc, #40]	; (80086fc <HAL_SD_ConfigWideBusOperation+0x218>)
 80086d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086da:	431a      	orrs	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2201      	movs	r2, #1
 80086ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80086ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3730      	adds	r7, #48	; 0x30
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bdb0      	pop	{r4, r5, r7, pc}
 80086fa:	bf00      	nop
 80086fc:	1fe00fff 	.word	0x1fe00fff
 8008700:	55e63b89 	.word	0x55e63b89
 8008704:	02faf080 	.word	0x02faf080
 8008708:	017d7840 	.word	0x017d7840

0800870c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008714:	2300      	movs	r3, #0
 8008716:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008718:	f107 030c 	add.w	r3, r7, #12
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fab0 	bl	8008c84 <SD_SendStatus>
 8008724:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d005      	beq.n	8008738 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	431a      	orrs	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	0a5b      	lsrs	r3, r3, #9
 800873c:	f003 030f 	and.w	r3, r3, #15
 8008740:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008742:	693b      	ldr	r3, [r7, #16]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3718      	adds	r7, #24
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800874c:	b5b0      	push	{r4, r5, r7, lr}
 800874e:	b090      	sub	sp, #64	; 0x40
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008754:	2301      	movs	r3, #1
 8008756:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4618      	mov	r0, r3
 800875e:	f004 f9bb 	bl	800cad8 <SDMMC_GetPowerState>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d102      	bne.n	800876e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008768:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800876c:	e0a9      	b.n	80088c2 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008772:	2b03      	cmp	r3, #3
 8008774:	d02e      	beq.n	80087d4 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4618      	mov	r0, r3
 800877c:	f004 fc00 	bl	800cf80 <SDMMC_CmdSendCID>
 8008780:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008784:	2b00      	cmp	r3, #0
 8008786:	d001      	beq.n	800878c <SD_InitCard+0x40>
    {
      return errorstate;
 8008788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800878a:	e09a      	b.n	80088c2 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2100      	movs	r1, #0
 8008792:	4618      	mov	r0, r3
 8008794:	f004 f9e5 	bl	800cb62 <SDMMC_GetResponse>
 8008798:	4602      	mov	r2, r0
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2104      	movs	r1, #4
 80087a4:	4618      	mov	r0, r3
 80087a6:	f004 f9dc 	bl	800cb62 <SDMMC_GetResponse>
 80087aa:	4602      	mov	r2, r0
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2108      	movs	r1, #8
 80087b6:	4618      	mov	r0, r3
 80087b8:	f004 f9d3 	bl	800cb62 <SDMMC_GetResponse>
 80087bc:	4602      	mov	r2, r0
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	210c      	movs	r1, #12
 80087c8:	4618      	mov	r0, r3
 80087ca:	f004 f9ca 	bl	800cb62 <SDMMC_GetResponse>
 80087ce:	4602      	mov	r2, r0
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d8:	2b03      	cmp	r3, #3
 80087da:	d00d      	beq.n	80087f8 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f107 020e 	add.w	r2, r7, #14
 80087e4:	4611      	mov	r1, r2
 80087e6:	4618      	mov	r0, r3
 80087e8:	f004 fc09 	bl	800cffe <SDMMC_CmdSetRelAdd>
 80087ec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80087ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d001      	beq.n	80087f8 <SD_InitCard+0xac>
    {
      return errorstate;
 80087f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087f6:	e064      	b.n	80088c2 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087fc:	2b03      	cmp	r3, #3
 80087fe:	d036      	beq.n	800886e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008800:	89fb      	ldrh	r3, [r7, #14]
 8008802:	461a      	mov	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008810:	041b      	lsls	r3, r3, #16
 8008812:	4619      	mov	r1, r3
 8008814:	4610      	mov	r0, r2
 8008816:	f004 fbd2 	bl	800cfbe <SDMMC_CmdSendCSD>
 800881a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800881c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800881e:	2b00      	cmp	r3, #0
 8008820:	d001      	beq.n	8008826 <SD_InitCard+0xda>
    {
      return errorstate;
 8008822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008824:	e04d      	b.n	80088c2 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2100      	movs	r1, #0
 800882c:	4618      	mov	r0, r3
 800882e:	f004 f998 	bl	800cb62 <SDMMC_GetResponse>
 8008832:	4602      	mov	r2, r0
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2104      	movs	r1, #4
 800883e:	4618      	mov	r0, r3
 8008840:	f004 f98f 	bl	800cb62 <SDMMC_GetResponse>
 8008844:	4602      	mov	r2, r0
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2108      	movs	r1, #8
 8008850:	4618      	mov	r0, r3
 8008852:	f004 f986 	bl	800cb62 <SDMMC_GetResponse>
 8008856:	4602      	mov	r2, r0
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	210c      	movs	r1, #12
 8008862:	4618      	mov	r0, r3
 8008864:	f004 f97d 	bl	800cb62 <SDMMC_GetResponse>
 8008868:	4602      	mov	r2, r0
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2104      	movs	r1, #4
 8008874:	4618      	mov	r0, r3
 8008876:	f004 f974 	bl	800cb62 <SDMMC_GetResponse>
 800887a:	4603      	mov	r3, r0
 800887c:	0d1a      	lsrs	r2, r3, #20
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008882:	f107 0310 	add.w	r3, r7, #16
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7ff fba5 	bl	8007fd8 <HAL_SD_GetCardCSD>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d002      	beq.n	800889a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008894:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008898:	e013      	b.n	80088c2 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6819      	ldr	r1, [r3, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088a2:	041b      	lsls	r3, r3, #16
 80088a4:	2200      	movs	r2, #0
 80088a6:	461c      	mov	r4, r3
 80088a8:	4615      	mov	r5, r2
 80088aa:	4622      	mov	r2, r4
 80088ac:	462b      	mov	r3, r5
 80088ae:	4608      	mov	r0, r1
 80088b0:	f004 fa7c 	bl	800cdac <SDMMC_CmdSelDesel>
 80088b4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80088b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d001      	beq.n	80088c0 <SD_InitCard+0x174>
  {
    return errorstate;
 80088bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088be:	e000      	b.n	80088c2 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3740      	adds	r7, #64	; 0x40
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080088cc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b088      	sub	sp, #32
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088d4:	2300      	movs	r3, #0
 80088d6:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 80088d8:	2300      	movs	r3, #0
 80088da:	61fb      	str	r3, [r7, #28]
 80088dc:	2300      	movs	r3, #0
 80088de:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 80088e0:	f7fa f8ba 	bl	8002a58 <HAL_GetTick>
 80088e4:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f004 fa82 	bl	800cdf4 <SDMMC_CmdGoIdleState>
 80088f0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d001      	beq.n	80088fc <SD_PowerON+0x30>
  {
    return errorstate;
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	e0ed      	b.n	8008ad8 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4618      	mov	r0, r3
 8008902:	f004 fa95 	bl	800ce30 <SDMMC_CmdOperCond>
 8008906:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00d      	beq.n	800892a <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4618      	mov	r0, r3
 800891a:	f004 fa6b 	bl	800cdf4 <SDMMC_CmdGoIdleState>
 800891e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d004      	beq.n	8008930 <SD_PowerON+0x64>
    {
      return errorstate;
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	e0d6      	b.n	8008ad8 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2201      	movs	r2, #1
 800892e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008934:	2b01      	cmp	r3, #1
 8008936:	d137      	bne.n	80089a8 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2100      	movs	r1, #0
 800893e:	4618      	mov	r0, r3
 8008940:	f004 fa96 	bl	800ce70 <SDMMC_CmdAppCommand>
 8008944:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d02d      	beq.n	80089a8 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800894c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008950:	e0c2      	b.n	8008ad8 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2100      	movs	r1, #0
 8008958:	4618      	mov	r0, r3
 800895a:	f004 fa89 	bl	800ce70 <SDMMC_CmdAppCommand>
 800895e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d001      	beq.n	800896a <SD_PowerON+0x9e>
    {
      return errorstate;
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	e0b6      	b.n	8008ad8 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	495c      	ldr	r1, [pc, #368]	; (8008ae0 <SD_PowerON+0x214>)
 8008970:	4618      	mov	r0, r3
 8008972:	f004 faa0 	bl	800ceb6 <SDMMC_CmdAppOperCommand>
 8008976:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d002      	beq.n	8008984 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800897e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008982:	e0a9      	b.n	8008ad8 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2100      	movs	r1, #0
 800898a:	4618      	mov	r0, r3
 800898c:	f004 f8e9 	bl	800cb62 <SDMMC_GetResponse>
 8008990:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	0fdb      	lsrs	r3, r3, #31
 8008996:	2b01      	cmp	r3, #1
 8008998:	d101      	bne.n	800899e <SD_PowerON+0xd2>
 800899a:	2301      	movs	r3, #1
 800899c:	e000      	b.n	80089a0 <SD_PowerON+0xd4>
 800899e:	2300      	movs	r3, #0
 80089a0:	61bb      	str	r3, [r7, #24]

    count++;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	3301      	adds	r3, #1
 80089a6:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d802      	bhi.n	80089b8 <SD_PowerON+0xec>
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d0cc      	beq.n	8008952 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80089be:	4293      	cmp	r3, r2
 80089c0:	d902      	bls.n	80089c8 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80089c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80089c6:	e087      	b.n	8008ad8 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d07e      	beq.n	8008ad0 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	699b      	ldr	r3, [r3, #24]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d17a      	bne.n	8008ad6 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d075      	beq.n	8008ad6 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089f0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f042 0208 	orr.w	r2, r2, #8
 8008a00:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4618      	mov	r0, r3
 8008a08:	f004 fb60 	bl	800d0cc <SDMMC_CmdVoltageSwitch>
 8008a0c:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00c      	beq.n	8008a2e <SD_PowerON+0x162>
        {
          return errorstate;
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	e05f      	b.n	8008ad8 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008a18:	f7fa f81e 	bl	8002a58 <HAL_GetTick>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a26:	d102      	bne.n	8008a2e <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8008a28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a2c:	e054      	b.n	8008ad8 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008a38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a3c:	d1ec      	bne.n	8008a18 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008a46:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a56:	d002      	beq.n	8008a5e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8008a58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008a5c:	e03c      	b.n	8008ad8 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8008a5e:	2001      	movs	r0, #1
 8008a60:	f000 fa9e 	bl	8008fa0 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f042 0204 	orr.w	r2, r2, #4
 8008a72:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008a74:	e00a      	b.n	8008a8c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008a76:	f7f9 ffef 	bl	8002a58 <HAL_GetTick>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a84:	d102      	bne.n	8008a8c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8008a86:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a8a:	e025      	b.n	8008ad8 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a9a:	d1ec      	bne.n	8008a76 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008aa4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ab0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ab4:	d102      	bne.n	8008abc <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008ab6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008aba:	e00d      	b.n	8008ad8 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2213      	movs	r2, #19
 8008ac2:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008acc:	639a      	str	r2, [r3, #56]	; 0x38
 8008ace:	e002      	b.n	8008ad6 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3720      	adds	r7, #32
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	c1100000 	.word	0xc1100000

08008ae4 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b08c      	sub	sp, #48	; 0x30
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008aee:	f7f9 ffb3 	bl	8002a58 <HAL_GetTick>
 8008af2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2100      	movs	r1, #0
 8008afe:	4618      	mov	r0, r3
 8008b00:	f004 f82f 	bl	800cb62 <SDMMC_GetResponse>
 8008b04:	4603      	mov	r3, r0
 8008b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b0e:	d102      	bne.n	8008b16 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008b10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b14:	e0b0      	b.n	8008c78 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2140      	movs	r1, #64	; 0x40
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f004 f85f 	bl	800cbe0 <SDMMC_CmdBlockLength>
 8008b22:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b24:	6a3b      	ldr	r3, [r7, #32]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d005      	beq.n	8008b36 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008b32:	6a3b      	ldr	r3, [r7, #32]
 8008b34:	e0a0      	b.n	8008c78 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b3e:	041b      	lsls	r3, r3, #16
 8008b40:	4619      	mov	r1, r3
 8008b42:	4610      	mov	r0, r2
 8008b44:	f004 f994 	bl	800ce70 <SDMMC_CmdAppCommand>
 8008b48:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b4a:	6a3b      	ldr	r3, [r7, #32]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d005      	beq.n	8008b5c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008b58:	6a3b      	ldr	r3, [r7, #32]
 8008b5a:	e08d      	b.n	8008c78 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008b5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b60:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008b62:	2340      	movs	r3, #64	; 0x40
 8008b64:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008b66:	2360      	movs	r3, #96	; 0x60
 8008b68:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008b6a:	2302      	movs	r3, #2
 8008b6c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008b72:	2301      	movs	r3, #1
 8008b74:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f107 0208 	add.w	r2, r7, #8
 8008b7e:	4611      	mov	r1, r2
 8008b80:	4618      	mov	r0, r3
 8008b82:	f004 f801 	bl	800cb88 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f004 fa7c 	bl	800d088 <SDMMC_CmdStatusRegister>
 8008b90:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b92:	6a3b      	ldr	r3, [r7, #32]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d02b      	beq.n	8008bf0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008ba0:	6a3b      	ldr	r3, [r7, #32]
 8008ba2:	e069      	b.n	8008c78 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008baa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d013      	beq.n	8008bda <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bb6:	e00d      	b.n	8008bd4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f003 ff5b 	bl	800ca78 <SDMMC_ReadFIFO>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc6:	601a      	str	r2, [r3, #0]
        pData++;
 8008bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bca:	3304      	adds	r3, #4
 8008bcc:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8008bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd6:	2b07      	cmp	r3, #7
 8008bd8:	d9ee      	bls.n	8008bb8 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008bda:	f7f9 ff3d 	bl	8002a58 <HAL_GetTick>
 8008bde:	4602      	mov	r2, r0
 8008be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be2:	1ad3      	subs	r3, r2, r3
 8008be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008be8:	d102      	bne.n	8008bf0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008bea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008bee:	e043      	b.n	8008c78 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bf6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d0d2      	beq.n	8008ba4 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c04:	f003 0308 	and.w	r3, r3, #8
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d001      	beq.n	8008c10 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008c0c:	2308      	movs	r3, #8
 8008c0e:	e033      	b.n	8008c78 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c16:	f003 0302 	and.w	r3, r3, #2
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d001      	beq.n	8008c22 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008c1e:	2302      	movs	r3, #2
 8008c20:	e02a      	b.n	8008c78 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c28:	f003 0320 	and.w	r3, r3, #32
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d017      	beq.n	8008c60 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008c30:	2320      	movs	r3, #32
 8008c32:	e021      	b.n	8008c78 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f003 ff1d 	bl	800ca78 <SDMMC_ReadFIFO>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c42:	601a      	str	r2, [r3, #0]
    pData++;
 8008c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c46:	3304      	adds	r3, #4
 8008c48:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008c4a:	f7f9 ff05 	bl	8002a58 <HAL_GetTick>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c52:	1ad3      	subs	r3, r2, r3
 8008c54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c58:	d102      	bne.n	8008c60 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008c5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c5e:	e00b      	b.n	8008c78 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1e2      	bne.n	8008c34 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a03      	ldr	r2, [pc, #12]	; (8008c80 <SD_SendSDStatus+0x19c>)
 8008c74:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3730      	adds	r7, #48	; 0x30
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	18000f3a 	.word	0x18000f3a

08008c84 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d102      	bne.n	8008c9a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008c94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c98:	e018      	b.n	8008ccc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ca2:	041b      	lsls	r3, r3, #16
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	4610      	mov	r0, r2
 8008ca8:	f004 f9cb 	bl	800d042 <SDMMC_CmdSendStatus>
 8008cac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d001      	beq.n	8008cb8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	e009      	b.n	8008ccc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f003 ff4f 	bl	800cb62 <SDMMC_GetResponse>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008cdc:	2300      	movs	r3, #0
 8008cde:	60fb      	str	r3, [r7, #12]
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2100      	movs	r1, #0
 8008cea:	4618      	mov	r0, r3
 8008cec:	f003 ff39 	bl	800cb62 <SDMMC_GetResponse>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cfa:	d102      	bne.n	8008d02 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008cfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d00:	e02f      	b.n	8008d62 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008d02:	f107 030c 	add.w	r3, r7, #12
 8008d06:	4619      	mov	r1, r3
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 f879 	bl	8008e00 <SD_FindSCR>
 8008d0e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d001      	beq.n	8008d1a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	e023      	b.n	8008d62 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d01c      	beq.n	8008d5e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d2c:	041b      	lsls	r3, r3, #16
 8008d2e:	4619      	mov	r1, r3
 8008d30:	4610      	mov	r0, r2
 8008d32:	f004 f89d 	bl	800ce70 <SDMMC_CmdAppCommand>
 8008d36:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d001      	beq.n	8008d42 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	e00f      	b.n	8008d62 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2102      	movs	r1, #2
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f004 f8d4 	bl	800cef6 <SDMMC_CmdBusWidth>
 8008d4e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d001      	beq.n	8008d5a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	e003      	b.n	8008d62 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	e001      	b.n	8008d62 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008d5e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3718      	adds	r7, #24
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b086      	sub	sp, #24
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008d72:	2300      	movs	r3, #0
 8008d74:	60fb      	str	r3, [r7, #12]
 8008d76:	2300      	movs	r3, #0
 8008d78:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2100      	movs	r1, #0
 8008d80:	4618      	mov	r0, r3
 8008d82:	f003 feee 	bl	800cb62 <SDMMC_GetResponse>
 8008d86:	4603      	mov	r3, r0
 8008d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d90:	d102      	bne.n	8008d98 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008d92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d96:	e02f      	b.n	8008df8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008d98:	f107 030c 	add.w	r3, r7, #12
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f82e 	bl	8008e00 <SD_FindSCR>
 8008da4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d001      	beq.n	8008db0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	e023      	b.n	8008df8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d01c      	beq.n	8008df4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dc2:	041b      	lsls	r3, r3, #16
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	4610      	mov	r0, r2
 8008dc8:	f004 f852 	bl	800ce70 <SDMMC_CmdAppCommand>
 8008dcc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d001      	beq.n	8008dd8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	e00f      	b.n	8008df8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	2100      	movs	r1, #0
 8008dde:	4618      	mov	r0, r3
 8008de0:	f004 f889 	bl	800cef6 <SDMMC_CmdBusWidth>
 8008de4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d001      	beq.n	8008df0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	e003      	b.n	8008df8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008df0:	2300      	movs	r3, #0
 8008df2:	e001      	b.n	8008df8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008df4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3718      	adds	r7, #24
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b08e      	sub	sp, #56	; 0x38
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008e0a:	f7f9 fe25 	bl	8002a58 <HAL_GetTick>
 8008e0e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008e10:	2300      	movs	r3, #0
 8008e12:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008e14:	2300      	movs	r3, #0
 8008e16:	60bb      	str	r3, [r7, #8]
 8008e18:	2300      	movs	r3, #0
 8008e1a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2108      	movs	r1, #8
 8008e26:	4618      	mov	r0, r3
 8008e28:	f003 feda 	bl	800cbe0 <SDMMC_CmdBlockLength>
 8008e2c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d001      	beq.n	8008e38 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e36:	e0ad      	b.n	8008f94 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e40:	041b      	lsls	r3, r3, #16
 8008e42:	4619      	mov	r1, r3
 8008e44:	4610      	mov	r0, r2
 8008e46:	f004 f813 	bl	800ce70 <SDMMC_CmdAppCommand>
 8008e4a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d001      	beq.n	8008e56 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e54:	e09e      	b.n	8008f94 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e5a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008e5c:	2308      	movs	r3, #8
 8008e5e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008e60:	2330      	movs	r3, #48	; 0x30
 8008e62:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008e64:	2302      	movs	r3, #2
 8008e66:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f107 0210 	add.w	r2, r7, #16
 8008e78:	4611      	mov	r1, r2
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f003 fe84 	bl	800cb88 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4618      	mov	r0, r3
 8008e86:	f004 f859 	bl	800cf3c <SDMMC_CmdSendSCR>
 8008e8a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d027      	beq.n	8008ee2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e94:	e07e      	b.n	8008f94 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d113      	bne.n	8008ecc <SD_FindSCR+0xcc>
 8008ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d110      	bne.n	8008ecc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f003 fde2 	bl	800ca78 <SDMMC_ReadFIFO>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f003 fddb 	bl	800ca78 <SDMMC_ReadFIFO>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	60fb      	str	r3, [r7, #12]
      index++;
 8008ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec8:	3301      	adds	r3, #1
 8008eca:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008ecc:	f7f9 fdc4 	bl	8002a58 <HAL_GetTick>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008eda:	d102      	bne.n	8008ee2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008edc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ee0:	e058      	b.n	8008f94 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ee8:	f240 532a 	movw	r3, #1322	; 0x52a
 8008eec:	4013      	ands	r3, r2
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d0d1      	beq.n	8008e96 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ef8:	f003 0308 	and.w	r3, r3, #8
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d005      	beq.n	8008f0c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2208      	movs	r2, #8
 8008f06:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008f08:	2308      	movs	r3, #8
 8008f0a:	e043      	b.n	8008f94 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f12:	f003 0302 	and.w	r3, r3, #2
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d005      	beq.n	8008f26 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2202      	movs	r2, #2
 8008f20:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008f22:	2302      	movs	r3, #2
 8008f24:	e036      	b.n	8008f94 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f2c:	f003 0320 	and.w	r3, r3, #32
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d005      	beq.n	8008f40 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2220      	movs	r2, #32
 8008f3a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008f3c:	2320      	movs	r3, #32
 8008f3e:	e029      	b.n	8008f94 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a15      	ldr	r2, [pc, #84]	; (8008f9c <SD_FindSCR+0x19c>)
 8008f46:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	061a      	lsls	r2, r3, #24
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	021b      	lsls	r3, r3, #8
 8008f50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008f54:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	0a1b      	lsrs	r3, r3, #8
 8008f5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008f5e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	0e1b      	lsrs	r3, r3, #24
 8008f64:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f68:	601a      	str	r2, [r3, #0]
    scr++;
 8008f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6c:	3304      	adds	r3, #4
 8008f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	061a      	lsls	r2, r3, #24
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	021b      	lsls	r3, r3, #8
 8008f78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008f7c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	0a1b      	lsrs	r3, r3, #8
 8008f82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008f86:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	0e1b      	lsrs	r3, r3, #24
 8008f8c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f90:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3738      	adds	r7, #56	; 0x38
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	18000f3a 	.word	0x18000f3a

08008fa0 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8008faa:	bf00      	nop
 8008fac:	370c      	adds	r7, #12
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr

08008fb6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b084      	sub	sp, #16
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d101      	bne.n	8008fc8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e095      	b.n	80090f4 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d108      	bne.n	8008fe2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fd8:	d009      	beq.n	8008fee <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	61da      	str	r2, [r3, #28]
 8008fe0:	e005      	b.n	8008fee <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d106      	bne.n	800900e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7f9 fa53 	bl	80024b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2202      	movs	r2, #2
 8009012:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009024:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800902e:	d902      	bls.n	8009036 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009030:	2300      	movs	r3, #0
 8009032:	60fb      	str	r3, [r7, #12]
 8009034:	e002      	b.n	800903c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800903a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009044:	d007      	beq.n	8009056 <HAL_SPI_Init+0xa0>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800904e:	d002      	beq.n	8009056 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009066:	431a      	orrs	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	f003 0302 	and.w	r3, r3, #2
 8009070:	431a      	orrs	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	695b      	ldr	r3, [r3, #20]
 8009076:	f003 0301 	and.w	r3, r3, #1
 800907a:	431a      	orrs	r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009084:	431a      	orrs	r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	69db      	ldr	r3, [r3, #28]
 800908a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800908e:	431a      	orrs	r2, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6a1b      	ldr	r3, [r3, #32]
 8009094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009098:	ea42 0103 	orr.w	r1, r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	430a      	orrs	r2, r1
 80090aa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	0c1b      	lsrs	r3, r3, #16
 80090b2:	f003 0204 	and.w	r2, r3, #4
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ba:	f003 0310 	and.w	r3, r3, #16
 80090be:	431a      	orrs	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090c4:	f003 0308 	and.w	r3, r3, #8
 80090c8:	431a      	orrs	r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80090d2:	ea42 0103 	orr.w	r1, r2, r3
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	430a      	orrs	r2, r1
 80090e2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2201      	movs	r2, #1
 80090ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b088      	sub	sp, #32
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	603b      	str	r3, [r7, #0]
 8009108:	4613      	mov	r3, r2
 800910a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800910c:	2300      	movs	r3, #0
 800910e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009116:	2b01      	cmp	r3, #1
 8009118:	d101      	bne.n	800911e <HAL_SPI_Transmit+0x22>
 800911a:	2302      	movs	r3, #2
 800911c:	e158      	b.n	80093d0 <HAL_SPI_Transmit+0x2d4>
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2201      	movs	r2, #1
 8009122:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009126:	f7f9 fc97 	bl	8002a58 <HAL_GetTick>
 800912a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800912c:	88fb      	ldrh	r3, [r7, #6]
 800912e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009136:	b2db      	uxtb	r3, r3
 8009138:	2b01      	cmp	r3, #1
 800913a:	d002      	beq.n	8009142 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800913c:	2302      	movs	r3, #2
 800913e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009140:	e13d      	b.n	80093be <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d002      	beq.n	800914e <HAL_SPI_Transmit+0x52>
 8009148:	88fb      	ldrh	r3, [r7, #6]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d102      	bne.n	8009154 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009152:	e134      	b.n	80093be <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2203      	movs	r2, #3
 8009158:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2200      	movs	r2, #0
 8009160:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	68ba      	ldr	r2, [r7, #8]
 8009166:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	88fa      	ldrh	r2, [r7, #6]
 800916c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	88fa      	ldrh	r2, [r7, #6]
 8009172:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2200      	movs	r2, #0
 8009178:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2200      	movs	r2, #0
 800917e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2200      	movs	r2, #0
 8009186:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2200      	movs	r2, #0
 800918e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800919e:	d10f      	bne.n	80091c0 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80091be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ca:	2b40      	cmp	r3, #64	; 0x40
 80091cc:	d007      	beq.n	80091de <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80091e6:	d94b      	bls.n	8009280 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d002      	beq.n	80091f6 <HAL_SPI_Transmit+0xfa>
 80091f0:	8afb      	ldrh	r3, [r7, #22]
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d13e      	bne.n	8009274 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091fa:	881a      	ldrh	r2, [r3, #0]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009206:	1c9a      	adds	r2, r3, #2
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009210:	b29b      	uxth	r3, r3
 8009212:	3b01      	subs	r3, #1
 8009214:	b29a      	uxth	r2, r3
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800921a:	e02b      	b.n	8009274 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	f003 0302 	and.w	r3, r3, #2
 8009226:	2b02      	cmp	r3, #2
 8009228:	d112      	bne.n	8009250 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800922e:	881a      	ldrh	r2, [r3, #0]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800923a:	1c9a      	adds	r2, r3, #2
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009244:	b29b      	uxth	r3, r3
 8009246:	3b01      	subs	r3, #1
 8009248:	b29a      	uxth	r2, r3
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800924e:	e011      	b.n	8009274 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009250:	f7f9 fc02 	bl	8002a58 <HAL_GetTick>
 8009254:	4602      	mov	r2, r0
 8009256:	69bb      	ldr	r3, [r7, #24]
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	683a      	ldr	r2, [r7, #0]
 800925c:	429a      	cmp	r2, r3
 800925e:	d803      	bhi.n	8009268 <HAL_SPI_Transmit+0x16c>
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009266:	d102      	bne.n	800926e <HAL_SPI_Transmit+0x172>
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d102      	bne.n	8009274 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800926e:	2303      	movs	r3, #3
 8009270:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009272:	e0a4      	b.n	80093be <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009278:	b29b      	uxth	r3, r3
 800927a:	2b00      	cmp	r3, #0
 800927c:	d1ce      	bne.n	800921c <HAL_SPI_Transmit+0x120>
 800927e:	e07c      	b.n	800937a <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d002      	beq.n	800928e <HAL_SPI_Transmit+0x192>
 8009288:	8afb      	ldrh	r3, [r7, #22]
 800928a:	2b01      	cmp	r3, #1
 800928c:	d170      	bne.n	8009370 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009292:	b29b      	uxth	r3, r3
 8009294:	2b01      	cmp	r3, #1
 8009296:	d912      	bls.n	80092be <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800929c:	881a      	ldrh	r2, [r3, #0]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a8:	1c9a      	adds	r2, r3, #2
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	3b02      	subs	r3, #2
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80092bc:	e058      	b.n	8009370 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	330c      	adds	r3, #12
 80092c8:	7812      	ldrb	r2, [r2, #0]
 80092ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d0:	1c5a      	adds	r2, r3, #1
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092da:	b29b      	uxth	r3, r3
 80092dc:	3b01      	subs	r3, #1
 80092de:	b29a      	uxth	r2, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80092e4:	e044      	b.n	8009370 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	f003 0302 	and.w	r3, r3, #2
 80092f0:	2b02      	cmp	r3, #2
 80092f2:	d12b      	bne.n	800934c <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d912      	bls.n	8009324 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009302:	881a      	ldrh	r2, [r3, #0]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800930e:	1c9a      	adds	r2, r3, #2
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009318:	b29b      	uxth	r3, r3
 800931a:	3b02      	subs	r3, #2
 800931c:	b29a      	uxth	r2, r3
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009322:	e025      	b.n	8009370 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	330c      	adds	r3, #12
 800932e:	7812      	ldrb	r2, [r2, #0]
 8009330:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009336:	1c5a      	adds	r2, r3, #1
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009340:	b29b      	uxth	r3, r3
 8009342:	3b01      	subs	r3, #1
 8009344:	b29a      	uxth	r2, r3
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	87da      	strh	r2, [r3, #62]	; 0x3e
 800934a:	e011      	b.n	8009370 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800934c:	f7f9 fb84 	bl	8002a58 <HAL_GetTick>
 8009350:	4602      	mov	r2, r0
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	683a      	ldr	r2, [r7, #0]
 8009358:	429a      	cmp	r2, r3
 800935a:	d803      	bhi.n	8009364 <HAL_SPI_Transmit+0x268>
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009362:	d102      	bne.n	800936a <HAL_SPI_Transmit+0x26e>
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d102      	bne.n	8009370 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800936a:	2303      	movs	r3, #3
 800936c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800936e:	e026      	b.n	80093be <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009374:	b29b      	uxth	r3, r3
 8009376:	2b00      	cmp	r3, #0
 8009378:	d1b5      	bne.n	80092e6 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800937a:	69ba      	ldr	r2, [r7, #24]
 800937c:	6839      	ldr	r1, [r7, #0]
 800937e:	68f8      	ldr	r0, [r7, #12]
 8009380:	f001 fa08 	bl	800a794 <SPI_EndRxTxTransaction>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d002      	beq.n	8009390 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2220      	movs	r2, #32
 800938e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d10a      	bne.n	80093ae <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009398:	2300      	movs	r3, #0
 800939a:	613b      	str	r3, [r7, #16]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	613b      	str	r3, [r7, #16]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	613b      	str	r3, [r7, #16]
 80093ac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d002      	beq.n	80093bc <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80093b6:	2301      	movs	r3, #1
 80093b8:	77fb      	strb	r3, [r7, #31]
 80093ba:	e000      	b.n	80093be <HAL_SPI_Transmit+0x2c2>
  }

error:
 80093bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2201      	movs	r2, #1
 80093c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80093ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3720      	adds	r7, #32
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b088      	sub	sp, #32
 80093dc:	af02      	add	r7, sp, #8
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	603b      	str	r3, [r7, #0]
 80093e4:	4613      	mov	r3, r2
 80093e6:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80093e8:	2300      	movs	r3, #0
 80093ea:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093f4:	d112      	bne.n	800941c <HAL_SPI_Receive+0x44>
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d10e      	bne.n	800941c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2204      	movs	r2, #4
 8009402:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009406:	88fa      	ldrh	r2, [r7, #6]
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	4613      	mov	r3, r2
 800940e:	68ba      	ldr	r2, [r7, #8]
 8009410:	68b9      	ldr	r1, [r7, #8]
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	f000 f910 	bl	8009638 <HAL_SPI_TransmitReceive>
 8009418:	4603      	mov	r3, r0
 800941a:	e109      	b.n	8009630 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009422:	2b01      	cmp	r3, #1
 8009424:	d101      	bne.n	800942a <HAL_SPI_Receive+0x52>
 8009426:	2302      	movs	r3, #2
 8009428:	e102      	b.n	8009630 <HAL_SPI_Receive+0x258>
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2201      	movs	r2, #1
 800942e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009432:	f7f9 fb11 	bl	8002a58 <HAL_GetTick>
 8009436:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800943e:	b2db      	uxtb	r3, r3
 8009440:	2b01      	cmp	r3, #1
 8009442:	d002      	beq.n	800944a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009444:	2302      	movs	r3, #2
 8009446:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009448:	e0e9      	b.n	800961e <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d002      	beq.n	8009456 <HAL_SPI_Receive+0x7e>
 8009450:	88fb      	ldrh	r3, [r7, #6]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d102      	bne.n	800945c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	75fb      	strb	r3, [r7, #23]
    goto error;
 800945a:	e0e0      	b.n	800961e <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2204      	movs	r2, #4
 8009460:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2200      	movs	r2, #0
 8009468:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	68ba      	ldr	r2, [r7, #8]
 800946e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	88fa      	ldrh	r2, [r7, #6]
 8009474:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	88fa      	ldrh	r2, [r7, #6]
 800947c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2200      	movs	r2, #0
 800948a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2200      	movs	r2, #0
 8009490:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2200      	movs	r2, #0
 8009496:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80094a6:	d908      	bls.n	80094ba <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	685a      	ldr	r2, [r3, #4]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80094b6:	605a      	str	r2, [r3, #4]
 80094b8:	e007      	b.n	80094ca <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	685a      	ldr	r2, [r3, #4]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80094c8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094d2:	d10f      	bne.n	80094f4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80094f2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094fe:	2b40      	cmp	r3, #64	; 0x40
 8009500:	d007      	beq.n	8009512 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009510:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800951a:	d867      	bhi.n	80095ec <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800951c:	e030      	b.n	8009580 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	f003 0301 	and.w	r3, r3, #1
 8009528:	2b01      	cmp	r3, #1
 800952a:	d117      	bne.n	800955c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f103 020c 	add.w	r2, r3, #12
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009538:	7812      	ldrb	r2, [r2, #0]
 800953a:	b2d2      	uxtb	r2, r2
 800953c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009542:	1c5a      	adds	r2, r3, #1
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800954e:	b29b      	uxth	r3, r3
 8009550:	3b01      	subs	r3, #1
 8009552:	b29a      	uxth	r2, r3
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800955a:	e011      	b.n	8009580 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800955c:	f7f9 fa7c 	bl	8002a58 <HAL_GetTick>
 8009560:	4602      	mov	r2, r0
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	1ad3      	subs	r3, r2, r3
 8009566:	683a      	ldr	r2, [r7, #0]
 8009568:	429a      	cmp	r2, r3
 800956a:	d803      	bhi.n	8009574 <HAL_SPI_Receive+0x19c>
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009572:	d102      	bne.n	800957a <HAL_SPI_Receive+0x1a2>
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d102      	bne.n	8009580 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800957a:	2303      	movs	r3, #3
 800957c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800957e:	e04e      	b.n	800961e <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009586:	b29b      	uxth	r3, r3
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1c8      	bne.n	800951e <HAL_SPI_Receive+0x146>
 800958c:	e034      	b.n	80095f8 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	f003 0301 	and.w	r3, r3, #1
 8009598:	2b01      	cmp	r3, #1
 800959a:	d115      	bne.n	80095c8 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	68da      	ldr	r2, [r3, #12]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a6:	b292      	uxth	r2, r2
 80095a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ae:	1c9a      	adds	r2, r3, #2
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	3b01      	subs	r3, #1
 80095be:	b29a      	uxth	r2, r3
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80095c6:	e011      	b.n	80095ec <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095c8:	f7f9 fa46 	bl	8002a58 <HAL_GetTick>
 80095cc:	4602      	mov	r2, r0
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	1ad3      	subs	r3, r2, r3
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d803      	bhi.n	80095e0 <HAL_SPI_Receive+0x208>
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095de:	d102      	bne.n	80095e6 <HAL_SPI_Receive+0x20e>
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d102      	bne.n	80095ec <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80095e6:	2303      	movs	r3, #3
 80095e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80095ea:	e018      	b.n	800961e <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d1ca      	bne.n	800958e <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095f8:	693a      	ldr	r2, [r7, #16]
 80095fa:	6839      	ldr	r1, [r7, #0]
 80095fc:	68f8      	ldr	r0, [r7, #12]
 80095fe:	f001 f871 	bl	800a6e4 <SPI_EndRxTransaction>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2220      	movs	r2, #32
 800960c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009612:	2b00      	cmp	r3, #0
 8009614:	d002      	beq.n	800961c <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	75fb      	strb	r3, [r7, #23]
 800961a:	e000      	b.n	800961e <HAL_SPI_Receive+0x246>
  }

error :
 800961c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2201      	movs	r2, #1
 8009622:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2200      	movs	r2, #0
 800962a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800962e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009630:	4618      	mov	r0, r3
 8009632:	3718      	adds	r7, #24
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b08a      	sub	sp, #40	; 0x28
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	607a      	str	r2, [r7, #4]
 8009644:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009646:	2301      	movs	r3, #1
 8009648:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800964a:	2300      	movs	r3, #0
 800964c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009656:	2b01      	cmp	r3, #1
 8009658:	d101      	bne.n	800965e <HAL_SPI_TransmitReceive+0x26>
 800965a:	2302      	movs	r3, #2
 800965c:	e1fb      	b.n	8009a56 <HAL_SPI_TransmitReceive+0x41e>
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2201      	movs	r2, #1
 8009662:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009666:	f7f9 f9f7 	bl	8002a58 <HAL_GetTick>
 800966a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009672:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800967a:	887b      	ldrh	r3, [r7, #2]
 800967c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800967e:	887b      	ldrh	r3, [r7, #2]
 8009680:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009682:	7efb      	ldrb	r3, [r7, #27]
 8009684:	2b01      	cmp	r3, #1
 8009686:	d00e      	beq.n	80096a6 <HAL_SPI_TransmitReceive+0x6e>
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800968e:	d106      	bne.n	800969e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d102      	bne.n	800969e <HAL_SPI_TransmitReceive+0x66>
 8009698:	7efb      	ldrb	r3, [r7, #27]
 800969a:	2b04      	cmp	r3, #4
 800969c:	d003      	beq.n	80096a6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800969e:	2302      	movs	r3, #2
 80096a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80096a4:	e1cd      	b.n	8009a42 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d005      	beq.n	80096b8 <HAL_SPI_TransmitReceive+0x80>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d002      	beq.n	80096b8 <HAL_SPI_TransmitReceive+0x80>
 80096b2:	887b      	ldrh	r3, [r7, #2]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d103      	bne.n	80096c0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80096b8:	2301      	movs	r3, #1
 80096ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80096be:	e1c0      	b.n	8009a42 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	2b04      	cmp	r3, #4
 80096ca:	d003      	beq.n	80096d4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2205      	movs	r2, #5
 80096d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2200      	movs	r2, #0
 80096d8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	887a      	ldrh	r2, [r7, #2]
 80096e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	887a      	ldrh	r2, [r7, #2]
 80096ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	68ba      	ldr	r2, [r7, #8]
 80096f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	887a      	ldrh	r2, [r7, #2]
 80096fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	887a      	ldrh	r2, [r7, #2]
 8009700:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2200      	movs	r2, #0
 8009706:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2200      	movs	r2, #0
 800970c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009716:	d802      	bhi.n	800971e <HAL_SPI_TransmitReceive+0xe6>
 8009718:	8a3b      	ldrh	r3, [r7, #16]
 800971a:	2b01      	cmp	r3, #1
 800971c:	d908      	bls.n	8009730 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	685a      	ldr	r2, [r3, #4]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800972c:	605a      	str	r2, [r3, #4]
 800972e:	e007      	b.n	8009740 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	685a      	ldr	r2, [r3, #4]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800973e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800974a:	2b40      	cmp	r3, #64	; 0x40
 800974c:	d007      	beq.n	800975e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800975c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009766:	d97c      	bls.n	8009862 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d002      	beq.n	8009776 <HAL_SPI_TransmitReceive+0x13e>
 8009770:	8a7b      	ldrh	r3, [r7, #18]
 8009772:	2b01      	cmp	r3, #1
 8009774:	d169      	bne.n	800984a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977a:	881a      	ldrh	r2, [r3, #0]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009786:	1c9a      	adds	r2, r3, #2
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009790:	b29b      	uxth	r3, r3
 8009792:	3b01      	subs	r3, #1
 8009794:	b29a      	uxth	r2, r3
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800979a:	e056      	b.n	800984a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	f003 0302 	and.w	r3, r3, #2
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	d11b      	bne.n	80097e2 <HAL_SPI_TransmitReceive+0x1aa>
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d016      	beq.n	80097e2 <HAL_SPI_TransmitReceive+0x1aa>
 80097b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d113      	bne.n	80097e2 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097be:	881a      	ldrh	r2, [r3, #0]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ca:	1c9a      	adds	r2, r3, #2
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	3b01      	subs	r3, #1
 80097d8:	b29a      	uxth	r2, r3
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80097de:	2300      	movs	r3, #0
 80097e0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	f003 0301 	and.w	r3, r3, #1
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d11c      	bne.n	800982a <HAL_SPI_TransmitReceive+0x1f2>
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d016      	beq.n	800982a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	68da      	ldr	r2, [r3, #12]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009806:	b292      	uxth	r2, r2
 8009808:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800980e:	1c9a      	adds	r2, r3, #2
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800981a:	b29b      	uxth	r3, r3
 800981c:	3b01      	subs	r3, #1
 800981e:	b29a      	uxth	r2, r3
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009826:	2301      	movs	r3, #1
 8009828:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800982a:	f7f9 f915 	bl	8002a58 <HAL_GetTick>
 800982e:	4602      	mov	r2, r0
 8009830:	69fb      	ldr	r3, [r7, #28]
 8009832:	1ad3      	subs	r3, r2, r3
 8009834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009836:	429a      	cmp	r2, r3
 8009838:	d807      	bhi.n	800984a <HAL_SPI_TransmitReceive+0x212>
 800983a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009840:	d003      	beq.n	800984a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8009842:	2303      	movs	r3, #3
 8009844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009848:	e0fb      	b.n	8009a42 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800984e:	b29b      	uxth	r3, r3
 8009850:	2b00      	cmp	r3, #0
 8009852:	d1a3      	bne.n	800979c <HAL_SPI_TransmitReceive+0x164>
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800985a:	b29b      	uxth	r3, r3
 800985c:	2b00      	cmp	r3, #0
 800985e:	d19d      	bne.n	800979c <HAL_SPI_TransmitReceive+0x164>
 8009860:	e0df      	b.n	8009a22 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d003      	beq.n	8009872 <HAL_SPI_TransmitReceive+0x23a>
 800986a:	8a7b      	ldrh	r3, [r7, #18]
 800986c:	2b01      	cmp	r3, #1
 800986e:	f040 80cb 	bne.w	8009a08 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009876:	b29b      	uxth	r3, r3
 8009878:	2b01      	cmp	r3, #1
 800987a:	d912      	bls.n	80098a2 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009880:	881a      	ldrh	r2, [r3, #0]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988c:	1c9a      	adds	r2, r3, #2
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009896:	b29b      	uxth	r3, r3
 8009898:	3b02      	subs	r3, #2
 800989a:	b29a      	uxth	r2, r3
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80098a0:	e0b2      	b.n	8009a08 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	330c      	adds	r3, #12
 80098ac:	7812      	ldrb	r2, [r2, #0]
 80098ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b4:	1c5a      	adds	r2, r3, #1
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098be:	b29b      	uxth	r3, r3
 80098c0:	3b01      	subs	r3, #1
 80098c2:	b29a      	uxth	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098c8:	e09e      	b.n	8009a08 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	f003 0302 	and.w	r3, r3, #2
 80098d4:	2b02      	cmp	r3, #2
 80098d6:	d134      	bne.n	8009942 <HAL_SPI_TransmitReceive+0x30a>
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098dc:	b29b      	uxth	r3, r3
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d02f      	beq.n	8009942 <HAL_SPI_TransmitReceive+0x30a>
 80098e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d12c      	bne.n	8009942 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d912      	bls.n	8009918 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f6:	881a      	ldrh	r2, [r3, #0]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009902:	1c9a      	adds	r2, r3, #2
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800990c:	b29b      	uxth	r3, r3
 800990e:	3b02      	subs	r3, #2
 8009910:	b29a      	uxth	r2, r3
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009916:	e012      	b.n	800993e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	330c      	adds	r3, #12
 8009922:	7812      	ldrb	r2, [r2, #0]
 8009924:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992a:	1c5a      	adds	r2, r3, #1
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009934:	b29b      	uxth	r3, r3
 8009936:	3b01      	subs	r3, #1
 8009938:	b29a      	uxth	r2, r3
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800993e:	2300      	movs	r3, #0
 8009940:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	f003 0301 	and.w	r3, r3, #1
 800994c:	2b01      	cmp	r3, #1
 800994e:	d148      	bne.n	80099e2 <HAL_SPI_TransmitReceive+0x3aa>
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009956:	b29b      	uxth	r3, r3
 8009958:	2b00      	cmp	r3, #0
 800995a:	d042      	beq.n	80099e2 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009962:	b29b      	uxth	r3, r3
 8009964:	2b01      	cmp	r3, #1
 8009966:	d923      	bls.n	80099b0 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	68da      	ldr	r2, [r3, #12]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009972:	b292      	uxth	r2, r2
 8009974:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800997a:	1c9a      	adds	r2, r3, #2
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009986:	b29b      	uxth	r3, r3
 8009988:	3b02      	subs	r3, #2
 800998a:	b29a      	uxth	r2, r3
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009998:	b29b      	uxth	r3, r3
 800999a:	2b01      	cmp	r3, #1
 800999c:	d81f      	bhi.n	80099de <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	685a      	ldr	r2, [r3, #4]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80099ac:	605a      	str	r2, [r3, #4]
 80099ae:	e016      	b.n	80099de <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f103 020c 	add.w	r2, r3, #12
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099bc:	7812      	ldrb	r2, [r2, #0]
 80099be:	b2d2      	uxtb	r2, r2
 80099c0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c6:	1c5a      	adds	r2, r3, #1
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	3b01      	subs	r3, #1
 80099d6:	b29a      	uxth	r2, r3
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80099de:	2301      	movs	r3, #1
 80099e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80099e2:	f7f9 f839 	bl	8002a58 <HAL_GetTick>
 80099e6:	4602      	mov	r2, r0
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	1ad3      	subs	r3, r2, r3
 80099ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d803      	bhi.n	80099fa <HAL_SPI_TransmitReceive+0x3c2>
 80099f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099f8:	d102      	bne.n	8009a00 <HAL_SPI_TransmitReceive+0x3c8>
 80099fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d103      	bne.n	8009a08 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8009a00:	2303      	movs	r3, #3
 8009a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009a06:	e01c      	b.n	8009a42 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	f47f af5b 	bne.w	80098ca <HAL_SPI_TransmitReceive+0x292>
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f47f af54 	bne.w	80098ca <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009a22:	69fa      	ldr	r2, [r7, #28]
 8009a24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a26:	68f8      	ldr	r0, [r7, #12]
 8009a28:	f000 feb4 	bl	800a794 <SPI_EndRxTxTransaction>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d006      	beq.n	8009a40 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2220      	movs	r2, #32
 8009a3c:	661a      	str	r2, [r3, #96]	; 0x60
 8009a3e:	e000      	b.n	8009a42 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8009a40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2201      	movs	r2, #1
 8009a46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009a52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3728      	adds	r7, #40	; 0x28
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
	...

08009a60 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b086      	sub	sp, #24
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	4613      	mov	r3, r2
 8009a6c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d101      	bne.n	8009a80 <HAL_SPI_Transmit_DMA+0x20>
 8009a7c:	2302      	movs	r3, #2
 8009a7e:	e0d8      	b.n	8009c32 <HAL_SPI_Transmit_DMA+0x1d2>
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2201      	movs	r2, #1
 8009a84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d002      	beq.n	8009a9a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8009a94:	2302      	movs	r3, #2
 8009a96:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009a98:	e0c6      	b.n	8009c28 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d002      	beq.n	8009aa6 <HAL_SPI_Transmit_DMA+0x46>
 8009aa0:	88fb      	ldrh	r3, [r7, #6]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d102      	bne.n	8009aac <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009aaa:	e0bd      	b.n	8009c28 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2203      	movs	r2, #3
 8009ab0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	68ba      	ldr	r2, [r7, #8]
 8009abe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	88fa      	ldrh	r2, [r7, #6]
 8009ac4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	88fa      	ldrh	r2, [r7, #6]
 8009aca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2200      	movs	r2, #0
 8009adc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009af6:	d10f      	bne.n	8009b18 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b16:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b1c:	4a47      	ldr	r2, [pc, #284]	; (8009c3c <HAL_SPI_Transmit_DMA+0x1dc>)
 8009b1e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b24:	4a46      	ldr	r2, [pc, #280]	; (8009c40 <HAL_SPI_Transmit_DMA+0x1e0>)
 8009b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b2c:	4a45      	ldr	r2, [pc, #276]	; (8009c44 <HAL_SPI_Transmit_DMA+0x1e4>)
 8009b2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b34:	2200      	movs	r2, #0
 8009b36:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	685a      	ldr	r2, [r3, #4]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009b46:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009b50:	d82d      	bhi.n	8009bae <HAL_SPI_Transmit_DMA+0x14e>
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b56:	699b      	ldr	r3, [r3, #24]
 8009b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b5c:	d127      	bne.n	8009bae <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	f003 0301 	and.w	r3, r3, #1
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d10f      	bne.n	8009b8c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	685a      	ldr	r2, [r3, #4]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009b7a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	085b      	lsrs	r3, r3, #1
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009b8a:	e010      	b.n	8009bae <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	685a      	ldr	r2, [r3, #4]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b9a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	085b      	lsrs	r3, r3, #1
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	b29a      	uxth	r2, r3
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	330c      	adds	r3, #12
 8009bbe:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bc4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009bc6:	f7f9 f931 	bl	8002e2c <HAL_DMA_Start_IT>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d00c      	beq.n	8009bea <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bd4:	f043 0210 	orr.w	r2, r3, #16
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8009be8:	e01e      	b.n	8009c28 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bf4:	2b40      	cmp	r3, #64	; 0x40
 8009bf6:	d007      	beq.n	8009c08 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c06:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	685a      	ldr	r2, [r3, #4]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f042 0220 	orr.w	r2, r2, #32
 8009c16:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	685a      	ldr	r2, [r3, #4]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f042 0202 	orr.w	r2, r2, #2
 8009c26:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3718      	adds	r7, #24
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	0800a413 	.word	0x0800a413
 8009c40:	0800a235 	.word	0x0800a235
 8009c44:	0800a467 	.word	0x0800a467

08009c48 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b086      	sub	sp, #24
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	4613      	mov	r3, r2
 8009c54:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009c56:	2300      	movs	r3, #0
 8009c58:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d110      	bne.n	8009c84 <HAL_SPI_Receive_DMA+0x3c>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c6a:	d10b      	bne.n	8009c84 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2204      	movs	r2, #4
 8009c70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8009c74:	88fb      	ldrh	r3, [r7, #6]
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	68b9      	ldr	r1, [r7, #8]
 8009c7a:	68f8      	ldr	r0, [r7, #12]
 8009c7c:	f000 f908 	bl	8009e90 <HAL_SPI_TransmitReceive_DMA>
 8009c80:	4603      	mov	r3, r0
 8009c82:	e0fb      	b.n	8009e7c <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d101      	bne.n	8009c92 <HAL_SPI_Receive_DMA+0x4a>
 8009c8e:	2302      	movs	r3, #2
 8009c90:	e0f4      	b.n	8009e7c <HAL_SPI_Receive_DMA+0x234>
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2201      	movs	r2, #1
 8009c96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d002      	beq.n	8009cac <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8009ca6:	2302      	movs	r3, #2
 8009ca8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009caa:	e0e2      	b.n	8009e72 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d002      	beq.n	8009cb8 <HAL_SPI_Receive_DMA+0x70>
 8009cb2:	88fb      	ldrh	r3, [r7, #6]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d102      	bne.n	8009cbe <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009cbc:	e0d9      	b.n	8009e72 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2204      	movs	r2, #4
 8009cc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	68ba      	ldr	r2, [r7, #8]
 8009cd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	88fa      	ldrh	r2, [r7, #6]
 8009cd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	88fa      	ldrh	r2, [r7, #6]
 8009cde:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2200      	movs	r2, #0
 8009cec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d02:	d10f      	bne.n	8009d24 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d12:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009d22:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	685a      	ldr	r2, [r3, #4]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d32:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009d3c:	d908      	bls.n	8009d50 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	685a      	ldr	r2, [r3, #4]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009d4c:	605a      	str	r2, [r3, #4]
 8009d4e:	e042      	b.n	8009dd6 <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	685a      	ldr	r2, [r3, #4]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009d5e:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d64:	699b      	ldr	r3, [r3, #24]
 8009d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d6a:	d134      	bne.n	8009dd6 <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	685a      	ldr	r2, [r3, #4]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009d7a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	f003 0301 	and.w	r3, r3, #1
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d111      	bne.n	8009db0 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	685a      	ldr	r2, [r3, #4]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d9a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	085b      	lsrs	r3, r3, #1
 8009da6:	b29a      	uxth	r2, r3
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009dae:	e012      	b.n	8009dd6 <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	685a      	ldr	r2, [r3, #4]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009dbe:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	085b      	lsrs	r3, r3, #1
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	3301      	adds	r3, #1
 8009dce:	b29a      	uxth	r2, r3
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dda:	4a2a      	ldr	r2, [pc, #168]	; (8009e84 <HAL_SPI_Receive_DMA+0x23c>)
 8009ddc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009de2:	4a29      	ldr	r2, [pc, #164]	; (8009e88 <HAL_SPI_Receive_DMA+0x240>)
 8009de4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dea:	4a28      	ldr	r2, [pc, #160]	; (8009e8c <HAL_SPI_Receive_DMA+0x244>)
 8009dec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009df2:	2200      	movs	r2, #0
 8009df4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	330c      	adds	r3, #12
 8009e00:	4619      	mov	r1, r3
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e06:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009e0e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009e10:	f7f9 f80c 	bl	8002e2c <HAL_DMA_Start_IT>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00c      	beq.n	8009e34 <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e1e:	f043 0210 	orr.w	r2, r3, #16
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8009e32:	e01e      	b.n	8009e72 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e3e:	2b40      	cmp	r3, #64	; 0x40
 8009e40:	d007      	beq.n	8009e52 <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e50:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	685a      	ldr	r2, [r3, #4]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f042 0220 	orr.w	r2, r2, #32
 8009e60:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	685a      	ldr	r2, [r3, #4]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f042 0201 	orr.w	r2, r2, #1
 8009e70:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2200      	movs	r2, #0
 8009e76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3718      	adds	r7, #24
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	0800a42f 	.word	0x0800a42f
 8009e88:	0800a2db 	.word	0x0800a2db
 8009e8c:	0800a467 	.word	0x0800a467

08009e90 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b086      	sub	sp, #24
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
 8009e9c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d101      	bne.n	8009eb0 <HAL_SPI_TransmitReceive_DMA+0x20>
 8009eac:	2302      	movs	r3, #2
 8009eae:	e16c      	b.n	800a18a <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009ebe:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8009ec6:	7dbb      	ldrb	r3, [r7, #22]
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d00d      	beq.n	8009ee8 <HAL_SPI_TransmitReceive_DMA+0x58>
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ed2:	d106      	bne.n	8009ee2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d102      	bne.n	8009ee2 <HAL_SPI_TransmitReceive_DMA+0x52>
 8009edc:	7dbb      	ldrb	r3, [r7, #22]
 8009ede:	2b04      	cmp	r3, #4
 8009ee0:	d002      	beq.n	8009ee8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8009ee2:	2302      	movs	r3, #2
 8009ee4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009ee6:	e14b      	b.n	800a180 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d005      	beq.n	8009efa <HAL_SPI_TransmitReceive_DMA+0x6a>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d002      	beq.n	8009efa <HAL_SPI_TransmitReceive_DMA+0x6a>
 8009ef4:	887b      	ldrh	r3, [r7, #2]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d102      	bne.n	8009f00 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009efe:	e13f      	b.n	800a180 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	2b04      	cmp	r3, #4
 8009f0a:	d003      	beq.n	8009f14 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2205      	movs	r2, #5
 8009f10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2200      	movs	r2, #0
 8009f18:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	68ba      	ldr	r2, [r7, #8]
 8009f1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	887a      	ldrh	r2, [r7, #2]
 8009f24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	887a      	ldrh	r2, [r7, #2]
 8009f2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	887a      	ldrh	r2, [r7, #2]
 8009f36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	887a      	ldrh	r2, [r7, #2]
 8009f3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2200      	movs	r2, #0
 8009f46:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	685a      	ldr	r2, [r3, #4]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8009f5c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009f66:	d908      	bls.n	8009f7a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	685a      	ldr	r2, [r3, #4]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009f76:	605a      	str	r2, [r3, #4]
 8009f78:	e06f      	b.n	800a05a <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	685a      	ldr	r2, [r3, #4]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009f88:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f8e:	699b      	ldr	r3, [r3, #24]
 8009f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f94:	d126      	bne.n	8009fe4 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8009f9a:	f003 0301 	and.w	r3, r3, #1
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d10f      	bne.n	8009fc2 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	685a      	ldr	r2, [r3, #4]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009fb0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	085b      	lsrs	r3, r3, #1
 8009fba:	b29a      	uxth	r2, r3
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009fc0:	e010      	b.n	8009fe4 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	685a      	ldr	r2, [r3, #4]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009fd0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	085b      	lsrs	r3, r3, #1
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	3301      	adds	r3, #1
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fe8:	699b      	ldr	r3, [r3, #24]
 8009fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fee:	d134      	bne.n	800a05a <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	685a      	ldr	r2, [r3, #4]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009ffe:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a006:	b29b      	uxth	r3, r3
 800a008:	f003 0301 	and.w	r3, r3, #1
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d111      	bne.n	800a034 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	685a      	ldr	r2, [r3, #4]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a01e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a026:	b29b      	uxth	r3, r3
 800a028:	085b      	lsrs	r3, r3, #1
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800a032:	e012      	b.n	800a05a <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	685a      	ldr	r2, [r3, #4]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a042:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	085b      	lsrs	r3, r3, #1
 800a04e:	b29b      	uxth	r3, r3
 800a050:	3301      	adds	r3, #1
 800a052:	b29a      	uxth	r2, r3
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a060:	b2db      	uxtb	r3, r3
 800a062:	2b04      	cmp	r3, #4
 800a064:	d108      	bne.n	800a078 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a06a:	4a4a      	ldr	r2, [pc, #296]	; (800a194 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800a06c:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a072:	4a49      	ldr	r2, [pc, #292]	; (800a198 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800a074:	62da      	str	r2, [r3, #44]	; 0x2c
 800a076:	e007      	b.n	800a088 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a07c:	4a47      	ldr	r2, [pc, #284]	; (800a19c <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800a07e:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a084:	4a46      	ldr	r2, [pc, #280]	; (800a1a0 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800a086:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a08c:	4a45      	ldr	r2, [pc, #276]	; (800a1a4 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800a08e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a094:	2200      	movs	r2, #0
 800a096:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	330c      	adds	r3, #12
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a0b0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a0b2:	f7f8 febb 	bl	8002e2c <HAL_DMA_Start_IT>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d00c      	beq.n	800a0d6 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0c0:	f043 0210 	orr.w	r2, r3, #16
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800a0d4:	e054      	b.n	800a180 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	685a      	ldr	r2, [r3, #4]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f042 0201 	orr.w	r2, r2, #1
 800a0e4:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a102:	2200      	movs	r2, #0
 800a104:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a10e:	4619      	mov	r1, r3
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	330c      	adds	r3, #12
 800a116:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a11c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a11e:	f7f8 fe85 	bl	8002e2c <HAL_DMA_Start_IT>
 800a122:	4603      	mov	r3, r0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00c      	beq.n	800a142 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a12c:	f043 0210 	orr.w	r2, r3, #16
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800a140:	e01e      	b.n	800a180 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a14c:	2b40      	cmp	r3, #64	; 0x40
 800a14e:	d007      	beq.n	800a160 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a15e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	685a      	ldr	r2, [r3, #4]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f042 0220 	orr.w	r2, r2, #32
 800a16e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	685a      	ldr	r2, [r3, #4]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f042 0202 	orr.w	r2, r2, #2
 800a17e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2200      	movs	r2, #0
 800a184:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a188:	7dfb      	ldrb	r3, [r7, #23]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3718      	adds	r7, #24
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	0800a42f 	.word	0x0800a42f
 800a198:	0800a2db 	.word	0x0800a2db
 800a19c:	0800a44b 	.word	0x0800a44b
 800a1a0:	0800a383 	.word	0x0800a383
 800a1a4:	0800a467 	.word	0x0800a467

0800a1a8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a1b0:	bf00      	nop
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a1c4:	bf00      	nop
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a1d8:	bf00      	nop
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a1ec:	bf00      	nop
 800a1ee:	370c      	adds	r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800a200:	bf00      	nop
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800a214:	bf00      	nop
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a220:	b480      	push	{r7}
 800a222:	b083      	sub	sp, #12
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a228:	bf00      	nop
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b086      	sub	sp, #24
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a240:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a242:	f7f8 fc09 	bl	8002a58 <HAL_GetTick>
 800a246:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f003 0320 	and.w	r3, r3, #32
 800a252:	2b20      	cmp	r3, #32
 800a254:	d03b      	beq.n	800a2ce <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	685a      	ldr	r2, [r3, #4]
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f022 0220 	bic.w	r2, r2, #32
 800a264:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	685a      	ldr	r2, [r3, #4]
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f022 0202 	bic.w	r2, r2, #2
 800a274:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a276:	693a      	ldr	r2, [r7, #16]
 800a278:	2164      	movs	r1, #100	; 0x64
 800a27a:	6978      	ldr	r0, [r7, #20]
 800a27c:	f000 fa8a 	bl	800a794 <SPI_EndRxTxTransaction>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d005      	beq.n	800a292 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a28a:	f043 0220 	orr.w	r2, r3, #32
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d10a      	bne.n	800a2b0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a29a:	2300      	movs	r3, #0
 800a29c:	60fb      	str	r3, [r7, #12]
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	60fb      	str	r3, [r7, #12]
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	60fb      	str	r3, [r7, #12]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d003      	beq.n	800a2ce <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a2c6:	6978      	ldr	r0, [r7, #20]
 800a2c8:	f7ff ffaa 	bl	800a220 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a2cc:	e002      	b.n	800a2d4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800a2ce:	6978      	ldr	r0, [r7, #20]
 800a2d0:	f7ff ff6a 	bl	800a1a8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a2d4:	3718      	adds	r7, #24
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}

0800a2da <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	b084      	sub	sp, #16
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e6:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a2e8:	f7f8 fbb6 	bl	8002a58 <HAL_GetTick>
 800a2ec:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f003 0320 	and.w	r3, r3, #32
 800a2f8:	2b20      	cmp	r3, #32
 800a2fa:	d03c      	beq.n	800a376 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	685a      	ldr	r2, [r3, #4]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f022 0220 	bic.w	r2, r2, #32
 800a30a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d10d      	bne.n	800a330 <SPI_DMAReceiveCplt+0x56>
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a31c:	d108      	bne.n	800a330 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	685a      	ldr	r2, [r3, #4]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f022 0203 	bic.w	r2, r2, #3
 800a32c:	605a      	str	r2, [r3, #4]
 800a32e:	e007      	b.n	800a340 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	685a      	ldr	r2, [r3, #4]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f022 0201 	bic.w	r2, r2, #1
 800a33e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a340:	68ba      	ldr	r2, [r7, #8]
 800a342:	2164      	movs	r1, #100	; 0x64
 800a344:	68f8      	ldr	r0, [r7, #12]
 800a346:	f000 f9cd 	bl	800a6e4 <SPI_EndRxTransaction>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d002      	beq.n	800a356 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2220      	movs	r2, #32
 800a354:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2200      	movs	r2, #0
 800a35a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2201      	movs	r2, #1
 800a362:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d003      	beq.n	800a376 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a36e:	68f8      	ldr	r0, [r7, #12]
 800a370:	f7ff ff56 	bl	800a220 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a374:	e002      	b.n	800a37c <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800a376:	68f8      	ldr	r0, [r7, #12]
 800a378:	f7ff ff20 	bl	800a1bc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a382:	b580      	push	{r7, lr}
 800a384:	b084      	sub	sp, #16
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a38e:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a390:	f7f8 fb62 	bl	8002a58 <HAL_GetTick>
 800a394:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f003 0320 	and.w	r3, r3, #32
 800a3a0:	2b20      	cmp	r3, #32
 800a3a2:	d030      	beq.n	800a406 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	685a      	ldr	r2, [r3, #4]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f022 0220 	bic.w	r2, r2, #32
 800a3b2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a3b4:	68ba      	ldr	r2, [r7, #8]
 800a3b6:	2164      	movs	r1, #100	; 0x64
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f000 f9eb 	bl	800a794 <SPI_EndRxTxTransaction>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d005      	beq.n	800a3d0 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3c8:	f043 0220 	orr.w	r2, r3, #32
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	685a      	ldr	r2, [r3, #4]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f022 0203 	bic.w	r2, r2, #3
 800a3de:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d003      	beq.n	800a406 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a3fe:	68f8      	ldr	r0, [r7, #12]
 800a400:	f7ff ff0e 	bl	800a220 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a404:	e002      	b.n	800a40c <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800a406:	68f8      	ldr	r0, [r7, #12]
 800a408:	f7ff fee2 	bl	800a1d0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b084      	sub	sp, #16
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a41e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	f7ff fedf 	bl	800a1e4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a426:	bf00      	nop
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}

0800a42e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a42e:	b580      	push	{r7, lr}
 800a430:	b084      	sub	sp, #16
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a43a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f7ff fedb 	bl	800a1f8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a442:	bf00      	nop
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b084      	sub	sp, #16
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a456:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f7ff fed7 	bl	800a20c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a45e:	bf00      	nop
 800a460:	3710      	adds	r7, #16
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}

0800a466 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a466:	b580      	push	{r7, lr}
 800a468:	b084      	sub	sp, #16
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a472:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	685a      	ldr	r2, [r3, #4]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f022 0203 	bic.w	r2, r2, #3
 800a482:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a488:	f043 0210 	orr.w	r2, r3, #16
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2201      	movs	r2, #1
 800a494:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f7ff fec1 	bl	800a220 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a49e:	bf00      	nop
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
	...

0800a4a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b088      	sub	sp, #32
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	603b      	str	r3, [r7, #0]
 800a4b4:	4613      	mov	r3, r2
 800a4b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a4b8:	f7f8 face 	bl	8002a58 <HAL_GetTick>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c0:	1a9b      	subs	r3, r3, r2
 800a4c2:	683a      	ldr	r2, [r7, #0]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a4c8:	f7f8 fac6 	bl	8002a58 <HAL_GetTick>
 800a4cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a4ce:	4b39      	ldr	r3, [pc, #228]	; (800a5b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	015b      	lsls	r3, r3, #5
 800a4d4:	0d1b      	lsrs	r3, r3, #20
 800a4d6:	69fa      	ldr	r2, [r7, #28]
 800a4d8:	fb02 f303 	mul.w	r3, r2, r3
 800a4dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a4de:	e054      	b.n	800a58a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4e6:	d050      	beq.n	800a58a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a4e8:	f7f8 fab6 	bl	8002a58 <HAL_GetTick>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	1ad3      	subs	r3, r2, r3
 800a4f2:	69fa      	ldr	r2, [r7, #28]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d902      	bls.n	800a4fe <SPI_WaitFlagStateUntilTimeout+0x56>
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d13d      	bne.n	800a57a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	685a      	ldr	r2, [r3, #4]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a50c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a516:	d111      	bne.n	800a53c <SPI_WaitFlagStateUntilTimeout+0x94>
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a520:	d004      	beq.n	800a52c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a52a:	d107      	bne.n	800a53c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a53a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a544:	d10f      	bne.n	800a566 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a554:	601a      	str	r2, [r3, #0]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a564:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2201      	movs	r2, #1
 800a56a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2200      	movs	r2, #0
 800a572:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a576:	2303      	movs	r3, #3
 800a578:	e017      	b.n	800a5aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d101      	bne.n	800a584 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a580:	2300      	movs	r3, #0
 800a582:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	3b01      	subs	r3, #1
 800a588:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	689a      	ldr	r2, [r3, #8]
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	4013      	ands	r3, r2
 800a594:	68ba      	ldr	r2, [r7, #8]
 800a596:	429a      	cmp	r2, r3
 800a598:	bf0c      	ite	eq
 800a59a:	2301      	moveq	r3, #1
 800a59c:	2300      	movne	r3, #0
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	79fb      	ldrb	r3, [r7, #7]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d19b      	bne.n	800a4e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3720      	adds	r7, #32
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	2000000c 	.word	0x2000000c

0800a5b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b08a      	sub	sp, #40	; 0x28
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	607a      	str	r2, [r7, #4]
 800a5c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a5ca:	f7f8 fa45 	bl	8002a58 <HAL_GetTick>
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d2:	1a9b      	subs	r3, r3, r2
 800a5d4:	683a      	ldr	r2, [r7, #0]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a5da:	f7f8 fa3d 	bl	8002a58 <HAL_GetTick>
 800a5de:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	330c      	adds	r3, #12
 800a5e6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a5e8:	4b3d      	ldr	r3, [pc, #244]	; (800a6e0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	4613      	mov	r3, r2
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	4413      	add	r3, r2
 800a5f2:	00da      	lsls	r2, r3, #3
 800a5f4:	1ad3      	subs	r3, r2, r3
 800a5f6:	0d1b      	lsrs	r3, r3, #20
 800a5f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5fa:	fb02 f303 	mul.w	r3, r2, r3
 800a5fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a600:	e060      	b.n	800a6c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a608:	d107      	bne.n	800a61a <SPI_WaitFifoStateUntilTimeout+0x62>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d104      	bne.n	800a61a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a610:	69fb      	ldr	r3, [r7, #28]
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	b2db      	uxtb	r3, r3
 800a616:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a618:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a620:	d050      	beq.n	800a6c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a622:	f7f8 fa19 	bl	8002a58 <HAL_GetTick>
 800a626:	4602      	mov	r2, r0
 800a628:	6a3b      	ldr	r3, [r7, #32]
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a62e:	429a      	cmp	r2, r3
 800a630:	d902      	bls.n	800a638 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a634:	2b00      	cmp	r3, #0
 800a636:	d13d      	bne.n	800a6b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	685a      	ldr	r2, [r3, #4]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a646:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a650:	d111      	bne.n	800a676 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a65a:	d004      	beq.n	800a666 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a664:	d107      	bne.n	800a676 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a674:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a67a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a67e:	d10f      	bne.n	800a6a0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a68e:	601a      	str	r2, [r3, #0]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a69e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a6b0:	2303      	movs	r3, #3
 800a6b2:	e010      	b.n	800a6d6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a6b4:	69bb      	ldr	r3, [r7, #24]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d101      	bne.n	800a6be <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	3b01      	subs	r3, #1
 800a6c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	689a      	ldr	r2, [r3, #8]
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	4013      	ands	r3, r2
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d196      	bne.n	800a602 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3728      	adds	r7, #40	; 0x28
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	2000000c 	.word	0x2000000c

0800a6e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b086      	sub	sp, #24
 800a6e8:	af02      	add	r7, sp, #8
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a6f8:	d111      	bne.n	800a71e <SPI_EndRxTransaction+0x3a>
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a702:	d004      	beq.n	800a70e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a70c:	d107      	bne.n	800a71e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a71c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	9300      	str	r3, [sp, #0]
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	2200      	movs	r2, #0
 800a726:	2180      	movs	r1, #128	; 0x80
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f7ff febd 	bl	800a4a8 <SPI_WaitFlagStateUntilTimeout>
 800a72e:	4603      	mov	r3, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d007      	beq.n	800a744 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a738:	f043 0220 	orr.w	r2, r3, #32
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a740:	2303      	movs	r3, #3
 800a742:	e023      	b.n	800a78c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a74c:	d11d      	bne.n	800a78a <SPI_EndRxTransaction+0xa6>
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a756:	d004      	beq.n	800a762 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a760:	d113      	bne.n	800a78a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	9300      	str	r3, [sp, #0]
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	2200      	movs	r2, #0
 800a76a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a76e:	68f8      	ldr	r0, [r7, #12]
 800a770:	f7ff ff22 	bl	800a5b8 <SPI_WaitFifoStateUntilTimeout>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	d007      	beq.n	800a78a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a77e:	f043 0220 	orr.w	r2, r3, #32
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a786:	2303      	movs	r3, #3
 800a788:	e000      	b.n	800a78c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b086      	sub	sp, #24
 800a798:	af02      	add	r7, sp, #8
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a7ac:	68f8      	ldr	r0, [r7, #12]
 800a7ae:	f7ff ff03 	bl	800a5b8 <SPI_WaitFifoStateUntilTimeout>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d007      	beq.n	800a7c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7bc:	f043 0220 	orr.w	r2, r3, #32
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a7c4:	2303      	movs	r3, #3
 800a7c6:	e027      	b.n	800a818 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	9300      	str	r3, [sp, #0]
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	2180      	movs	r1, #128	; 0x80
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f7ff fe68 	bl	800a4a8 <SPI_WaitFlagStateUntilTimeout>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d007      	beq.n	800a7ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7e2:	f043 0220 	orr.w	r2, r3, #32
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a7ea:	2303      	movs	r3, #3
 800a7ec:	e014      	b.n	800a818 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	9300      	str	r3, [sp, #0]
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a7fa:	68f8      	ldr	r0, [r7, #12]
 800a7fc:	f7ff fedc 	bl	800a5b8 <SPI_WaitFifoStateUntilTimeout>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d007      	beq.n	800a816 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a80a:	f043 0220 	orr.w	r2, r3, #32
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a812:	2303      	movs	r3, #3
 800a814:	e000      	b.n	800a818 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a816:	2300      	movs	r3, #0
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3710      	adds	r7, #16
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d101      	bne.n	800a832 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a82e:	2301      	movs	r3, #1
 800a830:	e049      	b.n	800a8c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d106      	bne.n	800a84c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2200      	movs	r2, #0
 800a842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f7f7 fe76 	bl	8002538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2202      	movs	r2, #2
 800a850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	3304      	adds	r3, #4
 800a85c:	4619      	mov	r1, r3
 800a85e:	4610      	mov	r0, r2
 800a860:	f000 fad2 	bl	800ae08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2201      	movs	r2, #1
 800a868:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2201      	movs	r2, #1
 800a870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2201      	movs	r2, #1
 800a880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2201      	movs	r2, #1
 800a888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2201      	movs	r2, #1
 800a890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3708      	adds	r7, #8
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
	...

0800a8d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b085      	sub	sp, #20
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d001      	beq.n	800a8e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	e04f      	b.n	800a988 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2202      	movs	r2, #2
 800a8ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	68da      	ldr	r2, [r3, #12]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f042 0201 	orr.w	r2, r2, #1
 800a8fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a23      	ldr	r2, [pc, #140]	; (800a994 <HAL_TIM_Base_Start_IT+0xc4>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d01d      	beq.n	800a946 <HAL_TIM_Base_Start_IT+0x76>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a912:	d018      	beq.n	800a946 <HAL_TIM_Base_Start_IT+0x76>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a1f      	ldr	r2, [pc, #124]	; (800a998 <HAL_TIM_Base_Start_IT+0xc8>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d013      	beq.n	800a946 <HAL_TIM_Base_Start_IT+0x76>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a1e      	ldr	r2, [pc, #120]	; (800a99c <HAL_TIM_Base_Start_IT+0xcc>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d00e      	beq.n	800a946 <HAL_TIM_Base_Start_IT+0x76>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a1c      	ldr	r2, [pc, #112]	; (800a9a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d009      	beq.n	800a946 <HAL_TIM_Base_Start_IT+0x76>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a1b      	ldr	r2, [pc, #108]	; (800a9a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d004      	beq.n	800a946 <HAL_TIM_Base_Start_IT+0x76>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4a19      	ldr	r2, [pc, #100]	; (800a9a8 <HAL_TIM_Base_Start_IT+0xd8>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d115      	bne.n	800a972 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	689a      	ldr	r2, [r3, #8]
 800a94c:	4b17      	ldr	r3, [pc, #92]	; (800a9ac <HAL_TIM_Base_Start_IT+0xdc>)
 800a94e:	4013      	ands	r3, r2
 800a950:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2b06      	cmp	r3, #6
 800a956:	d015      	beq.n	800a984 <HAL_TIM_Base_Start_IT+0xb4>
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a95e:	d011      	beq.n	800a984 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f042 0201 	orr.w	r2, r2, #1
 800a96e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a970:	e008      	b.n	800a984 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f042 0201 	orr.w	r2, r2, #1
 800a980:	601a      	str	r2, [r3, #0]
 800a982:	e000      	b.n	800a986 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a984:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a986:	2300      	movs	r3, #0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3714      	adds	r7, #20
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr
 800a994:	40012c00 	.word	0x40012c00
 800a998:	40000400 	.word	0x40000400
 800a99c:	40000800 	.word	0x40000800
 800a9a0:	40000c00 	.word	0x40000c00
 800a9a4:	40013400 	.word	0x40013400
 800a9a8:	40014000 	.word	0x40014000
 800a9ac:	00010007 	.word	0x00010007

0800a9b0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b082      	sub	sp, #8
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d101      	bne.n	800a9c2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e049      	b.n	800aa56 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d106      	bne.n	800a9dc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 f841 	bl	800aa5e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2202      	movs	r2, #2
 800a9e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	3304      	adds	r3, #4
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	4610      	mov	r0, r2
 800a9f0:	f000 fa0a 	bl	800ae08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2201      	movs	r2, #1
 800aa08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2201      	movs	r2, #1
 800aa18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2201      	movs	r2, #1
 800aa28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2201      	movs	r2, #1
 800aa38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa54:	2300      	movs	r3, #0
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3708      	adds	r7, #8
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800aa5e:	b480      	push	{r7}
 800aa60:	b083      	sub	sp, #12
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800aa66:	bf00      	nop
 800aa68:	370c      	adds	r7, #12
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr

0800aa72 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b082      	sub	sp, #8
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	691b      	ldr	r3, [r3, #16]
 800aa80:	f003 0302 	and.w	r3, r3, #2
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	d122      	bne.n	800aace <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	f003 0302 	and.w	r3, r3, #2
 800aa92:	2b02      	cmp	r3, #2
 800aa94:	d11b      	bne.n	800aace <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f06f 0202 	mvn.w	r2, #2
 800aa9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	f003 0303 	and.w	r3, r3, #3
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d003      	beq.n	800aabc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f000 f989 	bl	800adcc <HAL_TIM_IC_CaptureCallback>
 800aaba:	e005      	b.n	800aac8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 f97b 	bl	800adb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 f98c 	bl	800ade0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	691b      	ldr	r3, [r3, #16]
 800aad4:	f003 0304 	and.w	r3, r3, #4
 800aad8:	2b04      	cmp	r3, #4
 800aada:	d122      	bne.n	800ab22 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	f003 0304 	and.w	r3, r3, #4
 800aae6:	2b04      	cmp	r3, #4
 800aae8:	d11b      	bne.n	800ab22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f06f 0204 	mvn.w	r2, #4
 800aaf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2202      	movs	r2, #2
 800aaf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	699b      	ldr	r3, [r3, #24]
 800ab00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d003      	beq.n	800ab10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 f95f 	bl	800adcc <HAL_TIM_IC_CaptureCallback>
 800ab0e:	e005      	b.n	800ab1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 f951 	bl	800adb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 f962 	bl	800ade0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	f003 0308 	and.w	r3, r3, #8
 800ab2c:	2b08      	cmp	r3, #8
 800ab2e:	d122      	bne.n	800ab76 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	f003 0308 	and.w	r3, r3, #8
 800ab3a:	2b08      	cmp	r3, #8
 800ab3c:	d11b      	bne.n	800ab76 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f06f 0208 	mvn.w	r2, #8
 800ab46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2204      	movs	r2, #4
 800ab4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	69db      	ldr	r3, [r3, #28]
 800ab54:	f003 0303 	and.w	r3, r3, #3
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d003      	beq.n	800ab64 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 f935 	bl	800adcc <HAL_TIM_IC_CaptureCallback>
 800ab62:	e005      	b.n	800ab70 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 f927 	bl	800adb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 f938 	bl	800ade0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2200      	movs	r2, #0
 800ab74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	691b      	ldr	r3, [r3, #16]
 800ab7c:	f003 0310 	and.w	r3, r3, #16
 800ab80:	2b10      	cmp	r3, #16
 800ab82:	d122      	bne.n	800abca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	68db      	ldr	r3, [r3, #12]
 800ab8a:	f003 0310 	and.w	r3, r3, #16
 800ab8e:	2b10      	cmp	r3, #16
 800ab90:	d11b      	bne.n	800abca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f06f 0210 	mvn.w	r2, #16
 800ab9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2208      	movs	r2, #8
 800aba0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	69db      	ldr	r3, [r3, #28]
 800aba8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abac:	2b00      	cmp	r3, #0
 800abae:	d003      	beq.n	800abb8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 f90b 	bl	800adcc <HAL_TIM_IC_CaptureCallback>
 800abb6:	e005      	b.n	800abc4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 f8fd 	bl	800adb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 f90e 	bl	800ade0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	691b      	ldr	r3, [r3, #16]
 800abd0:	f003 0301 	and.w	r3, r3, #1
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d10e      	bne.n	800abf6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	68db      	ldr	r3, [r3, #12]
 800abde:	f003 0301 	and.w	r3, r3, #1
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d107      	bne.n	800abf6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f06f 0201 	mvn.w	r2, #1
 800abee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 f8d7 	bl	800ada4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	691b      	ldr	r3, [r3, #16]
 800abfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac00:	2b80      	cmp	r3, #128	; 0x80
 800ac02:	d10e      	bne.n	800ac22 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	68db      	ldr	r3, [r3, #12]
 800ac0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac0e:	2b80      	cmp	r3, #128	; 0x80
 800ac10:	d107      	bne.n	800ac22 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ac1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 fceb 	bl	800b5f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	691b      	ldr	r3, [r3, #16]
 800ac28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac30:	d10e      	bne.n	800ac50 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	68db      	ldr	r3, [r3, #12]
 800ac38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac3c:	2b80      	cmp	r3, #128	; 0x80
 800ac3e:	d107      	bne.n	800ac50 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ac48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 fcde 	bl	800b60c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	691b      	ldr	r3, [r3, #16]
 800ac56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac5a:	2b40      	cmp	r3, #64	; 0x40
 800ac5c:	d10e      	bne.n	800ac7c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	68db      	ldr	r3, [r3, #12]
 800ac64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac68:	2b40      	cmp	r3, #64	; 0x40
 800ac6a:	d107      	bne.n	800ac7c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f000 f8bc 	bl	800adf4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	691b      	ldr	r3, [r3, #16]
 800ac82:	f003 0320 	and.w	r3, r3, #32
 800ac86:	2b20      	cmp	r3, #32
 800ac88:	d10e      	bne.n	800aca8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	f003 0320 	and.w	r3, r3, #32
 800ac94:	2b20      	cmp	r3, #32
 800ac96:	d107      	bne.n	800aca8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f06f 0220 	mvn.w	r2, #32
 800aca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 fc9e 	bl	800b5e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aca8:	bf00      	nop
 800acaa:	3708      	adds	r7, #8
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b086      	sub	sp, #24
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	60b9      	str	r1, [r7, #8]
 800acba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800acbc:	2300      	movs	r3, #0
 800acbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d101      	bne.n	800acce <HAL_TIM_OC_ConfigChannel+0x1e>
 800acca:	2302      	movs	r3, #2
 800accc:	e066      	b.n	800ad9c <HAL_TIM_OC_ConfigChannel+0xec>
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2201      	movs	r2, #1
 800acd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2b14      	cmp	r3, #20
 800acda:	d857      	bhi.n	800ad8c <HAL_TIM_OC_ConfigChannel+0xdc>
 800acdc:	a201      	add	r2, pc, #4	; (adr r2, 800ace4 <HAL_TIM_OC_ConfigChannel+0x34>)
 800acde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ace2:	bf00      	nop
 800ace4:	0800ad39 	.word	0x0800ad39
 800ace8:	0800ad8d 	.word	0x0800ad8d
 800acec:	0800ad8d 	.word	0x0800ad8d
 800acf0:	0800ad8d 	.word	0x0800ad8d
 800acf4:	0800ad47 	.word	0x0800ad47
 800acf8:	0800ad8d 	.word	0x0800ad8d
 800acfc:	0800ad8d 	.word	0x0800ad8d
 800ad00:	0800ad8d 	.word	0x0800ad8d
 800ad04:	0800ad55 	.word	0x0800ad55
 800ad08:	0800ad8d 	.word	0x0800ad8d
 800ad0c:	0800ad8d 	.word	0x0800ad8d
 800ad10:	0800ad8d 	.word	0x0800ad8d
 800ad14:	0800ad63 	.word	0x0800ad63
 800ad18:	0800ad8d 	.word	0x0800ad8d
 800ad1c:	0800ad8d 	.word	0x0800ad8d
 800ad20:	0800ad8d 	.word	0x0800ad8d
 800ad24:	0800ad71 	.word	0x0800ad71
 800ad28:	0800ad8d 	.word	0x0800ad8d
 800ad2c:	0800ad8d 	.word	0x0800ad8d
 800ad30:	0800ad8d 	.word	0x0800ad8d
 800ad34:	0800ad7f 	.word	0x0800ad7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	68b9      	ldr	r1, [r7, #8]
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f000 f8fc 	bl	800af3c <TIM_OC1_SetConfig>
      break;
 800ad44:	e025      	b.n	800ad92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	68b9      	ldr	r1, [r7, #8]
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f000 f985 	bl	800b05c <TIM_OC2_SetConfig>
      break;
 800ad52:	e01e      	b.n	800ad92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	68b9      	ldr	r1, [r7, #8]
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f000 fa08 	bl	800b170 <TIM_OC3_SetConfig>
      break;
 800ad60:	e017      	b.n	800ad92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	68b9      	ldr	r1, [r7, #8]
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f000 fa89 	bl	800b280 <TIM_OC4_SetConfig>
      break;
 800ad6e:	e010      	b.n	800ad92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	68b9      	ldr	r1, [r7, #8]
 800ad76:	4618      	mov	r0, r3
 800ad78:	f000 faec 	bl	800b354 <TIM_OC5_SetConfig>
      break;
 800ad7c:	e009      	b.n	800ad92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	68b9      	ldr	r1, [r7, #8]
 800ad84:	4618      	mov	r0, r3
 800ad86:	f000 fb49 	bl	800b41c <TIM_OC6_SetConfig>
      break;
 800ad8a:	e002      	b.n	800ad92 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	75fb      	strb	r3, [r7, #23]
      break;
 800ad90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2200      	movs	r2, #0
 800ad96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ad9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3718      	adds	r7, #24
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b083      	sub	sp, #12
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800adac:	bf00      	nop
 800adae:	370c      	adds	r7, #12
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800adc0:	bf00      	nop
 800adc2:	370c      	adds	r7, #12
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800adcc:	b480      	push	{r7}
 800adce:	b083      	sub	sp, #12
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800add4:	bf00      	nop
 800add6:	370c      	adds	r7, #12
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr

0800ade0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ade8:	bf00      	nop
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800adfc:	bf00      	nop
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	4a40      	ldr	r2, [pc, #256]	; (800af1c <TIM_Base_SetConfig+0x114>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d013      	beq.n	800ae48 <TIM_Base_SetConfig+0x40>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae26:	d00f      	beq.n	800ae48 <TIM_Base_SetConfig+0x40>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4a3d      	ldr	r2, [pc, #244]	; (800af20 <TIM_Base_SetConfig+0x118>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d00b      	beq.n	800ae48 <TIM_Base_SetConfig+0x40>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	4a3c      	ldr	r2, [pc, #240]	; (800af24 <TIM_Base_SetConfig+0x11c>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d007      	beq.n	800ae48 <TIM_Base_SetConfig+0x40>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4a3b      	ldr	r2, [pc, #236]	; (800af28 <TIM_Base_SetConfig+0x120>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d003      	beq.n	800ae48 <TIM_Base_SetConfig+0x40>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	4a3a      	ldr	r2, [pc, #232]	; (800af2c <TIM_Base_SetConfig+0x124>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d108      	bne.n	800ae5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	4313      	orrs	r3, r2
 800ae58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	4a2f      	ldr	r2, [pc, #188]	; (800af1c <TIM_Base_SetConfig+0x114>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d01f      	beq.n	800aea2 <TIM_Base_SetConfig+0x9a>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae68:	d01b      	beq.n	800aea2 <TIM_Base_SetConfig+0x9a>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	4a2c      	ldr	r2, [pc, #176]	; (800af20 <TIM_Base_SetConfig+0x118>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d017      	beq.n	800aea2 <TIM_Base_SetConfig+0x9a>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	4a2b      	ldr	r2, [pc, #172]	; (800af24 <TIM_Base_SetConfig+0x11c>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d013      	beq.n	800aea2 <TIM_Base_SetConfig+0x9a>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4a2a      	ldr	r2, [pc, #168]	; (800af28 <TIM_Base_SetConfig+0x120>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d00f      	beq.n	800aea2 <TIM_Base_SetConfig+0x9a>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	4a29      	ldr	r2, [pc, #164]	; (800af2c <TIM_Base_SetConfig+0x124>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d00b      	beq.n	800aea2 <TIM_Base_SetConfig+0x9a>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4a28      	ldr	r2, [pc, #160]	; (800af30 <TIM_Base_SetConfig+0x128>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d007      	beq.n	800aea2 <TIM_Base_SetConfig+0x9a>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	4a27      	ldr	r2, [pc, #156]	; (800af34 <TIM_Base_SetConfig+0x12c>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d003      	beq.n	800aea2 <TIM_Base_SetConfig+0x9a>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4a26      	ldr	r2, [pc, #152]	; (800af38 <TIM_Base_SetConfig+0x130>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d108      	bne.n	800aeb4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	68db      	ldr	r3, [r3, #12]
 800aeae:	68fa      	ldr	r2, [r7, #12]
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	695b      	ldr	r3, [r3, #20]
 800aebe:	4313      	orrs	r3, r2
 800aec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	68fa      	ldr	r2, [r7, #12]
 800aec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	689a      	ldr	r2, [r3, #8]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	4a10      	ldr	r2, [pc, #64]	; (800af1c <TIM_Base_SetConfig+0x114>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d00f      	beq.n	800af00 <TIM_Base_SetConfig+0xf8>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	4a12      	ldr	r2, [pc, #72]	; (800af2c <TIM_Base_SetConfig+0x124>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d00b      	beq.n	800af00 <TIM_Base_SetConfig+0xf8>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	4a11      	ldr	r2, [pc, #68]	; (800af30 <TIM_Base_SetConfig+0x128>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d007      	beq.n	800af00 <TIM_Base_SetConfig+0xf8>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	4a10      	ldr	r2, [pc, #64]	; (800af34 <TIM_Base_SetConfig+0x12c>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d003      	beq.n	800af00 <TIM_Base_SetConfig+0xf8>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	4a0f      	ldr	r2, [pc, #60]	; (800af38 <TIM_Base_SetConfig+0x130>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d103      	bne.n	800af08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	691a      	ldr	r2, [r3, #16]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2201      	movs	r2, #1
 800af0c:	615a      	str	r2, [r3, #20]
}
 800af0e:	bf00      	nop
 800af10:	3714      	adds	r7, #20
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop
 800af1c:	40012c00 	.word	0x40012c00
 800af20:	40000400 	.word	0x40000400
 800af24:	40000800 	.word	0x40000800
 800af28:	40000c00 	.word	0x40000c00
 800af2c:	40013400 	.word	0x40013400
 800af30:	40014000 	.word	0x40014000
 800af34:	40014400 	.word	0x40014400
 800af38:	40014800 	.word	0x40014800

0800af3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b087      	sub	sp, #28
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6a1b      	ldr	r3, [r3, #32]
 800af4a:	f023 0201 	bic.w	r2, r3, #1
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6a1b      	ldr	r3, [r3, #32]
 800af56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	699b      	ldr	r3, [r3, #24]
 800af62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f023 0303 	bic.w	r3, r3, #3
 800af76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	4313      	orrs	r3, r2
 800af80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	f023 0302 	bic.w	r3, r3, #2
 800af88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	689b      	ldr	r3, [r3, #8]
 800af8e:	697a      	ldr	r2, [r7, #20]
 800af90:	4313      	orrs	r3, r2
 800af92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	4a2c      	ldr	r2, [pc, #176]	; (800b048 <TIM_OC1_SetConfig+0x10c>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d00f      	beq.n	800afbc <TIM_OC1_SetConfig+0x80>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	4a2b      	ldr	r2, [pc, #172]	; (800b04c <TIM_OC1_SetConfig+0x110>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d00b      	beq.n	800afbc <TIM_OC1_SetConfig+0x80>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	4a2a      	ldr	r2, [pc, #168]	; (800b050 <TIM_OC1_SetConfig+0x114>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d007      	beq.n	800afbc <TIM_OC1_SetConfig+0x80>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	4a29      	ldr	r2, [pc, #164]	; (800b054 <TIM_OC1_SetConfig+0x118>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d003      	beq.n	800afbc <TIM_OC1_SetConfig+0x80>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	4a28      	ldr	r2, [pc, #160]	; (800b058 <TIM_OC1_SetConfig+0x11c>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d10c      	bne.n	800afd6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	f023 0308 	bic.w	r3, r3, #8
 800afc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	697a      	ldr	r2, [r7, #20]
 800afca:	4313      	orrs	r3, r2
 800afcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	f023 0304 	bic.w	r3, r3, #4
 800afd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	4a1b      	ldr	r2, [pc, #108]	; (800b048 <TIM_OC1_SetConfig+0x10c>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d00f      	beq.n	800affe <TIM_OC1_SetConfig+0xc2>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	4a1a      	ldr	r2, [pc, #104]	; (800b04c <TIM_OC1_SetConfig+0x110>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d00b      	beq.n	800affe <TIM_OC1_SetConfig+0xc2>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	4a19      	ldr	r2, [pc, #100]	; (800b050 <TIM_OC1_SetConfig+0x114>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d007      	beq.n	800affe <TIM_OC1_SetConfig+0xc2>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	4a18      	ldr	r2, [pc, #96]	; (800b054 <TIM_OC1_SetConfig+0x118>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d003      	beq.n	800affe <TIM_OC1_SetConfig+0xc2>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	4a17      	ldr	r2, [pc, #92]	; (800b058 <TIM_OC1_SetConfig+0x11c>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d111      	bne.n	800b022 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b00c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	695b      	ldr	r3, [r3, #20]
 800b012:	693a      	ldr	r2, [r7, #16]
 800b014:	4313      	orrs	r3, r2
 800b016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	699b      	ldr	r3, [r3, #24]
 800b01c:	693a      	ldr	r2, [r7, #16]
 800b01e:	4313      	orrs	r3, r2
 800b020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	693a      	ldr	r2, [r7, #16]
 800b026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	68fa      	ldr	r2, [r7, #12]
 800b02c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	685a      	ldr	r2, [r3, #4]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	697a      	ldr	r2, [r7, #20]
 800b03a:	621a      	str	r2, [r3, #32]
}
 800b03c:	bf00      	nop
 800b03e:	371c      	adds	r7, #28
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr
 800b048:	40012c00 	.word	0x40012c00
 800b04c:	40013400 	.word	0x40013400
 800b050:	40014000 	.word	0x40014000
 800b054:	40014400 	.word	0x40014400
 800b058:	40014800 	.word	0x40014800

0800b05c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b087      	sub	sp, #28
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a1b      	ldr	r3, [r3, #32]
 800b06a:	f023 0210 	bic.w	r2, r3, #16
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6a1b      	ldr	r3, [r3, #32]
 800b076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	699b      	ldr	r3, [r3, #24]
 800b082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b08a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b08e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	021b      	lsls	r3, r3, #8
 800b09e:	68fa      	ldr	r2, [r7, #12]
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	f023 0320 	bic.w	r3, r3, #32
 800b0aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	011b      	lsls	r3, r3, #4
 800b0b2:	697a      	ldr	r2, [r7, #20]
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	4a28      	ldr	r2, [pc, #160]	; (800b15c <TIM_OC2_SetConfig+0x100>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d003      	beq.n	800b0c8 <TIM_OC2_SetConfig+0x6c>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	4a27      	ldr	r2, [pc, #156]	; (800b160 <TIM_OC2_SetConfig+0x104>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d10d      	bne.n	800b0e4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	011b      	lsls	r3, r3, #4
 800b0d6:	697a      	ldr	r2, [r7, #20]
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	4a1d      	ldr	r2, [pc, #116]	; (800b15c <TIM_OC2_SetConfig+0x100>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d00f      	beq.n	800b10c <TIM_OC2_SetConfig+0xb0>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	4a1c      	ldr	r2, [pc, #112]	; (800b160 <TIM_OC2_SetConfig+0x104>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d00b      	beq.n	800b10c <TIM_OC2_SetConfig+0xb0>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	4a1b      	ldr	r2, [pc, #108]	; (800b164 <TIM_OC2_SetConfig+0x108>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d007      	beq.n	800b10c <TIM_OC2_SetConfig+0xb0>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	4a1a      	ldr	r2, [pc, #104]	; (800b168 <TIM_OC2_SetConfig+0x10c>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d003      	beq.n	800b10c <TIM_OC2_SetConfig+0xb0>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	4a19      	ldr	r2, [pc, #100]	; (800b16c <TIM_OC2_SetConfig+0x110>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d113      	bne.n	800b134 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b112:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b11a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	695b      	ldr	r3, [r3, #20]
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	693a      	ldr	r2, [r7, #16]
 800b124:	4313      	orrs	r3, r2
 800b126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	699b      	ldr	r3, [r3, #24]
 800b12c:	009b      	lsls	r3, r3, #2
 800b12e:	693a      	ldr	r2, [r7, #16]
 800b130:	4313      	orrs	r3, r2
 800b132:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	693a      	ldr	r2, [r7, #16]
 800b138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	68fa      	ldr	r2, [r7, #12]
 800b13e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	685a      	ldr	r2, [r3, #4]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	697a      	ldr	r2, [r7, #20]
 800b14c:	621a      	str	r2, [r3, #32]
}
 800b14e:	bf00      	nop
 800b150:	371c      	adds	r7, #28
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr
 800b15a:	bf00      	nop
 800b15c:	40012c00 	.word	0x40012c00
 800b160:	40013400 	.word	0x40013400
 800b164:	40014000 	.word	0x40014000
 800b168:	40014400 	.word	0x40014400
 800b16c:	40014800 	.word	0x40014800

0800b170 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b170:	b480      	push	{r7}
 800b172:	b087      	sub	sp, #28
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6a1b      	ldr	r3, [r3, #32]
 800b17e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6a1b      	ldr	r3, [r3, #32]
 800b18a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	69db      	ldr	r3, [r3, #28]
 800b196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b19e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f023 0303 	bic.w	r3, r3, #3
 800b1aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	68fa      	ldr	r2, [r7, #12]
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b1bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	021b      	lsls	r3, r3, #8
 800b1c4:	697a      	ldr	r2, [r7, #20]
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	4a27      	ldr	r2, [pc, #156]	; (800b26c <TIM_OC3_SetConfig+0xfc>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d003      	beq.n	800b1da <TIM_OC3_SetConfig+0x6a>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	4a26      	ldr	r2, [pc, #152]	; (800b270 <TIM_OC3_SetConfig+0x100>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d10d      	bne.n	800b1f6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b1e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	68db      	ldr	r3, [r3, #12]
 800b1e6:	021b      	lsls	r3, r3, #8
 800b1e8:	697a      	ldr	r2, [r7, #20]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	4a1c      	ldr	r2, [pc, #112]	; (800b26c <TIM_OC3_SetConfig+0xfc>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d00f      	beq.n	800b21e <TIM_OC3_SetConfig+0xae>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	4a1b      	ldr	r2, [pc, #108]	; (800b270 <TIM_OC3_SetConfig+0x100>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d00b      	beq.n	800b21e <TIM_OC3_SetConfig+0xae>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	4a1a      	ldr	r2, [pc, #104]	; (800b274 <TIM_OC3_SetConfig+0x104>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d007      	beq.n	800b21e <TIM_OC3_SetConfig+0xae>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	4a19      	ldr	r2, [pc, #100]	; (800b278 <TIM_OC3_SetConfig+0x108>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d003      	beq.n	800b21e <TIM_OC3_SetConfig+0xae>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4a18      	ldr	r2, [pc, #96]	; (800b27c <TIM_OC3_SetConfig+0x10c>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d113      	bne.n	800b246 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b22c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	695b      	ldr	r3, [r3, #20]
 800b232:	011b      	lsls	r3, r3, #4
 800b234:	693a      	ldr	r2, [r7, #16]
 800b236:	4313      	orrs	r3, r2
 800b238:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	699b      	ldr	r3, [r3, #24]
 800b23e:	011b      	lsls	r3, r3, #4
 800b240:	693a      	ldr	r2, [r7, #16]
 800b242:	4313      	orrs	r3, r2
 800b244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	693a      	ldr	r2, [r7, #16]
 800b24a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	68fa      	ldr	r2, [r7, #12]
 800b250:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	685a      	ldr	r2, [r3, #4]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	697a      	ldr	r2, [r7, #20]
 800b25e:	621a      	str	r2, [r3, #32]
}
 800b260:	bf00      	nop
 800b262:	371c      	adds	r7, #28
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr
 800b26c:	40012c00 	.word	0x40012c00
 800b270:	40013400 	.word	0x40013400
 800b274:	40014000 	.word	0x40014000
 800b278:	40014400 	.word	0x40014400
 800b27c:	40014800 	.word	0x40014800

0800b280 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b280:	b480      	push	{r7}
 800b282:	b087      	sub	sp, #28
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a1b      	ldr	r3, [r3, #32]
 800b28e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6a1b      	ldr	r3, [r3, #32]
 800b29a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	69db      	ldr	r3, [r3, #28]
 800b2a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b2ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	021b      	lsls	r3, r3, #8
 800b2c2:	68fa      	ldr	r2, [r7, #12]
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b2ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	689b      	ldr	r3, [r3, #8]
 800b2d4:	031b      	lsls	r3, r3, #12
 800b2d6:	693a      	ldr	r2, [r7, #16]
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	4a18      	ldr	r2, [pc, #96]	; (800b340 <TIM_OC4_SetConfig+0xc0>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d00f      	beq.n	800b304 <TIM_OC4_SetConfig+0x84>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	4a17      	ldr	r2, [pc, #92]	; (800b344 <TIM_OC4_SetConfig+0xc4>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d00b      	beq.n	800b304 <TIM_OC4_SetConfig+0x84>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	4a16      	ldr	r2, [pc, #88]	; (800b348 <TIM_OC4_SetConfig+0xc8>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d007      	beq.n	800b304 <TIM_OC4_SetConfig+0x84>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	4a15      	ldr	r2, [pc, #84]	; (800b34c <TIM_OC4_SetConfig+0xcc>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d003      	beq.n	800b304 <TIM_OC4_SetConfig+0x84>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	4a14      	ldr	r2, [pc, #80]	; (800b350 <TIM_OC4_SetConfig+0xd0>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d109      	bne.n	800b318 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b30a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	695b      	ldr	r3, [r3, #20]
 800b310:	019b      	lsls	r3, r3, #6
 800b312:	697a      	ldr	r2, [r7, #20]
 800b314:	4313      	orrs	r3, r2
 800b316:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	697a      	ldr	r2, [r7, #20]
 800b31c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	685a      	ldr	r2, [r3, #4]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	693a      	ldr	r2, [r7, #16]
 800b330:	621a      	str	r2, [r3, #32]
}
 800b332:	bf00      	nop
 800b334:	371c      	adds	r7, #28
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr
 800b33e:	bf00      	nop
 800b340:	40012c00 	.word	0x40012c00
 800b344:	40013400 	.word	0x40013400
 800b348:	40014000 	.word	0x40014000
 800b34c:	40014400 	.word	0x40014400
 800b350:	40014800 	.word	0x40014800

0800b354 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b354:	b480      	push	{r7}
 800b356:	b087      	sub	sp, #28
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6a1b      	ldr	r3, [r3, #32]
 800b362:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6a1b      	ldr	r3, [r3, #32]
 800b36e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b37a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	68fa      	ldr	r2, [r7, #12]
 800b38e:	4313      	orrs	r3, r2
 800b390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b398:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	689b      	ldr	r3, [r3, #8]
 800b39e:	041b      	lsls	r3, r3, #16
 800b3a0:	693a      	ldr	r2, [r7, #16]
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	4a17      	ldr	r2, [pc, #92]	; (800b408 <TIM_OC5_SetConfig+0xb4>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d00f      	beq.n	800b3ce <TIM_OC5_SetConfig+0x7a>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	4a16      	ldr	r2, [pc, #88]	; (800b40c <TIM_OC5_SetConfig+0xb8>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d00b      	beq.n	800b3ce <TIM_OC5_SetConfig+0x7a>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	4a15      	ldr	r2, [pc, #84]	; (800b410 <TIM_OC5_SetConfig+0xbc>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d007      	beq.n	800b3ce <TIM_OC5_SetConfig+0x7a>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	4a14      	ldr	r2, [pc, #80]	; (800b414 <TIM_OC5_SetConfig+0xc0>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d003      	beq.n	800b3ce <TIM_OC5_SetConfig+0x7a>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	4a13      	ldr	r2, [pc, #76]	; (800b418 <TIM_OC5_SetConfig+0xc4>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d109      	bne.n	800b3e2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b3d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	695b      	ldr	r3, [r3, #20]
 800b3da:	021b      	lsls	r3, r3, #8
 800b3dc:	697a      	ldr	r2, [r7, #20]
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	697a      	ldr	r2, [r7, #20]
 800b3e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	68fa      	ldr	r2, [r7, #12]
 800b3ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	685a      	ldr	r2, [r3, #4]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	693a      	ldr	r2, [r7, #16]
 800b3fa:	621a      	str	r2, [r3, #32]
}
 800b3fc:	bf00      	nop
 800b3fe:	371c      	adds	r7, #28
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr
 800b408:	40012c00 	.word	0x40012c00
 800b40c:	40013400 	.word	0x40013400
 800b410:	40014000 	.word	0x40014000
 800b414:	40014400 	.word	0x40014400
 800b418:	40014800 	.word	0x40014800

0800b41c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b087      	sub	sp, #28
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6a1b      	ldr	r3, [r3, #32]
 800b42a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6a1b      	ldr	r3, [r3, #32]
 800b436:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	685b      	ldr	r3, [r3, #4]
 800b43c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b44a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b44e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	021b      	lsls	r3, r3, #8
 800b456:	68fa      	ldr	r2, [r7, #12]
 800b458:	4313      	orrs	r3, r2
 800b45a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b462:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	689b      	ldr	r3, [r3, #8]
 800b468:	051b      	lsls	r3, r3, #20
 800b46a:	693a      	ldr	r2, [r7, #16]
 800b46c:	4313      	orrs	r3, r2
 800b46e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4a18      	ldr	r2, [pc, #96]	; (800b4d4 <TIM_OC6_SetConfig+0xb8>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d00f      	beq.n	800b498 <TIM_OC6_SetConfig+0x7c>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	4a17      	ldr	r2, [pc, #92]	; (800b4d8 <TIM_OC6_SetConfig+0xbc>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d00b      	beq.n	800b498 <TIM_OC6_SetConfig+0x7c>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	4a16      	ldr	r2, [pc, #88]	; (800b4dc <TIM_OC6_SetConfig+0xc0>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d007      	beq.n	800b498 <TIM_OC6_SetConfig+0x7c>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	4a15      	ldr	r2, [pc, #84]	; (800b4e0 <TIM_OC6_SetConfig+0xc4>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d003      	beq.n	800b498 <TIM_OC6_SetConfig+0x7c>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	4a14      	ldr	r2, [pc, #80]	; (800b4e4 <TIM_OC6_SetConfig+0xc8>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d109      	bne.n	800b4ac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b49e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	695b      	ldr	r3, [r3, #20]
 800b4a4:	029b      	lsls	r3, r3, #10
 800b4a6:	697a      	ldr	r2, [r7, #20]
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	697a      	ldr	r2, [r7, #20]
 800b4b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	685a      	ldr	r2, [r3, #4]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	693a      	ldr	r2, [r7, #16]
 800b4c4:	621a      	str	r2, [r3, #32]
}
 800b4c6:	bf00      	nop
 800b4c8:	371c      	adds	r7, #28
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d0:	4770      	bx	lr
 800b4d2:	bf00      	nop
 800b4d4:	40012c00 	.word	0x40012c00
 800b4d8:	40013400 	.word	0x40013400
 800b4dc:	40014000 	.word	0x40014000
 800b4e0:	40014400 	.word	0x40014400
 800b4e4:	40014800 	.word	0x40014800

0800b4e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b085      	sub	sp, #20
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d101      	bne.n	800b504 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b500:	2302      	movs	r3, #2
 800b502:	e065      	b.n	800b5d0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2201      	movs	r2, #1
 800b508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	4313      	orrs	r3, r2
 800b518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	4313      	orrs	r3, r2
 800b526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	4313      	orrs	r3, r2
 800b534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4313      	orrs	r3, r2
 800b542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	691b      	ldr	r3, [r3, #16]
 800b54e:	4313      	orrs	r3, r2
 800b550:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	695b      	ldr	r3, [r3, #20]
 800b55c:	4313      	orrs	r3, r2
 800b55e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b56a:	4313      	orrs	r3, r2
 800b56c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	699b      	ldr	r3, [r3, #24]
 800b578:	041b      	lsls	r3, r3, #16
 800b57a:	4313      	orrs	r3, r2
 800b57c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4a16      	ldr	r2, [pc, #88]	; (800b5dc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d004      	beq.n	800b592 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4a14      	ldr	r2, [pc, #80]	; (800b5e0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d115      	bne.n	800b5be <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b59c:	051b      	lsls	r3, r3, #20
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	69db      	ldr	r3, [r3, #28]
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	6a1b      	ldr	r3, [r3, #32]
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	68fa      	ldr	r2, [r7, #12]
 800b5c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b5ce:	2300      	movs	r3, #0
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3714      	adds	r7, #20
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr
 800b5dc:	40012c00 	.word	0x40012c00
 800b5e0:	40013400 	.word	0x40013400

0800b5e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b083      	sub	sp, #12
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b5ec:	bf00      	nop
 800b5ee:	370c      	adds	r7, #12
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr

0800b5f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b083      	sub	sp, #12
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b600:	bf00      	nop
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b614:	bf00      	nop
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d101      	bne.n	800b632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b62e:	2301      	movs	r3, #1
 800b630:	e042      	b.n	800b6b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d106      	bne.n	800b64a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f7f6 ff97 	bl	8002578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2224      	movs	r2, #36	; 0x24
 800b64e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	681a      	ldr	r2, [r3, #0]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f022 0201 	bic.w	r2, r2, #1
 800b660:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 fb64 	bl	800bd30 <UART_SetConfig>
 800b668:	4603      	mov	r3, r0
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d101      	bne.n	800b672 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b66e:	2301      	movs	r3, #1
 800b670:	e022      	b.n	800b6b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b676:	2b00      	cmp	r3, #0
 800b678:	d002      	beq.n	800b680 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 fe54 	bl	800c328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	685a      	ldr	r2, [r3, #4]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b68e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	689a      	ldr	r2, [r3, #8]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b69e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f042 0201 	orr.w	r2, r2, #1
 800b6ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f000 fedb 	bl	800c46c <UART_CheckIdleState>
 800b6b6:	4603      	mov	r3, r0
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3708      	adds	r7, #8
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b0ba      	sub	sp, #232	; 0xe8
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	69db      	ldr	r3, [r3, #28]
 800b6ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	689b      	ldr	r3, [r3, #8]
 800b6e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b6e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b6ea:	f640 030f 	movw	r3, #2063	; 0x80f
 800b6ee:	4013      	ands	r3, r2
 800b6f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b6f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d11b      	bne.n	800b734 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b6fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b700:	f003 0320 	and.w	r3, r3, #32
 800b704:	2b00      	cmp	r3, #0
 800b706:	d015      	beq.n	800b734 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b70c:	f003 0320 	and.w	r3, r3, #32
 800b710:	2b00      	cmp	r3, #0
 800b712:	d105      	bne.n	800b720 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d009      	beq.n	800b734 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b724:	2b00      	cmp	r3, #0
 800b726:	f000 82d6 	beq.w	800bcd6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	4798      	blx	r3
      }
      return;
 800b732:	e2d0      	b.n	800bcd6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800b734:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b738:	2b00      	cmp	r3, #0
 800b73a:	f000 811f 	beq.w	800b97c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b73e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b742:	4b8b      	ldr	r3, [pc, #556]	; (800b970 <HAL_UART_IRQHandler+0x2b0>)
 800b744:	4013      	ands	r3, r2
 800b746:	2b00      	cmp	r3, #0
 800b748:	d106      	bne.n	800b758 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b74a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b74e:	4b89      	ldr	r3, [pc, #548]	; (800b974 <HAL_UART_IRQHandler+0x2b4>)
 800b750:	4013      	ands	r3, r2
 800b752:	2b00      	cmp	r3, #0
 800b754:	f000 8112 	beq.w	800b97c <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b75c:	f003 0301 	and.w	r3, r3, #1
 800b760:	2b00      	cmp	r3, #0
 800b762:	d011      	beq.n	800b788 <HAL_UART_IRQHandler+0xc8>
 800b764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d00b      	beq.n	800b788 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	2201      	movs	r2, #1
 800b776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b77e:	f043 0201 	orr.w	r2, r3, #1
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b78c:	f003 0302 	and.w	r3, r3, #2
 800b790:	2b00      	cmp	r3, #0
 800b792:	d011      	beq.n	800b7b8 <HAL_UART_IRQHandler+0xf8>
 800b794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b798:	f003 0301 	and.w	r3, r3, #1
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d00b      	beq.n	800b7b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	2202      	movs	r2, #2
 800b7a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7ae:	f043 0204 	orr.w	r2, r3, #4
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7bc:	f003 0304 	and.w	r3, r3, #4
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d011      	beq.n	800b7e8 <HAL_UART_IRQHandler+0x128>
 800b7c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7c8:	f003 0301 	and.w	r3, r3, #1
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d00b      	beq.n	800b7e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2204      	movs	r2, #4
 800b7d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7de:	f043 0202 	orr.w	r2, r3, #2
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b7e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7ec:	f003 0308 	and.w	r3, r3, #8
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d017      	beq.n	800b824 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b7f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7f8:	f003 0320 	and.w	r3, r3, #32
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d105      	bne.n	800b80c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b800:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b804:	4b5a      	ldr	r3, [pc, #360]	; (800b970 <HAL_UART_IRQHandler+0x2b0>)
 800b806:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d00b      	beq.n	800b824 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2208      	movs	r2, #8
 800b812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b81a:	f043 0208 	orr.w	r2, r3, #8
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b828:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d012      	beq.n	800b856 <HAL_UART_IRQHandler+0x196>
 800b830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b834:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d00c      	beq.n	800b856 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b844:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b84c:	f043 0220 	orr.w	r2, r3, #32
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	f000 823c 	beq.w	800bcda <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b866:	f003 0320 	and.w	r3, r3, #32
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d013      	beq.n	800b896 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b86e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b872:	f003 0320 	and.w	r3, r3, #32
 800b876:	2b00      	cmp	r3, #0
 800b878:	d105      	bne.n	800b886 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b87a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b87e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b882:	2b00      	cmp	r3, #0
 800b884:	d007      	beq.n	800b896 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d003      	beq.n	800b896 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b89c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8aa:	2b40      	cmp	r3, #64	; 0x40
 800b8ac:	d005      	beq.n	800b8ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b8ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b8b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d04f      	beq.n	800b95a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 fee9 	bl	800c692 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	689b      	ldr	r3, [r3, #8]
 800b8c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8ca:	2b40      	cmp	r3, #64	; 0x40
 800b8cc:	d141      	bne.n	800b952 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	3308      	adds	r3, #8
 800b8d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b8dc:	e853 3f00 	ldrex	r3, [r3]
 800b8e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b8e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b8e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	3308      	adds	r3, #8
 800b8f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b8fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b8fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b902:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b906:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b90a:	e841 2300 	strex	r3, r2, [r1]
 800b90e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b912:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d1d9      	bne.n	800b8ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d013      	beq.n	800b94a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b926:	4a14      	ldr	r2, [pc, #80]	; (800b978 <HAL_UART_IRQHandler+0x2b8>)
 800b928:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b92e:	4618      	mov	r0, r3
 800b930:	f7f7 fb53 	bl	8002fda <HAL_DMA_Abort_IT>
 800b934:	4603      	mov	r3, r0
 800b936:	2b00      	cmp	r3, #0
 800b938:	d017      	beq.n	800b96a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b944:	4610      	mov	r0, r2
 800b946:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b948:	e00f      	b.n	800b96a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 f9da 	bl	800bd04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b950:	e00b      	b.n	800b96a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 f9d6 	bl	800bd04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b958:	e007      	b.n	800b96a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 f9d2 	bl	800bd04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2200      	movs	r2, #0
 800b964:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b968:	e1b7      	b.n	800bcda <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b96a:	bf00      	nop
    return;
 800b96c:	e1b5      	b.n	800bcda <HAL_UART_IRQHandler+0x61a>
 800b96e:	bf00      	nop
 800b970:	10000001 	.word	0x10000001
 800b974:	04000120 	.word	0x04000120
 800b978:	0800c75f 	.word	0x0800c75f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b980:	2b01      	cmp	r3, #1
 800b982:	f040 814a 	bne.w	800bc1a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b98a:	f003 0310 	and.w	r3, r3, #16
 800b98e:	2b00      	cmp	r3, #0
 800b990:	f000 8143 	beq.w	800bc1a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b998:	f003 0310 	and.w	r3, r3, #16
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	f000 813c 	beq.w	800bc1a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	2210      	movs	r2, #16
 800b9a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	689b      	ldr	r3, [r3, #8]
 800b9b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9b4:	2b40      	cmp	r3, #64	; 0x40
 800b9b6:	f040 80b5 	bne.w	800bb24 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b9c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	f000 8187 	beq.w	800bcde <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b9d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	f080 817f 	bcs.w	800bcde <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b9e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f003 0320 	and.w	r3, r3, #32
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	f040 8086 	bne.w	800bb08 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba08:	e853 3f00 	ldrex	r3, [r3]
 800ba0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ba10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	461a      	mov	r2, r3
 800ba22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ba2a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ba32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ba36:	e841 2300 	strex	r3, r2, [r1]
 800ba3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ba3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d1da      	bne.n	800b9fc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	3308      	adds	r3, #8
 800ba4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba50:	e853 3f00 	ldrex	r3, [r3]
 800ba54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ba56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba58:	f023 0301 	bic.w	r3, r3, #1
 800ba5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	3308      	adds	r3, #8
 800ba66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ba6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ba6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ba72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ba76:	e841 2300 	strex	r3, r2, [r1]
 800ba7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ba7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d1e1      	bne.n	800ba46 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	3308      	adds	r3, #8
 800ba88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba8c:	e853 3f00 	ldrex	r3, [r3]
 800ba90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ba92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	3308      	adds	r3, #8
 800baa2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800baa6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800baa8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baaa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800baac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800baae:	e841 2300 	strex	r3, r2, [r1]
 800bab2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d1e3      	bne.n	800ba82 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2220      	movs	r2, #32
 800babe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bad0:	e853 3f00 	ldrex	r3, [r3]
 800bad4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bad8:	f023 0310 	bic.w	r3, r3, #16
 800badc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	461a      	mov	r2, r3
 800bae6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800baea:	65bb      	str	r3, [r7, #88]	; 0x58
 800baec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800baf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800baf2:	e841 2300 	strex	r3, r2, [r1]
 800baf6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800baf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d1e4      	bne.n	800bac8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7f7 fa0d 	bl	8002f22 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	1ad3      	subs	r3, r2, r3
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 f8fb 	bl	800bd18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bb22:	e0dc      	b.n	800bcde <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb30:	b29b      	uxth	r3, r3
 800bb32:	1ad3      	subs	r3, r2, r3
 800bb34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb3e:	b29b      	uxth	r3, r3
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	f000 80ce 	beq.w	800bce2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800bb46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	f000 80c9 	beq.w	800bce2 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb58:	e853 3f00 	ldrex	r3, [r3]
 800bb5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bb5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bb64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bb72:	647b      	str	r3, [r7, #68]	; 0x44
 800bb74:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb7a:	e841 2300 	strex	r3, r2, [r1]
 800bb7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bb80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d1e4      	bne.n	800bb50 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	3308      	adds	r3, #8
 800bb8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb90:	e853 3f00 	ldrex	r3, [r3]
 800bb94:	623b      	str	r3, [r7, #32]
   return(result);
 800bb96:	6a3b      	ldr	r3, [r7, #32]
 800bb98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb9c:	f023 0301 	bic.w	r3, r3, #1
 800bba0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	3308      	adds	r3, #8
 800bbaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bbae:	633a      	str	r2, [r7, #48]	; 0x30
 800bbb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bbb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbb6:	e841 2300 	strex	r3, r2, [r1]
 800bbba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bbbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d1e1      	bne.n	800bb86 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2220      	movs	r2, #32
 800bbc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	e853 3f00 	ldrex	r3, [r3]
 800bbe2:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f023 0310 	bic.w	r3, r3, #16
 800bbea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bbf8:	61fb      	str	r3, [r7, #28]
 800bbfa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbfc:	69b9      	ldr	r1, [r7, #24]
 800bbfe:	69fa      	ldr	r2, [r7, #28]
 800bc00:	e841 2300 	strex	r3, r2, [r1]
 800bc04:	617b      	str	r3, [r7, #20]
   return(result);
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d1e4      	bne.n	800bbd6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bc0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bc10:	4619      	mov	r1, r3
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f000 f880 	bl	800bd18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bc18:	e063      	b.n	800bce2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bc1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d00e      	beq.n	800bc44 <HAL_UART_IRQHandler+0x584>
 800bc26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d008      	beq.n	800bc44 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bc3a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 fdcf 	bl	800c7e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bc42:	e051      	b.n	800bce8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bc44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d014      	beq.n	800bc7a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bc50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d105      	bne.n	800bc68 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bc5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d008      	beq.n	800bc7a <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d03a      	beq.n	800bce6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	4798      	blx	r3
    }
    return;
 800bc78:	e035      	b.n	800bce6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bc7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d009      	beq.n	800bc9a <HAL_UART_IRQHandler+0x5da>
 800bc86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d003      	beq.n	800bc9a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f000 fd79 	bl	800c78a <UART_EndTransmit_IT>
    return;
 800bc98:	e026      	b.n	800bce8 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bc9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d009      	beq.n	800bcba <HAL_UART_IRQHandler+0x5fa>
 800bca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcaa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d003      	beq.n	800bcba <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 fda8 	bl	800c808 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bcb8:	e016      	b.n	800bce8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bcba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d010      	beq.n	800bce8 <HAL_UART_IRQHandler+0x628>
 800bcc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	da0c      	bge.n	800bce8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 fd90 	bl	800c7f4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bcd4:	e008      	b.n	800bce8 <HAL_UART_IRQHandler+0x628>
      return;
 800bcd6:	bf00      	nop
 800bcd8:	e006      	b.n	800bce8 <HAL_UART_IRQHandler+0x628>
    return;
 800bcda:	bf00      	nop
 800bcdc:	e004      	b.n	800bce8 <HAL_UART_IRQHandler+0x628>
      return;
 800bcde:	bf00      	nop
 800bce0:	e002      	b.n	800bce8 <HAL_UART_IRQHandler+0x628>
      return;
 800bce2:	bf00      	nop
 800bce4:	e000      	b.n	800bce8 <HAL_UART_IRQHandler+0x628>
    return;
 800bce6:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800bce8:	37e8      	adds	r7, #232	; 0xe8
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop

0800bcf0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b083      	sub	sp, #12
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bcf8:	bf00      	nop
 800bcfa:	370c      	adds	r7, #12
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bd0c:	bf00      	nop
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	460b      	mov	r3, r1
 800bd22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bd24:	bf00      	nop
 800bd26:	370c      	adds	r7, #12
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr

0800bd30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bd30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bd34:	b08c      	sub	sp, #48	; 0x30
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	689a      	ldr	r2, [r3, #8]
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	691b      	ldr	r3, [r3, #16]
 800bd48:	431a      	orrs	r2, r3
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	695b      	ldr	r3, [r3, #20]
 800bd4e:	431a      	orrs	r2, r3
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	69db      	ldr	r3, [r3, #28]
 800bd54:	4313      	orrs	r3, r2
 800bd56:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	681a      	ldr	r2, [r3, #0]
 800bd5e:	4baa      	ldr	r3, [pc, #680]	; (800c008 <UART_SetConfig+0x2d8>)
 800bd60:	4013      	ands	r3, r2
 800bd62:	697a      	ldr	r2, [r7, #20]
 800bd64:	6812      	ldr	r2, [r2, #0]
 800bd66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd68:	430b      	orrs	r3, r1
 800bd6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	68da      	ldr	r2, [r3, #12]
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	430a      	orrs	r2, r1
 800bd80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	699b      	ldr	r3, [r3, #24]
 800bd86:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4a9f      	ldr	r2, [pc, #636]	; (800c00c <UART_SetConfig+0x2dc>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d004      	beq.n	800bd9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	6a1b      	ldr	r3, [r3, #32]
 800bd96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd98:	4313      	orrs	r3, r2
 800bd9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	689b      	ldr	r3, [r3, #8]
 800bda2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800bda6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800bdaa:	697a      	ldr	r2, [r7, #20]
 800bdac:	6812      	ldr	r2, [r2, #0]
 800bdae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bdb0:	430b      	orrs	r3, r1
 800bdb2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdba:	f023 010f 	bic.w	r1, r3, #15
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	430a      	orrs	r2, r1
 800bdc8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	4a90      	ldr	r2, [pc, #576]	; (800c010 <UART_SetConfig+0x2e0>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d125      	bne.n	800be20 <UART_SetConfig+0xf0>
 800bdd4:	4b8f      	ldr	r3, [pc, #572]	; (800c014 <UART_SetConfig+0x2e4>)
 800bdd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdda:	f003 0303 	and.w	r3, r3, #3
 800bdde:	2b03      	cmp	r3, #3
 800bde0:	d81a      	bhi.n	800be18 <UART_SetConfig+0xe8>
 800bde2:	a201      	add	r2, pc, #4	; (adr r2, 800bde8 <UART_SetConfig+0xb8>)
 800bde4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde8:	0800bdf9 	.word	0x0800bdf9
 800bdec:	0800be09 	.word	0x0800be09
 800bdf0:	0800be01 	.word	0x0800be01
 800bdf4:	0800be11 	.word	0x0800be11
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bdfe:	e116      	b.n	800c02e <UART_SetConfig+0x2fe>
 800be00:	2302      	movs	r3, #2
 800be02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be06:	e112      	b.n	800c02e <UART_SetConfig+0x2fe>
 800be08:	2304      	movs	r3, #4
 800be0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be0e:	e10e      	b.n	800c02e <UART_SetConfig+0x2fe>
 800be10:	2308      	movs	r3, #8
 800be12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be16:	e10a      	b.n	800c02e <UART_SetConfig+0x2fe>
 800be18:	2310      	movs	r3, #16
 800be1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be1e:	e106      	b.n	800c02e <UART_SetConfig+0x2fe>
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4a7c      	ldr	r2, [pc, #496]	; (800c018 <UART_SetConfig+0x2e8>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d138      	bne.n	800be9c <UART_SetConfig+0x16c>
 800be2a:	4b7a      	ldr	r3, [pc, #488]	; (800c014 <UART_SetConfig+0x2e4>)
 800be2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be30:	f003 030c 	and.w	r3, r3, #12
 800be34:	2b0c      	cmp	r3, #12
 800be36:	d82d      	bhi.n	800be94 <UART_SetConfig+0x164>
 800be38:	a201      	add	r2, pc, #4	; (adr r2, 800be40 <UART_SetConfig+0x110>)
 800be3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be3e:	bf00      	nop
 800be40:	0800be75 	.word	0x0800be75
 800be44:	0800be95 	.word	0x0800be95
 800be48:	0800be95 	.word	0x0800be95
 800be4c:	0800be95 	.word	0x0800be95
 800be50:	0800be85 	.word	0x0800be85
 800be54:	0800be95 	.word	0x0800be95
 800be58:	0800be95 	.word	0x0800be95
 800be5c:	0800be95 	.word	0x0800be95
 800be60:	0800be7d 	.word	0x0800be7d
 800be64:	0800be95 	.word	0x0800be95
 800be68:	0800be95 	.word	0x0800be95
 800be6c:	0800be95 	.word	0x0800be95
 800be70:	0800be8d 	.word	0x0800be8d
 800be74:	2300      	movs	r3, #0
 800be76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be7a:	e0d8      	b.n	800c02e <UART_SetConfig+0x2fe>
 800be7c:	2302      	movs	r3, #2
 800be7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be82:	e0d4      	b.n	800c02e <UART_SetConfig+0x2fe>
 800be84:	2304      	movs	r3, #4
 800be86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be8a:	e0d0      	b.n	800c02e <UART_SetConfig+0x2fe>
 800be8c:	2308      	movs	r3, #8
 800be8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be92:	e0cc      	b.n	800c02e <UART_SetConfig+0x2fe>
 800be94:	2310      	movs	r3, #16
 800be96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be9a:	e0c8      	b.n	800c02e <UART_SetConfig+0x2fe>
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a5e      	ldr	r2, [pc, #376]	; (800c01c <UART_SetConfig+0x2ec>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d125      	bne.n	800bef2 <UART_SetConfig+0x1c2>
 800bea6:	4b5b      	ldr	r3, [pc, #364]	; (800c014 <UART_SetConfig+0x2e4>)
 800bea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800beac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800beb0:	2b30      	cmp	r3, #48	; 0x30
 800beb2:	d016      	beq.n	800bee2 <UART_SetConfig+0x1b2>
 800beb4:	2b30      	cmp	r3, #48	; 0x30
 800beb6:	d818      	bhi.n	800beea <UART_SetConfig+0x1ba>
 800beb8:	2b20      	cmp	r3, #32
 800beba:	d00a      	beq.n	800bed2 <UART_SetConfig+0x1a2>
 800bebc:	2b20      	cmp	r3, #32
 800bebe:	d814      	bhi.n	800beea <UART_SetConfig+0x1ba>
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d002      	beq.n	800beca <UART_SetConfig+0x19a>
 800bec4:	2b10      	cmp	r3, #16
 800bec6:	d008      	beq.n	800beda <UART_SetConfig+0x1aa>
 800bec8:	e00f      	b.n	800beea <UART_SetConfig+0x1ba>
 800beca:	2300      	movs	r3, #0
 800becc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bed0:	e0ad      	b.n	800c02e <UART_SetConfig+0x2fe>
 800bed2:	2302      	movs	r3, #2
 800bed4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bed8:	e0a9      	b.n	800c02e <UART_SetConfig+0x2fe>
 800beda:	2304      	movs	r3, #4
 800bedc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bee0:	e0a5      	b.n	800c02e <UART_SetConfig+0x2fe>
 800bee2:	2308      	movs	r3, #8
 800bee4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bee8:	e0a1      	b.n	800c02e <UART_SetConfig+0x2fe>
 800beea:	2310      	movs	r3, #16
 800beec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bef0:	e09d      	b.n	800c02e <UART_SetConfig+0x2fe>
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4a4a      	ldr	r2, [pc, #296]	; (800c020 <UART_SetConfig+0x2f0>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d125      	bne.n	800bf48 <UART_SetConfig+0x218>
 800befc:	4b45      	ldr	r3, [pc, #276]	; (800c014 <UART_SetConfig+0x2e4>)
 800befe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bf06:	2bc0      	cmp	r3, #192	; 0xc0
 800bf08:	d016      	beq.n	800bf38 <UART_SetConfig+0x208>
 800bf0a:	2bc0      	cmp	r3, #192	; 0xc0
 800bf0c:	d818      	bhi.n	800bf40 <UART_SetConfig+0x210>
 800bf0e:	2b80      	cmp	r3, #128	; 0x80
 800bf10:	d00a      	beq.n	800bf28 <UART_SetConfig+0x1f8>
 800bf12:	2b80      	cmp	r3, #128	; 0x80
 800bf14:	d814      	bhi.n	800bf40 <UART_SetConfig+0x210>
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d002      	beq.n	800bf20 <UART_SetConfig+0x1f0>
 800bf1a:	2b40      	cmp	r3, #64	; 0x40
 800bf1c:	d008      	beq.n	800bf30 <UART_SetConfig+0x200>
 800bf1e:	e00f      	b.n	800bf40 <UART_SetConfig+0x210>
 800bf20:	2300      	movs	r3, #0
 800bf22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf26:	e082      	b.n	800c02e <UART_SetConfig+0x2fe>
 800bf28:	2302      	movs	r3, #2
 800bf2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf2e:	e07e      	b.n	800c02e <UART_SetConfig+0x2fe>
 800bf30:	2304      	movs	r3, #4
 800bf32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf36:	e07a      	b.n	800c02e <UART_SetConfig+0x2fe>
 800bf38:	2308      	movs	r3, #8
 800bf3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf3e:	e076      	b.n	800c02e <UART_SetConfig+0x2fe>
 800bf40:	2310      	movs	r3, #16
 800bf42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf46:	e072      	b.n	800c02e <UART_SetConfig+0x2fe>
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4a35      	ldr	r2, [pc, #212]	; (800c024 <UART_SetConfig+0x2f4>)
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d12a      	bne.n	800bfa8 <UART_SetConfig+0x278>
 800bf52:	4b30      	ldr	r3, [pc, #192]	; (800c014 <UART_SetConfig+0x2e4>)
 800bf54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf60:	d01a      	beq.n	800bf98 <UART_SetConfig+0x268>
 800bf62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf66:	d81b      	bhi.n	800bfa0 <UART_SetConfig+0x270>
 800bf68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf6c:	d00c      	beq.n	800bf88 <UART_SetConfig+0x258>
 800bf6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf72:	d815      	bhi.n	800bfa0 <UART_SetConfig+0x270>
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d003      	beq.n	800bf80 <UART_SetConfig+0x250>
 800bf78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf7c:	d008      	beq.n	800bf90 <UART_SetConfig+0x260>
 800bf7e:	e00f      	b.n	800bfa0 <UART_SetConfig+0x270>
 800bf80:	2300      	movs	r3, #0
 800bf82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf86:	e052      	b.n	800c02e <UART_SetConfig+0x2fe>
 800bf88:	2302      	movs	r3, #2
 800bf8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf8e:	e04e      	b.n	800c02e <UART_SetConfig+0x2fe>
 800bf90:	2304      	movs	r3, #4
 800bf92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf96:	e04a      	b.n	800c02e <UART_SetConfig+0x2fe>
 800bf98:	2308      	movs	r3, #8
 800bf9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf9e:	e046      	b.n	800c02e <UART_SetConfig+0x2fe>
 800bfa0:	2310      	movs	r3, #16
 800bfa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bfa6:	e042      	b.n	800c02e <UART_SetConfig+0x2fe>
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4a17      	ldr	r2, [pc, #92]	; (800c00c <UART_SetConfig+0x2dc>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d13a      	bne.n	800c028 <UART_SetConfig+0x2f8>
 800bfb2:	4b18      	ldr	r3, [pc, #96]	; (800c014 <UART_SetConfig+0x2e4>)
 800bfb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bfbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bfc0:	d01a      	beq.n	800bff8 <UART_SetConfig+0x2c8>
 800bfc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bfc6:	d81b      	bhi.n	800c000 <UART_SetConfig+0x2d0>
 800bfc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bfcc:	d00c      	beq.n	800bfe8 <UART_SetConfig+0x2b8>
 800bfce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bfd2:	d815      	bhi.n	800c000 <UART_SetConfig+0x2d0>
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d003      	beq.n	800bfe0 <UART_SetConfig+0x2b0>
 800bfd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfdc:	d008      	beq.n	800bff0 <UART_SetConfig+0x2c0>
 800bfde:	e00f      	b.n	800c000 <UART_SetConfig+0x2d0>
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bfe6:	e022      	b.n	800c02e <UART_SetConfig+0x2fe>
 800bfe8:	2302      	movs	r3, #2
 800bfea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bfee:	e01e      	b.n	800c02e <UART_SetConfig+0x2fe>
 800bff0:	2304      	movs	r3, #4
 800bff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bff6:	e01a      	b.n	800c02e <UART_SetConfig+0x2fe>
 800bff8:	2308      	movs	r3, #8
 800bffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bffe:	e016      	b.n	800c02e <UART_SetConfig+0x2fe>
 800c000:	2310      	movs	r3, #16
 800c002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c006:	e012      	b.n	800c02e <UART_SetConfig+0x2fe>
 800c008:	cfff69f3 	.word	0xcfff69f3
 800c00c:	40008000 	.word	0x40008000
 800c010:	40013800 	.word	0x40013800
 800c014:	40021000 	.word	0x40021000
 800c018:	40004400 	.word	0x40004400
 800c01c:	40004800 	.word	0x40004800
 800c020:	40004c00 	.word	0x40004c00
 800c024:	40005000 	.word	0x40005000
 800c028:	2310      	movs	r3, #16
 800c02a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4aae      	ldr	r2, [pc, #696]	; (800c2ec <UART_SetConfig+0x5bc>)
 800c034:	4293      	cmp	r3, r2
 800c036:	f040 8097 	bne.w	800c168 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c03a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c03e:	2b08      	cmp	r3, #8
 800c040:	d823      	bhi.n	800c08a <UART_SetConfig+0x35a>
 800c042:	a201      	add	r2, pc, #4	; (adr r2, 800c048 <UART_SetConfig+0x318>)
 800c044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c048:	0800c06d 	.word	0x0800c06d
 800c04c:	0800c08b 	.word	0x0800c08b
 800c050:	0800c075 	.word	0x0800c075
 800c054:	0800c08b 	.word	0x0800c08b
 800c058:	0800c07b 	.word	0x0800c07b
 800c05c:	0800c08b 	.word	0x0800c08b
 800c060:	0800c08b 	.word	0x0800c08b
 800c064:	0800c08b 	.word	0x0800c08b
 800c068:	0800c083 	.word	0x0800c083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c06c:	f7f9 fd00 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 800c070:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c072:	e010      	b.n	800c096 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c074:	4b9e      	ldr	r3, [pc, #632]	; (800c2f0 <UART_SetConfig+0x5c0>)
 800c076:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c078:	e00d      	b.n	800c096 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c07a:	f7f9 fc61 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 800c07e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c080:	e009      	b.n	800c096 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c086:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c088:	e005      	b.n	800c096 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c08a:	2300      	movs	r3, #0
 800c08c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c08e:	2301      	movs	r3, #1
 800c090:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c094:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c098:	2b00      	cmp	r3, #0
 800c09a:	f000 8130 	beq.w	800c2fe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a2:	4a94      	ldr	r2, [pc, #592]	; (800c2f4 <UART_SetConfig+0x5c4>)
 800c0a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0b0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	685a      	ldr	r2, [r3, #4]
 800c0b6:	4613      	mov	r3, r2
 800c0b8:	005b      	lsls	r3, r3, #1
 800c0ba:	4413      	add	r3, r2
 800c0bc:	69ba      	ldr	r2, [r7, #24]
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d305      	bcc.n	800c0ce <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c0c8:	69ba      	ldr	r2, [r7, #24]
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d903      	bls.n	800c0d6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c0d4:	e113      	b.n	800c2fe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d8:	2200      	movs	r2, #0
 800c0da:	60bb      	str	r3, [r7, #8]
 800c0dc:	60fa      	str	r2, [r7, #12]
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e2:	4a84      	ldr	r2, [pc, #528]	; (800c2f4 <UART_SetConfig+0x5c4>)
 800c0e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0e8:	b29b      	uxth	r3, r3
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	603b      	str	r3, [r7, #0]
 800c0ee:	607a      	str	r2, [r7, #4]
 800c0f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c0f8:	f7f4 fd6e 	bl	8000bd8 <__aeabi_uldivmod>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	460b      	mov	r3, r1
 800c100:	4610      	mov	r0, r2
 800c102:	4619      	mov	r1, r3
 800c104:	f04f 0200 	mov.w	r2, #0
 800c108:	f04f 0300 	mov.w	r3, #0
 800c10c:	020b      	lsls	r3, r1, #8
 800c10e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c112:	0202      	lsls	r2, r0, #8
 800c114:	6979      	ldr	r1, [r7, #20]
 800c116:	6849      	ldr	r1, [r1, #4]
 800c118:	0849      	lsrs	r1, r1, #1
 800c11a:	2000      	movs	r0, #0
 800c11c:	460c      	mov	r4, r1
 800c11e:	4605      	mov	r5, r0
 800c120:	eb12 0804 	adds.w	r8, r2, r4
 800c124:	eb43 0905 	adc.w	r9, r3, r5
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	2200      	movs	r2, #0
 800c12e:	469a      	mov	sl, r3
 800c130:	4693      	mov	fp, r2
 800c132:	4652      	mov	r2, sl
 800c134:	465b      	mov	r3, fp
 800c136:	4640      	mov	r0, r8
 800c138:	4649      	mov	r1, r9
 800c13a:	f7f4 fd4d 	bl	8000bd8 <__aeabi_uldivmod>
 800c13e:	4602      	mov	r2, r0
 800c140:	460b      	mov	r3, r1
 800c142:	4613      	mov	r3, r2
 800c144:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c146:	6a3b      	ldr	r3, [r7, #32]
 800c148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c14c:	d308      	bcc.n	800c160 <UART_SetConfig+0x430>
 800c14e:	6a3b      	ldr	r3, [r7, #32]
 800c150:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c154:	d204      	bcs.n	800c160 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	6a3a      	ldr	r2, [r7, #32]
 800c15c:	60da      	str	r2, [r3, #12]
 800c15e:	e0ce      	b.n	800c2fe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c160:	2301      	movs	r3, #1
 800c162:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c166:	e0ca      	b.n	800c2fe <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	69db      	ldr	r3, [r3, #28]
 800c16c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c170:	d166      	bne.n	800c240 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c172:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c176:	2b08      	cmp	r3, #8
 800c178:	d827      	bhi.n	800c1ca <UART_SetConfig+0x49a>
 800c17a:	a201      	add	r2, pc, #4	; (adr r2, 800c180 <UART_SetConfig+0x450>)
 800c17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c180:	0800c1a5 	.word	0x0800c1a5
 800c184:	0800c1ad 	.word	0x0800c1ad
 800c188:	0800c1b5 	.word	0x0800c1b5
 800c18c:	0800c1cb 	.word	0x0800c1cb
 800c190:	0800c1bb 	.word	0x0800c1bb
 800c194:	0800c1cb 	.word	0x0800c1cb
 800c198:	0800c1cb 	.word	0x0800c1cb
 800c19c:	0800c1cb 	.word	0x0800c1cb
 800c1a0:	0800c1c3 	.word	0x0800c1c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c1a4:	f7f9 fc64 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 800c1a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c1aa:	e014      	b.n	800c1d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1ac:	f7f9 fc76 	bl	8005a9c <HAL_RCC_GetPCLK2Freq>
 800c1b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c1b2:	e010      	b.n	800c1d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c1b4:	4b4e      	ldr	r3, [pc, #312]	; (800c2f0 <UART_SetConfig+0x5c0>)
 800c1b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c1b8:	e00d      	b.n	800c1d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c1ba:	f7f9 fbc1 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 800c1be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c1c0:	e009      	b.n	800c1d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c1c8:	e005      	b.n	800c1d6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c1d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	f000 8090 	beq.w	800c2fe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e2:	4a44      	ldr	r2, [pc, #272]	; (800c2f4 <UART_SetConfig+0x5c4>)
 800c1e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1f0:	005a      	lsls	r2, r3, #1
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	085b      	lsrs	r3, r3, #1
 800c1f8:	441a      	add	r2, r3
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800c202:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c204:	6a3b      	ldr	r3, [r7, #32]
 800c206:	2b0f      	cmp	r3, #15
 800c208:	d916      	bls.n	800c238 <UART_SetConfig+0x508>
 800c20a:	6a3b      	ldr	r3, [r7, #32]
 800c20c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c210:	d212      	bcs.n	800c238 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c212:	6a3b      	ldr	r3, [r7, #32]
 800c214:	b29b      	uxth	r3, r3
 800c216:	f023 030f 	bic.w	r3, r3, #15
 800c21a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c21c:	6a3b      	ldr	r3, [r7, #32]
 800c21e:	085b      	lsrs	r3, r3, #1
 800c220:	b29b      	uxth	r3, r3
 800c222:	f003 0307 	and.w	r3, r3, #7
 800c226:	b29a      	uxth	r2, r3
 800c228:	8bfb      	ldrh	r3, [r7, #30]
 800c22a:	4313      	orrs	r3, r2
 800c22c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	8bfa      	ldrh	r2, [r7, #30]
 800c234:	60da      	str	r2, [r3, #12]
 800c236:	e062      	b.n	800c2fe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c238:	2301      	movs	r3, #1
 800c23a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c23e:	e05e      	b.n	800c2fe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c240:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c244:	2b08      	cmp	r3, #8
 800c246:	d828      	bhi.n	800c29a <UART_SetConfig+0x56a>
 800c248:	a201      	add	r2, pc, #4	; (adr r2, 800c250 <UART_SetConfig+0x520>)
 800c24a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c24e:	bf00      	nop
 800c250:	0800c275 	.word	0x0800c275
 800c254:	0800c27d 	.word	0x0800c27d
 800c258:	0800c285 	.word	0x0800c285
 800c25c:	0800c29b 	.word	0x0800c29b
 800c260:	0800c28b 	.word	0x0800c28b
 800c264:	0800c29b 	.word	0x0800c29b
 800c268:	0800c29b 	.word	0x0800c29b
 800c26c:	0800c29b 	.word	0x0800c29b
 800c270:	0800c293 	.word	0x0800c293
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c274:	f7f9 fbfc 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 800c278:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c27a:	e014      	b.n	800c2a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c27c:	f7f9 fc0e 	bl	8005a9c <HAL_RCC_GetPCLK2Freq>
 800c280:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c282:	e010      	b.n	800c2a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c284:	4b1a      	ldr	r3, [pc, #104]	; (800c2f0 <UART_SetConfig+0x5c0>)
 800c286:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c288:	e00d      	b.n	800c2a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c28a:	f7f9 fb59 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 800c28e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c290:	e009      	b.n	800c2a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c296:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c298:	e005      	b.n	800c2a6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c29a:	2300      	movs	r3, #0
 800c29c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c2a4:	bf00      	nop
    }

    if (pclk != 0U)
 800c2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d028      	beq.n	800c2fe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b0:	4a10      	ldr	r2, [pc, #64]	; (800c2f4 <UART_SetConfig+0x5c4>)
 800c2b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ba:	fbb3 f2f2 	udiv	r2, r3, r2
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	085b      	lsrs	r3, r3, #1
 800c2c4:	441a      	add	r2, r3
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2ce:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c2d0:	6a3b      	ldr	r3, [r7, #32]
 800c2d2:	2b0f      	cmp	r3, #15
 800c2d4:	d910      	bls.n	800c2f8 <UART_SetConfig+0x5c8>
 800c2d6:	6a3b      	ldr	r3, [r7, #32]
 800c2d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2dc:	d20c      	bcs.n	800c2f8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c2de:	6a3b      	ldr	r3, [r7, #32]
 800c2e0:	b29a      	uxth	r2, r3
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	60da      	str	r2, [r3, #12]
 800c2e8:	e009      	b.n	800c2fe <UART_SetConfig+0x5ce>
 800c2ea:	bf00      	nop
 800c2ec:	40008000 	.word	0x40008000
 800c2f0:	00f42400 	.word	0x00f42400
 800c2f4:	08014220 	.word	0x08014220
      }
      else
      {
        ret = HAL_ERROR;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	2201      	movs	r2, #1
 800c302:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	2201      	movs	r2, #1
 800c30a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	2200      	movs	r2, #0
 800c312:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	2200      	movs	r2, #0
 800c318:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c31a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3730      	adds	r7, #48	; 0x30
 800c322:	46bd      	mov	sp, r7
 800c324:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c334:	f003 0301 	and.w	r3, r3, #1
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d00a      	beq.n	800c352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	685b      	ldr	r3, [r3, #4]
 800c342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	430a      	orrs	r2, r1
 800c350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c356:	f003 0302 	and.w	r3, r3, #2
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d00a      	beq.n	800c374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	430a      	orrs	r2, r1
 800c372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c378:	f003 0304 	and.w	r3, r3, #4
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d00a      	beq.n	800c396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	430a      	orrs	r2, r1
 800c394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c39a:	f003 0308 	and.w	r3, r3, #8
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d00a      	beq.n	800c3b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	430a      	orrs	r2, r1
 800c3b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3bc:	f003 0310 	and.w	r3, r3, #16
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d00a      	beq.n	800c3da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	689b      	ldr	r3, [r3, #8]
 800c3ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	430a      	orrs	r2, r1
 800c3d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3de:	f003 0320 	and.w	r3, r3, #32
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d00a      	beq.n	800c3fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	689b      	ldr	r3, [r3, #8]
 800c3ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	430a      	orrs	r2, r1
 800c3fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c404:	2b00      	cmp	r3, #0
 800c406:	d01a      	beq.n	800c43e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	430a      	orrs	r2, r1
 800c41c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c426:	d10a      	bne.n	800c43e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	430a      	orrs	r2, r1
 800c43c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c446:	2b00      	cmp	r3, #0
 800c448:	d00a      	beq.n	800c460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	430a      	orrs	r2, r1
 800c45e:	605a      	str	r2, [r3, #4]
  }
}
 800c460:	bf00      	nop
 800c462:	370c      	adds	r7, #12
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr

0800c46c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b086      	sub	sp, #24
 800c470:	af02      	add	r7, sp, #8
 800c472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2200      	movs	r2, #0
 800c478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c47c:	f7f6 faec 	bl	8002a58 <HAL_GetTick>
 800c480:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f003 0308 	and.w	r3, r3, #8
 800c48c:	2b08      	cmp	r3, #8
 800c48e:	d10e      	bne.n	800c4ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c494:	9300      	str	r3, [sp, #0]
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2200      	movs	r2, #0
 800c49a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f000 f82f 	bl	800c502 <UART_WaitOnFlagUntilTimeout>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d001      	beq.n	800c4ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c4aa:	2303      	movs	r3, #3
 800c4ac:	e025      	b.n	800c4fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f003 0304 	and.w	r3, r3, #4
 800c4b8:	2b04      	cmp	r3, #4
 800c4ba:	d10e      	bne.n	800c4da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c4c0:	9300      	str	r3, [sp, #0]
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f000 f819 	bl	800c502 <UART_WaitOnFlagUntilTimeout>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d001      	beq.n	800c4da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c4d6:	2303      	movs	r3, #3
 800c4d8:	e00f      	b.n	800c4fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2220      	movs	r2, #32
 800c4de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2220      	movs	r2, #32
 800c4e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c4f8:	2300      	movs	r3, #0
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3710      	adds	r7, #16
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b09c      	sub	sp, #112	; 0x70
 800c506:	af00      	add	r7, sp, #0
 800c508:	60f8      	str	r0, [r7, #12]
 800c50a:	60b9      	str	r1, [r7, #8]
 800c50c:	603b      	str	r3, [r7, #0]
 800c50e:	4613      	mov	r3, r2
 800c510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c512:	e0a9      	b.n	800c668 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c516:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c51a:	f000 80a5 	beq.w	800c668 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c51e:	f7f6 fa9b 	bl	8002a58 <HAL_GetTick>
 800c522:	4602      	mov	r2, r0
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	1ad3      	subs	r3, r2, r3
 800c528:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d302      	bcc.n	800c534 <UART_WaitOnFlagUntilTimeout+0x32>
 800c52e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c530:	2b00      	cmp	r3, #0
 800c532:	d140      	bne.n	800c5b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c53a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c53c:	e853 3f00 	ldrex	r3, [r3]
 800c540:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c544:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c548:	667b      	str	r3, [r7, #100]	; 0x64
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	461a      	mov	r2, r3
 800c550:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c552:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c554:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c556:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c558:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c55a:	e841 2300 	strex	r3, r2, [r1]
 800c55e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c562:	2b00      	cmp	r3, #0
 800c564:	d1e6      	bne.n	800c534 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	3308      	adds	r3, #8
 800c56c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c56e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c570:	e853 3f00 	ldrex	r3, [r3]
 800c574:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c578:	f023 0301 	bic.w	r3, r3, #1
 800c57c:	663b      	str	r3, [r7, #96]	; 0x60
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	3308      	adds	r3, #8
 800c584:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c586:	64ba      	str	r2, [r7, #72]	; 0x48
 800c588:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c58a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c58c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c58e:	e841 2300 	strex	r3, r2, [r1]
 800c592:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c596:	2b00      	cmp	r3, #0
 800c598:	d1e5      	bne.n	800c566 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	2220      	movs	r2, #32
 800c59e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	2220      	movs	r2, #32
 800c5a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c5b2:	2303      	movs	r3, #3
 800c5b4:	e069      	b.n	800c68a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f003 0304 	and.w	r3, r3, #4
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d051      	beq.n	800c668 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	69db      	ldr	r3, [r3, #28]
 800c5ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c5ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c5d2:	d149      	bne.n	800c668 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c5dc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e6:	e853 3f00 	ldrex	r3, [r3]
 800c5ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c5f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5fc:	637b      	str	r3, [r7, #52]	; 0x34
 800c5fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c600:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c604:	e841 2300 	strex	r3, r2, [r1]
 800c608:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d1e6      	bne.n	800c5de <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	3308      	adds	r3, #8
 800c616:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	e853 3f00 	ldrex	r3, [r3]
 800c61e:	613b      	str	r3, [r7, #16]
   return(result);
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	f023 0301 	bic.w	r3, r3, #1
 800c626:	66bb      	str	r3, [r7, #104]	; 0x68
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	3308      	adds	r3, #8
 800c62e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c630:	623a      	str	r2, [r7, #32]
 800c632:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c634:	69f9      	ldr	r1, [r7, #28]
 800c636:	6a3a      	ldr	r2, [r7, #32]
 800c638:	e841 2300 	strex	r3, r2, [r1]
 800c63c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c63e:	69bb      	ldr	r3, [r7, #24]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d1e5      	bne.n	800c610 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2220      	movs	r2, #32
 800c648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2220      	movs	r2, #32
 800c650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2220      	movs	r2, #32
 800c658:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2200      	movs	r2, #0
 800c660:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c664:	2303      	movs	r3, #3
 800c666:	e010      	b.n	800c68a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	69da      	ldr	r2, [r3, #28]
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	4013      	ands	r3, r2
 800c672:	68ba      	ldr	r2, [r7, #8]
 800c674:	429a      	cmp	r2, r3
 800c676:	bf0c      	ite	eq
 800c678:	2301      	moveq	r3, #1
 800c67a:	2300      	movne	r3, #0
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	461a      	mov	r2, r3
 800c680:	79fb      	ldrb	r3, [r7, #7]
 800c682:	429a      	cmp	r2, r3
 800c684:	f43f af46 	beq.w	800c514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c688:	2300      	movs	r3, #0
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3770      	adds	r7, #112	; 0x70
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}

0800c692 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c692:	b480      	push	{r7}
 800c694:	b095      	sub	sp, #84	; 0x54
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6a2:	e853 3f00 	ldrex	r3, [r3]
 800c6a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c6ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	461a      	mov	r2, r3
 800c6b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6b8:	643b      	str	r3, [r7, #64]	; 0x40
 800c6ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c6be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c6c0:	e841 2300 	strex	r3, r2, [r1]
 800c6c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d1e6      	bne.n	800c69a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	3308      	adds	r3, #8
 800c6d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6d4:	6a3b      	ldr	r3, [r7, #32]
 800c6d6:	e853 3f00 	ldrex	r3, [r3]
 800c6da:	61fb      	str	r3, [r7, #28]
   return(result);
 800c6dc:	69fb      	ldr	r3, [r7, #28]
 800c6de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c6e2:	f023 0301 	bic.w	r3, r3, #1
 800c6e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	3308      	adds	r3, #8
 800c6ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c6f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c6f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6f8:	e841 2300 	strex	r3, r2, [r1]
 800c6fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c700:	2b00      	cmp	r3, #0
 800c702:	d1e3      	bne.n	800c6cc <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c708:	2b01      	cmp	r3, #1
 800c70a:	d118      	bne.n	800c73e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	e853 3f00 	ldrex	r3, [r3]
 800c718:	60bb      	str	r3, [r7, #8]
   return(result);
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	f023 0310 	bic.w	r3, r3, #16
 800c720:	647b      	str	r3, [r7, #68]	; 0x44
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	461a      	mov	r2, r3
 800c728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c72a:	61bb      	str	r3, [r7, #24]
 800c72c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c72e:	6979      	ldr	r1, [r7, #20]
 800c730:	69ba      	ldr	r2, [r7, #24]
 800c732:	e841 2300 	strex	r3, r2, [r1]
 800c736:	613b      	str	r3, [r7, #16]
   return(result);
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d1e6      	bne.n	800c70c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2220      	movs	r2, #32
 800c742:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2200      	movs	r2, #0
 800c74a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2200      	movs	r2, #0
 800c750:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c752:	bf00      	nop
 800c754:	3754      	adds	r7, #84	; 0x54
 800c756:	46bd      	mov	sp, r7
 800c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75c:	4770      	bx	lr

0800c75e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c75e:	b580      	push	{r7, lr}
 800c760:	b084      	sub	sp, #16
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c76a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2200      	movs	r2, #0
 800c770:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	2200      	movs	r2, #0
 800c778:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c77c:	68f8      	ldr	r0, [r7, #12]
 800c77e:	f7ff fac1 	bl	800bd04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c782:	bf00      	nop
 800c784:	3710      	adds	r7, #16
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}

0800c78a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c78a:	b580      	push	{r7, lr}
 800c78c:	b088      	sub	sp, #32
 800c78e:	af00      	add	r7, sp, #0
 800c790:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	e853 3f00 	ldrex	r3, [r3]
 800c79e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7a6:	61fb      	str	r3, [r7, #28]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	69fb      	ldr	r3, [r7, #28]
 800c7b0:	61bb      	str	r3, [r7, #24]
 800c7b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7b4:	6979      	ldr	r1, [r7, #20]
 800c7b6:	69ba      	ldr	r2, [r7, #24]
 800c7b8:	e841 2300 	strex	r3, r2, [r1]
 800c7bc:	613b      	str	r3, [r7, #16]
   return(result);
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d1e6      	bne.n	800c792 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2220      	movs	r2, #32
 800c7c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f7ff fa8c 	bl	800bcf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7d8:	bf00      	nop
 800c7da:	3720      	adds	r7, #32
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}

0800c7e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b083      	sub	sp, #12
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c7e8:	bf00      	nop
 800c7ea:	370c      	adds	r7, #12
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f2:	4770      	bx	lr

0800c7f4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b083      	sub	sp, #12
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c7fc:	bf00      	nop
 800c7fe:	370c      	adds	r7, #12
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr

0800c808 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c808:	b480      	push	{r7}
 800c80a:	b083      	sub	sp, #12
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c810:	bf00      	nop
 800c812:	370c      	adds	r7, #12
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr

0800c81c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b085      	sub	sp, #20
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d101      	bne.n	800c832 <HAL_UARTEx_DisableFifoMode+0x16>
 800c82e:	2302      	movs	r3, #2
 800c830:	e027      	b.n	800c882 <HAL_UARTEx_DisableFifoMode+0x66>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2201      	movs	r2, #1
 800c836:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2224      	movs	r2, #36	; 0x24
 800c83e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	681a      	ldr	r2, [r3, #0]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f022 0201 	bic.w	r2, r2, #1
 800c858:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c860:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2200      	movs	r2, #0
 800c866:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	68fa      	ldr	r2, [r7, #12]
 800c86e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2220      	movs	r2, #32
 800c874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2200      	movs	r2, #0
 800c87c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c880:	2300      	movs	r3, #0
}
 800c882:	4618      	mov	r0, r3
 800c884:	3714      	adds	r7, #20
 800c886:	46bd      	mov	sp, r7
 800c888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88c:	4770      	bx	lr

0800c88e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c88e:	b580      	push	{r7, lr}
 800c890:	b084      	sub	sp, #16
 800c892:	af00      	add	r7, sp, #0
 800c894:	6078      	str	r0, [r7, #4]
 800c896:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d101      	bne.n	800c8a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c8a2:	2302      	movs	r3, #2
 800c8a4:	e02d      	b.n	800c902 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2224      	movs	r2, #36	; 0x24
 800c8b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f022 0201 	bic.w	r2, r2, #1
 800c8cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	689b      	ldr	r3, [r3, #8]
 800c8d4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	683a      	ldr	r2, [r7, #0]
 800c8de:	430a      	orrs	r2, r1
 800c8e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 f850 	bl	800c988 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	68fa      	ldr	r2, [r7, #12]
 800c8ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2220      	movs	r2, #32
 800c8f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c900:	2300      	movs	r3, #0
}
 800c902:	4618      	mov	r0, r3
 800c904:	3710      	adds	r7, #16
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}

0800c90a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b084      	sub	sp, #16
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
 800c912:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c91a:	2b01      	cmp	r3, #1
 800c91c:	d101      	bne.n	800c922 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c91e:	2302      	movs	r3, #2
 800c920:	e02d      	b.n	800c97e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2201      	movs	r2, #1
 800c926:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2224      	movs	r2, #36	; 0x24
 800c92e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	681a      	ldr	r2, [r3, #0]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f022 0201 	bic.w	r2, r2, #1
 800c948:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	689b      	ldr	r3, [r3, #8]
 800c950:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	683a      	ldr	r2, [r7, #0]
 800c95a:	430a      	orrs	r2, r1
 800c95c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 f812 	bl	800c988 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	68fa      	ldr	r2, [r7, #12]
 800c96a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2220      	movs	r2, #32
 800c970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2200      	movs	r2, #0
 800c978:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c97c:	2300      	movs	r3, #0
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3710      	adds	r7, #16
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}
	...

0800c988 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c988:	b480      	push	{r7}
 800c98a:	b085      	sub	sp, #20
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c994:	2b00      	cmp	r3, #0
 800c996:	d108      	bne.n	800c9aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2201      	movs	r2, #1
 800c99c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c9a8:	e031      	b.n	800ca0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c9aa:	2308      	movs	r3, #8
 800c9ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c9ae:	2308      	movs	r3, #8
 800c9b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	689b      	ldr	r3, [r3, #8]
 800c9b8:	0e5b      	lsrs	r3, r3, #25
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	f003 0307 	and.w	r3, r3, #7
 800c9c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	689b      	ldr	r3, [r3, #8]
 800c9c8:	0f5b      	lsrs	r3, r3, #29
 800c9ca:	b2db      	uxtb	r3, r3
 800c9cc:	f003 0307 	and.w	r3, r3, #7
 800c9d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c9d2:	7bbb      	ldrb	r3, [r7, #14]
 800c9d4:	7b3a      	ldrb	r2, [r7, #12]
 800c9d6:	4911      	ldr	r1, [pc, #68]	; (800ca1c <UARTEx_SetNbDataToProcess+0x94>)
 800c9d8:	5c8a      	ldrb	r2, [r1, r2]
 800c9da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c9de:	7b3a      	ldrb	r2, [r7, #12]
 800c9e0:	490f      	ldr	r1, [pc, #60]	; (800ca20 <UARTEx_SetNbDataToProcess+0x98>)
 800c9e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c9e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9e8:	b29a      	uxth	r2, r3
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c9f0:	7bfb      	ldrb	r3, [r7, #15]
 800c9f2:	7b7a      	ldrb	r2, [r7, #13]
 800c9f4:	4909      	ldr	r1, [pc, #36]	; (800ca1c <UARTEx_SetNbDataToProcess+0x94>)
 800c9f6:	5c8a      	ldrb	r2, [r1, r2]
 800c9f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c9fc:	7b7a      	ldrb	r2, [r7, #13]
 800c9fe:	4908      	ldr	r1, [pc, #32]	; (800ca20 <UARTEx_SetNbDataToProcess+0x98>)
 800ca00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca02:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca06:	b29a      	uxth	r2, r3
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ca0e:	bf00      	nop
 800ca10:	3714      	adds	r7, #20
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr
 800ca1a:	bf00      	nop
 800ca1c:	08014238 	.word	0x08014238
 800ca20:	08014240 	.word	0x08014240

0800ca24 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ca24:	b084      	sub	sp, #16
 800ca26:	b480      	push	{r7}
 800ca28:	b085      	sub	sp, #20
 800ca2a:	af00      	add	r7, sp, #0
 800ca2c:	6078      	str	r0, [r7, #4]
 800ca2e:	f107 001c 	add.w	r0, r7, #28
 800ca32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ca36:	2300      	movs	r3, #0
 800ca38:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800ca3a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800ca3c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ca3e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ca40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800ca42:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ca44:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800ca46:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ca48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800ca4a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ca4c:	68fa      	ldr	r2, [r7, #12]
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	685a      	ldr	r2, [r3, #4]
 800ca56:	4b07      	ldr	r3, [pc, #28]	; (800ca74 <SDMMC_Init+0x50>)
 800ca58:	4013      	ands	r3, r2
 800ca5a:	68fa      	ldr	r2, [r7, #12]
 800ca5c:	431a      	orrs	r2, r3
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ca62:	2300      	movs	r3, #0
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3714      	adds	r7, #20
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	b004      	add	sp, #16
 800ca70:	4770      	bx	lr
 800ca72:	bf00      	nop
 800ca74:	ffc02c00 	.word	0xffc02c00

0800ca78 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b083      	sub	sp, #12
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	370c      	adds	r7, #12
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr

0800ca92 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800ca92:	b480      	push	{r7}
 800ca94:	b083      	sub	sp, #12
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
 800ca9a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	681a      	ldr	r2, [r3, #0]
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800caa6:	2300      	movs	r3, #0
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	370c      	adds	r7, #12
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr

0800cab4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	f043 0203 	orr.w	r2, r3, #3
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800cac8:	2002      	movs	r0, #2
 800caca:	f7f5 ffd1 	bl	8002a70 <HAL_Delay>

  return HAL_OK;
 800cace:	2300      	movs	r3, #0
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	3708      	adds	r7, #8
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800cad8:	b480      	push	{r7}
 800cada:	b083      	sub	sp, #12
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	f003 0303 	and.w	r3, r3, #3
}
 800cae8:	4618      	mov	r0, r3
 800caea:	370c      	adds	r7, #12
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b085      	sub	sp, #20
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cafe:	2300      	movs	r3, #0
 800cb00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	681a      	ldr	r2, [r3, #0]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cb12:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800cb18:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800cb1e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cb20:	68fa      	ldr	r2, [r7, #12]
 800cb22:	4313      	orrs	r3, r2
 800cb24:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	68da      	ldr	r2, [r3, #12]
 800cb2a:	4b06      	ldr	r3, [pc, #24]	; (800cb44 <SDMMC_SendCommand+0x50>)
 800cb2c:	4013      	ands	r3, r2
 800cb2e:	68fa      	ldr	r2, [r7, #12]
 800cb30:	431a      	orrs	r2, r3
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cb36:	2300      	movs	r3, #0
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3714      	adds	r7, #20
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr
 800cb44:	fffee0c0 	.word	0xfffee0c0

0800cb48 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b083      	sub	sp, #12
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	691b      	ldr	r3, [r3, #16]
 800cb54:	b2db      	uxtb	r3, r3
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	370c      	adds	r7, #12
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr

0800cb62 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800cb62:	b480      	push	{r7}
 800cb64:	b085      	sub	sp, #20
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	6078      	str	r0, [r7, #4]
 800cb6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	3314      	adds	r3, #20
 800cb70:	461a      	mov	r2, r3
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	4413      	add	r3, r2
 800cb76:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3714      	adds	r7, #20
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr

0800cb88 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b085      	sub	sp, #20
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cb92:	2300      	movs	r3, #0
 800cb94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	685a      	ldr	r2, [r3, #4]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cbae:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cbb4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cbba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cbbc:	68fa      	ldr	r2, [r7, #12]
 800cbbe:	4313      	orrs	r3, r2
 800cbc0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbc6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	431a      	orrs	r2, r3
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800cbd2:	2300      	movs	r3, #0

}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3714      	adds	r7, #20
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr

0800cbe0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b088      	sub	sp, #32
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cbee:	2310      	movs	r3, #16
 800cbf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cbf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc02:	f107 0308 	add.w	r3, r7, #8
 800cc06:	4619      	mov	r1, r3
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f7ff ff73 	bl	800caf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800cc0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc12:	2110      	movs	r1, #16
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f000 fa7b 	bl	800d110 <SDMMC_GetCmdResp1>
 800cc1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc1c:	69fb      	ldr	r3, [r7, #28]
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3720      	adds	r7, #32
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}

0800cc26 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cc26:	b580      	push	{r7, lr}
 800cc28:	b088      	sub	sp, #32
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	6078      	str	r0, [r7, #4]
 800cc2e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cc34:	2311      	movs	r3, #17
 800cc36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc38:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc48:	f107 0308 	add.w	r3, r7, #8
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f7ff ff50 	bl	800caf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cc54:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc58:	2111      	movs	r1, #17
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f000 fa58 	bl	800d110 <SDMMC_GetCmdResp1>
 800cc60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc62:	69fb      	ldr	r3, [r7, #28]
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3720      	adds	r7, #32
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b088      	sub	sp, #32
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cc7a:	2312      	movs	r3, #18
 800cc7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc84:	2300      	movs	r3, #0
 800cc86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc8e:	f107 0308 	add.w	r3, r7, #8
 800cc92:	4619      	mov	r1, r3
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f7ff ff2d 	bl	800caf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cc9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc9e:	2112      	movs	r1, #18
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f000 fa35 	bl	800d110 <SDMMC_GetCmdResp1>
 800cca6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cca8:	69fb      	ldr	r3, [r7, #28]
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3720      	adds	r7, #32
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}

0800ccb2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ccb2:	b580      	push	{r7, lr}
 800ccb4:	b088      	sub	sp, #32
 800ccb6:	af00      	add	r7, sp, #0
 800ccb8:	6078      	str	r0, [r7, #4]
 800ccba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ccc0:	2318      	movs	r3, #24
 800ccc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ccc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ccc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ccca:	2300      	movs	r3, #0
 800cccc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ccd2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccd4:	f107 0308 	add.w	r3, r7, #8
 800ccd8:	4619      	mov	r1, r3
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f7ff ff0a 	bl	800caf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cce0:	f241 3288 	movw	r2, #5000	; 0x1388
 800cce4:	2118      	movs	r1, #24
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f000 fa12 	bl	800d110 <SDMMC_GetCmdResp1>
 800ccec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccee:	69fb      	ldr	r3, [r7, #28]
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3720      	adds	r7, #32
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b088      	sub	sp, #32
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cd06:	2319      	movs	r3, #25
 800cd08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd10:	2300      	movs	r3, #0
 800cd12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd1a:	f107 0308 	add.w	r3, r7, #8
 800cd1e:	4619      	mov	r1, r3
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f7ff fee7 	bl	800caf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cd26:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd2a:	2119      	movs	r1, #25
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f000 f9ef 	bl	800d110 <SDMMC_GetCmdResp1>
 800cd32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd34:	69fb      	ldr	r3, [r7, #28]
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3720      	adds	r7, #32
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
	...

0800cd40 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b088      	sub	sp, #32
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cd4c:	230c      	movs	r3, #12
 800cd4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd50:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd56:	2300      	movs	r3, #0
 800cd58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd5e:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	68db      	ldr	r3, [r3, #12]
 800cd64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	68db      	ldr	r3, [r3, #12]
 800cd70:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd78:	f107 0308 	add.w	r3, r7, #8
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f7ff feb8 	bl	800caf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800cd84:	4a08      	ldr	r2, [pc, #32]	; (800cda8 <SDMMC_CmdStopTransfer+0x68>)
 800cd86:	210c      	movs	r1, #12
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f000 f9c1 	bl	800d110 <SDMMC_GetCmdResp1>
 800cd8e:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	68db      	ldr	r3, [r3, #12]
 800cd94:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800cd9c:	69fb      	ldr	r3, [r7, #28]
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3720      	adds	r7, #32
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}
 800cda6:	bf00      	nop
 800cda8:	05f5e100 	.word	0x05f5e100

0800cdac <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b08a      	sub	sp, #40	; 0x28
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cdbc:	2307      	movs	r3, #7
 800cdbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cdc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cdc4:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cdce:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdd0:	f107 0310 	add.w	r3, r7, #16
 800cdd4:	4619      	mov	r1, r3
 800cdd6:	68f8      	ldr	r0, [r7, #12]
 800cdd8:	f7ff fe8c 	bl	800caf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800cddc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cde0:	2107      	movs	r1, #7
 800cde2:	68f8      	ldr	r0, [r7, #12]
 800cde4:	f000 f994 	bl	800d110 <SDMMC_GetCmdResp1>
 800cde8:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800cdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3728      	adds	r7, #40	; 0x28
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b088      	sub	sp, #32
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ce00:	2300      	movs	r3, #0
 800ce02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ce04:	2300      	movs	r3, #0
 800ce06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce12:	f107 0308 	add.w	r3, r7, #8
 800ce16:	4619      	mov	r1, r3
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f7ff fe6b 	bl	800caf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f000 fbb8 	bl	800d594 <SDMMC_GetCmdError>
 800ce24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce26:	69fb      	ldr	r3, [r7, #28]
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3720      	adds	r7, #32
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b088      	sub	sp, #32
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ce38:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ce3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ce3e:	2308      	movs	r3, #8
 800ce40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce42:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce52:	f107 0308 	add.w	r3, r7, #8
 800ce56:	4619      	mov	r1, r3
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f7ff fe4b 	bl	800caf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f000 fb4a 	bl	800d4f8 <SDMMC_GetCmdResp7>
 800ce64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce66:	69fb      	ldr	r3, [r7, #28]
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3720      	adds	r7, #32
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b088      	sub	sp, #32
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ce7e:	2337      	movs	r3, #55	; 0x37
 800ce80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce82:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce92:	f107 0308 	add.w	r3, r7, #8
 800ce96:	4619      	mov	r1, r3
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f7ff fe2b 	bl	800caf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ce9e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cea2:	2137      	movs	r1, #55	; 0x37
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f000 f933 	bl	800d110 <SDMMC_GetCmdResp1>
 800ceaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ceac:	69fb      	ldr	r3, [r7, #28]
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3720      	adds	r7, #32
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}

0800ceb6 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ceb6:	b580      	push	{r7, lr}
 800ceb8:	b088      	sub	sp, #32
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	6078      	str	r0, [r7, #4]
 800cebe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cec4:	2329      	movs	r3, #41	; 0x29
 800cec6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cec8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cecc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cece:	2300      	movs	r3, #0
 800ced0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ced2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ced6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ced8:	f107 0308 	add.w	r3, r7, #8
 800cedc:	4619      	mov	r1, r3
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f7ff fe08 	bl	800caf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f000 fa4f 	bl	800d388 <SDMMC_GetCmdResp3>
 800ceea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ceec:	69fb      	ldr	r3, [r7, #28]
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3720      	adds	r7, #32
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800cef6:	b580      	push	{r7, lr}
 800cef8:	b088      	sub	sp, #32
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
 800cefe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800cf04:	2306      	movs	r3, #6
 800cf06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf08:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf18:	f107 0308 	add.w	r3, r7, #8
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f7ff fde8 	bl	800caf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800cf24:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf28:	2106      	movs	r1, #6
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f000 f8f0 	bl	800d110 <SDMMC_GetCmdResp1>
 800cf30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf32:	69fb      	ldr	r3, [r7, #28]
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3720      	adds	r7, #32
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}

0800cf3c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b088      	sub	sp, #32
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800cf44:	2300      	movs	r3, #0
 800cf46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cf48:	2333      	movs	r3, #51	; 0x33
 800cf4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf52:	2300      	movs	r3, #0
 800cf54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf5c:	f107 0308 	add.w	r3, r7, #8
 800cf60:	4619      	mov	r1, r3
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f7ff fdc6 	bl	800caf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800cf68:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf6c:	2133      	movs	r1, #51	; 0x33
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f000 f8ce 	bl	800d110 <SDMMC_GetCmdResp1>
 800cf74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf76:	69fb      	ldr	r3, [r7, #28]
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3720      	adds	r7, #32
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b088      	sub	sp, #32
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cf8c:	2302      	movs	r3, #2
 800cf8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cf90:	f44f 7340 	mov.w	r3, #768	; 0x300
 800cf94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf96:	2300      	movs	r3, #0
 800cf98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfa0:	f107 0308 	add.w	r3, r7, #8
 800cfa4:	4619      	mov	r1, r3
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f7ff fda4 	bl	800caf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f000 f9a1 	bl	800d2f4 <SDMMC_GetCmdResp2>
 800cfb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfb4:	69fb      	ldr	r3, [r7, #28]
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3720      	adds	r7, #32
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}

0800cfbe <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cfbe:	b580      	push	{r7, lr}
 800cfc0:	b088      	sub	sp, #32
 800cfc2:	af00      	add	r7, sp, #0
 800cfc4:	6078      	str	r0, [r7, #4]
 800cfc6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cfcc:	2309      	movs	r3, #9
 800cfce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cfd0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800cfd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cfde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfe0:	f107 0308 	add.w	r3, r7, #8
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f7ff fd84 	bl	800caf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f000 f981 	bl	800d2f4 <SDMMC_GetCmdResp2>
 800cff2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cff4:	69fb      	ldr	r3, [r7, #28]
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3720      	adds	r7, #32
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}

0800cffe <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800cffe:	b580      	push	{r7, lr}
 800d000:	b088      	sub	sp, #32
 800d002:	af00      	add	r7, sp, #0
 800d004:	6078      	str	r0, [r7, #4]
 800d006:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d008:	2300      	movs	r3, #0
 800d00a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d00c:	2303      	movs	r3, #3
 800d00e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d010:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d014:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d016:	2300      	movs	r3, #0
 800d018:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d01a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d01e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d020:	f107 0308 	add.w	r3, r7, #8
 800d024:	4619      	mov	r1, r3
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f7ff fd64 	bl	800caf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d02c:	683a      	ldr	r2, [r7, #0]
 800d02e:	2103      	movs	r1, #3
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f000 f9e9 	bl	800d408 <SDMMC_GetCmdResp6>
 800d036:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d038:	69fb      	ldr	r3, [r7, #28]
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3720      	adds	r7, #32
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}

0800d042 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d042:	b580      	push	{r7, lr}
 800d044:	b088      	sub	sp, #32
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
 800d04a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d050:	230d      	movs	r3, #13
 800d052:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d054:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d058:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d05a:	2300      	movs	r3, #0
 800d05c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d05e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d062:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d064:	f107 0308 	add.w	r3, r7, #8
 800d068:	4619      	mov	r1, r3
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f7ff fd42 	bl	800caf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d070:	f241 3288 	movw	r2, #5000	; 0x1388
 800d074:	210d      	movs	r1, #13
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 f84a 	bl	800d110 <SDMMC_GetCmdResp1>
 800d07c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d07e:	69fb      	ldr	r3, [r7, #28]
}
 800d080:	4618      	mov	r0, r3
 800d082:	3720      	adds	r7, #32
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b088      	sub	sp, #32
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d090:	2300      	movs	r3, #0
 800d092:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d094:	230d      	movs	r3, #13
 800d096:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d098:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d09c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d0a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0a8:	f107 0308 	add.w	r3, r7, #8
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f7ff fd20 	bl	800caf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d0b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0b8:	210d      	movs	r1, #13
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f000 f828 	bl	800d110 <SDMMC_GetCmdResp1>
 800d0c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0c2:	69fb      	ldr	r3, [r7, #28]
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3720      	adds	r7, #32
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b088      	sub	sp, #32
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800d0d8:	230b      	movs	r3, #11
 800d0da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d0e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d0ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0ec:	f107 0308 	add.w	r3, r7, #8
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f7ff fcfe 	bl	800caf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800d0f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0fc:	210b      	movs	r1, #11
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f000 f806 	bl	800d110 <SDMMC_GetCmdResp1>
 800d104:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d106:	69fb      	ldr	r3, [r7, #28]
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3720      	adds	r7, #32
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b088      	sub	sp, #32
 800d114:	af00      	add	r7, sp, #0
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	460b      	mov	r3, r1
 800d11a:	607a      	str	r2, [r7, #4]
 800d11c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d11e:	4b70      	ldr	r3, [pc, #448]	; (800d2e0 <SDMMC_GetCmdResp1+0x1d0>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	4a70      	ldr	r2, [pc, #448]	; (800d2e4 <SDMMC_GetCmdResp1+0x1d4>)
 800d124:	fba2 2303 	umull	r2, r3, r2, r3
 800d128:	0a5a      	lsrs	r2, r3, #9
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	fb02 f303 	mul.w	r3, r2, r3
 800d130:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d132:	69fb      	ldr	r3, [r7, #28]
 800d134:	1e5a      	subs	r2, r3, #1
 800d136:	61fa      	str	r2, [r7, #28]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d102      	bne.n	800d142 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d13c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d140:	e0c9      	b.n	800d2d6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d146:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d148:	69ba      	ldr	r2, [r7, #24]
 800d14a:	4b67      	ldr	r3, [pc, #412]	; (800d2e8 <SDMMC_GetCmdResp1+0x1d8>)
 800d14c:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d0ef      	beq.n	800d132 <SDMMC_GetCmdResp1+0x22>
 800d152:	69bb      	ldr	r3, [r7, #24]
 800d154:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d1ea      	bne.n	800d132 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d160:	f003 0304 	and.w	r3, r3, #4
 800d164:	2b00      	cmp	r3, #0
 800d166:	d004      	beq.n	800d172 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	2204      	movs	r2, #4
 800d16c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d16e:	2304      	movs	r3, #4
 800d170:	e0b1      	b.n	800d2d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d176:	f003 0301 	and.w	r3, r3, #1
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d004      	beq.n	800d188 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	2201      	movs	r2, #1
 800d182:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d184:	2301      	movs	r3, #1
 800d186:	e0a6      	b.n	800d2d6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	4a58      	ldr	r2, [pc, #352]	; (800d2ec <SDMMC_GetCmdResp1+0x1dc>)
 800d18c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d18e:	68f8      	ldr	r0, [r7, #12]
 800d190:	f7ff fcda 	bl	800cb48 <SDMMC_GetCommandResponse>
 800d194:	4603      	mov	r3, r0
 800d196:	461a      	mov	r2, r3
 800d198:	7afb      	ldrb	r3, [r7, #11]
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d001      	beq.n	800d1a2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d19e:	2301      	movs	r3, #1
 800d1a0:	e099      	b.n	800d2d6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d1a2:	2100      	movs	r1, #0
 800d1a4:	68f8      	ldr	r0, [r7, #12]
 800d1a6:	f7ff fcdc 	bl	800cb62 <SDMMC_GetResponse>
 800d1aa:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d1ac:	697a      	ldr	r2, [r7, #20]
 800d1ae:	4b50      	ldr	r3, [pc, #320]	; (800d2f0 <SDMMC_GetCmdResp1+0x1e0>)
 800d1b0:	4013      	ands	r3, r2
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d101      	bne.n	800d1ba <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	e08d      	b.n	800d2d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	da02      	bge.n	800d1c6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d1c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d1c4:	e087      	b.n	800d2d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d001      	beq.n	800d1d4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d1d0:	2340      	movs	r3, #64	; 0x40
 800d1d2:	e080      	b.n	800d2d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d001      	beq.n	800d1e2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d1de:	2380      	movs	r3, #128	; 0x80
 800d1e0:	e079      	b.n	800d2d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d002      	beq.n	800d1f2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d1ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d1f0:	e071      	b.n	800d2d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d002      	beq.n	800d202 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d1fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d200:	e069      	b.n	800d2d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d002      	beq.n	800d212 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d20c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d210:	e061      	b.n	800d2d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d002      	beq.n	800d222 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d21c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d220:	e059      	b.n	800d2d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d002      	beq.n	800d232 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d22c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d230:	e051      	b.n	800d2d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d002      	beq.n	800d242 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d23c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d240:	e049      	b.n	800d2d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d002      	beq.n	800d252 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d24c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d250:	e041      	b.n	800d2d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d002      	beq.n	800d262 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d25c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d260:	e039      	b.n	800d2d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d002      	beq.n	800d272 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d26c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d270:	e031      	b.n	800d2d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d002      	beq.n	800d282 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d27c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d280:	e029      	b.n	800d2d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d002      	beq.n	800d292 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d28c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d290:	e021      	b.n	800d2d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d002      	beq.n	800d2a2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d29c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d2a0:	e019      	b.n	800d2d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d002      	beq.n	800d2b2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d2ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d2b0:	e011      	b.n	800d2d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d002      	beq.n	800d2c2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d2bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d2c0:	e009      	b.n	800d2d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	f003 0308 	and.w	r3, r3, #8
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d002      	beq.n	800d2d2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d2cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d2d0:	e001      	b.n	800d2d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d2d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3720      	adds	r7, #32
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
 800d2de:	bf00      	nop
 800d2e0:	2000000c 	.word	0x2000000c
 800d2e4:	10624dd3 	.word	0x10624dd3
 800d2e8:	00200045 	.word	0x00200045
 800d2ec:	002000c5 	.word	0x002000c5
 800d2f0:	fdffe008 	.word	0xfdffe008

0800d2f4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b085      	sub	sp, #20
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d2fc:	4b1f      	ldr	r3, [pc, #124]	; (800d37c <SDMMC_GetCmdResp2+0x88>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4a1f      	ldr	r2, [pc, #124]	; (800d380 <SDMMC_GetCmdResp2+0x8c>)
 800d302:	fba2 2303 	umull	r2, r3, r2, r3
 800d306:	0a5b      	lsrs	r3, r3, #9
 800d308:	f241 3288 	movw	r2, #5000	; 0x1388
 800d30c:	fb02 f303 	mul.w	r3, r2, r3
 800d310:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	1e5a      	subs	r2, r3, #1
 800d316:	60fa      	str	r2, [r7, #12]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d102      	bne.n	800d322 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d31c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d320:	e026      	b.n	800d370 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d326:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d0ef      	beq.n	800d312 <SDMMC_GetCmdResp2+0x1e>
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d1ea      	bne.n	800d312 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d340:	f003 0304 	and.w	r3, r3, #4
 800d344:	2b00      	cmp	r3, #0
 800d346:	d004      	beq.n	800d352 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2204      	movs	r2, #4
 800d34c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d34e:	2304      	movs	r3, #4
 800d350:	e00e      	b.n	800d370 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d356:	f003 0301 	and.w	r3, r3, #1
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d004      	beq.n	800d368 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2201      	movs	r2, #1
 800d362:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d364:	2301      	movs	r3, #1
 800d366:	e003      	b.n	800d370 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	4a06      	ldr	r2, [pc, #24]	; (800d384 <SDMMC_GetCmdResp2+0x90>)
 800d36c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d36e:	2300      	movs	r3, #0
}
 800d370:	4618      	mov	r0, r3
 800d372:	3714      	adds	r7, #20
 800d374:	46bd      	mov	sp, r7
 800d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37a:	4770      	bx	lr
 800d37c:	2000000c 	.word	0x2000000c
 800d380:	10624dd3 	.word	0x10624dd3
 800d384:	002000c5 	.word	0x002000c5

0800d388 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d388:	b480      	push	{r7}
 800d38a:	b085      	sub	sp, #20
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d390:	4b1a      	ldr	r3, [pc, #104]	; (800d3fc <SDMMC_GetCmdResp3+0x74>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	4a1a      	ldr	r2, [pc, #104]	; (800d400 <SDMMC_GetCmdResp3+0x78>)
 800d396:	fba2 2303 	umull	r2, r3, r2, r3
 800d39a:	0a5b      	lsrs	r3, r3, #9
 800d39c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3a0:	fb02 f303 	mul.w	r3, r2, r3
 800d3a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	1e5a      	subs	r2, r3, #1
 800d3aa:	60fa      	str	r2, [r7, #12]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d102      	bne.n	800d3b6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d3b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d3b4:	e01b      	b.n	800d3ee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d0ef      	beq.n	800d3a6 <SDMMC_GetCmdResp3+0x1e>
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d1ea      	bne.n	800d3a6 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3d4:	f003 0304 	and.w	r3, r3, #4
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d004      	beq.n	800d3e6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2204      	movs	r2, #4
 800d3e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d3e2:	2304      	movs	r3, #4
 800d3e4:	e003      	b.n	800d3ee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	4a06      	ldr	r2, [pc, #24]	; (800d404 <SDMMC_GetCmdResp3+0x7c>)
 800d3ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d3ec:	2300      	movs	r3, #0
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3714      	adds	r7, #20
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f8:	4770      	bx	lr
 800d3fa:	bf00      	nop
 800d3fc:	2000000c 	.word	0x2000000c
 800d400:	10624dd3 	.word	0x10624dd3
 800d404:	002000c5 	.word	0x002000c5

0800d408 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b088      	sub	sp, #32
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	460b      	mov	r3, r1
 800d412:	607a      	str	r2, [r7, #4]
 800d414:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d416:	4b35      	ldr	r3, [pc, #212]	; (800d4ec <SDMMC_GetCmdResp6+0xe4>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	4a35      	ldr	r2, [pc, #212]	; (800d4f0 <SDMMC_GetCmdResp6+0xe8>)
 800d41c:	fba2 2303 	umull	r2, r3, r2, r3
 800d420:	0a5b      	lsrs	r3, r3, #9
 800d422:	f241 3288 	movw	r2, #5000	; 0x1388
 800d426:	fb02 f303 	mul.w	r3, r2, r3
 800d42a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d42c:	69fb      	ldr	r3, [r7, #28]
 800d42e:	1e5a      	subs	r2, r3, #1
 800d430:	61fa      	str	r2, [r7, #28]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d102      	bne.n	800d43c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d436:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d43a:	e052      	b.n	800d4e2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d440:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d442:	69bb      	ldr	r3, [r7, #24]
 800d444:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d0ef      	beq.n	800d42c <SDMMC_GetCmdResp6+0x24>
 800d44c:	69bb      	ldr	r3, [r7, #24]
 800d44e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d452:	2b00      	cmp	r3, #0
 800d454:	d1ea      	bne.n	800d42c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d45a:	f003 0304 	and.w	r3, r3, #4
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d004      	beq.n	800d46c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	2204      	movs	r2, #4
 800d466:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d468:	2304      	movs	r3, #4
 800d46a:	e03a      	b.n	800d4e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d470:	f003 0301 	and.w	r3, r3, #1
 800d474:	2b00      	cmp	r3, #0
 800d476:	d004      	beq.n	800d482 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	2201      	movs	r2, #1
 800d47c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d47e:	2301      	movs	r3, #1
 800d480:	e02f      	b.n	800d4e2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d482:	68f8      	ldr	r0, [r7, #12]
 800d484:	f7ff fb60 	bl	800cb48 <SDMMC_GetCommandResponse>
 800d488:	4603      	mov	r3, r0
 800d48a:	461a      	mov	r2, r3
 800d48c:	7afb      	ldrb	r3, [r7, #11]
 800d48e:	4293      	cmp	r3, r2
 800d490:	d001      	beq.n	800d496 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d492:	2301      	movs	r3, #1
 800d494:	e025      	b.n	800d4e2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	4a16      	ldr	r2, [pc, #88]	; (800d4f4 <SDMMC_GetCmdResp6+0xec>)
 800d49a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d49c:	2100      	movs	r1, #0
 800d49e:	68f8      	ldr	r0, [r7, #12]
 800d4a0:	f7ff fb5f 	bl	800cb62 <SDMMC_GetResponse>
 800d4a4:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d106      	bne.n	800d4be <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	0c1b      	lsrs	r3, r3, #16
 800d4b4:	b29a      	uxth	r2, r3
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	e011      	b.n	800d4e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d002      	beq.n	800d4ce <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d4c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d4cc:	e009      	b.n	800d4e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d002      	beq.n	800d4de <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d4d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d4dc:	e001      	b.n	800d4e2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d4de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3720      	adds	r7, #32
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
 800d4ea:	bf00      	nop
 800d4ec:	2000000c 	.word	0x2000000c
 800d4f0:	10624dd3 	.word	0x10624dd3
 800d4f4:	002000c5 	.word	0x002000c5

0800d4f8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b085      	sub	sp, #20
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d500:	4b22      	ldr	r3, [pc, #136]	; (800d58c <SDMMC_GetCmdResp7+0x94>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	4a22      	ldr	r2, [pc, #136]	; (800d590 <SDMMC_GetCmdResp7+0x98>)
 800d506:	fba2 2303 	umull	r2, r3, r2, r3
 800d50a:	0a5b      	lsrs	r3, r3, #9
 800d50c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d510:	fb02 f303 	mul.w	r3, r2, r3
 800d514:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	1e5a      	subs	r2, r3, #1
 800d51a:	60fa      	str	r2, [r7, #12]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d102      	bne.n	800d526 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d520:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d524:	e02c      	b.n	800d580 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d52a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d532:	2b00      	cmp	r3, #0
 800d534:	d0ef      	beq.n	800d516 <SDMMC_GetCmdResp7+0x1e>
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d1ea      	bne.n	800d516 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d544:	f003 0304 	and.w	r3, r3, #4
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d004      	beq.n	800d556 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2204      	movs	r2, #4
 800d550:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d552:	2304      	movs	r3, #4
 800d554:	e014      	b.n	800d580 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d55a:	f003 0301 	and.w	r3, r3, #1
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d004      	beq.n	800d56c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2201      	movs	r2, #1
 800d566:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d568:	2301      	movs	r3, #1
 800d56a:	e009      	b.n	800d580 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d574:	2b00      	cmp	r3, #0
 800d576:	d002      	beq.n	800d57e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2240      	movs	r2, #64	; 0x40
 800d57c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d57e:	2300      	movs	r3, #0

}
 800d580:	4618      	mov	r0, r3
 800d582:	3714      	adds	r7, #20
 800d584:	46bd      	mov	sp, r7
 800d586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58a:	4770      	bx	lr
 800d58c:	2000000c 	.word	0x2000000c
 800d590:	10624dd3 	.word	0x10624dd3

0800d594 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d594:	b480      	push	{r7}
 800d596:	b085      	sub	sp, #20
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d59c:	4b11      	ldr	r3, [pc, #68]	; (800d5e4 <SDMMC_GetCmdError+0x50>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	4a11      	ldr	r2, [pc, #68]	; (800d5e8 <SDMMC_GetCmdError+0x54>)
 800d5a2:	fba2 2303 	umull	r2, r3, r2, r3
 800d5a6:	0a5b      	lsrs	r3, r3, #9
 800d5a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5ac:	fb02 f303 	mul.w	r3, r2, r3
 800d5b0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	1e5a      	subs	r2, r3, #1
 800d5b6:	60fa      	str	r2, [r7, #12]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d102      	bne.n	800d5c2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d5bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d5c0:	e009      	b.n	800d5d6 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d0f1      	beq.n	800d5b2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	4a06      	ldr	r2, [pc, #24]	; (800d5ec <SDMMC_GetCmdError+0x58>)
 800d5d2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800d5d4:	2300      	movs	r3, #0
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3714      	adds	r7, #20
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e0:	4770      	bx	lr
 800d5e2:	bf00      	nop
 800d5e4:	2000000c 	.word	0x2000000c
 800d5e8:	10624dd3 	.word	0x10624dd3
 800d5ec:	002000c5 	.word	0x002000c5

0800d5f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d5f0:	b084      	sub	sp, #16
 800d5f2:	b580      	push	{r7, lr}
 800d5f4:	b084      	sub	sp, #16
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6078      	str	r0, [r7, #4]
 800d5fa:	f107 001c 	add.w	r0, r7, #28
 800d5fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	68db      	ldr	r3, [r3, #12]
 800d606:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f001 faf6 	bl	800ec00 <USB_CoreReset>
 800d614:	4603      	mov	r3, r0
 800d616:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800d618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d106      	bne.n	800d62c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d622:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	639a      	str	r2, [r3, #56]	; 0x38
 800d62a:	e005      	b.n	800d638 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d630:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800d638:	7bfb      	ldrb	r3, [r7, #15]
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3710      	adds	r7, #16
 800d63e:	46bd      	mov	sp, r7
 800d640:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d644:	b004      	add	sp, #16
 800d646:	4770      	bx	lr

0800d648 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d648:	b480      	push	{r7}
 800d64a:	b087      	sub	sp, #28
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	4613      	mov	r3, r2
 800d654:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d656:	79fb      	ldrb	r3, [r7, #7]
 800d658:	2b02      	cmp	r3, #2
 800d65a:	d165      	bne.n	800d728 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	4a3e      	ldr	r2, [pc, #248]	; (800d758 <USB_SetTurnaroundTime+0x110>)
 800d660:	4293      	cmp	r3, r2
 800d662:	d906      	bls.n	800d672 <USB_SetTurnaroundTime+0x2a>
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	4a3d      	ldr	r2, [pc, #244]	; (800d75c <USB_SetTurnaroundTime+0x114>)
 800d668:	4293      	cmp	r3, r2
 800d66a:	d202      	bcs.n	800d672 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d66c:	230f      	movs	r3, #15
 800d66e:	617b      	str	r3, [r7, #20]
 800d670:	e05c      	b.n	800d72c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	4a39      	ldr	r2, [pc, #228]	; (800d75c <USB_SetTurnaroundTime+0x114>)
 800d676:	4293      	cmp	r3, r2
 800d678:	d306      	bcc.n	800d688 <USB_SetTurnaroundTime+0x40>
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	4a38      	ldr	r2, [pc, #224]	; (800d760 <USB_SetTurnaroundTime+0x118>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	d202      	bcs.n	800d688 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d682:	230e      	movs	r3, #14
 800d684:	617b      	str	r3, [r7, #20]
 800d686:	e051      	b.n	800d72c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d688:	68bb      	ldr	r3, [r7, #8]
 800d68a:	4a35      	ldr	r2, [pc, #212]	; (800d760 <USB_SetTurnaroundTime+0x118>)
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d306      	bcc.n	800d69e <USB_SetTurnaroundTime+0x56>
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	4a34      	ldr	r2, [pc, #208]	; (800d764 <USB_SetTurnaroundTime+0x11c>)
 800d694:	4293      	cmp	r3, r2
 800d696:	d202      	bcs.n	800d69e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d698:	230d      	movs	r3, #13
 800d69a:	617b      	str	r3, [r7, #20]
 800d69c:	e046      	b.n	800d72c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	4a30      	ldr	r2, [pc, #192]	; (800d764 <USB_SetTurnaroundTime+0x11c>)
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d306      	bcc.n	800d6b4 <USB_SetTurnaroundTime+0x6c>
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	4a2f      	ldr	r2, [pc, #188]	; (800d768 <USB_SetTurnaroundTime+0x120>)
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	d802      	bhi.n	800d6b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d6ae:	230c      	movs	r3, #12
 800d6b0:	617b      	str	r3, [r7, #20]
 800d6b2:	e03b      	b.n	800d72c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	4a2c      	ldr	r2, [pc, #176]	; (800d768 <USB_SetTurnaroundTime+0x120>)
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	d906      	bls.n	800d6ca <USB_SetTurnaroundTime+0x82>
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	4a2b      	ldr	r2, [pc, #172]	; (800d76c <USB_SetTurnaroundTime+0x124>)
 800d6c0:	4293      	cmp	r3, r2
 800d6c2:	d802      	bhi.n	800d6ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d6c4:	230b      	movs	r3, #11
 800d6c6:	617b      	str	r3, [r7, #20]
 800d6c8:	e030      	b.n	800d72c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	4a27      	ldr	r2, [pc, #156]	; (800d76c <USB_SetTurnaroundTime+0x124>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d906      	bls.n	800d6e0 <USB_SetTurnaroundTime+0x98>
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	4a26      	ldr	r2, [pc, #152]	; (800d770 <USB_SetTurnaroundTime+0x128>)
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d802      	bhi.n	800d6e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d6da:	230a      	movs	r3, #10
 800d6dc:	617b      	str	r3, [r7, #20]
 800d6de:	e025      	b.n	800d72c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	4a23      	ldr	r2, [pc, #140]	; (800d770 <USB_SetTurnaroundTime+0x128>)
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d906      	bls.n	800d6f6 <USB_SetTurnaroundTime+0xae>
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	4a22      	ldr	r2, [pc, #136]	; (800d774 <USB_SetTurnaroundTime+0x12c>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d202      	bcs.n	800d6f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d6f0:	2309      	movs	r3, #9
 800d6f2:	617b      	str	r3, [r7, #20]
 800d6f4:	e01a      	b.n	800d72c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	4a1e      	ldr	r2, [pc, #120]	; (800d774 <USB_SetTurnaroundTime+0x12c>)
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	d306      	bcc.n	800d70c <USB_SetTurnaroundTime+0xc4>
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	4a1d      	ldr	r2, [pc, #116]	; (800d778 <USB_SetTurnaroundTime+0x130>)
 800d702:	4293      	cmp	r3, r2
 800d704:	d802      	bhi.n	800d70c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d706:	2308      	movs	r3, #8
 800d708:	617b      	str	r3, [r7, #20]
 800d70a:	e00f      	b.n	800d72c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	4a1a      	ldr	r2, [pc, #104]	; (800d778 <USB_SetTurnaroundTime+0x130>)
 800d710:	4293      	cmp	r3, r2
 800d712:	d906      	bls.n	800d722 <USB_SetTurnaroundTime+0xda>
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	4a19      	ldr	r2, [pc, #100]	; (800d77c <USB_SetTurnaroundTime+0x134>)
 800d718:	4293      	cmp	r3, r2
 800d71a:	d202      	bcs.n	800d722 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d71c:	2307      	movs	r3, #7
 800d71e:	617b      	str	r3, [r7, #20]
 800d720:	e004      	b.n	800d72c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d722:	2306      	movs	r3, #6
 800d724:	617b      	str	r3, [r7, #20]
 800d726:	e001      	b.n	800d72c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d728:	2309      	movs	r3, #9
 800d72a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	68db      	ldr	r3, [r3, #12]
 800d730:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	68da      	ldr	r2, [r3, #12]
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	029b      	lsls	r3, r3, #10
 800d740:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d744:	431a      	orrs	r2, r3
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d74a:	2300      	movs	r3, #0
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	371c      	adds	r7, #28
 800d750:	46bd      	mov	sp, r7
 800d752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d756:	4770      	bx	lr
 800d758:	00d8acbf 	.word	0x00d8acbf
 800d75c:	00e4e1c0 	.word	0x00e4e1c0
 800d760:	00f42400 	.word	0x00f42400
 800d764:	01067380 	.word	0x01067380
 800d768:	011a499f 	.word	0x011a499f
 800d76c:	01312cff 	.word	0x01312cff
 800d770:	014ca43f 	.word	0x014ca43f
 800d774:	016e3600 	.word	0x016e3600
 800d778:	01a6ab1f 	.word	0x01a6ab1f
 800d77c:	01e84800 	.word	0x01e84800

0800d780 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d780:	b480      	push	{r7}
 800d782:	b083      	sub	sp, #12
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	689b      	ldr	r3, [r3, #8]
 800d78c:	f043 0201 	orr.w	r2, r3, #1
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d794:	2300      	movs	r3, #0
}
 800d796:	4618      	mov	r0, r3
 800d798:	370c      	adds	r7, #12
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr

0800d7a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d7a2:	b480      	push	{r7}
 800d7a4:	b083      	sub	sp, #12
 800d7a6:	af00      	add	r7, sp, #0
 800d7a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	689b      	ldr	r3, [r3, #8]
 800d7ae:	f023 0201 	bic.w	r2, r3, #1
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d7b6:	2300      	movs	r3, #0
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	370c      	adds	r7, #12
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c2:	4770      	bx	lr

0800d7c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	460b      	mov	r3, r1
 800d7ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	68db      	ldr	r3, [r3, #12]
 800d7d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d7e0:	78fb      	ldrb	r3, [r7, #3]
 800d7e2:	2b01      	cmp	r3, #1
 800d7e4:	d115      	bne.n	800d812 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	68db      	ldr	r3, [r3, #12]
 800d7ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d7f2:	2001      	movs	r0, #1
 800d7f4:	f7f5 f93c 	bl	8002a70 <HAL_Delay>
      ms++;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	3301      	adds	r3, #1
 800d7fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f001 f985 	bl	800eb0e <USB_GetMode>
 800d804:	4603      	mov	r3, r0
 800d806:	2b01      	cmp	r3, #1
 800d808:	d01e      	beq.n	800d848 <USB_SetCurrentMode+0x84>
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2b31      	cmp	r3, #49	; 0x31
 800d80e:	d9f0      	bls.n	800d7f2 <USB_SetCurrentMode+0x2e>
 800d810:	e01a      	b.n	800d848 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d812:	78fb      	ldrb	r3, [r7, #3]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d115      	bne.n	800d844 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	68db      	ldr	r3, [r3, #12]
 800d81c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d824:	2001      	movs	r0, #1
 800d826:	f7f5 f923 	bl	8002a70 <HAL_Delay>
      ms++;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	3301      	adds	r3, #1
 800d82e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f001 f96c 	bl	800eb0e <USB_GetMode>
 800d836:	4603      	mov	r3, r0
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d005      	beq.n	800d848 <USB_SetCurrentMode+0x84>
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	2b31      	cmp	r3, #49	; 0x31
 800d840:	d9f0      	bls.n	800d824 <USB_SetCurrentMode+0x60>
 800d842:	e001      	b.n	800d848 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d844:	2301      	movs	r3, #1
 800d846:	e005      	b.n	800d854 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	2b32      	cmp	r3, #50	; 0x32
 800d84c:	d101      	bne.n	800d852 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d84e:	2301      	movs	r3, #1
 800d850:	e000      	b.n	800d854 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d852:	2300      	movs	r3, #0
}
 800d854:	4618      	mov	r0, r3
 800d856:	3710      	adds	r7, #16
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}

0800d85c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d85c:	b084      	sub	sp, #16
 800d85e:	b580      	push	{r7, lr}
 800d860:	b086      	sub	sp, #24
 800d862:	af00      	add	r7, sp, #0
 800d864:	6078      	str	r0, [r7, #4]
 800d866:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d86a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d86e:	2300      	movs	r3, #0
 800d870:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d876:	2300      	movs	r3, #0
 800d878:	613b      	str	r3, [r7, #16]
 800d87a:	e009      	b.n	800d890 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d87c:	687a      	ldr	r2, [r7, #4]
 800d87e:	693b      	ldr	r3, [r7, #16]
 800d880:	3340      	adds	r3, #64	; 0x40
 800d882:	009b      	lsls	r3, r3, #2
 800d884:	4413      	add	r3, r2
 800d886:	2200      	movs	r2, #0
 800d888:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	3301      	adds	r3, #1
 800d88e:	613b      	str	r3, [r7, #16]
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	2b0e      	cmp	r3, #14
 800d894:	d9f2      	bls.n	800d87c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d11c      	bne.n	800d8d6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8a2:	685b      	ldr	r3, [r3, #4]
 800d8a4:	68fa      	ldr	r2, [r7, #12]
 800d8a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d8aa:	f043 0302 	orr.w	r3, r3, #2
 800d8ae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8b4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	601a      	str	r2, [r3, #0]
 800d8d4:	e005      	b.n	800d8e2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d8e8:	461a      	mov	r2, r3
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8fc:	461a      	mov	r2, r3
 800d8fe:	680b      	ldr	r3, [r1, #0]
 800d900:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d902:	2103      	movs	r1, #3
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	f000 f959 	bl	800dbbc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d90a:	2110      	movs	r1, #16
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f000 f8f1 	bl	800daf4 <USB_FlushTxFifo>
 800d912:	4603      	mov	r3, r0
 800d914:	2b00      	cmp	r3, #0
 800d916:	d001      	beq.n	800d91c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800d918:	2301      	movs	r3, #1
 800d91a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f000 f91d 	bl	800db5c <USB_FlushRxFifo>
 800d922:	4603      	mov	r3, r0
 800d924:	2b00      	cmp	r3, #0
 800d926:	d001      	beq.n	800d92c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800d928:	2301      	movs	r3, #1
 800d92a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d932:	461a      	mov	r2, r3
 800d934:	2300      	movs	r3, #0
 800d936:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d93e:	461a      	mov	r2, r3
 800d940:	2300      	movs	r3, #0
 800d942:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d94a:	461a      	mov	r2, r3
 800d94c:	2300      	movs	r3, #0
 800d94e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d950:	2300      	movs	r3, #0
 800d952:	613b      	str	r3, [r7, #16]
 800d954:	e043      	b.n	800d9de <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d956:	693b      	ldr	r3, [r7, #16]
 800d958:	015a      	lsls	r2, r3, #5
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	4413      	add	r3, r2
 800d95e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d968:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d96c:	d118      	bne.n	800d9a0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d10a      	bne.n	800d98a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	015a      	lsls	r2, r3, #5
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	4413      	add	r3, r2
 800d97c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d980:	461a      	mov	r2, r3
 800d982:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d986:	6013      	str	r3, [r2, #0]
 800d988:	e013      	b.n	800d9b2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	015a      	lsls	r2, r3, #5
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	4413      	add	r3, r2
 800d992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d996:	461a      	mov	r2, r3
 800d998:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d99c:	6013      	str	r3, [r2, #0]
 800d99e:	e008      	b.n	800d9b2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	015a      	lsls	r2, r3, #5
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	4413      	add	r3, r2
 800d9a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	015a      	lsls	r2, r3, #5
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	4413      	add	r3, r2
 800d9ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9be:	461a      	mov	r2, r3
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	015a      	lsls	r2, r3, #5
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	4413      	add	r3, r2
 800d9cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9d0:	461a      	mov	r2, r3
 800d9d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d9d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d9d8:	693b      	ldr	r3, [r7, #16]
 800d9da:	3301      	adds	r3, #1
 800d9dc:	613b      	str	r3, [r7, #16]
 800d9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e0:	693a      	ldr	r2, [r7, #16]
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d3b7      	bcc.n	800d956 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	613b      	str	r3, [r7, #16]
 800d9ea:	e043      	b.n	800da74 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d9ec:	693b      	ldr	r3, [r7, #16]
 800d9ee:	015a      	lsls	r2, r3, #5
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	4413      	add	r3, r2
 800d9f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d9fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800da02:	d118      	bne.n	800da36 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d10a      	bne.n	800da20 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	015a      	lsls	r2, r3, #5
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	4413      	add	r3, r2
 800da12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da16:	461a      	mov	r2, r3
 800da18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800da1c:	6013      	str	r3, [r2, #0]
 800da1e:	e013      	b.n	800da48 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	015a      	lsls	r2, r3, #5
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	4413      	add	r3, r2
 800da28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da2c:	461a      	mov	r2, r3
 800da2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800da32:	6013      	str	r3, [r2, #0]
 800da34:	e008      	b.n	800da48 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	015a      	lsls	r2, r3, #5
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	4413      	add	r3, r2
 800da3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da42:	461a      	mov	r2, r3
 800da44:	2300      	movs	r3, #0
 800da46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	015a      	lsls	r2, r3, #5
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	4413      	add	r3, r2
 800da50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da54:	461a      	mov	r2, r3
 800da56:	2300      	movs	r3, #0
 800da58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	015a      	lsls	r2, r3, #5
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	4413      	add	r3, r2
 800da62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da66:	461a      	mov	r2, r3
 800da68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800da6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	3301      	adds	r3, #1
 800da72:	613b      	str	r3, [r7, #16]
 800da74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da76:	693a      	ldr	r2, [r7, #16]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d3b7      	bcc.n	800d9ec <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da82:	691b      	ldr	r3, [r3, #16]
 800da84:	68fa      	ldr	r2, [r7, #12]
 800da86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800da8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2200      	movs	r2, #0
 800da94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800da9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	699b      	ldr	r3, [r3, #24]
 800daa2:	f043 0210 	orr.w	r2, r3, #16
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	699a      	ldr	r2, [r3, #24]
 800daae:	4b10      	ldr	r3, [pc, #64]	; (800daf0 <USB_DevInit+0x294>)
 800dab0:	4313      	orrs	r3, r2
 800dab2:	687a      	ldr	r2, [r7, #4]
 800dab4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d005      	beq.n	800dac8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	699b      	ldr	r3, [r3, #24]
 800dac0:	f043 0208 	orr.w	r2, r3, #8
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800dac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d107      	bne.n	800dade <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	699b      	ldr	r3, [r3, #24]
 800dad2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dad6:	f043 0304 	orr.w	r3, r3, #4
 800dada:	687a      	ldr	r2, [r7, #4]
 800dadc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800dade:	7dfb      	ldrb	r3, [r7, #23]
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3718      	adds	r7, #24
 800dae4:	46bd      	mov	sp, r7
 800dae6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800daea:	b004      	add	sp, #16
 800daec:	4770      	bx	lr
 800daee:	bf00      	nop
 800daf0:	803c3800 	.word	0x803c3800

0800daf4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800daf4:	b480      	push	{r7}
 800daf6:	b085      	sub	sp, #20
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dafe:	2300      	movs	r3, #0
 800db00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	3301      	adds	r3, #1
 800db06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	4a13      	ldr	r2, [pc, #76]	; (800db58 <USB_FlushTxFifo+0x64>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d901      	bls.n	800db14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800db10:	2303      	movs	r3, #3
 800db12:	e01b      	b.n	800db4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	691b      	ldr	r3, [r3, #16]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	daf2      	bge.n	800db02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800db1c:	2300      	movs	r3, #0
 800db1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	019b      	lsls	r3, r3, #6
 800db24:	f043 0220 	orr.w	r2, r3, #32
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	3301      	adds	r3, #1
 800db30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	4a08      	ldr	r2, [pc, #32]	; (800db58 <USB_FlushTxFifo+0x64>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d901      	bls.n	800db3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800db3a:	2303      	movs	r3, #3
 800db3c:	e006      	b.n	800db4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	691b      	ldr	r3, [r3, #16]
 800db42:	f003 0320 	and.w	r3, r3, #32
 800db46:	2b20      	cmp	r3, #32
 800db48:	d0f0      	beq.n	800db2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800db4a:	2300      	movs	r3, #0
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3714      	adds	r7, #20
 800db50:	46bd      	mov	sp, r7
 800db52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db56:	4770      	bx	lr
 800db58:	00030d40 	.word	0x00030d40

0800db5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800db5c:	b480      	push	{r7}
 800db5e:	b085      	sub	sp, #20
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800db64:	2300      	movs	r3, #0
 800db66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	3301      	adds	r3, #1
 800db6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	4a11      	ldr	r2, [pc, #68]	; (800dbb8 <USB_FlushRxFifo+0x5c>)
 800db72:	4293      	cmp	r3, r2
 800db74:	d901      	bls.n	800db7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800db76:	2303      	movs	r3, #3
 800db78:	e018      	b.n	800dbac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	691b      	ldr	r3, [r3, #16]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	daf2      	bge.n	800db68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800db82:	2300      	movs	r3, #0
 800db84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2210      	movs	r2, #16
 800db8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	3301      	adds	r3, #1
 800db90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	4a08      	ldr	r2, [pc, #32]	; (800dbb8 <USB_FlushRxFifo+0x5c>)
 800db96:	4293      	cmp	r3, r2
 800db98:	d901      	bls.n	800db9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800db9a:	2303      	movs	r3, #3
 800db9c:	e006      	b.n	800dbac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	691b      	ldr	r3, [r3, #16]
 800dba2:	f003 0310 	and.w	r3, r3, #16
 800dba6:	2b10      	cmp	r3, #16
 800dba8:	d0f0      	beq.n	800db8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800dbaa:	2300      	movs	r3, #0
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3714      	adds	r7, #20
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb6:	4770      	bx	lr
 800dbb8:	00030d40 	.word	0x00030d40

0800dbbc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b085      	sub	sp, #20
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbd2:	681a      	ldr	r2, [r3, #0]
 800dbd4:	78fb      	ldrb	r3, [r7, #3]
 800dbd6:	68f9      	ldr	r1, [r7, #12]
 800dbd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dbdc:	4313      	orrs	r3, r2
 800dbde:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dbe0:	2300      	movs	r3, #0
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3714      	adds	r7, #20
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbec:	4770      	bx	lr

0800dbee <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800dbee:	b480      	push	{r7}
 800dbf0:	b087      	sub	sp, #28
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc00:	689b      	ldr	r3, [r3, #8]
 800dc02:	f003 0306 	and.w	r3, r3, #6
 800dc06:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	2b02      	cmp	r3, #2
 800dc0c:	d002      	beq.n	800dc14 <USB_GetDevSpeed+0x26>
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2b06      	cmp	r3, #6
 800dc12:	d102      	bne.n	800dc1a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800dc14:	2302      	movs	r3, #2
 800dc16:	75fb      	strb	r3, [r7, #23]
 800dc18:	e001      	b.n	800dc1e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800dc1a:	230f      	movs	r3, #15
 800dc1c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800dc1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	371c      	adds	r7, #28
 800dc24:	46bd      	mov	sp, r7
 800dc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2a:	4770      	bx	lr

0800dc2c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b085      	sub	sp, #20
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	781b      	ldrb	r3, [r3, #0]
 800dc3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	785b      	ldrb	r3, [r3, #1]
 800dc44:	2b01      	cmp	r3, #1
 800dc46:	d13a      	bne.n	800dcbe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc4e:	69da      	ldr	r2, [r3, #28]
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	781b      	ldrb	r3, [r3, #0]
 800dc54:	f003 030f 	and.w	r3, r3, #15
 800dc58:	2101      	movs	r1, #1
 800dc5a:	fa01 f303 	lsl.w	r3, r1, r3
 800dc5e:	b29b      	uxth	r3, r3
 800dc60:	68f9      	ldr	r1, [r7, #12]
 800dc62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc66:	4313      	orrs	r3, r2
 800dc68:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	015a      	lsls	r2, r3, #5
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	4413      	add	r3, r2
 800dc72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d155      	bne.n	800dd2c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	015a      	lsls	r2, r3, #5
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	4413      	add	r3, r2
 800dc88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc8c:	681a      	ldr	r2, [r3, #0]
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	68db      	ldr	r3, [r3, #12]
 800dc92:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	791b      	ldrb	r3, [r3, #4]
 800dc9a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dc9c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	059b      	lsls	r3, r3, #22
 800dca2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dca4:	4313      	orrs	r3, r2
 800dca6:	68ba      	ldr	r2, [r7, #8]
 800dca8:	0151      	lsls	r1, r2, #5
 800dcaa:	68fa      	ldr	r2, [r7, #12]
 800dcac:	440a      	add	r2, r1
 800dcae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dcb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dcb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dcba:	6013      	str	r3, [r2, #0]
 800dcbc:	e036      	b.n	800dd2c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcc4:	69da      	ldr	r2, [r3, #28]
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	781b      	ldrb	r3, [r3, #0]
 800dcca:	f003 030f 	and.w	r3, r3, #15
 800dcce:	2101      	movs	r1, #1
 800dcd0:	fa01 f303 	lsl.w	r3, r1, r3
 800dcd4:	041b      	lsls	r3, r3, #16
 800dcd6:	68f9      	ldr	r1, [r7, #12]
 800dcd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dcdc:	4313      	orrs	r3, r2
 800dcde:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	015a      	lsls	r2, r3, #5
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	4413      	add	r3, r2
 800dce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d11a      	bne.n	800dd2c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	015a      	lsls	r2, r3, #5
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	4413      	add	r3, r2
 800dcfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd02:	681a      	ldr	r2, [r3, #0]
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	68db      	ldr	r3, [r3, #12]
 800dd08:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	791b      	ldrb	r3, [r3, #4]
 800dd10:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dd12:	430b      	orrs	r3, r1
 800dd14:	4313      	orrs	r3, r2
 800dd16:	68ba      	ldr	r2, [r7, #8]
 800dd18:	0151      	lsls	r1, r2, #5
 800dd1a:	68fa      	ldr	r2, [r7, #12]
 800dd1c:	440a      	add	r2, r1
 800dd1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dd26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd2a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800dd2c:	2300      	movs	r3, #0
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3714      	adds	r7, #20
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr
	...

0800dd3c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dd3c:	b480      	push	{r7}
 800dd3e:	b085      	sub	sp, #20
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
 800dd44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	785b      	ldrb	r3, [r3, #1]
 800dd54:	2b01      	cmp	r3, #1
 800dd56:	d161      	bne.n	800de1c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	015a      	lsls	r2, r3, #5
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	4413      	add	r3, r2
 800dd60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd6e:	d11f      	bne.n	800ddb0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	015a      	lsls	r2, r3, #5
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	4413      	add	r3, r2
 800dd78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	68ba      	ldr	r2, [r7, #8]
 800dd80:	0151      	lsls	r1, r2, #5
 800dd82:	68fa      	ldr	r2, [r7, #12]
 800dd84:	440a      	add	r2, r1
 800dd86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dd8e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	015a      	lsls	r2, r3, #5
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	4413      	add	r3, r2
 800dd98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	68ba      	ldr	r2, [r7, #8]
 800dda0:	0151      	lsls	r1, r2, #5
 800dda2:	68fa      	ldr	r2, [r7, #12]
 800dda4:	440a      	add	r2, r1
 800dda6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ddae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	f003 030f 	and.w	r3, r3, #15
 800ddc0:	2101      	movs	r1, #1
 800ddc2:	fa01 f303 	lsl.w	r3, r1, r3
 800ddc6:	b29b      	uxth	r3, r3
 800ddc8:	43db      	mvns	r3, r3
 800ddca:	68f9      	ldr	r1, [r7, #12]
 800ddcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ddd0:	4013      	ands	r3, r2
 800ddd2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddda:	69da      	ldr	r2, [r3, #28]
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	781b      	ldrb	r3, [r3, #0]
 800dde0:	f003 030f 	and.w	r3, r3, #15
 800dde4:	2101      	movs	r1, #1
 800dde6:	fa01 f303 	lsl.w	r3, r1, r3
 800ddea:	b29b      	uxth	r3, r3
 800ddec:	43db      	mvns	r3, r3
 800ddee:	68f9      	ldr	r1, [r7, #12]
 800ddf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ddf4:	4013      	ands	r3, r2
 800ddf6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	015a      	lsls	r2, r3, #5
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	4413      	add	r3, r2
 800de00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de04:	681a      	ldr	r2, [r3, #0]
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	0159      	lsls	r1, r3, #5
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	440b      	add	r3, r1
 800de0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de12:	4619      	mov	r1, r3
 800de14:	4b35      	ldr	r3, [pc, #212]	; (800deec <USB_DeactivateEndpoint+0x1b0>)
 800de16:	4013      	ands	r3, r2
 800de18:	600b      	str	r3, [r1, #0]
 800de1a:	e060      	b.n	800dede <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	015a      	lsls	r2, r3, #5
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	4413      	add	r3, r2
 800de24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de32:	d11f      	bne.n	800de74 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	015a      	lsls	r2, r3, #5
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	4413      	add	r3, r2
 800de3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	68ba      	ldr	r2, [r7, #8]
 800de44:	0151      	lsls	r1, r2, #5
 800de46:	68fa      	ldr	r2, [r7, #12]
 800de48:	440a      	add	r2, r1
 800de4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800de52:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	015a      	lsls	r2, r3, #5
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	4413      	add	r3, r2
 800de5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	68ba      	ldr	r2, [r7, #8]
 800de64:	0151      	lsls	r1, r2, #5
 800de66:	68fa      	ldr	r2, [r7, #12]
 800de68:	440a      	add	r2, r1
 800de6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	781b      	ldrb	r3, [r3, #0]
 800de80:	f003 030f 	and.w	r3, r3, #15
 800de84:	2101      	movs	r1, #1
 800de86:	fa01 f303 	lsl.w	r3, r1, r3
 800de8a:	041b      	lsls	r3, r3, #16
 800de8c:	43db      	mvns	r3, r3
 800de8e:	68f9      	ldr	r1, [r7, #12]
 800de90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de94:	4013      	ands	r3, r2
 800de96:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de9e:	69da      	ldr	r2, [r3, #28]
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	781b      	ldrb	r3, [r3, #0]
 800dea4:	f003 030f 	and.w	r3, r3, #15
 800dea8:	2101      	movs	r1, #1
 800deaa:	fa01 f303 	lsl.w	r3, r1, r3
 800deae:	041b      	lsls	r3, r3, #16
 800deb0:	43db      	mvns	r3, r3
 800deb2:	68f9      	ldr	r1, [r7, #12]
 800deb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800deb8:	4013      	ands	r3, r2
 800deba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	015a      	lsls	r2, r3, #5
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	4413      	add	r3, r2
 800dec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	0159      	lsls	r1, r3, #5
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	440b      	add	r3, r1
 800ded2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ded6:	4619      	mov	r1, r3
 800ded8:	4b05      	ldr	r3, [pc, #20]	; (800def0 <USB_DeactivateEndpoint+0x1b4>)
 800deda:	4013      	ands	r3, r2
 800dedc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800dede:	2300      	movs	r3, #0
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3714      	adds	r7, #20
 800dee4:	46bd      	mov	sp, r7
 800dee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deea:	4770      	bx	lr
 800deec:	ec337800 	.word	0xec337800
 800def0:	eff37800 	.word	0xeff37800

0800def4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b086      	sub	sp, #24
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
 800defc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	785b      	ldrb	r3, [r3, #1]
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	f040 810a 	bne.w	800e126 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	699b      	ldr	r3, [r3, #24]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d132      	bne.n	800df80 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	015a      	lsls	r2, r3, #5
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	4413      	add	r3, r2
 800df22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df26:	691b      	ldr	r3, [r3, #16]
 800df28:	693a      	ldr	r2, [r7, #16]
 800df2a:	0151      	lsls	r1, r2, #5
 800df2c:	697a      	ldr	r2, [r7, #20]
 800df2e:	440a      	add	r2, r1
 800df30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800df38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800df3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	015a      	lsls	r2, r3, #5
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	4413      	add	r3, r2
 800df46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df4a:	691b      	ldr	r3, [r3, #16]
 800df4c:	693a      	ldr	r2, [r7, #16]
 800df4e:	0151      	lsls	r1, r2, #5
 800df50:	697a      	ldr	r2, [r7, #20]
 800df52:	440a      	add	r2, r1
 800df54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800df5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800df5e:	693b      	ldr	r3, [r7, #16]
 800df60:	015a      	lsls	r2, r3, #5
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	4413      	add	r3, r2
 800df66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df6a:	691b      	ldr	r3, [r3, #16]
 800df6c:	693a      	ldr	r2, [r7, #16]
 800df6e:	0151      	lsls	r1, r2, #5
 800df70:	697a      	ldr	r2, [r7, #20]
 800df72:	440a      	add	r2, r1
 800df74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df78:	0cdb      	lsrs	r3, r3, #19
 800df7a:	04db      	lsls	r3, r3, #19
 800df7c:	6113      	str	r3, [r2, #16]
 800df7e:	e074      	b.n	800e06a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	015a      	lsls	r2, r3, #5
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	4413      	add	r3, r2
 800df88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df8c:	691b      	ldr	r3, [r3, #16]
 800df8e:	693a      	ldr	r2, [r7, #16]
 800df90:	0151      	lsls	r1, r2, #5
 800df92:	697a      	ldr	r2, [r7, #20]
 800df94:	440a      	add	r2, r1
 800df96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df9a:	0cdb      	lsrs	r3, r3, #19
 800df9c:	04db      	lsls	r3, r3, #19
 800df9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	015a      	lsls	r2, r3, #5
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	4413      	add	r3, r2
 800dfa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfac:	691b      	ldr	r3, [r3, #16]
 800dfae:	693a      	ldr	r2, [r7, #16]
 800dfb0:	0151      	lsls	r1, r2, #5
 800dfb2:	697a      	ldr	r2, [r7, #20]
 800dfb4:	440a      	add	r2, r1
 800dfb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dfbe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dfc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800dfc4:	693b      	ldr	r3, [r7, #16]
 800dfc6:	015a      	lsls	r2, r3, #5
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	4413      	add	r3, r2
 800dfcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfd0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	6999      	ldr	r1, [r3, #24]
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	68db      	ldr	r3, [r3, #12]
 800dfda:	440b      	add	r3, r1
 800dfdc:	1e59      	subs	r1, r3, #1
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	68db      	ldr	r3, [r3, #12]
 800dfe2:	fbb1 f3f3 	udiv	r3, r1, r3
 800dfe6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800dfe8:	4b9e      	ldr	r3, [pc, #632]	; (800e264 <USB_EPStartXfer+0x370>)
 800dfea:	400b      	ands	r3, r1
 800dfec:	6939      	ldr	r1, [r7, #16]
 800dfee:	0148      	lsls	r0, r1, #5
 800dff0:	6979      	ldr	r1, [r7, #20]
 800dff2:	4401      	add	r1, r0
 800dff4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dff8:	4313      	orrs	r3, r2
 800dffa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dffc:	693b      	ldr	r3, [r7, #16]
 800dffe:	015a      	lsls	r2, r3, #5
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	4413      	add	r3, r2
 800e004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e008:	691a      	ldr	r2, [r3, #16]
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	699b      	ldr	r3, [r3, #24]
 800e00e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e012:	6939      	ldr	r1, [r7, #16]
 800e014:	0148      	lsls	r0, r1, #5
 800e016:	6979      	ldr	r1, [r7, #20]
 800e018:	4401      	add	r1, r0
 800e01a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e01e:	4313      	orrs	r3, r2
 800e020:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	791b      	ldrb	r3, [r3, #4]
 800e026:	2b01      	cmp	r3, #1
 800e028:	d11f      	bne.n	800e06a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	015a      	lsls	r2, r3, #5
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	4413      	add	r3, r2
 800e032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e036:	691b      	ldr	r3, [r3, #16]
 800e038:	693a      	ldr	r2, [r7, #16]
 800e03a:	0151      	lsls	r1, r2, #5
 800e03c:	697a      	ldr	r2, [r7, #20]
 800e03e:	440a      	add	r2, r1
 800e040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e044:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e048:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	015a      	lsls	r2, r3, #5
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	4413      	add	r3, r2
 800e052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e056:	691b      	ldr	r3, [r3, #16]
 800e058:	693a      	ldr	r2, [r7, #16]
 800e05a:	0151      	lsls	r1, r2, #5
 800e05c:	697a      	ldr	r2, [r7, #20]
 800e05e:	440a      	add	r2, r1
 800e060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e064:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e068:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	015a      	lsls	r2, r3, #5
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	4413      	add	r3, r2
 800e072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	693a      	ldr	r2, [r7, #16]
 800e07a:	0151      	lsls	r1, r2, #5
 800e07c:	697a      	ldr	r2, [r7, #20]
 800e07e:	440a      	add	r2, r1
 800e080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e084:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e088:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	791b      	ldrb	r3, [r3, #4]
 800e08e:	2b01      	cmp	r3, #1
 800e090:	d015      	beq.n	800e0be <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	699b      	ldr	r3, [r3, #24]
 800e096:	2b00      	cmp	r3, #0
 800e098:	f000 8106 	beq.w	800e2a8 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e09c:	697b      	ldr	r3, [r7, #20]
 800e09e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	f003 030f 	and.w	r3, r3, #15
 800e0ac:	2101      	movs	r1, #1
 800e0ae:	fa01 f303 	lsl.w	r3, r1, r3
 800e0b2:	6979      	ldr	r1, [r7, #20]
 800e0b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e0b8:	4313      	orrs	r3, r2
 800e0ba:	634b      	str	r3, [r1, #52]	; 0x34
 800e0bc:	e0f4      	b.n	800e2a8 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0c4:	689b      	ldr	r3, [r3, #8]
 800e0c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d110      	bne.n	800e0f0 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	015a      	lsls	r2, r3, #5
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	4413      	add	r3, r2
 800e0d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	693a      	ldr	r2, [r7, #16]
 800e0de:	0151      	lsls	r1, r2, #5
 800e0e0:	697a      	ldr	r2, [r7, #20]
 800e0e2:	440a      	add	r2, r1
 800e0e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e0ec:	6013      	str	r3, [r2, #0]
 800e0ee:	e00f      	b.n	800e110 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	015a      	lsls	r2, r3, #5
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	4413      	add	r3, r2
 800e0f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	693a      	ldr	r2, [r7, #16]
 800e100:	0151      	lsls	r1, r2, #5
 800e102:	697a      	ldr	r2, [r7, #20]
 800e104:	440a      	add	r2, r1
 800e106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e10a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e10e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	6919      	ldr	r1, [r3, #16]
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	781a      	ldrb	r2, [r3, #0]
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	699b      	ldr	r3, [r3, #24]
 800e11c:	b29b      	uxth	r3, r3
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f000 fa94 	bl	800e64c <USB_WritePacket>
 800e124:	e0c0      	b.n	800e2a8 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	015a      	lsls	r2, r3, #5
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	4413      	add	r3, r2
 800e12e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e132:	691b      	ldr	r3, [r3, #16]
 800e134:	693a      	ldr	r2, [r7, #16]
 800e136:	0151      	lsls	r1, r2, #5
 800e138:	697a      	ldr	r2, [r7, #20]
 800e13a:	440a      	add	r2, r1
 800e13c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e140:	0cdb      	lsrs	r3, r3, #19
 800e142:	04db      	lsls	r3, r3, #19
 800e144:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	015a      	lsls	r2, r3, #5
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	4413      	add	r3, r2
 800e14e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e152:	691b      	ldr	r3, [r3, #16]
 800e154:	693a      	ldr	r2, [r7, #16]
 800e156:	0151      	lsls	r1, r2, #5
 800e158:	697a      	ldr	r2, [r7, #20]
 800e15a:	440a      	add	r2, r1
 800e15c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e160:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e164:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e168:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	699b      	ldr	r3, [r3, #24]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d123      	bne.n	800e1ba <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e172:	693b      	ldr	r3, [r7, #16]
 800e174:	015a      	lsls	r2, r3, #5
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	4413      	add	r3, r2
 800e17a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e17e:	691a      	ldr	r2, [r3, #16]
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	68db      	ldr	r3, [r3, #12]
 800e184:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e188:	6939      	ldr	r1, [r7, #16]
 800e18a:	0148      	lsls	r0, r1, #5
 800e18c:	6979      	ldr	r1, [r7, #20]
 800e18e:	4401      	add	r1, r0
 800e190:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e194:	4313      	orrs	r3, r2
 800e196:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	015a      	lsls	r2, r3, #5
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	4413      	add	r3, r2
 800e1a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1a4:	691b      	ldr	r3, [r3, #16]
 800e1a6:	693a      	ldr	r2, [r7, #16]
 800e1a8:	0151      	lsls	r1, r2, #5
 800e1aa:	697a      	ldr	r2, [r7, #20]
 800e1ac:	440a      	add	r2, r1
 800e1ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e1b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e1b6:	6113      	str	r3, [r2, #16]
 800e1b8:	e037      	b.n	800e22a <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	699a      	ldr	r2, [r3, #24]
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	68db      	ldr	r3, [r3, #12]
 800e1c2:	4413      	add	r3, r2
 800e1c4:	1e5a      	subs	r2, r3, #1
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	68db      	ldr	r3, [r3, #12]
 800e1ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1ce:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	68db      	ldr	r3, [r3, #12]
 800e1d4:	89fa      	ldrh	r2, [r7, #14]
 800e1d6:	fb03 f202 	mul.w	r2, r3, r2
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	015a      	lsls	r2, r3, #5
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	4413      	add	r3, r2
 800e1e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1ea:	691a      	ldr	r2, [r3, #16]
 800e1ec:	89fb      	ldrh	r3, [r7, #14]
 800e1ee:	04d9      	lsls	r1, r3, #19
 800e1f0:	4b1c      	ldr	r3, [pc, #112]	; (800e264 <USB_EPStartXfer+0x370>)
 800e1f2:	400b      	ands	r3, r1
 800e1f4:	6939      	ldr	r1, [r7, #16]
 800e1f6:	0148      	lsls	r0, r1, #5
 800e1f8:	6979      	ldr	r1, [r7, #20]
 800e1fa:	4401      	add	r1, r0
 800e1fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e200:	4313      	orrs	r3, r2
 800e202:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	015a      	lsls	r2, r3, #5
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	4413      	add	r3, r2
 800e20c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e210:	691a      	ldr	r2, [r3, #16]
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	69db      	ldr	r3, [r3, #28]
 800e216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e21a:	6939      	ldr	r1, [r7, #16]
 800e21c:	0148      	lsls	r0, r1, #5
 800e21e:	6979      	ldr	r1, [r7, #20]
 800e220:	4401      	add	r1, r0
 800e222:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e226:	4313      	orrs	r3, r2
 800e228:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	791b      	ldrb	r3, [r3, #4]
 800e22e:	2b01      	cmp	r3, #1
 800e230:	d12a      	bne.n	800e288 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e238:	689b      	ldr	r3, [r3, #8]
 800e23a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d112      	bne.n	800e268 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e242:	693b      	ldr	r3, [r7, #16]
 800e244:	015a      	lsls	r2, r3, #5
 800e246:	697b      	ldr	r3, [r7, #20]
 800e248:	4413      	add	r3, r2
 800e24a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	693a      	ldr	r2, [r7, #16]
 800e252:	0151      	lsls	r1, r2, #5
 800e254:	697a      	ldr	r2, [r7, #20]
 800e256:	440a      	add	r2, r1
 800e258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e25c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e260:	6013      	str	r3, [r2, #0]
 800e262:	e011      	b.n	800e288 <USB_EPStartXfer+0x394>
 800e264:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	015a      	lsls	r2, r3, #5
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	4413      	add	r3, r2
 800e270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	693a      	ldr	r2, [r7, #16]
 800e278:	0151      	lsls	r1, r2, #5
 800e27a:	697a      	ldr	r2, [r7, #20]
 800e27c:	440a      	add	r2, r1
 800e27e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e286:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e288:	693b      	ldr	r3, [r7, #16]
 800e28a:	015a      	lsls	r2, r3, #5
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	4413      	add	r3, r2
 800e290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	693a      	ldr	r2, [r7, #16]
 800e298:	0151      	lsls	r1, r2, #5
 800e29a:	697a      	ldr	r2, [r7, #20]
 800e29c:	440a      	add	r2, r1
 800e29e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e2a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e2a8:	2300      	movs	r3, #0
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3718      	adds	r7, #24
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}
 800e2b2:	bf00      	nop

0800e2b4 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b085      	sub	sp, #20
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
 800e2bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	781b      	ldrb	r3, [r3, #0]
 800e2c6:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	785b      	ldrb	r3, [r3, #1]
 800e2cc:	2b01      	cmp	r3, #1
 800e2ce:	f040 80ab 	bne.w	800e428 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	699b      	ldr	r3, [r3, #24]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d132      	bne.n	800e340 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e2da:	68bb      	ldr	r3, [r7, #8]
 800e2dc:	015a      	lsls	r2, r3, #5
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	4413      	add	r3, r2
 800e2e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2e6:	691b      	ldr	r3, [r3, #16]
 800e2e8:	68ba      	ldr	r2, [r7, #8]
 800e2ea:	0151      	lsls	r1, r2, #5
 800e2ec:	68fa      	ldr	r2, [r7, #12]
 800e2ee:	440a      	add	r2, r1
 800e2f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e2f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e2fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	015a      	lsls	r2, r3, #5
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	4413      	add	r3, r2
 800e306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e30a:	691b      	ldr	r3, [r3, #16]
 800e30c:	68ba      	ldr	r2, [r7, #8]
 800e30e:	0151      	lsls	r1, r2, #5
 800e310:	68fa      	ldr	r2, [r7, #12]
 800e312:	440a      	add	r2, r1
 800e314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e318:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e31c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	015a      	lsls	r2, r3, #5
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	4413      	add	r3, r2
 800e326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e32a:	691b      	ldr	r3, [r3, #16]
 800e32c:	68ba      	ldr	r2, [r7, #8]
 800e32e:	0151      	lsls	r1, r2, #5
 800e330:	68fa      	ldr	r2, [r7, #12]
 800e332:	440a      	add	r2, r1
 800e334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e338:	0cdb      	lsrs	r3, r3, #19
 800e33a:	04db      	lsls	r3, r3, #19
 800e33c:	6113      	str	r3, [r2, #16]
 800e33e:	e04e      	b.n	800e3de <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	015a      	lsls	r2, r3, #5
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	4413      	add	r3, r2
 800e348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e34c:	691b      	ldr	r3, [r3, #16]
 800e34e:	68ba      	ldr	r2, [r7, #8]
 800e350:	0151      	lsls	r1, r2, #5
 800e352:	68fa      	ldr	r2, [r7, #12]
 800e354:	440a      	add	r2, r1
 800e356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e35a:	0cdb      	lsrs	r3, r3, #19
 800e35c:	04db      	lsls	r3, r3, #19
 800e35e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	015a      	lsls	r2, r3, #5
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	4413      	add	r3, r2
 800e368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e36c:	691b      	ldr	r3, [r3, #16]
 800e36e:	68ba      	ldr	r2, [r7, #8]
 800e370:	0151      	lsls	r1, r2, #5
 800e372:	68fa      	ldr	r2, [r7, #12]
 800e374:	440a      	add	r2, r1
 800e376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e37a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e37e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e382:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	699a      	ldr	r2, [r3, #24]
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	68db      	ldr	r3, [r3, #12]
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d903      	bls.n	800e398 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	68da      	ldr	r2, [r3, #12]
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	015a      	lsls	r2, r3, #5
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	4413      	add	r3, r2
 800e3a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3a4:	691b      	ldr	r3, [r3, #16]
 800e3a6:	68ba      	ldr	r2, [r7, #8]
 800e3a8:	0151      	lsls	r1, r2, #5
 800e3aa:	68fa      	ldr	r2, [r7, #12]
 800e3ac:	440a      	add	r2, r1
 800e3ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e3b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e3b8:	68bb      	ldr	r3, [r7, #8]
 800e3ba:	015a      	lsls	r2, r3, #5
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	4413      	add	r3, r2
 800e3c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3c4:	691a      	ldr	r2, [r3, #16]
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	699b      	ldr	r3, [r3, #24]
 800e3ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e3ce:	68b9      	ldr	r1, [r7, #8]
 800e3d0:	0148      	lsls	r0, r1, #5
 800e3d2:	68f9      	ldr	r1, [r7, #12]
 800e3d4:	4401      	add	r1, r0
 800e3d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e3da:	4313      	orrs	r3, r2
 800e3dc:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	015a      	lsls	r2, r3, #5
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	4413      	add	r3, r2
 800e3e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	68ba      	ldr	r2, [r7, #8]
 800e3ee:	0151      	lsls	r1, r2, #5
 800e3f0:	68fa      	ldr	r2, [r7, #12]
 800e3f2:	440a      	add	r2, r1
 800e3f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e3fc:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	699b      	ldr	r3, [r3, #24]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d071      	beq.n	800e4ea <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e40c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	781b      	ldrb	r3, [r3, #0]
 800e412:	f003 030f 	and.w	r3, r3, #15
 800e416:	2101      	movs	r1, #1
 800e418:	fa01 f303 	lsl.w	r3, r1, r3
 800e41c:	68f9      	ldr	r1, [r7, #12]
 800e41e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e422:	4313      	orrs	r3, r2
 800e424:	634b      	str	r3, [r1, #52]	; 0x34
 800e426:	e060      	b.n	800e4ea <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	015a      	lsls	r2, r3, #5
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	4413      	add	r3, r2
 800e430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e434:	691b      	ldr	r3, [r3, #16]
 800e436:	68ba      	ldr	r2, [r7, #8]
 800e438:	0151      	lsls	r1, r2, #5
 800e43a:	68fa      	ldr	r2, [r7, #12]
 800e43c:	440a      	add	r2, r1
 800e43e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e442:	0cdb      	lsrs	r3, r3, #19
 800e444:	04db      	lsls	r3, r3, #19
 800e446:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	015a      	lsls	r2, r3, #5
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	4413      	add	r3, r2
 800e450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e454:	691b      	ldr	r3, [r3, #16]
 800e456:	68ba      	ldr	r2, [r7, #8]
 800e458:	0151      	lsls	r1, r2, #5
 800e45a:	68fa      	ldr	r2, [r7, #12]
 800e45c:	440a      	add	r2, r1
 800e45e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e462:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e466:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e46a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	699b      	ldr	r3, [r3, #24]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d003      	beq.n	800e47c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	68da      	ldr	r2, [r3, #12]
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	68da      	ldr	r2, [r3, #12]
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	015a      	lsls	r2, r3, #5
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	4413      	add	r3, r2
 800e48c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e490:	691b      	ldr	r3, [r3, #16]
 800e492:	68ba      	ldr	r2, [r7, #8]
 800e494:	0151      	lsls	r1, r2, #5
 800e496:	68fa      	ldr	r2, [r7, #12]
 800e498:	440a      	add	r2, r1
 800e49a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e49e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e4a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	015a      	lsls	r2, r3, #5
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	4413      	add	r3, r2
 800e4ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4b0:	691a      	ldr	r2, [r3, #16]
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	69db      	ldr	r3, [r3, #28]
 800e4b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e4ba:	68b9      	ldr	r1, [r7, #8]
 800e4bc:	0148      	lsls	r0, r1, #5
 800e4be:	68f9      	ldr	r1, [r7, #12]
 800e4c0:	4401      	add	r1, r0
 800e4c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e4c6:	4313      	orrs	r3, r2
 800e4c8:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	015a      	lsls	r2, r3, #5
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	4413      	add	r3, r2
 800e4d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	68ba      	ldr	r2, [r7, #8]
 800e4da:	0151      	lsls	r1, r2, #5
 800e4dc:	68fa      	ldr	r2, [r7, #12]
 800e4de:	440a      	add	r2, r1
 800e4e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e4e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e4e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e4ea:	2300      	movs	r3, #0
}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3714      	adds	r7, #20
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f6:	4770      	bx	lr

0800e4f8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	b087      	sub	sp, #28
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
 800e500:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e502:	2300      	movs	r3, #0
 800e504:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e506:	2300      	movs	r3, #0
 800e508:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	785b      	ldrb	r3, [r3, #1]
 800e512:	2b01      	cmp	r3, #1
 800e514:	d14a      	bne.n	800e5ac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	781b      	ldrb	r3, [r3, #0]
 800e51a:	015a      	lsls	r2, r3, #5
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	4413      	add	r3, r2
 800e520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e52a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e52e:	f040 8086 	bne.w	800e63e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	781b      	ldrb	r3, [r3, #0]
 800e536:	015a      	lsls	r2, r3, #5
 800e538:	693b      	ldr	r3, [r7, #16]
 800e53a:	4413      	add	r3, r2
 800e53c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	683a      	ldr	r2, [r7, #0]
 800e544:	7812      	ldrb	r2, [r2, #0]
 800e546:	0151      	lsls	r1, r2, #5
 800e548:	693a      	ldr	r2, [r7, #16]
 800e54a:	440a      	add	r2, r1
 800e54c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e550:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e554:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	015a      	lsls	r2, r3, #5
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	4413      	add	r3, r2
 800e560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	683a      	ldr	r2, [r7, #0]
 800e568:	7812      	ldrb	r2, [r2, #0]
 800e56a:	0151      	lsls	r1, r2, #5
 800e56c:	693a      	ldr	r2, [r7, #16]
 800e56e:	440a      	add	r2, r1
 800e570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e574:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e578:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	3301      	adds	r3, #1
 800e57e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	f242 7210 	movw	r2, #10000	; 0x2710
 800e586:	4293      	cmp	r3, r2
 800e588:	d902      	bls.n	800e590 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e58a:	2301      	movs	r3, #1
 800e58c:	75fb      	strb	r3, [r7, #23]
          break;
 800e58e:	e056      	b.n	800e63e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	781b      	ldrb	r3, [r3, #0]
 800e594:	015a      	lsls	r2, r3, #5
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	4413      	add	r3, r2
 800e59a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e5a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e5a8:	d0e7      	beq.n	800e57a <USB_EPStopXfer+0x82>
 800e5aa:	e048      	b.n	800e63e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	015a      	lsls	r2, r3, #5
 800e5b2:	693b      	ldr	r3, [r7, #16]
 800e5b4:	4413      	add	r3, r2
 800e5b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e5c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e5c4:	d13b      	bne.n	800e63e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	015a      	lsls	r2, r3, #5
 800e5cc:	693b      	ldr	r3, [r7, #16]
 800e5ce:	4413      	add	r3, r2
 800e5d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	683a      	ldr	r2, [r7, #0]
 800e5d8:	7812      	ldrb	r2, [r2, #0]
 800e5da:	0151      	lsls	r1, r2, #5
 800e5dc:	693a      	ldr	r2, [r7, #16]
 800e5de:	440a      	add	r2, r1
 800e5e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e5e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e5e8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	781b      	ldrb	r3, [r3, #0]
 800e5ee:	015a      	lsls	r2, r3, #5
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	4413      	add	r3, r2
 800e5f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	683a      	ldr	r2, [r7, #0]
 800e5fc:	7812      	ldrb	r2, [r2, #0]
 800e5fe:	0151      	lsls	r1, r2, #5
 800e600:	693a      	ldr	r2, [r7, #16]
 800e602:	440a      	add	r2, r1
 800e604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e608:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e60c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	3301      	adds	r3, #1
 800e612:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	f242 7210 	movw	r2, #10000	; 0x2710
 800e61a:	4293      	cmp	r3, r2
 800e61c:	d902      	bls.n	800e624 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e61e:	2301      	movs	r3, #1
 800e620:	75fb      	strb	r3, [r7, #23]
          break;
 800e622:	e00c      	b.n	800e63e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	015a      	lsls	r2, r3, #5
 800e62a:	693b      	ldr	r3, [r7, #16]
 800e62c:	4413      	add	r3, r2
 800e62e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e638:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e63c:	d0e7      	beq.n	800e60e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e63e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e640:	4618      	mov	r0, r3
 800e642:	371c      	adds	r7, #28
 800e644:	46bd      	mov	sp, r7
 800e646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64a:	4770      	bx	lr

0800e64c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800e64c:	b480      	push	{r7}
 800e64e:	b089      	sub	sp, #36	; 0x24
 800e650:	af00      	add	r7, sp, #0
 800e652:	60f8      	str	r0, [r7, #12]
 800e654:	60b9      	str	r1, [r7, #8]
 800e656:	4611      	mov	r1, r2
 800e658:	461a      	mov	r2, r3
 800e65a:	460b      	mov	r3, r1
 800e65c:	71fb      	strb	r3, [r7, #7]
 800e65e:	4613      	mov	r3, r2
 800e660:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800e66a:	88bb      	ldrh	r3, [r7, #4]
 800e66c:	3303      	adds	r3, #3
 800e66e:	089b      	lsrs	r3, r3, #2
 800e670:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800e672:	2300      	movs	r3, #0
 800e674:	61bb      	str	r3, [r7, #24]
 800e676:	e018      	b.n	800e6aa <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e678:	79fb      	ldrb	r3, [r7, #7]
 800e67a:	031a      	lsls	r2, r3, #12
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	4413      	add	r3, r2
 800e680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e684:	461a      	mov	r2, r3
 800e686:	69fb      	ldr	r3, [r7, #28]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800e68c:	69fb      	ldr	r3, [r7, #28]
 800e68e:	3301      	adds	r3, #1
 800e690:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800e692:	69fb      	ldr	r3, [r7, #28]
 800e694:	3301      	adds	r3, #1
 800e696:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800e698:	69fb      	ldr	r3, [r7, #28]
 800e69a:	3301      	adds	r3, #1
 800e69c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800e69e:	69fb      	ldr	r3, [r7, #28]
 800e6a0:	3301      	adds	r3, #1
 800e6a2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800e6a4:	69bb      	ldr	r3, [r7, #24]
 800e6a6:	3301      	adds	r3, #1
 800e6a8:	61bb      	str	r3, [r7, #24]
 800e6aa:	69ba      	ldr	r2, [r7, #24]
 800e6ac:	693b      	ldr	r3, [r7, #16]
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	d3e2      	bcc.n	800e678 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800e6b2:	2300      	movs	r3, #0
}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	3724      	adds	r7, #36	; 0x24
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6be:	4770      	bx	lr

0800e6c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e6c0:	b480      	push	{r7}
 800e6c2:	b08b      	sub	sp, #44	; 0x2c
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	60f8      	str	r0, [r7, #12]
 800e6c8:	60b9      	str	r1, [r7, #8]
 800e6ca:	4613      	mov	r3, r2
 800e6cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e6d6:	88fb      	ldrh	r3, [r7, #6]
 800e6d8:	089b      	lsrs	r3, r3, #2
 800e6da:	b29b      	uxth	r3, r3
 800e6dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e6de:	88fb      	ldrh	r3, [r7, #6]
 800e6e0:	f003 0303 	and.w	r3, r3, #3
 800e6e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	623b      	str	r3, [r7, #32]
 800e6ea:	e014      	b.n	800e716 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e6ec:	69bb      	ldr	r3, [r7, #24]
 800e6ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6f2:	681a      	ldr	r2, [r3, #0]
 800e6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f6:	601a      	str	r2, [r3, #0]
    pDest++;
 800e6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e700:	3301      	adds	r3, #1
 800e702:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e706:	3301      	adds	r3, #1
 800e708:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e70c:	3301      	adds	r3, #1
 800e70e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e710:	6a3b      	ldr	r3, [r7, #32]
 800e712:	3301      	adds	r3, #1
 800e714:	623b      	str	r3, [r7, #32]
 800e716:	6a3a      	ldr	r2, [r7, #32]
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	429a      	cmp	r2, r3
 800e71c:	d3e6      	bcc.n	800e6ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e71e:	8bfb      	ldrh	r3, [r7, #30]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d01e      	beq.n	800e762 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e724:	2300      	movs	r3, #0
 800e726:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e728:	69bb      	ldr	r3, [r7, #24]
 800e72a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e72e:	461a      	mov	r2, r3
 800e730:	f107 0310 	add.w	r3, r7, #16
 800e734:	6812      	ldr	r2, [r2, #0]
 800e736:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e738:	693a      	ldr	r2, [r7, #16]
 800e73a:	6a3b      	ldr	r3, [r7, #32]
 800e73c:	b2db      	uxtb	r3, r3
 800e73e:	00db      	lsls	r3, r3, #3
 800e740:	fa22 f303 	lsr.w	r3, r2, r3
 800e744:	b2da      	uxtb	r2, r3
 800e746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e748:	701a      	strb	r2, [r3, #0]
      i++;
 800e74a:	6a3b      	ldr	r3, [r7, #32]
 800e74c:	3301      	adds	r3, #1
 800e74e:	623b      	str	r3, [r7, #32]
      pDest++;
 800e750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e752:	3301      	adds	r3, #1
 800e754:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e756:	8bfb      	ldrh	r3, [r7, #30]
 800e758:	3b01      	subs	r3, #1
 800e75a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e75c:	8bfb      	ldrh	r3, [r7, #30]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d1ea      	bne.n	800e738 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e764:	4618      	mov	r0, r3
 800e766:	372c      	adds	r7, #44	; 0x2c
 800e768:	46bd      	mov	sp, r7
 800e76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76e:	4770      	bx	lr

0800e770 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e770:	b480      	push	{r7}
 800e772:	b085      	sub	sp, #20
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
 800e778:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	781b      	ldrb	r3, [r3, #0]
 800e782:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	785b      	ldrb	r3, [r3, #1]
 800e788:	2b01      	cmp	r3, #1
 800e78a:	d12c      	bne.n	800e7e6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	015a      	lsls	r2, r3, #5
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	4413      	add	r3, r2
 800e794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	db12      	blt.n	800e7c4 <USB_EPSetStall+0x54>
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d00f      	beq.n	800e7c4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	015a      	lsls	r2, r3, #5
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	4413      	add	r3, r2
 800e7ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	68ba      	ldr	r2, [r7, #8]
 800e7b4:	0151      	lsls	r1, r2, #5
 800e7b6:	68fa      	ldr	r2, [r7, #12]
 800e7b8:	440a      	add	r2, r1
 800e7ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e7c2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	015a      	lsls	r2, r3, #5
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	4413      	add	r3, r2
 800e7cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	68ba      	ldr	r2, [r7, #8]
 800e7d4:	0151      	lsls	r1, r2, #5
 800e7d6:	68fa      	ldr	r2, [r7, #12]
 800e7d8:	440a      	add	r2, r1
 800e7da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e7e2:	6013      	str	r3, [r2, #0]
 800e7e4:	e02b      	b.n	800e83e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	015a      	lsls	r2, r3, #5
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	4413      	add	r3, r2
 800e7ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	db12      	blt.n	800e81e <USB_EPSetStall+0xae>
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d00f      	beq.n	800e81e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	015a      	lsls	r2, r3, #5
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	4413      	add	r3, r2
 800e806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	68ba      	ldr	r2, [r7, #8]
 800e80e:	0151      	lsls	r1, r2, #5
 800e810:	68fa      	ldr	r2, [r7, #12]
 800e812:	440a      	add	r2, r1
 800e814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e818:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e81c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	015a      	lsls	r2, r3, #5
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	4413      	add	r3, r2
 800e826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	68ba      	ldr	r2, [r7, #8]
 800e82e:	0151      	lsls	r1, r2, #5
 800e830:	68fa      	ldr	r2, [r7, #12]
 800e832:	440a      	add	r2, r1
 800e834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e838:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e83c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e83e:	2300      	movs	r3, #0
}
 800e840:	4618      	mov	r0, r3
 800e842:	3714      	adds	r7, #20
 800e844:	46bd      	mov	sp, r7
 800e846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84a:	4770      	bx	lr

0800e84c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e84c:	b480      	push	{r7}
 800e84e:	b085      	sub	sp, #20
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	785b      	ldrb	r3, [r3, #1]
 800e864:	2b01      	cmp	r3, #1
 800e866:	d128      	bne.n	800e8ba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	015a      	lsls	r2, r3, #5
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	4413      	add	r3, r2
 800e870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	68ba      	ldr	r2, [r7, #8]
 800e878:	0151      	lsls	r1, r2, #5
 800e87a:	68fa      	ldr	r2, [r7, #12]
 800e87c:	440a      	add	r2, r1
 800e87e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e882:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e886:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	791b      	ldrb	r3, [r3, #4]
 800e88c:	2b03      	cmp	r3, #3
 800e88e:	d003      	beq.n	800e898 <USB_EPClearStall+0x4c>
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	791b      	ldrb	r3, [r3, #4]
 800e894:	2b02      	cmp	r3, #2
 800e896:	d138      	bne.n	800e90a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	015a      	lsls	r2, r3, #5
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	4413      	add	r3, r2
 800e8a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	68ba      	ldr	r2, [r7, #8]
 800e8a8:	0151      	lsls	r1, r2, #5
 800e8aa:	68fa      	ldr	r2, [r7, #12]
 800e8ac:	440a      	add	r2, r1
 800e8ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e8b6:	6013      	str	r3, [r2, #0]
 800e8b8:	e027      	b.n	800e90a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	015a      	lsls	r2, r3, #5
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	4413      	add	r3, r2
 800e8c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	68ba      	ldr	r2, [r7, #8]
 800e8ca:	0151      	lsls	r1, r2, #5
 800e8cc:	68fa      	ldr	r2, [r7, #12]
 800e8ce:	440a      	add	r2, r1
 800e8d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e8d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	791b      	ldrb	r3, [r3, #4]
 800e8de:	2b03      	cmp	r3, #3
 800e8e0:	d003      	beq.n	800e8ea <USB_EPClearStall+0x9e>
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	791b      	ldrb	r3, [r3, #4]
 800e8e6:	2b02      	cmp	r3, #2
 800e8e8:	d10f      	bne.n	800e90a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e8ea:	68bb      	ldr	r3, [r7, #8]
 800e8ec:	015a      	lsls	r2, r3, #5
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	4413      	add	r3, r2
 800e8f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	68ba      	ldr	r2, [r7, #8]
 800e8fa:	0151      	lsls	r1, r2, #5
 800e8fc:	68fa      	ldr	r2, [r7, #12]
 800e8fe:	440a      	add	r2, r1
 800e900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e908:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e90a:	2300      	movs	r3, #0
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3714      	adds	r7, #20
 800e910:	46bd      	mov	sp, r7
 800e912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e916:	4770      	bx	lr

0800e918 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e918:	b480      	push	{r7}
 800e91a:	b085      	sub	sp, #20
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
 800e920:	460b      	mov	r3, r1
 800e922:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	68fa      	ldr	r2, [r7, #12]
 800e932:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e936:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e93a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e942:	681a      	ldr	r2, [r3, #0]
 800e944:	78fb      	ldrb	r3, [r7, #3]
 800e946:	011b      	lsls	r3, r3, #4
 800e948:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e94c:	68f9      	ldr	r1, [r7, #12]
 800e94e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e952:	4313      	orrs	r3, r2
 800e954:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e956:	2300      	movs	r3, #0
}
 800e958:	4618      	mov	r0, r3
 800e95a:	3714      	adds	r7, #20
 800e95c:	46bd      	mov	sp, r7
 800e95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e962:	4770      	bx	lr

0800e964 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e964:	b480      	push	{r7}
 800e966:	b085      	sub	sp, #20
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	68fa      	ldr	r2, [r7, #12]
 800e97a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e97e:	f023 0303 	bic.w	r3, r3, #3
 800e982:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e98a:	685b      	ldr	r3, [r3, #4]
 800e98c:	68fa      	ldr	r2, [r7, #12]
 800e98e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e992:	f023 0302 	bic.w	r3, r3, #2
 800e996:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e998:	2300      	movs	r3, #0
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3714      	adds	r7, #20
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a4:	4770      	bx	lr

0800e9a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e9a6:	b480      	push	{r7}
 800e9a8:	b085      	sub	sp, #20
 800e9aa:	af00      	add	r7, sp, #0
 800e9ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	68fa      	ldr	r2, [r7, #12]
 800e9bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e9c0:	f023 0303 	bic.w	r3, r3, #3
 800e9c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9cc:	685b      	ldr	r3, [r3, #4]
 800e9ce:	68fa      	ldr	r2, [r7, #12]
 800e9d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e9d4:	f043 0302 	orr.w	r3, r3, #2
 800e9d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e9da:	2300      	movs	r3, #0
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	3714      	adds	r7, #20
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr

0800e9e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b085      	sub	sp, #20
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	695b      	ldr	r3, [r3, #20]
 800e9f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	699b      	ldr	r3, [r3, #24]
 800e9fa:	68fa      	ldr	r2, [r7, #12]
 800e9fc:	4013      	ands	r3, r2
 800e9fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ea00:	68fb      	ldr	r3, [r7, #12]
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	3714      	adds	r7, #20
 800ea06:	46bd      	mov	sp, r7
 800ea08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0c:	4770      	bx	lr

0800ea0e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ea0e:	b480      	push	{r7}
 800ea10:	b085      	sub	sp, #20
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea20:	699b      	ldr	r3, [r3, #24]
 800ea22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea2a:	69db      	ldr	r3, [r3, #28]
 800ea2c:	68ba      	ldr	r2, [r7, #8]
 800ea2e:	4013      	ands	r3, r2
 800ea30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	0c1b      	lsrs	r3, r3, #16
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3714      	adds	r7, #20
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea40:	4770      	bx	lr

0800ea42 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ea42:	b480      	push	{r7}
 800ea44:	b085      	sub	sp, #20
 800ea46:	af00      	add	r7, sp, #0
 800ea48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea54:	699b      	ldr	r3, [r3, #24]
 800ea56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea5e:	69db      	ldr	r3, [r3, #28]
 800ea60:	68ba      	ldr	r2, [r7, #8]
 800ea62:	4013      	ands	r3, r2
 800ea64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ea66:	68bb      	ldr	r3, [r7, #8]
 800ea68:	b29b      	uxth	r3, r3
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	3714      	adds	r7, #20
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea74:	4770      	bx	lr

0800ea76 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ea76:	b480      	push	{r7}
 800ea78:	b085      	sub	sp, #20
 800ea7a:	af00      	add	r7, sp, #0
 800ea7c:	6078      	str	r0, [r7, #4]
 800ea7e:	460b      	mov	r3, r1
 800ea80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ea86:	78fb      	ldrb	r3, [r7, #3]
 800ea88:	015a      	lsls	r2, r3, #5
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	4413      	add	r3, r2
 800ea8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea92:	689b      	ldr	r3, [r3, #8]
 800ea94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea9c:	695b      	ldr	r3, [r3, #20]
 800ea9e:	68ba      	ldr	r2, [r7, #8]
 800eaa0:	4013      	ands	r3, r2
 800eaa2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eaa4:	68bb      	ldr	r3, [r7, #8]
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3714      	adds	r7, #20
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab0:	4770      	bx	lr

0800eab2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800eab2:	b480      	push	{r7}
 800eab4:	b087      	sub	sp, #28
 800eab6:	af00      	add	r7, sp, #0
 800eab8:	6078      	str	r0, [r7, #4]
 800eaba:	460b      	mov	r3, r1
 800eabc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800eac2:	697b      	ldr	r3, [r7, #20]
 800eac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eac8:	691b      	ldr	r3, [r3, #16]
 800eaca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ead2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ead4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ead6:	78fb      	ldrb	r3, [r7, #3]
 800ead8:	f003 030f 	and.w	r3, r3, #15
 800eadc:	68fa      	ldr	r2, [r7, #12]
 800eade:	fa22 f303 	lsr.w	r3, r2, r3
 800eae2:	01db      	lsls	r3, r3, #7
 800eae4:	b2db      	uxtb	r3, r3
 800eae6:	693a      	ldr	r2, [r7, #16]
 800eae8:	4313      	orrs	r3, r2
 800eaea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800eaec:	78fb      	ldrb	r3, [r7, #3]
 800eaee:	015a      	lsls	r2, r3, #5
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	4413      	add	r3, r2
 800eaf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eaf8:	689b      	ldr	r3, [r3, #8]
 800eafa:	693a      	ldr	r2, [r7, #16]
 800eafc:	4013      	ands	r3, r2
 800eafe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eb00:	68bb      	ldr	r3, [r7, #8]
}
 800eb02:	4618      	mov	r0, r3
 800eb04:	371c      	adds	r7, #28
 800eb06:	46bd      	mov	sp, r7
 800eb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0c:	4770      	bx	lr

0800eb0e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800eb0e:	b480      	push	{r7}
 800eb10:	b083      	sub	sp, #12
 800eb12:	af00      	add	r7, sp, #0
 800eb14:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	695b      	ldr	r3, [r3, #20]
 800eb1a:	f003 0301 	and.w	r3, r3, #1
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	370c      	adds	r7, #12
 800eb22:	46bd      	mov	sp, r7
 800eb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb28:	4770      	bx	lr

0800eb2a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800eb2a:	b480      	push	{r7}
 800eb2c:	b085      	sub	sp, #20
 800eb2e:	af00      	add	r7, sp, #0
 800eb30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	68fa      	ldr	r2, [r7, #12]
 800eb40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb44:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800eb48:	f023 0307 	bic.w	r3, r3, #7
 800eb4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb54:	685b      	ldr	r3, [r3, #4]
 800eb56:	68fa      	ldr	r2, [r7, #12]
 800eb58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eb5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eb60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800eb62:	2300      	movs	r3, #0
}
 800eb64:	4618      	mov	r0, r3
 800eb66:	3714      	adds	r7, #20
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6e:	4770      	bx	lr

0800eb70 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800eb70:	b480      	push	{r7}
 800eb72:	b085      	sub	sp, #20
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
 800eb78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	333c      	adds	r3, #60	; 0x3c
 800eb82:	3304      	adds	r3, #4
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	4a1c      	ldr	r2, [pc, #112]	; (800ebfc <USB_EP0_OutStart+0x8c>)
 800eb8c:	4293      	cmp	r3, r2
 800eb8e:	d90a      	bls.n	800eba6 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eb9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eba0:	d101      	bne.n	800eba6 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800eba2:	2300      	movs	r3, #0
 800eba4:	e024      	b.n	800ebf0 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebac:	461a      	mov	r2, r3
 800ebae:	2300      	movs	r3, #0
 800ebb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebb8:	691b      	ldr	r3, [r3, #16]
 800ebba:	68fa      	ldr	r2, [r7, #12]
 800ebbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ebc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebcc:	691b      	ldr	r3, [r3, #16]
 800ebce:	68fa      	ldr	r2, [r7, #12]
 800ebd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebd4:	f043 0318 	orr.w	r3, r3, #24
 800ebd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebe0:	691b      	ldr	r3, [r3, #16]
 800ebe2:	68fa      	ldr	r2, [r7, #12]
 800ebe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebe8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ebec:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800ebee:	2300      	movs	r3, #0
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3714      	adds	r7, #20
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfa:	4770      	bx	lr
 800ebfc:	4f54300a 	.word	0x4f54300a

0800ec00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ec00:	b480      	push	{r7}
 800ec02:	b085      	sub	sp, #20
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ec08:	2300      	movs	r3, #0
 800ec0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	3301      	adds	r3, #1
 800ec10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	4a13      	ldr	r2, [pc, #76]	; (800ec64 <USB_CoreReset+0x64>)
 800ec16:	4293      	cmp	r3, r2
 800ec18:	d901      	bls.n	800ec1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ec1a:	2303      	movs	r3, #3
 800ec1c:	e01b      	b.n	800ec56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	691b      	ldr	r3, [r3, #16]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	daf2      	bge.n	800ec0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ec26:	2300      	movs	r3, #0
 800ec28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	691b      	ldr	r3, [r3, #16]
 800ec2e:	f043 0201 	orr.w	r2, r3, #1
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	3301      	adds	r3, #1
 800ec3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	4a09      	ldr	r2, [pc, #36]	; (800ec64 <USB_CoreReset+0x64>)
 800ec40:	4293      	cmp	r3, r2
 800ec42:	d901      	bls.n	800ec48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ec44:	2303      	movs	r3, #3
 800ec46:	e006      	b.n	800ec56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	691b      	ldr	r3, [r3, #16]
 800ec4c:	f003 0301 	and.w	r3, r3, #1
 800ec50:	2b01      	cmp	r3, #1
 800ec52:	d0f0      	beq.n	800ec36 <USB_CoreReset+0x36>

  return HAL_OK;
 800ec54:	2300      	movs	r3, #0
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3714      	adds	r7, #20
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec60:	4770      	bx	lr
 800ec62:	bf00      	nop
 800ec64:	00030d40 	.word	0x00030d40

0800ec68 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ec6c:	4904      	ldr	r1, [pc, #16]	; (800ec80 <MX_FATFS_Init+0x18>)
 800ec6e:	4805      	ldr	r0, [pc, #20]	; (800ec84 <MX_FATFS_Init+0x1c>)
 800ec70:	f001 fe74 	bl	801095c <FATFS_LinkDriver>
 800ec74:	4603      	mov	r3, r0
 800ec76:	461a      	mov	r2, r3
 800ec78:	4b03      	ldr	r3, [pc, #12]	; (800ec88 <MX_FATFS_Init+0x20>)
 800ec7a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ec7c:	bf00      	nop
 800ec7e:	bd80      	pop	{r7, pc}
 800ec80:	20000d8c 	.word	0x20000d8c
 800ec84:	08014248 	.word	0x08014248
 800ec88:	20000d88 	.word	0x20000d88

0800ec8c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ec92:	2300      	movs	r3, #0
 800ec94:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ec96:	f000 f879 	bl	800ed8c <BSP_SD_IsDetected>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	2b01      	cmp	r3, #1
 800ec9e:	d001      	beq.n	800eca4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800eca0:	2302      	movs	r3, #2
 800eca2:	e012      	b.n	800ecca <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800eca4:	480b      	ldr	r0, [pc, #44]	; (800ecd4 <BSP_SD_Init+0x48>)
 800eca6:	f7f8 fd47 	bl	8007738 <HAL_SD_Init>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ecae:	79fb      	ldrb	r3, [r7, #7]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d109      	bne.n	800ecc8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ecb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ecb8:	4806      	ldr	r0, [pc, #24]	; (800ecd4 <BSP_SD_Init+0x48>)
 800ecba:	f7f9 fc13 	bl	80084e4 <HAL_SD_ConfigWideBusOperation>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d001      	beq.n	800ecc8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ecc8:	79fb      	ldrb	r3, [r7, #7]
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3708      	adds	r7, #8
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}
 800ecd2:	bf00      	nop
 800ecd4:	20000424 	.word	0x20000424

0800ecd8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b088      	sub	sp, #32
 800ecdc:	af02      	add	r7, sp, #8
 800ecde:	60f8      	str	r0, [r7, #12]
 800ece0:	60b9      	str	r1, [r7, #8]
 800ece2:	607a      	str	r2, [r7, #4]
 800ece4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ece6:	2300      	movs	r3, #0
 800ece8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	9300      	str	r3, [sp, #0]
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	68ba      	ldr	r2, [r7, #8]
 800ecf2:	68f9      	ldr	r1, [r7, #12]
 800ecf4:	4806      	ldr	r0, [pc, #24]	; (800ed10 <BSP_SD_ReadBlocks+0x38>)
 800ecf6:	f7f8 fe47 	bl	8007988 <HAL_SD_ReadBlocks>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d001      	beq.n	800ed04 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ed00:	2301      	movs	r3, #1
 800ed02:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ed04:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	3718      	adds	r7, #24
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}
 800ed0e:	bf00      	nop
 800ed10:	20000424 	.word	0x20000424

0800ed14 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b088      	sub	sp, #32
 800ed18:	af02      	add	r7, sp, #8
 800ed1a:	60f8      	str	r0, [r7, #12]
 800ed1c:	60b9      	str	r1, [r7, #8]
 800ed1e:	607a      	str	r2, [r7, #4]
 800ed20:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ed22:	2300      	movs	r3, #0
 800ed24:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	9300      	str	r3, [sp, #0]
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	68ba      	ldr	r2, [r7, #8]
 800ed2e:	68f9      	ldr	r1, [r7, #12]
 800ed30:	4806      	ldr	r0, [pc, #24]	; (800ed4c <BSP_SD_WriteBlocks+0x38>)
 800ed32:	f7f8 ffbb 	bl	8007cac <HAL_SD_WriteBlocks>
 800ed36:	4603      	mov	r3, r0
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d001      	beq.n	800ed40 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ed40:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	3718      	adds	r7, #24
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}
 800ed4a:	bf00      	nop
 800ed4c:	20000424 	.word	0x20000424

0800ed50 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ed54:	4805      	ldr	r0, [pc, #20]	; (800ed6c <BSP_SD_GetCardState+0x1c>)
 800ed56:	f7f9 fcd9 	bl	800870c <HAL_SD_GetCardState>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	2b04      	cmp	r3, #4
 800ed5e:	bf14      	ite	ne
 800ed60:	2301      	movne	r3, #1
 800ed62:	2300      	moveq	r3, #0
 800ed64:	b2db      	uxtb	r3, r3
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	bd80      	pop	{r7, pc}
 800ed6a:	bf00      	nop
 800ed6c:	20000424 	.word	0x20000424

0800ed70 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b082      	sub	sp, #8
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ed78:	6879      	ldr	r1, [r7, #4]
 800ed7a:	4803      	ldr	r0, [pc, #12]	; (800ed88 <BSP_SD_GetCardInfo+0x18>)
 800ed7c:	f7f9 fb86 	bl	800848c <HAL_SD_GetCardInfo>
}
 800ed80:	bf00      	nop
 800ed82:	3708      	adds	r7, #8
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}
 800ed88:	20000424 	.word	0x20000424

0800ed8c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b082      	sub	sp, #8
 800ed90:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ed92:	2301      	movs	r3, #1
 800ed94:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ed96:	f000 f80b 	bl	800edb0 <BSP_PlatformIsDetected>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d101      	bne.n	800eda4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800eda0:	2300      	movs	r3, #0
 800eda2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800eda4:	79fb      	ldrb	r3, [r7, #7]
 800eda6:	b2db      	uxtb	r3, r3
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3708      	adds	r7, #8
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}

0800edb0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b082      	sub	sp, #8
 800edb4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800edb6:	2301      	movs	r3, #1
 800edb8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800edba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800edbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800edc2:	f7f4 fc4b 	bl	800365c <HAL_GPIO_ReadPin>
 800edc6:	4603      	mov	r3, r0
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d001      	beq.n	800edd0 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 800edcc:	2300      	movs	r3, #0
 800edce:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800edd0:	79fb      	ldrb	r3, [r7, #7]
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3708      	adds	r7, #8
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
	...

0800eddc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b082      	sub	sp, #8
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	4603      	mov	r3, r0
 800ede4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ede6:	4b0b      	ldr	r3, [pc, #44]	; (800ee14 <SD_CheckStatus+0x38>)
 800ede8:	2201      	movs	r2, #1
 800edea:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800edec:	f7ff ffb0 	bl	800ed50 <BSP_SD_GetCardState>
 800edf0:	4603      	mov	r3, r0
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d107      	bne.n	800ee06 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800edf6:	4b07      	ldr	r3, [pc, #28]	; (800ee14 <SD_CheckStatus+0x38>)
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	b2db      	uxtb	r3, r3
 800edfc:	f023 0301 	bic.w	r3, r3, #1
 800ee00:	b2da      	uxtb	r2, r3
 800ee02:	4b04      	ldr	r3, [pc, #16]	; (800ee14 <SD_CheckStatus+0x38>)
 800ee04:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ee06:	4b03      	ldr	r3, [pc, #12]	; (800ee14 <SD_CheckStatus+0x38>)
 800ee08:	781b      	ldrb	r3, [r3, #0]
 800ee0a:	b2db      	uxtb	r3, r3
}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3708      	adds	r7, #8
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}
 800ee14:	20000015 	.word	0x20000015

0800ee18 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b082      	sub	sp, #8
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	4603      	mov	r3, r0
 800ee20:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ee22:	4b0b      	ldr	r3, [pc, #44]	; (800ee50 <SD_initialize+0x38>)
 800ee24:	2201      	movs	r2, #1
 800ee26:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ee28:	f7ff ff30 	bl	800ec8c <BSP_SD_Init>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d107      	bne.n	800ee42 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800ee32:	79fb      	ldrb	r3, [r7, #7]
 800ee34:	4618      	mov	r0, r3
 800ee36:	f7ff ffd1 	bl	800eddc <SD_CheckStatus>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	461a      	mov	r2, r3
 800ee3e:	4b04      	ldr	r3, [pc, #16]	; (800ee50 <SD_initialize+0x38>)
 800ee40:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ee42:	4b03      	ldr	r3, [pc, #12]	; (800ee50 <SD_initialize+0x38>)
 800ee44:	781b      	ldrb	r3, [r3, #0]
 800ee46:	b2db      	uxtb	r3, r3
}
 800ee48:	4618      	mov	r0, r3
 800ee4a:	3708      	adds	r7, #8
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}
 800ee50:	20000015 	.word	0x20000015

0800ee54 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b082      	sub	sp, #8
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ee5e:	79fb      	ldrb	r3, [r7, #7]
 800ee60:	4618      	mov	r0, r3
 800ee62:	f7ff ffbb 	bl	800eddc <SD_CheckStatus>
 800ee66:	4603      	mov	r3, r0
}
 800ee68:	4618      	mov	r0, r3
 800ee6a:	3708      	adds	r7, #8
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}

0800ee70 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b086      	sub	sp, #24
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	60b9      	str	r1, [r7, #8]
 800ee78:	607a      	str	r2, [r7, #4]
 800ee7a:	603b      	str	r3, [r7, #0]
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ee80:	2301      	movs	r3, #1
 800ee82:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ee84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee88:	683a      	ldr	r2, [r7, #0]
 800ee8a:	6879      	ldr	r1, [r7, #4]
 800ee8c:	68b8      	ldr	r0, [r7, #8]
 800ee8e:	f7ff ff23 	bl	800ecd8 <BSP_SD_ReadBlocks>
 800ee92:	4603      	mov	r3, r0
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d107      	bne.n	800eea8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ee98:	bf00      	nop
 800ee9a:	f7ff ff59 	bl	800ed50 <BSP_SD_GetCardState>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d1fa      	bne.n	800ee9a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800eea4:	2300      	movs	r3, #0
 800eea6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800eea8:	7dfb      	ldrb	r3, [r7, #23]
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3718      	adds	r7, #24
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}

0800eeb2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800eeb2:	b580      	push	{r7, lr}
 800eeb4:	b086      	sub	sp, #24
 800eeb6:	af00      	add	r7, sp, #0
 800eeb8:	60b9      	str	r1, [r7, #8]
 800eeba:	607a      	str	r2, [r7, #4]
 800eebc:	603b      	str	r3, [r7, #0]
 800eebe:	4603      	mov	r3, r0
 800eec0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800eec2:	2301      	movs	r3, #1
 800eec4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800eec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eeca:	683a      	ldr	r2, [r7, #0]
 800eecc:	6879      	ldr	r1, [r7, #4]
 800eece:	68b8      	ldr	r0, [r7, #8]
 800eed0:	f7ff ff20 	bl	800ed14 <BSP_SD_WriteBlocks>
 800eed4:	4603      	mov	r3, r0
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d107      	bne.n	800eeea <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800eeda:	bf00      	nop
 800eedc:	f7ff ff38 	bl	800ed50 <BSP_SD_GetCardState>
 800eee0:	4603      	mov	r3, r0
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d1fa      	bne.n	800eedc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800eee6:	2300      	movs	r3, #0
 800eee8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800eeea:	7dfb      	ldrb	r3, [r7, #23]
}
 800eeec:	4618      	mov	r0, r3
 800eeee:	3718      	adds	r7, #24
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}

0800eef4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b08c      	sub	sp, #48	; 0x30
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	4603      	mov	r3, r0
 800eefc:	603a      	str	r2, [r7, #0]
 800eefe:	71fb      	strb	r3, [r7, #7]
 800ef00:	460b      	mov	r3, r1
 800ef02:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ef04:	2301      	movs	r3, #1
 800ef06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ef0a:	4b25      	ldr	r3, [pc, #148]	; (800efa0 <SD_ioctl+0xac>)
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	b2db      	uxtb	r3, r3
 800ef10:	f003 0301 	and.w	r3, r3, #1
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d001      	beq.n	800ef1c <SD_ioctl+0x28>
 800ef18:	2303      	movs	r3, #3
 800ef1a:	e03c      	b.n	800ef96 <SD_ioctl+0xa2>

  switch (cmd)
 800ef1c:	79bb      	ldrb	r3, [r7, #6]
 800ef1e:	2b03      	cmp	r3, #3
 800ef20:	d834      	bhi.n	800ef8c <SD_ioctl+0x98>
 800ef22:	a201      	add	r2, pc, #4	; (adr r2, 800ef28 <SD_ioctl+0x34>)
 800ef24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef28:	0800ef39 	.word	0x0800ef39
 800ef2c:	0800ef41 	.word	0x0800ef41
 800ef30:	0800ef59 	.word	0x0800ef59
 800ef34:	0800ef73 	.word	0x0800ef73
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ef3e:	e028      	b.n	800ef92 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ef40:	f107 0308 	add.w	r3, r7, #8
 800ef44:	4618      	mov	r0, r3
 800ef46:	f7ff ff13 	bl	800ed70 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ef4a:	6a3a      	ldr	r2, [r7, #32]
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ef50:	2300      	movs	r3, #0
 800ef52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ef56:	e01c      	b.n	800ef92 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ef58:	f107 0308 	add.w	r3, r7, #8
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f7ff ff07 	bl	800ed70 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ef62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef64:	b29a      	uxth	r2, r3
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ef70:	e00f      	b.n	800ef92 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ef72:	f107 0308 	add.w	r3, r7, #8
 800ef76:	4618      	mov	r0, r3
 800ef78:	f7ff fefa 	bl	800ed70 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ef7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef7e:	0a5a      	lsrs	r2, r3, #9
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ef84:	2300      	movs	r3, #0
 800ef86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ef8a:	e002      	b.n	800ef92 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ef8c:	2304      	movs	r3, #4
 800ef8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ef92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ef96:	4618      	mov	r0, r3
 800ef98:	3730      	adds	r7, #48	; 0x30
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	bd80      	pop	{r7, pc}
 800ef9e:	bf00      	nop
 800efa0:	20000015 	.word	0x20000015

0800efa4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b084      	sub	sp, #16
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
 800efac:	460b      	mov	r3, r1
 800efae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800efb0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800efb4:	f002 fabe 	bl	8011534 <USBD_static_malloc>
 800efb8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d105      	bne.n	800efcc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2200      	movs	r2, #0
 800efc4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800efc8:	2302      	movs	r3, #2
 800efca:	e066      	b.n	800f09a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	68fa      	ldr	r2, [r7, #12]
 800efd0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	7c1b      	ldrb	r3, [r3, #16]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d119      	bne.n	800f010 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800efdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800efe0:	2202      	movs	r2, #2
 800efe2:	2181      	movs	r1, #129	; 0x81
 800efe4:	6878      	ldr	r0, [r7, #4]
 800efe6:	f002 f8df 	bl	80111a8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2201      	movs	r2, #1
 800efee:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800eff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eff4:	2202      	movs	r2, #2
 800eff6:	2101      	movs	r1, #1
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f002 f8d5 	bl	80111a8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2201      	movs	r2, #1
 800f002:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	2210      	movs	r2, #16
 800f00a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800f00e:	e016      	b.n	800f03e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f010:	2340      	movs	r3, #64	; 0x40
 800f012:	2202      	movs	r2, #2
 800f014:	2181      	movs	r1, #129	; 0x81
 800f016:	6878      	ldr	r0, [r7, #4]
 800f018:	f002 f8c6 	bl	80111a8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2201      	movs	r2, #1
 800f020:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f022:	2340      	movs	r3, #64	; 0x40
 800f024:	2202      	movs	r2, #2
 800f026:	2101      	movs	r1, #1
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f002 f8bd 	bl	80111a8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2201      	movs	r2, #1
 800f032:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2210      	movs	r2, #16
 800f03a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f03e:	2308      	movs	r3, #8
 800f040:	2203      	movs	r2, #3
 800f042:	2182      	movs	r1, #130	; 0x82
 800f044:	6878      	ldr	r0, [r7, #4]
 800f046:	f002 f8af 	bl	80111a8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2201      	movs	r2, #1
 800f04e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	2200      	movs	r2, #0
 800f060:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	2200      	movs	r2, #0
 800f068:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	7c1b      	ldrb	r3, [r3, #16]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d109      	bne.n	800f088 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f07a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f07e:	2101      	movs	r1, #1
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f002 fa0b 	bl	801149c <USBD_LL_PrepareReceive>
 800f086:	e007      	b.n	800f098 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f08e:	2340      	movs	r3, #64	; 0x40
 800f090:	2101      	movs	r1, #1
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f002 fa02 	bl	801149c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f098:	2300      	movs	r3, #0
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	3710      	adds	r7, #16
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}

0800f0a2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f0a2:	b580      	push	{r7, lr}
 800f0a4:	b082      	sub	sp, #8
 800f0a6:	af00      	add	r7, sp, #0
 800f0a8:	6078      	str	r0, [r7, #4]
 800f0aa:	460b      	mov	r3, r1
 800f0ac:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f0ae:	2181      	movs	r1, #129	; 0x81
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f002 f8b7 	bl	8011224 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f0bc:	2101      	movs	r1, #1
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f002 f8b0 	bl	8011224 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f0cc:	2182      	movs	r1, #130	; 0x82
 800f0ce:	6878      	ldr	r0, [r7, #4]
 800f0d0:	f002 f8a8 	bl	8011224 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d00e      	beq.n	800f10c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f0f4:	685b      	ldr	r3, [r3, #4]
 800f0f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f0fe:	4618      	mov	r0, r3
 800f100:	f002 fa26 	bl	8011550 <USBD_static_free>
    pdev->pClassData = NULL;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2200      	movs	r2, #0
 800f108:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f10c:	2300      	movs	r3, #0
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3708      	adds	r7, #8
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
	...

0800f118 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b086      	sub	sp, #24
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
 800f120:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f128:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f12a:	2300      	movs	r3, #0
 800f12c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f12e:	2300      	movs	r3, #0
 800f130:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f132:	2300      	movs	r3, #0
 800f134:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f136:	693b      	ldr	r3, [r7, #16]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d101      	bne.n	800f140 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800f13c:	2303      	movs	r3, #3
 800f13e:	e0af      	b.n	800f2a0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	781b      	ldrb	r3, [r3, #0]
 800f144:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d03f      	beq.n	800f1cc <USBD_CDC_Setup+0xb4>
 800f14c:	2b20      	cmp	r3, #32
 800f14e:	f040 809f 	bne.w	800f290 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	88db      	ldrh	r3, [r3, #6]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d02e      	beq.n	800f1b8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	781b      	ldrb	r3, [r3, #0]
 800f15e:	b25b      	sxtb	r3, r3
 800f160:	2b00      	cmp	r3, #0
 800f162:	da16      	bge.n	800f192 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f16a:	689b      	ldr	r3, [r3, #8]
 800f16c:	683a      	ldr	r2, [r7, #0]
 800f16e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800f170:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f172:	683a      	ldr	r2, [r7, #0]
 800f174:	88d2      	ldrh	r2, [r2, #6]
 800f176:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	88db      	ldrh	r3, [r3, #6]
 800f17c:	2b07      	cmp	r3, #7
 800f17e:	bf28      	it	cs
 800f180:	2307      	movcs	r3, #7
 800f182:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f184:	693b      	ldr	r3, [r7, #16]
 800f186:	89fa      	ldrh	r2, [r7, #14]
 800f188:	4619      	mov	r1, r3
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f001 fb19 	bl	80107c2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800f190:	e085      	b.n	800f29e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	785a      	ldrb	r2, [r3, #1]
 800f196:	693b      	ldr	r3, [r7, #16]
 800f198:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	88db      	ldrh	r3, [r3, #6]
 800f1a0:	b2da      	uxtb	r2, r3
 800f1a2:	693b      	ldr	r3, [r7, #16]
 800f1a4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f1a8:	6939      	ldr	r1, [r7, #16]
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	88db      	ldrh	r3, [r3, #6]
 800f1ae:	461a      	mov	r2, r3
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f001 fb32 	bl	801081a <USBD_CtlPrepareRx>
      break;
 800f1b6:	e072      	b.n	800f29e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f1be:	689b      	ldr	r3, [r3, #8]
 800f1c0:	683a      	ldr	r2, [r7, #0]
 800f1c2:	7850      	ldrb	r0, [r2, #1]
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	6839      	ldr	r1, [r7, #0]
 800f1c8:	4798      	blx	r3
      break;
 800f1ca:	e068      	b.n	800f29e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	785b      	ldrb	r3, [r3, #1]
 800f1d0:	2b0b      	cmp	r3, #11
 800f1d2:	d852      	bhi.n	800f27a <USBD_CDC_Setup+0x162>
 800f1d4:	a201      	add	r2, pc, #4	; (adr r2, 800f1dc <USBD_CDC_Setup+0xc4>)
 800f1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1da:	bf00      	nop
 800f1dc:	0800f20d 	.word	0x0800f20d
 800f1e0:	0800f289 	.word	0x0800f289
 800f1e4:	0800f27b 	.word	0x0800f27b
 800f1e8:	0800f27b 	.word	0x0800f27b
 800f1ec:	0800f27b 	.word	0x0800f27b
 800f1f0:	0800f27b 	.word	0x0800f27b
 800f1f4:	0800f27b 	.word	0x0800f27b
 800f1f8:	0800f27b 	.word	0x0800f27b
 800f1fc:	0800f27b 	.word	0x0800f27b
 800f200:	0800f27b 	.word	0x0800f27b
 800f204:	0800f237 	.word	0x0800f237
 800f208:	0800f261 	.word	0x0800f261
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f212:	b2db      	uxtb	r3, r3
 800f214:	2b03      	cmp	r3, #3
 800f216:	d107      	bne.n	800f228 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f218:	f107 030a 	add.w	r3, r7, #10
 800f21c:	2202      	movs	r2, #2
 800f21e:	4619      	mov	r1, r3
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f001 face 	bl	80107c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f226:	e032      	b.n	800f28e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f228:	6839      	ldr	r1, [r7, #0]
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	f001 fa58 	bl	80106e0 <USBD_CtlError>
            ret = USBD_FAIL;
 800f230:	2303      	movs	r3, #3
 800f232:	75fb      	strb	r3, [r7, #23]
          break;
 800f234:	e02b      	b.n	800f28e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f23c:	b2db      	uxtb	r3, r3
 800f23e:	2b03      	cmp	r3, #3
 800f240:	d107      	bne.n	800f252 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f242:	f107 030d 	add.w	r3, r7, #13
 800f246:	2201      	movs	r2, #1
 800f248:	4619      	mov	r1, r3
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f001 fab9 	bl	80107c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f250:	e01d      	b.n	800f28e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f252:	6839      	ldr	r1, [r7, #0]
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f001 fa43 	bl	80106e0 <USBD_CtlError>
            ret = USBD_FAIL;
 800f25a:	2303      	movs	r3, #3
 800f25c:	75fb      	strb	r3, [r7, #23]
          break;
 800f25e:	e016      	b.n	800f28e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f266:	b2db      	uxtb	r3, r3
 800f268:	2b03      	cmp	r3, #3
 800f26a:	d00f      	beq.n	800f28c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800f26c:	6839      	ldr	r1, [r7, #0]
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f001 fa36 	bl	80106e0 <USBD_CtlError>
            ret = USBD_FAIL;
 800f274:	2303      	movs	r3, #3
 800f276:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f278:	e008      	b.n	800f28c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f27a:	6839      	ldr	r1, [r7, #0]
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f001 fa2f 	bl	80106e0 <USBD_CtlError>
          ret = USBD_FAIL;
 800f282:	2303      	movs	r3, #3
 800f284:	75fb      	strb	r3, [r7, #23]
          break;
 800f286:	e002      	b.n	800f28e <USBD_CDC_Setup+0x176>
          break;
 800f288:	bf00      	nop
 800f28a:	e008      	b.n	800f29e <USBD_CDC_Setup+0x186>
          break;
 800f28c:	bf00      	nop
      }
      break;
 800f28e:	e006      	b.n	800f29e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800f290:	6839      	ldr	r1, [r7, #0]
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f001 fa24 	bl	80106e0 <USBD_CtlError>
      ret = USBD_FAIL;
 800f298:	2303      	movs	r3, #3
 800f29a:	75fb      	strb	r3, [r7, #23]
      break;
 800f29c:	bf00      	nop
  }

  return (uint8_t)ret;
 800f29e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	3718      	adds	r7, #24
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}

0800f2a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b084      	sub	sp, #16
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
 800f2b0:	460b      	mov	r3, r1
 800f2b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f2ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d101      	bne.n	800f2ca <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f2c6:	2303      	movs	r3, #3
 800f2c8:	e04f      	b.n	800f36a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f2d0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f2d2:	78fa      	ldrb	r2, [r7, #3]
 800f2d4:	6879      	ldr	r1, [r7, #4]
 800f2d6:	4613      	mov	r3, r2
 800f2d8:	009b      	lsls	r3, r3, #2
 800f2da:	4413      	add	r3, r2
 800f2dc:	009b      	lsls	r3, r3, #2
 800f2de:	440b      	add	r3, r1
 800f2e0:	3318      	adds	r3, #24
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d029      	beq.n	800f33c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f2e8:	78fa      	ldrb	r2, [r7, #3]
 800f2ea:	6879      	ldr	r1, [r7, #4]
 800f2ec:	4613      	mov	r3, r2
 800f2ee:	009b      	lsls	r3, r3, #2
 800f2f0:	4413      	add	r3, r2
 800f2f2:	009b      	lsls	r3, r3, #2
 800f2f4:	440b      	add	r3, r1
 800f2f6:	3318      	adds	r3, #24
 800f2f8:	681a      	ldr	r2, [r3, #0]
 800f2fa:	78f9      	ldrb	r1, [r7, #3]
 800f2fc:	68f8      	ldr	r0, [r7, #12]
 800f2fe:	460b      	mov	r3, r1
 800f300:	00db      	lsls	r3, r3, #3
 800f302:	440b      	add	r3, r1
 800f304:	009b      	lsls	r3, r3, #2
 800f306:	4403      	add	r3, r0
 800f308:	3348      	adds	r3, #72	; 0x48
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	fbb2 f1f3 	udiv	r1, r2, r3
 800f310:	fb01 f303 	mul.w	r3, r1, r3
 800f314:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f316:	2b00      	cmp	r3, #0
 800f318:	d110      	bne.n	800f33c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800f31a:	78fa      	ldrb	r2, [r7, #3]
 800f31c:	6879      	ldr	r1, [r7, #4]
 800f31e:	4613      	mov	r3, r2
 800f320:	009b      	lsls	r3, r3, #2
 800f322:	4413      	add	r3, r2
 800f324:	009b      	lsls	r3, r3, #2
 800f326:	440b      	add	r3, r1
 800f328:	3318      	adds	r3, #24
 800f32a:	2200      	movs	r2, #0
 800f32c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f32e:	78f9      	ldrb	r1, [r7, #3]
 800f330:	2300      	movs	r3, #0
 800f332:	2200      	movs	r2, #0
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f002 f879 	bl	801142c <USBD_LL_Transmit>
 800f33a:	e015      	b.n	800f368 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	2200      	movs	r2, #0
 800f340:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f34a:	691b      	ldr	r3, [r3, #16]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d00b      	beq.n	800f368 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f356:	691b      	ldr	r3, [r3, #16]
 800f358:	68ba      	ldr	r2, [r7, #8]
 800f35a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800f35e:	68ba      	ldr	r2, [r7, #8]
 800f360:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800f364:	78fa      	ldrb	r2, [r7, #3]
 800f366:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f368:	2300      	movs	r3, #0
}
 800f36a:	4618      	mov	r0, r3
 800f36c:	3710      	adds	r7, #16
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd80      	pop	{r7, pc}

0800f372 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f372:	b580      	push	{r7, lr}
 800f374:	b084      	sub	sp, #16
 800f376:	af00      	add	r7, sp, #0
 800f378:	6078      	str	r0, [r7, #4]
 800f37a:	460b      	mov	r3, r1
 800f37c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f384:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d101      	bne.n	800f394 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f390:	2303      	movs	r3, #3
 800f392:	e015      	b.n	800f3c0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f394:	78fb      	ldrb	r3, [r7, #3]
 800f396:	4619      	mov	r1, r3
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f002 f8b7 	bl	801150c <USBD_LL_GetRxDataSize>
 800f39e:	4602      	mov	r2, r0
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f3ac:	68db      	ldr	r3, [r3, #12]
 800f3ae:	68fa      	ldr	r2, [r7, #12]
 800f3b0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f3b4:	68fa      	ldr	r2, [r7, #12]
 800f3b6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f3ba:	4611      	mov	r1, r2
 800f3bc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f3be:	2300      	movs	r3, #0
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3710      	adds	r7, #16
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}

0800f3c8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b084      	sub	sp, #16
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f3d6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d101      	bne.n	800f3e2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800f3de:	2303      	movs	r3, #3
 800f3e0:	e01b      	b.n	800f41a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d015      	beq.n	800f418 <USBD_CDC_EP0_RxReady+0x50>
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f3f2:	2bff      	cmp	r3, #255	; 0xff
 800f3f4:	d010      	beq.n	800f418 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f3fc:	689b      	ldr	r3, [r3, #8]
 800f3fe:	68fa      	ldr	r2, [r7, #12]
 800f400:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800f404:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f406:	68fa      	ldr	r2, [r7, #12]
 800f408:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f40c:	b292      	uxth	r2, r2
 800f40e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	22ff      	movs	r2, #255	; 0xff
 800f414:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800f418:	2300      	movs	r3, #0
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	3710      	adds	r7, #16
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}
	...

0800f424 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f424:	b480      	push	{r7}
 800f426:	b083      	sub	sp, #12
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2243      	movs	r2, #67	; 0x43
 800f430:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800f432:	4b03      	ldr	r3, [pc, #12]	; (800f440 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f434:	4618      	mov	r0, r3
 800f436:	370c      	adds	r7, #12
 800f438:	46bd      	mov	sp, r7
 800f43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43e:	4770      	bx	lr
 800f440:	200000a0 	.word	0x200000a0

0800f444 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f444:	b480      	push	{r7}
 800f446:	b083      	sub	sp, #12
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2243      	movs	r2, #67	; 0x43
 800f450:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800f452:	4b03      	ldr	r3, [pc, #12]	; (800f460 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f454:	4618      	mov	r0, r3
 800f456:	370c      	adds	r7, #12
 800f458:	46bd      	mov	sp, r7
 800f45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45e:	4770      	bx	lr
 800f460:	2000005c 	.word	0x2000005c

0800f464 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f464:	b480      	push	{r7}
 800f466:	b083      	sub	sp, #12
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2243      	movs	r2, #67	; 0x43
 800f470:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800f472:	4b03      	ldr	r3, [pc, #12]	; (800f480 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f474:	4618      	mov	r0, r3
 800f476:	370c      	adds	r7, #12
 800f478:	46bd      	mov	sp, r7
 800f47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47e:	4770      	bx	lr
 800f480:	200000e4 	.word	0x200000e4

0800f484 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f484:	b480      	push	{r7}
 800f486:	b083      	sub	sp, #12
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	220a      	movs	r2, #10
 800f490:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f492:	4b03      	ldr	r3, [pc, #12]	; (800f4a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f494:	4618      	mov	r0, r3
 800f496:	370c      	adds	r7, #12
 800f498:	46bd      	mov	sp, r7
 800f49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49e:	4770      	bx	lr
 800f4a0:	20000018 	.word	0x20000018

0800f4a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f4a4:	b480      	push	{r7}
 800f4a6:	b083      	sub	sp, #12
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d101      	bne.n	800f4b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f4b4:	2303      	movs	r3, #3
 800f4b6:	e004      	b.n	800f4c2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	683a      	ldr	r2, [r7, #0]
 800f4bc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800f4c0:	2300      	movs	r3, #0
}
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	370c      	adds	r7, #12
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4cc:	4770      	bx	lr

0800f4ce <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f4ce:	b480      	push	{r7}
 800f4d0:	b087      	sub	sp, #28
 800f4d2:	af00      	add	r7, sp, #0
 800f4d4:	60f8      	str	r0, [r7, #12]
 800f4d6:	60b9      	str	r1, [r7, #8]
 800f4d8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f4e0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800f4e2:	697b      	ldr	r3, [r7, #20]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d101      	bne.n	800f4ec <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f4e8:	2303      	movs	r3, #3
 800f4ea:	e008      	b.n	800f4fe <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800f4ec:	697b      	ldr	r3, [r7, #20]
 800f4ee:	68ba      	ldr	r2, [r7, #8]
 800f4f0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	687a      	ldr	r2, [r7, #4]
 800f4f8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800f4fc:	2300      	movs	r3, #0
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	371c      	adds	r7, #28
 800f502:	46bd      	mov	sp, r7
 800f504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f508:	4770      	bx	lr

0800f50a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f50a:	b480      	push	{r7}
 800f50c:	b085      	sub	sp, #20
 800f50e:	af00      	add	r7, sp, #0
 800f510:	6078      	str	r0, [r7, #4]
 800f512:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f51a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d101      	bne.n	800f526 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800f522:	2303      	movs	r3, #3
 800f524:	e004      	b.n	800f530 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	683a      	ldr	r2, [r7, #0]
 800f52a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800f52e:	2300      	movs	r3, #0
}
 800f530:	4618      	mov	r0, r3
 800f532:	3714      	adds	r7, #20
 800f534:	46bd      	mov	sp, r7
 800f536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53a:	4770      	bx	lr

0800f53c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b084      	sub	sp, #16
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f54a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800f54c:	2301      	movs	r3, #1
 800f54e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f556:	2b00      	cmp	r3, #0
 800f558:	d101      	bne.n	800f55e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f55a:	2303      	movs	r3, #3
 800f55c:	e01a      	b.n	800f594 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f564:	2b00      	cmp	r3, #0
 800f566:	d114      	bne.n	800f592 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f568:	68bb      	ldr	r3, [r7, #8]
 800f56a:	2201      	movs	r2, #1
 800f56c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800f57a:	68bb      	ldr	r3, [r7, #8]
 800f57c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f586:	2181      	movs	r1, #129	; 0x81
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	f001 ff4f 	bl	801142c <USBD_LL_Transmit>

    ret = USBD_OK;
 800f58e:	2300      	movs	r3, #0
 800f590:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f592:	7bfb      	ldrb	r3, [r7, #15]
}
 800f594:	4618      	mov	r0, r3
 800f596:	3710      	adds	r7, #16
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd80      	pop	{r7, pc}

0800f59c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b084      	sub	sp, #16
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f5aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d101      	bne.n	800f5ba <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f5b6:	2303      	movs	r3, #3
 800f5b8:	e016      	b.n	800f5e8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	7c1b      	ldrb	r3, [r3, #16]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d109      	bne.n	800f5d6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f5c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f5cc:	2101      	movs	r1, #1
 800f5ce:	6878      	ldr	r0, [r7, #4]
 800f5d0:	f001 ff64 	bl	801149c <USBD_LL_PrepareReceive>
 800f5d4:	e007      	b.n	800f5e6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f5dc:	2340      	movs	r3, #64	; 0x40
 800f5de:	2101      	movs	r1, #1
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f001 ff5b 	bl	801149c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f5e6:	2300      	movs	r3, #0
}
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	3710      	adds	r7, #16
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	bd80      	pop	{r7, pc}

0800f5f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b086      	sub	sp, #24
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	60f8      	str	r0, [r7, #12]
 800f5f8:	60b9      	str	r1, [r7, #8]
 800f5fa:	4613      	mov	r3, r2
 800f5fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d101      	bne.n	800f608 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f604:	2303      	movs	r3, #3
 800f606:	e01f      	b.n	800f648 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	2200      	movs	r2, #0
 800f60c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	2200      	movs	r2, #0
 800f614:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	2200      	movs	r2, #0
 800f61c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d003      	beq.n	800f62e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	68ba      	ldr	r2, [r7, #8]
 800f62a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	2201      	movs	r2, #1
 800f632:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	79fa      	ldrb	r2, [r7, #7]
 800f63a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f63c:	68f8      	ldr	r0, [r7, #12]
 800f63e:	f001 fd37 	bl	80110b0 <USBD_LL_Init>
 800f642:	4603      	mov	r3, r0
 800f644:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f646:	7dfb      	ldrb	r3, [r7, #23]
}
 800f648:	4618      	mov	r0, r3
 800f64a:	3718      	adds	r7, #24
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}

0800f650 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b084      	sub	sp, #16
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
 800f658:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f65a:	2300      	movs	r3, #0
 800f65c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d101      	bne.n	800f668 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f664:	2303      	movs	r3, #3
 800f666:	e016      	b.n	800f696 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	683a      	ldr	r2, [r7, #0]
 800f66c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d00b      	beq.n	800f694 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f684:	f107 020e 	add.w	r2, r7, #14
 800f688:	4610      	mov	r0, r2
 800f68a:	4798      	blx	r3
 800f68c:	4602      	mov	r2, r0
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f694:	2300      	movs	r3, #0
}
 800f696:	4618      	mov	r0, r3
 800f698:	3710      	adds	r7, #16
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}

0800f69e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f69e:	b580      	push	{r7, lr}
 800f6a0:	b082      	sub	sp, #8
 800f6a2:	af00      	add	r7, sp, #0
 800f6a4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f001 fd4c 	bl	8011144 <USBD_LL_Start>
 800f6ac:	4603      	mov	r3, r0
}
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	3708      	adds	r7, #8
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}

0800f6b6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f6b6:	b480      	push	{r7}
 800f6b8:	b083      	sub	sp, #12
 800f6ba:	af00      	add	r7, sp, #0
 800f6bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f6be:	2300      	movs	r3, #0
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	370c      	adds	r7, #12
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr

0800f6cc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b084      	sub	sp, #16
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
 800f6d4:	460b      	mov	r3, r1
 800f6d6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f6d8:	2303      	movs	r3, #3
 800f6da:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d009      	beq.n	800f6fa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	78fa      	ldrb	r2, [r7, #3]
 800f6f0:	4611      	mov	r1, r2
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	4798      	blx	r3
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f6fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	3710      	adds	r7, #16
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}

0800f704 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b082      	sub	sp, #8
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	460b      	mov	r3, r1
 800f70e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f716:	2b00      	cmp	r3, #0
 800f718:	d007      	beq.n	800f72a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f720:	685b      	ldr	r3, [r3, #4]
 800f722:	78fa      	ldrb	r2, [r7, #3]
 800f724:	4611      	mov	r1, r2
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	4798      	blx	r3
  }

  return USBD_OK;
 800f72a:	2300      	movs	r3, #0
}
 800f72c:	4618      	mov	r0, r3
 800f72e:	3708      	adds	r7, #8
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}

0800f734 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b084      	sub	sp, #16
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
 800f73c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f744:	6839      	ldr	r1, [r7, #0]
 800f746:	4618      	mov	r0, r3
 800f748:	f000 ff90 	bl	801066c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2201      	movs	r2, #1
 800f750:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f75a:	461a      	mov	r2, r3
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f768:	f003 031f 	and.w	r3, r3, #31
 800f76c:	2b02      	cmp	r3, #2
 800f76e:	d01a      	beq.n	800f7a6 <USBD_LL_SetupStage+0x72>
 800f770:	2b02      	cmp	r3, #2
 800f772:	d822      	bhi.n	800f7ba <USBD_LL_SetupStage+0x86>
 800f774:	2b00      	cmp	r3, #0
 800f776:	d002      	beq.n	800f77e <USBD_LL_SetupStage+0x4a>
 800f778:	2b01      	cmp	r3, #1
 800f77a:	d00a      	beq.n	800f792 <USBD_LL_SetupStage+0x5e>
 800f77c:	e01d      	b.n	800f7ba <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f784:	4619      	mov	r1, r3
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f000 fa62 	bl	800fc50 <USBD_StdDevReq>
 800f78c:	4603      	mov	r3, r0
 800f78e:	73fb      	strb	r3, [r7, #15]
      break;
 800f790:	e020      	b.n	800f7d4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f798:	4619      	mov	r1, r3
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f000 fac6 	bl	800fd2c <USBD_StdItfReq>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	73fb      	strb	r3, [r7, #15]
      break;
 800f7a4:	e016      	b.n	800f7d4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f7ac:	4619      	mov	r1, r3
 800f7ae:	6878      	ldr	r0, [r7, #4]
 800f7b0:	f000 fb05 	bl	800fdbe <USBD_StdEPReq>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	73fb      	strb	r3, [r7, #15]
      break;
 800f7b8:	e00c      	b.n	800f7d4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f7c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f7c4:	b2db      	uxtb	r3, r3
 800f7c6:	4619      	mov	r1, r3
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f001 fd61 	bl	8011290 <USBD_LL_StallEP>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	73fb      	strb	r3, [r7, #15]
      break;
 800f7d2:	bf00      	nop
  }

  return ret;
 800f7d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3710      	adds	r7, #16
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}

0800f7de <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f7de:	b580      	push	{r7, lr}
 800f7e0:	b086      	sub	sp, #24
 800f7e2:	af00      	add	r7, sp, #0
 800f7e4:	60f8      	str	r0, [r7, #12]
 800f7e6:	460b      	mov	r3, r1
 800f7e8:	607a      	str	r2, [r7, #4]
 800f7ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f7ec:	7afb      	ldrb	r3, [r7, #11]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d138      	bne.n	800f864 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f7f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f800:	2b03      	cmp	r3, #3
 800f802:	d14a      	bne.n	800f89a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f804:	693b      	ldr	r3, [r7, #16]
 800f806:	689a      	ldr	r2, [r3, #8]
 800f808:	693b      	ldr	r3, [r7, #16]
 800f80a:	68db      	ldr	r3, [r3, #12]
 800f80c:	429a      	cmp	r2, r3
 800f80e:	d913      	bls.n	800f838 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f810:	693b      	ldr	r3, [r7, #16]
 800f812:	689a      	ldr	r2, [r3, #8]
 800f814:	693b      	ldr	r3, [r7, #16]
 800f816:	68db      	ldr	r3, [r3, #12]
 800f818:	1ad2      	subs	r2, r2, r3
 800f81a:	693b      	ldr	r3, [r7, #16]
 800f81c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f81e:	693b      	ldr	r3, [r7, #16]
 800f820:	68da      	ldr	r2, [r3, #12]
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	689b      	ldr	r3, [r3, #8]
 800f826:	4293      	cmp	r3, r2
 800f828:	bf28      	it	cs
 800f82a:	4613      	movcs	r3, r2
 800f82c:	461a      	mov	r2, r3
 800f82e:	6879      	ldr	r1, [r7, #4]
 800f830:	68f8      	ldr	r0, [r7, #12]
 800f832:	f001 f80f 	bl	8010854 <USBD_CtlContinueRx>
 800f836:	e030      	b.n	800f89a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f83e:	b2db      	uxtb	r3, r3
 800f840:	2b03      	cmp	r3, #3
 800f842:	d10b      	bne.n	800f85c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f84a:	691b      	ldr	r3, [r3, #16]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d005      	beq.n	800f85c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f856:	691b      	ldr	r3, [r3, #16]
 800f858:	68f8      	ldr	r0, [r7, #12]
 800f85a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f85c:	68f8      	ldr	r0, [r7, #12]
 800f85e:	f001 f80a 	bl	8010876 <USBD_CtlSendStatus>
 800f862:	e01a      	b.n	800f89a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f86a:	b2db      	uxtb	r3, r3
 800f86c:	2b03      	cmp	r3, #3
 800f86e:	d114      	bne.n	800f89a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f876:	699b      	ldr	r3, [r3, #24]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d00e      	beq.n	800f89a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f882:	699b      	ldr	r3, [r3, #24]
 800f884:	7afa      	ldrb	r2, [r7, #11]
 800f886:	4611      	mov	r1, r2
 800f888:	68f8      	ldr	r0, [r7, #12]
 800f88a:	4798      	blx	r3
 800f88c:	4603      	mov	r3, r0
 800f88e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f890:	7dfb      	ldrb	r3, [r7, #23]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d001      	beq.n	800f89a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800f896:	7dfb      	ldrb	r3, [r7, #23]
 800f898:	e000      	b.n	800f89c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800f89a:	2300      	movs	r3, #0
}
 800f89c:	4618      	mov	r0, r3
 800f89e:	3718      	adds	r7, #24
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	bd80      	pop	{r7, pc}

0800f8a4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b086      	sub	sp, #24
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	60f8      	str	r0, [r7, #12]
 800f8ac:	460b      	mov	r3, r1
 800f8ae:	607a      	str	r2, [r7, #4]
 800f8b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f8b2:	7afb      	ldrb	r3, [r7, #11]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d16b      	bne.n	800f990 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	3314      	adds	r3, #20
 800f8bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f8c4:	2b02      	cmp	r3, #2
 800f8c6:	d156      	bne.n	800f976 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f8c8:	693b      	ldr	r3, [r7, #16]
 800f8ca:	689a      	ldr	r2, [r3, #8]
 800f8cc:	693b      	ldr	r3, [r7, #16]
 800f8ce:	68db      	ldr	r3, [r3, #12]
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d914      	bls.n	800f8fe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f8d4:	693b      	ldr	r3, [r7, #16]
 800f8d6:	689a      	ldr	r2, [r3, #8]
 800f8d8:	693b      	ldr	r3, [r7, #16]
 800f8da:	68db      	ldr	r3, [r3, #12]
 800f8dc:	1ad2      	subs	r2, r2, r3
 800f8de:	693b      	ldr	r3, [r7, #16]
 800f8e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f8e2:	693b      	ldr	r3, [r7, #16]
 800f8e4:	689b      	ldr	r3, [r3, #8]
 800f8e6:	461a      	mov	r2, r3
 800f8e8:	6879      	ldr	r1, [r7, #4]
 800f8ea:	68f8      	ldr	r0, [r7, #12]
 800f8ec:	f000 ff84 	bl	80107f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	2100      	movs	r1, #0
 800f8f6:	68f8      	ldr	r0, [r7, #12]
 800f8f8:	f001 fdd0 	bl	801149c <USBD_LL_PrepareReceive>
 800f8fc:	e03b      	b.n	800f976 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f8fe:	693b      	ldr	r3, [r7, #16]
 800f900:	68da      	ldr	r2, [r3, #12]
 800f902:	693b      	ldr	r3, [r7, #16]
 800f904:	689b      	ldr	r3, [r3, #8]
 800f906:	429a      	cmp	r2, r3
 800f908:	d11c      	bne.n	800f944 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f90a:	693b      	ldr	r3, [r7, #16]
 800f90c:	685a      	ldr	r2, [r3, #4]
 800f90e:	693b      	ldr	r3, [r7, #16]
 800f910:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f912:	429a      	cmp	r2, r3
 800f914:	d316      	bcc.n	800f944 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f916:	693b      	ldr	r3, [r7, #16]
 800f918:	685a      	ldr	r2, [r3, #4]
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f920:	429a      	cmp	r2, r3
 800f922:	d20f      	bcs.n	800f944 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f924:	2200      	movs	r2, #0
 800f926:	2100      	movs	r1, #0
 800f928:	68f8      	ldr	r0, [r7, #12]
 800f92a:	f000 ff65 	bl	80107f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	2200      	movs	r2, #0
 800f932:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f936:	2300      	movs	r3, #0
 800f938:	2200      	movs	r2, #0
 800f93a:	2100      	movs	r1, #0
 800f93c:	68f8      	ldr	r0, [r7, #12]
 800f93e:	f001 fdad 	bl	801149c <USBD_LL_PrepareReceive>
 800f942:	e018      	b.n	800f976 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f94a:	b2db      	uxtb	r3, r3
 800f94c:	2b03      	cmp	r3, #3
 800f94e:	d10b      	bne.n	800f968 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f956:	68db      	ldr	r3, [r3, #12]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d005      	beq.n	800f968 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f962:	68db      	ldr	r3, [r3, #12]
 800f964:	68f8      	ldr	r0, [r7, #12]
 800f966:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f968:	2180      	movs	r1, #128	; 0x80
 800f96a:	68f8      	ldr	r0, [r7, #12]
 800f96c:	f001 fc90 	bl	8011290 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f970:	68f8      	ldr	r0, [r7, #12]
 800f972:	f000 ff93 	bl	801089c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f97c:	2b01      	cmp	r3, #1
 800f97e:	d122      	bne.n	800f9c6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f980:	68f8      	ldr	r0, [r7, #12]
 800f982:	f7ff fe98 	bl	800f6b6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	2200      	movs	r2, #0
 800f98a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f98e:	e01a      	b.n	800f9c6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f996:	b2db      	uxtb	r3, r3
 800f998:	2b03      	cmp	r3, #3
 800f99a:	d114      	bne.n	800f9c6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9a2:	695b      	ldr	r3, [r3, #20]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d00e      	beq.n	800f9c6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9ae:	695b      	ldr	r3, [r3, #20]
 800f9b0:	7afa      	ldrb	r2, [r7, #11]
 800f9b2:	4611      	mov	r1, r2
 800f9b4:	68f8      	ldr	r0, [r7, #12]
 800f9b6:	4798      	blx	r3
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f9bc:	7dfb      	ldrb	r3, [r7, #23]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d001      	beq.n	800f9c6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800f9c2:	7dfb      	ldrb	r3, [r7, #23]
 800f9c4:	e000      	b.n	800f9c8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800f9c6:	2300      	movs	r3, #0
}
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	3718      	adds	r7, #24
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	bd80      	pop	{r7, pc}

0800f9d0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b082      	sub	sp, #8
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2201      	movs	r2, #1
 800f9dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d101      	bne.n	800fa04 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800fa00:	2303      	movs	r3, #3
 800fa02:	e02f      	b.n	800fa64 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d00f      	beq.n	800fa2e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa14:	685b      	ldr	r3, [r3, #4]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d009      	beq.n	800fa2e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa20:	685b      	ldr	r3, [r3, #4]
 800fa22:	687a      	ldr	r2, [r7, #4]
 800fa24:	6852      	ldr	r2, [r2, #4]
 800fa26:	b2d2      	uxtb	r2, r2
 800fa28:	4611      	mov	r1, r2
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fa2e:	2340      	movs	r3, #64	; 0x40
 800fa30:	2200      	movs	r2, #0
 800fa32:	2100      	movs	r1, #0
 800fa34:	6878      	ldr	r0, [r7, #4]
 800fa36:	f001 fbb7 	bl	80111a8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	2201      	movs	r2, #1
 800fa3e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	2240      	movs	r2, #64	; 0x40
 800fa46:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fa4a:	2340      	movs	r3, #64	; 0x40
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	2180      	movs	r1, #128	; 0x80
 800fa50:	6878      	ldr	r0, [r7, #4]
 800fa52:	f001 fba9 	bl	80111a8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	2201      	movs	r2, #1
 800fa5a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	2240      	movs	r2, #64	; 0x40
 800fa60:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800fa62:	2300      	movs	r3, #0
}
 800fa64:	4618      	mov	r0, r3
 800fa66:	3708      	adds	r7, #8
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}

0800fa6c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fa6c:	b480      	push	{r7}
 800fa6e:	b083      	sub	sp, #12
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
 800fa74:	460b      	mov	r3, r1
 800fa76:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	78fa      	ldrb	r2, [r7, #3]
 800fa7c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fa7e:	2300      	movs	r3, #0
}
 800fa80:	4618      	mov	r0, r3
 800fa82:	370c      	adds	r7, #12
 800fa84:	46bd      	mov	sp, r7
 800fa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8a:	4770      	bx	lr

0800fa8c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b083      	sub	sp, #12
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa9a:	b2da      	uxtb	r2, r3
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	2204      	movs	r2, #4
 800faa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800faaa:	2300      	movs	r3, #0
}
 800faac:	4618      	mov	r0, r3
 800faae:	370c      	adds	r7, #12
 800fab0:	46bd      	mov	sp, r7
 800fab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab6:	4770      	bx	lr

0800fab8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800fab8:	b480      	push	{r7}
 800faba:	b083      	sub	sp, #12
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fac6:	b2db      	uxtb	r3, r3
 800fac8:	2b04      	cmp	r3, #4
 800faca:	d106      	bne.n	800fada <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800fad2:	b2da      	uxtb	r2, r3
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800fada:	2300      	movs	r3, #0
}
 800fadc:	4618      	mov	r0, r3
 800fade:	370c      	adds	r7, #12
 800fae0:	46bd      	mov	sp, r7
 800fae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae6:	4770      	bx	lr

0800fae8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b082      	sub	sp, #8
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d101      	bne.n	800fafe <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800fafa:	2303      	movs	r3, #3
 800fafc:	e012      	b.n	800fb24 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb04:	b2db      	uxtb	r3, r3
 800fb06:	2b03      	cmp	r3, #3
 800fb08:	d10b      	bne.n	800fb22 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb10:	69db      	ldr	r3, [r3, #28]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d005      	beq.n	800fb22 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb1c:	69db      	ldr	r3, [r3, #28]
 800fb1e:	6878      	ldr	r0, [r7, #4]
 800fb20:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fb22:	2300      	movs	r3, #0
}
 800fb24:	4618      	mov	r0, r3
 800fb26:	3708      	adds	r7, #8
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}

0800fb2c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b082      	sub	sp, #8
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
 800fb34:	460b      	mov	r3, r1
 800fb36:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d101      	bne.n	800fb46 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800fb42:	2303      	movs	r3, #3
 800fb44:	e014      	b.n	800fb70 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb4c:	b2db      	uxtb	r3, r3
 800fb4e:	2b03      	cmp	r3, #3
 800fb50:	d10d      	bne.n	800fb6e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb58:	6a1b      	ldr	r3, [r3, #32]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d007      	beq.n	800fb6e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb64:	6a1b      	ldr	r3, [r3, #32]
 800fb66:	78fa      	ldrb	r2, [r7, #3]
 800fb68:	4611      	mov	r1, r2
 800fb6a:	6878      	ldr	r0, [r7, #4]
 800fb6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fb6e:	2300      	movs	r3, #0
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	3708      	adds	r7, #8
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}

0800fb78 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b082      	sub	sp, #8
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	460b      	mov	r3, r1
 800fb82:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d101      	bne.n	800fb92 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800fb8e:	2303      	movs	r3, #3
 800fb90:	e014      	b.n	800fbbc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb98:	b2db      	uxtb	r3, r3
 800fb9a:	2b03      	cmp	r3, #3
 800fb9c:	d10d      	bne.n	800fbba <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d007      	beq.n	800fbba <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbb2:	78fa      	ldrb	r2, [r7, #3]
 800fbb4:	4611      	mov	r1, r2
 800fbb6:	6878      	ldr	r0, [r7, #4]
 800fbb8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fbba:	2300      	movs	r3, #0
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3708      	adds	r7, #8
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}

0800fbc4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800fbc4:	b480      	push	{r7}
 800fbc6:	b083      	sub	sp, #12
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fbcc:	2300      	movs	r3, #0
}
 800fbce:	4618      	mov	r0, r3
 800fbd0:	370c      	adds	r7, #12
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd8:	4770      	bx	lr

0800fbda <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800fbda:	b580      	push	{r7, lr}
 800fbdc:	b082      	sub	sp, #8
 800fbde:	af00      	add	r7, sp, #0
 800fbe0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	2201      	movs	r2, #1
 800fbe6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d009      	beq.n	800fc08 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbfa:	685b      	ldr	r3, [r3, #4]
 800fbfc:	687a      	ldr	r2, [r7, #4]
 800fbfe:	6852      	ldr	r2, [r2, #4]
 800fc00:	b2d2      	uxtb	r2, r2
 800fc02:	4611      	mov	r1, r2
 800fc04:	6878      	ldr	r0, [r7, #4]
 800fc06:	4798      	blx	r3
  }

  return USBD_OK;
 800fc08:	2300      	movs	r3, #0
}
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	3708      	adds	r7, #8
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	bd80      	pop	{r7, pc}

0800fc12 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800fc12:	b480      	push	{r7}
 800fc14:	b087      	sub	sp, #28
 800fc16:	af00      	add	r7, sp, #0
 800fc18:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800fc24:	697b      	ldr	r3, [r7, #20]
 800fc26:	3301      	adds	r3, #1
 800fc28:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	781b      	ldrb	r3, [r3, #0]
 800fc2e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800fc30:	8a3b      	ldrh	r3, [r7, #16]
 800fc32:	021b      	lsls	r3, r3, #8
 800fc34:	b21a      	sxth	r2, r3
 800fc36:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fc3a:	4313      	orrs	r3, r2
 800fc3c:	b21b      	sxth	r3, r3
 800fc3e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800fc40:	89fb      	ldrh	r3, [r7, #14]
}
 800fc42:	4618      	mov	r0, r3
 800fc44:	371c      	adds	r7, #28
 800fc46:	46bd      	mov	sp, r7
 800fc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4c:	4770      	bx	lr
	...

0800fc50 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b084      	sub	sp, #16
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
 800fc58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	781b      	ldrb	r3, [r3, #0]
 800fc62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fc66:	2b40      	cmp	r3, #64	; 0x40
 800fc68:	d005      	beq.n	800fc76 <USBD_StdDevReq+0x26>
 800fc6a:	2b40      	cmp	r3, #64	; 0x40
 800fc6c:	d853      	bhi.n	800fd16 <USBD_StdDevReq+0xc6>
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d00b      	beq.n	800fc8a <USBD_StdDevReq+0x3a>
 800fc72:	2b20      	cmp	r3, #32
 800fc74:	d14f      	bne.n	800fd16 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc7c:	689b      	ldr	r3, [r3, #8]
 800fc7e:	6839      	ldr	r1, [r7, #0]
 800fc80:	6878      	ldr	r0, [r7, #4]
 800fc82:	4798      	blx	r3
 800fc84:	4603      	mov	r3, r0
 800fc86:	73fb      	strb	r3, [r7, #15]
      break;
 800fc88:	e04a      	b.n	800fd20 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	785b      	ldrb	r3, [r3, #1]
 800fc8e:	2b09      	cmp	r3, #9
 800fc90:	d83b      	bhi.n	800fd0a <USBD_StdDevReq+0xba>
 800fc92:	a201      	add	r2, pc, #4	; (adr r2, 800fc98 <USBD_StdDevReq+0x48>)
 800fc94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc98:	0800fced 	.word	0x0800fced
 800fc9c:	0800fd01 	.word	0x0800fd01
 800fca0:	0800fd0b 	.word	0x0800fd0b
 800fca4:	0800fcf7 	.word	0x0800fcf7
 800fca8:	0800fd0b 	.word	0x0800fd0b
 800fcac:	0800fccb 	.word	0x0800fccb
 800fcb0:	0800fcc1 	.word	0x0800fcc1
 800fcb4:	0800fd0b 	.word	0x0800fd0b
 800fcb8:	0800fce3 	.word	0x0800fce3
 800fcbc:	0800fcd5 	.word	0x0800fcd5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fcc0:	6839      	ldr	r1, [r7, #0]
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f000 f9de 	bl	8010084 <USBD_GetDescriptor>
          break;
 800fcc8:	e024      	b.n	800fd14 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fcca:	6839      	ldr	r1, [r7, #0]
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f000 fb43 	bl	8010358 <USBD_SetAddress>
          break;
 800fcd2:	e01f      	b.n	800fd14 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800fcd4:	6839      	ldr	r1, [r7, #0]
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f000 fb82 	bl	80103e0 <USBD_SetConfig>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	73fb      	strb	r3, [r7, #15]
          break;
 800fce0:	e018      	b.n	800fd14 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800fce2:	6839      	ldr	r1, [r7, #0]
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f000 fc21 	bl	801052c <USBD_GetConfig>
          break;
 800fcea:	e013      	b.n	800fd14 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800fcec:	6839      	ldr	r1, [r7, #0]
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f000 fc52 	bl	8010598 <USBD_GetStatus>
          break;
 800fcf4:	e00e      	b.n	800fd14 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800fcf6:	6839      	ldr	r1, [r7, #0]
 800fcf8:	6878      	ldr	r0, [r7, #4]
 800fcfa:	f000 fc81 	bl	8010600 <USBD_SetFeature>
          break;
 800fcfe:	e009      	b.n	800fd14 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fd00:	6839      	ldr	r1, [r7, #0]
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f000 fc90 	bl	8010628 <USBD_ClrFeature>
          break;
 800fd08:	e004      	b.n	800fd14 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800fd0a:	6839      	ldr	r1, [r7, #0]
 800fd0c:	6878      	ldr	r0, [r7, #4]
 800fd0e:	f000 fce7 	bl	80106e0 <USBD_CtlError>
          break;
 800fd12:	bf00      	nop
      }
      break;
 800fd14:	e004      	b.n	800fd20 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800fd16:	6839      	ldr	r1, [r7, #0]
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f000 fce1 	bl	80106e0 <USBD_CtlError>
      break;
 800fd1e:	bf00      	nop
  }

  return ret;
 800fd20:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd22:	4618      	mov	r0, r3
 800fd24:	3710      	adds	r7, #16
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}
 800fd2a:	bf00      	nop

0800fd2c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b084      	sub	sp, #16
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
 800fd34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd36:	2300      	movs	r3, #0
 800fd38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	781b      	ldrb	r3, [r3, #0]
 800fd3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fd42:	2b40      	cmp	r3, #64	; 0x40
 800fd44:	d005      	beq.n	800fd52 <USBD_StdItfReq+0x26>
 800fd46:	2b40      	cmp	r3, #64	; 0x40
 800fd48:	d82f      	bhi.n	800fdaa <USBD_StdItfReq+0x7e>
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d001      	beq.n	800fd52 <USBD_StdItfReq+0x26>
 800fd4e:	2b20      	cmp	r3, #32
 800fd50:	d12b      	bne.n	800fdaa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd58:	b2db      	uxtb	r3, r3
 800fd5a:	3b01      	subs	r3, #1
 800fd5c:	2b02      	cmp	r3, #2
 800fd5e:	d81d      	bhi.n	800fd9c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	889b      	ldrh	r3, [r3, #4]
 800fd64:	b2db      	uxtb	r3, r3
 800fd66:	2b01      	cmp	r3, #1
 800fd68:	d813      	bhi.n	800fd92 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd70:	689b      	ldr	r3, [r3, #8]
 800fd72:	6839      	ldr	r1, [r7, #0]
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	4798      	blx	r3
 800fd78:	4603      	mov	r3, r0
 800fd7a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	88db      	ldrh	r3, [r3, #6]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d110      	bne.n	800fda6 <USBD_StdItfReq+0x7a>
 800fd84:	7bfb      	ldrb	r3, [r7, #15]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d10d      	bne.n	800fda6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	f000 fd73 	bl	8010876 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800fd90:	e009      	b.n	800fda6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800fd92:	6839      	ldr	r1, [r7, #0]
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f000 fca3 	bl	80106e0 <USBD_CtlError>
          break;
 800fd9a:	e004      	b.n	800fda6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800fd9c:	6839      	ldr	r1, [r7, #0]
 800fd9e:	6878      	ldr	r0, [r7, #4]
 800fda0:	f000 fc9e 	bl	80106e0 <USBD_CtlError>
          break;
 800fda4:	e000      	b.n	800fda8 <USBD_StdItfReq+0x7c>
          break;
 800fda6:	bf00      	nop
      }
      break;
 800fda8:	e004      	b.n	800fdb4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800fdaa:	6839      	ldr	r1, [r7, #0]
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	f000 fc97 	bl	80106e0 <USBD_CtlError>
      break;
 800fdb2:	bf00      	nop
  }

  return ret;
 800fdb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	3710      	adds	r7, #16
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}

0800fdbe <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fdbe:	b580      	push	{r7, lr}
 800fdc0:	b084      	sub	sp, #16
 800fdc2:	af00      	add	r7, sp, #0
 800fdc4:	6078      	str	r0, [r7, #4]
 800fdc6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800fdc8:	2300      	movs	r3, #0
 800fdca:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	889b      	ldrh	r3, [r3, #4]
 800fdd0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	781b      	ldrb	r3, [r3, #0]
 800fdd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fdda:	2b40      	cmp	r3, #64	; 0x40
 800fddc:	d007      	beq.n	800fdee <USBD_StdEPReq+0x30>
 800fdde:	2b40      	cmp	r3, #64	; 0x40
 800fde0:	f200 8145 	bhi.w	801006e <USBD_StdEPReq+0x2b0>
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d00c      	beq.n	800fe02 <USBD_StdEPReq+0x44>
 800fde8:	2b20      	cmp	r3, #32
 800fdea:	f040 8140 	bne.w	801006e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdf4:	689b      	ldr	r3, [r3, #8]
 800fdf6:	6839      	ldr	r1, [r7, #0]
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	4798      	blx	r3
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	73fb      	strb	r3, [r7, #15]
      break;
 800fe00:	e13a      	b.n	8010078 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	785b      	ldrb	r3, [r3, #1]
 800fe06:	2b03      	cmp	r3, #3
 800fe08:	d007      	beq.n	800fe1a <USBD_StdEPReq+0x5c>
 800fe0a:	2b03      	cmp	r3, #3
 800fe0c:	f300 8129 	bgt.w	8010062 <USBD_StdEPReq+0x2a4>
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d07f      	beq.n	800ff14 <USBD_StdEPReq+0x156>
 800fe14:	2b01      	cmp	r3, #1
 800fe16:	d03c      	beq.n	800fe92 <USBD_StdEPReq+0xd4>
 800fe18:	e123      	b.n	8010062 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe20:	b2db      	uxtb	r3, r3
 800fe22:	2b02      	cmp	r3, #2
 800fe24:	d002      	beq.n	800fe2c <USBD_StdEPReq+0x6e>
 800fe26:	2b03      	cmp	r3, #3
 800fe28:	d016      	beq.n	800fe58 <USBD_StdEPReq+0x9a>
 800fe2a:	e02c      	b.n	800fe86 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fe2c:	7bbb      	ldrb	r3, [r7, #14]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d00d      	beq.n	800fe4e <USBD_StdEPReq+0x90>
 800fe32:	7bbb      	ldrb	r3, [r7, #14]
 800fe34:	2b80      	cmp	r3, #128	; 0x80
 800fe36:	d00a      	beq.n	800fe4e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fe38:	7bbb      	ldrb	r3, [r7, #14]
 800fe3a:	4619      	mov	r1, r3
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f001 fa27 	bl	8011290 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fe42:	2180      	movs	r1, #128	; 0x80
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f001 fa23 	bl	8011290 <USBD_LL_StallEP>
 800fe4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fe4c:	e020      	b.n	800fe90 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800fe4e:	6839      	ldr	r1, [r7, #0]
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f000 fc45 	bl	80106e0 <USBD_CtlError>
              break;
 800fe56:	e01b      	b.n	800fe90 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	885b      	ldrh	r3, [r3, #2]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d10e      	bne.n	800fe7e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fe60:	7bbb      	ldrb	r3, [r7, #14]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d00b      	beq.n	800fe7e <USBD_StdEPReq+0xc0>
 800fe66:	7bbb      	ldrb	r3, [r7, #14]
 800fe68:	2b80      	cmp	r3, #128	; 0x80
 800fe6a:	d008      	beq.n	800fe7e <USBD_StdEPReq+0xc0>
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	88db      	ldrh	r3, [r3, #6]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d104      	bne.n	800fe7e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800fe74:	7bbb      	ldrb	r3, [r7, #14]
 800fe76:	4619      	mov	r1, r3
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f001 fa09 	bl	8011290 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f000 fcf9 	bl	8010876 <USBD_CtlSendStatus>

              break;
 800fe84:	e004      	b.n	800fe90 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800fe86:	6839      	ldr	r1, [r7, #0]
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f000 fc29 	bl	80106e0 <USBD_CtlError>
              break;
 800fe8e:	bf00      	nop
          }
          break;
 800fe90:	e0ec      	b.n	801006c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe98:	b2db      	uxtb	r3, r3
 800fe9a:	2b02      	cmp	r3, #2
 800fe9c:	d002      	beq.n	800fea4 <USBD_StdEPReq+0xe6>
 800fe9e:	2b03      	cmp	r3, #3
 800fea0:	d016      	beq.n	800fed0 <USBD_StdEPReq+0x112>
 800fea2:	e030      	b.n	800ff06 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fea4:	7bbb      	ldrb	r3, [r7, #14]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d00d      	beq.n	800fec6 <USBD_StdEPReq+0x108>
 800feaa:	7bbb      	ldrb	r3, [r7, #14]
 800feac:	2b80      	cmp	r3, #128	; 0x80
 800feae:	d00a      	beq.n	800fec6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800feb0:	7bbb      	ldrb	r3, [r7, #14]
 800feb2:	4619      	mov	r1, r3
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	f001 f9eb 	bl	8011290 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800feba:	2180      	movs	r1, #128	; 0x80
 800febc:	6878      	ldr	r0, [r7, #4]
 800febe:	f001 f9e7 	bl	8011290 <USBD_LL_StallEP>
 800fec2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fec4:	e025      	b.n	800ff12 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800fec6:	6839      	ldr	r1, [r7, #0]
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f000 fc09 	bl	80106e0 <USBD_CtlError>
              break;
 800fece:	e020      	b.n	800ff12 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	885b      	ldrh	r3, [r3, #2]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d11b      	bne.n	800ff10 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fed8:	7bbb      	ldrb	r3, [r7, #14]
 800feda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d004      	beq.n	800feec <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fee2:	7bbb      	ldrb	r3, [r7, #14]
 800fee4:	4619      	mov	r1, r3
 800fee6:	6878      	ldr	r0, [r7, #4]
 800fee8:	f001 fa08 	bl	80112fc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	f000 fcc2 	bl	8010876 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fef8:	689b      	ldr	r3, [r3, #8]
 800fefa:	6839      	ldr	r1, [r7, #0]
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	4798      	blx	r3
 800ff00:	4603      	mov	r3, r0
 800ff02:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ff04:	e004      	b.n	800ff10 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ff06:	6839      	ldr	r1, [r7, #0]
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f000 fbe9 	bl	80106e0 <USBD_CtlError>
              break;
 800ff0e:	e000      	b.n	800ff12 <USBD_StdEPReq+0x154>
              break;
 800ff10:	bf00      	nop
          }
          break;
 800ff12:	e0ab      	b.n	801006c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff1a:	b2db      	uxtb	r3, r3
 800ff1c:	2b02      	cmp	r3, #2
 800ff1e:	d002      	beq.n	800ff26 <USBD_StdEPReq+0x168>
 800ff20:	2b03      	cmp	r3, #3
 800ff22:	d032      	beq.n	800ff8a <USBD_StdEPReq+0x1cc>
 800ff24:	e097      	b.n	8010056 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ff26:	7bbb      	ldrb	r3, [r7, #14]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d007      	beq.n	800ff3c <USBD_StdEPReq+0x17e>
 800ff2c:	7bbb      	ldrb	r3, [r7, #14]
 800ff2e:	2b80      	cmp	r3, #128	; 0x80
 800ff30:	d004      	beq.n	800ff3c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ff32:	6839      	ldr	r1, [r7, #0]
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f000 fbd3 	bl	80106e0 <USBD_CtlError>
                break;
 800ff3a:	e091      	b.n	8010060 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ff3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	da0b      	bge.n	800ff5c <USBD_StdEPReq+0x19e>
 800ff44:	7bbb      	ldrb	r3, [r7, #14]
 800ff46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ff4a:	4613      	mov	r3, r2
 800ff4c:	009b      	lsls	r3, r3, #2
 800ff4e:	4413      	add	r3, r2
 800ff50:	009b      	lsls	r3, r3, #2
 800ff52:	3310      	adds	r3, #16
 800ff54:	687a      	ldr	r2, [r7, #4]
 800ff56:	4413      	add	r3, r2
 800ff58:	3304      	adds	r3, #4
 800ff5a:	e00b      	b.n	800ff74 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ff5c:	7bbb      	ldrb	r3, [r7, #14]
 800ff5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ff62:	4613      	mov	r3, r2
 800ff64:	009b      	lsls	r3, r3, #2
 800ff66:	4413      	add	r3, r2
 800ff68:	009b      	lsls	r3, r3, #2
 800ff6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ff6e:	687a      	ldr	r2, [r7, #4]
 800ff70:	4413      	add	r3, r2
 800ff72:	3304      	adds	r3, #4
 800ff74:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	2200      	movs	r2, #0
 800ff7a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	2202      	movs	r2, #2
 800ff80:	4619      	mov	r1, r3
 800ff82:	6878      	ldr	r0, [r7, #4]
 800ff84:	f000 fc1d 	bl	80107c2 <USBD_CtlSendData>
              break;
 800ff88:	e06a      	b.n	8010060 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ff8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	da11      	bge.n	800ffb6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ff92:	7bbb      	ldrb	r3, [r7, #14]
 800ff94:	f003 020f 	and.w	r2, r3, #15
 800ff98:	6879      	ldr	r1, [r7, #4]
 800ff9a:	4613      	mov	r3, r2
 800ff9c:	009b      	lsls	r3, r3, #2
 800ff9e:	4413      	add	r3, r2
 800ffa0:	009b      	lsls	r3, r3, #2
 800ffa2:	440b      	add	r3, r1
 800ffa4:	3324      	adds	r3, #36	; 0x24
 800ffa6:	881b      	ldrh	r3, [r3, #0]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d117      	bne.n	800ffdc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ffac:	6839      	ldr	r1, [r7, #0]
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	f000 fb96 	bl	80106e0 <USBD_CtlError>
                  break;
 800ffb4:	e054      	b.n	8010060 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ffb6:	7bbb      	ldrb	r3, [r7, #14]
 800ffb8:	f003 020f 	and.w	r2, r3, #15
 800ffbc:	6879      	ldr	r1, [r7, #4]
 800ffbe:	4613      	mov	r3, r2
 800ffc0:	009b      	lsls	r3, r3, #2
 800ffc2:	4413      	add	r3, r2
 800ffc4:	009b      	lsls	r3, r3, #2
 800ffc6:	440b      	add	r3, r1
 800ffc8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ffcc:	881b      	ldrh	r3, [r3, #0]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d104      	bne.n	800ffdc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ffd2:	6839      	ldr	r1, [r7, #0]
 800ffd4:	6878      	ldr	r0, [r7, #4]
 800ffd6:	f000 fb83 	bl	80106e0 <USBD_CtlError>
                  break;
 800ffda:	e041      	b.n	8010060 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ffdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	da0b      	bge.n	800fffc <USBD_StdEPReq+0x23e>
 800ffe4:	7bbb      	ldrb	r3, [r7, #14]
 800ffe6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ffea:	4613      	mov	r3, r2
 800ffec:	009b      	lsls	r3, r3, #2
 800ffee:	4413      	add	r3, r2
 800fff0:	009b      	lsls	r3, r3, #2
 800fff2:	3310      	adds	r3, #16
 800fff4:	687a      	ldr	r2, [r7, #4]
 800fff6:	4413      	add	r3, r2
 800fff8:	3304      	adds	r3, #4
 800fffa:	e00b      	b.n	8010014 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fffc:	7bbb      	ldrb	r3, [r7, #14]
 800fffe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010002:	4613      	mov	r3, r2
 8010004:	009b      	lsls	r3, r3, #2
 8010006:	4413      	add	r3, r2
 8010008:	009b      	lsls	r3, r3, #2
 801000a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801000e:	687a      	ldr	r2, [r7, #4]
 8010010:	4413      	add	r3, r2
 8010012:	3304      	adds	r3, #4
 8010014:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010016:	7bbb      	ldrb	r3, [r7, #14]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d002      	beq.n	8010022 <USBD_StdEPReq+0x264>
 801001c:	7bbb      	ldrb	r3, [r7, #14]
 801001e:	2b80      	cmp	r3, #128	; 0x80
 8010020:	d103      	bne.n	801002a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	2200      	movs	r2, #0
 8010026:	601a      	str	r2, [r3, #0]
 8010028:	e00e      	b.n	8010048 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801002a:	7bbb      	ldrb	r3, [r7, #14]
 801002c:	4619      	mov	r1, r3
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	f001 f99a 	bl	8011368 <USBD_LL_IsStallEP>
 8010034:	4603      	mov	r3, r0
 8010036:	2b00      	cmp	r3, #0
 8010038:	d003      	beq.n	8010042 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801003a:	68bb      	ldr	r3, [r7, #8]
 801003c:	2201      	movs	r2, #1
 801003e:	601a      	str	r2, [r3, #0]
 8010040:	e002      	b.n	8010048 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8010042:	68bb      	ldr	r3, [r7, #8]
 8010044:	2200      	movs	r2, #0
 8010046:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010048:	68bb      	ldr	r3, [r7, #8]
 801004a:	2202      	movs	r2, #2
 801004c:	4619      	mov	r1, r3
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	f000 fbb7 	bl	80107c2 <USBD_CtlSendData>
              break;
 8010054:	e004      	b.n	8010060 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8010056:	6839      	ldr	r1, [r7, #0]
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f000 fb41 	bl	80106e0 <USBD_CtlError>
              break;
 801005e:	bf00      	nop
          }
          break;
 8010060:	e004      	b.n	801006c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8010062:	6839      	ldr	r1, [r7, #0]
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f000 fb3b 	bl	80106e0 <USBD_CtlError>
          break;
 801006a:	bf00      	nop
      }
      break;
 801006c:	e004      	b.n	8010078 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801006e:	6839      	ldr	r1, [r7, #0]
 8010070:	6878      	ldr	r0, [r7, #4]
 8010072:	f000 fb35 	bl	80106e0 <USBD_CtlError>
      break;
 8010076:	bf00      	nop
  }

  return ret;
 8010078:	7bfb      	ldrb	r3, [r7, #15]
}
 801007a:	4618      	mov	r0, r3
 801007c:	3710      	adds	r7, #16
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
	...

08010084 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b084      	sub	sp, #16
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
 801008c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801008e:	2300      	movs	r3, #0
 8010090:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010092:	2300      	movs	r3, #0
 8010094:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010096:	2300      	movs	r3, #0
 8010098:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	885b      	ldrh	r3, [r3, #2]
 801009e:	0a1b      	lsrs	r3, r3, #8
 80100a0:	b29b      	uxth	r3, r3
 80100a2:	3b01      	subs	r3, #1
 80100a4:	2b06      	cmp	r3, #6
 80100a6:	f200 8128 	bhi.w	80102fa <USBD_GetDescriptor+0x276>
 80100aa:	a201      	add	r2, pc, #4	; (adr r2, 80100b0 <USBD_GetDescriptor+0x2c>)
 80100ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100b0:	080100cd 	.word	0x080100cd
 80100b4:	080100e5 	.word	0x080100e5
 80100b8:	08010125 	.word	0x08010125
 80100bc:	080102fb 	.word	0x080102fb
 80100c0:	080102fb 	.word	0x080102fb
 80100c4:	0801029b 	.word	0x0801029b
 80100c8:	080102c7 	.word	0x080102c7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	687a      	ldr	r2, [r7, #4]
 80100d6:	7c12      	ldrb	r2, [r2, #16]
 80100d8:	f107 0108 	add.w	r1, r7, #8
 80100dc:	4610      	mov	r0, r2
 80100de:	4798      	blx	r3
 80100e0:	60f8      	str	r0, [r7, #12]
      break;
 80100e2:	e112      	b.n	801030a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	7c1b      	ldrb	r3, [r3, #16]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d10d      	bne.n	8010108 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80100f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100f4:	f107 0208 	add.w	r2, r7, #8
 80100f8:	4610      	mov	r0, r2
 80100fa:	4798      	blx	r3
 80100fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	3301      	adds	r3, #1
 8010102:	2202      	movs	r2, #2
 8010104:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010106:	e100      	b.n	801030a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801010e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010110:	f107 0208 	add.w	r2, r7, #8
 8010114:	4610      	mov	r0, r2
 8010116:	4798      	blx	r3
 8010118:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	3301      	adds	r3, #1
 801011e:	2202      	movs	r2, #2
 8010120:	701a      	strb	r2, [r3, #0]
      break;
 8010122:	e0f2      	b.n	801030a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	885b      	ldrh	r3, [r3, #2]
 8010128:	b2db      	uxtb	r3, r3
 801012a:	2b05      	cmp	r3, #5
 801012c:	f200 80ac 	bhi.w	8010288 <USBD_GetDescriptor+0x204>
 8010130:	a201      	add	r2, pc, #4	; (adr r2, 8010138 <USBD_GetDescriptor+0xb4>)
 8010132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010136:	bf00      	nop
 8010138:	08010151 	.word	0x08010151
 801013c:	08010185 	.word	0x08010185
 8010140:	080101b9 	.word	0x080101b9
 8010144:	080101ed 	.word	0x080101ed
 8010148:	08010221 	.word	0x08010221
 801014c:	08010255 	.word	0x08010255
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010156:	685b      	ldr	r3, [r3, #4]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d00b      	beq.n	8010174 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010162:	685b      	ldr	r3, [r3, #4]
 8010164:	687a      	ldr	r2, [r7, #4]
 8010166:	7c12      	ldrb	r2, [r2, #16]
 8010168:	f107 0108 	add.w	r1, r7, #8
 801016c:	4610      	mov	r0, r2
 801016e:	4798      	blx	r3
 8010170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010172:	e091      	b.n	8010298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010174:	6839      	ldr	r1, [r7, #0]
 8010176:	6878      	ldr	r0, [r7, #4]
 8010178:	f000 fab2 	bl	80106e0 <USBD_CtlError>
            err++;
 801017c:	7afb      	ldrb	r3, [r7, #11]
 801017e:	3301      	adds	r3, #1
 8010180:	72fb      	strb	r3, [r7, #11]
          break;
 8010182:	e089      	b.n	8010298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801018a:	689b      	ldr	r3, [r3, #8]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d00b      	beq.n	80101a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010196:	689b      	ldr	r3, [r3, #8]
 8010198:	687a      	ldr	r2, [r7, #4]
 801019a:	7c12      	ldrb	r2, [r2, #16]
 801019c:	f107 0108 	add.w	r1, r7, #8
 80101a0:	4610      	mov	r0, r2
 80101a2:	4798      	blx	r3
 80101a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80101a6:	e077      	b.n	8010298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80101a8:	6839      	ldr	r1, [r7, #0]
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f000 fa98 	bl	80106e0 <USBD_CtlError>
            err++;
 80101b0:	7afb      	ldrb	r3, [r7, #11]
 80101b2:	3301      	adds	r3, #1
 80101b4:	72fb      	strb	r3, [r7, #11]
          break;
 80101b6:	e06f      	b.n	8010298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80101be:	68db      	ldr	r3, [r3, #12]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d00b      	beq.n	80101dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80101ca:	68db      	ldr	r3, [r3, #12]
 80101cc:	687a      	ldr	r2, [r7, #4]
 80101ce:	7c12      	ldrb	r2, [r2, #16]
 80101d0:	f107 0108 	add.w	r1, r7, #8
 80101d4:	4610      	mov	r0, r2
 80101d6:	4798      	blx	r3
 80101d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80101da:	e05d      	b.n	8010298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80101dc:	6839      	ldr	r1, [r7, #0]
 80101de:	6878      	ldr	r0, [r7, #4]
 80101e0:	f000 fa7e 	bl	80106e0 <USBD_CtlError>
            err++;
 80101e4:	7afb      	ldrb	r3, [r7, #11]
 80101e6:	3301      	adds	r3, #1
 80101e8:	72fb      	strb	r3, [r7, #11]
          break;
 80101ea:	e055      	b.n	8010298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80101f2:	691b      	ldr	r3, [r3, #16]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d00b      	beq.n	8010210 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80101fe:	691b      	ldr	r3, [r3, #16]
 8010200:	687a      	ldr	r2, [r7, #4]
 8010202:	7c12      	ldrb	r2, [r2, #16]
 8010204:	f107 0108 	add.w	r1, r7, #8
 8010208:	4610      	mov	r0, r2
 801020a:	4798      	blx	r3
 801020c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801020e:	e043      	b.n	8010298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010210:	6839      	ldr	r1, [r7, #0]
 8010212:	6878      	ldr	r0, [r7, #4]
 8010214:	f000 fa64 	bl	80106e0 <USBD_CtlError>
            err++;
 8010218:	7afb      	ldrb	r3, [r7, #11]
 801021a:	3301      	adds	r3, #1
 801021c:	72fb      	strb	r3, [r7, #11]
          break;
 801021e:	e03b      	b.n	8010298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010226:	695b      	ldr	r3, [r3, #20]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d00b      	beq.n	8010244 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010232:	695b      	ldr	r3, [r3, #20]
 8010234:	687a      	ldr	r2, [r7, #4]
 8010236:	7c12      	ldrb	r2, [r2, #16]
 8010238:	f107 0108 	add.w	r1, r7, #8
 801023c:	4610      	mov	r0, r2
 801023e:	4798      	blx	r3
 8010240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010242:	e029      	b.n	8010298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010244:	6839      	ldr	r1, [r7, #0]
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	f000 fa4a 	bl	80106e0 <USBD_CtlError>
            err++;
 801024c:	7afb      	ldrb	r3, [r7, #11]
 801024e:	3301      	adds	r3, #1
 8010250:	72fb      	strb	r3, [r7, #11]
          break;
 8010252:	e021      	b.n	8010298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801025a:	699b      	ldr	r3, [r3, #24]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d00b      	beq.n	8010278 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010266:	699b      	ldr	r3, [r3, #24]
 8010268:	687a      	ldr	r2, [r7, #4]
 801026a:	7c12      	ldrb	r2, [r2, #16]
 801026c:	f107 0108 	add.w	r1, r7, #8
 8010270:	4610      	mov	r0, r2
 8010272:	4798      	blx	r3
 8010274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010276:	e00f      	b.n	8010298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010278:	6839      	ldr	r1, [r7, #0]
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f000 fa30 	bl	80106e0 <USBD_CtlError>
            err++;
 8010280:	7afb      	ldrb	r3, [r7, #11]
 8010282:	3301      	adds	r3, #1
 8010284:	72fb      	strb	r3, [r7, #11]
          break;
 8010286:	e007      	b.n	8010298 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010288:	6839      	ldr	r1, [r7, #0]
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f000 fa28 	bl	80106e0 <USBD_CtlError>
          err++;
 8010290:	7afb      	ldrb	r3, [r7, #11]
 8010292:	3301      	adds	r3, #1
 8010294:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8010296:	bf00      	nop
      }
      break;
 8010298:	e037      	b.n	801030a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	7c1b      	ldrb	r3, [r3, #16]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d109      	bne.n	80102b6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80102a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102aa:	f107 0208 	add.w	r2, r7, #8
 80102ae:	4610      	mov	r0, r2
 80102b0:	4798      	blx	r3
 80102b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80102b4:	e029      	b.n	801030a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80102b6:	6839      	ldr	r1, [r7, #0]
 80102b8:	6878      	ldr	r0, [r7, #4]
 80102ba:	f000 fa11 	bl	80106e0 <USBD_CtlError>
        err++;
 80102be:	7afb      	ldrb	r3, [r7, #11]
 80102c0:	3301      	adds	r3, #1
 80102c2:	72fb      	strb	r3, [r7, #11]
      break;
 80102c4:	e021      	b.n	801030a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	7c1b      	ldrb	r3, [r3, #16]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d10d      	bne.n	80102ea <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80102d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102d6:	f107 0208 	add.w	r2, r7, #8
 80102da:	4610      	mov	r0, r2
 80102dc:	4798      	blx	r3
 80102de:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	3301      	adds	r3, #1
 80102e4:	2207      	movs	r2, #7
 80102e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80102e8:	e00f      	b.n	801030a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80102ea:	6839      	ldr	r1, [r7, #0]
 80102ec:	6878      	ldr	r0, [r7, #4]
 80102ee:	f000 f9f7 	bl	80106e0 <USBD_CtlError>
        err++;
 80102f2:	7afb      	ldrb	r3, [r7, #11]
 80102f4:	3301      	adds	r3, #1
 80102f6:	72fb      	strb	r3, [r7, #11]
      break;
 80102f8:	e007      	b.n	801030a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80102fa:	6839      	ldr	r1, [r7, #0]
 80102fc:	6878      	ldr	r0, [r7, #4]
 80102fe:	f000 f9ef 	bl	80106e0 <USBD_CtlError>
      err++;
 8010302:	7afb      	ldrb	r3, [r7, #11]
 8010304:	3301      	adds	r3, #1
 8010306:	72fb      	strb	r3, [r7, #11]
      break;
 8010308:	bf00      	nop
  }

  if (err != 0U)
 801030a:	7afb      	ldrb	r3, [r7, #11]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d11e      	bne.n	801034e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	88db      	ldrh	r3, [r3, #6]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d016      	beq.n	8010346 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8010318:	893b      	ldrh	r3, [r7, #8]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d00e      	beq.n	801033c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801031e:	683b      	ldr	r3, [r7, #0]
 8010320:	88da      	ldrh	r2, [r3, #6]
 8010322:	893b      	ldrh	r3, [r7, #8]
 8010324:	4293      	cmp	r3, r2
 8010326:	bf28      	it	cs
 8010328:	4613      	movcs	r3, r2
 801032a:	b29b      	uxth	r3, r3
 801032c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801032e:	893b      	ldrh	r3, [r7, #8]
 8010330:	461a      	mov	r2, r3
 8010332:	68f9      	ldr	r1, [r7, #12]
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f000 fa44 	bl	80107c2 <USBD_CtlSendData>
 801033a:	e009      	b.n	8010350 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801033c:	6839      	ldr	r1, [r7, #0]
 801033e:	6878      	ldr	r0, [r7, #4]
 8010340:	f000 f9ce 	bl	80106e0 <USBD_CtlError>
 8010344:	e004      	b.n	8010350 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010346:	6878      	ldr	r0, [r7, #4]
 8010348:	f000 fa95 	bl	8010876 <USBD_CtlSendStatus>
 801034c:	e000      	b.n	8010350 <USBD_GetDescriptor+0x2cc>
    return;
 801034e:	bf00      	nop
  }
}
 8010350:	3710      	adds	r7, #16
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}
 8010356:	bf00      	nop

08010358 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b084      	sub	sp, #16
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
 8010360:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010362:	683b      	ldr	r3, [r7, #0]
 8010364:	889b      	ldrh	r3, [r3, #4]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d131      	bne.n	80103ce <USBD_SetAddress+0x76>
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	88db      	ldrh	r3, [r3, #6]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d12d      	bne.n	80103ce <USBD_SetAddress+0x76>
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	885b      	ldrh	r3, [r3, #2]
 8010376:	2b7f      	cmp	r3, #127	; 0x7f
 8010378:	d829      	bhi.n	80103ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	885b      	ldrh	r3, [r3, #2]
 801037e:	b2db      	uxtb	r3, r3
 8010380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010384:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801038c:	b2db      	uxtb	r3, r3
 801038e:	2b03      	cmp	r3, #3
 8010390:	d104      	bne.n	801039c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010392:	6839      	ldr	r1, [r7, #0]
 8010394:	6878      	ldr	r0, [r7, #4]
 8010396:	f000 f9a3 	bl	80106e0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801039a:	e01d      	b.n	80103d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	7bfa      	ldrb	r2, [r7, #15]
 80103a0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80103a4:	7bfb      	ldrb	r3, [r7, #15]
 80103a6:	4619      	mov	r1, r3
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f001 f809 	bl	80113c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f000 fa61 	bl	8010876 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80103b4:	7bfb      	ldrb	r3, [r7, #15]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d004      	beq.n	80103c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	2202      	movs	r2, #2
 80103be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103c2:	e009      	b.n	80103d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2201      	movs	r2, #1
 80103c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103cc:	e004      	b.n	80103d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80103ce:	6839      	ldr	r1, [r7, #0]
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	f000 f985 	bl	80106e0 <USBD_CtlError>
  }
}
 80103d6:	bf00      	nop
 80103d8:	bf00      	nop
 80103da:	3710      	adds	r7, #16
 80103dc:	46bd      	mov	sp, r7
 80103de:	bd80      	pop	{r7, pc}

080103e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b084      	sub	sp, #16
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
 80103e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80103ea:	2300      	movs	r3, #0
 80103ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	885b      	ldrh	r3, [r3, #2]
 80103f2:	b2da      	uxtb	r2, r3
 80103f4:	4b4c      	ldr	r3, [pc, #304]	; (8010528 <USBD_SetConfig+0x148>)
 80103f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80103f8:	4b4b      	ldr	r3, [pc, #300]	; (8010528 <USBD_SetConfig+0x148>)
 80103fa:	781b      	ldrb	r3, [r3, #0]
 80103fc:	2b01      	cmp	r3, #1
 80103fe:	d905      	bls.n	801040c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010400:	6839      	ldr	r1, [r7, #0]
 8010402:	6878      	ldr	r0, [r7, #4]
 8010404:	f000 f96c 	bl	80106e0 <USBD_CtlError>
    return USBD_FAIL;
 8010408:	2303      	movs	r3, #3
 801040a:	e088      	b.n	801051e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010412:	b2db      	uxtb	r3, r3
 8010414:	2b02      	cmp	r3, #2
 8010416:	d002      	beq.n	801041e <USBD_SetConfig+0x3e>
 8010418:	2b03      	cmp	r3, #3
 801041a:	d025      	beq.n	8010468 <USBD_SetConfig+0x88>
 801041c:	e071      	b.n	8010502 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801041e:	4b42      	ldr	r3, [pc, #264]	; (8010528 <USBD_SetConfig+0x148>)
 8010420:	781b      	ldrb	r3, [r3, #0]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d01c      	beq.n	8010460 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8010426:	4b40      	ldr	r3, [pc, #256]	; (8010528 <USBD_SetConfig+0x148>)
 8010428:	781b      	ldrb	r3, [r3, #0]
 801042a:	461a      	mov	r2, r3
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010430:	4b3d      	ldr	r3, [pc, #244]	; (8010528 <USBD_SetConfig+0x148>)
 8010432:	781b      	ldrb	r3, [r3, #0]
 8010434:	4619      	mov	r1, r3
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f7ff f948 	bl	800f6cc <USBD_SetClassConfig>
 801043c:	4603      	mov	r3, r0
 801043e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010440:	7bfb      	ldrb	r3, [r7, #15]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d004      	beq.n	8010450 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8010446:	6839      	ldr	r1, [r7, #0]
 8010448:	6878      	ldr	r0, [r7, #4]
 801044a:	f000 f949 	bl	80106e0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801044e:	e065      	b.n	801051c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f000 fa10 	bl	8010876 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	2203      	movs	r2, #3
 801045a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801045e:	e05d      	b.n	801051c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010460:	6878      	ldr	r0, [r7, #4]
 8010462:	f000 fa08 	bl	8010876 <USBD_CtlSendStatus>
      break;
 8010466:	e059      	b.n	801051c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010468:	4b2f      	ldr	r3, [pc, #188]	; (8010528 <USBD_SetConfig+0x148>)
 801046a:	781b      	ldrb	r3, [r3, #0]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d112      	bne.n	8010496 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2202      	movs	r2, #2
 8010474:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8010478:	4b2b      	ldr	r3, [pc, #172]	; (8010528 <USBD_SetConfig+0x148>)
 801047a:	781b      	ldrb	r3, [r3, #0]
 801047c:	461a      	mov	r2, r3
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010482:	4b29      	ldr	r3, [pc, #164]	; (8010528 <USBD_SetConfig+0x148>)
 8010484:	781b      	ldrb	r3, [r3, #0]
 8010486:	4619      	mov	r1, r3
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f7ff f93b 	bl	800f704 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801048e:	6878      	ldr	r0, [r7, #4]
 8010490:	f000 f9f1 	bl	8010876 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010494:	e042      	b.n	801051c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8010496:	4b24      	ldr	r3, [pc, #144]	; (8010528 <USBD_SetConfig+0x148>)
 8010498:	781b      	ldrb	r3, [r3, #0]
 801049a:	461a      	mov	r2, r3
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	685b      	ldr	r3, [r3, #4]
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d02a      	beq.n	80104fa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	685b      	ldr	r3, [r3, #4]
 80104a8:	b2db      	uxtb	r3, r3
 80104aa:	4619      	mov	r1, r3
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	f7ff f929 	bl	800f704 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80104b2:	4b1d      	ldr	r3, [pc, #116]	; (8010528 <USBD_SetConfig+0x148>)
 80104b4:	781b      	ldrb	r3, [r3, #0]
 80104b6:	461a      	mov	r2, r3
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80104bc:	4b1a      	ldr	r3, [pc, #104]	; (8010528 <USBD_SetConfig+0x148>)
 80104be:	781b      	ldrb	r3, [r3, #0]
 80104c0:	4619      	mov	r1, r3
 80104c2:	6878      	ldr	r0, [r7, #4]
 80104c4:	f7ff f902 	bl	800f6cc <USBD_SetClassConfig>
 80104c8:	4603      	mov	r3, r0
 80104ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80104cc:	7bfb      	ldrb	r3, [r7, #15]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d00f      	beq.n	80104f2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80104d2:	6839      	ldr	r1, [r7, #0]
 80104d4:	6878      	ldr	r0, [r7, #4]
 80104d6:	f000 f903 	bl	80106e0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	685b      	ldr	r3, [r3, #4]
 80104de:	b2db      	uxtb	r3, r3
 80104e0:	4619      	mov	r1, r3
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	f7ff f90e 	bl	800f704 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2202      	movs	r2, #2
 80104ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80104f0:	e014      	b.n	801051c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80104f2:	6878      	ldr	r0, [r7, #4]
 80104f4:	f000 f9bf 	bl	8010876 <USBD_CtlSendStatus>
      break;
 80104f8:	e010      	b.n	801051c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80104fa:	6878      	ldr	r0, [r7, #4]
 80104fc:	f000 f9bb 	bl	8010876 <USBD_CtlSendStatus>
      break;
 8010500:	e00c      	b.n	801051c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8010502:	6839      	ldr	r1, [r7, #0]
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f000 f8eb 	bl	80106e0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801050a:	4b07      	ldr	r3, [pc, #28]	; (8010528 <USBD_SetConfig+0x148>)
 801050c:	781b      	ldrb	r3, [r3, #0]
 801050e:	4619      	mov	r1, r3
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	f7ff f8f7 	bl	800f704 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010516:	2303      	movs	r3, #3
 8010518:	73fb      	strb	r3, [r7, #15]
      break;
 801051a:	bf00      	nop
  }

  return ret;
 801051c:	7bfb      	ldrb	r3, [r7, #15]
}
 801051e:	4618      	mov	r0, r3
 8010520:	3710      	adds	r7, #16
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}
 8010526:	bf00      	nop
 8010528:	20000d90 	.word	0x20000d90

0801052c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b082      	sub	sp, #8
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
 8010534:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	88db      	ldrh	r3, [r3, #6]
 801053a:	2b01      	cmp	r3, #1
 801053c:	d004      	beq.n	8010548 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801053e:	6839      	ldr	r1, [r7, #0]
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f000 f8cd 	bl	80106e0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010546:	e023      	b.n	8010590 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801054e:	b2db      	uxtb	r3, r3
 8010550:	2b02      	cmp	r3, #2
 8010552:	dc02      	bgt.n	801055a <USBD_GetConfig+0x2e>
 8010554:	2b00      	cmp	r3, #0
 8010556:	dc03      	bgt.n	8010560 <USBD_GetConfig+0x34>
 8010558:	e015      	b.n	8010586 <USBD_GetConfig+0x5a>
 801055a:	2b03      	cmp	r3, #3
 801055c:	d00b      	beq.n	8010576 <USBD_GetConfig+0x4a>
 801055e:	e012      	b.n	8010586 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2200      	movs	r2, #0
 8010564:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	3308      	adds	r3, #8
 801056a:	2201      	movs	r2, #1
 801056c:	4619      	mov	r1, r3
 801056e:	6878      	ldr	r0, [r7, #4]
 8010570:	f000 f927 	bl	80107c2 <USBD_CtlSendData>
        break;
 8010574:	e00c      	b.n	8010590 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	3304      	adds	r3, #4
 801057a:	2201      	movs	r2, #1
 801057c:	4619      	mov	r1, r3
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f000 f91f 	bl	80107c2 <USBD_CtlSendData>
        break;
 8010584:	e004      	b.n	8010590 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010586:	6839      	ldr	r1, [r7, #0]
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f000 f8a9 	bl	80106e0 <USBD_CtlError>
        break;
 801058e:	bf00      	nop
}
 8010590:	bf00      	nop
 8010592:	3708      	adds	r7, #8
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}

08010598 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b082      	sub	sp, #8
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
 80105a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80105a8:	b2db      	uxtb	r3, r3
 80105aa:	3b01      	subs	r3, #1
 80105ac:	2b02      	cmp	r3, #2
 80105ae:	d81e      	bhi.n	80105ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	88db      	ldrh	r3, [r3, #6]
 80105b4:	2b02      	cmp	r3, #2
 80105b6:	d004      	beq.n	80105c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80105b8:	6839      	ldr	r1, [r7, #0]
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f000 f890 	bl	80106e0 <USBD_CtlError>
        break;
 80105c0:	e01a      	b.n	80105f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	2201      	movs	r2, #1
 80105c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d005      	beq.n	80105de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	68db      	ldr	r3, [r3, #12]
 80105d6:	f043 0202 	orr.w	r2, r3, #2
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	330c      	adds	r3, #12
 80105e2:	2202      	movs	r2, #2
 80105e4:	4619      	mov	r1, r3
 80105e6:	6878      	ldr	r0, [r7, #4]
 80105e8:	f000 f8eb 	bl	80107c2 <USBD_CtlSendData>
      break;
 80105ec:	e004      	b.n	80105f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80105ee:	6839      	ldr	r1, [r7, #0]
 80105f0:	6878      	ldr	r0, [r7, #4]
 80105f2:	f000 f875 	bl	80106e0 <USBD_CtlError>
      break;
 80105f6:	bf00      	nop
  }
}
 80105f8:	bf00      	nop
 80105fa:	3708      	adds	r7, #8
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bd80      	pop	{r7, pc}

08010600 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b082      	sub	sp, #8
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
 8010608:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	885b      	ldrh	r3, [r3, #2]
 801060e:	2b01      	cmp	r3, #1
 8010610:	d106      	bne.n	8010620 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	2201      	movs	r2, #1
 8010616:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801061a:	6878      	ldr	r0, [r7, #4]
 801061c:	f000 f92b 	bl	8010876 <USBD_CtlSendStatus>
  }
}
 8010620:	bf00      	nop
 8010622:	3708      	adds	r7, #8
 8010624:	46bd      	mov	sp, r7
 8010626:	bd80      	pop	{r7, pc}

08010628 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b082      	sub	sp, #8
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
 8010630:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010638:	b2db      	uxtb	r3, r3
 801063a:	3b01      	subs	r3, #1
 801063c:	2b02      	cmp	r3, #2
 801063e:	d80b      	bhi.n	8010658 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	885b      	ldrh	r3, [r3, #2]
 8010644:	2b01      	cmp	r3, #1
 8010646:	d10c      	bne.n	8010662 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	2200      	movs	r2, #0
 801064c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010650:	6878      	ldr	r0, [r7, #4]
 8010652:	f000 f910 	bl	8010876 <USBD_CtlSendStatus>
      }
      break;
 8010656:	e004      	b.n	8010662 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010658:	6839      	ldr	r1, [r7, #0]
 801065a:	6878      	ldr	r0, [r7, #4]
 801065c:	f000 f840 	bl	80106e0 <USBD_CtlError>
      break;
 8010660:	e000      	b.n	8010664 <USBD_ClrFeature+0x3c>
      break;
 8010662:	bf00      	nop
  }
}
 8010664:	bf00      	nop
 8010666:	3708      	adds	r7, #8
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}

0801066c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801066c:	b580      	push	{r7, lr}
 801066e:	b084      	sub	sp, #16
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
 8010674:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010676:	683b      	ldr	r3, [r7, #0]
 8010678:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	781a      	ldrb	r2, [r3, #0]
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	3301      	adds	r3, #1
 8010686:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	781a      	ldrb	r2, [r3, #0]
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	3301      	adds	r3, #1
 8010694:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010696:	68f8      	ldr	r0, [r7, #12]
 8010698:	f7ff fabb 	bl	800fc12 <SWAPBYTE>
 801069c:	4603      	mov	r3, r0
 801069e:	461a      	mov	r2, r3
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	3301      	adds	r3, #1
 80106a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	3301      	adds	r3, #1
 80106ae:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80106b0:	68f8      	ldr	r0, [r7, #12]
 80106b2:	f7ff faae 	bl	800fc12 <SWAPBYTE>
 80106b6:	4603      	mov	r3, r0
 80106b8:	461a      	mov	r2, r3
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	3301      	adds	r3, #1
 80106c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	3301      	adds	r3, #1
 80106c8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80106ca:	68f8      	ldr	r0, [r7, #12]
 80106cc:	f7ff faa1 	bl	800fc12 <SWAPBYTE>
 80106d0:	4603      	mov	r3, r0
 80106d2:	461a      	mov	r2, r3
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	80da      	strh	r2, [r3, #6]
}
 80106d8:	bf00      	nop
 80106da:	3710      	adds	r7, #16
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd80      	pop	{r7, pc}

080106e0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b082      	sub	sp, #8
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
 80106e8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80106ea:	2180      	movs	r1, #128	; 0x80
 80106ec:	6878      	ldr	r0, [r7, #4]
 80106ee:	f000 fdcf 	bl	8011290 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80106f2:	2100      	movs	r1, #0
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	f000 fdcb 	bl	8011290 <USBD_LL_StallEP>
}
 80106fa:	bf00      	nop
 80106fc:	3708      	adds	r7, #8
 80106fe:	46bd      	mov	sp, r7
 8010700:	bd80      	pop	{r7, pc}

08010702 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010702:	b580      	push	{r7, lr}
 8010704:	b086      	sub	sp, #24
 8010706:	af00      	add	r7, sp, #0
 8010708:	60f8      	str	r0, [r7, #12]
 801070a:	60b9      	str	r1, [r7, #8]
 801070c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801070e:	2300      	movs	r3, #0
 8010710:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d036      	beq.n	8010786 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801071c:	6938      	ldr	r0, [r7, #16]
 801071e:	f000 f836 	bl	801078e <USBD_GetLen>
 8010722:	4603      	mov	r3, r0
 8010724:	3301      	adds	r3, #1
 8010726:	b29b      	uxth	r3, r3
 8010728:	005b      	lsls	r3, r3, #1
 801072a:	b29a      	uxth	r2, r3
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010730:	7dfb      	ldrb	r3, [r7, #23]
 8010732:	68ba      	ldr	r2, [r7, #8]
 8010734:	4413      	add	r3, r2
 8010736:	687a      	ldr	r2, [r7, #4]
 8010738:	7812      	ldrb	r2, [r2, #0]
 801073a:	701a      	strb	r2, [r3, #0]
  idx++;
 801073c:	7dfb      	ldrb	r3, [r7, #23]
 801073e:	3301      	adds	r3, #1
 8010740:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010742:	7dfb      	ldrb	r3, [r7, #23]
 8010744:	68ba      	ldr	r2, [r7, #8]
 8010746:	4413      	add	r3, r2
 8010748:	2203      	movs	r2, #3
 801074a:	701a      	strb	r2, [r3, #0]
  idx++;
 801074c:	7dfb      	ldrb	r3, [r7, #23]
 801074e:	3301      	adds	r3, #1
 8010750:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010752:	e013      	b.n	801077c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010754:	7dfb      	ldrb	r3, [r7, #23]
 8010756:	68ba      	ldr	r2, [r7, #8]
 8010758:	4413      	add	r3, r2
 801075a:	693a      	ldr	r2, [r7, #16]
 801075c:	7812      	ldrb	r2, [r2, #0]
 801075e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010760:	693b      	ldr	r3, [r7, #16]
 8010762:	3301      	adds	r3, #1
 8010764:	613b      	str	r3, [r7, #16]
    idx++;
 8010766:	7dfb      	ldrb	r3, [r7, #23]
 8010768:	3301      	adds	r3, #1
 801076a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801076c:	7dfb      	ldrb	r3, [r7, #23]
 801076e:	68ba      	ldr	r2, [r7, #8]
 8010770:	4413      	add	r3, r2
 8010772:	2200      	movs	r2, #0
 8010774:	701a      	strb	r2, [r3, #0]
    idx++;
 8010776:	7dfb      	ldrb	r3, [r7, #23]
 8010778:	3301      	adds	r3, #1
 801077a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801077c:	693b      	ldr	r3, [r7, #16]
 801077e:	781b      	ldrb	r3, [r3, #0]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d1e7      	bne.n	8010754 <USBD_GetString+0x52>
 8010784:	e000      	b.n	8010788 <USBD_GetString+0x86>
    return;
 8010786:	bf00      	nop
  }
}
 8010788:	3718      	adds	r7, #24
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}

0801078e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801078e:	b480      	push	{r7}
 8010790:	b085      	sub	sp, #20
 8010792:	af00      	add	r7, sp, #0
 8010794:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010796:	2300      	movs	r3, #0
 8010798:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801079e:	e005      	b.n	80107ac <USBD_GetLen+0x1e>
  {
    len++;
 80107a0:	7bfb      	ldrb	r3, [r7, #15]
 80107a2:	3301      	adds	r3, #1
 80107a4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	3301      	adds	r3, #1
 80107aa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	781b      	ldrb	r3, [r3, #0]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d1f5      	bne.n	80107a0 <USBD_GetLen+0x12>
  }

  return len;
 80107b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80107b6:	4618      	mov	r0, r3
 80107b8:	3714      	adds	r7, #20
 80107ba:	46bd      	mov	sp, r7
 80107bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c0:	4770      	bx	lr

080107c2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80107c2:	b580      	push	{r7, lr}
 80107c4:	b084      	sub	sp, #16
 80107c6:	af00      	add	r7, sp, #0
 80107c8:	60f8      	str	r0, [r7, #12]
 80107ca:	60b9      	str	r1, [r7, #8]
 80107cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	2202      	movs	r2, #2
 80107d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	687a      	ldr	r2, [r7, #4]
 80107da:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	687a      	ldr	r2, [r7, #4]
 80107e0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	68ba      	ldr	r2, [r7, #8]
 80107e6:	2100      	movs	r1, #0
 80107e8:	68f8      	ldr	r0, [r7, #12]
 80107ea:	f000 fe1f 	bl	801142c <USBD_LL_Transmit>

  return USBD_OK;
 80107ee:	2300      	movs	r3, #0
}
 80107f0:	4618      	mov	r0, r3
 80107f2:	3710      	adds	r7, #16
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}

080107f8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b084      	sub	sp, #16
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	60f8      	str	r0, [r7, #12]
 8010800:	60b9      	str	r1, [r7, #8]
 8010802:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	68ba      	ldr	r2, [r7, #8]
 8010808:	2100      	movs	r1, #0
 801080a:	68f8      	ldr	r0, [r7, #12]
 801080c:	f000 fe0e 	bl	801142c <USBD_LL_Transmit>

  return USBD_OK;
 8010810:	2300      	movs	r3, #0
}
 8010812:	4618      	mov	r0, r3
 8010814:	3710      	adds	r7, #16
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}

0801081a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801081a:	b580      	push	{r7, lr}
 801081c:	b084      	sub	sp, #16
 801081e:	af00      	add	r7, sp, #0
 8010820:	60f8      	str	r0, [r7, #12]
 8010822:	60b9      	str	r1, [r7, #8]
 8010824:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	2203      	movs	r2, #3
 801082a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	687a      	ldr	r2, [r7, #4]
 8010832:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	687a      	ldr	r2, [r7, #4]
 801083a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	68ba      	ldr	r2, [r7, #8]
 8010842:	2100      	movs	r1, #0
 8010844:	68f8      	ldr	r0, [r7, #12]
 8010846:	f000 fe29 	bl	801149c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801084a:	2300      	movs	r3, #0
}
 801084c:	4618      	mov	r0, r3
 801084e:	3710      	adds	r7, #16
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}

08010854 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b084      	sub	sp, #16
 8010858:	af00      	add	r7, sp, #0
 801085a:	60f8      	str	r0, [r7, #12]
 801085c:	60b9      	str	r1, [r7, #8]
 801085e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	68ba      	ldr	r2, [r7, #8]
 8010864:	2100      	movs	r1, #0
 8010866:	68f8      	ldr	r0, [r7, #12]
 8010868:	f000 fe18 	bl	801149c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801086c:	2300      	movs	r3, #0
}
 801086e:	4618      	mov	r0, r3
 8010870:	3710      	adds	r7, #16
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}

08010876 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010876:	b580      	push	{r7, lr}
 8010878:	b082      	sub	sp, #8
 801087a:	af00      	add	r7, sp, #0
 801087c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	2204      	movs	r2, #4
 8010882:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010886:	2300      	movs	r3, #0
 8010888:	2200      	movs	r2, #0
 801088a:	2100      	movs	r1, #0
 801088c:	6878      	ldr	r0, [r7, #4]
 801088e:	f000 fdcd 	bl	801142c <USBD_LL_Transmit>

  return USBD_OK;
 8010892:	2300      	movs	r3, #0
}
 8010894:	4618      	mov	r0, r3
 8010896:	3708      	adds	r7, #8
 8010898:	46bd      	mov	sp, r7
 801089a:	bd80      	pop	{r7, pc}

0801089c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b082      	sub	sp, #8
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	2205      	movs	r2, #5
 80108a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80108ac:	2300      	movs	r3, #0
 80108ae:	2200      	movs	r2, #0
 80108b0:	2100      	movs	r1, #0
 80108b2:	6878      	ldr	r0, [r7, #4]
 80108b4:	f000 fdf2 	bl	801149c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80108b8:	2300      	movs	r3, #0
}
 80108ba:	4618      	mov	r0, r3
 80108bc:	3708      	adds	r7, #8
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}
	...

080108c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80108c4:	b480      	push	{r7}
 80108c6:	b087      	sub	sp, #28
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	60f8      	str	r0, [r7, #12]
 80108cc:	60b9      	str	r1, [r7, #8]
 80108ce:	4613      	mov	r3, r2
 80108d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80108d2:	2301      	movs	r3, #1
 80108d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80108d6:	2300      	movs	r3, #0
 80108d8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80108da:	4b1f      	ldr	r3, [pc, #124]	; (8010958 <FATFS_LinkDriverEx+0x94>)
 80108dc:	7a5b      	ldrb	r3, [r3, #9]
 80108de:	b2db      	uxtb	r3, r3
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d131      	bne.n	8010948 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80108e4:	4b1c      	ldr	r3, [pc, #112]	; (8010958 <FATFS_LinkDriverEx+0x94>)
 80108e6:	7a5b      	ldrb	r3, [r3, #9]
 80108e8:	b2db      	uxtb	r3, r3
 80108ea:	461a      	mov	r2, r3
 80108ec:	4b1a      	ldr	r3, [pc, #104]	; (8010958 <FATFS_LinkDriverEx+0x94>)
 80108ee:	2100      	movs	r1, #0
 80108f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80108f2:	4b19      	ldr	r3, [pc, #100]	; (8010958 <FATFS_LinkDriverEx+0x94>)
 80108f4:	7a5b      	ldrb	r3, [r3, #9]
 80108f6:	b2db      	uxtb	r3, r3
 80108f8:	4a17      	ldr	r2, [pc, #92]	; (8010958 <FATFS_LinkDriverEx+0x94>)
 80108fa:	009b      	lsls	r3, r3, #2
 80108fc:	4413      	add	r3, r2
 80108fe:	68fa      	ldr	r2, [r7, #12]
 8010900:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010902:	4b15      	ldr	r3, [pc, #84]	; (8010958 <FATFS_LinkDriverEx+0x94>)
 8010904:	7a5b      	ldrb	r3, [r3, #9]
 8010906:	b2db      	uxtb	r3, r3
 8010908:	461a      	mov	r2, r3
 801090a:	4b13      	ldr	r3, [pc, #76]	; (8010958 <FATFS_LinkDriverEx+0x94>)
 801090c:	4413      	add	r3, r2
 801090e:	79fa      	ldrb	r2, [r7, #7]
 8010910:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010912:	4b11      	ldr	r3, [pc, #68]	; (8010958 <FATFS_LinkDriverEx+0x94>)
 8010914:	7a5b      	ldrb	r3, [r3, #9]
 8010916:	b2db      	uxtb	r3, r3
 8010918:	1c5a      	adds	r2, r3, #1
 801091a:	b2d1      	uxtb	r1, r2
 801091c:	4a0e      	ldr	r2, [pc, #56]	; (8010958 <FATFS_LinkDriverEx+0x94>)
 801091e:	7251      	strb	r1, [r2, #9]
 8010920:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010922:	7dbb      	ldrb	r3, [r7, #22]
 8010924:	3330      	adds	r3, #48	; 0x30
 8010926:	b2da      	uxtb	r2, r3
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	3301      	adds	r3, #1
 8010930:	223a      	movs	r2, #58	; 0x3a
 8010932:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	3302      	adds	r3, #2
 8010938:	222f      	movs	r2, #47	; 0x2f
 801093a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	3303      	adds	r3, #3
 8010940:	2200      	movs	r2, #0
 8010942:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010944:	2300      	movs	r3, #0
 8010946:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010948:	7dfb      	ldrb	r3, [r7, #23]
}
 801094a:	4618      	mov	r0, r3
 801094c:	371c      	adds	r7, #28
 801094e:	46bd      	mov	sp, r7
 8010950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010954:	4770      	bx	lr
 8010956:	bf00      	nop
 8010958:	20000d94 	.word	0x20000d94

0801095c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b082      	sub	sp, #8
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
 8010964:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010966:	2200      	movs	r2, #0
 8010968:	6839      	ldr	r1, [r7, #0]
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f7ff ffaa 	bl	80108c4 <FATFS_LinkDriverEx>
 8010970:	4603      	mov	r3, r0
}
 8010972:	4618      	mov	r0, r3
 8010974:	3708      	adds	r7, #8
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}
	...

0801097c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010980:	2200      	movs	r2, #0
 8010982:	4912      	ldr	r1, [pc, #72]	; (80109cc <MX_USB_DEVICE_Init+0x50>)
 8010984:	4812      	ldr	r0, [pc, #72]	; (80109d0 <MX_USB_DEVICE_Init+0x54>)
 8010986:	f7fe fe33 	bl	800f5f0 <USBD_Init>
 801098a:	4603      	mov	r3, r0
 801098c:	2b00      	cmp	r3, #0
 801098e:	d001      	beq.n	8010994 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010990:	f7f1 fc80 	bl	8002294 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010994:	490f      	ldr	r1, [pc, #60]	; (80109d4 <MX_USB_DEVICE_Init+0x58>)
 8010996:	480e      	ldr	r0, [pc, #56]	; (80109d0 <MX_USB_DEVICE_Init+0x54>)
 8010998:	f7fe fe5a 	bl	800f650 <USBD_RegisterClass>
 801099c:	4603      	mov	r3, r0
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d001      	beq.n	80109a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80109a2:	f7f1 fc77 	bl	8002294 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80109a6:	490c      	ldr	r1, [pc, #48]	; (80109d8 <MX_USB_DEVICE_Init+0x5c>)
 80109a8:	4809      	ldr	r0, [pc, #36]	; (80109d0 <MX_USB_DEVICE_Init+0x54>)
 80109aa:	f7fe fd7b 	bl	800f4a4 <USBD_CDC_RegisterInterface>
 80109ae:	4603      	mov	r3, r0
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d001      	beq.n	80109b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80109b4:	f7f1 fc6e 	bl	8002294 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80109b8:	4805      	ldr	r0, [pc, #20]	; (80109d0 <MX_USB_DEVICE_Init+0x54>)
 80109ba:	f7fe fe70 	bl	800f69e <USBD_Start>
 80109be:	4603      	mov	r3, r0
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d001      	beq.n	80109c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80109c4:	f7f1 fc66 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80109c8:	bf00      	nop
 80109ca:	bd80      	pop	{r7, pc}
 80109cc:	2000013c 	.word	0x2000013c
 80109d0:	20000da0 	.word	0x20000da0
 80109d4:	20000024 	.word	0x20000024
 80109d8:	20000128 	.word	0x20000128

080109dc <CDC_Init_FS>:
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void)
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80109e0:	2200      	movs	r2, #0
 80109e2:	4905      	ldr	r1, [pc, #20]	; (80109f8 <CDC_Init_FS+0x1c>)
 80109e4:	4805      	ldr	r0, [pc, #20]	; (80109fc <CDC_Init_FS+0x20>)
 80109e6:	f7fe fd72 	bl	800f4ce <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80109ea:	4905      	ldr	r1, [pc, #20]	; (8010a00 <CDC_Init_FS+0x24>)
 80109ec:	4803      	ldr	r0, [pc, #12]	; (80109fc <CDC_Init_FS+0x20>)
 80109ee:	f7fe fd8c 	bl	800f50a <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 80109f2:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 80109f4:	4618      	mov	r0, r3
 80109f6:	bd80      	pop	{r7, pc}
 80109f8:	20001874 	.word	0x20001874
 80109fc:	20000da0 	.word	0x20000da0
 8010a00:	20001074 	.word	0x20001074

08010a04 <CDC_DeInit_FS>:
/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void)
{
 8010a04:	b480      	push	{r7}
 8010a06:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 8010a08:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a12:	4770      	bx	lr

08010a14 <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010a14:	b480      	push	{r7}
 8010a16:	b083      	sub	sp, #12
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	6039      	str	r1, [r7, #0]
 8010a1e:	71fb      	strb	r3, [r7, #7]
 8010a20:	4613      	mov	r3, r2
 8010a22:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch(cmd)
 8010a24:	79fb      	ldrb	r3, [r7, #7]
 8010a26:	2b23      	cmp	r3, #35	; 0x23
 8010a28:	d84a      	bhi.n	8010ac0 <CDC_Control_FS+0xac>
 8010a2a:	a201      	add	r2, pc, #4	; (adr r2, 8010a30 <CDC_Control_FS+0x1c>)
 8010a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a30:	08010ac1 	.word	0x08010ac1
 8010a34:	08010ac1 	.word	0x08010ac1
 8010a38:	08010ac1 	.word	0x08010ac1
 8010a3c:	08010ac1 	.word	0x08010ac1
 8010a40:	08010ac1 	.word	0x08010ac1
 8010a44:	08010ac1 	.word	0x08010ac1
 8010a48:	08010ac1 	.word	0x08010ac1
 8010a4c:	08010ac1 	.word	0x08010ac1
 8010a50:	08010ac1 	.word	0x08010ac1
 8010a54:	08010ac1 	.word	0x08010ac1
 8010a58:	08010ac1 	.word	0x08010ac1
 8010a5c:	08010ac1 	.word	0x08010ac1
 8010a60:	08010ac1 	.word	0x08010ac1
 8010a64:	08010ac1 	.word	0x08010ac1
 8010a68:	08010ac1 	.word	0x08010ac1
 8010a6c:	08010ac1 	.word	0x08010ac1
 8010a70:	08010ac1 	.word	0x08010ac1
 8010a74:	08010ac1 	.word	0x08010ac1
 8010a78:	08010ac1 	.word	0x08010ac1
 8010a7c:	08010ac1 	.word	0x08010ac1
 8010a80:	08010ac1 	.word	0x08010ac1
 8010a84:	08010ac1 	.word	0x08010ac1
 8010a88:	08010ac1 	.word	0x08010ac1
 8010a8c:	08010ac1 	.word	0x08010ac1
 8010a90:	08010ac1 	.word	0x08010ac1
 8010a94:	08010ac1 	.word	0x08010ac1
 8010a98:	08010ac1 	.word	0x08010ac1
 8010a9c:	08010ac1 	.word	0x08010ac1
 8010aa0:	08010ac1 	.word	0x08010ac1
 8010aa4:	08010ac1 	.word	0x08010ac1
 8010aa8:	08010ac1 	.word	0x08010ac1
 8010aac:	08010ac1 	.word	0x08010ac1
 8010ab0:	08010ac1 	.word	0x08010ac1
 8010ab4:	08010ac1 	.word	0x08010ac1
 8010ab8:	08010ac1 	.word	0x08010ac1
 8010abc:	08010ac1 	.word	0x08010ac1
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8010ac0:	bf00      	nop
	}

	return (USBD_OK);
 8010ac2:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	370c      	adds	r7, #12
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ace:	4770      	bx	lr

08010ad0 <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b084      	sub	sp, #16
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
 8010ad8:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010ada:	6879      	ldr	r1, [r7, #4]
 8010adc:	480b      	ldr	r0, [pc, #44]	; (8010b0c <CDC_Receive_FS+0x3c>)
 8010ade:	f7fe fd14 	bl	800f50a <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010ae2:	480a      	ldr	r0, [pc, #40]	; (8010b0c <CDC_Receive_FS+0x3c>)
 8010ae4:	f7fe fd5a 	bl	800f59c <USBD_CDC_ReceivePacket>

	uint8_t len = (uint8_t)*Len;
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	73fb      	strb	r3, [r7, #15]
	memcpy(usb_Rx_buffer, Buf, len);  // copy the data to the buffer
 8010aee:	7bfb      	ldrb	r3, [r7, #15]
 8010af0:	461a      	mov	r2, r3
 8010af2:	6879      	ldr	r1, [r7, #4]
 8010af4:	4806      	ldr	r0, [pc, #24]	; (8010b10 <CDC_Receive_FS+0x40>)
 8010af6:	f000 fd67 	bl	80115c8 <memcpy>

	usb_Rx_ready = 1;
 8010afa:	4b06      	ldr	r3, [pc, #24]	; (8010b14 <CDC_Receive_FS+0x44>)
 8010afc:	2201      	movs	r2, #1
 8010afe:	701a      	strb	r2, [r3, #0]

	return (USBD_OK);
 8010b00:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 8010b02:	4618      	mov	r0, r3
 8010b04:	3710      	adds	r7, #16
 8010b06:	46bd      	mov	sp, r7
 8010b08:	bd80      	pop	{r7, pc}
 8010b0a:	bf00      	nop
 8010b0c:	20000da0 	.word	0x20000da0
 8010b10:	20001070 	.word	0x20001070
 8010b14:	20001072 	.word	0x20001072

08010b18 <CDC_Transmit_FS>:
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b084      	sub	sp, #16
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
 8010b20:	460b      	mov	r3, r1
 8010b22:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 8010b24:	2300      	movs	r3, #0
 8010b26:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010b28:	4b0d      	ldr	r3, [pc, #52]	; (8010b60 <CDC_Transmit_FS+0x48>)
 8010b2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b2e:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0){
 8010b30:	68bb      	ldr	r3, [r7, #8]
 8010b32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d001      	beq.n	8010b3e <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	e00b      	b.n	8010b56 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010b3e:	887b      	ldrh	r3, [r7, #2]
 8010b40:	461a      	mov	r2, r3
 8010b42:	6879      	ldr	r1, [r7, #4]
 8010b44:	4806      	ldr	r0, [pc, #24]	; (8010b60 <CDC_Transmit_FS+0x48>)
 8010b46:	f7fe fcc2 	bl	800f4ce <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010b4a:	4805      	ldr	r0, [pc, #20]	; (8010b60 <CDC_Transmit_FS+0x48>)
 8010b4c:	f7fe fcf6 	bl	800f53c <USBD_CDC_TransmitPacket>
 8010b50:	4603      	mov	r3, r0
 8010b52:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 8010b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	3710      	adds	r7, #16
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}
 8010b5e:	bf00      	nop
 8010b60:	20000da0 	.word	0x20000da0

08010b64 <CDC_TransmitCplt_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010b64:	b480      	push	{r7}
 8010b66:	b087      	sub	sp, #28
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	60f8      	str	r0, [r7, #12]
 8010b6c:	60b9      	str	r1, [r7, #8]
 8010b6e:	4613      	mov	r3, r2
 8010b70:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 8010b72:	2300      	movs	r3, #0
 8010b74:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 13 */
	return result;
 8010b76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	371c      	adds	r7, #28
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b84:	4770      	bx	lr
	...

08010b88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b88:	b480      	push	{r7}
 8010b8a:	b083      	sub	sp, #12
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	4603      	mov	r3, r0
 8010b90:	6039      	str	r1, [r7, #0]
 8010b92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	2212      	movs	r2, #18
 8010b98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010b9a:	4b03      	ldr	r3, [pc, #12]	; (8010ba8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	370c      	adds	r7, #12
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba6:	4770      	bx	lr
 8010ba8:	20000158 	.word	0x20000158

08010bac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010bac:	b480      	push	{r7}
 8010bae:	b083      	sub	sp, #12
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	6039      	str	r1, [r7, #0]
 8010bb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	2204      	movs	r2, #4
 8010bbc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010bbe:	4b03      	ldr	r3, [pc, #12]	; (8010bcc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	370c      	adds	r7, #12
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bca:	4770      	bx	lr
 8010bcc:	2000016c 	.word	0x2000016c

08010bd0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b082      	sub	sp, #8
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	6039      	str	r1, [r7, #0]
 8010bda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010bdc:	79fb      	ldrb	r3, [r7, #7]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d105      	bne.n	8010bee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010be2:	683a      	ldr	r2, [r7, #0]
 8010be4:	4907      	ldr	r1, [pc, #28]	; (8010c04 <USBD_FS_ProductStrDescriptor+0x34>)
 8010be6:	4808      	ldr	r0, [pc, #32]	; (8010c08 <USBD_FS_ProductStrDescriptor+0x38>)
 8010be8:	f7ff fd8b 	bl	8010702 <USBD_GetString>
 8010bec:	e004      	b.n	8010bf8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010bee:	683a      	ldr	r2, [r7, #0]
 8010bf0:	4904      	ldr	r1, [pc, #16]	; (8010c04 <USBD_FS_ProductStrDescriptor+0x34>)
 8010bf2:	4805      	ldr	r0, [pc, #20]	; (8010c08 <USBD_FS_ProductStrDescriptor+0x38>)
 8010bf4:	f7ff fd85 	bl	8010702 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010bf8:	4b02      	ldr	r3, [pc, #8]	; (8010c04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	3708      	adds	r7, #8
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	bd80      	pop	{r7, pc}
 8010c02:	bf00      	nop
 8010c04:	20002074 	.word	0x20002074
 8010c08:	08014190 	.word	0x08014190

08010c0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b082      	sub	sp, #8
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	4603      	mov	r3, r0
 8010c14:	6039      	str	r1, [r7, #0]
 8010c16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010c18:	683a      	ldr	r2, [r7, #0]
 8010c1a:	4904      	ldr	r1, [pc, #16]	; (8010c2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010c1c:	4804      	ldr	r0, [pc, #16]	; (8010c30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010c1e:	f7ff fd70 	bl	8010702 <USBD_GetString>
  return USBD_StrDesc;
 8010c22:	4b02      	ldr	r3, [pc, #8]	; (8010c2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010c24:	4618      	mov	r0, r3
 8010c26:	3708      	adds	r7, #8
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bd80      	pop	{r7, pc}
 8010c2c:	20002074 	.word	0x20002074
 8010c30:	080141a8 	.word	0x080141a8

08010c34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b082      	sub	sp, #8
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	6039      	str	r1, [r7, #0]
 8010c3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010c40:	683b      	ldr	r3, [r7, #0]
 8010c42:	221a      	movs	r2, #26
 8010c44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010c46:	f000 f843 	bl	8010cd0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010c4a:	4b02      	ldr	r3, [pc, #8]	; (8010c54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	3708      	adds	r7, #8
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}
 8010c54:	20000170 	.word	0x20000170

08010c58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b082      	sub	sp, #8
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	4603      	mov	r3, r0
 8010c60:	6039      	str	r1, [r7, #0]
 8010c62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010c64:	79fb      	ldrb	r3, [r7, #7]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d105      	bne.n	8010c76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010c6a:	683a      	ldr	r2, [r7, #0]
 8010c6c:	4907      	ldr	r1, [pc, #28]	; (8010c8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8010c6e:	4808      	ldr	r0, [pc, #32]	; (8010c90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010c70:	f7ff fd47 	bl	8010702 <USBD_GetString>
 8010c74:	e004      	b.n	8010c80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010c76:	683a      	ldr	r2, [r7, #0]
 8010c78:	4904      	ldr	r1, [pc, #16]	; (8010c8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8010c7a:	4805      	ldr	r0, [pc, #20]	; (8010c90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010c7c:	f7ff fd41 	bl	8010702 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010c80:	4b02      	ldr	r3, [pc, #8]	; (8010c8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010c82:	4618      	mov	r0, r3
 8010c84:	3708      	adds	r7, #8
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}
 8010c8a:	bf00      	nop
 8010c8c:	20002074 	.word	0x20002074
 8010c90:	080141bc 	.word	0x080141bc

08010c94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b082      	sub	sp, #8
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	6039      	str	r1, [r7, #0]
 8010c9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010ca0:	79fb      	ldrb	r3, [r7, #7]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d105      	bne.n	8010cb2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010ca6:	683a      	ldr	r2, [r7, #0]
 8010ca8:	4907      	ldr	r1, [pc, #28]	; (8010cc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010caa:	4808      	ldr	r0, [pc, #32]	; (8010ccc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010cac:	f7ff fd29 	bl	8010702 <USBD_GetString>
 8010cb0:	e004      	b.n	8010cbc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010cb2:	683a      	ldr	r2, [r7, #0]
 8010cb4:	4904      	ldr	r1, [pc, #16]	; (8010cc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010cb6:	4805      	ldr	r0, [pc, #20]	; (8010ccc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010cb8:	f7ff fd23 	bl	8010702 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010cbc:	4b02      	ldr	r3, [pc, #8]	; (8010cc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	3708      	adds	r7, #8
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	bd80      	pop	{r7, pc}
 8010cc6:	bf00      	nop
 8010cc8:	20002074 	.word	0x20002074
 8010ccc:	080141c8 	.word	0x080141c8

08010cd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b084      	sub	sp, #16
 8010cd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010cd6:	4b0f      	ldr	r3, [pc, #60]	; (8010d14 <Get_SerialNum+0x44>)
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010cdc:	4b0e      	ldr	r3, [pc, #56]	; (8010d18 <Get_SerialNum+0x48>)
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010ce2:	4b0e      	ldr	r3, [pc, #56]	; (8010d1c <Get_SerialNum+0x4c>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010ce8:	68fa      	ldr	r2, [r7, #12]
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	4413      	add	r3, r2
 8010cee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d009      	beq.n	8010d0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010cf6:	2208      	movs	r2, #8
 8010cf8:	4909      	ldr	r1, [pc, #36]	; (8010d20 <Get_SerialNum+0x50>)
 8010cfa:	68f8      	ldr	r0, [r7, #12]
 8010cfc:	f000 f814 	bl	8010d28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010d00:	2204      	movs	r2, #4
 8010d02:	4908      	ldr	r1, [pc, #32]	; (8010d24 <Get_SerialNum+0x54>)
 8010d04:	68b8      	ldr	r0, [r7, #8]
 8010d06:	f000 f80f 	bl	8010d28 <IntToUnicode>
  }
}
 8010d0a:	bf00      	nop
 8010d0c:	3710      	adds	r7, #16
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	bd80      	pop	{r7, pc}
 8010d12:	bf00      	nop
 8010d14:	1fff7590 	.word	0x1fff7590
 8010d18:	1fff7594 	.word	0x1fff7594
 8010d1c:	1fff7598 	.word	0x1fff7598
 8010d20:	20000172 	.word	0x20000172
 8010d24:	20000182 	.word	0x20000182

08010d28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010d28:	b480      	push	{r7}
 8010d2a:	b087      	sub	sp, #28
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	60f8      	str	r0, [r7, #12]
 8010d30:	60b9      	str	r1, [r7, #8]
 8010d32:	4613      	mov	r3, r2
 8010d34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010d36:	2300      	movs	r3, #0
 8010d38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	75fb      	strb	r3, [r7, #23]
 8010d3e:	e027      	b.n	8010d90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	0f1b      	lsrs	r3, r3, #28
 8010d44:	2b09      	cmp	r3, #9
 8010d46:	d80b      	bhi.n	8010d60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	0f1b      	lsrs	r3, r3, #28
 8010d4c:	b2da      	uxtb	r2, r3
 8010d4e:	7dfb      	ldrb	r3, [r7, #23]
 8010d50:	005b      	lsls	r3, r3, #1
 8010d52:	4619      	mov	r1, r3
 8010d54:	68bb      	ldr	r3, [r7, #8]
 8010d56:	440b      	add	r3, r1
 8010d58:	3230      	adds	r2, #48	; 0x30
 8010d5a:	b2d2      	uxtb	r2, r2
 8010d5c:	701a      	strb	r2, [r3, #0]
 8010d5e:	e00a      	b.n	8010d76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	0f1b      	lsrs	r3, r3, #28
 8010d64:	b2da      	uxtb	r2, r3
 8010d66:	7dfb      	ldrb	r3, [r7, #23]
 8010d68:	005b      	lsls	r3, r3, #1
 8010d6a:	4619      	mov	r1, r3
 8010d6c:	68bb      	ldr	r3, [r7, #8]
 8010d6e:	440b      	add	r3, r1
 8010d70:	3237      	adds	r2, #55	; 0x37
 8010d72:	b2d2      	uxtb	r2, r2
 8010d74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	011b      	lsls	r3, r3, #4
 8010d7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010d7c:	7dfb      	ldrb	r3, [r7, #23]
 8010d7e:	005b      	lsls	r3, r3, #1
 8010d80:	3301      	adds	r3, #1
 8010d82:	68ba      	ldr	r2, [r7, #8]
 8010d84:	4413      	add	r3, r2
 8010d86:	2200      	movs	r2, #0
 8010d88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010d8a:	7dfb      	ldrb	r3, [r7, #23]
 8010d8c:	3301      	adds	r3, #1
 8010d8e:	75fb      	strb	r3, [r7, #23]
 8010d90:	7dfa      	ldrb	r2, [r7, #23]
 8010d92:	79fb      	ldrb	r3, [r7, #7]
 8010d94:	429a      	cmp	r2, r3
 8010d96:	d3d3      	bcc.n	8010d40 <IntToUnicode+0x18>
  }
}
 8010d98:	bf00      	nop
 8010d9a:	bf00      	nop
 8010d9c:	371c      	adds	r7, #28
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da4:	4770      	bx	lr
	...

08010da8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b0b0      	sub	sp, #192	; 0xc0
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010db0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010db4:	2200      	movs	r2, #0
 8010db6:	601a      	str	r2, [r3, #0]
 8010db8:	605a      	str	r2, [r3, #4]
 8010dba:	609a      	str	r2, [r3, #8]
 8010dbc:	60da      	str	r2, [r3, #12]
 8010dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010dc0:	f107 0318 	add.w	r3, r7, #24
 8010dc4:	2294      	movs	r2, #148	; 0x94
 8010dc6:	2100      	movs	r1, #0
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f000 fc0b 	bl	80115e4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010dd6:	d163      	bne.n	8010ea0 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010dd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010ddc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8010dde:	2300      	movs	r3, #0
 8010de0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010de4:	f107 0318 	add.w	r3, r7, #24
 8010de8:	4618      	mov	r0, r3
 8010dea:	f7f4 ff59 	bl	8005ca0 <HAL_RCCEx_PeriphCLKConfig>
 8010dee:	4603      	mov	r3, r0
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d001      	beq.n	8010df8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8010df4:	f7f1 fa4e 	bl	8002294 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010df8:	4b2b      	ldr	r3, [pc, #172]	; (8010ea8 <HAL_PCD_MspInit+0x100>)
 8010dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010dfc:	4a2a      	ldr	r2, [pc, #168]	; (8010ea8 <HAL_PCD_MspInit+0x100>)
 8010dfe:	f043 0301 	orr.w	r3, r3, #1
 8010e02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010e04:	4b28      	ldr	r3, [pc, #160]	; (8010ea8 <HAL_PCD_MspInit+0x100>)
 8010e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e08:	f003 0301 	and.w	r3, r3, #1
 8010e0c:	617b      	str	r3, [r7, #20]
 8010e0e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010e10:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010e14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e18:	2302      	movs	r3, #2
 8010e1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e1e:	2300      	movs	r3, #0
 8010e20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e24:	2303      	movs	r3, #3
 8010e26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010e2a:	230a      	movs	r3, #10
 8010e2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010e30:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010e34:	4619      	mov	r1, r3
 8010e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010e3a:	f7f2 fa7d 	bl	8003338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010e3e:	4b1a      	ldr	r3, [pc, #104]	; (8010ea8 <HAL_PCD_MspInit+0x100>)
 8010e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e42:	4a19      	ldr	r2, [pc, #100]	; (8010ea8 <HAL_PCD_MspInit+0x100>)
 8010e44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010e4a:	4b17      	ldr	r3, [pc, #92]	; (8010ea8 <HAL_PCD_MspInit+0x100>)
 8010e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010e52:	613b      	str	r3, [r7, #16]
 8010e54:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010e56:	4b14      	ldr	r3, [pc, #80]	; (8010ea8 <HAL_PCD_MspInit+0x100>)
 8010e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d114      	bne.n	8010e8c <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010e62:	4b11      	ldr	r3, [pc, #68]	; (8010ea8 <HAL_PCD_MspInit+0x100>)
 8010e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e66:	4a10      	ldr	r2, [pc, #64]	; (8010ea8 <HAL_PCD_MspInit+0x100>)
 8010e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010e6c:	6593      	str	r3, [r2, #88]	; 0x58
 8010e6e:	4b0e      	ldr	r3, [pc, #56]	; (8010ea8 <HAL_PCD_MspInit+0x100>)
 8010e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010e76:	60fb      	str	r3, [r7, #12]
 8010e78:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8010e7a:	f7f3 fffd 	bl	8004e78 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8010e7e:	4b0a      	ldr	r3, [pc, #40]	; (8010ea8 <HAL_PCD_MspInit+0x100>)
 8010e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e82:	4a09      	ldr	r2, [pc, #36]	; (8010ea8 <HAL_PCD_MspInit+0x100>)
 8010e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010e88:	6593      	str	r3, [r2, #88]	; 0x58
 8010e8a:	e001      	b.n	8010e90 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8010e8c:	f7f3 fff4 	bl	8004e78 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010e90:	2200      	movs	r2, #0
 8010e92:	2100      	movs	r1, #0
 8010e94:	2043      	movs	r0, #67	; 0x43
 8010e96:	f7f1 feea 	bl	8002c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010e9a:	2043      	movs	r0, #67	; 0x43
 8010e9c:	f7f1 ff03 	bl	8002ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010ea0:	bf00      	nop
 8010ea2:	37c0      	adds	r7, #192	; 0xc0
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	bd80      	pop	{r7, pc}
 8010ea8:	40021000 	.word	0x40021000

08010eac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b082      	sub	sp, #8
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010ec0:	4619      	mov	r1, r3
 8010ec2:	4610      	mov	r0, r2
 8010ec4:	f7fe fc36 	bl	800f734 <USBD_LL_SetupStage>
}
 8010ec8:	bf00      	nop
 8010eca:	3708      	adds	r7, #8
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	bd80      	pop	{r7, pc}

08010ed0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b082      	sub	sp, #8
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
 8010ed8:	460b      	mov	r3, r1
 8010eda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010ee2:	78fa      	ldrb	r2, [r7, #3]
 8010ee4:	6879      	ldr	r1, [r7, #4]
 8010ee6:	4613      	mov	r3, r2
 8010ee8:	00db      	lsls	r3, r3, #3
 8010eea:	4413      	add	r3, r2
 8010eec:	009b      	lsls	r3, r3, #2
 8010eee:	440b      	add	r3, r1
 8010ef0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010ef4:	681a      	ldr	r2, [r3, #0]
 8010ef6:	78fb      	ldrb	r3, [r7, #3]
 8010ef8:	4619      	mov	r1, r3
 8010efa:	f7fe fc70 	bl	800f7de <USBD_LL_DataOutStage>
}
 8010efe:	bf00      	nop
 8010f00:	3708      	adds	r7, #8
 8010f02:	46bd      	mov	sp, r7
 8010f04:	bd80      	pop	{r7, pc}

08010f06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f06:	b580      	push	{r7, lr}
 8010f08:	b082      	sub	sp, #8
 8010f0a:	af00      	add	r7, sp, #0
 8010f0c:	6078      	str	r0, [r7, #4]
 8010f0e:	460b      	mov	r3, r1
 8010f10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010f18:	78fa      	ldrb	r2, [r7, #3]
 8010f1a:	6879      	ldr	r1, [r7, #4]
 8010f1c:	4613      	mov	r3, r2
 8010f1e:	00db      	lsls	r3, r3, #3
 8010f20:	4413      	add	r3, r2
 8010f22:	009b      	lsls	r3, r3, #2
 8010f24:	440b      	add	r3, r1
 8010f26:	334c      	adds	r3, #76	; 0x4c
 8010f28:	681a      	ldr	r2, [r3, #0]
 8010f2a:	78fb      	ldrb	r3, [r7, #3]
 8010f2c:	4619      	mov	r1, r3
 8010f2e:	f7fe fcb9 	bl	800f8a4 <USBD_LL_DataInStage>
}
 8010f32:	bf00      	nop
 8010f34:	3708      	adds	r7, #8
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}

08010f3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f3a:	b580      	push	{r7, lr}
 8010f3c:	b082      	sub	sp, #8
 8010f3e:	af00      	add	r7, sp, #0
 8010f40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f7fe fdcd 	bl	800fae8 <USBD_LL_SOF>
}
 8010f4e:	bf00      	nop
 8010f50:	3708      	adds	r7, #8
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}

08010f56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f56:	b580      	push	{r7, lr}
 8010f58:	b084      	sub	sp, #16
 8010f5a:	af00      	add	r7, sp, #0
 8010f5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010f5e:	2301      	movs	r3, #1
 8010f60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	68db      	ldr	r3, [r3, #12]
 8010f66:	2b02      	cmp	r3, #2
 8010f68:	d001      	beq.n	8010f6e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010f6a:	f7f1 f993 	bl	8002294 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010f74:	7bfa      	ldrb	r2, [r7, #15]
 8010f76:	4611      	mov	r1, r2
 8010f78:	4618      	mov	r0, r3
 8010f7a:	f7fe fd77 	bl	800fa6c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010f84:	4618      	mov	r0, r3
 8010f86:	f7fe fd23 	bl	800f9d0 <USBD_LL_Reset>
}
 8010f8a:	bf00      	nop
 8010f8c:	3710      	adds	r7, #16
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}
	...

08010f94 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b082      	sub	sp, #8
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	687a      	ldr	r2, [r7, #4]
 8010fa8:	6812      	ldr	r2, [r2, #0]
 8010faa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010fae:	f043 0301 	orr.w	r3, r3, #1
 8010fb2:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010fba:	4618      	mov	r0, r3
 8010fbc:	f7fe fd66 	bl	800fa8c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	6a1b      	ldr	r3, [r3, #32]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d005      	beq.n	8010fd4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010fc8:	4b04      	ldr	r3, [pc, #16]	; (8010fdc <HAL_PCD_SuspendCallback+0x48>)
 8010fca:	691b      	ldr	r3, [r3, #16]
 8010fcc:	4a03      	ldr	r2, [pc, #12]	; (8010fdc <HAL_PCD_SuspendCallback+0x48>)
 8010fce:	f043 0306 	orr.w	r3, r3, #6
 8010fd2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010fd4:	bf00      	nop
 8010fd6:	3708      	adds	r7, #8
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	bd80      	pop	{r7, pc}
 8010fdc:	e000ed00 	.word	0xe000ed00

08010fe0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b082      	sub	sp, #8
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	687a      	ldr	r2, [r7, #4]
 8010ff4:	6812      	ldr	r2, [r2, #0]
 8010ff6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010ffa:	f023 0301 	bic.w	r3, r3, #1
 8010ffe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	6a1b      	ldr	r3, [r3, #32]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d007      	beq.n	8011018 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011008:	4b08      	ldr	r3, [pc, #32]	; (801102c <HAL_PCD_ResumeCallback+0x4c>)
 801100a:	691b      	ldr	r3, [r3, #16]
 801100c:	4a07      	ldr	r2, [pc, #28]	; (801102c <HAL_PCD_ResumeCallback+0x4c>)
 801100e:	f023 0306 	bic.w	r3, r3, #6
 8011012:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8011014:	f000 faa6 	bl	8011564 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801101e:	4618      	mov	r0, r3
 8011020:	f7fe fd4a 	bl	800fab8 <USBD_LL_Resume>
}
 8011024:	bf00      	nop
 8011026:	3708      	adds	r7, #8
 8011028:	46bd      	mov	sp, r7
 801102a:	bd80      	pop	{r7, pc}
 801102c:	e000ed00 	.word	0xe000ed00

08011030 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b082      	sub	sp, #8
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
 8011038:	460b      	mov	r3, r1
 801103a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011042:	78fa      	ldrb	r2, [r7, #3]
 8011044:	4611      	mov	r1, r2
 8011046:	4618      	mov	r0, r3
 8011048:	f7fe fd96 	bl	800fb78 <USBD_LL_IsoOUTIncomplete>
}
 801104c:	bf00      	nop
 801104e:	3708      	adds	r7, #8
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}

08011054 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b082      	sub	sp, #8
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
 801105c:	460b      	mov	r3, r1
 801105e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011066:	78fa      	ldrb	r2, [r7, #3]
 8011068:	4611      	mov	r1, r2
 801106a:	4618      	mov	r0, r3
 801106c:	f7fe fd5e 	bl	800fb2c <USBD_LL_IsoINIncomplete>
}
 8011070:	bf00      	nop
 8011072:	3708      	adds	r7, #8
 8011074:	46bd      	mov	sp, r7
 8011076:	bd80      	pop	{r7, pc}

08011078 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b082      	sub	sp, #8
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011086:	4618      	mov	r0, r3
 8011088:	f7fe fd9c 	bl	800fbc4 <USBD_LL_DevConnected>
}
 801108c:	bf00      	nop
 801108e:	3708      	adds	r7, #8
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}

08011094 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b082      	sub	sp, #8
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80110a2:	4618      	mov	r0, r3
 80110a4:	f7fe fd99 	bl	800fbda <USBD_LL_DevDisconnected>
}
 80110a8:	bf00      	nop
 80110aa:	3708      	adds	r7, #8
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}

080110b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b082      	sub	sp, #8
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	781b      	ldrb	r3, [r3, #0]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d139      	bne.n	8011134 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80110c0:	4a1f      	ldr	r2, [pc, #124]	; (8011140 <USBD_LL_Init+0x90>)
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	4a1d      	ldr	r2, [pc, #116]	; (8011140 <USBD_LL_Init+0x90>)
 80110cc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80110d0:	4b1b      	ldr	r3, [pc, #108]	; (8011140 <USBD_LL_Init+0x90>)
 80110d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80110d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80110d8:	4b19      	ldr	r3, [pc, #100]	; (8011140 <USBD_LL_Init+0x90>)
 80110da:	2206      	movs	r2, #6
 80110dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80110de:	4b18      	ldr	r3, [pc, #96]	; (8011140 <USBD_LL_Init+0x90>)
 80110e0:	2202      	movs	r2, #2
 80110e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80110e4:	4b16      	ldr	r3, [pc, #88]	; (8011140 <USBD_LL_Init+0x90>)
 80110e6:	2200      	movs	r2, #0
 80110e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80110ea:	4b15      	ldr	r3, [pc, #84]	; (8011140 <USBD_LL_Init+0x90>)
 80110ec:	2200      	movs	r2, #0
 80110ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80110f0:	4b13      	ldr	r3, [pc, #76]	; (8011140 <USBD_LL_Init+0x90>)
 80110f2:	2200      	movs	r2, #0
 80110f4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80110f6:	4b12      	ldr	r3, [pc, #72]	; (8011140 <USBD_LL_Init+0x90>)
 80110f8:	2200      	movs	r2, #0
 80110fa:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80110fc:	4b10      	ldr	r3, [pc, #64]	; (8011140 <USBD_LL_Init+0x90>)
 80110fe:	2200      	movs	r2, #0
 8011100:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011102:	4b0f      	ldr	r3, [pc, #60]	; (8011140 <USBD_LL_Init+0x90>)
 8011104:	2200      	movs	r2, #0
 8011106:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011108:	480d      	ldr	r0, [pc, #52]	; (8011140 <USBD_LL_Init+0x90>)
 801110a:	f7f2 fc25 	bl	8003958 <HAL_PCD_Init>
 801110e:	4603      	mov	r3, r0
 8011110:	2b00      	cmp	r3, #0
 8011112:	d001      	beq.n	8011118 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8011114:	f7f1 f8be 	bl	8002294 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011118:	2180      	movs	r1, #128	; 0x80
 801111a:	4809      	ldr	r0, [pc, #36]	; (8011140 <USBD_LL_Init+0x90>)
 801111c:	f7f3 fda7 	bl	8004c6e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011120:	2240      	movs	r2, #64	; 0x40
 8011122:	2100      	movs	r1, #0
 8011124:	4806      	ldr	r0, [pc, #24]	; (8011140 <USBD_LL_Init+0x90>)
 8011126:	f7f3 fd5b 	bl	8004be0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801112a:	2280      	movs	r2, #128	; 0x80
 801112c:	2101      	movs	r1, #1
 801112e:	4804      	ldr	r0, [pc, #16]	; (8011140 <USBD_LL_Init+0x90>)
 8011130:	f7f3 fd56 	bl	8004be0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011134:	2300      	movs	r3, #0
}
 8011136:	4618      	mov	r0, r3
 8011138:	3708      	adds	r7, #8
 801113a:	46bd      	mov	sp, r7
 801113c:	bd80      	pop	{r7, pc}
 801113e:	bf00      	nop
 8011140:	20002274 	.word	0x20002274

08011144 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b084      	sub	sp, #16
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801114c:	2300      	movs	r3, #0
 801114e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011150:	2300      	movs	r3, #0
 8011152:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801115a:	4618      	mov	r0, r3
 801115c:	f7f2 fd20 	bl	8003ba0 <HAL_PCD_Start>
 8011160:	4603      	mov	r3, r0
 8011162:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011164:	7bbb      	ldrb	r3, [r7, #14]
 8011166:	2b03      	cmp	r3, #3
 8011168:	d816      	bhi.n	8011198 <USBD_LL_Start+0x54>
 801116a:	a201      	add	r2, pc, #4	; (adr r2, 8011170 <USBD_LL_Start+0x2c>)
 801116c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011170:	08011181 	.word	0x08011181
 8011174:	08011187 	.word	0x08011187
 8011178:	0801118d 	.word	0x0801118d
 801117c:	08011193 	.word	0x08011193
    case HAL_OK :
      usb_status = USBD_OK;
 8011180:	2300      	movs	r3, #0
 8011182:	73fb      	strb	r3, [r7, #15]
    break;
 8011184:	e00b      	b.n	801119e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011186:	2303      	movs	r3, #3
 8011188:	73fb      	strb	r3, [r7, #15]
    break;
 801118a:	e008      	b.n	801119e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801118c:	2301      	movs	r3, #1
 801118e:	73fb      	strb	r3, [r7, #15]
    break;
 8011190:	e005      	b.n	801119e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011192:	2303      	movs	r3, #3
 8011194:	73fb      	strb	r3, [r7, #15]
    break;
 8011196:	e002      	b.n	801119e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8011198:	2303      	movs	r3, #3
 801119a:	73fb      	strb	r3, [r7, #15]
    break;
 801119c:	bf00      	nop
  }
  return usb_status;
 801119e:	7bfb      	ldrb	r3, [r7, #15]
}
 80111a0:	4618      	mov	r0, r3
 80111a2:	3710      	adds	r7, #16
 80111a4:	46bd      	mov	sp, r7
 80111a6:	bd80      	pop	{r7, pc}

080111a8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b084      	sub	sp, #16
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
 80111b0:	4608      	mov	r0, r1
 80111b2:	4611      	mov	r1, r2
 80111b4:	461a      	mov	r2, r3
 80111b6:	4603      	mov	r3, r0
 80111b8:	70fb      	strb	r3, [r7, #3]
 80111ba:	460b      	mov	r3, r1
 80111bc:	70bb      	strb	r3, [r7, #2]
 80111be:	4613      	mov	r3, r2
 80111c0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111c2:	2300      	movs	r3, #0
 80111c4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111c6:	2300      	movs	r3, #0
 80111c8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80111d0:	78bb      	ldrb	r3, [r7, #2]
 80111d2:	883a      	ldrh	r2, [r7, #0]
 80111d4:	78f9      	ldrb	r1, [r7, #3]
 80111d6:	f7f3 f9ca 	bl	800456e <HAL_PCD_EP_Open>
 80111da:	4603      	mov	r3, r0
 80111dc:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80111de:	7bbb      	ldrb	r3, [r7, #14]
 80111e0:	2b03      	cmp	r3, #3
 80111e2:	d817      	bhi.n	8011214 <USBD_LL_OpenEP+0x6c>
 80111e4:	a201      	add	r2, pc, #4	; (adr r2, 80111ec <USBD_LL_OpenEP+0x44>)
 80111e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111ea:	bf00      	nop
 80111ec:	080111fd 	.word	0x080111fd
 80111f0:	08011203 	.word	0x08011203
 80111f4:	08011209 	.word	0x08011209
 80111f8:	0801120f 	.word	0x0801120f
    case HAL_OK :
      usb_status = USBD_OK;
 80111fc:	2300      	movs	r3, #0
 80111fe:	73fb      	strb	r3, [r7, #15]
    break;
 8011200:	e00b      	b.n	801121a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011202:	2303      	movs	r3, #3
 8011204:	73fb      	strb	r3, [r7, #15]
    break;
 8011206:	e008      	b.n	801121a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011208:	2301      	movs	r3, #1
 801120a:	73fb      	strb	r3, [r7, #15]
    break;
 801120c:	e005      	b.n	801121a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801120e:	2303      	movs	r3, #3
 8011210:	73fb      	strb	r3, [r7, #15]
    break;
 8011212:	e002      	b.n	801121a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8011214:	2303      	movs	r3, #3
 8011216:	73fb      	strb	r3, [r7, #15]
    break;
 8011218:	bf00      	nop
  }
  return usb_status;
 801121a:	7bfb      	ldrb	r3, [r7, #15]
}
 801121c:	4618      	mov	r0, r3
 801121e:	3710      	adds	r7, #16
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}

08011224 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b084      	sub	sp, #16
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
 801122c:	460b      	mov	r3, r1
 801122e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011230:	2300      	movs	r3, #0
 8011232:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011234:	2300      	movs	r3, #0
 8011236:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801123e:	78fa      	ldrb	r2, [r7, #3]
 8011240:	4611      	mov	r1, r2
 8011242:	4618      	mov	r0, r3
 8011244:	f7f3 f9fb 	bl	800463e <HAL_PCD_EP_Close>
 8011248:	4603      	mov	r3, r0
 801124a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801124c:	7bbb      	ldrb	r3, [r7, #14]
 801124e:	2b03      	cmp	r3, #3
 8011250:	d816      	bhi.n	8011280 <USBD_LL_CloseEP+0x5c>
 8011252:	a201      	add	r2, pc, #4	; (adr r2, 8011258 <USBD_LL_CloseEP+0x34>)
 8011254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011258:	08011269 	.word	0x08011269
 801125c:	0801126f 	.word	0x0801126f
 8011260:	08011275 	.word	0x08011275
 8011264:	0801127b 	.word	0x0801127b
    case HAL_OK :
      usb_status = USBD_OK;
 8011268:	2300      	movs	r3, #0
 801126a:	73fb      	strb	r3, [r7, #15]
    break;
 801126c:	e00b      	b.n	8011286 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801126e:	2303      	movs	r3, #3
 8011270:	73fb      	strb	r3, [r7, #15]
    break;
 8011272:	e008      	b.n	8011286 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011274:	2301      	movs	r3, #1
 8011276:	73fb      	strb	r3, [r7, #15]
    break;
 8011278:	e005      	b.n	8011286 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801127a:	2303      	movs	r3, #3
 801127c:	73fb      	strb	r3, [r7, #15]
    break;
 801127e:	e002      	b.n	8011286 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8011280:	2303      	movs	r3, #3
 8011282:	73fb      	strb	r3, [r7, #15]
    break;
 8011284:	bf00      	nop
  }
  return usb_status;
 8011286:	7bfb      	ldrb	r3, [r7, #15]
}
 8011288:	4618      	mov	r0, r3
 801128a:	3710      	adds	r7, #16
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}

08011290 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b084      	sub	sp, #16
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
 8011298:	460b      	mov	r3, r1
 801129a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801129c:	2300      	movs	r3, #0
 801129e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112a0:	2300      	movs	r3, #0
 80112a2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80112aa:	78fa      	ldrb	r2, [r7, #3]
 80112ac:	4611      	mov	r1, r2
 80112ae:	4618      	mov	r0, r3
 80112b0:	f7f3 faa2 	bl	80047f8 <HAL_PCD_EP_SetStall>
 80112b4:	4603      	mov	r3, r0
 80112b6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80112b8:	7bbb      	ldrb	r3, [r7, #14]
 80112ba:	2b03      	cmp	r3, #3
 80112bc:	d816      	bhi.n	80112ec <USBD_LL_StallEP+0x5c>
 80112be:	a201      	add	r2, pc, #4	; (adr r2, 80112c4 <USBD_LL_StallEP+0x34>)
 80112c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112c4:	080112d5 	.word	0x080112d5
 80112c8:	080112db 	.word	0x080112db
 80112cc:	080112e1 	.word	0x080112e1
 80112d0:	080112e7 	.word	0x080112e7
    case HAL_OK :
      usb_status = USBD_OK;
 80112d4:	2300      	movs	r3, #0
 80112d6:	73fb      	strb	r3, [r7, #15]
    break;
 80112d8:	e00b      	b.n	80112f2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80112da:	2303      	movs	r3, #3
 80112dc:	73fb      	strb	r3, [r7, #15]
    break;
 80112de:	e008      	b.n	80112f2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80112e0:	2301      	movs	r3, #1
 80112e2:	73fb      	strb	r3, [r7, #15]
    break;
 80112e4:	e005      	b.n	80112f2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80112e6:	2303      	movs	r3, #3
 80112e8:	73fb      	strb	r3, [r7, #15]
    break;
 80112ea:	e002      	b.n	80112f2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80112ec:	2303      	movs	r3, #3
 80112ee:	73fb      	strb	r3, [r7, #15]
    break;
 80112f0:	bf00      	nop
  }
  return usb_status;
 80112f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80112f4:	4618      	mov	r0, r3
 80112f6:	3710      	adds	r7, #16
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}

080112fc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b084      	sub	sp, #16
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
 8011304:	460b      	mov	r3, r1
 8011306:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011308:	2300      	movs	r3, #0
 801130a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801130c:	2300      	movs	r3, #0
 801130e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011316:	78fa      	ldrb	r2, [r7, #3]
 8011318:	4611      	mov	r1, r2
 801131a:	4618      	mov	r0, r3
 801131c:	f7f3 face 	bl	80048bc <HAL_PCD_EP_ClrStall>
 8011320:	4603      	mov	r3, r0
 8011322:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011324:	7bbb      	ldrb	r3, [r7, #14]
 8011326:	2b03      	cmp	r3, #3
 8011328:	d816      	bhi.n	8011358 <USBD_LL_ClearStallEP+0x5c>
 801132a:	a201      	add	r2, pc, #4	; (adr r2, 8011330 <USBD_LL_ClearStallEP+0x34>)
 801132c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011330:	08011341 	.word	0x08011341
 8011334:	08011347 	.word	0x08011347
 8011338:	0801134d 	.word	0x0801134d
 801133c:	08011353 	.word	0x08011353
    case HAL_OK :
      usb_status = USBD_OK;
 8011340:	2300      	movs	r3, #0
 8011342:	73fb      	strb	r3, [r7, #15]
    break;
 8011344:	e00b      	b.n	801135e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011346:	2303      	movs	r3, #3
 8011348:	73fb      	strb	r3, [r7, #15]
    break;
 801134a:	e008      	b.n	801135e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801134c:	2301      	movs	r3, #1
 801134e:	73fb      	strb	r3, [r7, #15]
    break;
 8011350:	e005      	b.n	801135e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011352:	2303      	movs	r3, #3
 8011354:	73fb      	strb	r3, [r7, #15]
    break;
 8011356:	e002      	b.n	801135e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8011358:	2303      	movs	r3, #3
 801135a:	73fb      	strb	r3, [r7, #15]
    break;
 801135c:	bf00      	nop
  }
  return usb_status;
 801135e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011360:	4618      	mov	r0, r3
 8011362:	3710      	adds	r7, #16
 8011364:	46bd      	mov	sp, r7
 8011366:	bd80      	pop	{r7, pc}

08011368 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011368:	b480      	push	{r7}
 801136a:	b085      	sub	sp, #20
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
 8011370:	460b      	mov	r3, r1
 8011372:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801137a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801137c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011380:	2b00      	cmp	r3, #0
 8011382:	da0b      	bge.n	801139c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011384:	78fb      	ldrb	r3, [r7, #3]
 8011386:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801138a:	68f9      	ldr	r1, [r7, #12]
 801138c:	4613      	mov	r3, r2
 801138e:	00db      	lsls	r3, r3, #3
 8011390:	4413      	add	r3, r2
 8011392:	009b      	lsls	r3, r3, #2
 8011394:	440b      	add	r3, r1
 8011396:	333e      	adds	r3, #62	; 0x3e
 8011398:	781b      	ldrb	r3, [r3, #0]
 801139a:	e00b      	b.n	80113b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801139c:	78fb      	ldrb	r3, [r7, #3]
 801139e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80113a2:	68f9      	ldr	r1, [r7, #12]
 80113a4:	4613      	mov	r3, r2
 80113a6:	00db      	lsls	r3, r3, #3
 80113a8:	4413      	add	r3, r2
 80113aa:	009b      	lsls	r3, r3, #2
 80113ac:	440b      	add	r3, r1
 80113ae:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80113b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80113b4:	4618      	mov	r0, r3
 80113b6:	3714      	adds	r7, #20
 80113b8:	46bd      	mov	sp, r7
 80113ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113be:	4770      	bx	lr

080113c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b084      	sub	sp, #16
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
 80113c8:	460b      	mov	r3, r1
 80113ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113cc:	2300      	movs	r3, #0
 80113ce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80113d0:	2300      	movs	r3, #0
 80113d2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80113da:	78fa      	ldrb	r2, [r7, #3]
 80113dc:	4611      	mov	r1, r2
 80113de:	4618      	mov	r0, r3
 80113e0:	f7f3 f8a0 	bl	8004524 <HAL_PCD_SetAddress>
 80113e4:	4603      	mov	r3, r0
 80113e6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80113e8:	7bbb      	ldrb	r3, [r7, #14]
 80113ea:	2b03      	cmp	r3, #3
 80113ec:	d816      	bhi.n	801141c <USBD_LL_SetUSBAddress+0x5c>
 80113ee:	a201      	add	r2, pc, #4	; (adr r2, 80113f4 <USBD_LL_SetUSBAddress+0x34>)
 80113f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113f4:	08011405 	.word	0x08011405
 80113f8:	0801140b 	.word	0x0801140b
 80113fc:	08011411 	.word	0x08011411
 8011400:	08011417 	.word	0x08011417
    case HAL_OK :
      usb_status = USBD_OK;
 8011404:	2300      	movs	r3, #0
 8011406:	73fb      	strb	r3, [r7, #15]
    break;
 8011408:	e00b      	b.n	8011422 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801140a:	2303      	movs	r3, #3
 801140c:	73fb      	strb	r3, [r7, #15]
    break;
 801140e:	e008      	b.n	8011422 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011410:	2301      	movs	r3, #1
 8011412:	73fb      	strb	r3, [r7, #15]
    break;
 8011414:	e005      	b.n	8011422 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011416:	2303      	movs	r3, #3
 8011418:	73fb      	strb	r3, [r7, #15]
    break;
 801141a:	e002      	b.n	8011422 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 801141c:	2303      	movs	r3, #3
 801141e:	73fb      	strb	r3, [r7, #15]
    break;
 8011420:	bf00      	nop
  }
  return usb_status;
 8011422:	7bfb      	ldrb	r3, [r7, #15]
}
 8011424:	4618      	mov	r0, r3
 8011426:	3710      	adds	r7, #16
 8011428:	46bd      	mov	sp, r7
 801142a:	bd80      	pop	{r7, pc}

0801142c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b086      	sub	sp, #24
 8011430:	af00      	add	r7, sp, #0
 8011432:	60f8      	str	r0, [r7, #12]
 8011434:	607a      	str	r2, [r7, #4]
 8011436:	603b      	str	r3, [r7, #0]
 8011438:	460b      	mov	r3, r1
 801143a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801143c:	2300      	movs	r3, #0
 801143e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011440:	2300      	movs	r3, #0
 8011442:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801144a:	7af9      	ldrb	r1, [r7, #11]
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	687a      	ldr	r2, [r7, #4]
 8011450:	f7f3 f995 	bl	800477e <HAL_PCD_EP_Transmit>
 8011454:	4603      	mov	r3, r0
 8011456:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8011458:	7dbb      	ldrb	r3, [r7, #22]
 801145a:	2b03      	cmp	r3, #3
 801145c:	d816      	bhi.n	801148c <USBD_LL_Transmit+0x60>
 801145e:	a201      	add	r2, pc, #4	; (adr r2, 8011464 <USBD_LL_Transmit+0x38>)
 8011460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011464:	08011475 	.word	0x08011475
 8011468:	0801147b 	.word	0x0801147b
 801146c:	08011481 	.word	0x08011481
 8011470:	08011487 	.word	0x08011487
    case HAL_OK :
      usb_status = USBD_OK;
 8011474:	2300      	movs	r3, #0
 8011476:	75fb      	strb	r3, [r7, #23]
    break;
 8011478:	e00b      	b.n	8011492 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801147a:	2303      	movs	r3, #3
 801147c:	75fb      	strb	r3, [r7, #23]
    break;
 801147e:	e008      	b.n	8011492 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011480:	2301      	movs	r3, #1
 8011482:	75fb      	strb	r3, [r7, #23]
    break;
 8011484:	e005      	b.n	8011492 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011486:	2303      	movs	r3, #3
 8011488:	75fb      	strb	r3, [r7, #23]
    break;
 801148a:	e002      	b.n	8011492 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 801148c:	2303      	movs	r3, #3
 801148e:	75fb      	strb	r3, [r7, #23]
    break;
 8011490:	bf00      	nop
  }
  return usb_status;
 8011492:	7dfb      	ldrb	r3, [r7, #23]
}
 8011494:	4618      	mov	r0, r3
 8011496:	3718      	adds	r7, #24
 8011498:	46bd      	mov	sp, r7
 801149a:	bd80      	pop	{r7, pc}

0801149c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801149c:	b580      	push	{r7, lr}
 801149e:	b086      	sub	sp, #24
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	60f8      	str	r0, [r7, #12]
 80114a4:	607a      	str	r2, [r7, #4]
 80114a6:	603b      	str	r3, [r7, #0]
 80114a8:	460b      	mov	r3, r1
 80114aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114ac:	2300      	movs	r3, #0
 80114ae:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114b0:	2300      	movs	r3, #0
 80114b2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80114ba:	7af9      	ldrb	r1, [r7, #11]
 80114bc:	683b      	ldr	r3, [r7, #0]
 80114be:	687a      	ldr	r2, [r7, #4]
 80114c0:	f7f3 f907 	bl	80046d2 <HAL_PCD_EP_Receive>
 80114c4:	4603      	mov	r3, r0
 80114c6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80114c8:	7dbb      	ldrb	r3, [r7, #22]
 80114ca:	2b03      	cmp	r3, #3
 80114cc:	d816      	bhi.n	80114fc <USBD_LL_PrepareReceive+0x60>
 80114ce:	a201      	add	r2, pc, #4	; (adr r2, 80114d4 <USBD_LL_PrepareReceive+0x38>)
 80114d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114d4:	080114e5 	.word	0x080114e5
 80114d8:	080114eb 	.word	0x080114eb
 80114dc:	080114f1 	.word	0x080114f1
 80114e0:	080114f7 	.word	0x080114f7
    case HAL_OK :
      usb_status = USBD_OK;
 80114e4:	2300      	movs	r3, #0
 80114e6:	75fb      	strb	r3, [r7, #23]
    break;
 80114e8:	e00b      	b.n	8011502 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80114ea:	2303      	movs	r3, #3
 80114ec:	75fb      	strb	r3, [r7, #23]
    break;
 80114ee:	e008      	b.n	8011502 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80114f0:	2301      	movs	r3, #1
 80114f2:	75fb      	strb	r3, [r7, #23]
    break;
 80114f4:	e005      	b.n	8011502 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80114f6:	2303      	movs	r3, #3
 80114f8:	75fb      	strb	r3, [r7, #23]
    break;
 80114fa:	e002      	b.n	8011502 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80114fc:	2303      	movs	r3, #3
 80114fe:	75fb      	strb	r3, [r7, #23]
    break;
 8011500:	bf00      	nop
  }
  return usb_status;
 8011502:	7dfb      	ldrb	r3, [r7, #23]
}
 8011504:	4618      	mov	r0, r3
 8011506:	3718      	adds	r7, #24
 8011508:	46bd      	mov	sp, r7
 801150a:	bd80      	pop	{r7, pc}

0801150c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b082      	sub	sp, #8
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
 8011514:	460b      	mov	r3, r1
 8011516:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801151e:	78fa      	ldrb	r2, [r7, #3]
 8011520:	4611      	mov	r1, r2
 8011522:	4618      	mov	r0, r3
 8011524:	f7f3 f913 	bl	800474e <HAL_PCD_EP_GetRxCount>
 8011528:	4603      	mov	r3, r0
}
 801152a:	4618      	mov	r0, r3
 801152c:	3708      	adds	r7, #8
 801152e:	46bd      	mov	sp, r7
 8011530:	bd80      	pop	{r7, pc}
	...

08011534 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011534:	b480      	push	{r7}
 8011536:	b083      	sub	sp, #12
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801153c:	4b03      	ldr	r3, [pc, #12]	; (801154c <USBD_static_malloc+0x18>)
}
 801153e:	4618      	mov	r0, r3
 8011540:	370c      	adds	r7, #12
 8011542:	46bd      	mov	sp, r7
 8011544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011548:	4770      	bx	lr
 801154a:	bf00      	nop
 801154c:	20002780 	.word	0x20002780

08011550 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011550:	b480      	push	{r7}
 8011552:	b083      	sub	sp, #12
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]

}
 8011558:	bf00      	nop
 801155a:	370c      	adds	r7, #12
 801155c:	46bd      	mov	sp, r7
 801155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011562:	4770      	bx	lr

08011564 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011568:	f7f0 fb70 	bl	8001c4c <SystemClock_Config>
}
 801156c:	bf00      	nop
 801156e:	bd80      	pop	{r7, pc}

08011570 <__libc_init_array>:
 8011570:	b570      	push	{r4, r5, r6, lr}
 8011572:	4d0d      	ldr	r5, [pc, #52]	; (80115a8 <__libc_init_array+0x38>)
 8011574:	4c0d      	ldr	r4, [pc, #52]	; (80115ac <__libc_init_array+0x3c>)
 8011576:	1b64      	subs	r4, r4, r5
 8011578:	10a4      	asrs	r4, r4, #2
 801157a:	2600      	movs	r6, #0
 801157c:	42a6      	cmp	r6, r4
 801157e:	d109      	bne.n	8011594 <__libc_init_array+0x24>
 8011580:	4d0b      	ldr	r5, [pc, #44]	; (80115b0 <__libc_init_array+0x40>)
 8011582:	4c0c      	ldr	r4, [pc, #48]	; (80115b4 <__libc_init_array+0x44>)
 8011584:	f002 fda2 	bl	80140cc <_init>
 8011588:	1b64      	subs	r4, r4, r5
 801158a:	10a4      	asrs	r4, r4, #2
 801158c:	2600      	movs	r6, #0
 801158e:	42a6      	cmp	r6, r4
 8011590:	d105      	bne.n	801159e <__libc_init_array+0x2e>
 8011592:	bd70      	pop	{r4, r5, r6, pc}
 8011594:	f855 3b04 	ldr.w	r3, [r5], #4
 8011598:	4798      	blx	r3
 801159a:	3601      	adds	r6, #1
 801159c:	e7ee      	b.n	801157c <__libc_init_array+0xc>
 801159e:	f855 3b04 	ldr.w	r3, [r5], #4
 80115a2:	4798      	blx	r3
 80115a4:	3601      	adds	r6, #1
 80115a6:	e7f2      	b.n	801158e <__libc_init_array+0x1e>
 80115a8:	08014648 	.word	0x08014648
 80115ac:	08014648 	.word	0x08014648
 80115b0:	08014648 	.word	0x08014648
 80115b4:	0801464c 	.word	0x0801464c

080115b8 <malloc>:
 80115b8:	4b02      	ldr	r3, [pc, #8]	; (80115c4 <malloc+0xc>)
 80115ba:	4601      	mov	r1, r0
 80115bc:	6818      	ldr	r0, [r3, #0]
 80115be:	f000 b885 	b.w	80116cc <_malloc_r>
 80115c2:	bf00      	nop
 80115c4:	2000018c 	.word	0x2000018c

080115c8 <memcpy>:
 80115c8:	440a      	add	r2, r1
 80115ca:	4291      	cmp	r1, r2
 80115cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80115d0:	d100      	bne.n	80115d4 <memcpy+0xc>
 80115d2:	4770      	bx	lr
 80115d4:	b510      	push	{r4, lr}
 80115d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80115da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80115de:	4291      	cmp	r1, r2
 80115e0:	d1f9      	bne.n	80115d6 <memcpy+0xe>
 80115e2:	bd10      	pop	{r4, pc}

080115e4 <memset>:
 80115e4:	4402      	add	r2, r0
 80115e6:	4603      	mov	r3, r0
 80115e8:	4293      	cmp	r3, r2
 80115ea:	d100      	bne.n	80115ee <memset+0xa>
 80115ec:	4770      	bx	lr
 80115ee:	f803 1b01 	strb.w	r1, [r3], #1
 80115f2:	e7f9      	b.n	80115e8 <memset+0x4>

080115f4 <_free_r>:
 80115f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80115f6:	2900      	cmp	r1, #0
 80115f8:	d044      	beq.n	8011684 <_free_r+0x90>
 80115fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115fe:	9001      	str	r0, [sp, #4]
 8011600:	2b00      	cmp	r3, #0
 8011602:	f1a1 0404 	sub.w	r4, r1, #4
 8011606:	bfb8      	it	lt
 8011608:	18e4      	addlt	r4, r4, r3
 801160a:	f001 fd21 	bl	8013050 <__malloc_lock>
 801160e:	4a1e      	ldr	r2, [pc, #120]	; (8011688 <_free_r+0x94>)
 8011610:	9801      	ldr	r0, [sp, #4]
 8011612:	6813      	ldr	r3, [r2, #0]
 8011614:	b933      	cbnz	r3, 8011624 <_free_r+0x30>
 8011616:	6063      	str	r3, [r4, #4]
 8011618:	6014      	str	r4, [r2, #0]
 801161a:	b003      	add	sp, #12
 801161c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011620:	f001 bd1c 	b.w	801305c <__malloc_unlock>
 8011624:	42a3      	cmp	r3, r4
 8011626:	d908      	bls.n	801163a <_free_r+0x46>
 8011628:	6825      	ldr	r5, [r4, #0]
 801162a:	1961      	adds	r1, r4, r5
 801162c:	428b      	cmp	r3, r1
 801162e:	bf01      	itttt	eq
 8011630:	6819      	ldreq	r1, [r3, #0]
 8011632:	685b      	ldreq	r3, [r3, #4]
 8011634:	1949      	addeq	r1, r1, r5
 8011636:	6021      	streq	r1, [r4, #0]
 8011638:	e7ed      	b.n	8011616 <_free_r+0x22>
 801163a:	461a      	mov	r2, r3
 801163c:	685b      	ldr	r3, [r3, #4]
 801163e:	b10b      	cbz	r3, 8011644 <_free_r+0x50>
 8011640:	42a3      	cmp	r3, r4
 8011642:	d9fa      	bls.n	801163a <_free_r+0x46>
 8011644:	6811      	ldr	r1, [r2, #0]
 8011646:	1855      	adds	r5, r2, r1
 8011648:	42a5      	cmp	r5, r4
 801164a:	d10b      	bne.n	8011664 <_free_r+0x70>
 801164c:	6824      	ldr	r4, [r4, #0]
 801164e:	4421      	add	r1, r4
 8011650:	1854      	adds	r4, r2, r1
 8011652:	42a3      	cmp	r3, r4
 8011654:	6011      	str	r1, [r2, #0]
 8011656:	d1e0      	bne.n	801161a <_free_r+0x26>
 8011658:	681c      	ldr	r4, [r3, #0]
 801165a:	685b      	ldr	r3, [r3, #4]
 801165c:	6053      	str	r3, [r2, #4]
 801165e:	4421      	add	r1, r4
 8011660:	6011      	str	r1, [r2, #0]
 8011662:	e7da      	b.n	801161a <_free_r+0x26>
 8011664:	d902      	bls.n	801166c <_free_r+0x78>
 8011666:	230c      	movs	r3, #12
 8011668:	6003      	str	r3, [r0, #0]
 801166a:	e7d6      	b.n	801161a <_free_r+0x26>
 801166c:	6825      	ldr	r5, [r4, #0]
 801166e:	1961      	adds	r1, r4, r5
 8011670:	428b      	cmp	r3, r1
 8011672:	bf04      	itt	eq
 8011674:	6819      	ldreq	r1, [r3, #0]
 8011676:	685b      	ldreq	r3, [r3, #4]
 8011678:	6063      	str	r3, [r4, #4]
 801167a:	bf04      	itt	eq
 801167c:	1949      	addeq	r1, r1, r5
 801167e:	6021      	streq	r1, [r4, #0]
 8011680:	6054      	str	r4, [r2, #4]
 8011682:	e7ca      	b.n	801161a <_free_r+0x26>
 8011684:	b003      	add	sp, #12
 8011686:	bd30      	pop	{r4, r5, pc}
 8011688:	200029a0 	.word	0x200029a0

0801168c <sbrk_aligned>:
 801168c:	b570      	push	{r4, r5, r6, lr}
 801168e:	4e0e      	ldr	r6, [pc, #56]	; (80116c8 <sbrk_aligned+0x3c>)
 8011690:	460c      	mov	r4, r1
 8011692:	6831      	ldr	r1, [r6, #0]
 8011694:	4605      	mov	r5, r0
 8011696:	b911      	cbnz	r1, 801169e <sbrk_aligned+0x12>
 8011698:	f000 fd0e 	bl	80120b8 <_sbrk_r>
 801169c:	6030      	str	r0, [r6, #0]
 801169e:	4621      	mov	r1, r4
 80116a0:	4628      	mov	r0, r5
 80116a2:	f000 fd09 	bl	80120b8 <_sbrk_r>
 80116a6:	1c43      	adds	r3, r0, #1
 80116a8:	d00a      	beq.n	80116c0 <sbrk_aligned+0x34>
 80116aa:	1cc4      	adds	r4, r0, #3
 80116ac:	f024 0403 	bic.w	r4, r4, #3
 80116b0:	42a0      	cmp	r0, r4
 80116b2:	d007      	beq.n	80116c4 <sbrk_aligned+0x38>
 80116b4:	1a21      	subs	r1, r4, r0
 80116b6:	4628      	mov	r0, r5
 80116b8:	f000 fcfe 	bl	80120b8 <_sbrk_r>
 80116bc:	3001      	adds	r0, #1
 80116be:	d101      	bne.n	80116c4 <sbrk_aligned+0x38>
 80116c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80116c4:	4620      	mov	r0, r4
 80116c6:	bd70      	pop	{r4, r5, r6, pc}
 80116c8:	200029a4 	.word	0x200029a4

080116cc <_malloc_r>:
 80116cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116d0:	1ccd      	adds	r5, r1, #3
 80116d2:	f025 0503 	bic.w	r5, r5, #3
 80116d6:	3508      	adds	r5, #8
 80116d8:	2d0c      	cmp	r5, #12
 80116da:	bf38      	it	cc
 80116dc:	250c      	movcc	r5, #12
 80116de:	2d00      	cmp	r5, #0
 80116e0:	4607      	mov	r7, r0
 80116e2:	db01      	blt.n	80116e8 <_malloc_r+0x1c>
 80116e4:	42a9      	cmp	r1, r5
 80116e6:	d905      	bls.n	80116f4 <_malloc_r+0x28>
 80116e8:	230c      	movs	r3, #12
 80116ea:	603b      	str	r3, [r7, #0]
 80116ec:	2600      	movs	r6, #0
 80116ee:	4630      	mov	r0, r6
 80116f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116f4:	4e2e      	ldr	r6, [pc, #184]	; (80117b0 <_malloc_r+0xe4>)
 80116f6:	f001 fcab 	bl	8013050 <__malloc_lock>
 80116fa:	6833      	ldr	r3, [r6, #0]
 80116fc:	461c      	mov	r4, r3
 80116fe:	bb34      	cbnz	r4, 801174e <_malloc_r+0x82>
 8011700:	4629      	mov	r1, r5
 8011702:	4638      	mov	r0, r7
 8011704:	f7ff ffc2 	bl	801168c <sbrk_aligned>
 8011708:	1c43      	adds	r3, r0, #1
 801170a:	4604      	mov	r4, r0
 801170c:	d14d      	bne.n	80117aa <_malloc_r+0xde>
 801170e:	6834      	ldr	r4, [r6, #0]
 8011710:	4626      	mov	r6, r4
 8011712:	2e00      	cmp	r6, #0
 8011714:	d140      	bne.n	8011798 <_malloc_r+0xcc>
 8011716:	6823      	ldr	r3, [r4, #0]
 8011718:	4631      	mov	r1, r6
 801171a:	4638      	mov	r0, r7
 801171c:	eb04 0803 	add.w	r8, r4, r3
 8011720:	f000 fcca 	bl	80120b8 <_sbrk_r>
 8011724:	4580      	cmp	r8, r0
 8011726:	d13a      	bne.n	801179e <_malloc_r+0xd2>
 8011728:	6821      	ldr	r1, [r4, #0]
 801172a:	3503      	adds	r5, #3
 801172c:	1a6d      	subs	r5, r5, r1
 801172e:	f025 0503 	bic.w	r5, r5, #3
 8011732:	3508      	adds	r5, #8
 8011734:	2d0c      	cmp	r5, #12
 8011736:	bf38      	it	cc
 8011738:	250c      	movcc	r5, #12
 801173a:	4629      	mov	r1, r5
 801173c:	4638      	mov	r0, r7
 801173e:	f7ff ffa5 	bl	801168c <sbrk_aligned>
 8011742:	3001      	adds	r0, #1
 8011744:	d02b      	beq.n	801179e <_malloc_r+0xd2>
 8011746:	6823      	ldr	r3, [r4, #0]
 8011748:	442b      	add	r3, r5
 801174a:	6023      	str	r3, [r4, #0]
 801174c:	e00e      	b.n	801176c <_malloc_r+0xa0>
 801174e:	6822      	ldr	r2, [r4, #0]
 8011750:	1b52      	subs	r2, r2, r5
 8011752:	d41e      	bmi.n	8011792 <_malloc_r+0xc6>
 8011754:	2a0b      	cmp	r2, #11
 8011756:	d916      	bls.n	8011786 <_malloc_r+0xba>
 8011758:	1961      	adds	r1, r4, r5
 801175a:	42a3      	cmp	r3, r4
 801175c:	6025      	str	r5, [r4, #0]
 801175e:	bf18      	it	ne
 8011760:	6059      	strne	r1, [r3, #4]
 8011762:	6863      	ldr	r3, [r4, #4]
 8011764:	bf08      	it	eq
 8011766:	6031      	streq	r1, [r6, #0]
 8011768:	5162      	str	r2, [r4, r5]
 801176a:	604b      	str	r3, [r1, #4]
 801176c:	4638      	mov	r0, r7
 801176e:	f104 060b 	add.w	r6, r4, #11
 8011772:	f001 fc73 	bl	801305c <__malloc_unlock>
 8011776:	f026 0607 	bic.w	r6, r6, #7
 801177a:	1d23      	adds	r3, r4, #4
 801177c:	1af2      	subs	r2, r6, r3
 801177e:	d0b6      	beq.n	80116ee <_malloc_r+0x22>
 8011780:	1b9b      	subs	r3, r3, r6
 8011782:	50a3      	str	r3, [r4, r2]
 8011784:	e7b3      	b.n	80116ee <_malloc_r+0x22>
 8011786:	6862      	ldr	r2, [r4, #4]
 8011788:	42a3      	cmp	r3, r4
 801178a:	bf0c      	ite	eq
 801178c:	6032      	streq	r2, [r6, #0]
 801178e:	605a      	strne	r2, [r3, #4]
 8011790:	e7ec      	b.n	801176c <_malloc_r+0xa0>
 8011792:	4623      	mov	r3, r4
 8011794:	6864      	ldr	r4, [r4, #4]
 8011796:	e7b2      	b.n	80116fe <_malloc_r+0x32>
 8011798:	4634      	mov	r4, r6
 801179a:	6876      	ldr	r6, [r6, #4]
 801179c:	e7b9      	b.n	8011712 <_malloc_r+0x46>
 801179e:	230c      	movs	r3, #12
 80117a0:	603b      	str	r3, [r7, #0]
 80117a2:	4638      	mov	r0, r7
 80117a4:	f001 fc5a 	bl	801305c <__malloc_unlock>
 80117a8:	e7a1      	b.n	80116ee <_malloc_r+0x22>
 80117aa:	6025      	str	r5, [r4, #0]
 80117ac:	e7de      	b.n	801176c <_malloc_r+0xa0>
 80117ae:	bf00      	nop
 80117b0:	200029a0 	.word	0x200029a0

080117b4 <__cvt>:
 80117b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80117b8:	ec55 4b10 	vmov	r4, r5, d0
 80117bc:	2d00      	cmp	r5, #0
 80117be:	460e      	mov	r6, r1
 80117c0:	4619      	mov	r1, r3
 80117c2:	462b      	mov	r3, r5
 80117c4:	bfbb      	ittet	lt
 80117c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80117ca:	461d      	movlt	r5, r3
 80117cc:	2300      	movge	r3, #0
 80117ce:	232d      	movlt	r3, #45	; 0x2d
 80117d0:	700b      	strb	r3, [r1, #0]
 80117d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80117d8:	4691      	mov	r9, r2
 80117da:	f023 0820 	bic.w	r8, r3, #32
 80117de:	bfbc      	itt	lt
 80117e0:	4622      	movlt	r2, r4
 80117e2:	4614      	movlt	r4, r2
 80117e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80117e8:	d005      	beq.n	80117f6 <__cvt+0x42>
 80117ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80117ee:	d100      	bne.n	80117f2 <__cvt+0x3e>
 80117f0:	3601      	adds	r6, #1
 80117f2:	2102      	movs	r1, #2
 80117f4:	e000      	b.n	80117f8 <__cvt+0x44>
 80117f6:	2103      	movs	r1, #3
 80117f8:	ab03      	add	r3, sp, #12
 80117fa:	9301      	str	r3, [sp, #4]
 80117fc:	ab02      	add	r3, sp, #8
 80117fe:	9300      	str	r3, [sp, #0]
 8011800:	ec45 4b10 	vmov	d0, r4, r5
 8011804:	4653      	mov	r3, sl
 8011806:	4632      	mov	r2, r6
 8011808:	f000 fd12 	bl	8012230 <_dtoa_r>
 801180c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011810:	4607      	mov	r7, r0
 8011812:	d102      	bne.n	801181a <__cvt+0x66>
 8011814:	f019 0f01 	tst.w	r9, #1
 8011818:	d022      	beq.n	8011860 <__cvt+0xac>
 801181a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801181e:	eb07 0906 	add.w	r9, r7, r6
 8011822:	d110      	bne.n	8011846 <__cvt+0x92>
 8011824:	783b      	ldrb	r3, [r7, #0]
 8011826:	2b30      	cmp	r3, #48	; 0x30
 8011828:	d10a      	bne.n	8011840 <__cvt+0x8c>
 801182a:	2200      	movs	r2, #0
 801182c:	2300      	movs	r3, #0
 801182e:	4620      	mov	r0, r4
 8011830:	4629      	mov	r1, r5
 8011832:	f7ef f961 	bl	8000af8 <__aeabi_dcmpeq>
 8011836:	b918      	cbnz	r0, 8011840 <__cvt+0x8c>
 8011838:	f1c6 0601 	rsb	r6, r6, #1
 801183c:	f8ca 6000 	str.w	r6, [sl]
 8011840:	f8da 3000 	ldr.w	r3, [sl]
 8011844:	4499      	add	r9, r3
 8011846:	2200      	movs	r2, #0
 8011848:	2300      	movs	r3, #0
 801184a:	4620      	mov	r0, r4
 801184c:	4629      	mov	r1, r5
 801184e:	f7ef f953 	bl	8000af8 <__aeabi_dcmpeq>
 8011852:	b108      	cbz	r0, 8011858 <__cvt+0xa4>
 8011854:	f8cd 900c 	str.w	r9, [sp, #12]
 8011858:	2230      	movs	r2, #48	; 0x30
 801185a:	9b03      	ldr	r3, [sp, #12]
 801185c:	454b      	cmp	r3, r9
 801185e:	d307      	bcc.n	8011870 <__cvt+0xbc>
 8011860:	9b03      	ldr	r3, [sp, #12]
 8011862:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011864:	1bdb      	subs	r3, r3, r7
 8011866:	4638      	mov	r0, r7
 8011868:	6013      	str	r3, [r2, #0]
 801186a:	b004      	add	sp, #16
 801186c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011870:	1c59      	adds	r1, r3, #1
 8011872:	9103      	str	r1, [sp, #12]
 8011874:	701a      	strb	r2, [r3, #0]
 8011876:	e7f0      	b.n	801185a <__cvt+0xa6>

08011878 <__exponent>:
 8011878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801187a:	4603      	mov	r3, r0
 801187c:	2900      	cmp	r1, #0
 801187e:	bfb8      	it	lt
 8011880:	4249      	neglt	r1, r1
 8011882:	f803 2b02 	strb.w	r2, [r3], #2
 8011886:	bfb4      	ite	lt
 8011888:	222d      	movlt	r2, #45	; 0x2d
 801188a:	222b      	movge	r2, #43	; 0x2b
 801188c:	2909      	cmp	r1, #9
 801188e:	7042      	strb	r2, [r0, #1]
 8011890:	dd2a      	ble.n	80118e8 <__exponent+0x70>
 8011892:	f10d 0407 	add.w	r4, sp, #7
 8011896:	46a4      	mov	ip, r4
 8011898:	270a      	movs	r7, #10
 801189a:	46a6      	mov	lr, r4
 801189c:	460a      	mov	r2, r1
 801189e:	fb91 f6f7 	sdiv	r6, r1, r7
 80118a2:	fb07 1516 	mls	r5, r7, r6, r1
 80118a6:	3530      	adds	r5, #48	; 0x30
 80118a8:	2a63      	cmp	r2, #99	; 0x63
 80118aa:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80118ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80118b2:	4631      	mov	r1, r6
 80118b4:	dcf1      	bgt.n	801189a <__exponent+0x22>
 80118b6:	3130      	adds	r1, #48	; 0x30
 80118b8:	f1ae 0502 	sub.w	r5, lr, #2
 80118bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80118c0:	1c44      	adds	r4, r0, #1
 80118c2:	4629      	mov	r1, r5
 80118c4:	4561      	cmp	r1, ip
 80118c6:	d30a      	bcc.n	80118de <__exponent+0x66>
 80118c8:	f10d 0209 	add.w	r2, sp, #9
 80118cc:	eba2 020e 	sub.w	r2, r2, lr
 80118d0:	4565      	cmp	r5, ip
 80118d2:	bf88      	it	hi
 80118d4:	2200      	movhi	r2, #0
 80118d6:	4413      	add	r3, r2
 80118d8:	1a18      	subs	r0, r3, r0
 80118da:	b003      	add	sp, #12
 80118dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80118e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80118e6:	e7ed      	b.n	80118c4 <__exponent+0x4c>
 80118e8:	2330      	movs	r3, #48	; 0x30
 80118ea:	3130      	adds	r1, #48	; 0x30
 80118ec:	7083      	strb	r3, [r0, #2]
 80118ee:	70c1      	strb	r1, [r0, #3]
 80118f0:	1d03      	adds	r3, r0, #4
 80118f2:	e7f1      	b.n	80118d8 <__exponent+0x60>

080118f4 <_printf_float>:
 80118f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118f8:	ed2d 8b02 	vpush	{d8}
 80118fc:	b08d      	sub	sp, #52	; 0x34
 80118fe:	460c      	mov	r4, r1
 8011900:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011904:	4616      	mov	r6, r2
 8011906:	461f      	mov	r7, r3
 8011908:	4605      	mov	r5, r0
 801190a:	f001 fb87 	bl	801301c <_localeconv_r>
 801190e:	f8d0 a000 	ldr.w	sl, [r0]
 8011912:	4650      	mov	r0, sl
 8011914:	f7ee fc74 	bl	8000200 <strlen>
 8011918:	2300      	movs	r3, #0
 801191a:	930a      	str	r3, [sp, #40]	; 0x28
 801191c:	6823      	ldr	r3, [r4, #0]
 801191e:	9305      	str	r3, [sp, #20]
 8011920:	f8d8 3000 	ldr.w	r3, [r8]
 8011924:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011928:	3307      	adds	r3, #7
 801192a:	f023 0307 	bic.w	r3, r3, #7
 801192e:	f103 0208 	add.w	r2, r3, #8
 8011932:	f8c8 2000 	str.w	r2, [r8]
 8011936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801193a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801193e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011942:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011946:	9307      	str	r3, [sp, #28]
 8011948:	f8cd 8018 	str.w	r8, [sp, #24]
 801194c:	ee08 0a10 	vmov	s16, r0
 8011950:	4b9f      	ldr	r3, [pc, #636]	; (8011bd0 <_printf_float+0x2dc>)
 8011952:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011956:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801195a:	f7ef f8ff 	bl	8000b5c <__aeabi_dcmpun>
 801195e:	bb88      	cbnz	r0, 80119c4 <_printf_float+0xd0>
 8011960:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011964:	4b9a      	ldr	r3, [pc, #616]	; (8011bd0 <_printf_float+0x2dc>)
 8011966:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801196a:	f7ef f8d9 	bl	8000b20 <__aeabi_dcmple>
 801196e:	bb48      	cbnz	r0, 80119c4 <_printf_float+0xd0>
 8011970:	2200      	movs	r2, #0
 8011972:	2300      	movs	r3, #0
 8011974:	4640      	mov	r0, r8
 8011976:	4649      	mov	r1, r9
 8011978:	f7ef f8c8 	bl	8000b0c <__aeabi_dcmplt>
 801197c:	b110      	cbz	r0, 8011984 <_printf_float+0x90>
 801197e:	232d      	movs	r3, #45	; 0x2d
 8011980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011984:	4b93      	ldr	r3, [pc, #588]	; (8011bd4 <_printf_float+0x2e0>)
 8011986:	4894      	ldr	r0, [pc, #592]	; (8011bd8 <_printf_float+0x2e4>)
 8011988:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801198c:	bf94      	ite	ls
 801198e:	4698      	movls	r8, r3
 8011990:	4680      	movhi	r8, r0
 8011992:	2303      	movs	r3, #3
 8011994:	6123      	str	r3, [r4, #16]
 8011996:	9b05      	ldr	r3, [sp, #20]
 8011998:	f023 0204 	bic.w	r2, r3, #4
 801199c:	6022      	str	r2, [r4, #0]
 801199e:	f04f 0900 	mov.w	r9, #0
 80119a2:	9700      	str	r7, [sp, #0]
 80119a4:	4633      	mov	r3, r6
 80119a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80119a8:	4621      	mov	r1, r4
 80119aa:	4628      	mov	r0, r5
 80119ac:	f000 f9d8 	bl	8011d60 <_printf_common>
 80119b0:	3001      	adds	r0, #1
 80119b2:	f040 8090 	bne.w	8011ad6 <_printf_float+0x1e2>
 80119b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119ba:	b00d      	add	sp, #52	; 0x34
 80119bc:	ecbd 8b02 	vpop	{d8}
 80119c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119c4:	4642      	mov	r2, r8
 80119c6:	464b      	mov	r3, r9
 80119c8:	4640      	mov	r0, r8
 80119ca:	4649      	mov	r1, r9
 80119cc:	f7ef f8c6 	bl	8000b5c <__aeabi_dcmpun>
 80119d0:	b140      	cbz	r0, 80119e4 <_printf_float+0xf0>
 80119d2:	464b      	mov	r3, r9
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	bfbc      	itt	lt
 80119d8:	232d      	movlt	r3, #45	; 0x2d
 80119da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80119de:	487f      	ldr	r0, [pc, #508]	; (8011bdc <_printf_float+0x2e8>)
 80119e0:	4b7f      	ldr	r3, [pc, #508]	; (8011be0 <_printf_float+0x2ec>)
 80119e2:	e7d1      	b.n	8011988 <_printf_float+0x94>
 80119e4:	6863      	ldr	r3, [r4, #4]
 80119e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80119ea:	9206      	str	r2, [sp, #24]
 80119ec:	1c5a      	adds	r2, r3, #1
 80119ee:	d13f      	bne.n	8011a70 <_printf_float+0x17c>
 80119f0:	2306      	movs	r3, #6
 80119f2:	6063      	str	r3, [r4, #4]
 80119f4:	9b05      	ldr	r3, [sp, #20]
 80119f6:	6861      	ldr	r1, [r4, #4]
 80119f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80119fc:	2300      	movs	r3, #0
 80119fe:	9303      	str	r3, [sp, #12]
 8011a00:	ab0a      	add	r3, sp, #40	; 0x28
 8011a02:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011a06:	ab09      	add	r3, sp, #36	; 0x24
 8011a08:	ec49 8b10 	vmov	d0, r8, r9
 8011a0c:	9300      	str	r3, [sp, #0]
 8011a0e:	6022      	str	r2, [r4, #0]
 8011a10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011a14:	4628      	mov	r0, r5
 8011a16:	f7ff fecd 	bl	80117b4 <__cvt>
 8011a1a:	9b06      	ldr	r3, [sp, #24]
 8011a1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011a1e:	2b47      	cmp	r3, #71	; 0x47
 8011a20:	4680      	mov	r8, r0
 8011a22:	d108      	bne.n	8011a36 <_printf_float+0x142>
 8011a24:	1cc8      	adds	r0, r1, #3
 8011a26:	db02      	blt.n	8011a2e <_printf_float+0x13a>
 8011a28:	6863      	ldr	r3, [r4, #4]
 8011a2a:	4299      	cmp	r1, r3
 8011a2c:	dd41      	ble.n	8011ab2 <_printf_float+0x1be>
 8011a2e:	f1ab 0b02 	sub.w	fp, fp, #2
 8011a32:	fa5f fb8b 	uxtb.w	fp, fp
 8011a36:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011a3a:	d820      	bhi.n	8011a7e <_printf_float+0x18a>
 8011a3c:	3901      	subs	r1, #1
 8011a3e:	465a      	mov	r2, fp
 8011a40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011a44:	9109      	str	r1, [sp, #36]	; 0x24
 8011a46:	f7ff ff17 	bl	8011878 <__exponent>
 8011a4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a4c:	1813      	adds	r3, r2, r0
 8011a4e:	2a01      	cmp	r2, #1
 8011a50:	4681      	mov	r9, r0
 8011a52:	6123      	str	r3, [r4, #16]
 8011a54:	dc02      	bgt.n	8011a5c <_printf_float+0x168>
 8011a56:	6822      	ldr	r2, [r4, #0]
 8011a58:	07d2      	lsls	r2, r2, #31
 8011a5a:	d501      	bpl.n	8011a60 <_printf_float+0x16c>
 8011a5c:	3301      	adds	r3, #1
 8011a5e:	6123      	str	r3, [r4, #16]
 8011a60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d09c      	beq.n	80119a2 <_printf_float+0xae>
 8011a68:	232d      	movs	r3, #45	; 0x2d
 8011a6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a6e:	e798      	b.n	80119a2 <_printf_float+0xae>
 8011a70:	9a06      	ldr	r2, [sp, #24]
 8011a72:	2a47      	cmp	r2, #71	; 0x47
 8011a74:	d1be      	bne.n	80119f4 <_printf_float+0x100>
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d1bc      	bne.n	80119f4 <_printf_float+0x100>
 8011a7a:	2301      	movs	r3, #1
 8011a7c:	e7b9      	b.n	80119f2 <_printf_float+0xfe>
 8011a7e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011a82:	d118      	bne.n	8011ab6 <_printf_float+0x1c2>
 8011a84:	2900      	cmp	r1, #0
 8011a86:	6863      	ldr	r3, [r4, #4]
 8011a88:	dd0b      	ble.n	8011aa2 <_printf_float+0x1ae>
 8011a8a:	6121      	str	r1, [r4, #16]
 8011a8c:	b913      	cbnz	r3, 8011a94 <_printf_float+0x1a0>
 8011a8e:	6822      	ldr	r2, [r4, #0]
 8011a90:	07d0      	lsls	r0, r2, #31
 8011a92:	d502      	bpl.n	8011a9a <_printf_float+0x1a6>
 8011a94:	3301      	adds	r3, #1
 8011a96:	440b      	add	r3, r1
 8011a98:	6123      	str	r3, [r4, #16]
 8011a9a:	65a1      	str	r1, [r4, #88]	; 0x58
 8011a9c:	f04f 0900 	mov.w	r9, #0
 8011aa0:	e7de      	b.n	8011a60 <_printf_float+0x16c>
 8011aa2:	b913      	cbnz	r3, 8011aaa <_printf_float+0x1b6>
 8011aa4:	6822      	ldr	r2, [r4, #0]
 8011aa6:	07d2      	lsls	r2, r2, #31
 8011aa8:	d501      	bpl.n	8011aae <_printf_float+0x1ba>
 8011aaa:	3302      	adds	r3, #2
 8011aac:	e7f4      	b.n	8011a98 <_printf_float+0x1a4>
 8011aae:	2301      	movs	r3, #1
 8011ab0:	e7f2      	b.n	8011a98 <_printf_float+0x1a4>
 8011ab2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ab8:	4299      	cmp	r1, r3
 8011aba:	db05      	blt.n	8011ac8 <_printf_float+0x1d4>
 8011abc:	6823      	ldr	r3, [r4, #0]
 8011abe:	6121      	str	r1, [r4, #16]
 8011ac0:	07d8      	lsls	r0, r3, #31
 8011ac2:	d5ea      	bpl.n	8011a9a <_printf_float+0x1a6>
 8011ac4:	1c4b      	adds	r3, r1, #1
 8011ac6:	e7e7      	b.n	8011a98 <_printf_float+0x1a4>
 8011ac8:	2900      	cmp	r1, #0
 8011aca:	bfd4      	ite	le
 8011acc:	f1c1 0202 	rsble	r2, r1, #2
 8011ad0:	2201      	movgt	r2, #1
 8011ad2:	4413      	add	r3, r2
 8011ad4:	e7e0      	b.n	8011a98 <_printf_float+0x1a4>
 8011ad6:	6823      	ldr	r3, [r4, #0]
 8011ad8:	055a      	lsls	r2, r3, #21
 8011ada:	d407      	bmi.n	8011aec <_printf_float+0x1f8>
 8011adc:	6923      	ldr	r3, [r4, #16]
 8011ade:	4642      	mov	r2, r8
 8011ae0:	4631      	mov	r1, r6
 8011ae2:	4628      	mov	r0, r5
 8011ae4:	47b8      	blx	r7
 8011ae6:	3001      	adds	r0, #1
 8011ae8:	d12c      	bne.n	8011b44 <_printf_float+0x250>
 8011aea:	e764      	b.n	80119b6 <_printf_float+0xc2>
 8011aec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011af0:	f240 80e0 	bls.w	8011cb4 <_printf_float+0x3c0>
 8011af4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011af8:	2200      	movs	r2, #0
 8011afa:	2300      	movs	r3, #0
 8011afc:	f7ee fffc 	bl	8000af8 <__aeabi_dcmpeq>
 8011b00:	2800      	cmp	r0, #0
 8011b02:	d034      	beq.n	8011b6e <_printf_float+0x27a>
 8011b04:	4a37      	ldr	r2, [pc, #220]	; (8011be4 <_printf_float+0x2f0>)
 8011b06:	2301      	movs	r3, #1
 8011b08:	4631      	mov	r1, r6
 8011b0a:	4628      	mov	r0, r5
 8011b0c:	47b8      	blx	r7
 8011b0e:	3001      	adds	r0, #1
 8011b10:	f43f af51 	beq.w	80119b6 <_printf_float+0xc2>
 8011b14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011b18:	429a      	cmp	r2, r3
 8011b1a:	db02      	blt.n	8011b22 <_printf_float+0x22e>
 8011b1c:	6823      	ldr	r3, [r4, #0]
 8011b1e:	07d8      	lsls	r0, r3, #31
 8011b20:	d510      	bpl.n	8011b44 <_printf_float+0x250>
 8011b22:	ee18 3a10 	vmov	r3, s16
 8011b26:	4652      	mov	r2, sl
 8011b28:	4631      	mov	r1, r6
 8011b2a:	4628      	mov	r0, r5
 8011b2c:	47b8      	blx	r7
 8011b2e:	3001      	adds	r0, #1
 8011b30:	f43f af41 	beq.w	80119b6 <_printf_float+0xc2>
 8011b34:	f04f 0800 	mov.w	r8, #0
 8011b38:	f104 091a 	add.w	r9, r4, #26
 8011b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b3e:	3b01      	subs	r3, #1
 8011b40:	4543      	cmp	r3, r8
 8011b42:	dc09      	bgt.n	8011b58 <_printf_float+0x264>
 8011b44:	6823      	ldr	r3, [r4, #0]
 8011b46:	079b      	lsls	r3, r3, #30
 8011b48:	f100 8105 	bmi.w	8011d56 <_printf_float+0x462>
 8011b4c:	68e0      	ldr	r0, [r4, #12]
 8011b4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b50:	4298      	cmp	r0, r3
 8011b52:	bfb8      	it	lt
 8011b54:	4618      	movlt	r0, r3
 8011b56:	e730      	b.n	80119ba <_printf_float+0xc6>
 8011b58:	2301      	movs	r3, #1
 8011b5a:	464a      	mov	r2, r9
 8011b5c:	4631      	mov	r1, r6
 8011b5e:	4628      	mov	r0, r5
 8011b60:	47b8      	blx	r7
 8011b62:	3001      	adds	r0, #1
 8011b64:	f43f af27 	beq.w	80119b6 <_printf_float+0xc2>
 8011b68:	f108 0801 	add.w	r8, r8, #1
 8011b6c:	e7e6      	b.n	8011b3c <_printf_float+0x248>
 8011b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	dc39      	bgt.n	8011be8 <_printf_float+0x2f4>
 8011b74:	4a1b      	ldr	r2, [pc, #108]	; (8011be4 <_printf_float+0x2f0>)
 8011b76:	2301      	movs	r3, #1
 8011b78:	4631      	mov	r1, r6
 8011b7a:	4628      	mov	r0, r5
 8011b7c:	47b8      	blx	r7
 8011b7e:	3001      	adds	r0, #1
 8011b80:	f43f af19 	beq.w	80119b6 <_printf_float+0xc2>
 8011b84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011b88:	4313      	orrs	r3, r2
 8011b8a:	d102      	bne.n	8011b92 <_printf_float+0x29e>
 8011b8c:	6823      	ldr	r3, [r4, #0]
 8011b8e:	07d9      	lsls	r1, r3, #31
 8011b90:	d5d8      	bpl.n	8011b44 <_printf_float+0x250>
 8011b92:	ee18 3a10 	vmov	r3, s16
 8011b96:	4652      	mov	r2, sl
 8011b98:	4631      	mov	r1, r6
 8011b9a:	4628      	mov	r0, r5
 8011b9c:	47b8      	blx	r7
 8011b9e:	3001      	adds	r0, #1
 8011ba0:	f43f af09 	beq.w	80119b6 <_printf_float+0xc2>
 8011ba4:	f04f 0900 	mov.w	r9, #0
 8011ba8:	f104 0a1a 	add.w	sl, r4, #26
 8011bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bae:	425b      	negs	r3, r3
 8011bb0:	454b      	cmp	r3, r9
 8011bb2:	dc01      	bgt.n	8011bb8 <_printf_float+0x2c4>
 8011bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bb6:	e792      	b.n	8011ade <_printf_float+0x1ea>
 8011bb8:	2301      	movs	r3, #1
 8011bba:	4652      	mov	r2, sl
 8011bbc:	4631      	mov	r1, r6
 8011bbe:	4628      	mov	r0, r5
 8011bc0:	47b8      	blx	r7
 8011bc2:	3001      	adds	r0, #1
 8011bc4:	f43f aef7 	beq.w	80119b6 <_printf_float+0xc2>
 8011bc8:	f109 0901 	add.w	r9, r9, #1
 8011bcc:	e7ee      	b.n	8011bac <_printf_float+0x2b8>
 8011bce:	bf00      	nop
 8011bd0:	7fefffff 	.word	0x7fefffff
 8011bd4:	08014260 	.word	0x08014260
 8011bd8:	08014264 	.word	0x08014264
 8011bdc:	0801426c 	.word	0x0801426c
 8011be0:	08014268 	.word	0x08014268
 8011be4:	08014270 	.word	0x08014270
 8011be8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011bea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011bec:	429a      	cmp	r2, r3
 8011bee:	bfa8      	it	ge
 8011bf0:	461a      	movge	r2, r3
 8011bf2:	2a00      	cmp	r2, #0
 8011bf4:	4691      	mov	r9, r2
 8011bf6:	dc37      	bgt.n	8011c68 <_printf_float+0x374>
 8011bf8:	f04f 0b00 	mov.w	fp, #0
 8011bfc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011c00:	f104 021a 	add.w	r2, r4, #26
 8011c04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011c06:	9305      	str	r3, [sp, #20]
 8011c08:	eba3 0309 	sub.w	r3, r3, r9
 8011c0c:	455b      	cmp	r3, fp
 8011c0e:	dc33      	bgt.n	8011c78 <_printf_float+0x384>
 8011c10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011c14:	429a      	cmp	r2, r3
 8011c16:	db3b      	blt.n	8011c90 <_printf_float+0x39c>
 8011c18:	6823      	ldr	r3, [r4, #0]
 8011c1a:	07da      	lsls	r2, r3, #31
 8011c1c:	d438      	bmi.n	8011c90 <_printf_float+0x39c>
 8011c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c20:	9a05      	ldr	r2, [sp, #20]
 8011c22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011c24:	1a9a      	subs	r2, r3, r2
 8011c26:	eba3 0901 	sub.w	r9, r3, r1
 8011c2a:	4591      	cmp	r9, r2
 8011c2c:	bfa8      	it	ge
 8011c2e:	4691      	movge	r9, r2
 8011c30:	f1b9 0f00 	cmp.w	r9, #0
 8011c34:	dc35      	bgt.n	8011ca2 <_printf_float+0x3ae>
 8011c36:	f04f 0800 	mov.w	r8, #0
 8011c3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011c3e:	f104 0a1a 	add.w	sl, r4, #26
 8011c42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011c46:	1a9b      	subs	r3, r3, r2
 8011c48:	eba3 0309 	sub.w	r3, r3, r9
 8011c4c:	4543      	cmp	r3, r8
 8011c4e:	f77f af79 	ble.w	8011b44 <_printf_float+0x250>
 8011c52:	2301      	movs	r3, #1
 8011c54:	4652      	mov	r2, sl
 8011c56:	4631      	mov	r1, r6
 8011c58:	4628      	mov	r0, r5
 8011c5a:	47b8      	blx	r7
 8011c5c:	3001      	adds	r0, #1
 8011c5e:	f43f aeaa 	beq.w	80119b6 <_printf_float+0xc2>
 8011c62:	f108 0801 	add.w	r8, r8, #1
 8011c66:	e7ec      	b.n	8011c42 <_printf_float+0x34e>
 8011c68:	4613      	mov	r3, r2
 8011c6a:	4631      	mov	r1, r6
 8011c6c:	4642      	mov	r2, r8
 8011c6e:	4628      	mov	r0, r5
 8011c70:	47b8      	blx	r7
 8011c72:	3001      	adds	r0, #1
 8011c74:	d1c0      	bne.n	8011bf8 <_printf_float+0x304>
 8011c76:	e69e      	b.n	80119b6 <_printf_float+0xc2>
 8011c78:	2301      	movs	r3, #1
 8011c7a:	4631      	mov	r1, r6
 8011c7c:	4628      	mov	r0, r5
 8011c7e:	9205      	str	r2, [sp, #20]
 8011c80:	47b8      	blx	r7
 8011c82:	3001      	adds	r0, #1
 8011c84:	f43f ae97 	beq.w	80119b6 <_printf_float+0xc2>
 8011c88:	9a05      	ldr	r2, [sp, #20]
 8011c8a:	f10b 0b01 	add.w	fp, fp, #1
 8011c8e:	e7b9      	b.n	8011c04 <_printf_float+0x310>
 8011c90:	ee18 3a10 	vmov	r3, s16
 8011c94:	4652      	mov	r2, sl
 8011c96:	4631      	mov	r1, r6
 8011c98:	4628      	mov	r0, r5
 8011c9a:	47b8      	blx	r7
 8011c9c:	3001      	adds	r0, #1
 8011c9e:	d1be      	bne.n	8011c1e <_printf_float+0x32a>
 8011ca0:	e689      	b.n	80119b6 <_printf_float+0xc2>
 8011ca2:	9a05      	ldr	r2, [sp, #20]
 8011ca4:	464b      	mov	r3, r9
 8011ca6:	4442      	add	r2, r8
 8011ca8:	4631      	mov	r1, r6
 8011caa:	4628      	mov	r0, r5
 8011cac:	47b8      	blx	r7
 8011cae:	3001      	adds	r0, #1
 8011cb0:	d1c1      	bne.n	8011c36 <_printf_float+0x342>
 8011cb2:	e680      	b.n	80119b6 <_printf_float+0xc2>
 8011cb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011cb6:	2a01      	cmp	r2, #1
 8011cb8:	dc01      	bgt.n	8011cbe <_printf_float+0x3ca>
 8011cba:	07db      	lsls	r3, r3, #31
 8011cbc:	d538      	bpl.n	8011d30 <_printf_float+0x43c>
 8011cbe:	2301      	movs	r3, #1
 8011cc0:	4642      	mov	r2, r8
 8011cc2:	4631      	mov	r1, r6
 8011cc4:	4628      	mov	r0, r5
 8011cc6:	47b8      	blx	r7
 8011cc8:	3001      	adds	r0, #1
 8011cca:	f43f ae74 	beq.w	80119b6 <_printf_float+0xc2>
 8011cce:	ee18 3a10 	vmov	r3, s16
 8011cd2:	4652      	mov	r2, sl
 8011cd4:	4631      	mov	r1, r6
 8011cd6:	4628      	mov	r0, r5
 8011cd8:	47b8      	blx	r7
 8011cda:	3001      	adds	r0, #1
 8011cdc:	f43f ae6b 	beq.w	80119b6 <_printf_float+0xc2>
 8011ce0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	f7ee ff06 	bl	8000af8 <__aeabi_dcmpeq>
 8011cec:	b9d8      	cbnz	r0, 8011d26 <_printf_float+0x432>
 8011cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cf0:	f108 0201 	add.w	r2, r8, #1
 8011cf4:	3b01      	subs	r3, #1
 8011cf6:	4631      	mov	r1, r6
 8011cf8:	4628      	mov	r0, r5
 8011cfa:	47b8      	blx	r7
 8011cfc:	3001      	adds	r0, #1
 8011cfe:	d10e      	bne.n	8011d1e <_printf_float+0x42a>
 8011d00:	e659      	b.n	80119b6 <_printf_float+0xc2>
 8011d02:	2301      	movs	r3, #1
 8011d04:	4652      	mov	r2, sl
 8011d06:	4631      	mov	r1, r6
 8011d08:	4628      	mov	r0, r5
 8011d0a:	47b8      	blx	r7
 8011d0c:	3001      	adds	r0, #1
 8011d0e:	f43f ae52 	beq.w	80119b6 <_printf_float+0xc2>
 8011d12:	f108 0801 	add.w	r8, r8, #1
 8011d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d18:	3b01      	subs	r3, #1
 8011d1a:	4543      	cmp	r3, r8
 8011d1c:	dcf1      	bgt.n	8011d02 <_printf_float+0x40e>
 8011d1e:	464b      	mov	r3, r9
 8011d20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011d24:	e6dc      	b.n	8011ae0 <_printf_float+0x1ec>
 8011d26:	f04f 0800 	mov.w	r8, #0
 8011d2a:	f104 0a1a 	add.w	sl, r4, #26
 8011d2e:	e7f2      	b.n	8011d16 <_printf_float+0x422>
 8011d30:	2301      	movs	r3, #1
 8011d32:	4642      	mov	r2, r8
 8011d34:	e7df      	b.n	8011cf6 <_printf_float+0x402>
 8011d36:	2301      	movs	r3, #1
 8011d38:	464a      	mov	r2, r9
 8011d3a:	4631      	mov	r1, r6
 8011d3c:	4628      	mov	r0, r5
 8011d3e:	47b8      	blx	r7
 8011d40:	3001      	adds	r0, #1
 8011d42:	f43f ae38 	beq.w	80119b6 <_printf_float+0xc2>
 8011d46:	f108 0801 	add.w	r8, r8, #1
 8011d4a:	68e3      	ldr	r3, [r4, #12]
 8011d4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011d4e:	1a5b      	subs	r3, r3, r1
 8011d50:	4543      	cmp	r3, r8
 8011d52:	dcf0      	bgt.n	8011d36 <_printf_float+0x442>
 8011d54:	e6fa      	b.n	8011b4c <_printf_float+0x258>
 8011d56:	f04f 0800 	mov.w	r8, #0
 8011d5a:	f104 0919 	add.w	r9, r4, #25
 8011d5e:	e7f4      	b.n	8011d4a <_printf_float+0x456>

08011d60 <_printf_common>:
 8011d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d64:	4616      	mov	r6, r2
 8011d66:	4699      	mov	r9, r3
 8011d68:	688a      	ldr	r2, [r1, #8]
 8011d6a:	690b      	ldr	r3, [r1, #16]
 8011d6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011d70:	4293      	cmp	r3, r2
 8011d72:	bfb8      	it	lt
 8011d74:	4613      	movlt	r3, r2
 8011d76:	6033      	str	r3, [r6, #0]
 8011d78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011d7c:	4607      	mov	r7, r0
 8011d7e:	460c      	mov	r4, r1
 8011d80:	b10a      	cbz	r2, 8011d86 <_printf_common+0x26>
 8011d82:	3301      	adds	r3, #1
 8011d84:	6033      	str	r3, [r6, #0]
 8011d86:	6823      	ldr	r3, [r4, #0]
 8011d88:	0699      	lsls	r1, r3, #26
 8011d8a:	bf42      	ittt	mi
 8011d8c:	6833      	ldrmi	r3, [r6, #0]
 8011d8e:	3302      	addmi	r3, #2
 8011d90:	6033      	strmi	r3, [r6, #0]
 8011d92:	6825      	ldr	r5, [r4, #0]
 8011d94:	f015 0506 	ands.w	r5, r5, #6
 8011d98:	d106      	bne.n	8011da8 <_printf_common+0x48>
 8011d9a:	f104 0a19 	add.w	sl, r4, #25
 8011d9e:	68e3      	ldr	r3, [r4, #12]
 8011da0:	6832      	ldr	r2, [r6, #0]
 8011da2:	1a9b      	subs	r3, r3, r2
 8011da4:	42ab      	cmp	r3, r5
 8011da6:	dc26      	bgt.n	8011df6 <_printf_common+0x96>
 8011da8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011dac:	1e13      	subs	r3, r2, #0
 8011dae:	6822      	ldr	r2, [r4, #0]
 8011db0:	bf18      	it	ne
 8011db2:	2301      	movne	r3, #1
 8011db4:	0692      	lsls	r2, r2, #26
 8011db6:	d42b      	bmi.n	8011e10 <_printf_common+0xb0>
 8011db8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011dbc:	4649      	mov	r1, r9
 8011dbe:	4638      	mov	r0, r7
 8011dc0:	47c0      	blx	r8
 8011dc2:	3001      	adds	r0, #1
 8011dc4:	d01e      	beq.n	8011e04 <_printf_common+0xa4>
 8011dc6:	6823      	ldr	r3, [r4, #0]
 8011dc8:	68e5      	ldr	r5, [r4, #12]
 8011dca:	6832      	ldr	r2, [r6, #0]
 8011dcc:	f003 0306 	and.w	r3, r3, #6
 8011dd0:	2b04      	cmp	r3, #4
 8011dd2:	bf08      	it	eq
 8011dd4:	1aad      	subeq	r5, r5, r2
 8011dd6:	68a3      	ldr	r3, [r4, #8]
 8011dd8:	6922      	ldr	r2, [r4, #16]
 8011dda:	bf0c      	ite	eq
 8011ddc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011de0:	2500      	movne	r5, #0
 8011de2:	4293      	cmp	r3, r2
 8011de4:	bfc4      	itt	gt
 8011de6:	1a9b      	subgt	r3, r3, r2
 8011de8:	18ed      	addgt	r5, r5, r3
 8011dea:	2600      	movs	r6, #0
 8011dec:	341a      	adds	r4, #26
 8011dee:	42b5      	cmp	r5, r6
 8011df0:	d11a      	bne.n	8011e28 <_printf_common+0xc8>
 8011df2:	2000      	movs	r0, #0
 8011df4:	e008      	b.n	8011e08 <_printf_common+0xa8>
 8011df6:	2301      	movs	r3, #1
 8011df8:	4652      	mov	r2, sl
 8011dfa:	4649      	mov	r1, r9
 8011dfc:	4638      	mov	r0, r7
 8011dfe:	47c0      	blx	r8
 8011e00:	3001      	adds	r0, #1
 8011e02:	d103      	bne.n	8011e0c <_printf_common+0xac>
 8011e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e0c:	3501      	adds	r5, #1
 8011e0e:	e7c6      	b.n	8011d9e <_printf_common+0x3e>
 8011e10:	18e1      	adds	r1, r4, r3
 8011e12:	1c5a      	adds	r2, r3, #1
 8011e14:	2030      	movs	r0, #48	; 0x30
 8011e16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011e1a:	4422      	add	r2, r4
 8011e1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011e20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011e24:	3302      	adds	r3, #2
 8011e26:	e7c7      	b.n	8011db8 <_printf_common+0x58>
 8011e28:	2301      	movs	r3, #1
 8011e2a:	4622      	mov	r2, r4
 8011e2c:	4649      	mov	r1, r9
 8011e2e:	4638      	mov	r0, r7
 8011e30:	47c0      	blx	r8
 8011e32:	3001      	adds	r0, #1
 8011e34:	d0e6      	beq.n	8011e04 <_printf_common+0xa4>
 8011e36:	3601      	adds	r6, #1
 8011e38:	e7d9      	b.n	8011dee <_printf_common+0x8e>
	...

08011e3c <_printf_i>:
 8011e3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011e40:	7e0f      	ldrb	r7, [r1, #24]
 8011e42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011e44:	2f78      	cmp	r7, #120	; 0x78
 8011e46:	4691      	mov	r9, r2
 8011e48:	4680      	mov	r8, r0
 8011e4a:	460c      	mov	r4, r1
 8011e4c:	469a      	mov	sl, r3
 8011e4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011e52:	d807      	bhi.n	8011e64 <_printf_i+0x28>
 8011e54:	2f62      	cmp	r7, #98	; 0x62
 8011e56:	d80a      	bhi.n	8011e6e <_printf_i+0x32>
 8011e58:	2f00      	cmp	r7, #0
 8011e5a:	f000 80d8 	beq.w	801200e <_printf_i+0x1d2>
 8011e5e:	2f58      	cmp	r7, #88	; 0x58
 8011e60:	f000 80a3 	beq.w	8011faa <_printf_i+0x16e>
 8011e64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011e68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011e6c:	e03a      	b.n	8011ee4 <_printf_i+0xa8>
 8011e6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011e72:	2b15      	cmp	r3, #21
 8011e74:	d8f6      	bhi.n	8011e64 <_printf_i+0x28>
 8011e76:	a101      	add	r1, pc, #4	; (adr r1, 8011e7c <_printf_i+0x40>)
 8011e78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011e7c:	08011ed5 	.word	0x08011ed5
 8011e80:	08011ee9 	.word	0x08011ee9
 8011e84:	08011e65 	.word	0x08011e65
 8011e88:	08011e65 	.word	0x08011e65
 8011e8c:	08011e65 	.word	0x08011e65
 8011e90:	08011e65 	.word	0x08011e65
 8011e94:	08011ee9 	.word	0x08011ee9
 8011e98:	08011e65 	.word	0x08011e65
 8011e9c:	08011e65 	.word	0x08011e65
 8011ea0:	08011e65 	.word	0x08011e65
 8011ea4:	08011e65 	.word	0x08011e65
 8011ea8:	08011ff5 	.word	0x08011ff5
 8011eac:	08011f19 	.word	0x08011f19
 8011eb0:	08011fd7 	.word	0x08011fd7
 8011eb4:	08011e65 	.word	0x08011e65
 8011eb8:	08011e65 	.word	0x08011e65
 8011ebc:	08012017 	.word	0x08012017
 8011ec0:	08011e65 	.word	0x08011e65
 8011ec4:	08011f19 	.word	0x08011f19
 8011ec8:	08011e65 	.word	0x08011e65
 8011ecc:	08011e65 	.word	0x08011e65
 8011ed0:	08011fdf 	.word	0x08011fdf
 8011ed4:	682b      	ldr	r3, [r5, #0]
 8011ed6:	1d1a      	adds	r2, r3, #4
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	602a      	str	r2, [r5, #0]
 8011edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011ee0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011ee4:	2301      	movs	r3, #1
 8011ee6:	e0a3      	b.n	8012030 <_printf_i+0x1f4>
 8011ee8:	6820      	ldr	r0, [r4, #0]
 8011eea:	6829      	ldr	r1, [r5, #0]
 8011eec:	0606      	lsls	r6, r0, #24
 8011eee:	f101 0304 	add.w	r3, r1, #4
 8011ef2:	d50a      	bpl.n	8011f0a <_printf_i+0xce>
 8011ef4:	680e      	ldr	r6, [r1, #0]
 8011ef6:	602b      	str	r3, [r5, #0]
 8011ef8:	2e00      	cmp	r6, #0
 8011efa:	da03      	bge.n	8011f04 <_printf_i+0xc8>
 8011efc:	232d      	movs	r3, #45	; 0x2d
 8011efe:	4276      	negs	r6, r6
 8011f00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f04:	485e      	ldr	r0, [pc, #376]	; (8012080 <_printf_i+0x244>)
 8011f06:	230a      	movs	r3, #10
 8011f08:	e019      	b.n	8011f3e <_printf_i+0x102>
 8011f0a:	680e      	ldr	r6, [r1, #0]
 8011f0c:	602b      	str	r3, [r5, #0]
 8011f0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011f12:	bf18      	it	ne
 8011f14:	b236      	sxthne	r6, r6
 8011f16:	e7ef      	b.n	8011ef8 <_printf_i+0xbc>
 8011f18:	682b      	ldr	r3, [r5, #0]
 8011f1a:	6820      	ldr	r0, [r4, #0]
 8011f1c:	1d19      	adds	r1, r3, #4
 8011f1e:	6029      	str	r1, [r5, #0]
 8011f20:	0601      	lsls	r1, r0, #24
 8011f22:	d501      	bpl.n	8011f28 <_printf_i+0xec>
 8011f24:	681e      	ldr	r6, [r3, #0]
 8011f26:	e002      	b.n	8011f2e <_printf_i+0xf2>
 8011f28:	0646      	lsls	r6, r0, #25
 8011f2a:	d5fb      	bpl.n	8011f24 <_printf_i+0xe8>
 8011f2c:	881e      	ldrh	r6, [r3, #0]
 8011f2e:	4854      	ldr	r0, [pc, #336]	; (8012080 <_printf_i+0x244>)
 8011f30:	2f6f      	cmp	r7, #111	; 0x6f
 8011f32:	bf0c      	ite	eq
 8011f34:	2308      	moveq	r3, #8
 8011f36:	230a      	movne	r3, #10
 8011f38:	2100      	movs	r1, #0
 8011f3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011f3e:	6865      	ldr	r5, [r4, #4]
 8011f40:	60a5      	str	r5, [r4, #8]
 8011f42:	2d00      	cmp	r5, #0
 8011f44:	bfa2      	ittt	ge
 8011f46:	6821      	ldrge	r1, [r4, #0]
 8011f48:	f021 0104 	bicge.w	r1, r1, #4
 8011f4c:	6021      	strge	r1, [r4, #0]
 8011f4e:	b90e      	cbnz	r6, 8011f54 <_printf_i+0x118>
 8011f50:	2d00      	cmp	r5, #0
 8011f52:	d04d      	beq.n	8011ff0 <_printf_i+0x1b4>
 8011f54:	4615      	mov	r5, r2
 8011f56:	fbb6 f1f3 	udiv	r1, r6, r3
 8011f5a:	fb03 6711 	mls	r7, r3, r1, r6
 8011f5e:	5dc7      	ldrb	r7, [r0, r7]
 8011f60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011f64:	4637      	mov	r7, r6
 8011f66:	42bb      	cmp	r3, r7
 8011f68:	460e      	mov	r6, r1
 8011f6a:	d9f4      	bls.n	8011f56 <_printf_i+0x11a>
 8011f6c:	2b08      	cmp	r3, #8
 8011f6e:	d10b      	bne.n	8011f88 <_printf_i+0x14c>
 8011f70:	6823      	ldr	r3, [r4, #0]
 8011f72:	07de      	lsls	r6, r3, #31
 8011f74:	d508      	bpl.n	8011f88 <_printf_i+0x14c>
 8011f76:	6923      	ldr	r3, [r4, #16]
 8011f78:	6861      	ldr	r1, [r4, #4]
 8011f7a:	4299      	cmp	r1, r3
 8011f7c:	bfde      	ittt	le
 8011f7e:	2330      	movle	r3, #48	; 0x30
 8011f80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011f84:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011f88:	1b52      	subs	r2, r2, r5
 8011f8a:	6122      	str	r2, [r4, #16]
 8011f8c:	f8cd a000 	str.w	sl, [sp]
 8011f90:	464b      	mov	r3, r9
 8011f92:	aa03      	add	r2, sp, #12
 8011f94:	4621      	mov	r1, r4
 8011f96:	4640      	mov	r0, r8
 8011f98:	f7ff fee2 	bl	8011d60 <_printf_common>
 8011f9c:	3001      	adds	r0, #1
 8011f9e:	d14c      	bne.n	801203a <_printf_i+0x1fe>
 8011fa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011fa4:	b004      	add	sp, #16
 8011fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011faa:	4835      	ldr	r0, [pc, #212]	; (8012080 <_printf_i+0x244>)
 8011fac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011fb0:	6829      	ldr	r1, [r5, #0]
 8011fb2:	6823      	ldr	r3, [r4, #0]
 8011fb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8011fb8:	6029      	str	r1, [r5, #0]
 8011fba:	061d      	lsls	r5, r3, #24
 8011fbc:	d514      	bpl.n	8011fe8 <_printf_i+0x1ac>
 8011fbe:	07df      	lsls	r7, r3, #31
 8011fc0:	bf44      	itt	mi
 8011fc2:	f043 0320 	orrmi.w	r3, r3, #32
 8011fc6:	6023      	strmi	r3, [r4, #0]
 8011fc8:	b91e      	cbnz	r6, 8011fd2 <_printf_i+0x196>
 8011fca:	6823      	ldr	r3, [r4, #0]
 8011fcc:	f023 0320 	bic.w	r3, r3, #32
 8011fd0:	6023      	str	r3, [r4, #0]
 8011fd2:	2310      	movs	r3, #16
 8011fd4:	e7b0      	b.n	8011f38 <_printf_i+0xfc>
 8011fd6:	6823      	ldr	r3, [r4, #0]
 8011fd8:	f043 0320 	orr.w	r3, r3, #32
 8011fdc:	6023      	str	r3, [r4, #0]
 8011fde:	2378      	movs	r3, #120	; 0x78
 8011fe0:	4828      	ldr	r0, [pc, #160]	; (8012084 <_printf_i+0x248>)
 8011fe2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011fe6:	e7e3      	b.n	8011fb0 <_printf_i+0x174>
 8011fe8:	0659      	lsls	r1, r3, #25
 8011fea:	bf48      	it	mi
 8011fec:	b2b6      	uxthmi	r6, r6
 8011fee:	e7e6      	b.n	8011fbe <_printf_i+0x182>
 8011ff0:	4615      	mov	r5, r2
 8011ff2:	e7bb      	b.n	8011f6c <_printf_i+0x130>
 8011ff4:	682b      	ldr	r3, [r5, #0]
 8011ff6:	6826      	ldr	r6, [r4, #0]
 8011ff8:	6961      	ldr	r1, [r4, #20]
 8011ffa:	1d18      	adds	r0, r3, #4
 8011ffc:	6028      	str	r0, [r5, #0]
 8011ffe:	0635      	lsls	r5, r6, #24
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	d501      	bpl.n	8012008 <_printf_i+0x1cc>
 8012004:	6019      	str	r1, [r3, #0]
 8012006:	e002      	b.n	801200e <_printf_i+0x1d2>
 8012008:	0670      	lsls	r0, r6, #25
 801200a:	d5fb      	bpl.n	8012004 <_printf_i+0x1c8>
 801200c:	8019      	strh	r1, [r3, #0]
 801200e:	2300      	movs	r3, #0
 8012010:	6123      	str	r3, [r4, #16]
 8012012:	4615      	mov	r5, r2
 8012014:	e7ba      	b.n	8011f8c <_printf_i+0x150>
 8012016:	682b      	ldr	r3, [r5, #0]
 8012018:	1d1a      	adds	r2, r3, #4
 801201a:	602a      	str	r2, [r5, #0]
 801201c:	681d      	ldr	r5, [r3, #0]
 801201e:	6862      	ldr	r2, [r4, #4]
 8012020:	2100      	movs	r1, #0
 8012022:	4628      	mov	r0, r5
 8012024:	f7ee f8f4 	bl	8000210 <memchr>
 8012028:	b108      	cbz	r0, 801202e <_printf_i+0x1f2>
 801202a:	1b40      	subs	r0, r0, r5
 801202c:	6060      	str	r0, [r4, #4]
 801202e:	6863      	ldr	r3, [r4, #4]
 8012030:	6123      	str	r3, [r4, #16]
 8012032:	2300      	movs	r3, #0
 8012034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012038:	e7a8      	b.n	8011f8c <_printf_i+0x150>
 801203a:	6923      	ldr	r3, [r4, #16]
 801203c:	462a      	mov	r2, r5
 801203e:	4649      	mov	r1, r9
 8012040:	4640      	mov	r0, r8
 8012042:	47d0      	blx	sl
 8012044:	3001      	adds	r0, #1
 8012046:	d0ab      	beq.n	8011fa0 <_printf_i+0x164>
 8012048:	6823      	ldr	r3, [r4, #0]
 801204a:	079b      	lsls	r3, r3, #30
 801204c:	d413      	bmi.n	8012076 <_printf_i+0x23a>
 801204e:	68e0      	ldr	r0, [r4, #12]
 8012050:	9b03      	ldr	r3, [sp, #12]
 8012052:	4298      	cmp	r0, r3
 8012054:	bfb8      	it	lt
 8012056:	4618      	movlt	r0, r3
 8012058:	e7a4      	b.n	8011fa4 <_printf_i+0x168>
 801205a:	2301      	movs	r3, #1
 801205c:	4632      	mov	r2, r6
 801205e:	4649      	mov	r1, r9
 8012060:	4640      	mov	r0, r8
 8012062:	47d0      	blx	sl
 8012064:	3001      	adds	r0, #1
 8012066:	d09b      	beq.n	8011fa0 <_printf_i+0x164>
 8012068:	3501      	adds	r5, #1
 801206a:	68e3      	ldr	r3, [r4, #12]
 801206c:	9903      	ldr	r1, [sp, #12]
 801206e:	1a5b      	subs	r3, r3, r1
 8012070:	42ab      	cmp	r3, r5
 8012072:	dcf2      	bgt.n	801205a <_printf_i+0x21e>
 8012074:	e7eb      	b.n	801204e <_printf_i+0x212>
 8012076:	2500      	movs	r5, #0
 8012078:	f104 0619 	add.w	r6, r4, #25
 801207c:	e7f5      	b.n	801206a <_printf_i+0x22e>
 801207e:	bf00      	nop
 8012080:	08014272 	.word	0x08014272
 8012084:	08014283 	.word	0x08014283

08012088 <iprintf>:
 8012088:	b40f      	push	{r0, r1, r2, r3}
 801208a:	4b0a      	ldr	r3, [pc, #40]	; (80120b4 <iprintf+0x2c>)
 801208c:	b513      	push	{r0, r1, r4, lr}
 801208e:	681c      	ldr	r4, [r3, #0]
 8012090:	b124      	cbz	r4, 801209c <iprintf+0x14>
 8012092:	69a3      	ldr	r3, [r4, #24]
 8012094:	b913      	cbnz	r3, 801209c <iprintf+0x14>
 8012096:	4620      	mov	r0, r4
 8012098:	f000 ff10 	bl	8012ebc <__sinit>
 801209c:	ab05      	add	r3, sp, #20
 801209e:	9a04      	ldr	r2, [sp, #16]
 80120a0:	68a1      	ldr	r1, [r4, #8]
 80120a2:	9301      	str	r3, [sp, #4]
 80120a4:	4620      	mov	r0, r4
 80120a6:	f001 fba3 	bl	80137f0 <_vfiprintf_r>
 80120aa:	b002      	add	sp, #8
 80120ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120b0:	b004      	add	sp, #16
 80120b2:	4770      	bx	lr
 80120b4:	2000018c 	.word	0x2000018c

080120b8 <_sbrk_r>:
 80120b8:	b538      	push	{r3, r4, r5, lr}
 80120ba:	4d06      	ldr	r5, [pc, #24]	; (80120d4 <_sbrk_r+0x1c>)
 80120bc:	2300      	movs	r3, #0
 80120be:	4604      	mov	r4, r0
 80120c0:	4608      	mov	r0, r1
 80120c2:	602b      	str	r3, [r5, #0]
 80120c4:	f001 ffea 	bl	801409c <_sbrk>
 80120c8:	1c43      	adds	r3, r0, #1
 80120ca:	d102      	bne.n	80120d2 <_sbrk_r+0x1a>
 80120cc:	682b      	ldr	r3, [r5, #0]
 80120ce:	b103      	cbz	r3, 80120d2 <_sbrk_r+0x1a>
 80120d0:	6023      	str	r3, [r4, #0]
 80120d2:	bd38      	pop	{r3, r4, r5, pc}
 80120d4:	200029ac 	.word	0x200029ac

080120d8 <__assert_func>:
 80120d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80120da:	4614      	mov	r4, r2
 80120dc:	461a      	mov	r2, r3
 80120de:	4b09      	ldr	r3, [pc, #36]	; (8012104 <__assert_func+0x2c>)
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	4605      	mov	r5, r0
 80120e4:	68d8      	ldr	r0, [r3, #12]
 80120e6:	b14c      	cbz	r4, 80120fc <__assert_func+0x24>
 80120e8:	4b07      	ldr	r3, [pc, #28]	; (8012108 <__assert_func+0x30>)
 80120ea:	9100      	str	r1, [sp, #0]
 80120ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80120f0:	4906      	ldr	r1, [pc, #24]	; (801210c <__assert_func+0x34>)
 80120f2:	462b      	mov	r3, r5
 80120f4:	f000 ff60 	bl	8012fb8 <fiprintf>
 80120f8:	f001 fdce 	bl	8013c98 <abort>
 80120fc:	4b04      	ldr	r3, [pc, #16]	; (8012110 <__assert_func+0x38>)
 80120fe:	461c      	mov	r4, r3
 8012100:	e7f3      	b.n	80120ea <__assert_func+0x12>
 8012102:	bf00      	nop
 8012104:	2000018c 	.word	0x2000018c
 8012108:	08014294 	.word	0x08014294
 801210c:	080142a1 	.word	0x080142a1
 8012110:	080142cf 	.word	0x080142cf

08012114 <quorem>:
 8012114:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012118:	6903      	ldr	r3, [r0, #16]
 801211a:	690c      	ldr	r4, [r1, #16]
 801211c:	42a3      	cmp	r3, r4
 801211e:	4607      	mov	r7, r0
 8012120:	f2c0 8081 	blt.w	8012226 <quorem+0x112>
 8012124:	3c01      	subs	r4, #1
 8012126:	f101 0814 	add.w	r8, r1, #20
 801212a:	f100 0514 	add.w	r5, r0, #20
 801212e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012132:	9301      	str	r3, [sp, #4]
 8012134:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012138:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801213c:	3301      	adds	r3, #1
 801213e:	429a      	cmp	r2, r3
 8012140:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012144:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012148:	fbb2 f6f3 	udiv	r6, r2, r3
 801214c:	d331      	bcc.n	80121b2 <quorem+0x9e>
 801214e:	f04f 0e00 	mov.w	lr, #0
 8012152:	4640      	mov	r0, r8
 8012154:	46ac      	mov	ip, r5
 8012156:	46f2      	mov	sl, lr
 8012158:	f850 2b04 	ldr.w	r2, [r0], #4
 801215c:	b293      	uxth	r3, r2
 801215e:	fb06 e303 	mla	r3, r6, r3, lr
 8012162:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012166:	b29b      	uxth	r3, r3
 8012168:	ebaa 0303 	sub.w	r3, sl, r3
 801216c:	f8dc a000 	ldr.w	sl, [ip]
 8012170:	0c12      	lsrs	r2, r2, #16
 8012172:	fa13 f38a 	uxtah	r3, r3, sl
 8012176:	fb06 e202 	mla	r2, r6, r2, lr
 801217a:	9300      	str	r3, [sp, #0]
 801217c:	9b00      	ldr	r3, [sp, #0]
 801217e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012182:	b292      	uxth	r2, r2
 8012184:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012188:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801218c:	f8bd 3000 	ldrh.w	r3, [sp]
 8012190:	4581      	cmp	r9, r0
 8012192:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012196:	f84c 3b04 	str.w	r3, [ip], #4
 801219a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801219e:	d2db      	bcs.n	8012158 <quorem+0x44>
 80121a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80121a4:	b92b      	cbnz	r3, 80121b2 <quorem+0x9e>
 80121a6:	9b01      	ldr	r3, [sp, #4]
 80121a8:	3b04      	subs	r3, #4
 80121aa:	429d      	cmp	r5, r3
 80121ac:	461a      	mov	r2, r3
 80121ae:	d32e      	bcc.n	801220e <quorem+0xfa>
 80121b0:	613c      	str	r4, [r7, #16]
 80121b2:	4638      	mov	r0, r7
 80121b4:	f001 f9da 	bl	801356c <__mcmp>
 80121b8:	2800      	cmp	r0, #0
 80121ba:	db24      	blt.n	8012206 <quorem+0xf2>
 80121bc:	3601      	adds	r6, #1
 80121be:	4628      	mov	r0, r5
 80121c0:	f04f 0c00 	mov.w	ip, #0
 80121c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80121c8:	f8d0 e000 	ldr.w	lr, [r0]
 80121cc:	b293      	uxth	r3, r2
 80121ce:	ebac 0303 	sub.w	r3, ip, r3
 80121d2:	0c12      	lsrs	r2, r2, #16
 80121d4:	fa13 f38e 	uxtah	r3, r3, lr
 80121d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80121dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80121e0:	b29b      	uxth	r3, r3
 80121e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80121e6:	45c1      	cmp	r9, r8
 80121e8:	f840 3b04 	str.w	r3, [r0], #4
 80121ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80121f0:	d2e8      	bcs.n	80121c4 <quorem+0xb0>
 80121f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80121f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80121fa:	b922      	cbnz	r2, 8012206 <quorem+0xf2>
 80121fc:	3b04      	subs	r3, #4
 80121fe:	429d      	cmp	r5, r3
 8012200:	461a      	mov	r2, r3
 8012202:	d30a      	bcc.n	801221a <quorem+0x106>
 8012204:	613c      	str	r4, [r7, #16]
 8012206:	4630      	mov	r0, r6
 8012208:	b003      	add	sp, #12
 801220a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801220e:	6812      	ldr	r2, [r2, #0]
 8012210:	3b04      	subs	r3, #4
 8012212:	2a00      	cmp	r2, #0
 8012214:	d1cc      	bne.n	80121b0 <quorem+0x9c>
 8012216:	3c01      	subs	r4, #1
 8012218:	e7c7      	b.n	80121aa <quorem+0x96>
 801221a:	6812      	ldr	r2, [r2, #0]
 801221c:	3b04      	subs	r3, #4
 801221e:	2a00      	cmp	r2, #0
 8012220:	d1f0      	bne.n	8012204 <quorem+0xf0>
 8012222:	3c01      	subs	r4, #1
 8012224:	e7eb      	b.n	80121fe <quorem+0xea>
 8012226:	2000      	movs	r0, #0
 8012228:	e7ee      	b.n	8012208 <quorem+0xf4>
 801222a:	0000      	movs	r0, r0
 801222c:	0000      	movs	r0, r0
	...

08012230 <_dtoa_r>:
 8012230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012234:	ed2d 8b04 	vpush	{d8-d9}
 8012238:	ec57 6b10 	vmov	r6, r7, d0
 801223c:	b093      	sub	sp, #76	; 0x4c
 801223e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012240:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012244:	9106      	str	r1, [sp, #24]
 8012246:	ee10 aa10 	vmov	sl, s0
 801224a:	4604      	mov	r4, r0
 801224c:	9209      	str	r2, [sp, #36]	; 0x24
 801224e:	930c      	str	r3, [sp, #48]	; 0x30
 8012250:	46bb      	mov	fp, r7
 8012252:	b975      	cbnz	r5, 8012272 <_dtoa_r+0x42>
 8012254:	2010      	movs	r0, #16
 8012256:	f7ff f9af 	bl	80115b8 <malloc>
 801225a:	4602      	mov	r2, r0
 801225c:	6260      	str	r0, [r4, #36]	; 0x24
 801225e:	b920      	cbnz	r0, 801226a <_dtoa_r+0x3a>
 8012260:	4ba7      	ldr	r3, [pc, #668]	; (8012500 <_dtoa_r+0x2d0>)
 8012262:	21ea      	movs	r1, #234	; 0xea
 8012264:	48a7      	ldr	r0, [pc, #668]	; (8012504 <_dtoa_r+0x2d4>)
 8012266:	f7ff ff37 	bl	80120d8 <__assert_func>
 801226a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801226e:	6005      	str	r5, [r0, #0]
 8012270:	60c5      	str	r5, [r0, #12]
 8012272:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012274:	6819      	ldr	r1, [r3, #0]
 8012276:	b151      	cbz	r1, 801228e <_dtoa_r+0x5e>
 8012278:	685a      	ldr	r2, [r3, #4]
 801227a:	604a      	str	r2, [r1, #4]
 801227c:	2301      	movs	r3, #1
 801227e:	4093      	lsls	r3, r2
 8012280:	608b      	str	r3, [r1, #8]
 8012282:	4620      	mov	r0, r4
 8012284:	f000 ff30 	bl	80130e8 <_Bfree>
 8012288:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801228a:	2200      	movs	r2, #0
 801228c:	601a      	str	r2, [r3, #0]
 801228e:	1e3b      	subs	r3, r7, #0
 8012290:	bfaa      	itet	ge
 8012292:	2300      	movge	r3, #0
 8012294:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8012298:	f8c8 3000 	strge.w	r3, [r8]
 801229c:	4b9a      	ldr	r3, [pc, #616]	; (8012508 <_dtoa_r+0x2d8>)
 801229e:	bfbc      	itt	lt
 80122a0:	2201      	movlt	r2, #1
 80122a2:	f8c8 2000 	strlt.w	r2, [r8]
 80122a6:	ea33 030b 	bics.w	r3, r3, fp
 80122aa:	d11b      	bne.n	80122e4 <_dtoa_r+0xb4>
 80122ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80122ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80122b2:	6013      	str	r3, [r2, #0]
 80122b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80122b8:	4333      	orrs	r3, r6
 80122ba:	f000 8592 	beq.w	8012de2 <_dtoa_r+0xbb2>
 80122be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80122c0:	b963      	cbnz	r3, 80122dc <_dtoa_r+0xac>
 80122c2:	4b92      	ldr	r3, [pc, #584]	; (801250c <_dtoa_r+0x2dc>)
 80122c4:	e022      	b.n	801230c <_dtoa_r+0xdc>
 80122c6:	4b92      	ldr	r3, [pc, #584]	; (8012510 <_dtoa_r+0x2e0>)
 80122c8:	9301      	str	r3, [sp, #4]
 80122ca:	3308      	adds	r3, #8
 80122cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80122ce:	6013      	str	r3, [r2, #0]
 80122d0:	9801      	ldr	r0, [sp, #4]
 80122d2:	b013      	add	sp, #76	; 0x4c
 80122d4:	ecbd 8b04 	vpop	{d8-d9}
 80122d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122dc:	4b8b      	ldr	r3, [pc, #556]	; (801250c <_dtoa_r+0x2dc>)
 80122de:	9301      	str	r3, [sp, #4]
 80122e0:	3303      	adds	r3, #3
 80122e2:	e7f3      	b.n	80122cc <_dtoa_r+0x9c>
 80122e4:	2200      	movs	r2, #0
 80122e6:	2300      	movs	r3, #0
 80122e8:	4650      	mov	r0, sl
 80122ea:	4659      	mov	r1, fp
 80122ec:	f7ee fc04 	bl	8000af8 <__aeabi_dcmpeq>
 80122f0:	ec4b ab19 	vmov	d9, sl, fp
 80122f4:	4680      	mov	r8, r0
 80122f6:	b158      	cbz	r0, 8012310 <_dtoa_r+0xe0>
 80122f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80122fa:	2301      	movs	r3, #1
 80122fc:	6013      	str	r3, [r2, #0]
 80122fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012300:	2b00      	cmp	r3, #0
 8012302:	f000 856b 	beq.w	8012ddc <_dtoa_r+0xbac>
 8012306:	4883      	ldr	r0, [pc, #524]	; (8012514 <_dtoa_r+0x2e4>)
 8012308:	6018      	str	r0, [r3, #0]
 801230a:	1e43      	subs	r3, r0, #1
 801230c:	9301      	str	r3, [sp, #4]
 801230e:	e7df      	b.n	80122d0 <_dtoa_r+0xa0>
 8012310:	ec4b ab10 	vmov	d0, sl, fp
 8012314:	aa10      	add	r2, sp, #64	; 0x40
 8012316:	a911      	add	r1, sp, #68	; 0x44
 8012318:	4620      	mov	r0, r4
 801231a:	f001 f9cd 	bl	80136b8 <__d2b>
 801231e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8012322:	ee08 0a10 	vmov	s16, r0
 8012326:	2d00      	cmp	r5, #0
 8012328:	f000 8084 	beq.w	8012434 <_dtoa_r+0x204>
 801232c:	ee19 3a90 	vmov	r3, s19
 8012330:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012334:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012338:	4656      	mov	r6, sl
 801233a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801233e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012342:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8012346:	4b74      	ldr	r3, [pc, #464]	; (8012518 <_dtoa_r+0x2e8>)
 8012348:	2200      	movs	r2, #0
 801234a:	4630      	mov	r0, r6
 801234c:	4639      	mov	r1, r7
 801234e:	f7ed ffb3 	bl	80002b8 <__aeabi_dsub>
 8012352:	a365      	add	r3, pc, #404	; (adr r3, 80124e8 <_dtoa_r+0x2b8>)
 8012354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012358:	f7ee f966 	bl	8000628 <__aeabi_dmul>
 801235c:	a364      	add	r3, pc, #400	; (adr r3, 80124f0 <_dtoa_r+0x2c0>)
 801235e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012362:	f7ed ffab 	bl	80002bc <__adddf3>
 8012366:	4606      	mov	r6, r0
 8012368:	4628      	mov	r0, r5
 801236a:	460f      	mov	r7, r1
 801236c:	f7ee f8f2 	bl	8000554 <__aeabi_i2d>
 8012370:	a361      	add	r3, pc, #388	; (adr r3, 80124f8 <_dtoa_r+0x2c8>)
 8012372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012376:	f7ee f957 	bl	8000628 <__aeabi_dmul>
 801237a:	4602      	mov	r2, r0
 801237c:	460b      	mov	r3, r1
 801237e:	4630      	mov	r0, r6
 8012380:	4639      	mov	r1, r7
 8012382:	f7ed ff9b 	bl	80002bc <__adddf3>
 8012386:	4606      	mov	r6, r0
 8012388:	460f      	mov	r7, r1
 801238a:	f7ee fbfd 	bl	8000b88 <__aeabi_d2iz>
 801238e:	2200      	movs	r2, #0
 8012390:	9000      	str	r0, [sp, #0]
 8012392:	2300      	movs	r3, #0
 8012394:	4630      	mov	r0, r6
 8012396:	4639      	mov	r1, r7
 8012398:	f7ee fbb8 	bl	8000b0c <__aeabi_dcmplt>
 801239c:	b150      	cbz	r0, 80123b4 <_dtoa_r+0x184>
 801239e:	9800      	ldr	r0, [sp, #0]
 80123a0:	f7ee f8d8 	bl	8000554 <__aeabi_i2d>
 80123a4:	4632      	mov	r2, r6
 80123a6:	463b      	mov	r3, r7
 80123a8:	f7ee fba6 	bl	8000af8 <__aeabi_dcmpeq>
 80123ac:	b910      	cbnz	r0, 80123b4 <_dtoa_r+0x184>
 80123ae:	9b00      	ldr	r3, [sp, #0]
 80123b0:	3b01      	subs	r3, #1
 80123b2:	9300      	str	r3, [sp, #0]
 80123b4:	9b00      	ldr	r3, [sp, #0]
 80123b6:	2b16      	cmp	r3, #22
 80123b8:	d85a      	bhi.n	8012470 <_dtoa_r+0x240>
 80123ba:	9a00      	ldr	r2, [sp, #0]
 80123bc:	4b57      	ldr	r3, [pc, #348]	; (801251c <_dtoa_r+0x2ec>)
 80123be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80123c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c6:	ec51 0b19 	vmov	r0, r1, d9
 80123ca:	f7ee fb9f 	bl	8000b0c <__aeabi_dcmplt>
 80123ce:	2800      	cmp	r0, #0
 80123d0:	d050      	beq.n	8012474 <_dtoa_r+0x244>
 80123d2:	9b00      	ldr	r3, [sp, #0]
 80123d4:	3b01      	subs	r3, #1
 80123d6:	9300      	str	r3, [sp, #0]
 80123d8:	2300      	movs	r3, #0
 80123da:	930b      	str	r3, [sp, #44]	; 0x2c
 80123dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80123de:	1b5d      	subs	r5, r3, r5
 80123e0:	1e6b      	subs	r3, r5, #1
 80123e2:	9305      	str	r3, [sp, #20]
 80123e4:	bf45      	ittet	mi
 80123e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80123ea:	9304      	strmi	r3, [sp, #16]
 80123ec:	2300      	movpl	r3, #0
 80123ee:	2300      	movmi	r3, #0
 80123f0:	bf4c      	ite	mi
 80123f2:	9305      	strmi	r3, [sp, #20]
 80123f4:	9304      	strpl	r3, [sp, #16]
 80123f6:	9b00      	ldr	r3, [sp, #0]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	db3d      	blt.n	8012478 <_dtoa_r+0x248>
 80123fc:	9b05      	ldr	r3, [sp, #20]
 80123fe:	9a00      	ldr	r2, [sp, #0]
 8012400:	920a      	str	r2, [sp, #40]	; 0x28
 8012402:	4413      	add	r3, r2
 8012404:	9305      	str	r3, [sp, #20]
 8012406:	2300      	movs	r3, #0
 8012408:	9307      	str	r3, [sp, #28]
 801240a:	9b06      	ldr	r3, [sp, #24]
 801240c:	2b09      	cmp	r3, #9
 801240e:	f200 8089 	bhi.w	8012524 <_dtoa_r+0x2f4>
 8012412:	2b05      	cmp	r3, #5
 8012414:	bfc4      	itt	gt
 8012416:	3b04      	subgt	r3, #4
 8012418:	9306      	strgt	r3, [sp, #24]
 801241a:	9b06      	ldr	r3, [sp, #24]
 801241c:	f1a3 0302 	sub.w	r3, r3, #2
 8012420:	bfcc      	ite	gt
 8012422:	2500      	movgt	r5, #0
 8012424:	2501      	movle	r5, #1
 8012426:	2b03      	cmp	r3, #3
 8012428:	f200 8087 	bhi.w	801253a <_dtoa_r+0x30a>
 801242c:	e8df f003 	tbb	[pc, r3]
 8012430:	59383a2d 	.word	0x59383a2d
 8012434:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012438:	441d      	add	r5, r3
 801243a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801243e:	2b20      	cmp	r3, #32
 8012440:	bfc1      	itttt	gt
 8012442:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012446:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801244a:	fa0b f303 	lslgt.w	r3, fp, r3
 801244e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012452:	bfda      	itte	le
 8012454:	f1c3 0320 	rsble	r3, r3, #32
 8012458:	fa06 f003 	lslle.w	r0, r6, r3
 801245c:	4318      	orrgt	r0, r3
 801245e:	f7ee f869 	bl	8000534 <__aeabi_ui2d>
 8012462:	2301      	movs	r3, #1
 8012464:	4606      	mov	r6, r0
 8012466:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801246a:	3d01      	subs	r5, #1
 801246c:	930e      	str	r3, [sp, #56]	; 0x38
 801246e:	e76a      	b.n	8012346 <_dtoa_r+0x116>
 8012470:	2301      	movs	r3, #1
 8012472:	e7b2      	b.n	80123da <_dtoa_r+0x1aa>
 8012474:	900b      	str	r0, [sp, #44]	; 0x2c
 8012476:	e7b1      	b.n	80123dc <_dtoa_r+0x1ac>
 8012478:	9b04      	ldr	r3, [sp, #16]
 801247a:	9a00      	ldr	r2, [sp, #0]
 801247c:	1a9b      	subs	r3, r3, r2
 801247e:	9304      	str	r3, [sp, #16]
 8012480:	4253      	negs	r3, r2
 8012482:	9307      	str	r3, [sp, #28]
 8012484:	2300      	movs	r3, #0
 8012486:	930a      	str	r3, [sp, #40]	; 0x28
 8012488:	e7bf      	b.n	801240a <_dtoa_r+0x1da>
 801248a:	2300      	movs	r3, #0
 801248c:	9308      	str	r3, [sp, #32]
 801248e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012490:	2b00      	cmp	r3, #0
 8012492:	dc55      	bgt.n	8012540 <_dtoa_r+0x310>
 8012494:	2301      	movs	r3, #1
 8012496:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801249a:	461a      	mov	r2, r3
 801249c:	9209      	str	r2, [sp, #36]	; 0x24
 801249e:	e00c      	b.n	80124ba <_dtoa_r+0x28a>
 80124a0:	2301      	movs	r3, #1
 80124a2:	e7f3      	b.n	801248c <_dtoa_r+0x25c>
 80124a4:	2300      	movs	r3, #0
 80124a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80124a8:	9308      	str	r3, [sp, #32]
 80124aa:	9b00      	ldr	r3, [sp, #0]
 80124ac:	4413      	add	r3, r2
 80124ae:	9302      	str	r3, [sp, #8]
 80124b0:	3301      	adds	r3, #1
 80124b2:	2b01      	cmp	r3, #1
 80124b4:	9303      	str	r3, [sp, #12]
 80124b6:	bfb8      	it	lt
 80124b8:	2301      	movlt	r3, #1
 80124ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80124bc:	2200      	movs	r2, #0
 80124be:	6042      	str	r2, [r0, #4]
 80124c0:	2204      	movs	r2, #4
 80124c2:	f102 0614 	add.w	r6, r2, #20
 80124c6:	429e      	cmp	r6, r3
 80124c8:	6841      	ldr	r1, [r0, #4]
 80124ca:	d93d      	bls.n	8012548 <_dtoa_r+0x318>
 80124cc:	4620      	mov	r0, r4
 80124ce:	f000 fdcb 	bl	8013068 <_Balloc>
 80124d2:	9001      	str	r0, [sp, #4]
 80124d4:	2800      	cmp	r0, #0
 80124d6:	d13b      	bne.n	8012550 <_dtoa_r+0x320>
 80124d8:	4b11      	ldr	r3, [pc, #68]	; (8012520 <_dtoa_r+0x2f0>)
 80124da:	4602      	mov	r2, r0
 80124dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80124e0:	e6c0      	b.n	8012264 <_dtoa_r+0x34>
 80124e2:	2301      	movs	r3, #1
 80124e4:	e7df      	b.n	80124a6 <_dtoa_r+0x276>
 80124e6:	bf00      	nop
 80124e8:	636f4361 	.word	0x636f4361
 80124ec:	3fd287a7 	.word	0x3fd287a7
 80124f0:	8b60c8b3 	.word	0x8b60c8b3
 80124f4:	3fc68a28 	.word	0x3fc68a28
 80124f8:	509f79fb 	.word	0x509f79fb
 80124fc:	3fd34413 	.word	0x3fd34413
 8012500:	080143de 	.word	0x080143de
 8012504:	080143f5 	.word	0x080143f5
 8012508:	7ff00000 	.word	0x7ff00000
 801250c:	080143da 	.word	0x080143da
 8012510:	080143d1 	.word	0x080143d1
 8012514:	08014271 	.word	0x08014271
 8012518:	3ff80000 	.word	0x3ff80000
 801251c:	08014558 	.word	0x08014558
 8012520:	08014450 	.word	0x08014450
 8012524:	2501      	movs	r5, #1
 8012526:	2300      	movs	r3, #0
 8012528:	9306      	str	r3, [sp, #24]
 801252a:	9508      	str	r5, [sp, #32]
 801252c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012530:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012534:	2200      	movs	r2, #0
 8012536:	2312      	movs	r3, #18
 8012538:	e7b0      	b.n	801249c <_dtoa_r+0x26c>
 801253a:	2301      	movs	r3, #1
 801253c:	9308      	str	r3, [sp, #32]
 801253e:	e7f5      	b.n	801252c <_dtoa_r+0x2fc>
 8012540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012542:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012546:	e7b8      	b.n	80124ba <_dtoa_r+0x28a>
 8012548:	3101      	adds	r1, #1
 801254a:	6041      	str	r1, [r0, #4]
 801254c:	0052      	lsls	r2, r2, #1
 801254e:	e7b8      	b.n	80124c2 <_dtoa_r+0x292>
 8012550:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012552:	9a01      	ldr	r2, [sp, #4]
 8012554:	601a      	str	r2, [r3, #0]
 8012556:	9b03      	ldr	r3, [sp, #12]
 8012558:	2b0e      	cmp	r3, #14
 801255a:	f200 809d 	bhi.w	8012698 <_dtoa_r+0x468>
 801255e:	2d00      	cmp	r5, #0
 8012560:	f000 809a 	beq.w	8012698 <_dtoa_r+0x468>
 8012564:	9b00      	ldr	r3, [sp, #0]
 8012566:	2b00      	cmp	r3, #0
 8012568:	dd32      	ble.n	80125d0 <_dtoa_r+0x3a0>
 801256a:	4ab7      	ldr	r2, [pc, #732]	; (8012848 <_dtoa_r+0x618>)
 801256c:	f003 030f 	and.w	r3, r3, #15
 8012570:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012574:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012578:	9b00      	ldr	r3, [sp, #0]
 801257a:	05d8      	lsls	r0, r3, #23
 801257c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8012580:	d516      	bpl.n	80125b0 <_dtoa_r+0x380>
 8012582:	4bb2      	ldr	r3, [pc, #712]	; (801284c <_dtoa_r+0x61c>)
 8012584:	ec51 0b19 	vmov	r0, r1, d9
 8012588:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801258c:	f7ee f976 	bl	800087c <__aeabi_ddiv>
 8012590:	f007 070f 	and.w	r7, r7, #15
 8012594:	4682      	mov	sl, r0
 8012596:	468b      	mov	fp, r1
 8012598:	2503      	movs	r5, #3
 801259a:	4eac      	ldr	r6, [pc, #688]	; (801284c <_dtoa_r+0x61c>)
 801259c:	b957      	cbnz	r7, 80125b4 <_dtoa_r+0x384>
 801259e:	4642      	mov	r2, r8
 80125a0:	464b      	mov	r3, r9
 80125a2:	4650      	mov	r0, sl
 80125a4:	4659      	mov	r1, fp
 80125a6:	f7ee f969 	bl	800087c <__aeabi_ddiv>
 80125aa:	4682      	mov	sl, r0
 80125ac:	468b      	mov	fp, r1
 80125ae:	e028      	b.n	8012602 <_dtoa_r+0x3d2>
 80125b0:	2502      	movs	r5, #2
 80125b2:	e7f2      	b.n	801259a <_dtoa_r+0x36a>
 80125b4:	07f9      	lsls	r1, r7, #31
 80125b6:	d508      	bpl.n	80125ca <_dtoa_r+0x39a>
 80125b8:	4640      	mov	r0, r8
 80125ba:	4649      	mov	r1, r9
 80125bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80125c0:	f7ee f832 	bl	8000628 <__aeabi_dmul>
 80125c4:	3501      	adds	r5, #1
 80125c6:	4680      	mov	r8, r0
 80125c8:	4689      	mov	r9, r1
 80125ca:	107f      	asrs	r7, r7, #1
 80125cc:	3608      	adds	r6, #8
 80125ce:	e7e5      	b.n	801259c <_dtoa_r+0x36c>
 80125d0:	f000 809b 	beq.w	801270a <_dtoa_r+0x4da>
 80125d4:	9b00      	ldr	r3, [sp, #0]
 80125d6:	4f9d      	ldr	r7, [pc, #628]	; (801284c <_dtoa_r+0x61c>)
 80125d8:	425e      	negs	r6, r3
 80125da:	4b9b      	ldr	r3, [pc, #620]	; (8012848 <_dtoa_r+0x618>)
 80125dc:	f006 020f 	and.w	r2, r6, #15
 80125e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80125e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125e8:	ec51 0b19 	vmov	r0, r1, d9
 80125ec:	f7ee f81c 	bl	8000628 <__aeabi_dmul>
 80125f0:	1136      	asrs	r6, r6, #4
 80125f2:	4682      	mov	sl, r0
 80125f4:	468b      	mov	fp, r1
 80125f6:	2300      	movs	r3, #0
 80125f8:	2502      	movs	r5, #2
 80125fa:	2e00      	cmp	r6, #0
 80125fc:	d17a      	bne.n	80126f4 <_dtoa_r+0x4c4>
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d1d3      	bne.n	80125aa <_dtoa_r+0x37a>
 8012602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012604:	2b00      	cmp	r3, #0
 8012606:	f000 8082 	beq.w	801270e <_dtoa_r+0x4de>
 801260a:	4b91      	ldr	r3, [pc, #580]	; (8012850 <_dtoa_r+0x620>)
 801260c:	2200      	movs	r2, #0
 801260e:	4650      	mov	r0, sl
 8012610:	4659      	mov	r1, fp
 8012612:	f7ee fa7b 	bl	8000b0c <__aeabi_dcmplt>
 8012616:	2800      	cmp	r0, #0
 8012618:	d079      	beq.n	801270e <_dtoa_r+0x4de>
 801261a:	9b03      	ldr	r3, [sp, #12]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d076      	beq.n	801270e <_dtoa_r+0x4de>
 8012620:	9b02      	ldr	r3, [sp, #8]
 8012622:	2b00      	cmp	r3, #0
 8012624:	dd36      	ble.n	8012694 <_dtoa_r+0x464>
 8012626:	9b00      	ldr	r3, [sp, #0]
 8012628:	4650      	mov	r0, sl
 801262a:	4659      	mov	r1, fp
 801262c:	1e5f      	subs	r7, r3, #1
 801262e:	2200      	movs	r2, #0
 8012630:	4b88      	ldr	r3, [pc, #544]	; (8012854 <_dtoa_r+0x624>)
 8012632:	f7ed fff9 	bl	8000628 <__aeabi_dmul>
 8012636:	9e02      	ldr	r6, [sp, #8]
 8012638:	4682      	mov	sl, r0
 801263a:	468b      	mov	fp, r1
 801263c:	3501      	adds	r5, #1
 801263e:	4628      	mov	r0, r5
 8012640:	f7ed ff88 	bl	8000554 <__aeabi_i2d>
 8012644:	4652      	mov	r2, sl
 8012646:	465b      	mov	r3, fp
 8012648:	f7ed ffee 	bl	8000628 <__aeabi_dmul>
 801264c:	4b82      	ldr	r3, [pc, #520]	; (8012858 <_dtoa_r+0x628>)
 801264e:	2200      	movs	r2, #0
 8012650:	f7ed fe34 	bl	80002bc <__adddf3>
 8012654:	46d0      	mov	r8, sl
 8012656:	46d9      	mov	r9, fp
 8012658:	4682      	mov	sl, r0
 801265a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801265e:	2e00      	cmp	r6, #0
 8012660:	d158      	bne.n	8012714 <_dtoa_r+0x4e4>
 8012662:	4b7e      	ldr	r3, [pc, #504]	; (801285c <_dtoa_r+0x62c>)
 8012664:	2200      	movs	r2, #0
 8012666:	4640      	mov	r0, r8
 8012668:	4649      	mov	r1, r9
 801266a:	f7ed fe25 	bl	80002b8 <__aeabi_dsub>
 801266e:	4652      	mov	r2, sl
 8012670:	465b      	mov	r3, fp
 8012672:	4680      	mov	r8, r0
 8012674:	4689      	mov	r9, r1
 8012676:	f7ee fa67 	bl	8000b48 <__aeabi_dcmpgt>
 801267a:	2800      	cmp	r0, #0
 801267c:	f040 8295 	bne.w	8012baa <_dtoa_r+0x97a>
 8012680:	4652      	mov	r2, sl
 8012682:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012686:	4640      	mov	r0, r8
 8012688:	4649      	mov	r1, r9
 801268a:	f7ee fa3f 	bl	8000b0c <__aeabi_dcmplt>
 801268e:	2800      	cmp	r0, #0
 8012690:	f040 8289 	bne.w	8012ba6 <_dtoa_r+0x976>
 8012694:	ec5b ab19 	vmov	sl, fp, d9
 8012698:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801269a:	2b00      	cmp	r3, #0
 801269c:	f2c0 8148 	blt.w	8012930 <_dtoa_r+0x700>
 80126a0:	9a00      	ldr	r2, [sp, #0]
 80126a2:	2a0e      	cmp	r2, #14
 80126a4:	f300 8144 	bgt.w	8012930 <_dtoa_r+0x700>
 80126a8:	4b67      	ldr	r3, [pc, #412]	; (8012848 <_dtoa_r+0x618>)
 80126aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80126ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80126b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	f280 80d5 	bge.w	8012864 <_dtoa_r+0x634>
 80126ba:	9b03      	ldr	r3, [sp, #12]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	f300 80d1 	bgt.w	8012864 <_dtoa_r+0x634>
 80126c2:	f040 826f 	bne.w	8012ba4 <_dtoa_r+0x974>
 80126c6:	4b65      	ldr	r3, [pc, #404]	; (801285c <_dtoa_r+0x62c>)
 80126c8:	2200      	movs	r2, #0
 80126ca:	4640      	mov	r0, r8
 80126cc:	4649      	mov	r1, r9
 80126ce:	f7ed ffab 	bl	8000628 <__aeabi_dmul>
 80126d2:	4652      	mov	r2, sl
 80126d4:	465b      	mov	r3, fp
 80126d6:	f7ee fa2d 	bl	8000b34 <__aeabi_dcmpge>
 80126da:	9e03      	ldr	r6, [sp, #12]
 80126dc:	4637      	mov	r7, r6
 80126de:	2800      	cmp	r0, #0
 80126e0:	f040 8245 	bne.w	8012b6e <_dtoa_r+0x93e>
 80126e4:	9d01      	ldr	r5, [sp, #4]
 80126e6:	2331      	movs	r3, #49	; 0x31
 80126e8:	f805 3b01 	strb.w	r3, [r5], #1
 80126ec:	9b00      	ldr	r3, [sp, #0]
 80126ee:	3301      	adds	r3, #1
 80126f0:	9300      	str	r3, [sp, #0]
 80126f2:	e240      	b.n	8012b76 <_dtoa_r+0x946>
 80126f4:	07f2      	lsls	r2, r6, #31
 80126f6:	d505      	bpl.n	8012704 <_dtoa_r+0x4d4>
 80126f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80126fc:	f7ed ff94 	bl	8000628 <__aeabi_dmul>
 8012700:	3501      	adds	r5, #1
 8012702:	2301      	movs	r3, #1
 8012704:	1076      	asrs	r6, r6, #1
 8012706:	3708      	adds	r7, #8
 8012708:	e777      	b.n	80125fa <_dtoa_r+0x3ca>
 801270a:	2502      	movs	r5, #2
 801270c:	e779      	b.n	8012602 <_dtoa_r+0x3d2>
 801270e:	9f00      	ldr	r7, [sp, #0]
 8012710:	9e03      	ldr	r6, [sp, #12]
 8012712:	e794      	b.n	801263e <_dtoa_r+0x40e>
 8012714:	9901      	ldr	r1, [sp, #4]
 8012716:	4b4c      	ldr	r3, [pc, #304]	; (8012848 <_dtoa_r+0x618>)
 8012718:	4431      	add	r1, r6
 801271a:	910d      	str	r1, [sp, #52]	; 0x34
 801271c:	9908      	ldr	r1, [sp, #32]
 801271e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012722:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012726:	2900      	cmp	r1, #0
 8012728:	d043      	beq.n	80127b2 <_dtoa_r+0x582>
 801272a:	494d      	ldr	r1, [pc, #308]	; (8012860 <_dtoa_r+0x630>)
 801272c:	2000      	movs	r0, #0
 801272e:	f7ee f8a5 	bl	800087c <__aeabi_ddiv>
 8012732:	4652      	mov	r2, sl
 8012734:	465b      	mov	r3, fp
 8012736:	f7ed fdbf 	bl	80002b8 <__aeabi_dsub>
 801273a:	9d01      	ldr	r5, [sp, #4]
 801273c:	4682      	mov	sl, r0
 801273e:	468b      	mov	fp, r1
 8012740:	4649      	mov	r1, r9
 8012742:	4640      	mov	r0, r8
 8012744:	f7ee fa20 	bl	8000b88 <__aeabi_d2iz>
 8012748:	4606      	mov	r6, r0
 801274a:	f7ed ff03 	bl	8000554 <__aeabi_i2d>
 801274e:	4602      	mov	r2, r0
 8012750:	460b      	mov	r3, r1
 8012752:	4640      	mov	r0, r8
 8012754:	4649      	mov	r1, r9
 8012756:	f7ed fdaf 	bl	80002b8 <__aeabi_dsub>
 801275a:	3630      	adds	r6, #48	; 0x30
 801275c:	f805 6b01 	strb.w	r6, [r5], #1
 8012760:	4652      	mov	r2, sl
 8012762:	465b      	mov	r3, fp
 8012764:	4680      	mov	r8, r0
 8012766:	4689      	mov	r9, r1
 8012768:	f7ee f9d0 	bl	8000b0c <__aeabi_dcmplt>
 801276c:	2800      	cmp	r0, #0
 801276e:	d163      	bne.n	8012838 <_dtoa_r+0x608>
 8012770:	4642      	mov	r2, r8
 8012772:	464b      	mov	r3, r9
 8012774:	4936      	ldr	r1, [pc, #216]	; (8012850 <_dtoa_r+0x620>)
 8012776:	2000      	movs	r0, #0
 8012778:	f7ed fd9e 	bl	80002b8 <__aeabi_dsub>
 801277c:	4652      	mov	r2, sl
 801277e:	465b      	mov	r3, fp
 8012780:	f7ee f9c4 	bl	8000b0c <__aeabi_dcmplt>
 8012784:	2800      	cmp	r0, #0
 8012786:	f040 80b5 	bne.w	80128f4 <_dtoa_r+0x6c4>
 801278a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801278c:	429d      	cmp	r5, r3
 801278e:	d081      	beq.n	8012694 <_dtoa_r+0x464>
 8012790:	4b30      	ldr	r3, [pc, #192]	; (8012854 <_dtoa_r+0x624>)
 8012792:	2200      	movs	r2, #0
 8012794:	4650      	mov	r0, sl
 8012796:	4659      	mov	r1, fp
 8012798:	f7ed ff46 	bl	8000628 <__aeabi_dmul>
 801279c:	4b2d      	ldr	r3, [pc, #180]	; (8012854 <_dtoa_r+0x624>)
 801279e:	4682      	mov	sl, r0
 80127a0:	468b      	mov	fp, r1
 80127a2:	4640      	mov	r0, r8
 80127a4:	4649      	mov	r1, r9
 80127a6:	2200      	movs	r2, #0
 80127a8:	f7ed ff3e 	bl	8000628 <__aeabi_dmul>
 80127ac:	4680      	mov	r8, r0
 80127ae:	4689      	mov	r9, r1
 80127b0:	e7c6      	b.n	8012740 <_dtoa_r+0x510>
 80127b2:	4650      	mov	r0, sl
 80127b4:	4659      	mov	r1, fp
 80127b6:	f7ed ff37 	bl	8000628 <__aeabi_dmul>
 80127ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80127bc:	9d01      	ldr	r5, [sp, #4]
 80127be:	930f      	str	r3, [sp, #60]	; 0x3c
 80127c0:	4682      	mov	sl, r0
 80127c2:	468b      	mov	fp, r1
 80127c4:	4649      	mov	r1, r9
 80127c6:	4640      	mov	r0, r8
 80127c8:	f7ee f9de 	bl	8000b88 <__aeabi_d2iz>
 80127cc:	4606      	mov	r6, r0
 80127ce:	f7ed fec1 	bl	8000554 <__aeabi_i2d>
 80127d2:	3630      	adds	r6, #48	; 0x30
 80127d4:	4602      	mov	r2, r0
 80127d6:	460b      	mov	r3, r1
 80127d8:	4640      	mov	r0, r8
 80127da:	4649      	mov	r1, r9
 80127dc:	f7ed fd6c 	bl	80002b8 <__aeabi_dsub>
 80127e0:	f805 6b01 	strb.w	r6, [r5], #1
 80127e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80127e6:	429d      	cmp	r5, r3
 80127e8:	4680      	mov	r8, r0
 80127ea:	4689      	mov	r9, r1
 80127ec:	f04f 0200 	mov.w	r2, #0
 80127f0:	d124      	bne.n	801283c <_dtoa_r+0x60c>
 80127f2:	4b1b      	ldr	r3, [pc, #108]	; (8012860 <_dtoa_r+0x630>)
 80127f4:	4650      	mov	r0, sl
 80127f6:	4659      	mov	r1, fp
 80127f8:	f7ed fd60 	bl	80002bc <__adddf3>
 80127fc:	4602      	mov	r2, r0
 80127fe:	460b      	mov	r3, r1
 8012800:	4640      	mov	r0, r8
 8012802:	4649      	mov	r1, r9
 8012804:	f7ee f9a0 	bl	8000b48 <__aeabi_dcmpgt>
 8012808:	2800      	cmp	r0, #0
 801280a:	d173      	bne.n	80128f4 <_dtoa_r+0x6c4>
 801280c:	4652      	mov	r2, sl
 801280e:	465b      	mov	r3, fp
 8012810:	4913      	ldr	r1, [pc, #76]	; (8012860 <_dtoa_r+0x630>)
 8012812:	2000      	movs	r0, #0
 8012814:	f7ed fd50 	bl	80002b8 <__aeabi_dsub>
 8012818:	4602      	mov	r2, r0
 801281a:	460b      	mov	r3, r1
 801281c:	4640      	mov	r0, r8
 801281e:	4649      	mov	r1, r9
 8012820:	f7ee f974 	bl	8000b0c <__aeabi_dcmplt>
 8012824:	2800      	cmp	r0, #0
 8012826:	f43f af35 	beq.w	8012694 <_dtoa_r+0x464>
 801282a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801282c:	1e6b      	subs	r3, r5, #1
 801282e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012830:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012834:	2b30      	cmp	r3, #48	; 0x30
 8012836:	d0f8      	beq.n	801282a <_dtoa_r+0x5fa>
 8012838:	9700      	str	r7, [sp, #0]
 801283a:	e049      	b.n	80128d0 <_dtoa_r+0x6a0>
 801283c:	4b05      	ldr	r3, [pc, #20]	; (8012854 <_dtoa_r+0x624>)
 801283e:	f7ed fef3 	bl	8000628 <__aeabi_dmul>
 8012842:	4680      	mov	r8, r0
 8012844:	4689      	mov	r9, r1
 8012846:	e7bd      	b.n	80127c4 <_dtoa_r+0x594>
 8012848:	08014558 	.word	0x08014558
 801284c:	08014530 	.word	0x08014530
 8012850:	3ff00000 	.word	0x3ff00000
 8012854:	40240000 	.word	0x40240000
 8012858:	401c0000 	.word	0x401c0000
 801285c:	40140000 	.word	0x40140000
 8012860:	3fe00000 	.word	0x3fe00000
 8012864:	9d01      	ldr	r5, [sp, #4]
 8012866:	4656      	mov	r6, sl
 8012868:	465f      	mov	r7, fp
 801286a:	4642      	mov	r2, r8
 801286c:	464b      	mov	r3, r9
 801286e:	4630      	mov	r0, r6
 8012870:	4639      	mov	r1, r7
 8012872:	f7ee f803 	bl	800087c <__aeabi_ddiv>
 8012876:	f7ee f987 	bl	8000b88 <__aeabi_d2iz>
 801287a:	4682      	mov	sl, r0
 801287c:	f7ed fe6a 	bl	8000554 <__aeabi_i2d>
 8012880:	4642      	mov	r2, r8
 8012882:	464b      	mov	r3, r9
 8012884:	f7ed fed0 	bl	8000628 <__aeabi_dmul>
 8012888:	4602      	mov	r2, r0
 801288a:	460b      	mov	r3, r1
 801288c:	4630      	mov	r0, r6
 801288e:	4639      	mov	r1, r7
 8012890:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8012894:	f7ed fd10 	bl	80002b8 <__aeabi_dsub>
 8012898:	f805 6b01 	strb.w	r6, [r5], #1
 801289c:	9e01      	ldr	r6, [sp, #4]
 801289e:	9f03      	ldr	r7, [sp, #12]
 80128a0:	1bae      	subs	r6, r5, r6
 80128a2:	42b7      	cmp	r7, r6
 80128a4:	4602      	mov	r2, r0
 80128a6:	460b      	mov	r3, r1
 80128a8:	d135      	bne.n	8012916 <_dtoa_r+0x6e6>
 80128aa:	f7ed fd07 	bl	80002bc <__adddf3>
 80128ae:	4642      	mov	r2, r8
 80128b0:	464b      	mov	r3, r9
 80128b2:	4606      	mov	r6, r0
 80128b4:	460f      	mov	r7, r1
 80128b6:	f7ee f947 	bl	8000b48 <__aeabi_dcmpgt>
 80128ba:	b9d0      	cbnz	r0, 80128f2 <_dtoa_r+0x6c2>
 80128bc:	4642      	mov	r2, r8
 80128be:	464b      	mov	r3, r9
 80128c0:	4630      	mov	r0, r6
 80128c2:	4639      	mov	r1, r7
 80128c4:	f7ee f918 	bl	8000af8 <__aeabi_dcmpeq>
 80128c8:	b110      	cbz	r0, 80128d0 <_dtoa_r+0x6a0>
 80128ca:	f01a 0f01 	tst.w	sl, #1
 80128ce:	d110      	bne.n	80128f2 <_dtoa_r+0x6c2>
 80128d0:	4620      	mov	r0, r4
 80128d2:	ee18 1a10 	vmov	r1, s16
 80128d6:	f000 fc07 	bl	80130e8 <_Bfree>
 80128da:	2300      	movs	r3, #0
 80128dc:	9800      	ldr	r0, [sp, #0]
 80128de:	702b      	strb	r3, [r5, #0]
 80128e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80128e2:	3001      	adds	r0, #1
 80128e4:	6018      	str	r0, [r3, #0]
 80128e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	f43f acf1 	beq.w	80122d0 <_dtoa_r+0xa0>
 80128ee:	601d      	str	r5, [r3, #0]
 80128f0:	e4ee      	b.n	80122d0 <_dtoa_r+0xa0>
 80128f2:	9f00      	ldr	r7, [sp, #0]
 80128f4:	462b      	mov	r3, r5
 80128f6:	461d      	mov	r5, r3
 80128f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80128fc:	2a39      	cmp	r2, #57	; 0x39
 80128fe:	d106      	bne.n	801290e <_dtoa_r+0x6de>
 8012900:	9a01      	ldr	r2, [sp, #4]
 8012902:	429a      	cmp	r2, r3
 8012904:	d1f7      	bne.n	80128f6 <_dtoa_r+0x6c6>
 8012906:	9901      	ldr	r1, [sp, #4]
 8012908:	2230      	movs	r2, #48	; 0x30
 801290a:	3701      	adds	r7, #1
 801290c:	700a      	strb	r2, [r1, #0]
 801290e:	781a      	ldrb	r2, [r3, #0]
 8012910:	3201      	adds	r2, #1
 8012912:	701a      	strb	r2, [r3, #0]
 8012914:	e790      	b.n	8012838 <_dtoa_r+0x608>
 8012916:	4ba6      	ldr	r3, [pc, #664]	; (8012bb0 <_dtoa_r+0x980>)
 8012918:	2200      	movs	r2, #0
 801291a:	f7ed fe85 	bl	8000628 <__aeabi_dmul>
 801291e:	2200      	movs	r2, #0
 8012920:	2300      	movs	r3, #0
 8012922:	4606      	mov	r6, r0
 8012924:	460f      	mov	r7, r1
 8012926:	f7ee f8e7 	bl	8000af8 <__aeabi_dcmpeq>
 801292a:	2800      	cmp	r0, #0
 801292c:	d09d      	beq.n	801286a <_dtoa_r+0x63a>
 801292e:	e7cf      	b.n	80128d0 <_dtoa_r+0x6a0>
 8012930:	9a08      	ldr	r2, [sp, #32]
 8012932:	2a00      	cmp	r2, #0
 8012934:	f000 80d7 	beq.w	8012ae6 <_dtoa_r+0x8b6>
 8012938:	9a06      	ldr	r2, [sp, #24]
 801293a:	2a01      	cmp	r2, #1
 801293c:	f300 80ba 	bgt.w	8012ab4 <_dtoa_r+0x884>
 8012940:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012942:	2a00      	cmp	r2, #0
 8012944:	f000 80b2 	beq.w	8012aac <_dtoa_r+0x87c>
 8012948:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801294c:	9e07      	ldr	r6, [sp, #28]
 801294e:	9d04      	ldr	r5, [sp, #16]
 8012950:	9a04      	ldr	r2, [sp, #16]
 8012952:	441a      	add	r2, r3
 8012954:	9204      	str	r2, [sp, #16]
 8012956:	9a05      	ldr	r2, [sp, #20]
 8012958:	2101      	movs	r1, #1
 801295a:	441a      	add	r2, r3
 801295c:	4620      	mov	r0, r4
 801295e:	9205      	str	r2, [sp, #20]
 8012960:	f000 fc7a 	bl	8013258 <__i2b>
 8012964:	4607      	mov	r7, r0
 8012966:	2d00      	cmp	r5, #0
 8012968:	dd0c      	ble.n	8012984 <_dtoa_r+0x754>
 801296a:	9b05      	ldr	r3, [sp, #20]
 801296c:	2b00      	cmp	r3, #0
 801296e:	dd09      	ble.n	8012984 <_dtoa_r+0x754>
 8012970:	42ab      	cmp	r3, r5
 8012972:	9a04      	ldr	r2, [sp, #16]
 8012974:	bfa8      	it	ge
 8012976:	462b      	movge	r3, r5
 8012978:	1ad2      	subs	r2, r2, r3
 801297a:	9204      	str	r2, [sp, #16]
 801297c:	9a05      	ldr	r2, [sp, #20]
 801297e:	1aed      	subs	r5, r5, r3
 8012980:	1ad3      	subs	r3, r2, r3
 8012982:	9305      	str	r3, [sp, #20]
 8012984:	9b07      	ldr	r3, [sp, #28]
 8012986:	b31b      	cbz	r3, 80129d0 <_dtoa_r+0x7a0>
 8012988:	9b08      	ldr	r3, [sp, #32]
 801298a:	2b00      	cmp	r3, #0
 801298c:	f000 80af 	beq.w	8012aee <_dtoa_r+0x8be>
 8012990:	2e00      	cmp	r6, #0
 8012992:	dd13      	ble.n	80129bc <_dtoa_r+0x78c>
 8012994:	4639      	mov	r1, r7
 8012996:	4632      	mov	r2, r6
 8012998:	4620      	mov	r0, r4
 801299a:	f000 fd1d 	bl	80133d8 <__pow5mult>
 801299e:	ee18 2a10 	vmov	r2, s16
 80129a2:	4601      	mov	r1, r0
 80129a4:	4607      	mov	r7, r0
 80129a6:	4620      	mov	r0, r4
 80129a8:	f000 fc6c 	bl	8013284 <__multiply>
 80129ac:	ee18 1a10 	vmov	r1, s16
 80129b0:	4680      	mov	r8, r0
 80129b2:	4620      	mov	r0, r4
 80129b4:	f000 fb98 	bl	80130e8 <_Bfree>
 80129b8:	ee08 8a10 	vmov	s16, r8
 80129bc:	9b07      	ldr	r3, [sp, #28]
 80129be:	1b9a      	subs	r2, r3, r6
 80129c0:	d006      	beq.n	80129d0 <_dtoa_r+0x7a0>
 80129c2:	ee18 1a10 	vmov	r1, s16
 80129c6:	4620      	mov	r0, r4
 80129c8:	f000 fd06 	bl	80133d8 <__pow5mult>
 80129cc:	ee08 0a10 	vmov	s16, r0
 80129d0:	2101      	movs	r1, #1
 80129d2:	4620      	mov	r0, r4
 80129d4:	f000 fc40 	bl	8013258 <__i2b>
 80129d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80129da:	2b00      	cmp	r3, #0
 80129dc:	4606      	mov	r6, r0
 80129de:	f340 8088 	ble.w	8012af2 <_dtoa_r+0x8c2>
 80129e2:	461a      	mov	r2, r3
 80129e4:	4601      	mov	r1, r0
 80129e6:	4620      	mov	r0, r4
 80129e8:	f000 fcf6 	bl	80133d8 <__pow5mult>
 80129ec:	9b06      	ldr	r3, [sp, #24]
 80129ee:	2b01      	cmp	r3, #1
 80129f0:	4606      	mov	r6, r0
 80129f2:	f340 8081 	ble.w	8012af8 <_dtoa_r+0x8c8>
 80129f6:	f04f 0800 	mov.w	r8, #0
 80129fa:	6933      	ldr	r3, [r6, #16]
 80129fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012a00:	6918      	ldr	r0, [r3, #16]
 8012a02:	f000 fbd9 	bl	80131b8 <__hi0bits>
 8012a06:	f1c0 0020 	rsb	r0, r0, #32
 8012a0a:	9b05      	ldr	r3, [sp, #20]
 8012a0c:	4418      	add	r0, r3
 8012a0e:	f010 001f 	ands.w	r0, r0, #31
 8012a12:	f000 8092 	beq.w	8012b3a <_dtoa_r+0x90a>
 8012a16:	f1c0 0320 	rsb	r3, r0, #32
 8012a1a:	2b04      	cmp	r3, #4
 8012a1c:	f340 808a 	ble.w	8012b34 <_dtoa_r+0x904>
 8012a20:	f1c0 001c 	rsb	r0, r0, #28
 8012a24:	9b04      	ldr	r3, [sp, #16]
 8012a26:	4403      	add	r3, r0
 8012a28:	9304      	str	r3, [sp, #16]
 8012a2a:	9b05      	ldr	r3, [sp, #20]
 8012a2c:	4403      	add	r3, r0
 8012a2e:	4405      	add	r5, r0
 8012a30:	9305      	str	r3, [sp, #20]
 8012a32:	9b04      	ldr	r3, [sp, #16]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	dd07      	ble.n	8012a48 <_dtoa_r+0x818>
 8012a38:	ee18 1a10 	vmov	r1, s16
 8012a3c:	461a      	mov	r2, r3
 8012a3e:	4620      	mov	r0, r4
 8012a40:	f000 fd24 	bl	801348c <__lshift>
 8012a44:	ee08 0a10 	vmov	s16, r0
 8012a48:	9b05      	ldr	r3, [sp, #20]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	dd05      	ble.n	8012a5a <_dtoa_r+0x82a>
 8012a4e:	4631      	mov	r1, r6
 8012a50:	461a      	mov	r2, r3
 8012a52:	4620      	mov	r0, r4
 8012a54:	f000 fd1a 	bl	801348c <__lshift>
 8012a58:	4606      	mov	r6, r0
 8012a5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d06e      	beq.n	8012b3e <_dtoa_r+0x90e>
 8012a60:	ee18 0a10 	vmov	r0, s16
 8012a64:	4631      	mov	r1, r6
 8012a66:	f000 fd81 	bl	801356c <__mcmp>
 8012a6a:	2800      	cmp	r0, #0
 8012a6c:	da67      	bge.n	8012b3e <_dtoa_r+0x90e>
 8012a6e:	9b00      	ldr	r3, [sp, #0]
 8012a70:	3b01      	subs	r3, #1
 8012a72:	ee18 1a10 	vmov	r1, s16
 8012a76:	9300      	str	r3, [sp, #0]
 8012a78:	220a      	movs	r2, #10
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	4620      	mov	r0, r4
 8012a7e:	f000 fb55 	bl	801312c <__multadd>
 8012a82:	9b08      	ldr	r3, [sp, #32]
 8012a84:	ee08 0a10 	vmov	s16, r0
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	f000 81b1 	beq.w	8012df0 <_dtoa_r+0xbc0>
 8012a8e:	2300      	movs	r3, #0
 8012a90:	4639      	mov	r1, r7
 8012a92:	220a      	movs	r2, #10
 8012a94:	4620      	mov	r0, r4
 8012a96:	f000 fb49 	bl	801312c <__multadd>
 8012a9a:	9b02      	ldr	r3, [sp, #8]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	4607      	mov	r7, r0
 8012aa0:	f300 808e 	bgt.w	8012bc0 <_dtoa_r+0x990>
 8012aa4:	9b06      	ldr	r3, [sp, #24]
 8012aa6:	2b02      	cmp	r3, #2
 8012aa8:	dc51      	bgt.n	8012b4e <_dtoa_r+0x91e>
 8012aaa:	e089      	b.n	8012bc0 <_dtoa_r+0x990>
 8012aac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012aae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012ab2:	e74b      	b.n	801294c <_dtoa_r+0x71c>
 8012ab4:	9b03      	ldr	r3, [sp, #12]
 8012ab6:	1e5e      	subs	r6, r3, #1
 8012ab8:	9b07      	ldr	r3, [sp, #28]
 8012aba:	42b3      	cmp	r3, r6
 8012abc:	bfbf      	itttt	lt
 8012abe:	9b07      	ldrlt	r3, [sp, #28]
 8012ac0:	9607      	strlt	r6, [sp, #28]
 8012ac2:	1af2      	sublt	r2, r6, r3
 8012ac4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012ac6:	bfb6      	itet	lt
 8012ac8:	189b      	addlt	r3, r3, r2
 8012aca:	1b9e      	subge	r6, r3, r6
 8012acc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8012ace:	9b03      	ldr	r3, [sp, #12]
 8012ad0:	bfb8      	it	lt
 8012ad2:	2600      	movlt	r6, #0
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	bfb7      	itett	lt
 8012ad8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8012adc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8012ae0:	1a9d      	sublt	r5, r3, r2
 8012ae2:	2300      	movlt	r3, #0
 8012ae4:	e734      	b.n	8012950 <_dtoa_r+0x720>
 8012ae6:	9e07      	ldr	r6, [sp, #28]
 8012ae8:	9d04      	ldr	r5, [sp, #16]
 8012aea:	9f08      	ldr	r7, [sp, #32]
 8012aec:	e73b      	b.n	8012966 <_dtoa_r+0x736>
 8012aee:	9a07      	ldr	r2, [sp, #28]
 8012af0:	e767      	b.n	80129c2 <_dtoa_r+0x792>
 8012af2:	9b06      	ldr	r3, [sp, #24]
 8012af4:	2b01      	cmp	r3, #1
 8012af6:	dc18      	bgt.n	8012b2a <_dtoa_r+0x8fa>
 8012af8:	f1ba 0f00 	cmp.w	sl, #0
 8012afc:	d115      	bne.n	8012b2a <_dtoa_r+0x8fa>
 8012afe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012b02:	b993      	cbnz	r3, 8012b2a <_dtoa_r+0x8fa>
 8012b04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012b08:	0d1b      	lsrs	r3, r3, #20
 8012b0a:	051b      	lsls	r3, r3, #20
 8012b0c:	b183      	cbz	r3, 8012b30 <_dtoa_r+0x900>
 8012b0e:	9b04      	ldr	r3, [sp, #16]
 8012b10:	3301      	adds	r3, #1
 8012b12:	9304      	str	r3, [sp, #16]
 8012b14:	9b05      	ldr	r3, [sp, #20]
 8012b16:	3301      	adds	r3, #1
 8012b18:	9305      	str	r3, [sp, #20]
 8012b1a:	f04f 0801 	mov.w	r8, #1
 8012b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	f47f af6a 	bne.w	80129fa <_dtoa_r+0x7ca>
 8012b26:	2001      	movs	r0, #1
 8012b28:	e76f      	b.n	8012a0a <_dtoa_r+0x7da>
 8012b2a:	f04f 0800 	mov.w	r8, #0
 8012b2e:	e7f6      	b.n	8012b1e <_dtoa_r+0x8ee>
 8012b30:	4698      	mov	r8, r3
 8012b32:	e7f4      	b.n	8012b1e <_dtoa_r+0x8ee>
 8012b34:	f43f af7d 	beq.w	8012a32 <_dtoa_r+0x802>
 8012b38:	4618      	mov	r0, r3
 8012b3a:	301c      	adds	r0, #28
 8012b3c:	e772      	b.n	8012a24 <_dtoa_r+0x7f4>
 8012b3e:	9b03      	ldr	r3, [sp, #12]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	dc37      	bgt.n	8012bb4 <_dtoa_r+0x984>
 8012b44:	9b06      	ldr	r3, [sp, #24]
 8012b46:	2b02      	cmp	r3, #2
 8012b48:	dd34      	ble.n	8012bb4 <_dtoa_r+0x984>
 8012b4a:	9b03      	ldr	r3, [sp, #12]
 8012b4c:	9302      	str	r3, [sp, #8]
 8012b4e:	9b02      	ldr	r3, [sp, #8]
 8012b50:	b96b      	cbnz	r3, 8012b6e <_dtoa_r+0x93e>
 8012b52:	4631      	mov	r1, r6
 8012b54:	2205      	movs	r2, #5
 8012b56:	4620      	mov	r0, r4
 8012b58:	f000 fae8 	bl	801312c <__multadd>
 8012b5c:	4601      	mov	r1, r0
 8012b5e:	4606      	mov	r6, r0
 8012b60:	ee18 0a10 	vmov	r0, s16
 8012b64:	f000 fd02 	bl	801356c <__mcmp>
 8012b68:	2800      	cmp	r0, #0
 8012b6a:	f73f adbb 	bgt.w	80126e4 <_dtoa_r+0x4b4>
 8012b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b70:	9d01      	ldr	r5, [sp, #4]
 8012b72:	43db      	mvns	r3, r3
 8012b74:	9300      	str	r3, [sp, #0]
 8012b76:	f04f 0800 	mov.w	r8, #0
 8012b7a:	4631      	mov	r1, r6
 8012b7c:	4620      	mov	r0, r4
 8012b7e:	f000 fab3 	bl	80130e8 <_Bfree>
 8012b82:	2f00      	cmp	r7, #0
 8012b84:	f43f aea4 	beq.w	80128d0 <_dtoa_r+0x6a0>
 8012b88:	f1b8 0f00 	cmp.w	r8, #0
 8012b8c:	d005      	beq.n	8012b9a <_dtoa_r+0x96a>
 8012b8e:	45b8      	cmp	r8, r7
 8012b90:	d003      	beq.n	8012b9a <_dtoa_r+0x96a>
 8012b92:	4641      	mov	r1, r8
 8012b94:	4620      	mov	r0, r4
 8012b96:	f000 faa7 	bl	80130e8 <_Bfree>
 8012b9a:	4639      	mov	r1, r7
 8012b9c:	4620      	mov	r0, r4
 8012b9e:	f000 faa3 	bl	80130e8 <_Bfree>
 8012ba2:	e695      	b.n	80128d0 <_dtoa_r+0x6a0>
 8012ba4:	2600      	movs	r6, #0
 8012ba6:	4637      	mov	r7, r6
 8012ba8:	e7e1      	b.n	8012b6e <_dtoa_r+0x93e>
 8012baa:	9700      	str	r7, [sp, #0]
 8012bac:	4637      	mov	r7, r6
 8012bae:	e599      	b.n	80126e4 <_dtoa_r+0x4b4>
 8012bb0:	40240000 	.word	0x40240000
 8012bb4:	9b08      	ldr	r3, [sp, #32]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	f000 80ca 	beq.w	8012d50 <_dtoa_r+0xb20>
 8012bbc:	9b03      	ldr	r3, [sp, #12]
 8012bbe:	9302      	str	r3, [sp, #8]
 8012bc0:	2d00      	cmp	r5, #0
 8012bc2:	dd05      	ble.n	8012bd0 <_dtoa_r+0x9a0>
 8012bc4:	4639      	mov	r1, r7
 8012bc6:	462a      	mov	r2, r5
 8012bc8:	4620      	mov	r0, r4
 8012bca:	f000 fc5f 	bl	801348c <__lshift>
 8012bce:	4607      	mov	r7, r0
 8012bd0:	f1b8 0f00 	cmp.w	r8, #0
 8012bd4:	d05b      	beq.n	8012c8e <_dtoa_r+0xa5e>
 8012bd6:	6879      	ldr	r1, [r7, #4]
 8012bd8:	4620      	mov	r0, r4
 8012bda:	f000 fa45 	bl	8013068 <_Balloc>
 8012bde:	4605      	mov	r5, r0
 8012be0:	b928      	cbnz	r0, 8012bee <_dtoa_r+0x9be>
 8012be2:	4b87      	ldr	r3, [pc, #540]	; (8012e00 <_dtoa_r+0xbd0>)
 8012be4:	4602      	mov	r2, r0
 8012be6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012bea:	f7ff bb3b 	b.w	8012264 <_dtoa_r+0x34>
 8012bee:	693a      	ldr	r2, [r7, #16]
 8012bf0:	3202      	adds	r2, #2
 8012bf2:	0092      	lsls	r2, r2, #2
 8012bf4:	f107 010c 	add.w	r1, r7, #12
 8012bf8:	300c      	adds	r0, #12
 8012bfa:	f7fe fce5 	bl	80115c8 <memcpy>
 8012bfe:	2201      	movs	r2, #1
 8012c00:	4629      	mov	r1, r5
 8012c02:	4620      	mov	r0, r4
 8012c04:	f000 fc42 	bl	801348c <__lshift>
 8012c08:	9b01      	ldr	r3, [sp, #4]
 8012c0a:	f103 0901 	add.w	r9, r3, #1
 8012c0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8012c12:	4413      	add	r3, r2
 8012c14:	9305      	str	r3, [sp, #20]
 8012c16:	f00a 0301 	and.w	r3, sl, #1
 8012c1a:	46b8      	mov	r8, r7
 8012c1c:	9304      	str	r3, [sp, #16]
 8012c1e:	4607      	mov	r7, r0
 8012c20:	4631      	mov	r1, r6
 8012c22:	ee18 0a10 	vmov	r0, s16
 8012c26:	f7ff fa75 	bl	8012114 <quorem>
 8012c2a:	4641      	mov	r1, r8
 8012c2c:	9002      	str	r0, [sp, #8]
 8012c2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012c32:	ee18 0a10 	vmov	r0, s16
 8012c36:	f000 fc99 	bl	801356c <__mcmp>
 8012c3a:	463a      	mov	r2, r7
 8012c3c:	9003      	str	r0, [sp, #12]
 8012c3e:	4631      	mov	r1, r6
 8012c40:	4620      	mov	r0, r4
 8012c42:	f000 fcaf 	bl	80135a4 <__mdiff>
 8012c46:	68c2      	ldr	r2, [r0, #12]
 8012c48:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8012c4c:	4605      	mov	r5, r0
 8012c4e:	bb02      	cbnz	r2, 8012c92 <_dtoa_r+0xa62>
 8012c50:	4601      	mov	r1, r0
 8012c52:	ee18 0a10 	vmov	r0, s16
 8012c56:	f000 fc89 	bl	801356c <__mcmp>
 8012c5a:	4602      	mov	r2, r0
 8012c5c:	4629      	mov	r1, r5
 8012c5e:	4620      	mov	r0, r4
 8012c60:	9207      	str	r2, [sp, #28]
 8012c62:	f000 fa41 	bl	80130e8 <_Bfree>
 8012c66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8012c6a:	ea43 0102 	orr.w	r1, r3, r2
 8012c6e:	9b04      	ldr	r3, [sp, #16]
 8012c70:	430b      	orrs	r3, r1
 8012c72:	464d      	mov	r5, r9
 8012c74:	d10f      	bne.n	8012c96 <_dtoa_r+0xa66>
 8012c76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012c7a:	d02a      	beq.n	8012cd2 <_dtoa_r+0xaa2>
 8012c7c:	9b03      	ldr	r3, [sp, #12]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	dd02      	ble.n	8012c88 <_dtoa_r+0xa58>
 8012c82:	9b02      	ldr	r3, [sp, #8]
 8012c84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8012c88:	f88b a000 	strb.w	sl, [fp]
 8012c8c:	e775      	b.n	8012b7a <_dtoa_r+0x94a>
 8012c8e:	4638      	mov	r0, r7
 8012c90:	e7ba      	b.n	8012c08 <_dtoa_r+0x9d8>
 8012c92:	2201      	movs	r2, #1
 8012c94:	e7e2      	b.n	8012c5c <_dtoa_r+0xa2c>
 8012c96:	9b03      	ldr	r3, [sp, #12]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	db04      	blt.n	8012ca6 <_dtoa_r+0xa76>
 8012c9c:	9906      	ldr	r1, [sp, #24]
 8012c9e:	430b      	orrs	r3, r1
 8012ca0:	9904      	ldr	r1, [sp, #16]
 8012ca2:	430b      	orrs	r3, r1
 8012ca4:	d122      	bne.n	8012cec <_dtoa_r+0xabc>
 8012ca6:	2a00      	cmp	r2, #0
 8012ca8:	ddee      	ble.n	8012c88 <_dtoa_r+0xa58>
 8012caa:	ee18 1a10 	vmov	r1, s16
 8012cae:	2201      	movs	r2, #1
 8012cb0:	4620      	mov	r0, r4
 8012cb2:	f000 fbeb 	bl	801348c <__lshift>
 8012cb6:	4631      	mov	r1, r6
 8012cb8:	ee08 0a10 	vmov	s16, r0
 8012cbc:	f000 fc56 	bl	801356c <__mcmp>
 8012cc0:	2800      	cmp	r0, #0
 8012cc2:	dc03      	bgt.n	8012ccc <_dtoa_r+0xa9c>
 8012cc4:	d1e0      	bne.n	8012c88 <_dtoa_r+0xa58>
 8012cc6:	f01a 0f01 	tst.w	sl, #1
 8012cca:	d0dd      	beq.n	8012c88 <_dtoa_r+0xa58>
 8012ccc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012cd0:	d1d7      	bne.n	8012c82 <_dtoa_r+0xa52>
 8012cd2:	2339      	movs	r3, #57	; 0x39
 8012cd4:	f88b 3000 	strb.w	r3, [fp]
 8012cd8:	462b      	mov	r3, r5
 8012cda:	461d      	mov	r5, r3
 8012cdc:	3b01      	subs	r3, #1
 8012cde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012ce2:	2a39      	cmp	r2, #57	; 0x39
 8012ce4:	d071      	beq.n	8012dca <_dtoa_r+0xb9a>
 8012ce6:	3201      	adds	r2, #1
 8012ce8:	701a      	strb	r2, [r3, #0]
 8012cea:	e746      	b.n	8012b7a <_dtoa_r+0x94a>
 8012cec:	2a00      	cmp	r2, #0
 8012cee:	dd07      	ble.n	8012d00 <_dtoa_r+0xad0>
 8012cf0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012cf4:	d0ed      	beq.n	8012cd2 <_dtoa_r+0xaa2>
 8012cf6:	f10a 0301 	add.w	r3, sl, #1
 8012cfa:	f88b 3000 	strb.w	r3, [fp]
 8012cfe:	e73c      	b.n	8012b7a <_dtoa_r+0x94a>
 8012d00:	9b05      	ldr	r3, [sp, #20]
 8012d02:	f809 ac01 	strb.w	sl, [r9, #-1]
 8012d06:	4599      	cmp	r9, r3
 8012d08:	d047      	beq.n	8012d9a <_dtoa_r+0xb6a>
 8012d0a:	ee18 1a10 	vmov	r1, s16
 8012d0e:	2300      	movs	r3, #0
 8012d10:	220a      	movs	r2, #10
 8012d12:	4620      	mov	r0, r4
 8012d14:	f000 fa0a 	bl	801312c <__multadd>
 8012d18:	45b8      	cmp	r8, r7
 8012d1a:	ee08 0a10 	vmov	s16, r0
 8012d1e:	f04f 0300 	mov.w	r3, #0
 8012d22:	f04f 020a 	mov.w	r2, #10
 8012d26:	4641      	mov	r1, r8
 8012d28:	4620      	mov	r0, r4
 8012d2a:	d106      	bne.n	8012d3a <_dtoa_r+0xb0a>
 8012d2c:	f000 f9fe 	bl	801312c <__multadd>
 8012d30:	4680      	mov	r8, r0
 8012d32:	4607      	mov	r7, r0
 8012d34:	f109 0901 	add.w	r9, r9, #1
 8012d38:	e772      	b.n	8012c20 <_dtoa_r+0x9f0>
 8012d3a:	f000 f9f7 	bl	801312c <__multadd>
 8012d3e:	4639      	mov	r1, r7
 8012d40:	4680      	mov	r8, r0
 8012d42:	2300      	movs	r3, #0
 8012d44:	220a      	movs	r2, #10
 8012d46:	4620      	mov	r0, r4
 8012d48:	f000 f9f0 	bl	801312c <__multadd>
 8012d4c:	4607      	mov	r7, r0
 8012d4e:	e7f1      	b.n	8012d34 <_dtoa_r+0xb04>
 8012d50:	9b03      	ldr	r3, [sp, #12]
 8012d52:	9302      	str	r3, [sp, #8]
 8012d54:	9d01      	ldr	r5, [sp, #4]
 8012d56:	ee18 0a10 	vmov	r0, s16
 8012d5a:	4631      	mov	r1, r6
 8012d5c:	f7ff f9da 	bl	8012114 <quorem>
 8012d60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012d64:	9b01      	ldr	r3, [sp, #4]
 8012d66:	f805 ab01 	strb.w	sl, [r5], #1
 8012d6a:	1aea      	subs	r2, r5, r3
 8012d6c:	9b02      	ldr	r3, [sp, #8]
 8012d6e:	4293      	cmp	r3, r2
 8012d70:	dd09      	ble.n	8012d86 <_dtoa_r+0xb56>
 8012d72:	ee18 1a10 	vmov	r1, s16
 8012d76:	2300      	movs	r3, #0
 8012d78:	220a      	movs	r2, #10
 8012d7a:	4620      	mov	r0, r4
 8012d7c:	f000 f9d6 	bl	801312c <__multadd>
 8012d80:	ee08 0a10 	vmov	s16, r0
 8012d84:	e7e7      	b.n	8012d56 <_dtoa_r+0xb26>
 8012d86:	9b02      	ldr	r3, [sp, #8]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	bfc8      	it	gt
 8012d8c:	461d      	movgt	r5, r3
 8012d8e:	9b01      	ldr	r3, [sp, #4]
 8012d90:	bfd8      	it	le
 8012d92:	2501      	movle	r5, #1
 8012d94:	441d      	add	r5, r3
 8012d96:	f04f 0800 	mov.w	r8, #0
 8012d9a:	ee18 1a10 	vmov	r1, s16
 8012d9e:	2201      	movs	r2, #1
 8012da0:	4620      	mov	r0, r4
 8012da2:	f000 fb73 	bl	801348c <__lshift>
 8012da6:	4631      	mov	r1, r6
 8012da8:	ee08 0a10 	vmov	s16, r0
 8012dac:	f000 fbde 	bl	801356c <__mcmp>
 8012db0:	2800      	cmp	r0, #0
 8012db2:	dc91      	bgt.n	8012cd8 <_dtoa_r+0xaa8>
 8012db4:	d102      	bne.n	8012dbc <_dtoa_r+0xb8c>
 8012db6:	f01a 0f01 	tst.w	sl, #1
 8012dba:	d18d      	bne.n	8012cd8 <_dtoa_r+0xaa8>
 8012dbc:	462b      	mov	r3, r5
 8012dbe:	461d      	mov	r5, r3
 8012dc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012dc4:	2a30      	cmp	r2, #48	; 0x30
 8012dc6:	d0fa      	beq.n	8012dbe <_dtoa_r+0xb8e>
 8012dc8:	e6d7      	b.n	8012b7a <_dtoa_r+0x94a>
 8012dca:	9a01      	ldr	r2, [sp, #4]
 8012dcc:	429a      	cmp	r2, r3
 8012dce:	d184      	bne.n	8012cda <_dtoa_r+0xaaa>
 8012dd0:	9b00      	ldr	r3, [sp, #0]
 8012dd2:	3301      	adds	r3, #1
 8012dd4:	9300      	str	r3, [sp, #0]
 8012dd6:	2331      	movs	r3, #49	; 0x31
 8012dd8:	7013      	strb	r3, [r2, #0]
 8012dda:	e6ce      	b.n	8012b7a <_dtoa_r+0x94a>
 8012ddc:	4b09      	ldr	r3, [pc, #36]	; (8012e04 <_dtoa_r+0xbd4>)
 8012dde:	f7ff ba95 	b.w	801230c <_dtoa_r+0xdc>
 8012de2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	f47f aa6e 	bne.w	80122c6 <_dtoa_r+0x96>
 8012dea:	4b07      	ldr	r3, [pc, #28]	; (8012e08 <_dtoa_r+0xbd8>)
 8012dec:	f7ff ba8e 	b.w	801230c <_dtoa_r+0xdc>
 8012df0:	9b02      	ldr	r3, [sp, #8]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	dcae      	bgt.n	8012d54 <_dtoa_r+0xb24>
 8012df6:	9b06      	ldr	r3, [sp, #24]
 8012df8:	2b02      	cmp	r3, #2
 8012dfa:	f73f aea8 	bgt.w	8012b4e <_dtoa_r+0x91e>
 8012dfe:	e7a9      	b.n	8012d54 <_dtoa_r+0xb24>
 8012e00:	08014450 	.word	0x08014450
 8012e04:	08014270 	.word	0x08014270
 8012e08:	080143d1 	.word	0x080143d1

08012e0c <std>:
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	b510      	push	{r4, lr}
 8012e10:	4604      	mov	r4, r0
 8012e12:	e9c0 3300 	strd	r3, r3, [r0]
 8012e16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012e1a:	6083      	str	r3, [r0, #8]
 8012e1c:	8181      	strh	r1, [r0, #12]
 8012e1e:	6643      	str	r3, [r0, #100]	; 0x64
 8012e20:	81c2      	strh	r2, [r0, #14]
 8012e22:	6183      	str	r3, [r0, #24]
 8012e24:	4619      	mov	r1, r3
 8012e26:	2208      	movs	r2, #8
 8012e28:	305c      	adds	r0, #92	; 0x5c
 8012e2a:	f7fe fbdb 	bl	80115e4 <memset>
 8012e2e:	4b05      	ldr	r3, [pc, #20]	; (8012e44 <std+0x38>)
 8012e30:	6263      	str	r3, [r4, #36]	; 0x24
 8012e32:	4b05      	ldr	r3, [pc, #20]	; (8012e48 <std+0x3c>)
 8012e34:	62a3      	str	r3, [r4, #40]	; 0x28
 8012e36:	4b05      	ldr	r3, [pc, #20]	; (8012e4c <std+0x40>)
 8012e38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012e3a:	4b05      	ldr	r3, [pc, #20]	; (8012e50 <std+0x44>)
 8012e3c:	6224      	str	r4, [r4, #32]
 8012e3e:	6323      	str	r3, [r4, #48]	; 0x30
 8012e40:	bd10      	pop	{r4, pc}
 8012e42:	bf00      	nop
 8012e44:	08013a51 	.word	0x08013a51
 8012e48:	08013a73 	.word	0x08013a73
 8012e4c:	08013aab 	.word	0x08013aab
 8012e50:	08013acf 	.word	0x08013acf

08012e54 <_cleanup_r>:
 8012e54:	4901      	ldr	r1, [pc, #4]	; (8012e5c <_cleanup_r+0x8>)
 8012e56:	f000 b8c1 	b.w	8012fdc <_fwalk_reent>
 8012e5a:	bf00      	nop
 8012e5c:	08013dd5 	.word	0x08013dd5

08012e60 <__sfmoreglue>:
 8012e60:	b570      	push	{r4, r5, r6, lr}
 8012e62:	2268      	movs	r2, #104	; 0x68
 8012e64:	1e4d      	subs	r5, r1, #1
 8012e66:	4355      	muls	r5, r2
 8012e68:	460e      	mov	r6, r1
 8012e6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012e6e:	f7fe fc2d 	bl	80116cc <_malloc_r>
 8012e72:	4604      	mov	r4, r0
 8012e74:	b140      	cbz	r0, 8012e88 <__sfmoreglue+0x28>
 8012e76:	2100      	movs	r1, #0
 8012e78:	e9c0 1600 	strd	r1, r6, [r0]
 8012e7c:	300c      	adds	r0, #12
 8012e7e:	60a0      	str	r0, [r4, #8]
 8012e80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012e84:	f7fe fbae 	bl	80115e4 <memset>
 8012e88:	4620      	mov	r0, r4
 8012e8a:	bd70      	pop	{r4, r5, r6, pc}

08012e8c <__sfp_lock_acquire>:
 8012e8c:	4801      	ldr	r0, [pc, #4]	; (8012e94 <__sfp_lock_acquire+0x8>)
 8012e8e:	f000 b8ca 	b.w	8013026 <__retarget_lock_acquire_recursive>
 8012e92:	bf00      	nop
 8012e94:	200029a9 	.word	0x200029a9

08012e98 <__sfp_lock_release>:
 8012e98:	4801      	ldr	r0, [pc, #4]	; (8012ea0 <__sfp_lock_release+0x8>)
 8012e9a:	f000 b8c5 	b.w	8013028 <__retarget_lock_release_recursive>
 8012e9e:	bf00      	nop
 8012ea0:	200029a9 	.word	0x200029a9

08012ea4 <__sinit_lock_acquire>:
 8012ea4:	4801      	ldr	r0, [pc, #4]	; (8012eac <__sinit_lock_acquire+0x8>)
 8012ea6:	f000 b8be 	b.w	8013026 <__retarget_lock_acquire_recursive>
 8012eaa:	bf00      	nop
 8012eac:	200029aa 	.word	0x200029aa

08012eb0 <__sinit_lock_release>:
 8012eb0:	4801      	ldr	r0, [pc, #4]	; (8012eb8 <__sinit_lock_release+0x8>)
 8012eb2:	f000 b8b9 	b.w	8013028 <__retarget_lock_release_recursive>
 8012eb6:	bf00      	nop
 8012eb8:	200029aa 	.word	0x200029aa

08012ebc <__sinit>:
 8012ebc:	b510      	push	{r4, lr}
 8012ebe:	4604      	mov	r4, r0
 8012ec0:	f7ff fff0 	bl	8012ea4 <__sinit_lock_acquire>
 8012ec4:	69a3      	ldr	r3, [r4, #24]
 8012ec6:	b11b      	cbz	r3, 8012ed0 <__sinit+0x14>
 8012ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ecc:	f7ff bff0 	b.w	8012eb0 <__sinit_lock_release>
 8012ed0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012ed4:	6523      	str	r3, [r4, #80]	; 0x50
 8012ed6:	4b13      	ldr	r3, [pc, #76]	; (8012f24 <__sinit+0x68>)
 8012ed8:	4a13      	ldr	r2, [pc, #76]	; (8012f28 <__sinit+0x6c>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	62a2      	str	r2, [r4, #40]	; 0x28
 8012ede:	42a3      	cmp	r3, r4
 8012ee0:	bf04      	itt	eq
 8012ee2:	2301      	moveq	r3, #1
 8012ee4:	61a3      	streq	r3, [r4, #24]
 8012ee6:	4620      	mov	r0, r4
 8012ee8:	f000 f820 	bl	8012f2c <__sfp>
 8012eec:	6060      	str	r0, [r4, #4]
 8012eee:	4620      	mov	r0, r4
 8012ef0:	f000 f81c 	bl	8012f2c <__sfp>
 8012ef4:	60a0      	str	r0, [r4, #8]
 8012ef6:	4620      	mov	r0, r4
 8012ef8:	f000 f818 	bl	8012f2c <__sfp>
 8012efc:	2200      	movs	r2, #0
 8012efe:	60e0      	str	r0, [r4, #12]
 8012f00:	2104      	movs	r1, #4
 8012f02:	6860      	ldr	r0, [r4, #4]
 8012f04:	f7ff ff82 	bl	8012e0c <std>
 8012f08:	68a0      	ldr	r0, [r4, #8]
 8012f0a:	2201      	movs	r2, #1
 8012f0c:	2109      	movs	r1, #9
 8012f0e:	f7ff ff7d 	bl	8012e0c <std>
 8012f12:	68e0      	ldr	r0, [r4, #12]
 8012f14:	2202      	movs	r2, #2
 8012f16:	2112      	movs	r1, #18
 8012f18:	f7ff ff78 	bl	8012e0c <std>
 8012f1c:	2301      	movs	r3, #1
 8012f1e:	61a3      	str	r3, [r4, #24]
 8012f20:	e7d2      	b.n	8012ec8 <__sinit+0xc>
 8012f22:	bf00      	nop
 8012f24:	0801425c 	.word	0x0801425c
 8012f28:	08012e55 	.word	0x08012e55

08012f2c <__sfp>:
 8012f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f2e:	4607      	mov	r7, r0
 8012f30:	f7ff ffac 	bl	8012e8c <__sfp_lock_acquire>
 8012f34:	4b1e      	ldr	r3, [pc, #120]	; (8012fb0 <__sfp+0x84>)
 8012f36:	681e      	ldr	r6, [r3, #0]
 8012f38:	69b3      	ldr	r3, [r6, #24]
 8012f3a:	b913      	cbnz	r3, 8012f42 <__sfp+0x16>
 8012f3c:	4630      	mov	r0, r6
 8012f3e:	f7ff ffbd 	bl	8012ebc <__sinit>
 8012f42:	3648      	adds	r6, #72	; 0x48
 8012f44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012f48:	3b01      	subs	r3, #1
 8012f4a:	d503      	bpl.n	8012f54 <__sfp+0x28>
 8012f4c:	6833      	ldr	r3, [r6, #0]
 8012f4e:	b30b      	cbz	r3, 8012f94 <__sfp+0x68>
 8012f50:	6836      	ldr	r6, [r6, #0]
 8012f52:	e7f7      	b.n	8012f44 <__sfp+0x18>
 8012f54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012f58:	b9d5      	cbnz	r5, 8012f90 <__sfp+0x64>
 8012f5a:	4b16      	ldr	r3, [pc, #88]	; (8012fb4 <__sfp+0x88>)
 8012f5c:	60e3      	str	r3, [r4, #12]
 8012f5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012f62:	6665      	str	r5, [r4, #100]	; 0x64
 8012f64:	f000 f85e 	bl	8013024 <__retarget_lock_init_recursive>
 8012f68:	f7ff ff96 	bl	8012e98 <__sfp_lock_release>
 8012f6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012f70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012f74:	6025      	str	r5, [r4, #0]
 8012f76:	61a5      	str	r5, [r4, #24]
 8012f78:	2208      	movs	r2, #8
 8012f7a:	4629      	mov	r1, r5
 8012f7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012f80:	f7fe fb30 	bl	80115e4 <memset>
 8012f84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012f88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012f8c:	4620      	mov	r0, r4
 8012f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f90:	3468      	adds	r4, #104	; 0x68
 8012f92:	e7d9      	b.n	8012f48 <__sfp+0x1c>
 8012f94:	2104      	movs	r1, #4
 8012f96:	4638      	mov	r0, r7
 8012f98:	f7ff ff62 	bl	8012e60 <__sfmoreglue>
 8012f9c:	4604      	mov	r4, r0
 8012f9e:	6030      	str	r0, [r6, #0]
 8012fa0:	2800      	cmp	r0, #0
 8012fa2:	d1d5      	bne.n	8012f50 <__sfp+0x24>
 8012fa4:	f7ff ff78 	bl	8012e98 <__sfp_lock_release>
 8012fa8:	230c      	movs	r3, #12
 8012faa:	603b      	str	r3, [r7, #0]
 8012fac:	e7ee      	b.n	8012f8c <__sfp+0x60>
 8012fae:	bf00      	nop
 8012fb0:	0801425c 	.word	0x0801425c
 8012fb4:	ffff0001 	.word	0xffff0001

08012fb8 <fiprintf>:
 8012fb8:	b40e      	push	{r1, r2, r3}
 8012fba:	b503      	push	{r0, r1, lr}
 8012fbc:	4601      	mov	r1, r0
 8012fbe:	ab03      	add	r3, sp, #12
 8012fc0:	4805      	ldr	r0, [pc, #20]	; (8012fd8 <fiprintf+0x20>)
 8012fc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8012fc6:	6800      	ldr	r0, [r0, #0]
 8012fc8:	9301      	str	r3, [sp, #4]
 8012fca:	f000 fc11 	bl	80137f0 <_vfiprintf_r>
 8012fce:	b002      	add	sp, #8
 8012fd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8012fd4:	b003      	add	sp, #12
 8012fd6:	4770      	bx	lr
 8012fd8:	2000018c 	.word	0x2000018c

08012fdc <_fwalk_reent>:
 8012fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fe0:	4606      	mov	r6, r0
 8012fe2:	4688      	mov	r8, r1
 8012fe4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012fe8:	2700      	movs	r7, #0
 8012fea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012fee:	f1b9 0901 	subs.w	r9, r9, #1
 8012ff2:	d505      	bpl.n	8013000 <_fwalk_reent+0x24>
 8012ff4:	6824      	ldr	r4, [r4, #0]
 8012ff6:	2c00      	cmp	r4, #0
 8012ff8:	d1f7      	bne.n	8012fea <_fwalk_reent+0xe>
 8012ffa:	4638      	mov	r0, r7
 8012ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013000:	89ab      	ldrh	r3, [r5, #12]
 8013002:	2b01      	cmp	r3, #1
 8013004:	d907      	bls.n	8013016 <_fwalk_reent+0x3a>
 8013006:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801300a:	3301      	adds	r3, #1
 801300c:	d003      	beq.n	8013016 <_fwalk_reent+0x3a>
 801300e:	4629      	mov	r1, r5
 8013010:	4630      	mov	r0, r6
 8013012:	47c0      	blx	r8
 8013014:	4307      	orrs	r7, r0
 8013016:	3568      	adds	r5, #104	; 0x68
 8013018:	e7e9      	b.n	8012fee <_fwalk_reent+0x12>
	...

0801301c <_localeconv_r>:
 801301c:	4800      	ldr	r0, [pc, #0]	; (8013020 <_localeconv_r+0x4>)
 801301e:	4770      	bx	lr
 8013020:	200002e0 	.word	0x200002e0

08013024 <__retarget_lock_init_recursive>:
 8013024:	4770      	bx	lr

08013026 <__retarget_lock_acquire_recursive>:
 8013026:	4770      	bx	lr

08013028 <__retarget_lock_release_recursive>:
 8013028:	4770      	bx	lr

0801302a <__ascii_mbtowc>:
 801302a:	b082      	sub	sp, #8
 801302c:	b901      	cbnz	r1, 8013030 <__ascii_mbtowc+0x6>
 801302e:	a901      	add	r1, sp, #4
 8013030:	b142      	cbz	r2, 8013044 <__ascii_mbtowc+0x1a>
 8013032:	b14b      	cbz	r3, 8013048 <__ascii_mbtowc+0x1e>
 8013034:	7813      	ldrb	r3, [r2, #0]
 8013036:	600b      	str	r3, [r1, #0]
 8013038:	7812      	ldrb	r2, [r2, #0]
 801303a:	1e10      	subs	r0, r2, #0
 801303c:	bf18      	it	ne
 801303e:	2001      	movne	r0, #1
 8013040:	b002      	add	sp, #8
 8013042:	4770      	bx	lr
 8013044:	4610      	mov	r0, r2
 8013046:	e7fb      	b.n	8013040 <__ascii_mbtowc+0x16>
 8013048:	f06f 0001 	mvn.w	r0, #1
 801304c:	e7f8      	b.n	8013040 <__ascii_mbtowc+0x16>
	...

08013050 <__malloc_lock>:
 8013050:	4801      	ldr	r0, [pc, #4]	; (8013058 <__malloc_lock+0x8>)
 8013052:	f7ff bfe8 	b.w	8013026 <__retarget_lock_acquire_recursive>
 8013056:	bf00      	nop
 8013058:	200029a8 	.word	0x200029a8

0801305c <__malloc_unlock>:
 801305c:	4801      	ldr	r0, [pc, #4]	; (8013064 <__malloc_unlock+0x8>)
 801305e:	f7ff bfe3 	b.w	8013028 <__retarget_lock_release_recursive>
 8013062:	bf00      	nop
 8013064:	200029a8 	.word	0x200029a8

08013068 <_Balloc>:
 8013068:	b570      	push	{r4, r5, r6, lr}
 801306a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801306c:	4604      	mov	r4, r0
 801306e:	460d      	mov	r5, r1
 8013070:	b976      	cbnz	r6, 8013090 <_Balloc+0x28>
 8013072:	2010      	movs	r0, #16
 8013074:	f7fe faa0 	bl	80115b8 <malloc>
 8013078:	4602      	mov	r2, r0
 801307a:	6260      	str	r0, [r4, #36]	; 0x24
 801307c:	b920      	cbnz	r0, 8013088 <_Balloc+0x20>
 801307e:	4b18      	ldr	r3, [pc, #96]	; (80130e0 <_Balloc+0x78>)
 8013080:	4818      	ldr	r0, [pc, #96]	; (80130e4 <_Balloc+0x7c>)
 8013082:	2166      	movs	r1, #102	; 0x66
 8013084:	f7ff f828 	bl	80120d8 <__assert_func>
 8013088:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801308c:	6006      	str	r6, [r0, #0]
 801308e:	60c6      	str	r6, [r0, #12]
 8013090:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013092:	68f3      	ldr	r3, [r6, #12]
 8013094:	b183      	cbz	r3, 80130b8 <_Balloc+0x50>
 8013096:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013098:	68db      	ldr	r3, [r3, #12]
 801309a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801309e:	b9b8      	cbnz	r0, 80130d0 <_Balloc+0x68>
 80130a0:	2101      	movs	r1, #1
 80130a2:	fa01 f605 	lsl.w	r6, r1, r5
 80130a6:	1d72      	adds	r2, r6, #5
 80130a8:	0092      	lsls	r2, r2, #2
 80130aa:	4620      	mov	r0, r4
 80130ac:	f000 fb60 	bl	8013770 <_calloc_r>
 80130b0:	b160      	cbz	r0, 80130cc <_Balloc+0x64>
 80130b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80130b6:	e00e      	b.n	80130d6 <_Balloc+0x6e>
 80130b8:	2221      	movs	r2, #33	; 0x21
 80130ba:	2104      	movs	r1, #4
 80130bc:	4620      	mov	r0, r4
 80130be:	f000 fb57 	bl	8013770 <_calloc_r>
 80130c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80130c4:	60f0      	str	r0, [r6, #12]
 80130c6:	68db      	ldr	r3, [r3, #12]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d1e4      	bne.n	8013096 <_Balloc+0x2e>
 80130cc:	2000      	movs	r0, #0
 80130ce:	bd70      	pop	{r4, r5, r6, pc}
 80130d0:	6802      	ldr	r2, [r0, #0]
 80130d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80130d6:	2300      	movs	r3, #0
 80130d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80130dc:	e7f7      	b.n	80130ce <_Balloc+0x66>
 80130de:	bf00      	nop
 80130e0:	080143de 	.word	0x080143de
 80130e4:	080144ce 	.word	0x080144ce

080130e8 <_Bfree>:
 80130e8:	b570      	push	{r4, r5, r6, lr}
 80130ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80130ec:	4605      	mov	r5, r0
 80130ee:	460c      	mov	r4, r1
 80130f0:	b976      	cbnz	r6, 8013110 <_Bfree+0x28>
 80130f2:	2010      	movs	r0, #16
 80130f4:	f7fe fa60 	bl	80115b8 <malloc>
 80130f8:	4602      	mov	r2, r0
 80130fa:	6268      	str	r0, [r5, #36]	; 0x24
 80130fc:	b920      	cbnz	r0, 8013108 <_Bfree+0x20>
 80130fe:	4b09      	ldr	r3, [pc, #36]	; (8013124 <_Bfree+0x3c>)
 8013100:	4809      	ldr	r0, [pc, #36]	; (8013128 <_Bfree+0x40>)
 8013102:	218a      	movs	r1, #138	; 0x8a
 8013104:	f7fe ffe8 	bl	80120d8 <__assert_func>
 8013108:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801310c:	6006      	str	r6, [r0, #0]
 801310e:	60c6      	str	r6, [r0, #12]
 8013110:	b13c      	cbz	r4, 8013122 <_Bfree+0x3a>
 8013112:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013114:	6862      	ldr	r2, [r4, #4]
 8013116:	68db      	ldr	r3, [r3, #12]
 8013118:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801311c:	6021      	str	r1, [r4, #0]
 801311e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013122:	bd70      	pop	{r4, r5, r6, pc}
 8013124:	080143de 	.word	0x080143de
 8013128:	080144ce 	.word	0x080144ce

0801312c <__multadd>:
 801312c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013130:	690d      	ldr	r5, [r1, #16]
 8013132:	4607      	mov	r7, r0
 8013134:	460c      	mov	r4, r1
 8013136:	461e      	mov	r6, r3
 8013138:	f101 0c14 	add.w	ip, r1, #20
 801313c:	2000      	movs	r0, #0
 801313e:	f8dc 3000 	ldr.w	r3, [ip]
 8013142:	b299      	uxth	r1, r3
 8013144:	fb02 6101 	mla	r1, r2, r1, r6
 8013148:	0c1e      	lsrs	r6, r3, #16
 801314a:	0c0b      	lsrs	r3, r1, #16
 801314c:	fb02 3306 	mla	r3, r2, r6, r3
 8013150:	b289      	uxth	r1, r1
 8013152:	3001      	adds	r0, #1
 8013154:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013158:	4285      	cmp	r5, r0
 801315a:	f84c 1b04 	str.w	r1, [ip], #4
 801315e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013162:	dcec      	bgt.n	801313e <__multadd+0x12>
 8013164:	b30e      	cbz	r6, 80131aa <__multadd+0x7e>
 8013166:	68a3      	ldr	r3, [r4, #8]
 8013168:	42ab      	cmp	r3, r5
 801316a:	dc19      	bgt.n	80131a0 <__multadd+0x74>
 801316c:	6861      	ldr	r1, [r4, #4]
 801316e:	4638      	mov	r0, r7
 8013170:	3101      	adds	r1, #1
 8013172:	f7ff ff79 	bl	8013068 <_Balloc>
 8013176:	4680      	mov	r8, r0
 8013178:	b928      	cbnz	r0, 8013186 <__multadd+0x5a>
 801317a:	4602      	mov	r2, r0
 801317c:	4b0c      	ldr	r3, [pc, #48]	; (80131b0 <__multadd+0x84>)
 801317e:	480d      	ldr	r0, [pc, #52]	; (80131b4 <__multadd+0x88>)
 8013180:	21b5      	movs	r1, #181	; 0xb5
 8013182:	f7fe ffa9 	bl	80120d8 <__assert_func>
 8013186:	6922      	ldr	r2, [r4, #16]
 8013188:	3202      	adds	r2, #2
 801318a:	f104 010c 	add.w	r1, r4, #12
 801318e:	0092      	lsls	r2, r2, #2
 8013190:	300c      	adds	r0, #12
 8013192:	f7fe fa19 	bl	80115c8 <memcpy>
 8013196:	4621      	mov	r1, r4
 8013198:	4638      	mov	r0, r7
 801319a:	f7ff ffa5 	bl	80130e8 <_Bfree>
 801319e:	4644      	mov	r4, r8
 80131a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80131a4:	3501      	adds	r5, #1
 80131a6:	615e      	str	r6, [r3, #20]
 80131a8:	6125      	str	r5, [r4, #16]
 80131aa:	4620      	mov	r0, r4
 80131ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131b0:	08014450 	.word	0x08014450
 80131b4:	080144ce 	.word	0x080144ce

080131b8 <__hi0bits>:
 80131b8:	0c03      	lsrs	r3, r0, #16
 80131ba:	041b      	lsls	r3, r3, #16
 80131bc:	b9d3      	cbnz	r3, 80131f4 <__hi0bits+0x3c>
 80131be:	0400      	lsls	r0, r0, #16
 80131c0:	2310      	movs	r3, #16
 80131c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80131c6:	bf04      	itt	eq
 80131c8:	0200      	lsleq	r0, r0, #8
 80131ca:	3308      	addeq	r3, #8
 80131cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80131d0:	bf04      	itt	eq
 80131d2:	0100      	lsleq	r0, r0, #4
 80131d4:	3304      	addeq	r3, #4
 80131d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80131da:	bf04      	itt	eq
 80131dc:	0080      	lsleq	r0, r0, #2
 80131de:	3302      	addeq	r3, #2
 80131e0:	2800      	cmp	r0, #0
 80131e2:	db05      	blt.n	80131f0 <__hi0bits+0x38>
 80131e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80131e8:	f103 0301 	add.w	r3, r3, #1
 80131ec:	bf08      	it	eq
 80131ee:	2320      	moveq	r3, #32
 80131f0:	4618      	mov	r0, r3
 80131f2:	4770      	bx	lr
 80131f4:	2300      	movs	r3, #0
 80131f6:	e7e4      	b.n	80131c2 <__hi0bits+0xa>

080131f8 <__lo0bits>:
 80131f8:	6803      	ldr	r3, [r0, #0]
 80131fa:	f013 0207 	ands.w	r2, r3, #7
 80131fe:	4601      	mov	r1, r0
 8013200:	d00b      	beq.n	801321a <__lo0bits+0x22>
 8013202:	07da      	lsls	r2, r3, #31
 8013204:	d423      	bmi.n	801324e <__lo0bits+0x56>
 8013206:	0798      	lsls	r0, r3, #30
 8013208:	bf49      	itett	mi
 801320a:	085b      	lsrmi	r3, r3, #1
 801320c:	089b      	lsrpl	r3, r3, #2
 801320e:	2001      	movmi	r0, #1
 8013210:	600b      	strmi	r3, [r1, #0]
 8013212:	bf5c      	itt	pl
 8013214:	600b      	strpl	r3, [r1, #0]
 8013216:	2002      	movpl	r0, #2
 8013218:	4770      	bx	lr
 801321a:	b298      	uxth	r0, r3
 801321c:	b9a8      	cbnz	r0, 801324a <__lo0bits+0x52>
 801321e:	0c1b      	lsrs	r3, r3, #16
 8013220:	2010      	movs	r0, #16
 8013222:	b2da      	uxtb	r2, r3
 8013224:	b90a      	cbnz	r2, 801322a <__lo0bits+0x32>
 8013226:	3008      	adds	r0, #8
 8013228:	0a1b      	lsrs	r3, r3, #8
 801322a:	071a      	lsls	r2, r3, #28
 801322c:	bf04      	itt	eq
 801322e:	091b      	lsreq	r3, r3, #4
 8013230:	3004      	addeq	r0, #4
 8013232:	079a      	lsls	r2, r3, #30
 8013234:	bf04      	itt	eq
 8013236:	089b      	lsreq	r3, r3, #2
 8013238:	3002      	addeq	r0, #2
 801323a:	07da      	lsls	r2, r3, #31
 801323c:	d403      	bmi.n	8013246 <__lo0bits+0x4e>
 801323e:	085b      	lsrs	r3, r3, #1
 8013240:	f100 0001 	add.w	r0, r0, #1
 8013244:	d005      	beq.n	8013252 <__lo0bits+0x5a>
 8013246:	600b      	str	r3, [r1, #0]
 8013248:	4770      	bx	lr
 801324a:	4610      	mov	r0, r2
 801324c:	e7e9      	b.n	8013222 <__lo0bits+0x2a>
 801324e:	2000      	movs	r0, #0
 8013250:	4770      	bx	lr
 8013252:	2020      	movs	r0, #32
 8013254:	4770      	bx	lr
	...

08013258 <__i2b>:
 8013258:	b510      	push	{r4, lr}
 801325a:	460c      	mov	r4, r1
 801325c:	2101      	movs	r1, #1
 801325e:	f7ff ff03 	bl	8013068 <_Balloc>
 8013262:	4602      	mov	r2, r0
 8013264:	b928      	cbnz	r0, 8013272 <__i2b+0x1a>
 8013266:	4b05      	ldr	r3, [pc, #20]	; (801327c <__i2b+0x24>)
 8013268:	4805      	ldr	r0, [pc, #20]	; (8013280 <__i2b+0x28>)
 801326a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801326e:	f7fe ff33 	bl	80120d8 <__assert_func>
 8013272:	2301      	movs	r3, #1
 8013274:	6144      	str	r4, [r0, #20]
 8013276:	6103      	str	r3, [r0, #16]
 8013278:	bd10      	pop	{r4, pc}
 801327a:	bf00      	nop
 801327c:	08014450 	.word	0x08014450
 8013280:	080144ce 	.word	0x080144ce

08013284 <__multiply>:
 8013284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013288:	4691      	mov	r9, r2
 801328a:	690a      	ldr	r2, [r1, #16]
 801328c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013290:	429a      	cmp	r2, r3
 8013292:	bfb8      	it	lt
 8013294:	460b      	movlt	r3, r1
 8013296:	460c      	mov	r4, r1
 8013298:	bfbc      	itt	lt
 801329a:	464c      	movlt	r4, r9
 801329c:	4699      	movlt	r9, r3
 801329e:	6927      	ldr	r7, [r4, #16]
 80132a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80132a4:	68a3      	ldr	r3, [r4, #8]
 80132a6:	6861      	ldr	r1, [r4, #4]
 80132a8:	eb07 060a 	add.w	r6, r7, sl
 80132ac:	42b3      	cmp	r3, r6
 80132ae:	b085      	sub	sp, #20
 80132b0:	bfb8      	it	lt
 80132b2:	3101      	addlt	r1, #1
 80132b4:	f7ff fed8 	bl	8013068 <_Balloc>
 80132b8:	b930      	cbnz	r0, 80132c8 <__multiply+0x44>
 80132ba:	4602      	mov	r2, r0
 80132bc:	4b44      	ldr	r3, [pc, #272]	; (80133d0 <__multiply+0x14c>)
 80132be:	4845      	ldr	r0, [pc, #276]	; (80133d4 <__multiply+0x150>)
 80132c0:	f240 115d 	movw	r1, #349	; 0x15d
 80132c4:	f7fe ff08 	bl	80120d8 <__assert_func>
 80132c8:	f100 0514 	add.w	r5, r0, #20
 80132cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80132d0:	462b      	mov	r3, r5
 80132d2:	2200      	movs	r2, #0
 80132d4:	4543      	cmp	r3, r8
 80132d6:	d321      	bcc.n	801331c <__multiply+0x98>
 80132d8:	f104 0314 	add.w	r3, r4, #20
 80132dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80132e0:	f109 0314 	add.w	r3, r9, #20
 80132e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80132e8:	9202      	str	r2, [sp, #8]
 80132ea:	1b3a      	subs	r2, r7, r4
 80132ec:	3a15      	subs	r2, #21
 80132ee:	f022 0203 	bic.w	r2, r2, #3
 80132f2:	3204      	adds	r2, #4
 80132f4:	f104 0115 	add.w	r1, r4, #21
 80132f8:	428f      	cmp	r7, r1
 80132fa:	bf38      	it	cc
 80132fc:	2204      	movcc	r2, #4
 80132fe:	9201      	str	r2, [sp, #4]
 8013300:	9a02      	ldr	r2, [sp, #8]
 8013302:	9303      	str	r3, [sp, #12]
 8013304:	429a      	cmp	r2, r3
 8013306:	d80c      	bhi.n	8013322 <__multiply+0x9e>
 8013308:	2e00      	cmp	r6, #0
 801330a:	dd03      	ble.n	8013314 <__multiply+0x90>
 801330c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013310:	2b00      	cmp	r3, #0
 8013312:	d05a      	beq.n	80133ca <__multiply+0x146>
 8013314:	6106      	str	r6, [r0, #16]
 8013316:	b005      	add	sp, #20
 8013318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801331c:	f843 2b04 	str.w	r2, [r3], #4
 8013320:	e7d8      	b.n	80132d4 <__multiply+0x50>
 8013322:	f8b3 a000 	ldrh.w	sl, [r3]
 8013326:	f1ba 0f00 	cmp.w	sl, #0
 801332a:	d024      	beq.n	8013376 <__multiply+0xf2>
 801332c:	f104 0e14 	add.w	lr, r4, #20
 8013330:	46a9      	mov	r9, r5
 8013332:	f04f 0c00 	mov.w	ip, #0
 8013336:	f85e 2b04 	ldr.w	r2, [lr], #4
 801333a:	f8d9 1000 	ldr.w	r1, [r9]
 801333e:	fa1f fb82 	uxth.w	fp, r2
 8013342:	b289      	uxth	r1, r1
 8013344:	fb0a 110b 	mla	r1, sl, fp, r1
 8013348:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801334c:	f8d9 2000 	ldr.w	r2, [r9]
 8013350:	4461      	add	r1, ip
 8013352:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013356:	fb0a c20b 	mla	r2, sl, fp, ip
 801335a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801335e:	b289      	uxth	r1, r1
 8013360:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013364:	4577      	cmp	r7, lr
 8013366:	f849 1b04 	str.w	r1, [r9], #4
 801336a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801336e:	d8e2      	bhi.n	8013336 <__multiply+0xb2>
 8013370:	9a01      	ldr	r2, [sp, #4]
 8013372:	f845 c002 	str.w	ip, [r5, r2]
 8013376:	9a03      	ldr	r2, [sp, #12]
 8013378:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801337c:	3304      	adds	r3, #4
 801337e:	f1b9 0f00 	cmp.w	r9, #0
 8013382:	d020      	beq.n	80133c6 <__multiply+0x142>
 8013384:	6829      	ldr	r1, [r5, #0]
 8013386:	f104 0c14 	add.w	ip, r4, #20
 801338a:	46ae      	mov	lr, r5
 801338c:	f04f 0a00 	mov.w	sl, #0
 8013390:	f8bc b000 	ldrh.w	fp, [ip]
 8013394:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013398:	fb09 220b 	mla	r2, r9, fp, r2
 801339c:	4492      	add	sl, r2
 801339e:	b289      	uxth	r1, r1
 80133a0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80133a4:	f84e 1b04 	str.w	r1, [lr], #4
 80133a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80133ac:	f8be 1000 	ldrh.w	r1, [lr]
 80133b0:	0c12      	lsrs	r2, r2, #16
 80133b2:	fb09 1102 	mla	r1, r9, r2, r1
 80133b6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80133ba:	4567      	cmp	r7, ip
 80133bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80133c0:	d8e6      	bhi.n	8013390 <__multiply+0x10c>
 80133c2:	9a01      	ldr	r2, [sp, #4]
 80133c4:	50a9      	str	r1, [r5, r2]
 80133c6:	3504      	adds	r5, #4
 80133c8:	e79a      	b.n	8013300 <__multiply+0x7c>
 80133ca:	3e01      	subs	r6, #1
 80133cc:	e79c      	b.n	8013308 <__multiply+0x84>
 80133ce:	bf00      	nop
 80133d0:	08014450 	.word	0x08014450
 80133d4:	080144ce 	.word	0x080144ce

080133d8 <__pow5mult>:
 80133d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133dc:	4615      	mov	r5, r2
 80133de:	f012 0203 	ands.w	r2, r2, #3
 80133e2:	4606      	mov	r6, r0
 80133e4:	460f      	mov	r7, r1
 80133e6:	d007      	beq.n	80133f8 <__pow5mult+0x20>
 80133e8:	4c25      	ldr	r4, [pc, #148]	; (8013480 <__pow5mult+0xa8>)
 80133ea:	3a01      	subs	r2, #1
 80133ec:	2300      	movs	r3, #0
 80133ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80133f2:	f7ff fe9b 	bl	801312c <__multadd>
 80133f6:	4607      	mov	r7, r0
 80133f8:	10ad      	asrs	r5, r5, #2
 80133fa:	d03d      	beq.n	8013478 <__pow5mult+0xa0>
 80133fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80133fe:	b97c      	cbnz	r4, 8013420 <__pow5mult+0x48>
 8013400:	2010      	movs	r0, #16
 8013402:	f7fe f8d9 	bl	80115b8 <malloc>
 8013406:	4602      	mov	r2, r0
 8013408:	6270      	str	r0, [r6, #36]	; 0x24
 801340a:	b928      	cbnz	r0, 8013418 <__pow5mult+0x40>
 801340c:	4b1d      	ldr	r3, [pc, #116]	; (8013484 <__pow5mult+0xac>)
 801340e:	481e      	ldr	r0, [pc, #120]	; (8013488 <__pow5mult+0xb0>)
 8013410:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013414:	f7fe fe60 	bl	80120d8 <__assert_func>
 8013418:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801341c:	6004      	str	r4, [r0, #0]
 801341e:	60c4      	str	r4, [r0, #12]
 8013420:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013424:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013428:	b94c      	cbnz	r4, 801343e <__pow5mult+0x66>
 801342a:	f240 2171 	movw	r1, #625	; 0x271
 801342e:	4630      	mov	r0, r6
 8013430:	f7ff ff12 	bl	8013258 <__i2b>
 8013434:	2300      	movs	r3, #0
 8013436:	f8c8 0008 	str.w	r0, [r8, #8]
 801343a:	4604      	mov	r4, r0
 801343c:	6003      	str	r3, [r0, #0]
 801343e:	f04f 0900 	mov.w	r9, #0
 8013442:	07eb      	lsls	r3, r5, #31
 8013444:	d50a      	bpl.n	801345c <__pow5mult+0x84>
 8013446:	4639      	mov	r1, r7
 8013448:	4622      	mov	r2, r4
 801344a:	4630      	mov	r0, r6
 801344c:	f7ff ff1a 	bl	8013284 <__multiply>
 8013450:	4639      	mov	r1, r7
 8013452:	4680      	mov	r8, r0
 8013454:	4630      	mov	r0, r6
 8013456:	f7ff fe47 	bl	80130e8 <_Bfree>
 801345a:	4647      	mov	r7, r8
 801345c:	106d      	asrs	r5, r5, #1
 801345e:	d00b      	beq.n	8013478 <__pow5mult+0xa0>
 8013460:	6820      	ldr	r0, [r4, #0]
 8013462:	b938      	cbnz	r0, 8013474 <__pow5mult+0x9c>
 8013464:	4622      	mov	r2, r4
 8013466:	4621      	mov	r1, r4
 8013468:	4630      	mov	r0, r6
 801346a:	f7ff ff0b 	bl	8013284 <__multiply>
 801346e:	6020      	str	r0, [r4, #0]
 8013470:	f8c0 9000 	str.w	r9, [r0]
 8013474:	4604      	mov	r4, r0
 8013476:	e7e4      	b.n	8013442 <__pow5mult+0x6a>
 8013478:	4638      	mov	r0, r7
 801347a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801347e:	bf00      	nop
 8013480:	08014620 	.word	0x08014620
 8013484:	080143de 	.word	0x080143de
 8013488:	080144ce 	.word	0x080144ce

0801348c <__lshift>:
 801348c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013490:	460c      	mov	r4, r1
 8013492:	6849      	ldr	r1, [r1, #4]
 8013494:	6923      	ldr	r3, [r4, #16]
 8013496:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801349a:	68a3      	ldr	r3, [r4, #8]
 801349c:	4607      	mov	r7, r0
 801349e:	4691      	mov	r9, r2
 80134a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80134a4:	f108 0601 	add.w	r6, r8, #1
 80134a8:	42b3      	cmp	r3, r6
 80134aa:	db0b      	blt.n	80134c4 <__lshift+0x38>
 80134ac:	4638      	mov	r0, r7
 80134ae:	f7ff fddb 	bl	8013068 <_Balloc>
 80134b2:	4605      	mov	r5, r0
 80134b4:	b948      	cbnz	r0, 80134ca <__lshift+0x3e>
 80134b6:	4602      	mov	r2, r0
 80134b8:	4b2a      	ldr	r3, [pc, #168]	; (8013564 <__lshift+0xd8>)
 80134ba:	482b      	ldr	r0, [pc, #172]	; (8013568 <__lshift+0xdc>)
 80134bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80134c0:	f7fe fe0a 	bl	80120d8 <__assert_func>
 80134c4:	3101      	adds	r1, #1
 80134c6:	005b      	lsls	r3, r3, #1
 80134c8:	e7ee      	b.n	80134a8 <__lshift+0x1c>
 80134ca:	2300      	movs	r3, #0
 80134cc:	f100 0114 	add.w	r1, r0, #20
 80134d0:	f100 0210 	add.w	r2, r0, #16
 80134d4:	4618      	mov	r0, r3
 80134d6:	4553      	cmp	r3, sl
 80134d8:	db37      	blt.n	801354a <__lshift+0xbe>
 80134da:	6920      	ldr	r0, [r4, #16]
 80134dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80134e0:	f104 0314 	add.w	r3, r4, #20
 80134e4:	f019 091f 	ands.w	r9, r9, #31
 80134e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80134ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80134f0:	d02f      	beq.n	8013552 <__lshift+0xc6>
 80134f2:	f1c9 0e20 	rsb	lr, r9, #32
 80134f6:	468a      	mov	sl, r1
 80134f8:	f04f 0c00 	mov.w	ip, #0
 80134fc:	681a      	ldr	r2, [r3, #0]
 80134fe:	fa02 f209 	lsl.w	r2, r2, r9
 8013502:	ea42 020c 	orr.w	r2, r2, ip
 8013506:	f84a 2b04 	str.w	r2, [sl], #4
 801350a:	f853 2b04 	ldr.w	r2, [r3], #4
 801350e:	4298      	cmp	r0, r3
 8013510:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013514:	d8f2      	bhi.n	80134fc <__lshift+0x70>
 8013516:	1b03      	subs	r3, r0, r4
 8013518:	3b15      	subs	r3, #21
 801351a:	f023 0303 	bic.w	r3, r3, #3
 801351e:	3304      	adds	r3, #4
 8013520:	f104 0215 	add.w	r2, r4, #21
 8013524:	4290      	cmp	r0, r2
 8013526:	bf38      	it	cc
 8013528:	2304      	movcc	r3, #4
 801352a:	f841 c003 	str.w	ip, [r1, r3]
 801352e:	f1bc 0f00 	cmp.w	ip, #0
 8013532:	d001      	beq.n	8013538 <__lshift+0xac>
 8013534:	f108 0602 	add.w	r6, r8, #2
 8013538:	3e01      	subs	r6, #1
 801353a:	4638      	mov	r0, r7
 801353c:	612e      	str	r6, [r5, #16]
 801353e:	4621      	mov	r1, r4
 8013540:	f7ff fdd2 	bl	80130e8 <_Bfree>
 8013544:	4628      	mov	r0, r5
 8013546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801354a:	f842 0f04 	str.w	r0, [r2, #4]!
 801354e:	3301      	adds	r3, #1
 8013550:	e7c1      	b.n	80134d6 <__lshift+0x4a>
 8013552:	3904      	subs	r1, #4
 8013554:	f853 2b04 	ldr.w	r2, [r3], #4
 8013558:	f841 2f04 	str.w	r2, [r1, #4]!
 801355c:	4298      	cmp	r0, r3
 801355e:	d8f9      	bhi.n	8013554 <__lshift+0xc8>
 8013560:	e7ea      	b.n	8013538 <__lshift+0xac>
 8013562:	bf00      	nop
 8013564:	08014450 	.word	0x08014450
 8013568:	080144ce 	.word	0x080144ce

0801356c <__mcmp>:
 801356c:	b530      	push	{r4, r5, lr}
 801356e:	6902      	ldr	r2, [r0, #16]
 8013570:	690c      	ldr	r4, [r1, #16]
 8013572:	1b12      	subs	r2, r2, r4
 8013574:	d10e      	bne.n	8013594 <__mcmp+0x28>
 8013576:	f100 0314 	add.w	r3, r0, #20
 801357a:	3114      	adds	r1, #20
 801357c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013580:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013584:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013588:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801358c:	42a5      	cmp	r5, r4
 801358e:	d003      	beq.n	8013598 <__mcmp+0x2c>
 8013590:	d305      	bcc.n	801359e <__mcmp+0x32>
 8013592:	2201      	movs	r2, #1
 8013594:	4610      	mov	r0, r2
 8013596:	bd30      	pop	{r4, r5, pc}
 8013598:	4283      	cmp	r3, r0
 801359a:	d3f3      	bcc.n	8013584 <__mcmp+0x18>
 801359c:	e7fa      	b.n	8013594 <__mcmp+0x28>
 801359e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80135a2:	e7f7      	b.n	8013594 <__mcmp+0x28>

080135a4 <__mdiff>:
 80135a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135a8:	460c      	mov	r4, r1
 80135aa:	4606      	mov	r6, r0
 80135ac:	4611      	mov	r1, r2
 80135ae:	4620      	mov	r0, r4
 80135b0:	4690      	mov	r8, r2
 80135b2:	f7ff ffdb 	bl	801356c <__mcmp>
 80135b6:	1e05      	subs	r5, r0, #0
 80135b8:	d110      	bne.n	80135dc <__mdiff+0x38>
 80135ba:	4629      	mov	r1, r5
 80135bc:	4630      	mov	r0, r6
 80135be:	f7ff fd53 	bl	8013068 <_Balloc>
 80135c2:	b930      	cbnz	r0, 80135d2 <__mdiff+0x2e>
 80135c4:	4b3a      	ldr	r3, [pc, #232]	; (80136b0 <__mdiff+0x10c>)
 80135c6:	4602      	mov	r2, r0
 80135c8:	f240 2132 	movw	r1, #562	; 0x232
 80135cc:	4839      	ldr	r0, [pc, #228]	; (80136b4 <__mdiff+0x110>)
 80135ce:	f7fe fd83 	bl	80120d8 <__assert_func>
 80135d2:	2301      	movs	r3, #1
 80135d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80135d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135dc:	bfa4      	itt	ge
 80135de:	4643      	movge	r3, r8
 80135e0:	46a0      	movge	r8, r4
 80135e2:	4630      	mov	r0, r6
 80135e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80135e8:	bfa6      	itte	ge
 80135ea:	461c      	movge	r4, r3
 80135ec:	2500      	movge	r5, #0
 80135ee:	2501      	movlt	r5, #1
 80135f0:	f7ff fd3a 	bl	8013068 <_Balloc>
 80135f4:	b920      	cbnz	r0, 8013600 <__mdiff+0x5c>
 80135f6:	4b2e      	ldr	r3, [pc, #184]	; (80136b0 <__mdiff+0x10c>)
 80135f8:	4602      	mov	r2, r0
 80135fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80135fe:	e7e5      	b.n	80135cc <__mdiff+0x28>
 8013600:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013604:	6926      	ldr	r6, [r4, #16]
 8013606:	60c5      	str	r5, [r0, #12]
 8013608:	f104 0914 	add.w	r9, r4, #20
 801360c:	f108 0514 	add.w	r5, r8, #20
 8013610:	f100 0e14 	add.w	lr, r0, #20
 8013614:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013618:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801361c:	f108 0210 	add.w	r2, r8, #16
 8013620:	46f2      	mov	sl, lr
 8013622:	2100      	movs	r1, #0
 8013624:	f859 3b04 	ldr.w	r3, [r9], #4
 8013628:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801362c:	fa1f f883 	uxth.w	r8, r3
 8013630:	fa11 f18b 	uxtah	r1, r1, fp
 8013634:	0c1b      	lsrs	r3, r3, #16
 8013636:	eba1 0808 	sub.w	r8, r1, r8
 801363a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801363e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013642:	fa1f f888 	uxth.w	r8, r8
 8013646:	1419      	asrs	r1, r3, #16
 8013648:	454e      	cmp	r6, r9
 801364a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801364e:	f84a 3b04 	str.w	r3, [sl], #4
 8013652:	d8e7      	bhi.n	8013624 <__mdiff+0x80>
 8013654:	1b33      	subs	r3, r6, r4
 8013656:	3b15      	subs	r3, #21
 8013658:	f023 0303 	bic.w	r3, r3, #3
 801365c:	3304      	adds	r3, #4
 801365e:	3415      	adds	r4, #21
 8013660:	42a6      	cmp	r6, r4
 8013662:	bf38      	it	cc
 8013664:	2304      	movcc	r3, #4
 8013666:	441d      	add	r5, r3
 8013668:	4473      	add	r3, lr
 801366a:	469e      	mov	lr, r3
 801366c:	462e      	mov	r6, r5
 801366e:	4566      	cmp	r6, ip
 8013670:	d30e      	bcc.n	8013690 <__mdiff+0xec>
 8013672:	f10c 0203 	add.w	r2, ip, #3
 8013676:	1b52      	subs	r2, r2, r5
 8013678:	f022 0203 	bic.w	r2, r2, #3
 801367c:	3d03      	subs	r5, #3
 801367e:	45ac      	cmp	ip, r5
 8013680:	bf38      	it	cc
 8013682:	2200      	movcc	r2, #0
 8013684:	441a      	add	r2, r3
 8013686:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801368a:	b17b      	cbz	r3, 80136ac <__mdiff+0x108>
 801368c:	6107      	str	r7, [r0, #16]
 801368e:	e7a3      	b.n	80135d8 <__mdiff+0x34>
 8013690:	f856 8b04 	ldr.w	r8, [r6], #4
 8013694:	fa11 f288 	uxtah	r2, r1, r8
 8013698:	1414      	asrs	r4, r2, #16
 801369a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801369e:	b292      	uxth	r2, r2
 80136a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80136a4:	f84e 2b04 	str.w	r2, [lr], #4
 80136a8:	1421      	asrs	r1, r4, #16
 80136aa:	e7e0      	b.n	801366e <__mdiff+0xca>
 80136ac:	3f01      	subs	r7, #1
 80136ae:	e7ea      	b.n	8013686 <__mdiff+0xe2>
 80136b0:	08014450 	.word	0x08014450
 80136b4:	080144ce 	.word	0x080144ce

080136b8 <__d2b>:
 80136b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80136bc:	4689      	mov	r9, r1
 80136be:	2101      	movs	r1, #1
 80136c0:	ec57 6b10 	vmov	r6, r7, d0
 80136c4:	4690      	mov	r8, r2
 80136c6:	f7ff fccf 	bl	8013068 <_Balloc>
 80136ca:	4604      	mov	r4, r0
 80136cc:	b930      	cbnz	r0, 80136dc <__d2b+0x24>
 80136ce:	4602      	mov	r2, r0
 80136d0:	4b25      	ldr	r3, [pc, #148]	; (8013768 <__d2b+0xb0>)
 80136d2:	4826      	ldr	r0, [pc, #152]	; (801376c <__d2b+0xb4>)
 80136d4:	f240 310a 	movw	r1, #778	; 0x30a
 80136d8:	f7fe fcfe 	bl	80120d8 <__assert_func>
 80136dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80136e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80136e4:	bb35      	cbnz	r5, 8013734 <__d2b+0x7c>
 80136e6:	2e00      	cmp	r6, #0
 80136e8:	9301      	str	r3, [sp, #4]
 80136ea:	d028      	beq.n	801373e <__d2b+0x86>
 80136ec:	4668      	mov	r0, sp
 80136ee:	9600      	str	r6, [sp, #0]
 80136f0:	f7ff fd82 	bl	80131f8 <__lo0bits>
 80136f4:	9900      	ldr	r1, [sp, #0]
 80136f6:	b300      	cbz	r0, 801373a <__d2b+0x82>
 80136f8:	9a01      	ldr	r2, [sp, #4]
 80136fa:	f1c0 0320 	rsb	r3, r0, #32
 80136fe:	fa02 f303 	lsl.w	r3, r2, r3
 8013702:	430b      	orrs	r3, r1
 8013704:	40c2      	lsrs	r2, r0
 8013706:	6163      	str	r3, [r4, #20]
 8013708:	9201      	str	r2, [sp, #4]
 801370a:	9b01      	ldr	r3, [sp, #4]
 801370c:	61a3      	str	r3, [r4, #24]
 801370e:	2b00      	cmp	r3, #0
 8013710:	bf14      	ite	ne
 8013712:	2202      	movne	r2, #2
 8013714:	2201      	moveq	r2, #1
 8013716:	6122      	str	r2, [r4, #16]
 8013718:	b1d5      	cbz	r5, 8013750 <__d2b+0x98>
 801371a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801371e:	4405      	add	r5, r0
 8013720:	f8c9 5000 	str.w	r5, [r9]
 8013724:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013728:	f8c8 0000 	str.w	r0, [r8]
 801372c:	4620      	mov	r0, r4
 801372e:	b003      	add	sp, #12
 8013730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013738:	e7d5      	b.n	80136e6 <__d2b+0x2e>
 801373a:	6161      	str	r1, [r4, #20]
 801373c:	e7e5      	b.n	801370a <__d2b+0x52>
 801373e:	a801      	add	r0, sp, #4
 8013740:	f7ff fd5a 	bl	80131f8 <__lo0bits>
 8013744:	9b01      	ldr	r3, [sp, #4]
 8013746:	6163      	str	r3, [r4, #20]
 8013748:	2201      	movs	r2, #1
 801374a:	6122      	str	r2, [r4, #16]
 801374c:	3020      	adds	r0, #32
 801374e:	e7e3      	b.n	8013718 <__d2b+0x60>
 8013750:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013754:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013758:	f8c9 0000 	str.w	r0, [r9]
 801375c:	6918      	ldr	r0, [r3, #16]
 801375e:	f7ff fd2b 	bl	80131b8 <__hi0bits>
 8013762:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013766:	e7df      	b.n	8013728 <__d2b+0x70>
 8013768:	08014450 	.word	0x08014450
 801376c:	080144ce 	.word	0x080144ce

08013770 <_calloc_r>:
 8013770:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013772:	fba1 2402 	umull	r2, r4, r1, r2
 8013776:	b94c      	cbnz	r4, 801378c <_calloc_r+0x1c>
 8013778:	4611      	mov	r1, r2
 801377a:	9201      	str	r2, [sp, #4]
 801377c:	f7fd ffa6 	bl	80116cc <_malloc_r>
 8013780:	9a01      	ldr	r2, [sp, #4]
 8013782:	4605      	mov	r5, r0
 8013784:	b930      	cbnz	r0, 8013794 <_calloc_r+0x24>
 8013786:	4628      	mov	r0, r5
 8013788:	b003      	add	sp, #12
 801378a:	bd30      	pop	{r4, r5, pc}
 801378c:	220c      	movs	r2, #12
 801378e:	6002      	str	r2, [r0, #0]
 8013790:	2500      	movs	r5, #0
 8013792:	e7f8      	b.n	8013786 <_calloc_r+0x16>
 8013794:	4621      	mov	r1, r4
 8013796:	f7fd ff25 	bl	80115e4 <memset>
 801379a:	e7f4      	b.n	8013786 <_calloc_r+0x16>

0801379c <__sfputc_r>:
 801379c:	6893      	ldr	r3, [r2, #8]
 801379e:	3b01      	subs	r3, #1
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	b410      	push	{r4}
 80137a4:	6093      	str	r3, [r2, #8]
 80137a6:	da08      	bge.n	80137ba <__sfputc_r+0x1e>
 80137a8:	6994      	ldr	r4, [r2, #24]
 80137aa:	42a3      	cmp	r3, r4
 80137ac:	db01      	blt.n	80137b2 <__sfputc_r+0x16>
 80137ae:	290a      	cmp	r1, #10
 80137b0:	d103      	bne.n	80137ba <__sfputc_r+0x1e>
 80137b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80137b6:	f000 b98f 	b.w	8013ad8 <__swbuf_r>
 80137ba:	6813      	ldr	r3, [r2, #0]
 80137bc:	1c58      	adds	r0, r3, #1
 80137be:	6010      	str	r0, [r2, #0]
 80137c0:	7019      	strb	r1, [r3, #0]
 80137c2:	4608      	mov	r0, r1
 80137c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80137c8:	4770      	bx	lr

080137ca <__sfputs_r>:
 80137ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137cc:	4606      	mov	r6, r0
 80137ce:	460f      	mov	r7, r1
 80137d0:	4614      	mov	r4, r2
 80137d2:	18d5      	adds	r5, r2, r3
 80137d4:	42ac      	cmp	r4, r5
 80137d6:	d101      	bne.n	80137dc <__sfputs_r+0x12>
 80137d8:	2000      	movs	r0, #0
 80137da:	e007      	b.n	80137ec <__sfputs_r+0x22>
 80137dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137e0:	463a      	mov	r2, r7
 80137e2:	4630      	mov	r0, r6
 80137e4:	f7ff ffda 	bl	801379c <__sfputc_r>
 80137e8:	1c43      	adds	r3, r0, #1
 80137ea:	d1f3      	bne.n	80137d4 <__sfputs_r+0xa>
 80137ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080137f0 <_vfiprintf_r>:
 80137f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137f4:	460d      	mov	r5, r1
 80137f6:	b09d      	sub	sp, #116	; 0x74
 80137f8:	4614      	mov	r4, r2
 80137fa:	4698      	mov	r8, r3
 80137fc:	4606      	mov	r6, r0
 80137fe:	b118      	cbz	r0, 8013808 <_vfiprintf_r+0x18>
 8013800:	6983      	ldr	r3, [r0, #24]
 8013802:	b90b      	cbnz	r3, 8013808 <_vfiprintf_r+0x18>
 8013804:	f7ff fb5a 	bl	8012ebc <__sinit>
 8013808:	4b89      	ldr	r3, [pc, #548]	; (8013a30 <_vfiprintf_r+0x240>)
 801380a:	429d      	cmp	r5, r3
 801380c:	d11b      	bne.n	8013846 <_vfiprintf_r+0x56>
 801380e:	6875      	ldr	r5, [r6, #4]
 8013810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013812:	07d9      	lsls	r1, r3, #31
 8013814:	d405      	bmi.n	8013822 <_vfiprintf_r+0x32>
 8013816:	89ab      	ldrh	r3, [r5, #12]
 8013818:	059a      	lsls	r2, r3, #22
 801381a:	d402      	bmi.n	8013822 <_vfiprintf_r+0x32>
 801381c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801381e:	f7ff fc02 	bl	8013026 <__retarget_lock_acquire_recursive>
 8013822:	89ab      	ldrh	r3, [r5, #12]
 8013824:	071b      	lsls	r3, r3, #28
 8013826:	d501      	bpl.n	801382c <_vfiprintf_r+0x3c>
 8013828:	692b      	ldr	r3, [r5, #16]
 801382a:	b9eb      	cbnz	r3, 8013868 <_vfiprintf_r+0x78>
 801382c:	4629      	mov	r1, r5
 801382e:	4630      	mov	r0, r6
 8013830:	f000 f9c4 	bl	8013bbc <__swsetup_r>
 8013834:	b1c0      	cbz	r0, 8013868 <_vfiprintf_r+0x78>
 8013836:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013838:	07dc      	lsls	r4, r3, #31
 801383a:	d50e      	bpl.n	801385a <_vfiprintf_r+0x6a>
 801383c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013840:	b01d      	add	sp, #116	; 0x74
 8013842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013846:	4b7b      	ldr	r3, [pc, #492]	; (8013a34 <_vfiprintf_r+0x244>)
 8013848:	429d      	cmp	r5, r3
 801384a:	d101      	bne.n	8013850 <_vfiprintf_r+0x60>
 801384c:	68b5      	ldr	r5, [r6, #8]
 801384e:	e7df      	b.n	8013810 <_vfiprintf_r+0x20>
 8013850:	4b79      	ldr	r3, [pc, #484]	; (8013a38 <_vfiprintf_r+0x248>)
 8013852:	429d      	cmp	r5, r3
 8013854:	bf08      	it	eq
 8013856:	68f5      	ldreq	r5, [r6, #12]
 8013858:	e7da      	b.n	8013810 <_vfiprintf_r+0x20>
 801385a:	89ab      	ldrh	r3, [r5, #12]
 801385c:	0598      	lsls	r0, r3, #22
 801385e:	d4ed      	bmi.n	801383c <_vfiprintf_r+0x4c>
 8013860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013862:	f7ff fbe1 	bl	8013028 <__retarget_lock_release_recursive>
 8013866:	e7e9      	b.n	801383c <_vfiprintf_r+0x4c>
 8013868:	2300      	movs	r3, #0
 801386a:	9309      	str	r3, [sp, #36]	; 0x24
 801386c:	2320      	movs	r3, #32
 801386e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013872:	f8cd 800c 	str.w	r8, [sp, #12]
 8013876:	2330      	movs	r3, #48	; 0x30
 8013878:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013a3c <_vfiprintf_r+0x24c>
 801387c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013880:	f04f 0901 	mov.w	r9, #1
 8013884:	4623      	mov	r3, r4
 8013886:	469a      	mov	sl, r3
 8013888:	f813 2b01 	ldrb.w	r2, [r3], #1
 801388c:	b10a      	cbz	r2, 8013892 <_vfiprintf_r+0xa2>
 801388e:	2a25      	cmp	r2, #37	; 0x25
 8013890:	d1f9      	bne.n	8013886 <_vfiprintf_r+0x96>
 8013892:	ebba 0b04 	subs.w	fp, sl, r4
 8013896:	d00b      	beq.n	80138b0 <_vfiprintf_r+0xc0>
 8013898:	465b      	mov	r3, fp
 801389a:	4622      	mov	r2, r4
 801389c:	4629      	mov	r1, r5
 801389e:	4630      	mov	r0, r6
 80138a0:	f7ff ff93 	bl	80137ca <__sfputs_r>
 80138a4:	3001      	adds	r0, #1
 80138a6:	f000 80aa 	beq.w	80139fe <_vfiprintf_r+0x20e>
 80138aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80138ac:	445a      	add	r2, fp
 80138ae:	9209      	str	r2, [sp, #36]	; 0x24
 80138b0:	f89a 3000 	ldrb.w	r3, [sl]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	f000 80a2 	beq.w	80139fe <_vfiprintf_r+0x20e>
 80138ba:	2300      	movs	r3, #0
 80138bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80138c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80138c4:	f10a 0a01 	add.w	sl, sl, #1
 80138c8:	9304      	str	r3, [sp, #16]
 80138ca:	9307      	str	r3, [sp, #28]
 80138cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80138d0:	931a      	str	r3, [sp, #104]	; 0x68
 80138d2:	4654      	mov	r4, sl
 80138d4:	2205      	movs	r2, #5
 80138d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138da:	4858      	ldr	r0, [pc, #352]	; (8013a3c <_vfiprintf_r+0x24c>)
 80138dc:	f7ec fc98 	bl	8000210 <memchr>
 80138e0:	9a04      	ldr	r2, [sp, #16]
 80138e2:	b9d8      	cbnz	r0, 801391c <_vfiprintf_r+0x12c>
 80138e4:	06d1      	lsls	r1, r2, #27
 80138e6:	bf44      	itt	mi
 80138e8:	2320      	movmi	r3, #32
 80138ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80138ee:	0713      	lsls	r3, r2, #28
 80138f0:	bf44      	itt	mi
 80138f2:	232b      	movmi	r3, #43	; 0x2b
 80138f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80138f8:	f89a 3000 	ldrb.w	r3, [sl]
 80138fc:	2b2a      	cmp	r3, #42	; 0x2a
 80138fe:	d015      	beq.n	801392c <_vfiprintf_r+0x13c>
 8013900:	9a07      	ldr	r2, [sp, #28]
 8013902:	4654      	mov	r4, sl
 8013904:	2000      	movs	r0, #0
 8013906:	f04f 0c0a 	mov.w	ip, #10
 801390a:	4621      	mov	r1, r4
 801390c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013910:	3b30      	subs	r3, #48	; 0x30
 8013912:	2b09      	cmp	r3, #9
 8013914:	d94e      	bls.n	80139b4 <_vfiprintf_r+0x1c4>
 8013916:	b1b0      	cbz	r0, 8013946 <_vfiprintf_r+0x156>
 8013918:	9207      	str	r2, [sp, #28]
 801391a:	e014      	b.n	8013946 <_vfiprintf_r+0x156>
 801391c:	eba0 0308 	sub.w	r3, r0, r8
 8013920:	fa09 f303 	lsl.w	r3, r9, r3
 8013924:	4313      	orrs	r3, r2
 8013926:	9304      	str	r3, [sp, #16]
 8013928:	46a2      	mov	sl, r4
 801392a:	e7d2      	b.n	80138d2 <_vfiprintf_r+0xe2>
 801392c:	9b03      	ldr	r3, [sp, #12]
 801392e:	1d19      	adds	r1, r3, #4
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	9103      	str	r1, [sp, #12]
 8013934:	2b00      	cmp	r3, #0
 8013936:	bfbb      	ittet	lt
 8013938:	425b      	neglt	r3, r3
 801393a:	f042 0202 	orrlt.w	r2, r2, #2
 801393e:	9307      	strge	r3, [sp, #28]
 8013940:	9307      	strlt	r3, [sp, #28]
 8013942:	bfb8      	it	lt
 8013944:	9204      	strlt	r2, [sp, #16]
 8013946:	7823      	ldrb	r3, [r4, #0]
 8013948:	2b2e      	cmp	r3, #46	; 0x2e
 801394a:	d10c      	bne.n	8013966 <_vfiprintf_r+0x176>
 801394c:	7863      	ldrb	r3, [r4, #1]
 801394e:	2b2a      	cmp	r3, #42	; 0x2a
 8013950:	d135      	bne.n	80139be <_vfiprintf_r+0x1ce>
 8013952:	9b03      	ldr	r3, [sp, #12]
 8013954:	1d1a      	adds	r2, r3, #4
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	9203      	str	r2, [sp, #12]
 801395a:	2b00      	cmp	r3, #0
 801395c:	bfb8      	it	lt
 801395e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013962:	3402      	adds	r4, #2
 8013964:	9305      	str	r3, [sp, #20]
 8013966:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013a4c <_vfiprintf_r+0x25c>
 801396a:	7821      	ldrb	r1, [r4, #0]
 801396c:	2203      	movs	r2, #3
 801396e:	4650      	mov	r0, sl
 8013970:	f7ec fc4e 	bl	8000210 <memchr>
 8013974:	b140      	cbz	r0, 8013988 <_vfiprintf_r+0x198>
 8013976:	2340      	movs	r3, #64	; 0x40
 8013978:	eba0 000a 	sub.w	r0, r0, sl
 801397c:	fa03 f000 	lsl.w	r0, r3, r0
 8013980:	9b04      	ldr	r3, [sp, #16]
 8013982:	4303      	orrs	r3, r0
 8013984:	3401      	adds	r4, #1
 8013986:	9304      	str	r3, [sp, #16]
 8013988:	f814 1b01 	ldrb.w	r1, [r4], #1
 801398c:	482c      	ldr	r0, [pc, #176]	; (8013a40 <_vfiprintf_r+0x250>)
 801398e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013992:	2206      	movs	r2, #6
 8013994:	f7ec fc3c 	bl	8000210 <memchr>
 8013998:	2800      	cmp	r0, #0
 801399a:	d03f      	beq.n	8013a1c <_vfiprintf_r+0x22c>
 801399c:	4b29      	ldr	r3, [pc, #164]	; (8013a44 <_vfiprintf_r+0x254>)
 801399e:	bb1b      	cbnz	r3, 80139e8 <_vfiprintf_r+0x1f8>
 80139a0:	9b03      	ldr	r3, [sp, #12]
 80139a2:	3307      	adds	r3, #7
 80139a4:	f023 0307 	bic.w	r3, r3, #7
 80139a8:	3308      	adds	r3, #8
 80139aa:	9303      	str	r3, [sp, #12]
 80139ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139ae:	443b      	add	r3, r7
 80139b0:	9309      	str	r3, [sp, #36]	; 0x24
 80139b2:	e767      	b.n	8013884 <_vfiprintf_r+0x94>
 80139b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80139b8:	460c      	mov	r4, r1
 80139ba:	2001      	movs	r0, #1
 80139bc:	e7a5      	b.n	801390a <_vfiprintf_r+0x11a>
 80139be:	2300      	movs	r3, #0
 80139c0:	3401      	adds	r4, #1
 80139c2:	9305      	str	r3, [sp, #20]
 80139c4:	4619      	mov	r1, r3
 80139c6:	f04f 0c0a 	mov.w	ip, #10
 80139ca:	4620      	mov	r0, r4
 80139cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80139d0:	3a30      	subs	r2, #48	; 0x30
 80139d2:	2a09      	cmp	r2, #9
 80139d4:	d903      	bls.n	80139de <_vfiprintf_r+0x1ee>
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d0c5      	beq.n	8013966 <_vfiprintf_r+0x176>
 80139da:	9105      	str	r1, [sp, #20]
 80139dc:	e7c3      	b.n	8013966 <_vfiprintf_r+0x176>
 80139de:	fb0c 2101 	mla	r1, ip, r1, r2
 80139e2:	4604      	mov	r4, r0
 80139e4:	2301      	movs	r3, #1
 80139e6:	e7f0      	b.n	80139ca <_vfiprintf_r+0x1da>
 80139e8:	ab03      	add	r3, sp, #12
 80139ea:	9300      	str	r3, [sp, #0]
 80139ec:	462a      	mov	r2, r5
 80139ee:	4b16      	ldr	r3, [pc, #88]	; (8013a48 <_vfiprintf_r+0x258>)
 80139f0:	a904      	add	r1, sp, #16
 80139f2:	4630      	mov	r0, r6
 80139f4:	f7fd ff7e 	bl	80118f4 <_printf_float>
 80139f8:	4607      	mov	r7, r0
 80139fa:	1c78      	adds	r0, r7, #1
 80139fc:	d1d6      	bne.n	80139ac <_vfiprintf_r+0x1bc>
 80139fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013a00:	07d9      	lsls	r1, r3, #31
 8013a02:	d405      	bmi.n	8013a10 <_vfiprintf_r+0x220>
 8013a04:	89ab      	ldrh	r3, [r5, #12]
 8013a06:	059a      	lsls	r2, r3, #22
 8013a08:	d402      	bmi.n	8013a10 <_vfiprintf_r+0x220>
 8013a0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013a0c:	f7ff fb0c 	bl	8013028 <__retarget_lock_release_recursive>
 8013a10:	89ab      	ldrh	r3, [r5, #12]
 8013a12:	065b      	lsls	r3, r3, #25
 8013a14:	f53f af12 	bmi.w	801383c <_vfiprintf_r+0x4c>
 8013a18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a1a:	e711      	b.n	8013840 <_vfiprintf_r+0x50>
 8013a1c:	ab03      	add	r3, sp, #12
 8013a1e:	9300      	str	r3, [sp, #0]
 8013a20:	462a      	mov	r2, r5
 8013a22:	4b09      	ldr	r3, [pc, #36]	; (8013a48 <_vfiprintf_r+0x258>)
 8013a24:	a904      	add	r1, sp, #16
 8013a26:	4630      	mov	r0, r6
 8013a28:	f7fe fa08 	bl	8011e3c <_printf_i>
 8013a2c:	e7e4      	b.n	80139f8 <_vfiprintf_r+0x208>
 8013a2e:	bf00      	nop
 8013a30:	08014484 	.word	0x08014484
 8013a34:	080144a4 	.word	0x080144a4
 8013a38:	08014464 	.word	0x08014464
 8013a3c:	0801462c 	.word	0x0801462c
 8013a40:	08014636 	.word	0x08014636
 8013a44:	080118f5 	.word	0x080118f5
 8013a48:	080137cb 	.word	0x080137cb
 8013a4c:	08014632 	.word	0x08014632

08013a50 <__sread>:
 8013a50:	b510      	push	{r4, lr}
 8013a52:	460c      	mov	r4, r1
 8013a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a58:	f000 fa70 	bl	8013f3c <_read_r>
 8013a5c:	2800      	cmp	r0, #0
 8013a5e:	bfab      	itete	ge
 8013a60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013a62:	89a3      	ldrhlt	r3, [r4, #12]
 8013a64:	181b      	addge	r3, r3, r0
 8013a66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013a6a:	bfac      	ite	ge
 8013a6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8013a6e:	81a3      	strhlt	r3, [r4, #12]
 8013a70:	bd10      	pop	{r4, pc}

08013a72 <__swrite>:
 8013a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a76:	461f      	mov	r7, r3
 8013a78:	898b      	ldrh	r3, [r1, #12]
 8013a7a:	05db      	lsls	r3, r3, #23
 8013a7c:	4605      	mov	r5, r0
 8013a7e:	460c      	mov	r4, r1
 8013a80:	4616      	mov	r6, r2
 8013a82:	d505      	bpl.n	8013a90 <__swrite+0x1e>
 8013a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a88:	2302      	movs	r3, #2
 8013a8a:	2200      	movs	r2, #0
 8013a8c:	f000 f9de 	bl	8013e4c <_lseek_r>
 8013a90:	89a3      	ldrh	r3, [r4, #12]
 8013a92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013a9a:	81a3      	strh	r3, [r4, #12]
 8013a9c:	4632      	mov	r2, r6
 8013a9e:	463b      	mov	r3, r7
 8013aa0:	4628      	mov	r0, r5
 8013aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013aa6:	f000 b877 	b.w	8013b98 <_write_r>

08013aaa <__sseek>:
 8013aaa:	b510      	push	{r4, lr}
 8013aac:	460c      	mov	r4, r1
 8013aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ab2:	f000 f9cb 	bl	8013e4c <_lseek_r>
 8013ab6:	1c43      	adds	r3, r0, #1
 8013ab8:	89a3      	ldrh	r3, [r4, #12]
 8013aba:	bf15      	itete	ne
 8013abc:	6560      	strne	r0, [r4, #84]	; 0x54
 8013abe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013ac2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013ac6:	81a3      	strheq	r3, [r4, #12]
 8013ac8:	bf18      	it	ne
 8013aca:	81a3      	strhne	r3, [r4, #12]
 8013acc:	bd10      	pop	{r4, pc}

08013ace <__sclose>:
 8013ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ad2:	f000 b8e9 	b.w	8013ca8 <_close_r>
	...

08013ad8 <__swbuf_r>:
 8013ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ada:	460e      	mov	r6, r1
 8013adc:	4614      	mov	r4, r2
 8013ade:	4605      	mov	r5, r0
 8013ae0:	b118      	cbz	r0, 8013aea <__swbuf_r+0x12>
 8013ae2:	6983      	ldr	r3, [r0, #24]
 8013ae4:	b90b      	cbnz	r3, 8013aea <__swbuf_r+0x12>
 8013ae6:	f7ff f9e9 	bl	8012ebc <__sinit>
 8013aea:	4b21      	ldr	r3, [pc, #132]	; (8013b70 <__swbuf_r+0x98>)
 8013aec:	429c      	cmp	r4, r3
 8013aee:	d12b      	bne.n	8013b48 <__swbuf_r+0x70>
 8013af0:	686c      	ldr	r4, [r5, #4]
 8013af2:	69a3      	ldr	r3, [r4, #24]
 8013af4:	60a3      	str	r3, [r4, #8]
 8013af6:	89a3      	ldrh	r3, [r4, #12]
 8013af8:	071a      	lsls	r2, r3, #28
 8013afa:	d52f      	bpl.n	8013b5c <__swbuf_r+0x84>
 8013afc:	6923      	ldr	r3, [r4, #16]
 8013afe:	b36b      	cbz	r3, 8013b5c <__swbuf_r+0x84>
 8013b00:	6923      	ldr	r3, [r4, #16]
 8013b02:	6820      	ldr	r0, [r4, #0]
 8013b04:	1ac0      	subs	r0, r0, r3
 8013b06:	6963      	ldr	r3, [r4, #20]
 8013b08:	b2f6      	uxtb	r6, r6
 8013b0a:	4283      	cmp	r3, r0
 8013b0c:	4637      	mov	r7, r6
 8013b0e:	dc04      	bgt.n	8013b1a <__swbuf_r+0x42>
 8013b10:	4621      	mov	r1, r4
 8013b12:	4628      	mov	r0, r5
 8013b14:	f000 f95e 	bl	8013dd4 <_fflush_r>
 8013b18:	bb30      	cbnz	r0, 8013b68 <__swbuf_r+0x90>
 8013b1a:	68a3      	ldr	r3, [r4, #8]
 8013b1c:	3b01      	subs	r3, #1
 8013b1e:	60a3      	str	r3, [r4, #8]
 8013b20:	6823      	ldr	r3, [r4, #0]
 8013b22:	1c5a      	adds	r2, r3, #1
 8013b24:	6022      	str	r2, [r4, #0]
 8013b26:	701e      	strb	r6, [r3, #0]
 8013b28:	6963      	ldr	r3, [r4, #20]
 8013b2a:	3001      	adds	r0, #1
 8013b2c:	4283      	cmp	r3, r0
 8013b2e:	d004      	beq.n	8013b3a <__swbuf_r+0x62>
 8013b30:	89a3      	ldrh	r3, [r4, #12]
 8013b32:	07db      	lsls	r3, r3, #31
 8013b34:	d506      	bpl.n	8013b44 <__swbuf_r+0x6c>
 8013b36:	2e0a      	cmp	r6, #10
 8013b38:	d104      	bne.n	8013b44 <__swbuf_r+0x6c>
 8013b3a:	4621      	mov	r1, r4
 8013b3c:	4628      	mov	r0, r5
 8013b3e:	f000 f949 	bl	8013dd4 <_fflush_r>
 8013b42:	b988      	cbnz	r0, 8013b68 <__swbuf_r+0x90>
 8013b44:	4638      	mov	r0, r7
 8013b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b48:	4b0a      	ldr	r3, [pc, #40]	; (8013b74 <__swbuf_r+0x9c>)
 8013b4a:	429c      	cmp	r4, r3
 8013b4c:	d101      	bne.n	8013b52 <__swbuf_r+0x7a>
 8013b4e:	68ac      	ldr	r4, [r5, #8]
 8013b50:	e7cf      	b.n	8013af2 <__swbuf_r+0x1a>
 8013b52:	4b09      	ldr	r3, [pc, #36]	; (8013b78 <__swbuf_r+0xa0>)
 8013b54:	429c      	cmp	r4, r3
 8013b56:	bf08      	it	eq
 8013b58:	68ec      	ldreq	r4, [r5, #12]
 8013b5a:	e7ca      	b.n	8013af2 <__swbuf_r+0x1a>
 8013b5c:	4621      	mov	r1, r4
 8013b5e:	4628      	mov	r0, r5
 8013b60:	f000 f82c 	bl	8013bbc <__swsetup_r>
 8013b64:	2800      	cmp	r0, #0
 8013b66:	d0cb      	beq.n	8013b00 <__swbuf_r+0x28>
 8013b68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013b6c:	e7ea      	b.n	8013b44 <__swbuf_r+0x6c>
 8013b6e:	bf00      	nop
 8013b70:	08014484 	.word	0x08014484
 8013b74:	080144a4 	.word	0x080144a4
 8013b78:	08014464 	.word	0x08014464

08013b7c <__ascii_wctomb>:
 8013b7c:	b149      	cbz	r1, 8013b92 <__ascii_wctomb+0x16>
 8013b7e:	2aff      	cmp	r2, #255	; 0xff
 8013b80:	bf85      	ittet	hi
 8013b82:	238a      	movhi	r3, #138	; 0x8a
 8013b84:	6003      	strhi	r3, [r0, #0]
 8013b86:	700a      	strbls	r2, [r1, #0]
 8013b88:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013b8c:	bf98      	it	ls
 8013b8e:	2001      	movls	r0, #1
 8013b90:	4770      	bx	lr
 8013b92:	4608      	mov	r0, r1
 8013b94:	4770      	bx	lr
	...

08013b98 <_write_r>:
 8013b98:	b538      	push	{r3, r4, r5, lr}
 8013b9a:	4d07      	ldr	r5, [pc, #28]	; (8013bb8 <_write_r+0x20>)
 8013b9c:	4604      	mov	r4, r0
 8013b9e:	4608      	mov	r0, r1
 8013ba0:	4611      	mov	r1, r2
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	602a      	str	r2, [r5, #0]
 8013ba6:	461a      	mov	r2, r3
 8013ba8:	f000 fa86 	bl	80140b8 <_write>
 8013bac:	1c43      	adds	r3, r0, #1
 8013bae:	d102      	bne.n	8013bb6 <_write_r+0x1e>
 8013bb0:	682b      	ldr	r3, [r5, #0]
 8013bb2:	b103      	cbz	r3, 8013bb6 <_write_r+0x1e>
 8013bb4:	6023      	str	r3, [r4, #0]
 8013bb6:	bd38      	pop	{r3, r4, r5, pc}
 8013bb8:	200029ac 	.word	0x200029ac

08013bbc <__swsetup_r>:
 8013bbc:	4b32      	ldr	r3, [pc, #200]	; (8013c88 <__swsetup_r+0xcc>)
 8013bbe:	b570      	push	{r4, r5, r6, lr}
 8013bc0:	681d      	ldr	r5, [r3, #0]
 8013bc2:	4606      	mov	r6, r0
 8013bc4:	460c      	mov	r4, r1
 8013bc6:	b125      	cbz	r5, 8013bd2 <__swsetup_r+0x16>
 8013bc8:	69ab      	ldr	r3, [r5, #24]
 8013bca:	b913      	cbnz	r3, 8013bd2 <__swsetup_r+0x16>
 8013bcc:	4628      	mov	r0, r5
 8013bce:	f7ff f975 	bl	8012ebc <__sinit>
 8013bd2:	4b2e      	ldr	r3, [pc, #184]	; (8013c8c <__swsetup_r+0xd0>)
 8013bd4:	429c      	cmp	r4, r3
 8013bd6:	d10f      	bne.n	8013bf8 <__swsetup_r+0x3c>
 8013bd8:	686c      	ldr	r4, [r5, #4]
 8013bda:	89a3      	ldrh	r3, [r4, #12]
 8013bdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013be0:	0719      	lsls	r1, r3, #28
 8013be2:	d42c      	bmi.n	8013c3e <__swsetup_r+0x82>
 8013be4:	06dd      	lsls	r5, r3, #27
 8013be6:	d411      	bmi.n	8013c0c <__swsetup_r+0x50>
 8013be8:	2309      	movs	r3, #9
 8013bea:	6033      	str	r3, [r6, #0]
 8013bec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013bf0:	81a3      	strh	r3, [r4, #12]
 8013bf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013bf6:	e03e      	b.n	8013c76 <__swsetup_r+0xba>
 8013bf8:	4b25      	ldr	r3, [pc, #148]	; (8013c90 <__swsetup_r+0xd4>)
 8013bfa:	429c      	cmp	r4, r3
 8013bfc:	d101      	bne.n	8013c02 <__swsetup_r+0x46>
 8013bfe:	68ac      	ldr	r4, [r5, #8]
 8013c00:	e7eb      	b.n	8013bda <__swsetup_r+0x1e>
 8013c02:	4b24      	ldr	r3, [pc, #144]	; (8013c94 <__swsetup_r+0xd8>)
 8013c04:	429c      	cmp	r4, r3
 8013c06:	bf08      	it	eq
 8013c08:	68ec      	ldreq	r4, [r5, #12]
 8013c0a:	e7e6      	b.n	8013bda <__swsetup_r+0x1e>
 8013c0c:	0758      	lsls	r0, r3, #29
 8013c0e:	d512      	bpl.n	8013c36 <__swsetup_r+0x7a>
 8013c10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c12:	b141      	cbz	r1, 8013c26 <__swsetup_r+0x6a>
 8013c14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c18:	4299      	cmp	r1, r3
 8013c1a:	d002      	beq.n	8013c22 <__swsetup_r+0x66>
 8013c1c:	4630      	mov	r0, r6
 8013c1e:	f7fd fce9 	bl	80115f4 <_free_r>
 8013c22:	2300      	movs	r3, #0
 8013c24:	6363      	str	r3, [r4, #52]	; 0x34
 8013c26:	89a3      	ldrh	r3, [r4, #12]
 8013c28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013c2c:	81a3      	strh	r3, [r4, #12]
 8013c2e:	2300      	movs	r3, #0
 8013c30:	6063      	str	r3, [r4, #4]
 8013c32:	6923      	ldr	r3, [r4, #16]
 8013c34:	6023      	str	r3, [r4, #0]
 8013c36:	89a3      	ldrh	r3, [r4, #12]
 8013c38:	f043 0308 	orr.w	r3, r3, #8
 8013c3c:	81a3      	strh	r3, [r4, #12]
 8013c3e:	6923      	ldr	r3, [r4, #16]
 8013c40:	b94b      	cbnz	r3, 8013c56 <__swsetup_r+0x9a>
 8013c42:	89a3      	ldrh	r3, [r4, #12]
 8013c44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013c4c:	d003      	beq.n	8013c56 <__swsetup_r+0x9a>
 8013c4e:	4621      	mov	r1, r4
 8013c50:	4630      	mov	r0, r6
 8013c52:	f000 f933 	bl	8013ebc <__smakebuf_r>
 8013c56:	89a0      	ldrh	r0, [r4, #12]
 8013c58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013c5c:	f010 0301 	ands.w	r3, r0, #1
 8013c60:	d00a      	beq.n	8013c78 <__swsetup_r+0xbc>
 8013c62:	2300      	movs	r3, #0
 8013c64:	60a3      	str	r3, [r4, #8]
 8013c66:	6963      	ldr	r3, [r4, #20]
 8013c68:	425b      	negs	r3, r3
 8013c6a:	61a3      	str	r3, [r4, #24]
 8013c6c:	6923      	ldr	r3, [r4, #16]
 8013c6e:	b943      	cbnz	r3, 8013c82 <__swsetup_r+0xc6>
 8013c70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013c74:	d1ba      	bne.n	8013bec <__swsetup_r+0x30>
 8013c76:	bd70      	pop	{r4, r5, r6, pc}
 8013c78:	0781      	lsls	r1, r0, #30
 8013c7a:	bf58      	it	pl
 8013c7c:	6963      	ldrpl	r3, [r4, #20]
 8013c7e:	60a3      	str	r3, [r4, #8]
 8013c80:	e7f4      	b.n	8013c6c <__swsetup_r+0xb0>
 8013c82:	2000      	movs	r0, #0
 8013c84:	e7f7      	b.n	8013c76 <__swsetup_r+0xba>
 8013c86:	bf00      	nop
 8013c88:	2000018c 	.word	0x2000018c
 8013c8c:	08014484 	.word	0x08014484
 8013c90:	080144a4 	.word	0x080144a4
 8013c94:	08014464 	.word	0x08014464

08013c98 <abort>:
 8013c98:	b508      	push	{r3, lr}
 8013c9a:	2006      	movs	r0, #6
 8013c9c:	f000 f988 	bl	8013fb0 <raise>
 8013ca0:	2001      	movs	r0, #1
 8013ca2:	f000 fa11 	bl	80140c8 <_exit>
	...

08013ca8 <_close_r>:
 8013ca8:	b538      	push	{r3, r4, r5, lr}
 8013caa:	4d06      	ldr	r5, [pc, #24]	; (8013cc4 <_close_r+0x1c>)
 8013cac:	2300      	movs	r3, #0
 8013cae:	4604      	mov	r4, r0
 8013cb0:	4608      	mov	r0, r1
 8013cb2:	602b      	str	r3, [r5, #0]
 8013cb4:	f000 f9ba 	bl	801402c <_close>
 8013cb8:	1c43      	adds	r3, r0, #1
 8013cba:	d102      	bne.n	8013cc2 <_close_r+0x1a>
 8013cbc:	682b      	ldr	r3, [r5, #0]
 8013cbe:	b103      	cbz	r3, 8013cc2 <_close_r+0x1a>
 8013cc0:	6023      	str	r3, [r4, #0]
 8013cc2:	bd38      	pop	{r3, r4, r5, pc}
 8013cc4:	200029ac 	.word	0x200029ac

08013cc8 <__sflush_r>:
 8013cc8:	898a      	ldrh	r2, [r1, #12]
 8013cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cce:	4605      	mov	r5, r0
 8013cd0:	0710      	lsls	r0, r2, #28
 8013cd2:	460c      	mov	r4, r1
 8013cd4:	d458      	bmi.n	8013d88 <__sflush_r+0xc0>
 8013cd6:	684b      	ldr	r3, [r1, #4]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	dc05      	bgt.n	8013ce8 <__sflush_r+0x20>
 8013cdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	dc02      	bgt.n	8013ce8 <__sflush_r+0x20>
 8013ce2:	2000      	movs	r0, #0
 8013ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ce8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013cea:	2e00      	cmp	r6, #0
 8013cec:	d0f9      	beq.n	8013ce2 <__sflush_r+0x1a>
 8013cee:	2300      	movs	r3, #0
 8013cf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013cf4:	682f      	ldr	r7, [r5, #0]
 8013cf6:	602b      	str	r3, [r5, #0]
 8013cf8:	d032      	beq.n	8013d60 <__sflush_r+0x98>
 8013cfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013cfc:	89a3      	ldrh	r3, [r4, #12]
 8013cfe:	075a      	lsls	r2, r3, #29
 8013d00:	d505      	bpl.n	8013d0e <__sflush_r+0x46>
 8013d02:	6863      	ldr	r3, [r4, #4]
 8013d04:	1ac0      	subs	r0, r0, r3
 8013d06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013d08:	b10b      	cbz	r3, 8013d0e <__sflush_r+0x46>
 8013d0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013d0c:	1ac0      	subs	r0, r0, r3
 8013d0e:	2300      	movs	r3, #0
 8013d10:	4602      	mov	r2, r0
 8013d12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013d14:	6a21      	ldr	r1, [r4, #32]
 8013d16:	4628      	mov	r0, r5
 8013d18:	47b0      	blx	r6
 8013d1a:	1c43      	adds	r3, r0, #1
 8013d1c:	89a3      	ldrh	r3, [r4, #12]
 8013d1e:	d106      	bne.n	8013d2e <__sflush_r+0x66>
 8013d20:	6829      	ldr	r1, [r5, #0]
 8013d22:	291d      	cmp	r1, #29
 8013d24:	d82c      	bhi.n	8013d80 <__sflush_r+0xb8>
 8013d26:	4a2a      	ldr	r2, [pc, #168]	; (8013dd0 <__sflush_r+0x108>)
 8013d28:	40ca      	lsrs	r2, r1
 8013d2a:	07d6      	lsls	r6, r2, #31
 8013d2c:	d528      	bpl.n	8013d80 <__sflush_r+0xb8>
 8013d2e:	2200      	movs	r2, #0
 8013d30:	6062      	str	r2, [r4, #4]
 8013d32:	04d9      	lsls	r1, r3, #19
 8013d34:	6922      	ldr	r2, [r4, #16]
 8013d36:	6022      	str	r2, [r4, #0]
 8013d38:	d504      	bpl.n	8013d44 <__sflush_r+0x7c>
 8013d3a:	1c42      	adds	r2, r0, #1
 8013d3c:	d101      	bne.n	8013d42 <__sflush_r+0x7a>
 8013d3e:	682b      	ldr	r3, [r5, #0]
 8013d40:	b903      	cbnz	r3, 8013d44 <__sflush_r+0x7c>
 8013d42:	6560      	str	r0, [r4, #84]	; 0x54
 8013d44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013d46:	602f      	str	r7, [r5, #0]
 8013d48:	2900      	cmp	r1, #0
 8013d4a:	d0ca      	beq.n	8013ce2 <__sflush_r+0x1a>
 8013d4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013d50:	4299      	cmp	r1, r3
 8013d52:	d002      	beq.n	8013d5a <__sflush_r+0x92>
 8013d54:	4628      	mov	r0, r5
 8013d56:	f7fd fc4d 	bl	80115f4 <_free_r>
 8013d5a:	2000      	movs	r0, #0
 8013d5c:	6360      	str	r0, [r4, #52]	; 0x34
 8013d5e:	e7c1      	b.n	8013ce4 <__sflush_r+0x1c>
 8013d60:	6a21      	ldr	r1, [r4, #32]
 8013d62:	2301      	movs	r3, #1
 8013d64:	4628      	mov	r0, r5
 8013d66:	47b0      	blx	r6
 8013d68:	1c41      	adds	r1, r0, #1
 8013d6a:	d1c7      	bne.n	8013cfc <__sflush_r+0x34>
 8013d6c:	682b      	ldr	r3, [r5, #0]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d0c4      	beq.n	8013cfc <__sflush_r+0x34>
 8013d72:	2b1d      	cmp	r3, #29
 8013d74:	d001      	beq.n	8013d7a <__sflush_r+0xb2>
 8013d76:	2b16      	cmp	r3, #22
 8013d78:	d101      	bne.n	8013d7e <__sflush_r+0xb6>
 8013d7a:	602f      	str	r7, [r5, #0]
 8013d7c:	e7b1      	b.n	8013ce2 <__sflush_r+0x1a>
 8013d7e:	89a3      	ldrh	r3, [r4, #12]
 8013d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d84:	81a3      	strh	r3, [r4, #12]
 8013d86:	e7ad      	b.n	8013ce4 <__sflush_r+0x1c>
 8013d88:	690f      	ldr	r7, [r1, #16]
 8013d8a:	2f00      	cmp	r7, #0
 8013d8c:	d0a9      	beq.n	8013ce2 <__sflush_r+0x1a>
 8013d8e:	0793      	lsls	r3, r2, #30
 8013d90:	680e      	ldr	r6, [r1, #0]
 8013d92:	bf08      	it	eq
 8013d94:	694b      	ldreq	r3, [r1, #20]
 8013d96:	600f      	str	r7, [r1, #0]
 8013d98:	bf18      	it	ne
 8013d9a:	2300      	movne	r3, #0
 8013d9c:	eba6 0807 	sub.w	r8, r6, r7
 8013da0:	608b      	str	r3, [r1, #8]
 8013da2:	f1b8 0f00 	cmp.w	r8, #0
 8013da6:	dd9c      	ble.n	8013ce2 <__sflush_r+0x1a>
 8013da8:	6a21      	ldr	r1, [r4, #32]
 8013daa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013dac:	4643      	mov	r3, r8
 8013dae:	463a      	mov	r2, r7
 8013db0:	4628      	mov	r0, r5
 8013db2:	47b0      	blx	r6
 8013db4:	2800      	cmp	r0, #0
 8013db6:	dc06      	bgt.n	8013dc6 <__sflush_r+0xfe>
 8013db8:	89a3      	ldrh	r3, [r4, #12]
 8013dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013dbe:	81a3      	strh	r3, [r4, #12]
 8013dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013dc4:	e78e      	b.n	8013ce4 <__sflush_r+0x1c>
 8013dc6:	4407      	add	r7, r0
 8013dc8:	eba8 0800 	sub.w	r8, r8, r0
 8013dcc:	e7e9      	b.n	8013da2 <__sflush_r+0xda>
 8013dce:	bf00      	nop
 8013dd0:	20400001 	.word	0x20400001

08013dd4 <_fflush_r>:
 8013dd4:	b538      	push	{r3, r4, r5, lr}
 8013dd6:	690b      	ldr	r3, [r1, #16]
 8013dd8:	4605      	mov	r5, r0
 8013dda:	460c      	mov	r4, r1
 8013ddc:	b913      	cbnz	r3, 8013de4 <_fflush_r+0x10>
 8013dde:	2500      	movs	r5, #0
 8013de0:	4628      	mov	r0, r5
 8013de2:	bd38      	pop	{r3, r4, r5, pc}
 8013de4:	b118      	cbz	r0, 8013dee <_fflush_r+0x1a>
 8013de6:	6983      	ldr	r3, [r0, #24]
 8013de8:	b90b      	cbnz	r3, 8013dee <_fflush_r+0x1a>
 8013dea:	f7ff f867 	bl	8012ebc <__sinit>
 8013dee:	4b14      	ldr	r3, [pc, #80]	; (8013e40 <_fflush_r+0x6c>)
 8013df0:	429c      	cmp	r4, r3
 8013df2:	d11b      	bne.n	8013e2c <_fflush_r+0x58>
 8013df4:	686c      	ldr	r4, [r5, #4]
 8013df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d0ef      	beq.n	8013dde <_fflush_r+0xa>
 8013dfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013e00:	07d0      	lsls	r0, r2, #31
 8013e02:	d404      	bmi.n	8013e0e <_fflush_r+0x3a>
 8013e04:	0599      	lsls	r1, r3, #22
 8013e06:	d402      	bmi.n	8013e0e <_fflush_r+0x3a>
 8013e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e0a:	f7ff f90c 	bl	8013026 <__retarget_lock_acquire_recursive>
 8013e0e:	4628      	mov	r0, r5
 8013e10:	4621      	mov	r1, r4
 8013e12:	f7ff ff59 	bl	8013cc8 <__sflush_r>
 8013e16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013e18:	07da      	lsls	r2, r3, #31
 8013e1a:	4605      	mov	r5, r0
 8013e1c:	d4e0      	bmi.n	8013de0 <_fflush_r+0xc>
 8013e1e:	89a3      	ldrh	r3, [r4, #12]
 8013e20:	059b      	lsls	r3, r3, #22
 8013e22:	d4dd      	bmi.n	8013de0 <_fflush_r+0xc>
 8013e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e26:	f7ff f8ff 	bl	8013028 <__retarget_lock_release_recursive>
 8013e2a:	e7d9      	b.n	8013de0 <_fflush_r+0xc>
 8013e2c:	4b05      	ldr	r3, [pc, #20]	; (8013e44 <_fflush_r+0x70>)
 8013e2e:	429c      	cmp	r4, r3
 8013e30:	d101      	bne.n	8013e36 <_fflush_r+0x62>
 8013e32:	68ac      	ldr	r4, [r5, #8]
 8013e34:	e7df      	b.n	8013df6 <_fflush_r+0x22>
 8013e36:	4b04      	ldr	r3, [pc, #16]	; (8013e48 <_fflush_r+0x74>)
 8013e38:	429c      	cmp	r4, r3
 8013e3a:	bf08      	it	eq
 8013e3c:	68ec      	ldreq	r4, [r5, #12]
 8013e3e:	e7da      	b.n	8013df6 <_fflush_r+0x22>
 8013e40:	08014484 	.word	0x08014484
 8013e44:	080144a4 	.word	0x080144a4
 8013e48:	08014464 	.word	0x08014464

08013e4c <_lseek_r>:
 8013e4c:	b538      	push	{r3, r4, r5, lr}
 8013e4e:	4d07      	ldr	r5, [pc, #28]	; (8013e6c <_lseek_r+0x20>)
 8013e50:	4604      	mov	r4, r0
 8013e52:	4608      	mov	r0, r1
 8013e54:	4611      	mov	r1, r2
 8013e56:	2200      	movs	r2, #0
 8013e58:	602a      	str	r2, [r5, #0]
 8013e5a:	461a      	mov	r2, r3
 8013e5c:	f000 f90e 	bl	801407c <_lseek>
 8013e60:	1c43      	adds	r3, r0, #1
 8013e62:	d102      	bne.n	8013e6a <_lseek_r+0x1e>
 8013e64:	682b      	ldr	r3, [r5, #0]
 8013e66:	b103      	cbz	r3, 8013e6a <_lseek_r+0x1e>
 8013e68:	6023      	str	r3, [r4, #0]
 8013e6a:	bd38      	pop	{r3, r4, r5, pc}
 8013e6c:	200029ac 	.word	0x200029ac

08013e70 <__swhatbuf_r>:
 8013e70:	b570      	push	{r4, r5, r6, lr}
 8013e72:	460e      	mov	r6, r1
 8013e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e78:	2900      	cmp	r1, #0
 8013e7a:	b096      	sub	sp, #88	; 0x58
 8013e7c:	4614      	mov	r4, r2
 8013e7e:	461d      	mov	r5, r3
 8013e80:	da08      	bge.n	8013e94 <__swhatbuf_r+0x24>
 8013e82:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013e86:	2200      	movs	r2, #0
 8013e88:	602a      	str	r2, [r5, #0]
 8013e8a:	061a      	lsls	r2, r3, #24
 8013e8c:	d410      	bmi.n	8013eb0 <__swhatbuf_r+0x40>
 8013e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013e92:	e00e      	b.n	8013eb2 <__swhatbuf_r+0x42>
 8013e94:	466a      	mov	r2, sp
 8013e96:	f000 f8a7 	bl	8013fe8 <_fstat_r>
 8013e9a:	2800      	cmp	r0, #0
 8013e9c:	dbf1      	blt.n	8013e82 <__swhatbuf_r+0x12>
 8013e9e:	9a01      	ldr	r2, [sp, #4]
 8013ea0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013ea4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013ea8:	425a      	negs	r2, r3
 8013eaa:	415a      	adcs	r2, r3
 8013eac:	602a      	str	r2, [r5, #0]
 8013eae:	e7ee      	b.n	8013e8e <__swhatbuf_r+0x1e>
 8013eb0:	2340      	movs	r3, #64	; 0x40
 8013eb2:	2000      	movs	r0, #0
 8013eb4:	6023      	str	r3, [r4, #0]
 8013eb6:	b016      	add	sp, #88	; 0x58
 8013eb8:	bd70      	pop	{r4, r5, r6, pc}
	...

08013ebc <__smakebuf_r>:
 8013ebc:	898b      	ldrh	r3, [r1, #12]
 8013ebe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013ec0:	079d      	lsls	r5, r3, #30
 8013ec2:	4606      	mov	r6, r0
 8013ec4:	460c      	mov	r4, r1
 8013ec6:	d507      	bpl.n	8013ed8 <__smakebuf_r+0x1c>
 8013ec8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013ecc:	6023      	str	r3, [r4, #0]
 8013ece:	6123      	str	r3, [r4, #16]
 8013ed0:	2301      	movs	r3, #1
 8013ed2:	6163      	str	r3, [r4, #20]
 8013ed4:	b002      	add	sp, #8
 8013ed6:	bd70      	pop	{r4, r5, r6, pc}
 8013ed8:	ab01      	add	r3, sp, #4
 8013eda:	466a      	mov	r2, sp
 8013edc:	f7ff ffc8 	bl	8013e70 <__swhatbuf_r>
 8013ee0:	9900      	ldr	r1, [sp, #0]
 8013ee2:	4605      	mov	r5, r0
 8013ee4:	4630      	mov	r0, r6
 8013ee6:	f7fd fbf1 	bl	80116cc <_malloc_r>
 8013eea:	b948      	cbnz	r0, 8013f00 <__smakebuf_r+0x44>
 8013eec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ef0:	059a      	lsls	r2, r3, #22
 8013ef2:	d4ef      	bmi.n	8013ed4 <__smakebuf_r+0x18>
 8013ef4:	f023 0303 	bic.w	r3, r3, #3
 8013ef8:	f043 0302 	orr.w	r3, r3, #2
 8013efc:	81a3      	strh	r3, [r4, #12]
 8013efe:	e7e3      	b.n	8013ec8 <__smakebuf_r+0xc>
 8013f00:	4b0d      	ldr	r3, [pc, #52]	; (8013f38 <__smakebuf_r+0x7c>)
 8013f02:	62b3      	str	r3, [r6, #40]	; 0x28
 8013f04:	89a3      	ldrh	r3, [r4, #12]
 8013f06:	6020      	str	r0, [r4, #0]
 8013f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f0c:	81a3      	strh	r3, [r4, #12]
 8013f0e:	9b00      	ldr	r3, [sp, #0]
 8013f10:	6163      	str	r3, [r4, #20]
 8013f12:	9b01      	ldr	r3, [sp, #4]
 8013f14:	6120      	str	r0, [r4, #16]
 8013f16:	b15b      	cbz	r3, 8013f30 <__smakebuf_r+0x74>
 8013f18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f1c:	4630      	mov	r0, r6
 8013f1e:	f000 f875 	bl	801400c <_isatty_r>
 8013f22:	b128      	cbz	r0, 8013f30 <__smakebuf_r+0x74>
 8013f24:	89a3      	ldrh	r3, [r4, #12]
 8013f26:	f023 0303 	bic.w	r3, r3, #3
 8013f2a:	f043 0301 	orr.w	r3, r3, #1
 8013f2e:	81a3      	strh	r3, [r4, #12]
 8013f30:	89a0      	ldrh	r0, [r4, #12]
 8013f32:	4305      	orrs	r5, r0
 8013f34:	81a5      	strh	r5, [r4, #12]
 8013f36:	e7cd      	b.n	8013ed4 <__smakebuf_r+0x18>
 8013f38:	08012e55 	.word	0x08012e55

08013f3c <_read_r>:
 8013f3c:	b538      	push	{r3, r4, r5, lr}
 8013f3e:	4d07      	ldr	r5, [pc, #28]	; (8013f5c <_read_r+0x20>)
 8013f40:	4604      	mov	r4, r0
 8013f42:	4608      	mov	r0, r1
 8013f44:	4611      	mov	r1, r2
 8013f46:	2200      	movs	r2, #0
 8013f48:	602a      	str	r2, [r5, #0]
 8013f4a:	461a      	mov	r2, r3
 8013f4c:	f000 f89e 	bl	801408c <_read>
 8013f50:	1c43      	adds	r3, r0, #1
 8013f52:	d102      	bne.n	8013f5a <_read_r+0x1e>
 8013f54:	682b      	ldr	r3, [r5, #0]
 8013f56:	b103      	cbz	r3, 8013f5a <_read_r+0x1e>
 8013f58:	6023      	str	r3, [r4, #0]
 8013f5a:	bd38      	pop	{r3, r4, r5, pc}
 8013f5c:	200029ac 	.word	0x200029ac

08013f60 <_raise_r>:
 8013f60:	291f      	cmp	r1, #31
 8013f62:	b538      	push	{r3, r4, r5, lr}
 8013f64:	4604      	mov	r4, r0
 8013f66:	460d      	mov	r5, r1
 8013f68:	d904      	bls.n	8013f74 <_raise_r+0x14>
 8013f6a:	2316      	movs	r3, #22
 8013f6c:	6003      	str	r3, [r0, #0]
 8013f6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f72:	bd38      	pop	{r3, r4, r5, pc}
 8013f74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013f76:	b112      	cbz	r2, 8013f7e <_raise_r+0x1e>
 8013f78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013f7c:	b94b      	cbnz	r3, 8013f92 <_raise_r+0x32>
 8013f7e:	4620      	mov	r0, r4
 8013f80:	f000 f830 	bl	8013fe4 <_getpid_r>
 8013f84:	462a      	mov	r2, r5
 8013f86:	4601      	mov	r1, r0
 8013f88:	4620      	mov	r0, r4
 8013f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f8e:	f000 b817 	b.w	8013fc0 <_kill_r>
 8013f92:	2b01      	cmp	r3, #1
 8013f94:	d00a      	beq.n	8013fac <_raise_r+0x4c>
 8013f96:	1c59      	adds	r1, r3, #1
 8013f98:	d103      	bne.n	8013fa2 <_raise_r+0x42>
 8013f9a:	2316      	movs	r3, #22
 8013f9c:	6003      	str	r3, [r0, #0]
 8013f9e:	2001      	movs	r0, #1
 8013fa0:	e7e7      	b.n	8013f72 <_raise_r+0x12>
 8013fa2:	2400      	movs	r4, #0
 8013fa4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013fa8:	4628      	mov	r0, r5
 8013faa:	4798      	blx	r3
 8013fac:	2000      	movs	r0, #0
 8013fae:	e7e0      	b.n	8013f72 <_raise_r+0x12>

08013fb0 <raise>:
 8013fb0:	4b02      	ldr	r3, [pc, #8]	; (8013fbc <raise+0xc>)
 8013fb2:	4601      	mov	r1, r0
 8013fb4:	6818      	ldr	r0, [r3, #0]
 8013fb6:	f7ff bfd3 	b.w	8013f60 <_raise_r>
 8013fba:	bf00      	nop
 8013fbc:	2000018c 	.word	0x2000018c

08013fc0 <_kill_r>:
 8013fc0:	b538      	push	{r3, r4, r5, lr}
 8013fc2:	4d07      	ldr	r5, [pc, #28]	; (8013fe0 <_kill_r+0x20>)
 8013fc4:	2300      	movs	r3, #0
 8013fc6:	4604      	mov	r4, r0
 8013fc8:	4608      	mov	r0, r1
 8013fca:	4611      	mov	r1, r2
 8013fcc:	602b      	str	r3, [r5, #0]
 8013fce:	f000 f84d 	bl	801406c <_kill>
 8013fd2:	1c43      	adds	r3, r0, #1
 8013fd4:	d102      	bne.n	8013fdc <_kill_r+0x1c>
 8013fd6:	682b      	ldr	r3, [r5, #0]
 8013fd8:	b103      	cbz	r3, 8013fdc <_kill_r+0x1c>
 8013fda:	6023      	str	r3, [r4, #0]
 8013fdc:	bd38      	pop	{r3, r4, r5, pc}
 8013fde:	bf00      	nop
 8013fe0:	200029ac 	.word	0x200029ac

08013fe4 <_getpid_r>:
 8013fe4:	f000 b832 	b.w	801404c <_getpid>

08013fe8 <_fstat_r>:
 8013fe8:	b538      	push	{r3, r4, r5, lr}
 8013fea:	4d07      	ldr	r5, [pc, #28]	; (8014008 <_fstat_r+0x20>)
 8013fec:	2300      	movs	r3, #0
 8013fee:	4604      	mov	r4, r0
 8013ff0:	4608      	mov	r0, r1
 8013ff2:	4611      	mov	r1, r2
 8013ff4:	602b      	str	r3, [r5, #0]
 8013ff6:	f000 f821 	bl	801403c <_fstat>
 8013ffa:	1c43      	adds	r3, r0, #1
 8013ffc:	d102      	bne.n	8014004 <_fstat_r+0x1c>
 8013ffe:	682b      	ldr	r3, [r5, #0]
 8014000:	b103      	cbz	r3, 8014004 <_fstat_r+0x1c>
 8014002:	6023      	str	r3, [r4, #0]
 8014004:	bd38      	pop	{r3, r4, r5, pc}
 8014006:	bf00      	nop
 8014008:	200029ac 	.word	0x200029ac

0801400c <_isatty_r>:
 801400c:	b538      	push	{r3, r4, r5, lr}
 801400e:	4d06      	ldr	r5, [pc, #24]	; (8014028 <_isatty_r+0x1c>)
 8014010:	2300      	movs	r3, #0
 8014012:	4604      	mov	r4, r0
 8014014:	4608      	mov	r0, r1
 8014016:	602b      	str	r3, [r5, #0]
 8014018:	f000 f820 	bl	801405c <_isatty>
 801401c:	1c43      	adds	r3, r0, #1
 801401e:	d102      	bne.n	8014026 <_isatty_r+0x1a>
 8014020:	682b      	ldr	r3, [r5, #0]
 8014022:	b103      	cbz	r3, 8014026 <_isatty_r+0x1a>
 8014024:	6023      	str	r3, [r4, #0]
 8014026:	bd38      	pop	{r3, r4, r5, pc}
 8014028:	200029ac 	.word	0x200029ac

0801402c <_close>:
 801402c:	4b02      	ldr	r3, [pc, #8]	; (8014038 <_close+0xc>)
 801402e:	2258      	movs	r2, #88	; 0x58
 8014030:	601a      	str	r2, [r3, #0]
 8014032:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014036:	4770      	bx	lr
 8014038:	200029ac 	.word	0x200029ac

0801403c <_fstat>:
 801403c:	4b02      	ldr	r3, [pc, #8]	; (8014048 <_fstat+0xc>)
 801403e:	2258      	movs	r2, #88	; 0x58
 8014040:	601a      	str	r2, [r3, #0]
 8014042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014046:	4770      	bx	lr
 8014048:	200029ac 	.word	0x200029ac

0801404c <_getpid>:
 801404c:	4b02      	ldr	r3, [pc, #8]	; (8014058 <_getpid+0xc>)
 801404e:	2258      	movs	r2, #88	; 0x58
 8014050:	601a      	str	r2, [r3, #0]
 8014052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014056:	4770      	bx	lr
 8014058:	200029ac 	.word	0x200029ac

0801405c <_isatty>:
 801405c:	4b02      	ldr	r3, [pc, #8]	; (8014068 <_isatty+0xc>)
 801405e:	2258      	movs	r2, #88	; 0x58
 8014060:	601a      	str	r2, [r3, #0]
 8014062:	2000      	movs	r0, #0
 8014064:	4770      	bx	lr
 8014066:	bf00      	nop
 8014068:	200029ac 	.word	0x200029ac

0801406c <_kill>:
 801406c:	4b02      	ldr	r3, [pc, #8]	; (8014078 <_kill+0xc>)
 801406e:	2258      	movs	r2, #88	; 0x58
 8014070:	601a      	str	r2, [r3, #0]
 8014072:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014076:	4770      	bx	lr
 8014078:	200029ac 	.word	0x200029ac

0801407c <_lseek>:
 801407c:	4b02      	ldr	r3, [pc, #8]	; (8014088 <_lseek+0xc>)
 801407e:	2258      	movs	r2, #88	; 0x58
 8014080:	601a      	str	r2, [r3, #0]
 8014082:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014086:	4770      	bx	lr
 8014088:	200029ac 	.word	0x200029ac

0801408c <_read>:
 801408c:	4b02      	ldr	r3, [pc, #8]	; (8014098 <_read+0xc>)
 801408e:	2258      	movs	r2, #88	; 0x58
 8014090:	601a      	str	r2, [r3, #0]
 8014092:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014096:	4770      	bx	lr
 8014098:	200029ac 	.word	0x200029ac

0801409c <_sbrk>:
 801409c:	4a04      	ldr	r2, [pc, #16]	; (80140b0 <_sbrk+0x14>)
 801409e:	6811      	ldr	r1, [r2, #0]
 80140a0:	4603      	mov	r3, r0
 80140a2:	b909      	cbnz	r1, 80140a8 <_sbrk+0xc>
 80140a4:	4903      	ldr	r1, [pc, #12]	; (80140b4 <_sbrk+0x18>)
 80140a6:	6011      	str	r1, [r2, #0]
 80140a8:	6810      	ldr	r0, [r2, #0]
 80140aa:	4403      	add	r3, r0
 80140ac:	6013      	str	r3, [r2, #0]
 80140ae:	4770      	bx	lr
 80140b0:	200029b0 	.word	0x200029b0
 80140b4:	200029b8 	.word	0x200029b8

080140b8 <_write>:
 80140b8:	4b02      	ldr	r3, [pc, #8]	; (80140c4 <_write+0xc>)
 80140ba:	2258      	movs	r2, #88	; 0x58
 80140bc:	601a      	str	r2, [r3, #0]
 80140be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80140c2:	4770      	bx	lr
 80140c4:	200029ac 	.word	0x200029ac

080140c8 <_exit>:
 80140c8:	e7fe      	b.n	80140c8 <_exit>
	...

080140cc <_init>:
 80140cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140ce:	bf00      	nop
 80140d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80140d2:	bc08      	pop	{r3}
 80140d4:	469e      	mov	lr, r3
 80140d6:	4770      	bx	lr

080140d8 <_fini>:
 80140d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140da:	bf00      	nop
 80140dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80140de:	bc08      	pop	{r3}
 80140e0:	469e      	mov	lr, r3
 80140e2:	4770      	bx	lr
