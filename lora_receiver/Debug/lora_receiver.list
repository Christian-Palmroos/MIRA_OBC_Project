
lora_receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013f84  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  08014148  08014148  00024148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080146a0  080146a0  0003035c  2**0
                  CONTENTS
  4 .ARM          00000008  080146a0  080146a0  000246a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080146a8  080146a8  0003035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080146a8  080146a8  000246a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080146ac  080146ac  000246ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000035c  20000000  080146b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002658  2000035c  08014a0c  0003035c  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200029b4  08014a0c  000329b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003035c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b93e  00000000  00000000  0003038c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057ac  00000000  00000000  0005bcca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002308  00000000  00000000  00061478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020c0  00000000  00000000  00063780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000837e  00000000  00000000  00065840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c87d  00000000  00000000  0006dbbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011c6a6  00000000  00000000  0009a43b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b6ae1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a5f8  00000000  00000000  001b6b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001c112c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001c11f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000035c 	.word	0x2000035c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801412c 	.word	0x0801412c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000360 	.word	0x20000360
 80001fc:	0801412c 	.word	0x0801412c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8000ee6:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000ee8:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <BSP_I2C2_Init+0x74>)
 8000eea:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <BSP_I2C2_Init+0x78>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	4918      	ldr	r1, [pc, #96]	; (8000f54 <BSP_I2C2_Init+0x78>)
 8000ef4:	600a      	str	r2, [r1, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d122      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8000efa:	4814      	ldr	r0, [pc, #80]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000efc:	f002 fcb9 	bl	8003872 <HAL_I2C_GetState>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d11c      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8000f06:	4811      	ldr	r0, [pc, #68]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f08:	f000 f86a 	bl	8000fe0 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d116      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8000f12:	480e      	ldr	r0, [pc, #56]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f14:	f000 f820 	bl	8000f58 <MX_I2C2_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f1e:	f06f 0307 	mvn.w	r3, #7
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	e00c      	b.n	8000f40 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f26:	2100      	movs	r1, #0
 8000f28:	4808      	ldr	r0, [pc, #32]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f2a:	f002 fcb0 	bl	800388e <HAL_I2CEx_ConfigAnalogFilter>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f34:	f06f 0307 	mvn.w	r3, #7
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	e001      	b.n	8000f40 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000378 	.word	0x20000378
 8000f50:	40005800 	.word	0x40005800
 8000f54:	200003cc 	.word	0x200003cc

08000f58 <MX_I2C2_Init>:
}

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <MX_I2C2_Init+0x80>)
 8000f68:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x307075B1;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <MX_I2C2_Init+0x84>)
 8000f6e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f002 fbda 	bl	8003754 <HAL_I2C_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000faa:	2100      	movs	r1, #0
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f002 fc6e 	bl	800388e <HAL_I2CEx_ConfigAnalogFilter>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f002 fcb0 	bl	8003924 <HAL_I2CEx_ConfigDigitalFilter>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40005800 	.word	0x40005800
 8000fdc:	307075b1 	.word	0x307075b1

08000fe0 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0ae      	sub	sp, #184	; 0xb8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	2294      	movs	r2, #148	; 0x94
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f010 fb29 	bl	8011648 <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4618      	mov	r0, r3
 8001004:	f004 fe7e 	bl	8005d04 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001008:	4b23      	ldr	r3, [pc, #140]	; (8001098 <I2C2_MspInit+0xb8>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	4a22      	ldr	r2, [pc, #136]	; (8001098 <I2C2_MspInit+0xb8>)
 800100e:	f043 0302 	orr.w	r3, r3, #2
 8001012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001014:	4b20      	ldr	r3, [pc, #128]	; (8001098 <I2C2_MspInit+0xb8>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8001020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001024:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001028:	2312      	movs	r3, #18
 800102a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 800103a:	2304      	movs	r3, #4
 800103c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001040:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001044:	4619      	mov	r1, r3
 8001046:	4815      	ldr	r0, [pc, #84]	; (800109c <I2C2_MspInit+0xbc>)
 8001048:	f002 f9a8 	bl	800339c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 800104c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001050:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001054:	2312      	movs	r3, #18
 8001056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8001066:	2304      	movs	r3, #4
 8001068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 800106c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001070:	4619      	mov	r1, r3
 8001072:	480a      	ldr	r0, [pc, #40]	; (800109c <I2C2_MspInit+0xbc>)
 8001074:	f002 f992 	bl	800339c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <I2C2_MspInit+0xb8>)
 800107a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107c:	4a06      	ldr	r2, [pc, #24]	; (8001098 <I2C2_MspInit+0xb8>)
 800107e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001082:	6593      	str	r3, [r2, #88]	; 0x58
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <I2C2_MspInit+0xb8>)
 8001086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001090:	bf00      	nop
 8001092:	37b8      	adds	r7, #184	; 0xb8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40021000 	.word	0x40021000
 800109c:	48000400 	.word	0x48000400

080010a0 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6858      	ldr	r0, [r3, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	8adb      	ldrh	r3, [r3, #22]
 80010c2:	2200      	movs	r2, #0
 80010c4:	4619      	mov	r1, r3
 80010c6:	f002 fb13 	bl	80036f0 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	1cf9      	adds	r1, r7, #3
 80010d4:	2201      	movs	r2, #1
 80010d6:	f008 f843 	bl	8009160 <HAL_SPI_Transmit>
 80010da:	4603      	mov	r3, r0
 80010dc:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6818      	ldr	r0, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f107 010f 	add.w	r1, r7, #15
 80010ea:	2201      	movs	r2, #1
 80010ec:	f008 f9a6 	bl	800943c <HAL_SPI_Receive>
 80010f0:	4603      	mov	r3, r0
 80010f2:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6858      	ldr	r0, [r3, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	8adb      	ldrh	r3, [r3, #22]
 80010fc:	2201      	movs	r2, #1
 80010fe:	4619      	mov	r1, r3
 8001100:	f002 faf6 	bl	80036f0 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8001104:	7bfb      	ldrb	r3, [r7, #15]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	460b      	mov	r3, r1
 8001118:	70fb      	strb	r3, [r7, #3]
 800111a:	4613      	mov	r3, r2
 800111c:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 800111e:	78fb      	ldrb	r3, [r7, #3]
 8001120:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001124:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8001126:	78bb      	ldrb	r3, [r7, #2]
 8001128:	021b      	lsls	r3, r3, #8
 800112a:	b21a      	sxth	r2, r3
 800112c:	78fb      	ldrb	r3, [r7, #3]
 800112e:	b21b      	sxth	r3, r3
 8001130:	4313      	orrs	r3, r2
 8001132:	b21b      	sxth	r3, r3
 8001134:	b29b      	uxth	r3, r3
 8001136:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6858      	ldr	r0, [r3, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	8adb      	ldrh	r3, [r3, #22]
 8001140:	2200      	movs	r2, #0
 8001142:	4619      	mov	r1, r3
 8001144:	f002 fad4 	bl	80036f0 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6818      	ldr	r0, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f107 010a 	add.w	r1, r7, #10
 8001154:	2202      	movs	r2, #2
 8001156:	f008 f803 	bl	8009160 <HAL_SPI_Transmit>
 800115a:	4603      	mov	r3, r0
 800115c:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6858      	ldr	r0, [r3, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	8adb      	ldrh	r3, [r3, #22]
 8001166:	2201      	movs	r2, #1
 8001168:	4619      	mov	r1, r3
 800116a:	f002 fac1 	bl	80036f0 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b088      	sub	sp, #32
 800117a:	af00      	add	r7, sp, #0
 800117c:	60f8      	str	r0, [r7, #12]
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	4611      	mov	r1, r2
 8001182:	461a      	mov	r2, r3
 8001184:	460b      	mov	r3, r1
 8001186:	71fb      	strb	r3, [r7, #7]
 8001188:	4613      	mov	r3, r2
 800118a:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6858      	ldr	r0, [r3, #4]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	8adb      	ldrh	r3, [r3, #22]
 8001198:	2200      	movs	r2, #0
 800119a:	4619      	mov	r1, r3
 800119c:	f002 faa8 	bl	80036f0 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f107 0117 	add.w	r1, r7, #23
 80011ac:	2201      	movs	r2, #1
 80011ae:	f007 ffd7 	bl	8009160 <HAL_SPI_Transmit>
 80011b2:	4603      	mov	r3, r0
 80011b4:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 80011b6:	79bb      	ldrb	r3, [r7, #6]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d108      	bne.n	80011ce <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	79fa      	ldrb	r2, [r7, #7]
 80011c2:	b292      	uxth	r2, r2
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f008 fc7c 	bl	8009ac4 <HAL_SPI_Transmit_DMA>
 80011cc:	e012      	b.n	80011f4 <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6818      	ldr	r0, [r3, #0]
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	68b9      	ldr	r1, [r7, #8]
 80011dc:	f007 ffc0 	bl	8009160 <HAL_SPI_Transmit>
 80011e0:	4603      	mov	r3, r0
 80011e2:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6858      	ldr	r0, [r3, #4]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	8adb      	ldrh	r3, [r3, #22]
 80011ec:	2201      	movs	r2, #1
 80011ee:	4619      	mov	r1, r3
 80011f0:	f002 fa7e 	bl	80036f0 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 80011f4:	3720      	adds	r7, #32
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <read_fifo>:

// Reads data "len" size from FIFO into buffer
static void read_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b088      	sub	sp, #32
 80011fe:	af00      	add	r7, sp, #0
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	4611      	mov	r1, r2
 8001206:	461a      	mov	r2, r3
 8001208:	460b      	mov	r3, r1
 800120a:	71fb      	strb	r3, [r7, #7]
 800120c:	4613      	mov	r3, r2
 800120e:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO;
 8001210:	2300      	movs	r3, #0
 8001212:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6858      	ldr	r0, [r3, #4]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	8adb      	ldrh	r3, [r3, #22]
 800121c:	2200      	movs	r2, #0
 800121e:	4619      	mov	r1, r3
 8001220:	f002 fa66 	bl	80036f0 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6818      	ldr	r0, [r3, #0]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f107 0117 	add.w	r1, r7, #23
 8001230:	2201      	movs	r2, #1
 8001232:	f007 ff95 	bl	8009160 <HAL_SPI_Transmit>
 8001236:	4603      	mov	r3, r0
 8001238:	61fb      	str	r3, [r7, #28]
  uint32_t res2;
  if (mode == TRANSFER_MODE_DMA) {
 800123a:	79bb      	ldrb	r3, [r7, #6]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d10a      	bne.n	8001256 <read_fifo+0x5c>
    res2 = HAL_SPI_Receive_DMA(lora->spi, buffer, len);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	79fa      	ldrb	r2, [r7, #7]
 8001246:	b292      	uxth	r2, r2
 8001248:	68b9      	ldr	r1, [r7, #8]
 800124a:	4618      	mov	r0, r3
 800124c:	f008 fd2e 	bl	8009cac <HAL_SPI_Receive_DMA>
 8001250:	4603      	mov	r3, r0
 8001252:	61bb      	str	r3, [r7, #24]
  }

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI receive/transmit failed");
  }
}
 8001254:	e012      	b.n	800127c <read_fifo+0x82>
    res2 = HAL_SPI_Receive(lora->spi, buffer, len, lora->spi_timeout);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6818      	ldr	r0, [r3, #0]
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	b29a      	uxth	r2, r3
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	68b9      	ldr	r1, [r7, #8]
 8001264:	f008 f8ea 	bl	800943c <HAL_SPI_Receive>
 8001268:	4603      	mov	r3, r0
 800126a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6858      	ldr	r0, [r3, #4]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	8adb      	ldrh	r3, [r3, #22]
 8001274:	2201      	movs	r2, #1
 8001276:	4619      	mov	r1, r3
 8001278:	f002 fa3a 	bl	80036f0 <HAL_GPIO_WritePin>
}
 800127c:	bf00      	nop
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <set_mode>:

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8001290:	78fb      	ldrb	r3, [r7, #3]
 8001292:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001296:	b2db      	uxtb	r3, r3
 8001298:	461a      	mov	r2, r3
 800129a:	2101      	movs	r1, #1
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ff36 	bl	800110e <write_register>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	2b2c      	cmp	r3, #44	; 0x2c
 80012bc:	d801      	bhi.n	80012c2 <set_OCP+0x16>
    imax = 45;
 80012be:	232d      	movs	r3, #45	; 0x2d
 80012c0:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 80012c2:	78fb      	ldrb	r3, [r7, #3]
 80012c4:	2bf0      	cmp	r3, #240	; 0xf0
 80012c6:	d901      	bls.n	80012cc <set_OCP+0x20>
    imax = 240;
 80012c8:	23f0      	movs	r3, #240	; 0xf0
 80012ca:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 80012cc:	78fb      	ldrb	r3, [r7, #3]
 80012ce:	2b81      	cmp	r3, #129	; 0x81
 80012d0:	d809      	bhi.n	80012e6 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 80012d2:	78fb      	ldrb	r3, [r7, #3]
 80012d4:	3b2d      	subs	r3, #45	; 0x2d
 80012d6:	4a0f      	ldr	r2, [pc, #60]	; (8001314 <set_OCP+0x68>)
 80012d8:	fb82 1203 	smull	r1, r2, r2, r3
 80012dc:	1052      	asrs	r2, r2, #1
 80012de:	17db      	asrs	r3, r3, #31
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	e008      	b.n	80012f8 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 80012e6:	78fb      	ldrb	r3, [r7, #3]
 80012e8:	331e      	adds	r3, #30
 80012ea:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <set_OCP+0x68>)
 80012ec:	fb82 1203 	smull	r1, r2, r2, r3
 80012f0:	1092      	asrs	r2, r2, #2
 80012f2:	17db      	asrs	r3, r3, #31
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	f043 0320 	orr.w	r3, r3, #32
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	461a      	mov	r2, r3
 8001302:	210b      	movs	r1, #11
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff02 	bl	800110e <write_register>
}
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	66666667 	.word	0x66666667

08001318 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8001318:	b5b0      	push	{r4, r5, r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8001320:	211d      	movs	r1, #29
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff febc 	bl	80010a0 <read_register>
 8001328:	4603      	mov	r3, r0
 800132a:	091b      	lsrs	r3, r3, #4
 800132c:	b2db      	uxtb	r3, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2200      	movs	r2, #0
 8001332:	461c      	mov	r4, r3
 8001334:	4615      	mov	r5, r2
 8001336:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 800133a:	211e      	movs	r1, #30
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff feaf 	bl	80010a0 <read_register>
 8001342:	4603      	mov	r3, r0
 8001344:	091b      	lsrs	r3, r3, #4
 8001346:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8001348:	2304      	movs	r3, #4
 800134a:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	2b0a      	cmp	r3, #10
 8001350:	d908      	bls.n	8001364 <set_low_data_rate_optimization+0x4c>
 8001352:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001356:	1fd1      	subs	r1, r2, #7
 8001358:	430b      	orrs	r3, r1
 800135a:	d103      	bne.n	8001364 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 800135c:	7ffb      	ldrb	r3, [r7, #31]
 800135e:	f043 0308 	orr.w	r3, r3, #8
 8001362:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8001364:	7ffb      	ldrb	r3, [r7, #31]
 8001366:	461a      	mov	r2, r3
 8001368:	2126      	movs	r1, #38	; 0x26
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff fecf 	bl	800110e <write_register>
}
 8001370:	bf00      	nop
 8001372:	3720      	adds	r7, #32
 8001374:	46bd      	mov	sp, r7
 8001376:	bdb0      	pop	{r4, r5, r7, pc}

08001378 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8001380:	2100      	movs	r1, #0
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ff7e 	bl	8001284 <set_mode>
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <lora_mode_receive_continuous>:

void lora_mode_receive_continuous(lora_sx1276 *lora)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Update base FIFO address for incoming packets
  write_register(lora, REG_FIFO_RX_BASE_ADDR, lora->rx_base_addr);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	7d5b      	ldrb	r3, [r3, #21]
 800139c:	461a      	mov	r2, r3
 800139e:	210f      	movs	r1, #15
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff feb4 	bl	800110e <write_register>
  // Clear all RX related IRQs
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 80013a6:	22f0      	movs	r2, #240	; 0xf0
 80013a8:	2112      	movs	r1, #18
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff feaf 	bl	800110e <write_register>

  set_mode(lora, OPMODE_RX_CONTINUOUS);
 80013b0:	2105      	movs	r1, #5
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ff66 	bl	8001284 <set_mode>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 80013c8:	2101      	movs	r1, #1
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ff5a 	bl	8001284 <set_mode>
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 80013e0:	211d      	movs	r1, #29
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff fe5c 	bl	80010a0 <read_register>
 80013e8:	4603      	mov	r3, r0
 80013ea:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	f023 0301 	bic.w	r3, r3, #1
 80013f2:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	461a      	mov	r2, r3
 80013f8:	211d      	movs	r1, #29
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff fe87 	bl	800110e <write_register>
}
 8001400:	bf00      	nop
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d10e      	bne.n	800143a <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 800141c:	78fb      	ldrb	r3, [r7, #3]
 800141e:	2b0f      	cmp	r3, #15
 8001420:	d901      	bls.n	8001426 <lora_set_tx_power+0x1e>
      level = 15;
 8001422:	230f      	movs	r3, #15
 8001424:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8001426:	78fb      	ldrb	r3, [r7, #3]
 8001428:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800142c:	b2db      	uxtb	r3, r3
 800142e:	461a      	mov	r2, r3
 8001430:	2109      	movs	r1, #9
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff fe6b 	bl	800110e <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8001438:	e02e      	b.n	8001498 <lora_set_tx_power+0x90>
    if (level > 20) {
 800143a:	78fb      	ldrb	r3, [r7, #3]
 800143c:	2b14      	cmp	r3, #20
 800143e:	d901      	bls.n	8001444 <lora_set_tx_power+0x3c>
      level = 20;
 8001440:	2314      	movs	r3, #20
 8001442:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8001444:	78fb      	ldrb	r3, [r7, #3]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d801      	bhi.n	800144e <lora_set_tx_power+0x46>
      level = 2;
 800144a:	2302      	movs	r3, #2
 800144c:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	2b11      	cmp	r3, #17
 8001452:	d90c      	bls.n	800146e <lora_set_tx_power+0x66>
      level -= 3;
 8001454:	78fb      	ldrb	r3, [r7, #3]
 8001456:	3b03      	subs	r3, #3
 8001458:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 800145a:	2287      	movs	r2, #135	; 0x87
 800145c:	214d      	movs	r1, #77	; 0x4d
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff fe55 	bl	800110e <write_register>
      set_OCP(lora, 140);
 8001464:	218c      	movs	r1, #140	; 0x8c
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff ff20 	bl	80012ac <set_OCP>
 800146c:	e008      	b.n	8001480 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 800146e:	2284      	movs	r2, #132	; 0x84
 8001470:	214d      	movs	r1, #77	; 0x4d
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff fe4b 	bl	800110e <write_register>
      set_OCP(lora, 97);
 8001478:	2161      	movs	r1, #97	; 0x61
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ff16 	bl	80012ac <set_OCP>
    level -= 2;
 8001480:	78fb      	ldrb	r3, [r7, #3]
 8001482:	3b02      	subs	r3, #2
 8001484:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8001486:	78fb      	ldrb	r3, [r7, #3]
 8001488:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800148c:	b2db      	uxtb	r3, r3
 800148e:	461a      	mov	r2, r3
 8001490:	2109      	movs	r1, #9
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fe3b 	bl	800110e <write_register>
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 80014ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014b0:	f04f 0000 	mov.w	r0, #0
 80014b4:	f04f 0100 	mov.w	r1, #0
 80014b8:	04d9      	lsls	r1, r3, #19
 80014ba:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80014be:	04d0      	lsls	r0, r2, #19
 80014c0:	4a19      	ldr	r2, [pc, #100]	; (8001528 <lora_set_frequency+0x88>)
 80014c2:	f04f 0300 	mov.w	r3, #0
 80014c6:	f7ff fb87 	bl	8000bd8 <__aeabi_uldivmod>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 80014d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	f04f 0300 	mov.w	r3, #0
 80014de:	0c02      	lsrs	r2, r0, #16
 80014e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80014e4:	0c0b      	lsrs	r3, r1, #16
 80014e6:	b2d3      	uxtb	r3, r2
 80014e8:	461a      	mov	r2, r3
 80014ea:	2106      	movs	r1, #6
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f7ff fe0e 	bl	800110e <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 80014f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	0a02      	lsrs	r2, r0, #8
 8001500:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001504:	0a0b      	lsrs	r3, r1, #8
 8001506:	b2d3      	uxtb	r3, r2
 8001508:	461a      	mov	r2, r3
 800150a:	2107      	movs	r1, #7
 800150c:	68f8      	ldr	r0, [r7, #12]
 800150e:	f7ff fdfe 	bl	800110e <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 8001512:	7c3b      	ldrb	r3, [r7, #16]
 8001514:	461a      	mov	r2, r3
 8001516:	2108      	movs	r1, #8
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f7ff fdf8 	bl	800110e <write_register>
}
 800151e:	bf00      	nop
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	01e84800 	.word	0x01e84800

0800152c <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8001538:	78fb      	ldrb	r3, [r7, #3]
 800153a:	2b05      	cmp	r3, #5
 800153c:	d802      	bhi.n	8001544 <lora_set_spreading_factor+0x18>
    sf = 6;
 800153e:	2306      	movs	r3, #6
 8001540:	70fb      	strb	r3, [r7, #3]
 8001542:	e004      	b.n	800154e <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8001544:	78fb      	ldrb	r3, [r7, #3]
 8001546:	2b0c      	cmp	r3, #12
 8001548:	d901      	bls.n	800154e <lora_set_spreading_factor+0x22>
    sf = 12;
 800154a:	230c      	movs	r3, #12
 800154c:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 800154e:	78fb      	ldrb	r3, [r7, #3]
 8001550:	2b06      	cmp	r3, #6
 8001552:	d10a      	bne.n	800156a <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8001554:	22c5      	movs	r2, #197	; 0xc5
 8001556:	2131      	movs	r1, #49	; 0x31
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff fdd8 	bl	800110e <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 800155e:	220c      	movs	r2, #12
 8001560:	2137      	movs	r1, #55	; 0x37
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fdd3 	bl	800110e <write_register>
 8001568:	e009      	b.n	800157e <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 800156a:	22c3      	movs	r2, #195	; 0xc3
 800156c:	2131      	movs	r1, #49	; 0x31
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff fdcd 	bl	800110e <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8001574:	220a      	movs	r2, #10
 8001576:	2137      	movs	r1, #55	; 0x37
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff fdc8 	bl	800110e <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 800157e:	211e      	movs	r1, #30
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff fd8d 	bl	80010a0 <read_register>
 8001586:	4603      	mov	r3, r0
 8001588:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 800158a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	b25a      	sxtb	r2, r3
 8001594:	78fb      	ldrb	r3, [r7, #3]
 8001596:	011b      	lsls	r3, r3, #4
 8001598:	b25b      	sxtb	r3, r3
 800159a:	4313      	orrs	r3, r2
 800159c:	b25b      	sxtb	r3, r3
 800159e:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	461a      	mov	r2, r3
 80015a4:	211e      	movs	r1, #30
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fdb1 	bl	800110e <write_register>

  set_low_data_rate_optimization(lora);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff feb3 	bl	8001318 <set_low_data_rate_optimization>
}
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	460b      	mov	r3, r1
 80015c4:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 80015c6:	887b      	ldrh	r3, [r7, #2]
 80015c8:	0a1b      	lsrs	r3, r3, #8
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	461a      	mov	r2, r3
 80015d0:	2120      	movs	r1, #32
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff fd9b 	bl	800110e <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 80015d8:	887b      	ldrh	r3, [r7, #2]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	f003 030f 	and.w	r3, r3, #15
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	2121      	movs	r1, #33	; 0x21
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff fd91 	bl	800110e <write_register>
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 80015fc:	2142      	movs	r1, #66	; 0x42
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff fd4e 	bl	80010a0 <read_register>
 8001604:	4603      	mov	r3, r0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 8001616:	2101      	movs	r1, #1
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff fd41 	bl	80010a0 <read_register>
 800161e:	4603      	mov	r3, r0
 8001620:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	2b03      	cmp	r3, #3
 800162a:	d101      	bne.n	8001630 <lora_is_transmitting+0x22>
 800162c:	2305      	movs	r3, #5
 800162e:	e000      	b.n	8001632 <lora_is_transmitting+0x24>
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b084      	sub	sp, #16
 800163e:	af00      	add	r7, sp, #0
 8001640:	60f8      	str	r0, [r7, #12]
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	4611      	mov	r1, r2
 8001646:	461a      	mov	r2, r3
 8001648:	460b      	mov	r3, r1
 800164a:	71fb      	strb	r3, [r7, #7]
 800164c:	4613      	mov	r3, r2
 800164e:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f7ff ffdc 	bl	800160e <lora_is_transmitting>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <lora_send_packet_base+0x26>
    return LORA_BUSY;
 800165c:	2305      	movs	r3, #5
 800165e:	e02a      	b.n	80016b6 <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 8001660:	2101      	movs	r1, #1
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f7ff fe0e 	bl	8001284 <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f000 f904 	bl	8001876 <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	7d1b      	ldrb	r3, [r3, #20]
 8001672:	461a      	mov	r2, r3
 8001674:	210d      	movs	r1, #13
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f7ff fd49 	bl	800110e <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	7d1b      	ldrb	r3, [r3, #20]
 8001680:	461a      	mov	r2, r3
 8001682:	210e      	movs	r1, #14
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f7ff fd42 	bl	800110e <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	461a      	mov	r2, r3
 800168e:	2122      	movs	r1, #34	; 0x22
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f7ff fd3c 	bl	800110e <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 8001696:	79bb      	ldrb	r3, [r7, #6]
 8001698:	79fa      	ldrb	r2, [r7, #7]
 800169a:	68b9      	ldr	r1, [r7, #8]
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f7ff fd6a 	bl	8001176 <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 80016a2:	79bb      	ldrb	r3, [r7, #6]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d101      	bne.n	80016ac <lora_send_packet_base+0x72>
    return LORA_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	e004      	b.n	80016b6 <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 80016ac:	2103      	movs	r1, #3
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f7ff fde8 	bl	8001284 <set_mode>
  return LORA_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b084      	sub	sp, #16
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	60f8      	str	r0, [r7, #12]
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	4613      	mov	r3, r2
 80016ca:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 80016cc:	79fa      	ldrb	r2, [r7, #7]
 80016ce:	2302      	movs	r3, #2
 80016d0:	68b9      	ldr	r1, [r7, #8]
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f7ff ffb1 	bl	800163a <lora_send_packet_base>
 80016d8:	4603      	mov	r3, r0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <lora_is_packet_available>:
    write_register(lora, REG_MODEM_CONFIG_2, mc2);
  }
}

uint8_t lora_is_packet_available(lora_sx1276 *lora)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b084      	sub	sp, #16
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t irqs = read_register(lora, REG_IRQ_FLAGS);
 80016ea:	2112      	movs	r1, #18
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff fcd7 	bl	80010a0 <read_register>
 80016f2:	4603      	mov	r3, r0
 80016f4:	73fb      	strb	r3, [r7, #15]

  // In case of Single receive mode RX_TIMEOUT will be issued
  return  irqs & (IRQ_FLAGS_RX_DONE | IRQ_FLAGS_RX_TIMEOUT);
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016fc:	b2db      	uxtb	r3, r3
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <lora_pending_packet_length>:

uint8_t lora_pending_packet_length(lora_sx1276 *lora)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  uint8_t len;

  // Query for current header mode - implicit / explicit
  uint8_t implicit = read_register(lora, REG_MODEM_CONFIG_1) & MC1_IMPLICIT_HEADER_MODE;
 800170e:	211d      	movs	r1, #29
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff fcc5 	bl	80010a0 <read_register>
 8001716:	4603      	mov	r3, r0
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	73bb      	strb	r3, [r7, #14]
  if (implicit) {
 800171e:	7bbb      	ldrb	r3, [r7, #14]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d006      	beq.n	8001732 <lora_pending_packet_length+0x2c>
    len = read_register(lora, REG_PAYLOAD_LENGTH);
 8001724:	2122      	movs	r1, #34	; 0x22
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff fcba 	bl	80010a0 <read_register>
 800172c:	4603      	mov	r3, r0
 800172e:	73fb      	strb	r3, [r7, #15]
 8001730:	e005      	b.n	800173e <lora_pending_packet_length+0x38>
  } else {
    len = read_register(lora, REG_RX_NB_BYTES);
 8001732:	2113      	movs	r1, #19
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff fcb3 	bl	80010a0 <read_register>
 800173a:	4603      	mov	r3, r0
 800173c:	73fb      	strb	r3, [r7, #15]
  }

  return len;
 800173e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <lora_receive_packet_base>:


static uint8_t lora_receive_packet_base(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error, uint8_t mode)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	4613      	mov	r3, r2
 8001756:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint8_t res = LORA_EMPTY;
 8001758:	2306      	movs	r3, #6
 800175a:	75fb      	strb	r3, [r7, #23]
  uint8_t len = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	75bb      	strb	r3, [r7, #22]

  // Read/Reset IRQs
  uint8_t state = read_register(lora, REG_IRQ_FLAGS);
 8001760:	2112      	movs	r1, #18
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f7ff fc9c 	bl	80010a0 <read_register>
 8001768:	4603      	mov	r3, r0
 800176a:	757b      	strb	r3, [r7, #21]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 800176c:	22f0      	movs	r2, #240	; 0xf0
 800176e:	2112      	movs	r1, #18
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f7ff fccc 	bl	800110e <write_register>

  if (state & IRQ_FLAGS_RX_TIMEOUT) {
 8001776:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800177a:	2b00      	cmp	r3, #0
 800177c:	da02      	bge.n	8001784 <lora_receive_packet_base+0x3c>
    DEBUGF("timeout");
    res = LORA_TIMEOUT;
 800177e:	2302      	movs	r3, #2
 8001780:	75fb      	strb	r3, [r7, #23]
    goto done;
 8001782:	e030      	b.n	80017e6 <lora_receive_packet_base+0x9e>
  }

  if (state & IRQ_FLAGS_RX_DONE) {
 8001784:	7d7b      	ldrb	r3, [r7, #21]
 8001786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800178a:	2b00      	cmp	r3, #0
 800178c:	d02a      	beq.n	80017e4 <lora_receive_packet_base+0x9c>
    if (!(state & IRQ_FLAGS_VALID_HEADER)) {
 800178e:	7d7b      	ldrb	r3, [r7, #21]
 8001790:	f003 0310 	and.w	r3, r3, #16
 8001794:	2b00      	cmp	r3, #0
 8001796:	d102      	bne.n	800179e <lora_receive_packet_base+0x56>
      DEBUGF("invalid header");
      res = LORA_INVALID_HEADER;
 8001798:	2303      	movs	r3, #3
 800179a:	75fb      	strb	r3, [r7, #23]
      goto done;
 800179c:	e023      	b.n	80017e6 <lora_receive_packet_base+0x9e>
    }
    // Packet has been received
    if (state & IRQ_FLAGS_PAYLOAD_CRC_ERROR) {
 800179e:	7d7b      	ldrb	r3, [r7, #21]
 80017a0:	f003 0320 	and.w	r3, r3, #32
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d002      	beq.n	80017ae <lora_receive_packet_base+0x66>
      DEBUGF("CRC error");
      res = LORA_CRC_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	75fb      	strb	r3, [r7, #23]
      goto done;
 80017ac:	e01b      	b.n	80017e6 <lora_receive_packet_base+0x9e>
    }
    // Query for current header mode - implicit / explicit
    len = lora_pending_packet_length(lora);
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f7ff ffa9 	bl	8001706 <lora_pending_packet_length>
 80017b4:	4603      	mov	r3, r0
 80017b6:	75bb      	strb	r3, [r7, #22]
    // Set FIFO to beginning of the packet
    uint8_t offset = read_register(lora, REG_FIFO_RX_CURRENT_ADDR);
 80017b8:	2110      	movs	r1, #16
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f7ff fc70 	bl	80010a0 <read_register>
 80017c0:	4603      	mov	r3, r0
 80017c2:	753b      	strb	r3, [r7, #20]
    write_register(lora, REG_FIFO_ADDR_PTR, offset);
 80017c4:	7d3b      	ldrb	r3, [r7, #20]
 80017c6:	461a      	mov	r2, r3
 80017c8:	210d      	movs	r1, #13
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f7ff fc9f 	bl	800110e <write_register>
    // Read payload
    read_fifo(lora, buffer, len, mode);
 80017d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017d4:	7dba      	ldrb	r2, [r7, #22]
 80017d6:	68b9      	ldr	r1, [r7, #8]
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f7ff fd0e 	bl	80011fa <read_fifo>
    res = LORA_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	75fb      	strb	r3, [r7, #23]
 80017e2:	e000      	b.n	80017e6 <lora_receive_packet_base+0x9e>
  }

done:
 80017e4:	bf00      	nop
  if (error) {
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <lora_receive_packet_base+0xaa>
    *error = res;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	7dfa      	ldrb	r2, [r7, #23]
 80017f0:	701a      	strb	r2, [r3, #0]
  }

  return len;
 80017f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <lora_receive_packet>:

uint8_t lora_receive_packet(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af02      	add	r7, sp, #8
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	4613      	mov	r3, r2
 800180a:	71fb      	strb	r3, [r7, #7]
  return lora_receive_packet_base(lora, buffer, buffer_len, error, TRANSFER_MODE_BLOCKING);
 800180c:	79fa      	ldrb	r2, [r7, #7]
 800180e:	2302      	movs	r3, #2
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f7ff ff96 	bl	8001748 <lora_receive_packet_base>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <lora_receive_packet_blocking>:
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
}

uint8_t lora_receive_packet_blocking(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len,
                   uint32_t timeout, uint8_t *error)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	4613      	mov	r3, r2
 8001834:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint32_t elapsed = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]

  // Wait up to timeout for packet
  while (elapsed < timeout) {
 800183a:	e00b      	b.n	8001854 <lora_receive_packet_blocking+0x2e>
    if (lora_is_packet_available(lora)) {
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f7ff ff50 	bl	80016e2 <lora_is_packet_available>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10a      	bne.n	800185e <lora_receive_packet_blocking+0x38>
      break;
    }
    HAL_Delay(1);
 8001848:	2001      	movs	r0, #1
 800184a:	f001 f943 	bl	8002ad4 <HAL_Delay>
    elapsed++;
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	3301      	adds	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
  while (elapsed < timeout) {
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d3ef      	bcc.n	800183c <lora_receive_packet_blocking+0x16>
 800185c:	e000      	b.n	8001860 <lora_receive_packet_blocking+0x3a>
      break;
 800185e:	bf00      	nop
  }

  return lora_receive_packet(lora, buffer, buffer_len, error);
 8001860:	79fa      	ldrb	r2, [r7, #7]
 8001862:	6a3b      	ldr	r3, [r7, #32]
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f7ff ffc8 	bl	80017fc <lora_receive_packet>
 800186c:	4603      	mov	r3, r0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 800187e:	2208      	movs	r2, #8
 8001880:	2112      	movs	r1, #18
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff fc43 	bl	800110e <write_register>
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
 800189c:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	887a      	ldrh	r2, [r7, #2]
 80018ae:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 80018b0:	6a3a      	ldr	r2, [r7, #32]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2201      	movs	r2, #1
 80018ba:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2200      	movs	r2, #0
 80018c0:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018ce:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f7ff fe8f 	bl	80015f4 <lora_version>
 80018d6:	4603      	mov	r3, r0
 80018d8:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 80018da:	7dfb      	ldrb	r3, [r7, #23]
 80018dc:	2b12      	cmp	r3, #18
 80018de:	d001      	beq.n	80018e4 <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 80018e0:	2304      	movs	r3, #4
 80018e2:	e031      	b.n	8001948 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f7ff fd47 	bl	8001378 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f7ff fd44 	bl	8001378 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 80018f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f7ff fdd3 	bl	80014a0 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 80018fa:	2107      	movs	r1, #7
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f7ff fe15 	bl	800152c <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8001902:	210a      	movs	r1, #10
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f7ff fe58 	bl	80015ba <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f7ff fd64 	bl	80013d8 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8001910:	210c      	movs	r1, #12
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f7ff fbc4 	bl	80010a0 <read_register>
 8001918:	4603      	mov	r3, r0
 800191a:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 800191c:	7dbb      	ldrb	r3, [r7, #22]
 800191e:	f043 0303 	orr.w	r3, r3, #3
 8001922:	b2db      	uxtb	r3, r3
 8001924:	461a      	mov	r2, r3
 8001926:	210c      	movs	r1, #12
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f7ff fbf0 	bl	800110e <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 800192e:	2204      	movs	r2, #4
 8001930:	2126      	movs	r1, #38	; 0x26
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f7ff fbeb 	bl	800110e <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8001938:	2111      	movs	r1, #17
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f7ff fd64 	bl	8001408 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f7ff fd3d 	bl	80013c0 <lora_mode_standby>

  return LORA_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b0a4      	sub	sp, #144	; 0x90
 8001954:	af02      	add	r7, sp, #8
	lora_sx1276 lora;


	// Time progress tracking using tick
	double system_time_counter;
	system_time_counter = 0;
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	uint8_t system_time_buffer[25] = {0};
 8001962:	2300      	movs	r3, #0
 8001964:	64bb      	str	r3, [r7, #72]	; 0x48
 8001966:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
 8001974:	611a      	str	r2, [r3, #16]
 8001976:	751a      	strb	r2, [r3, #20]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001978:	f001 f837 	bl	80029ea <HAL_Init>

	/* USER CODE BEGIN Init */

	// Initialize HAL for UART interrupts
	HAL_MspInit();
 800197c:	f000 fcc6 	bl	800230c <HAL_MspInit>
	// Initialize I2C2 with custom driver
	BSP_I2C2_Init();
 8001980:	f7ff faac 	bl	8000edc <BSP_I2C2_Init>

	//Initialize Msp for both UARTs
	HAL_UART_MspInit(&huart1);
 8001984:	48ae      	ldr	r0, [pc, #696]	; (8001c40 <main+0x2f0>)
 8001986:	f000 fe29 	bl	80025dc <HAL_UART_MspInit>
	HAL_UART_MspInit(&huart2);
 800198a:	48ae      	ldr	r0, [pc, #696]	; (8001c44 <main+0x2f4>)
 800198c:	f000 fe26 	bl	80025dc <HAL_UART_MspInit>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001990:	f000 f98e 	bl	8001cb0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001994:	f000 fbe0 	bl	8002158 <MX_GPIO_Init>
	MX_DMA_Init();
 8001998:	f000 fbba 	bl	8002110 <MX_DMA_Init>
	MX_I2C1_Init();
 800199c:	f000 fa06 	bl	8001dac <MX_I2C1_Init>
	MX_SDMMC1_SD_Init();
 80019a0:	f000 fa44 	bl	8001e2c <MX_SDMMC1_SD_Init>
	MX_SPI1_Init();
 80019a4:	f000 fa64 	bl	8001e70 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 80019a8:	f000 fb16 	bl	8001fd8 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80019ac:	f000 fb60 	bl	8002070 <MX_USART2_UART_Init>
	MX_FATFS_Init();
 80019b0:	f00d f98c 	bl	800eccc <MX_FATFS_Init>
	MX_USB_DEVICE_Init();
 80019b4:	f00f f814 	bl	80109e0 <MX_USB_DEVICE_Init>
	MX_TIM17_Init();
 80019b8:	f000 fa98 	bl	8001eec <MX_TIM17_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 80019bc:	f000 f9ca 	bl	8001d54 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */


	// Enalbe MIRA power from OBC
	HAL_GPIO_WritePin(MIRA_EN_PWR_GPIO_Port, MIRA_EN_PWR_Pin, GPIO_PIN_SET);
 80019c0:	2201      	movs	r2, #1
 80019c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019c6:	48a0      	ldr	r0, [pc, #640]	; (8001c48 <main+0x2f8>)
 80019c8:	f001 fe92 	bl	80036f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OCPEN_GPIO_Port, OCPEN_Pin, GPIO_PIN_SET);
 80019cc:	2201      	movs	r2, #1
 80019ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019d2:	489d      	ldr	r0, [pc, #628]	; (8001c48 <main+0x2f8>)
 80019d4:	f001 fe8c 	bl	80036f0 <HAL_GPIO_WritePin>



	// WAIT FOR USB CONNECTION
	HAL_Delay(8000);
 80019d8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80019dc:	f001 f87a 	bl	8002ad4 <HAL_Delay>
	while (CDC_Transmit_FS ("START\n", 6) == USBD_BUSY);
 80019e0:	bf00      	nop
 80019e2:	2106      	movs	r1, #6
 80019e4:	4899      	ldr	r0, [pc, #612]	; (8001c4c <main+0x2fc>)
 80019e6:	f00f f8c9 	bl	8010b7c <CDC_Transmit_FS>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d0f8      	beq.n	80019e2 <main+0x92>


	/// LoRa Init /////////////////////////////////////////////////////////////////////////////////
	uint8_t lora_res = lora_init(&lora, &hspi1, LORA_NSS_GPIO_Port, LORA_NSS_Pin, LORA_BASE_FREQUENCY_435);
 80019f0:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80019f4:	a390      	add	r3, pc, #576	; (adr r3, 8001c38 <main+0x2e8>)
 80019f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fa:	e9cd 2300 	strd	r2, r3, [sp]
 80019fe:	2320      	movs	r3, #32
 8001a00:	4a93      	ldr	r2, [pc, #588]	; (8001c50 <main+0x300>)
 8001a02:	4994      	ldr	r1, [pc, #592]	; (8001c54 <main+0x304>)
 8001a04:	f7ff ff44 	bl	8001890 <lora_init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (lora_res != LORA_OK) {
 8001a0e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d007      	beq.n	8001a26 <main+0xd6>
		// Initialization failed
		while (CDC_Transmit_FS ("LORA INIT NOT OK!\n", 18) == USBD_BUSY);
 8001a16:	bf00      	nop
 8001a18:	2112      	movs	r1, #18
 8001a1a:	488f      	ldr	r0, [pc, #572]	; (8001c58 <main+0x308>)
 8001a1c:	f00f f8ae 	bl	8010b7c <CDC_Transmit_FS>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d0f8      	beq.n	8001a18 <main+0xc8>
	}
	lora_res = lora_send_packet(&lora, (uint8_t *)"test", 4);
 8001a26:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a2a:	2204      	movs	r2, #4
 8001a2c:	498b      	ldr	r1, [pc, #556]	; (8001c5c <main+0x30c>)
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fe45 	bl	80016be <lora_send_packet>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (lora_res != LORA_OK) {
 8001a3a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d007      	beq.n	8001a52 <main+0x102>
		// Send failed
		while (CDC_Transmit_FS ("LORA SEND NOT OK!\n", 18) == USBD_BUSY);
 8001a42:	bf00      	nop
 8001a44:	2112      	movs	r1, #18
 8001a46:	4886      	ldr	r0, [pc, #536]	; (8001c60 <main+0x310>)
 8001a48:	f00f f898 	bl	8010b7c <CDC_Transmit_FS>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d0f8      	beq.n	8001a44 <main+0xf4>
	}
	if (lora_res == LORA_OK) {
 8001a52:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d107      	bne.n	8001a6a <main+0x11a>
		// All good
		while (CDC_Transmit_FS ("LORA OK!\n", 9) == USBD_BUSY);
 8001a5a:	bf00      	nop
 8001a5c:	2109      	movs	r1, #9
 8001a5e:	4881      	ldr	r0, [pc, #516]	; (8001c64 <main+0x314>)
 8001a60:	f00f f88c 	bl	8010b7c <CDC_Transmit_FS>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d0f8      	beq.n	8001a5c <main+0x10c>
	}
	lora_mode_receive_continuous(&lora);
 8001a6a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fc8e 	bl	8001390 <lora_mode_receive_continuous>


	/// System timers Init /////////////////////////////////////////////////////////////////////////////////

	// Start timers
	HAL_TIM_Base_Start_IT(&htim17);
 8001a74:	487c      	ldr	r0, [pc, #496]	; (8001c68 <main+0x318>)
 8001a76:	f008 ff5d 	bl	800a934 <HAL_TIM_Base_Start_IT>
	tick = 0;
 8001a7a:	4b7c      	ldr	r3, [pc, #496]	; (8001c6c <main+0x31c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
	tickGPS = 0;
 8001a80:	4b7b      	ldr	r3, [pc, #492]	; (8001c70 <main+0x320>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
	/* USER CODE BEGIN WHILE */

	/// Pre-main program /////////////////////////////////////////////////////////////////////////////////
	/// Pre-main program /////////////////////////////////////////////////////////////////////////////////
	/// Pre-main program /////////////////////////////////////////////////////////////////////////////////
	HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8001a86:	2108      	movs	r1, #8
 8001a88:	487a      	ldr	r0, [pc, #488]	; (8001c74 <main+0x324>)
 8001a8a:	f001 fe49 	bl	8003720 <HAL_GPIO_TogglePin>
	while (1) {

		while (usb_Rx_ready == 0);
 8001a8e:	bf00      	nop
 8001a90:	4b79      	ldr	r3, [pc, #484]	; (8001c78 <main+0x328>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0fa      	beq.n	8001a90 <main+0x140>
		usb_Rx_ready = 0;
 8001a9a:	4b77      	ldr	r3, [pc, #476]	; (8001c78 <main+0x328>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]

		if (usb_Rx_buffer[1] == USB_LORA) {
 8001aa0:	4b76      	ldr	r3, [pc, #472]	; (8001c7c <main+0x32c>)
 8001aa2:	785a      	ldrb	r2, [r3, #1]
 8001aa4:	4b76      	ldr	r3, [pc, #472]	; (8001c80 <main+0x330>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d139      	bne.n	8001b20 <main+0x1d0>
			if (usb_Rx_buffer[0] == USB_CHECKSTATUS) {
 8001aac:	4b73      	ldr	r3, [pc, #460]	; (8001c7c <main+0x32c>)
 8001aae:	781a      	ldrb	r2, [r3, #0]
 8001ab0:	4b74      	ldr	r3, [pc, #464]	; (8001c84 <main+0x334>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d0ea      	beq.n	8001a8e <main+0x13e>

			}
			else if (usb_Rx_buffer[1] == USB_TESTOUTPUT) {
 8001ab8:	4b70      	ldr	r3, [pc, #448]	; (8001c7c <main+0x32c>)
 8001aba:	785a      	ldrb	r2, [r3, #1]
 8001abc:	4b72      	ldr	r3, [pc, #456]	; (8001c88 <main+0x338>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d1e4      	bne.n	8001a8e <main+0x13e>
				lora_res = lora_receive_packet_blocking(&lora, &lora_Rx_buffer, sizeof(lora_Rx_buffer), 2000, &lora_error);
 8001ac4:	f107 0108 	add.w	r1, r7, #8
 8001ac8:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8001acc:	1dfb      	adds	r3, r7, #7
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ad4:	2240      	movs	r2, #64	; 0x40
 8001ad6:	f7ff fea6 	bl	8001826 <lora_receive_packet_blocking>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (lora_res != LORA_OK) {
 8001ae0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d008      	beq.n	8001afa <main+0x1aa>
					while (CDC_Transmit_FS ("ERROR!\n", sizeof("ERROR!\n")) == USBD_BUSY);
 8001ae8:	bf00      	nop
 8001aea:	2108      	movs	r1, #8
 8001aec:	4867      	ldr	r0, [pc, #412]	; (8001c8c <main+0x33c>)
 8001aee:	f00f f845 	bl	8010b7c <CDC_Transmit_FS>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d0f8      	beq.n	8001aea <main+0x19a>
 8001af8:	e7c9      	b.n	8001a8e <main+0x13e>
				}
				else {
					while (CDC_Transmit_FS ("Lora packet received!\n", sizeof("Lora packet received!\n")) == USBD_BUSY);
 8001afa:	bf00      	nop
 8001afc:	2117      	movs	r1, #23
 8001afe:	4864      	ldr	r0, [pc, #400]	; (8001c90 <main+0x340>)
 8001b00:	f00f f83c 	bl	8010b7c <CDC_Transmit_FS>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d0f8      	beq.n	8001afc <main+0x1ac>
					while (CDC_Transmit_FS (lora_Rx_buffer, sizeof(lora_Rx_buffer)) == USBD_BUSY);
 8001b0a:	bf00      	nop
 8001b0c:	f107 0308 	add.w	r3, r7, #8
 8001b10:	2140      	movs	r1, #64	; 0x40
 8001b12:	4618      	mov	r0, r3
 8001b14:	f00f f832 	bl	8010b7c <CDC_Transmit_FS>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d0f6      	beq.n	8001b0c <main+0x1bc>
 8001b1e:	e7b6      	b.n	8001a8e <main+0x13e>
			}

		}


		else if (usb_Rx_buffer[0] == USB_TIMERS) {
 8001b20:	4b56      	ldr	r3, [pc, #344]	; (8001c7c <main+0x32c>)
 8001b22:	781a      	ldrb	r2, [r3, #0]
 8001b24:	4b5b      	ldr	r3, [pc, #364]	; (8001c94 <main+0x344>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d138      	bne.n	8001b9e <main+0x24e>
			if (usb_Rx_buffer[1] == USB_CHECKSTATUS) {
 8001b2c:	4b53      	ldr	r3, [pc, #332]	; (8001c7c <main+0x32c>)
 8001b2e:	785a      	ldrb	r2, [r3, #1]
 8001b30:	4b54      	ldr	r3, [pc, #336]	; (8001c84 <main+0x334>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d0aa      	beq.n	8001a8e <main+0x13e>

			}
			else if (usb_Rx_buffer[1] == USB_TESTOUTPUT) {
 8001b38:	4b50      	ldr	r3, [pc, #320]	; (8001c7c <main+0x32c>)
 8001b3a:	785a      	ldrb	r2, [r3, #1]
 8001b3c:	4b52      	ldr	r3, [pc, #328]	; (8001c88 <main+0x338>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d1a4      	bne.n	8001a8e <main+0x13e>
				if (tick == 0) {
 8001b44:	4b49      	ldr	r3, [pc, #292]	; (8001c6c <main+0x31c>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d110      	bne.n	8001b70 <main+0x220>
					tick = 10;
 8001b4e:	4b47      	ldr	r3, [pc, #284]	; (8001c6c <main+0x31c>)
 8001b50:	220a      	movs	r2, #10
 8001b52:	701a      	strb	r2, [r3, #0]
					while (tick != 0);
 8001b54:	bf00      	nop
 8001b56:	4b45      	ldr	r3, [pc, #276]	; (8001c6c <main+0x31c>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1fa      	bne.n	8001b56 <main+0x206>
					while (CDC_Transmit_FS ("Tick works!\n", 13) == USBD_BUSY);
 8001b60:	bf00      	nop
 8001b62:	210d      	movs	r1, #13
 8001b64:	484c      	ldr	r0, [pc, #304]	; (8001c98 <main+0x348>)
 8001b66:	f00f f809 	bl	8010b7c <CDC_Transmit_FS>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d0f8      	beq.n	8001b62 <main+0x212>
				}

				if (tickGPS == 0) {
 8001b70:	4b3f      	ldr	r3, [pc, #252]	; (8001c70 <main+0x320>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d189      	bne.n	8001a8e <main+0x13e>
					tickGPS = 10;
 8001b7a:	4b3d      	ldr	r3, [pc, #244]	; (8001c70 <main+0x320>)
 8001b7c:	220a      	movs	r2, #10
 8001b7e:	701a      	strb	r2, [r3, #0]
					while (tickGPS != 0);
 8001b80:	bf00      	nop
 8001b82:	4b3b      	ldr	r3, [pc, #236]	; (8001c70 <main+0x320>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1fa      	bne.n	8001b82 <main+0x232>
					while (CDC_Transmit_FS ("GPStick works!\n", 16) == USBD_BUSY);
 8001b8c:	bf00      	nop
 8001b8e:	2110      	movs	r1, #16
 8001b90:	4842      	ldr	r0, [pc, #264]	; (8001c9c <main+0x34c>)
 8001b92:	f00e fff3 	bl	8010b7c <CDC_Transmit_FS>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d0f8      	beq.n	8001b8e <main+0x23e>
 8001b9c:	e777      	b.n	8001a8e <main+0x13e>
			}

		}


		else if (usb_Rx_buffer[1] == USB_FLIGHTMODE) {
 8001b9e:	4b37      	ldr	r3, [pc, #220]	; (8001c7c <main+0x32c>)
 8001ba0:	785a      	ldrb	r2, [r3, #1]
 8001ba2:	4b3f      	ldr	r3, [pc, #252]	; (8001ca0 <main+0x350>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d108      	bne.n	8001bbc <main+0x26c>
			while (CDC_Transmit_FS ("OK", 2) == USBD_BUSY);
 8001baa:	bf00      	nop
 8001bac:	2102      	movs	r1, #2
 8001bae:	483d      	ldr	r0, [pc, #244]	; (8001ca4 <main+0x354>)
 8001bb0:	f00e ffe4 	bl	8010b7c <CDC_Transmit_FS>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d0f8      	beq.n	8001bac <main+0x25c>
			break;
 8001bba:	e00f      	b.n	8001bdc <main+0x28c>
		}


		else if (usb_Rx_buffer[1] == USB_PING) {
 8001bbc:	4b2f      	ldr	r3, [pc, #188]	; (8001c7c <main+0x32c>)
 8001bbe:	785a      	ldrb	r2, [r3, #1]
 8001bc0:	4b39      	ldr	r3, [pc, #228]	; (8001ca8 <main+0x358>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	f47f af62 	bne.w	8001a8e <main+0x13e>

			while (CDC_Transmit_FS ("PONG", 4) == USBD_BUSY);
 8001bca:	bf00      	nop
 8001bcc:	2104      	movs	r1, #4
 8001bce:	4837      	ldr	r0, [pc, #220]	; (8001cac <main+0x35c>)
 8001bd0:	f00e ffd4 	bl	8010b7c <CDC_Transmit_FS>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d0f8      	beq.n	8001bcc <main+0x27c>
		while (usb_Rx_ready == 0);
 8001bda:	e758      	b.n	8001a8e <main+0x13e>
			//break;
		}

	}
	HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8001bdc:	2108      	movs	r1, #8
 8001bde:	4825      	ldr	r0, [pc, #148]	; (8001c74 <main+0x324>)
 8001be0:	f001 fd9e 	bl	8003720 <HAL_GPIO_TogglePin>
	// Reset timers before main program
	tick = 0;
 8001be4:	4b21      	ldr	r3, [pc, #132]	; (8001c6c <main+0x31c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
	tickGPS = 0;
 8001bea:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <main+0x320>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8001bf0:	2140      	movs	r1, #64	; 0x40
 8001bf2:	4820      	ldr	r0, [pc, #128]	; (8001c74 <main+0x324>)
 8001bf4:	f001 fd94 	bl	8003720 <HAL_GPIO_TogglePin>
	/// Main program /////////////////////////////////////////////////////////////////////////////////
	while (1)
	{


		lora_res = lora_receive_packet_blocking(&lora, &lora_Rx_buffer, sizeof(lora_Rx_buffer), 1000, &lora_error);
 8001bf8:	f107 0108 	add.w	r1, r7, #8
 8001bfc:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8001c00:	1dfb      	adds	r3, r7, #7
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c08:	2240      	movs	r2, #64	; 0x40
 8001c0a:	f7ff fe0c 	bl	8001826 <lora_receive_packet_blocking>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		while (CDC_Transmit_FS (lora_Rx_buffer, strlen(lora_Rx_buffer)) == USBD_BUSY);
 8001c14:	bf00      	nop
 8001c16:	f107 0308 	add.w	r3, r7, #8
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe faf0 	bl	8000200 <strlen>
 8001c20:	4603      	mov	r3, r0
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	f107 0308 	add.w	r3, r7, #8
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f00e ffa6 	bl	8010b7c <CDC_Transmit_FS>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d0ef      	beq.n	8001c16 <main+0x2c6>
		lora_res = lora_receive_packet_blocking(&lora, &lora_Rx_buffer, sizeof(lora_Rx_buffer), 1000, &lora_error);
 8001c36:	e7df      	b.n	8001bf8 <main+0x2a8>
 8001c38:	19ed92c0 	.word	0x19ed92c0
 8001c3c:	00000000 	.word	0x00000000
 8001c40:	20000554 	.word	0x20000554
 8001c44:	200005e4 	.word	0x200005e4
 8001c48:	48001000 	.word	0x48001000
 8001c4c:	08014148 	.word	0x08014148
 8001c50:	48000800 	.word	0x48000800
 8001c54:	200004a4 	.word	0x200004a4
 8001c58:	08014150 	.word	0x08014150
 8001c5c:	08014164 	.word	0x08014164
 8001c60:	0801416c 	.word	0x0801416c
 8001c64:	08014180 	.word	0x08014180
 8001c68:	20000508 	.word	0x20000508
 8001c6c:	20000d80 	.word	0x20000d80
 8001c70:	20000d81 	.word	0x20000d81
 8001c74:	48000c00 	.word	0x48000c00
 8001c78:	20001072 	.word	0x20001072
 8001c7c:	20001070 	.word	0x20001070
 8001c80:	20000000 	.word	0x20000000
 8001c84:	20000001 	.word	0x20000001
 8001c88:	20000002 	.word	0x20000002
 8001c8c:	0801418c 	.word	0x0801418c
 8001c90:	08014194 	.word	0x08014194
 8001c94:	20000003 	.word	0x20000003
 8001c98:	080141ac 	.word	0x080141ac
 8001c9c:	080141bc 	.word	0x080141bc
 8001ca0:	20000004 	.word	0x20000004
 8001ca4:	080141cc 	.word	0x080141cc
 8001ca8:	20000005 	.word	0x20000005
 8001cac:	080141d0 	.word	0x080141d0

08001cb0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b096      	sub	sp, #88	; 0x58
 8001cb4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	2244      	movs	r2, #68	; 0x44
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f00f fcc2 	bl	8011648 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cc4:	463b      	mov	r3, r7
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	60da      	str	r2, [r3, #12]
 8001cd0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f003 f85e 	bl	8004d94 <HAL_PWREx_ControlVoltageScaling>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <SystemClock_Config+0x32>
	{
		Error_Handler();
 8001cde:	f000 fb0b 	bl	80022f8 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001ce2:	2321      	movs	r3, #33	; 0x21
 8001ce4:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ce6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cea:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001cec:	2301      	movs	r3, #1
 8001cee:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 30;
 8001cfc:	231e      	movs	r3, #30
 8001cfe:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d00:	2302      	movs	r3, #2
 8001d02:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d04:	2302      	movs	r3, #2
 8001d06:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4618      	mov	r0, r3
 8001d12:	f003 f8f3 	bl	8004efc <HAL_RCC_OscConfig>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <SystemClock_Config+0x70>
	{
		Error_Handler();
 8001d1c:	f000 faec 	bl	80022f8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d20:	230f      	movs	r3, #15
 8001d22:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d24:	2303      	movs	r3, #3
 8001d26:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d34:	463b      	mov	r3, r7
 8001d36:	2105      	movs	r1, #5
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f003 fcf9 	bl	8005730 <HAL_RCC_ClockConfig>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8001d44:	f000 fad8 	bl	80022f8 <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 8001d48:	f003 fef0 	bl	8005b2c <HAL_RCC_EnableCSS>
}
 8001d4c:	bf00      	nop
 8001d4e:	3758      	adds	r7, #88	; 0x58
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
	/* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	201a      	movs	r0, #26
 8001d5e:	f000 ffb8 	bl	8002cd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001d62:	201a      	movs	r0, #26
 8001d64:	f000 ffd1 	bl	8002d0a <HAL_NVIC_EnableIRQ>
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	2026      	movs	r0, #38	; 0x26
 8001d6e:	f000 ffb0 	bl	8002cd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d72:	2026      	movs	r0, #38	; 0x26
 8001d74:	f000 ffc9 	bl	8002d0a <HAL_NVIC_EnableIRQ>
	/* USART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	2025      	movs	r0, #37	; 0x25
 8001d7e:	f000 ffa8 	bl	8002cd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d82:	2025      	movs	r0, #37	; 0x25
 8001d84:	f000 ffc1 	bl	8002d0a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	200b      	movs	r0, #11
 8001d8e:	f000 ffa0 	bl	8002cd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001d92:	200b      	movs	r0, #11
 8001d94:	f000 ffb9 	bl	8002d0a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	200c      	movs	r0, #12
 8001d9e:	f000 ff98 	bl	8002cd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001da2:	200c      	movs	r0, #12
 8001da4:	f000 ffb1 	bl	8002d0a <HAL_NVIC_EnableIRQ>
}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}

08001dac <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001db0:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <MX_I2C1_Init+0x74>)
 8001db2:	4a1c      	ldr	r2, [pc, #112]	; (8001e24 <MX_I2C1_Init+0x78>)
 8001db4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x307075B1;
 8001db6:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <MX_I2C1_Init+0x74>)
 8001db8:	4a1b      	ldr	r2, [pc, #108]	; (8001e28 <MX_I2C1_Init+0x7c>)
 8001dba:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001dbc:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <MX_I2C1_Init+0x74>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dc2:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <MX_I2C1_Init+0x74>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dc8:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <MX_I2C1_Init+0x74>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001dce:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <MX_I2C1_Init+0x74>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <MX_I2C1_Init+0x74>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dda:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <MX_I2C1_Init+0x74>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001de0:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <MX_I2C1_Init+0x74>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001de6:	480e      	ldr	r0, [pc, #56]	; (8001e20 <MX_I2C1_Init+0x74>)
 8001de8:	f001 fcb4 	bl	8003754 <HAL_I2C_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8001df2:	f000 fa81 	bl	80022f8 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001df6:	2100      	movs	r1, #0
 8001df8:	4809      	ldr	r0, [pc, #36]	; (8001e20 <MX_I2C1_Init+0x74>)
 8001dfa:	f001 fd48 	bl	800388e <HAL_I2CEx_ConfigAnalogFilter>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8001e04:	f000 fa78 	bl	80022f8 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4805      	ldr	r0, [pc, #20]	; (8001e20 <MX_I2C1_Init+0x74>)
 8001e0c:	f001 fd8a 	bl	8003924 <HAL_I2CEx_ConfigDigitalFilter>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8001e16:	f000 fa6f 	bl	80022f8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	200003d0 	.word	0x200003d0
 8001e24:	40005400 	.word	0x40005400
 8001e28:	307075b1 	.word	0x307075b1

08001e2c <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8001e30:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <MX_SDMMC1_SD_Init+0x3c>)
 8001e32:	4a0e      	ldr	r2, [pc, #56]	; (8001e6c <MX_SDMMC1_SD_Init+0x40>)
 8001e34:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001e36:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <MX_SDMMC1_SD_Init+0x3c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <MX_SDMMC1_SD_Init+0x3c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001e42:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <MX_SDMMC1_SD_Init+0x3c>)
 8001e44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e48:	60da      	str	r2, [r3, #12]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001e4a:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <MX_SDMMC1_SD_Init+0x3c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
	hsd1.Init.ClockDiv = 0;
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <MX_SDMMC1_SD_Init+0x3c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	615a      	str	r2, [r3, #20]
	hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8001e56:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <MX_SDMMC1_SD_Init+0x3c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000424 	.word	0x20000424
 8001e6c:	50062400 	.word	0x50062400

08001e70 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001e74:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <MX_SPI1_Init+0x74>)
 8001e76:	4a1c      	ldr	r2, [pc, #112]	; (8001ee8 <MX_SPI1_Init+0x78>)
 8001e78:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <MX_SPI1_Init+0x74>)
 8001e7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e80:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e82:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <MX_SPI1_Init+0x74>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e88:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <MX_SPI1_Init+0x74>)
 8001e8a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e8e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e90:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <MX_SPI1_Init+0x74>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e96:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <MX_SPI1_Init+0x74>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <MX_SPI1_Init+0x74>)
 8001e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ea2:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001ea4:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <MX_SPI1_Init+0x74>)
 8001ea6:	2228      	movs	r2, #40	; 0x28
 8001ea8:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <MX_SPI1_Init+0x74>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <MX_SPI1_Init+0x74>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <MX_SPI1_Init+0x74>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <MX_SPI1_Init+0x74>)
 8001ebe:	2207      	movs	r2, #7
 8001ec0:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ec2:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <MX_SPI1_Init+0x74>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <MX_SPI1_Init+0x74>)
 8001eca:	2208      	movs	r2, #8
 8001ecc:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ece:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <MX_SPI1_Init+0x74>)
 8001ed0:	f007 f8a3 	bl	800901a <HAL_SPI_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 8001eda:	f000 fa0d 	bl	80022f8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200004a4 	.word	0x200004a4
 8001ee8:	40013000 	.word	0x40013000

08001eec <MX_TIM17_Init>:
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b092      	sub	sp, #72	; 0x48
 8001ef0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM17_Init 0 */

	/* USER CODE END TIM17_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 8001ef2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
 8001f00:	611a      	str	r2, [r3, #16]
 8001f02:	615a      	str	r2, [r3, #20]
 8001f04:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f06:	463b      	mov	r3, r7
 8001f08:	222c      	movs	r2, #44	; 0x2c
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f00f fb9b 	bl	8011648 <memset>

	/* USER CODE BEGIN TIM17_Init 1 */

	/* USER CODE END TIM17_Init 1 */
	htim17.Instance = TIM17;
 8001f12:	4b2f      	ldr	r3, [pc, #188]	; (8001fd0 <MX_TIM17_Init+0xe4>)
 8001f14:	4a2f      	ldr	r2, [pc, #188]	; (8001fd4 <MX_TIM17_Init+0xe8>)
 8001f16:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = 999;
 8001f18:	4b2d      	ldr	r3, [pc, #180]	; (8001fd0 <MX_TIM17_Init+0xe4>)
 8001f1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f1e:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f20:	4b2b      	ldr	r3, [pc, #172]	; (8001fd0 <MX_TIM17_Init+0xe4>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 11999;
 8001f26:	4b2a      	ldr	r3, [pc, #168]	; (8001fd0 <MX_TIM17_Init+0xe4>)
 8001f28:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001f2c:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f2e:	4b28      	ldr	r3, [pc, #160]	; (8001fd0 <MX_TIM17_Init+0xe4>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 8001f34:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <MX_TIM17_Init+0xe4>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	615a      	str	r2, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f3a:	4b25      	ldr	r3, [pc, #148]	; (8001fd0 <MX_TIM17_Init+0xe4>)
 8001f3c:	2280      	movs	r2, #128	; 0x80
 8001f3e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001f40:	4823      	ldr	r0, [pc, #140]	; (8001fd0 <MX_TIM17_Init+0xe4>)
 8001f42:	f008 fc9f 	bl	800a884 <HAL_TIM_Base_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_TIM17_Init+0x64>
	{
		Error_Handler();
 8001f4c:	f000 f9d4 	bl	80022f8 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8001f50:	481f      	ldr	r0, [pc, #124]	; (8001fd0 <MX_TIM17_Init+0xe4>)
 8001f52:	f008 fd5f 	bl	800aa14 <HAL_TIM_OC_Init>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM17_Init+0x74>
	{
		Error_Handler();
 8001f5c:	f000 f9cc 	bl	80022f8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001f60:	2300      	movs	r3, #0
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.Pulse = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f74:	2300      	movs	r3, #0
 8001f76:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f80:	2200      	movs	r2, #0
 8001f82:	4619      	mov	r1, r3
 8001f84:	4812      	ldr	r0, [pc, #72]	; (8001fd0 <MX_TIM17_Init+0xe4>)
 8001f86:	f008 fec5 	bl	800ad14 <HAL_TIM_OC_ConfigChannel>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM17_Init+0xa8>
	{
		Error_Handler();
 8001f90:	f000 f9b2 	bl	80022f8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f94:	2300      	movs	r3, #0
 8001f96:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fac:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001fb2:	463b      	mov	r3, r7
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4806      	ldr	r0, [pc, #24]	; (8001fd0 <MX_TIM17_Init+0xe4>)
 8001fb8:	f009 fac8 	bl	800b54c <HAL_TIMEx_ConfigBreakDeadTime>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_TIM17_Init+0xda>
	{
		Error_Handler();
 8001fc2:	f000 f999 	bl	80022f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM17_Init 2 */

	/* USER CODE END TIM17_Init 2 */

}
 8001fc6:	bf00      	nop
 8001fc8:	3748      	adds	r7, #72	; 0x48
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000508 	.word	0x20000508
 8001fd4:	40014800 	.word	0x40014800

08001fd8 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001fdc:	4b22      	ldr	r3, [pc, #136]	; (8002068 <MX_USART1_UART_Init+0x90>)
 8001fde:	4a23      	ldr	r2, [pc, #140]	; (800206c <MX_USART1_UART_Init+0x94>)
 8001fe0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001fe2:	4b21      	ldr	r3, [pc, #132]	; (8002068 <MX_USART1_UART_Init+0x90>)
 8001fe4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fe8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fea:	4b1f      	ldr	r3, [pc, #124]	; (8002068 <MX_USART1_UART_Init+0x90>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001ff0:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <MX_USART1_UART_Init+0x90>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001ff6:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <MX_USART1_UART_Init+0x90>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001ffc:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <MX_USART1_UART_Init+0x90>)
 8001ffe:	220c      	movs	r2, #12
 8002000:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002002:	4b19      	ldr	r3, [pc, #100]	; (8002068 <MX_USART1_UART_Init+0x90>)
 8002004:	2200      	movs	r2, #0
 8002006:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002008:	4b17      	ldr	r3, [pc, #92]	; (8002068 <MX_USART1_UART_Init+0x90>)
 800200a:	2200      	movs	r2, #0
 800200c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800200e:	4b16      	ldr	r3, [pc, #88]	; (8002068 <MX_USART1_UART_Init+0x90>)
 8002010:	2200      	movs	r2, #0
 8002012:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002014:	4b14      	ldr	r3, [pc, #80]	; (8002068 <MX_USART1_UART_Init+0x90>)
 8002016:	2200      	movs	r2, #0
 8002018:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800201a:	4b13      	ldr	r3, [pc, #76]	; (8002068 <MX_USART1_UART_Init+0x90>)
 800201c:	2200      	movs	r2, #0
 800201e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002020:	4811      	ldr	r0, [pc, #68]	; (8002068 <MX_USART1_UART_Init+0x90>)
 8002022:	f009 fb2f 	bl	800b684 <HAL_UART_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 800202c:	f000 f964 	bl	80022f8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002030:	2100      	movs	r1, #0
 8002032:	480d      	ldr	r0, [pc, #52]	; (8002068 <MX_USART1_UART_Init+0x90>)
 8002034:	f00a fc5d 	bl	800c8f2 <HAL_UARTEx_SetTxFifoThreshold>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_USART1_UART_Init+0x6a>
	{
		Error_Handler();
 800203e:	f000 f95b 	bl	80022f8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002042:	2100      	movs	r1, #0
 8002044:	4808      	ldr	r0, [pc, #32]	; (8002068 <MX_USART1_UART_Init+0x90>)
 8002046:	f00a fc92 	bl	800c96e <HAL_UARTEx_SetRxFifoThreshold>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_USART1_UART_Init+0x7c>
	{
		Error_Handler();
 8002050:	f000 f952 	bl	80022f8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002054:	4804      	ldr	r0, [pc, #16]	; (8002068 <MX_USART1_UART_Init+0x90>)
 8002056:	f00a fc13 	bl	800c880 <HAL_UARTEx_DisableFifoMode>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 8002060:	f000 f94a 	bl	80022f8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000554 	.word	0x20000554
 800206c:	40013800 	.word	0x40013800

08002070 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002074:	4b24      	ldr	r3, [pc, #144]	; (8002108 <MX_USART2_UART_Init+0x98>)
 8002076:	4a25      	ldr	r2, [pc, #148]	; (800210c <MX_USART2_UART_Init+0x9c>)
 8002078:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 800207a:	4b23      	ldr	r3, [pc, #140]	; (8002108 <MX_USART2_UART_Init+0x98>)
 800207c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002080:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002082:	4b21      	ldr	r3, [pc, #132]	; (8002108 <MX_USART2_UART_Init+0x98>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002088:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <MX_USART2_UART_Init+0x98>)
 800208a:	2200      	movs	r2, #0
 800208c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800208e:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <MX_USART2_UART_Init+0x98>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002094:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <MX_USART2_UART_Init+0x98>)
 8002096:	220c      	movs	r2, #12
 8002098:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800209a:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <MX_USART2_UART_Init+0x98>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a0:	4b19      	ldr	r3, [pc, #100]	; (8002108 <MX_USART2_UART_Init+0x98>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020a6:	4b18      	ldr	r3, [pc, #96]	; (8002108 <MX_USART2_UART_Init+0x98>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020ac:	4b16      	ldr	r3, [pc, #88]	; (8002108 <MX_USART2_UART_Init+0x98>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <MX_USART2_UART_Init+0x98>)
 80020b4:	2210      	movs	r2, #16
 80020b6:	629a      	str	r2, [r3, #40]	; 0x28
	huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80020b8:	4b13      	ldr	r3, [pc, #76]	; (8002108 <MX_USART2_UART_Init+0x98>)
 80020ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020be:	63da      	str	r2, [r3, #60]	; 0x3c
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80020c0:	4811      	ldr	r0, [pc, #68]	; (8002108 <MX_USART2_UART_Init+0x98>)
 80020c2:	f009 fadf 	bl	800b684 <HAL_UART_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_USART2_UART_Init+0x60>
	{
		Error_Handler();
 80020cc:	f000 f914 	bl	80022f8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020d0:	2100      	movs	r1, #0
 80020d2:	480d      	ldr	r0, [pc, #52]	; (8002108 <MX_USART2_UART_Init+0x98>)
 80020d4:	f00a fc0d 	bl	800c8f2 <HAL_UARTEx_SetTxFifoThreshold>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_USART2_UART_Init+0x72>
	{
		Error_Handler();
 80020de:	f000 f90b 	bl	80022f8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020e2:	2100      	movs	r1, #0
 80020e4:	4808      	ldr	r0, [pc, #32]	; (8002108 <MX_USART2_UART_Init+0x98>)
 80020e6:	f00a fc42 	bl	800c96e <HAL_UARTEx_SetRxFifoThreshold>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_USART2_UART_Init+0x84>
	{
		Error_Handler();
 80020f0:	f000 f902 	bl	80022f8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80020f4:	4804      	ldr	r0, [pc, #16]	; (8002108 <MX_USART2_UART_Init+0x98>)
 80020f6:	f00a fbc3 	bl	800c880 <HAL_UARTEx_DisableFifoMode>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_USART2_UART_Init+0x94>
	{
		Error_Handler();
 8002100:	f000 f8fa 	bl	80022f8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}
 8002108:	200005e4 	.word	0x200005e4
 800210c:	40004400 	.word	0x40004400

08002110 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002116:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <MX_DMA_Init+0x44>)
 8002118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211a:	4a0e      	ldr	r2, [pc, #56]	; (8002154 <MX_DMA_Init+0x44>)
 800211c:	f043 0304 	orr.w	r3, r3, #4
 8002120:	6493      	str	r3, [r2, #72]	; 0x48
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <MX_DMA_Init+0x44>)
 8002124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <MX_DMA_Init+0x44>)
 8002130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002132:	4a08      	ldr	r2, [pc, #32]	; (8002154 <MX_DMA_Init+0x44>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6493      	str	r3, [r2, #72]	; 0x48
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <MX_DMA_Init+0x44>)
 800213c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	683b      	ldr	r3, [r7, #0]

}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40021000 	.word	0x40021000

08002158 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08c      	sub	sp, #48	; 0x30
 800215c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215e:	f107 031c 	add.w	r3, r7, #28
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	60da      	str	r2, [r3, #12]
 800216c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800216e:	4b5d      	ldr	r3, [pc, #372]	; (80022e4 <MX_GPIO_Init+0x18c>)
 8002170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002172:	4a5c      	ldr	r2, [pc, #368]	; (80022e4 <MX_GPIO_Init+0x18c>)
 8002174:	f043 0310 	orr.w	r3, r3, #16
 8002178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800217a:	4b5a      	ldr	r3, [pc, #360]	; (80022e4 <MX_GPIO_Init+0x18c>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217e:	f003 0310 	and.w	r3, r3, #16
 8002182:	61bb      	str	r3, [r7, #24]
 8002184:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002186:	4b57      	ldr	r3, [pc, #348]	; (80022e4 <MX_GPIO_Init+0x18c>)
 8002188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218a:	4a56      	ldr	r2, [pc, #344]	; (80022e4 <MX_GPIO_Init+0x18c>)
 800218c:	f043 0304 	orr.w	r3, r3, #4
 8002190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002192:	4b54      	ldr	r3, [pc, #336]	; (80022e4 <MX_GPIO_Init+0x18c>)
 8002194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800219e:	4b51      	ldr	r3, [pc, #324]	; (80022e4 <MX_GPIO_Init+0x18c>)
 80021a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a2:	4a50      	ldr	r2, [pc, #320]	; (80022e4 <MX_GPIO_Init+0x18c>)
 80021a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021aa:	4b4e      	ldr	r3, [pc, #312]	; (80022e4 <MX_GPIO_Init+0x18c>)
 80021ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b2:	613b      	str	r3, [r7, #16]
 80021b4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80021b6:	4b4b      	ldr	r3, [pc, #300]	; (80022e4 <MX_GPIO_Init+0x18c>)
 80021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ba:	4a4a      	ldr	r2, [pc, #296]	; (80022e4 <MX_GPIO_Init+0x18c>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021c2:	4b48      	ldr	r3, [pc, #288]	; (80022e4 <MX_GPIO_Init+0x18c>)
 80021c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80021ce:	4b45      	ldr	r3, [pc, #276]	; (80022e4 <MX_GPIO_Init+0x18c>)
 80021d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d2:	4a44      	ldr	r2, [pc, #272]	; (80022e4 <MX_GPIO_Init+0x18c>)
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021da:	4b42      	ldr	r3, [pc, #264]	; (80022e4 <MX_GPIO_Init+0x18c>)
 80021dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80021e6:	4b3f      	ldr	r3, [pc, #252]	; (80022e4 <MX_GPIO_Init+0x18c>)
 80021e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ea:	4a3e      	ldr	r2, [pc, #248]	; (80022e4 <MX_GPIO_Init+0x18c>)
 80021ec:	f043 0308 	orr.w	r3, r3, #8
 80021f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021f2:	4b3c      	ldr	r3, [pc, #240]	; (80022e4 <MX_GPIO_Init+0x18c>)
 80021f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	607b      	str	r3, [r7, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 80021fe:	2200      	movs	r2, #0
 8002200:	f641 013c 	movw	r1, #6204	; 0x183c
 8002204:	4838      	ldr	r0, [pc, #224]	; (80022e8 <MX_GPIO_Init+0x190>)
 8002206:	f001 fa73 	bl	80036f0 <HAL_GPIO_WritePin>
			|MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_SET);
 800220a:	2201      	movs	r2, #1
 800220c:	2130      	movs	r1, #48	; 0x30
 800220e:	4837      	ldr	r0, [pc, #220]	; (80022ec <MX_GPIO_Init+0x194>)
 8002210:	f001 fa6e 	bl	80036f0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8002214:	2200      	movs	r2, #0
 8002216:	2178      	movs	r1, #120	; 0x78
 8002218:	4835      	ldr	r0, [pc, #212]	; (80022f0 <MX_GPIO_Init+0x198>)
 800221a:	f001 fa69 	bl	80036f0 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
	GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 800221e:	f641 033c 	movw	r3, #6204	; 0x183c
 8002222:	61fb      	str	r3, [r7, #28]
			|MIRA_EN_PWR_Pin|OCPEN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002224:	2301      	movs	r3, #1
 8002226:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222c:	2300      	movs	r3, #0
 800222e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002230:	f107 031c 	add.w	r3, r7, #28
 8002234:	4619      	mov	r1, r3
 8002236:	482c      	ldr	r0, [pc, #176]	; (80022e8 <MX_GPIO_Init+0x190>)
 8002238:	f001 f8b0 	bl	800339c <HAL_GPIO_Init>

	/*Configure GPIO pin : CHG_INT_Pin */
	GPIO_InitStruct.Pin = CHG_INT_Pin;
 800223c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002240:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002242:	2300      	movs	r3, #0
 8002244:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 800224a:	f107 031c 	add.w	r3, r7, #28
 800224e:	4619      	mov	r1, r3
 8002250:	4826      	ldr	r0, [pc, #152]	; (80022ec <MX_GPIO_Init+0x194>)
 8002252:	f001 f8a3 	bl	800339c <HAL_GPIO_Init>

	/*Configure GPIO pins : LORA_DIG0_Pin CARD_DETECT_Pin */
	GPIO_InitStruct.Pin = LORA_DIG0_Pin|CARD_DETECT_Pin;
 8002256:	f248 0302 	movw	r3, #32770	; 0x8002
 800225a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800225c:	2300      	movs	r3, #0
 800225e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002264:	f107 031c 	add.w	r3, r7, #28
 8002268:	4619      	mov	r1, r3
 800226a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800226e:	f001 f895 	bl	800339c <HAL_GPIO_Init>

	/*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
	GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 8002272:	2330      	movs	r3, #48	; 0x30
 8002274:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002276:	2301      	movs	r3, #1
 8002278:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227e:	2300      	movs	r3, #0
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002282:	f107 031c 	add.w	r3, r7, #28
 8002286:	4619      	mov	r1, r3
 8002288:	4818      	ldr	r0, [pc, #96]	; (80022ec <MX_GPIO_Init+0x194>)
 800228a:	f001 f887 	bl	800339c <HAL_GPIO_Init>

	/*Configure GPIO pin : OCPFAULT_Pin */
	GPIO_InitStruct.Pin = OCPFAULT_Pin;
 800228e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002292:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002294:	2300      	movs	r3, #0
 8002296:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002298:	2301      	movs	r3, #1
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 800229c:	f107 031c 	add.w	r3, r7, #28
 80022a0:	4619      	mov	r1, r3
 80022a2:	4811      	ldr	r0, [pc, #68]	; (80022e8 <MX_GPIO_Init+0x190>)
 80022a4:	f001 f87a 	bl	800339c <HAL_GPIO_Init>

	/*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 80022a8:	2378      	movs	r3, #120	; 0x78
 80022aa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ac:	2301      	movs	r3, #1
 80022ae:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b4:	2300      	movs	r3, #0
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022b8:	f107 031c 	add.w	r3, r7, #28
 80022bc:	4619      	mov	r1, r3
 80022be:	480c      	ldr	r0, [pc, #48]	; (80022f0 <MX_GPIO_Init+0x198>)
 80022c0:	f001 f86c 	bl	800339c <HAL_GPIO_Init>

	/*Configure GPIO pin : POWERGOOD_Pin */
	GPIO_InitStruct.Pin = POWERGOOD_Pin;
 80022c4:	2320      	movs	r3, #32
 80022c6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c8:	2300      	movs	r3, #0
 80022ca:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 80022d0:	f107 031c 	add.w	r3, r7, #28
 80022d4:	4619      	mov	r1, r3
 80022d6:	4807      	ldr	r0, [pc, #28]	; (80022f4 <MX_GPIO_Init+0x19c>)
 80022d8:	f001 f860 	bl	800339c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80022dc:	bf00      	nop
 80022de:	3730      	adds	r7, #48	; 0x30
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40021000 	.word	0x40021000
 80022e8:	48001000 	.word	0x48001000
 80022ec:	48000800 	.word	0x48000800
 80022f0:	48000c00 	.word	0x48000c00
 80022f4:	48000400 	.word	0x48000400

080022f8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022fc:	b672      	cpsid	i
}
 80022fe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	printf("Error_Handler() called");
 8002300:	4801      	ldr	r0, [pc, #4]	; (8002308 <Error_Handler+0x10>)
 8002302:	f00f fef3 	bl	80120ec <iprintf>
	while (1)
 8002306:	e7fe      	b.n	8002306 <Error_Handler+0xe>
 8002308:	080141d8 	.word	0x080141d8

0800230c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002312:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <HAL_MspInit+0x44>)
 8002314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002316:	4a0e      	ldr	r2, [pc, #56]	; (8002350 <HAL_MspInit+0x44>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6613      	str	r3, [r2, #96]	; 0x60
 800231e:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <HAL_MspInit+0x44>)
 8002320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800232a:	4b09      	ldr	r3, [pc, #36]	; (8002350 <HAL_MspInit+0x44>)
 800232c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232e:	4a08      	ldr	r2, [pc, #32]	; (8002350 <HAL_MspInit+0x44>)
 8002330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002334:	6593      	str	r3, [r2, #88]	; 0x58
 8002336:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_MspInit+0x44>)
 8002338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233e:	603b      	str	r3, [r7, #0]
 8002340:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000

08002354 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b0ae      	sub	sp, #184	; 0xb8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800236c:	f107 0310 	add.w	r3, r7, #16
 8002370:	2294      	movs	r2, #148	; 0x94
 8002372:	2100      	movs	r1, #0
 8002374:	4618      	mov	r0, r3
 8002376:	f00f f967 	bl	8011648 <memset>
  if(hi2c->Instance==I2C1)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a21      	ldr	r2, [pc, #132]	; (8002404 <HAL_I2C_MspInit+0xb0>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d13a      	bne.n	80023fa <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002384:	2340      	movs	r3, #64	; 0x40
 8002386:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002388:	2300      	movs	r3, #0
 800238a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800238c:	f107 0310 	add.w	r3, r7, #16
 8002390:	4618      	mov	r0, r3
 8002392:	f003 fcb7 	bl	8005d04 <HAL_RCCEx_PeriphCLKConfig>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800239c:	f7ff ffac 	bl	80022f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a0:	4b19      	ldr	r3, [pc, #100]	; (8002408 <HAL_I2C_MspInit+0xb4>)
 80023a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a4:	4a18      	ldr	r2, [pc, #96]	; (8002408 <HAL_I2C_MspInit+0xb4>)
 80023a6:	f043 0302 	orr.w	r3, r3, #2
 80023aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ac:	4b16      	ldr	r3, [pc, #88]	; (8002408 <HAL_I2C_MspInit+0xb4>)
 80023ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023b8:	23c0      	movs	r3, #192	; 0xc0
 80023ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023be:	2312      	movs	r3, #18
 80023c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ca:	2303      	movs	r3, #3
 80023cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023d0:	2304      	movs	r3, #4
 80023d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80023da:	4619      	mov	r1, r3
 80023dc:	480b      	ldr	r0, [pc, #44]	; (800240c <HAL_I2C_MspInit+0xb8>)
 80023de:	f000 ffdd 	bl	800339c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023e2:	4b09      	ldr	r3, [pc, #36]	; (8002408 <HAL_I2C_MspInit+0xb4>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	4a08      	ldr	r2, [pc, #32]	; (8002408 <HAL_I2C_MspInit+0xb4>)
 80023e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_I2C_MspInit+0xb4>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023fa:	bf00      	nop
 80023fc:	37b8      	adds	r7, #184	; 0xb8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40005400 	.word	0x40005400
 8002408:	40021000 	.word	0x40021000
 800240c:	48000400 	.word	0x48000400

08002410 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b0b0      	sub	sp, #192	; 0xc0
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002418:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	60da      	str	r2, [r3, #12]
 8002426:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002428:	f107 0318 	add.w	r3, r7, #24
 800242c:	2294      	movs	r2, #148	; 0x94
 800242e:	2100      	movs	r1, #0
 8002430:	4618      	mov	r0, r3
 8002432:	f00f f909 	bl	8011648 <memset>
  if(hsd->Instance==SDMMC1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a33      	ldr	r2, [pc, #204]	; (8002508 <HAL_SD_MspInit+0xf8>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d15e      	bne.n	80024fe <HAL_SD_MspInit+0xee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8002440:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002444:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 8002446:	2300      	movs	r3, #0
 8002448:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800244c:	f107 0318 	add.w	r3, r7, #24
 8002450:	4618      	mov	r0, r3
 8002452:	f003 fc57 	bl	8005d04 <HAL_RCCEx_PeriphCLKConfig>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 800245c:	f7ff ff4c 	bl	80022f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002460:	4b2a      	ldr	r3, [pc, #168]	; (800250c <HAL_SD_MspInit+0xfc>)
 8002462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002464:	4a29      	ldr	r2, [pc, #164]	; (800250c <HAL_SD_MspInit+0xfc>)
 8002466:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800246a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800246c:	4b27      	ldr	r3, [pc, #156]	; (800250c <HAL_SD_MspInit+0xfc>)
 800246e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002470:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002478:	4b24      	ldr	r3, [pc, #144]	; (800250c <HAL_SD_MspInit+0xfc>)
 800247a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247c:	4a23      	ldr	r2, [pc, #140]	; (800250c <HAL_SD_MspInit+0xfc>)
 800247e:	f043 0304 	orr.w	r3, r3, #4
 8002482:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002484:	4b21      	ldr	r3, [pc, #132]	; (800250c <HAL_SD_MspInit+0xfc>)
 8002486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002490:	4b1e      	ldr	r3, [pc, #120]	; (800250c <HAL_SD_MspInit+0xfc>)
 8002492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002494:	4a1d      	ldr	r2, [pc, #116]	; (800250c <HAL_SD_MspInit+0xfc>)
 8002496:	f043 0308 	orr.w	r3, r3, #8
 800249a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800249c:	4b1b      	ldr	r3, [pc, #108]	; (800250c <HAL_SD_MspInit+0xfc>)
 800249e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80024a8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80024ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b0:	2302      	movs	r3, #2
 80024b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024bc:	2303      	movs	r3, #3
 80024be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80024c2:	230c      	movs	r3, #12
 80024c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80024cc:	4619      	mov	r1, r3
 80024ce:	4810      	ldr	r0, [pc, #64]	; (8002510 <HAL_SD_MspInit+0x100>)
 80024d0:	f000 ff64 	bl	800339c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024d4:	2304      	movs	r3, #4
 80024d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024da:	2302      	movs	r3, #2
 80024dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e6:	2303      	movs	r3, #3
 80024e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80024ec:	230c      	movs	r3, #12
 80024ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024f2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80024f6:	4619      	mov	r1, r3
 80024f8:	4806      	ldr	r0, [pc, #24]	; (8002514 <HAL_SD_MspInit+0x104>)
 80024fa:	f000 ff4f 	bl	800339c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80024fe:	bf00      	nop
 8002500:	37c0      	adds	r7, #192	; 0xc0
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	50062400 	.word	0x50062400
 800250c:	40021000 	.word	0x40021000
 8002510:	48000800 	.word	0x48000800
 8002514:	48000c00 	.word	0x48000c00

08002518 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08a      	sub	sp, #40	; 0x28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a17      	ldr	r2, [pc, #92]	; (8002594 <HAL_SPI_MspInit+0x7c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d128      	bne.n	800258c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800253a:	4b17      	ldr	r3, [pc, #92]	; (8002598 <HAL_SPI_MspInit+0x80>)
 800253c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253e:	4a16      	ldr	r2, [pc, #88]	; (8002598 <HAL_SPI_MspInit+0x80>)
 8002540:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002544:	6613      	str	r3, [r2, #96]	; 0x60
 8002546:	4b14      	ldr	r3, [pc, #80]	; (8002598 <HAL_SPI_MspInit+0x80>)
 8002548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800254a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002552:	4b11      	ldr	r3, [pc, #68]	; (8002598 <HAL_SPI_MspInit+0x80>)
 8002554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002556:	4a10      	ldr	r2, [pc, #64]	; (8002598 <HAL_SPI_MspInit+0x80>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800255e:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <HAL_SPI_MspInit+0x80>)
 8002560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|LORA0_SCK_Pin|LORA0_MISO_Pin|LORA0_MOSI_Pin;
 800256a:	23f0      	movs	r3, #240	; 0xf0
 800256c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256e:	2302      	movs	r3, #2
 8002570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002576:	2303      	movs	r3, #3
 8002578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800257a:	2305      	movs	r3, #5
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257e:	f107 0314 	add.w	r3, r7, #20
 8002582:	4619      	mov	r1, r3
 8002584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002588:	f000 ff08 	bl	800339c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800258c:	bf00      	nop
 800258e:	3728      	adds	r7, #40	; 0x28
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40013000 	.word	0x40013000
 8002598:	40021000 	.word	0x40021000

0800259c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <HAL_TIM_Base_MspInit+0x38>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d10b      	bne.n	80025c6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80025ae:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <HAL_TIM_Base_MspInit+0x3c>)
 80025b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b2:	4a09      	ldr	r2, [pc, #36]	; (80025d8 <HAL_TIM_Base_MspInit+0x3c>)
 80025b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025b8:	6613      	str	r3, [r2, #96]	; 0x60
 80025ba:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <HAL_TIM_Base_MspInit+0x3c>)
 80025bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80025c6:	bf00      	nop
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40014800 	.word	0x40014800
 80025d8:	40021000 	.word	0x40021000

080025dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b0b0      	sub	sp, #192	; 0xc0
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025f4:	f107 0318 	add.w	r3, r7, #24
 80025f8:	2294      	movs	r2, #148	; 0x94
 80025fa:	2100      	movs	r1, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f00f f823 	bl	8011648 <memset>
  if(huart->Instance==USART1)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a6c      	ldr	r2, [pc, #432]	; (80027b8 <HAL_UART_MspInit+0x1dc>)
 8002608:	4293      	cmp	r3, r2
 800260a:	f040 8090 	bne.w	800272e <HAL_UART_MspInit+0x152>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800260e:	2301      	movs	r3, #1
 8002610:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002612:	2300      	movs	r3, #0
 8002614:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002616:	f107 0318 	add.w	r3, r7, #24
 800261a:	4618      	mov	r0, r3
 800261c:	f003 fb72 	bl	8005d04 <HAL_RCCEx_PeriphCLKConfig>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002626:	f7ff fe67 	bl	80022f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800262a:	4b64      	ldr	r3, [pc, #400]	; (80027bc <HAL_UART_MspInit+0x1e0>)
 800262c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262e:	4a63      	ldr	r2, [pc, #396]	; (80027bc <HAL_UART_MspInit+0x1e0>)
 8002630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002634:	6613      	str	r3, [r2, #96]	; 0x60
 8002636:	4b61      	ldr	r3, [pc, #388]	; (80027bc <HAL_UART_MspInit+0x1e0>)
 8002638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800263a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002642:	4b5e      	ldr	r3, [pc, #376]	; (80027bc <HAL_UART_MspInit+0x1e0>)
 8002644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002646:	4a5d      	ldr	r2, [pc, #372]	; (80027bc <HAL_UART_MspInit+0x1e0>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800264e:	4b5b      	ldr	r3, [pc, #364]	; (80027bc <HAL_UART_MspInit+0x1e0>)
 8002650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 800265a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800265e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002662:	2302      	movs	r3, #2
 8002664:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266e:	2303      	movs	r3, #3
 8002670:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002674:	2307      	movs	r3, #7
 8002676:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800267e:	4619      	mov	r1, r3
 8002680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002684:	f000 fe8a 	bl	800339c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8002688:	4b4d      	ldr	r3, [pc, #308]	; (80027c0 <HAL_UART_MspInit+0x1e4>)
 800268a:	4a4e      	ldr	r2, [pc, #312]	; (80027c4 <HAL_UART_MspInit+0x1e8>)
 800268c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800268e:	4b4c      	ldr	r3, [pc, #304]	; (80027c0 <HAL_UART_MspInit+0x1e4>)
 8002690:	2218      	movs	r2, #24
 8002692:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002694:	4b4a      	ldr	r3, [pc, #296]	; (80027c0 <HAL_UART_MspInit+0x1e4>)
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800269a:	4b49      	ldr	r3, [pc, #292]	; (80027c0 <HAL_UART_MspInit+0x1e4>)
 800269c:	2200      	movs	r2, #0
 800269e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026a0:	4b47      	ldr	r3, [pc, #284]	; (80027c0 <HAL_UART_MspInit+0x1e4>)
 80026a2:	2280      	movs	r2, #128	; 0x80
 80026a4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026a6:	4b46      	ldr	r3, [pc, #280]	; (80027c0 <HAL_UART_MspInit+0x1e4>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026ac:	4b44      	ldr	r3, [pc, #272]	; (80027c0 <HAL_UART_MspInit+0x1e4>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80026b2:	4b43      	ldr	r3, [pc, #268]	; (80027c0 <HAL_UART_MspInit+0x1e4>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026b8:	4b41      	ldr	r3, [pc, #260]	; (80027c0 <HAL_UART_MspInit+0x1e4>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80026be:	4840      	ldr	r0, [pc, #256]	; (80027c0 <HAL_UART_MspInit+0x1e4>)
 80026c0:	f000 fb3e 	bl	8002d40 <HAL_DMA_Init>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 80026ca:	f7ff fe15 	bl	80022f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a3b      	ldr	r2, [pc, #236]	; (80027c0 <HAL_UART_MspInit+0x1e4>)
 80026d2:	67da      	str	r2, [r3, #124]	; 0x7c
 80026d4:	4a3a      	ldr	r2, [pc, #232]	; (80027c0 <HAL_UART_MspInit+0x1e4>)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80026da:	4b3b      	ldr	r3, [pc, #236]	; (80027c8 <HAL_UART_MspInit+0x1ec>)
 80026dc:	4a3b      	ldr	r2, [pc, #236]	; (80027cc <HAL_UART_MspInit+0x1f0>)
 80026de:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80026e0:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <HAL_UART_MspInit+0x1ec>)
 80026e2:	2219      	movs	r2, #25
 80026e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026e6:	4b38      	ldr	r3, [pc, #224]	; (80027c8 <HAL_UART_MspInit+0x1ec>)
 80026e8:	2210      	movs	r2, #16
 80026ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ec:	4b36      	ldr	r3, [pc, #216]	; (80027c8 <HAL_UART_MspInit+0x1ec>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026f2:	4b35      	ldr	r3, [pc, #212]	; (80027c8 <HAL_UART_MspInit+0x1ec>)
 80026f4:	2280      	movs	r2, #128	; 0x80
 80026f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026f8:	4b33      	ldr	r3, [pc, #204]	; (80027c8 <HAL_UART_MspInit+0x1ec>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026fe:	4b32      	ldr	r3, [pc, #200]	; (80027c8 <HAL_UART_MspInit+0x1ec>)
 8002700:	2200      	movs	r2, #0
 8002702:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002704:	4b30      	ldr	r3, [pc, #192]	; (80027c8 <HAL_UART_MspInit+0x1ec>)
 8002706:	2200      	movs	r2, #0
 8002708:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800270a:	4b2f      	ldr	r3, [pc, #188]	; (80027c8 <HAL_UART_MspInit+0x1ec>)
 800270c:	2200      	movs	r2, #0
 800270e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002710:	482d      	ldr	r0, [pc, #180]	; (80027c8 <HAL_UART_MspInit+0x1ec>)
 8002712:	f000 fb15 	bl	8002d40 <HAL_DMA_Init>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <HAL_UART_MspInit+0x144>
    {
      Error_Handler();
 800271c:	f7ff fdec 	bl	80022f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a29      	ldr	r2, [pc, #164]	; (80027c8 <HAL_UART_MspInit+0x1ec>)
 8002724:	679a      	str	r2, [r3, #120]	; 0x78
 8002726:	4a28      	ldr	r2, [pc, #160]	; (80027c8 <HAL_UART_MspInit+0x1ec>)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800272c:	e040      	b.n	80027b0 <HAL_UART_MspInit+0x1d4>
  else if(huart->Instance==USART2)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a27      	ldr	r2, [pc, #156]	; (80027d0 <HAL_UART_MspInit+0x1f4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d13b      	bne.n	80027b0 <HAL_UART_MspInit+0x1d4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002738:	2302      	movs	r3, #2
 800273a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800273c:	2300      	movs	r3, #0
 800273e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002740:	f107 0318 	add.w	r3, r7, #24
 8002744:	4618      	mov	r0, r3
 8002746:	f003 fadd 	bl	8005d04 <HAL_RCCEx_PeriphCLKConfig>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_UART_MspInit+0x178>
      Error_Handler();
 8002750:	f7ff fdd2 	bl	80022f8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002754:	4b19      	ldr	r3, [pc, #100]	; (80027bc <HAL_UART_MspInit+0x1e0>)
 8002756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002758:	4a18      	ldr	r2, [pc, #96]	; (80027bc <HAL_UART_MspInit+0x1e0>)
 800275a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800275e:	6593      	str	r3, [r2, #88]	; 0x58
 8002760:	4b16      	ldr	r3, [pc, #88]	; (80027bc <HAL_UART_MspInit+0x1e0>)
 8002762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276c:	4b13      	ldr	r3, [pc, #76]	; (80027bc <HAL_UART_MspInit+0x1e0>)
 800276e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002770:	4a12      	ldr	r2, [pc, #72]	; (80027bc <HAL_UART_MspInit+0x1e0>)
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002778:	4b10      	ldr	r3, [pc, #64]	; (80027bc <HAL_UART_MspInit+0x1e0>)
 800277a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8002784:	230c      	movs	r3, #12
 8002786:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278a:	2302      	movs	r3, #2
 800278c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	2300      	movs	r3, #0
 8002792:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002796:	2303      	movs	r3, #3
 8002798:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800279c:	2307      	movs	r3, #7
 800279e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80027a6:	4619      	mov	r1, r3
 80027a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027ac:	f000 fdf6 	bl	800339c <HAL_GPIO_Init>
}
 80027b0:	bf00      	nop
 80027b2:	37c0      	adds	r7, #192	; 0xc0
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40013800 	.word	0x40013800
 80027bc:	40021000 	.word	0x40021000
 80027c0:	20000674 	.word	0x20000674
 80027c4:	40020008 	.word	0x40020008
 80027c8:	200006d4 	.word	0x200006d4
 80027cc:	4002001c 	.word	0x4002001c
 80027d0:	40004400 	.word	0x40004400

080027d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80027d8:	f003 f9b8 	bl	8005b4c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80027dc:	e7fe      	b.n	80027dc <NMI_Handler+0x8>

080027de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027de:	b480      	push	{r7}
 80027e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027e2:	e7fe      	b.n	80027e2 <HardFault_Handler+0x4>

080027e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027e8:	e7fe      	b.n	80027e8 <MemManage_Handler+0x4>

080027ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ea:	b480      	push	{r7}
 80027ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ee:	e7fe      	b.n	80027ee <BusFault_Handler+0x4>

080027f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f4:	e7fe      	b.n	80027f4 <UsageFault_Handler+0x4>

080027f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027f6:	b480      	push	{r7}
 80027f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002812:	b480      	push	{r7}
 8002814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002824:	f000 f936 	bl	8002a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002828:	bf00      	nop
 800282a:	bd80      	pop	{r7, pc}

0800282c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002830:	4802      	ldr	r0, [pc, #8]	; (800283c <DMA1_Channel1_IRQHandler+0x10>)
 8002832:	f000 fc63 	bl	80030fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000674 	.word	0x20000674

08002840 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002844:	4802      	ldr	r0, [pc, #8]	; (8002850 <DMA1_Channel2_IRQHandler+0x10>)
 8002846:	f000 fc59 	bl	80030fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	200006d4 	.word	0x200006d4

08002854 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	if (tick) {tick--;}
 8002858:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d006      	beq.n	8002870 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>
 8002862:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	b2db      	uxtb	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b2da      	uxtb	r2, r3
 800286c:	4b09      	ldr	r3, [pc, #36]	; (8002894 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 800286e:	701a      	strb	r2, [r3, #0]
	if (tickGPS) {tickGPS--;}
 8002870:	4b09      	ldr	r3, [pc, #36]	; (8002898 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d006      	beq.n	8002888 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>
 800287a:	4b07      	ldr	r3, [pc, #28]	; (8002898 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	3b01      	subs	r3, #1
 8002882:	b2da      	uxtb	r2, r3
 8002884:	4b04      	ldr	r3, [pc, #16]	; (8002898 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 8002886:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002888:	4804      	ldr	r0, [pc, #16]	; (800289c <TIM1_TRG_COM_TIM17_IRQHandler+0x48>)
 800288a:	f008 f924 	bl	800aad6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000d80 	.word	0x20000d80
 8002898:	20000d81 	.word	0x20000d81
 800289c:	20000508 	.word	0x20000508

080028a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
//		if (mira_rxBuffer == mira_rxBuffer1) {mira_rxBuffer = mira_rxBuffer2;}
//		else {mira_rxBuffer = mira_rxBuffer1;}
//		HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
//	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028a4:	4802      	ldr	r0, [pc, #8]	; (80028b0 <USART1_IRQHandler+0x10>)
 80028a6:	f008 ff3d 	bl	800b724 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000554 	.word	0x20000554

080028b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	char c = huart2.Instance->RDR;
 80028ba:	4b22      	ldr	r3, [pc, #136]	; (8002944 <USART2_IRQHandler+0x90>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	71fb      	strb	r3, [r7, #7]
	if (gps_rxBufferPos < gps_RXBUFSIZE - 1)
 80028c4:	4b20      	ldr	r3, [pc, #128]	; (8002948 <USART2_IRQHandler+0x94>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
	{ gps_rxBuffer[gps_rxBufferPos++] = (uint8_t) c; }
 80028c8:	4b20      	ldr	r3, [pc, #128]	; (800294c <USART2_IRQHandler+0x98>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4b1e      	ldr	r3, [pc, #120]	; (8002948 <USART2_IRQHandler+0x94>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	1c59      	adds	r1, r3, #1
 80028d4:	b2c8      	uxtb	r0, r1
 80028d6:	491c      	ldr	r1, [pc, #112]	; (8002948 <USART2_IRQHandler+0x94>)
 80028d8:	7008      	strb	r0, [r1, #0]
 80028da:	4413      	add	r3, r2
 80028dc:	79fa      	ldrb	r2, [r7, #7]
 80028de:	701a      	strb	r2, [r3, #0]

	if ((c == '\n') && (gps_send_ready))// && (tickGPS == 0))// && (tickGPS == 0)) //(c == '\r') ||
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	2b0a      	cmp	r3, #10
 80028e4:	d126      	bne.n	8002934 <USART2_IRQHandler+0x80>
 80028e6:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <USART2_IRQHandler+0x9c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d022      	beq.n	8002934 <USART2_IRQHandler+0x80>
	{
		//tickGPS = 1;
		gps_rxBuffer[gps_rxBufferPos] = 0;
 80028ee:	4b17      	ldr	r3, [pc, #92]	; (800294c <USART2_IRQHandler+0x98>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a15      	ldr	r2, [pc, #84]	; (8002948 <USART2_IRQHandler+0x94>)
 80028f4:	7812      	ldrb	r2, [r2, #0]
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	4413      	add	r3, r2
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]
		gps_data_ready |= 1;
 80028fe:	4b15      	ldr	r3, [pc, #84]	; (8002954 <USART2_IRQHandler+0xa0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	4a13      	ldr	r2, [pc, #76]	; (8002954 <USART2_IRQHandler+0xa0>)
 8002908:	6013      	str	r3, [r2, #0]
		gps_send_ready ^= 1;
 800290a:	4b11      	ldr	r3, [pc, #68]	; (8002950 <USART2_IRQHandler+0x9c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f083 0301 	eor.w	r3, r3, #1
 8002912:	4a0f      	ldr	r2, [pc, #60]	; (8002950 <USART2_IRQHandler+0x9c>)
 8002914:	6013      	str	r3, [r2, #0]
		gps_rxBufferPos = 0;
 8002916:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <USART2_IRQHandler+0x94>)
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
		if (gps_rxBuffer == gps_rxBuffer1) {gps_rxBuffer = gps_rxBuffer2;}
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <USART2_IRQHandler+0x98>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a0d      	ldr	r2, [pc, #52]	; (8002958 <USART2_IRQHandler+0xa4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d103      	bne.n	800292e <USART2_IRQHandler+0x7a>
 8002926:	4b09      	ldr	r3, [pc, #36]	; (800294c <USART2_IRQHandler+0x98>)
 8002928:	4a0c      	ldr	r2, [pc, #48]	; (800295c <USART2_IRQHandler+0xa8>)
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	e002      	b.n	8002934 <USART2_IRQHandler+0x80>
		else {gps_rxBuffer = gps_rxBuffer1;}
 800292e:	4b07      	ldr	r3, [pc, #28]	; (800294c <USART2_IRQHandler+0x98>)
 8002930:	4a09      	ldr	r2, [pc, #36]	; (8002958 <USART2_IRQHandler+0xa4>)
 8002932:	601a      	str	r2, [r3, #0]

	//HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
	//rchar = huart2.Instance->RDR;

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002934:	4803      	ldr	r0, [pc, #12]	; (8002944 <USART2_IRQHandler+0x90>)
 8002936:	f008 fef5 	bl	800b724 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	//ATOMIC_SET_BIT(huart2.Instance->CR3, USART_CR3_EIE);
  /* USER CODE END USART2_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	200005e4 	.word	0x200005e4
 8002948:	20000d78 	.word	0x20000d78
 800294c:	20000d74 	.word	0x20000d74
 8002950:	20000008 	.word	0x20000008
 8002954:	20000d7c 	.word	0x20000d7c
 8002958:	20000734 	.word	0x20000734
 800295c:	20000a54 	.word	0x20000a54

08002960 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002964:	4802      	ldr	r0, [pc, #8]	; (8002970 <OTG_FS_IRQHandler+0x10>)
 8002966:	f001 f97c 	bl	8003c62 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20002274 	.word	0x20002274

08002974 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002978:	4b06      	ldr	r3, [pc, #24]	; (8002994 <SystemInit+0x20>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297e:	4a05      	ldr	r2, [pc, #20]	; (8002994 <SystemInit+0x20>)
 8002980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002988:	bf00      	nop
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800299c:	f7ff ffea 	bl	8002974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029a0:	480c      	ldr	r0, [pc, #48]	; (80029d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80029a2:	490d      	ldr	r1, [pc, #52]	; (80029d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029a4:	4a0d      	ldr	r2, [pc, #52]	; (80029dc <LoopForever+0xe>)
  movs r3, #0
 80029a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029a8:	e002      	b.n	80029b0 <LoopCopyDataInit>

080029aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ae:	3304      	adds	r3, #4

080029b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029b4:	d3f9      	bcc.n	80029aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029b6:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029b8:	4c0a      	ldr	r4, [pc, #40]	; (80029e4 <LoopForever+0x16>)
  movs r3, #0
 80029ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029bc:	e001      	b.n	80029c2 <LoopFillZerobss>

080029be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029c0:	3204      	adds	r2, #4

080029c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029c4:	d3fb      	bcc.n	80029be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029c6:	f00e fe05 	bl	80115d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029ca:	f7fe ffc1 	bl	8001950 <main>

080029ce <LoopForever>:

LoopForever:
    b LoopForever
 80029ce:	e7fe      	b.n	80029ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80029d0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80029d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029d8:	2000035c 	.word	0x2000035c
  ldr r2, =_sidata
 80029dc:	080146b0 	.word	0x080146b0
  ldr r2, =_sbss
 80029e0:	2000035c 	.word	0x2000035c
  ldr r4, =_ebss
 80029e4:	200029b4 	.word	0x200029b4

080029e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029e8:	e7fe      	b.n	80029e8 <ADC1_IRQHandler>

080029ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f4:	2003      	movs	r0, #3
 80029f6:	f000 f961 	bl	8002cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029fa:	200f      	movs	r0, #15
 80029fc:	f000 f80e 	bl	8002a1c <HAL_InitTick>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	71fb      	strb	r3, [r7, #7]
 8002a0a:	e001      	b.n	8002a10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a0c:	f7ff fc7e 	bl	800230c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a10:	79fb      	ldrb	r3, [r7, #7]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002a28:	4b17      	ldr	r3, [pc, #92]	; (8002a88 <HAL_InitTick+0x6c>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d023      	beq.n	8002a78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002a30:	4b16      	ldr	r3, [pc, #88]	; (8002a8c <HAL_InitTick+0x70>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <HAL_InitTick+0x6c>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 f96d 	bl	8002d26 <HAL_SYSTICK_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10f      	bne.n	8002a72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b0f      	cmp	r3, #15
 8002a56:	d809      	bhi.n	8002a6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a60:	f000 f937 	bl	8002cd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a64:	4a0a      	ldr	r2, [pc, #40]	; (8002a90 <HAL_InitTick+0x74>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	e007      	b.n	8002a7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	73fb      	strb	r3, [r7, #15]
 8002a70:	e004      	b.n	8002a7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	73fb      	strb	r3, [r7, #15]
 8002a76:	e001      	b.n	8002a7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20000014 	.word	0x20000014
 8002a8c:	2000000c 	.word	0x2000000c
 8002a90:	20000010 	.word	0x20000010

08002a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <HAL_IncTick+0x20>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_IncTick+0x24>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <HAL_IncTick+0x24>)
 8002aa6:	6013      	str	r3, [r2, #0]
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20000014 	.word	0x20000014
 8002ab8:	20000d84 	.word	0x20000d84

08002abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return uwTick;
 8002ac0:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <HAL_GetTick+0x14>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	20000d84 	.word	0x20000d84

08002ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002adc:	f7ff ffee 	bl	8002abc <HAL_GetTick>
 8002ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002aec:	d005      	beq.n	8002afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002aee:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <HAL_Delay+0x44>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4413      	add	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002afa:	bf00      	nop
 8002afc:	f7ff ffde 	bl	8002abc <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d8f7      	bhi.n	8002afc <HAL_Delay+0x28>
  {
  }
}
 8002b0c:	bf00      	nop
 8002b0e:	bf00      	nop
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20000014 	.word	0x20000014

08002b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <__NVIC_SetPriorityGrouping+0x44>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b38:	4013      	ands	r3, r2
 8002b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b4e:	4a04      	ldr	r2, [pc, #16]	; (8002b60 <__NVIC_SetPriorityGrouping+0x44>)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	60d3      	str	r3, [r2, #12]
}
 8002b54:	bf00      	nop
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b68:	4b04      	ldr	r3, [pc, #16]	; (8002b7c <__NVIC_GetPriorityGrouping+0x18>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	0a1b      	lsrs	r3, r3, #8
 8002b6e:	f003 0307 	and.w	r3, r3, #7
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	db0b      	blt.n	8002baa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	f003 021f 	and.w	r2, r3, #31
 8002b98:	4907      	ldr	r1, [pc, #28]	; (8002bb8 <__NVIC_EnableIRQ+0x38>)
 8002b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9e:	095b      	lsrs	r3, r3, #5
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	e000e100 	.word	0xe000e100

08002bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	6039      	str	r1, [r7, #0]
 8002bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	db0a      	blt.n	8002be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	490c      	ldr	r1, [pc, #48]	; (8002c08 <__NVIC_SetPriority+0x4c>)
 8002bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bda:	0112      	lsls	r2, r2, #4
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	440b      	add	r3, r1
 8002be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002be4:	e00a      	b.n	8002bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	4908      	ldr	r1, [pc, #32]	; (8002c0c <__NVIC_SetPriority+0x50>)
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	3b04      	subs	r3, #4
 8002bf4:	0112      	lsls	r2, r2, #4
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	761a      	strb	r2, [r3, #24]
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	e000e100 	.word	0xe000e100
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b089      	sub	sp, #36	; 0x24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f1c3 0307 	rsb	r3, r3, #7
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	bf28      	it	cs
 8002c2e:	2304      	movcs	r3, #4
 8002c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	3304      	adds	r3, #4
 8002c36:	2b06      	cmp	r3, #6
 8002c38:	d902      	bls.n	8002c40 <NVIC_EncodePriority+0x30>
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3b03      	subs	r3, #3
 8002c3e:	e000      	b.n	8002c42 <NVIC_EncodePriority+0x32>
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43da      	mvns	r2, r3
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	401a      	ands	r2, r3
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c62:	43d9      	mvns	r1, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c68:	4313      	orrs	r3, r2
         );
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3724      	adds	r7, #36	; 0x24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
	...

08002c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c88:	d301      	bcc.n	8002c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e00f      	b.n	8002cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c8e:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <SysTick_Config+0x40>)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c96:	210f      	movs	r1, #15
 8002c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c9c:	f7ff ff8e 	bl	8002bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <SysTick_Config+0x40>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ca6:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <SysTick_Config+0x40>)
 8002ca8:	2207      	movs	r2, #7
 8002caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	e000e010 	.word	0xe000e010

08002cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7ff ff29 	bl	8002b1c <__NVIC_SetPriorityGrouping>
}
 8002cca:	bf00      	nop
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b086      	sub	sp, #24
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	4603      	mov	r3, r0
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ce4:	f7ff ff3e 	bl	8002b64 <__NVIC_GetPriorityGrouping>
 8002ce8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	6978      	ldr	r0, [r7, #20]
 8002cf0:	f7ff ff8e 	bl	8002c10 <NVIC_EncodePriority>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff ff5d 	bl	8002bbc <__NVIC_SetPriority>
}
 8002d02:	bf00      	nop
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	4603      	mov	r3, r0
 8002d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ff31 	bl	8002b80 <__NVIC_EnableIRQ>
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff ffa2 	bl	8002c78 <SysTick_Config>
 8002d34:	4603      	mov	r3, r0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e08d      	b.n	8002e6e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	4b47      	ldr	r3, [pc, #284]	; (8002e78 <HAL_DMA_Init+0x138>)
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d80f      	bhi.n	8002d7e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	4b45      	ldr	r3, [pc, #276]	; (8002e7c <HAL_DMA_Init+0x13c>)
 8002d66:	4413      	add	r3, r2
 8002d68:	4a45      	ldr	r2, [pc, #276]	; (8002e80 <HAL_DMA_Init+0x140>)
 8002d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6e:	091b      	lsrs	r3, r3, #4
 8002d70:	009a      	lsls	r2, r3, #2
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a42      	ldr	r2, [pc, #264]	; (8002e84 <HAL_DMA_Init+0x144>)
 8002d7a:	641a      	str	r2, [r3, #64]	; 0x40
 8002d7c:	e00e      	b.n	8002d9c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	4b40      	ldr	r3, [pc, #256]	; (8002e88 <HAL_DMA_Init+0x148>)
 8002d86:	4413      	add	r3, r2
 8002d88:	4a3d      	ldr	r2, [pc, #244]	; (8002e80 <HAL_DMA_Init+0x140>)
 8002d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8e:	091b      	lsrs	r3, r3, #4
 8002d90:	009a      	lsls	r2, r3, #2
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a3c      	ldr	r2, [pc, #240]	; (8002e8c <HAL_DMA_Init+0x14c>)
 8002d9a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 fa72 	bl	80032d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dfc:	d102      	bne.n	8002e04 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e18:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d010      	beq.n	8002e44 <HAL_DMA_Init+0x104>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d80c      	bhi.n	8002e44 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fa92 	bl	8003354 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	e008      	b.n	8002e56 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40020407 	.word	0x40020407
 8002e7c:	bffdfff8 	.word	0xbffdfff8
 8002e80:	cccccccd 	.word	0xcccccccd
 8002e84:	40020000 	.word	0x40020000
 8002e88:	bffdfbf8 	.word	0xbffdfbf8
 8002e8c:	40020400 	.word	0x40020400

08002e90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
 8002e9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <HAL_DMA_Start_IT+0x20>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e066      	b.n	8002f7e <HAL_DMA_Start_IT+0xee>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d155      	bne.n	8002f70 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0201 	bic.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	68b9      	ldr	r1, [r7, #8]
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 f9b6 	bl	800325a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d008      	beq.n	8002f08 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f042 020e 	orr.w	r2, r2, #14
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	e00f      	b.n	8002f28 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0204 	bic.w	r2, r2, #4
 8002f16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 020a 	orr.w	r2, r2, #10
 8002f26:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d007      	beq.n	8002f46 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f44:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d007      	beq.n	8002f5e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f5c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 0201 	orr.w	r2, r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	e005      	b.n	8002f7c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b085      	sub	sp, #20
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d008      	beq.n	8002fb0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e040      	b.n	8003032 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 020e 	bic.w	r2, r2, #14
 8002fbe:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fce:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0201 	bic.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe4:	f003 021c 	and.w	r2, r3, #28
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	2101      	movs	r1, #1
 8002fee:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff2:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ffc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00c      	beq.n	8003020 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003010:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003014:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800301e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003030:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003032:	4618      	mov	r0, r3
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b084      	sub	sp, #16
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d005      	beq.n	8003062 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2204      	movs	r2, #4
 800305a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
 8003060:	e047      	b.n	80030f2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 020e 	bic.w	r2, r2, #14
 8003070:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0201 	bic.w	r2, r2, #1
 8003080:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800308c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003090:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003096:	f003 021c 	and.w	r2, r3, #28
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	2101      	movs	r1, #1
 80030a0:	fa01 f202 	lsl.w	r2, r1, r2
 80030a4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030ae:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00c      	beq.n	80030d2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80030d0:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	4798      	blx	r3
    }
  }
  return status;
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003118:	f003 031c 	and.w	r3, r3, #28
 800311c:	2204      	movs	r2, #4
 800311e:	409a      	lsls	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4013      	ands	r3, r2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d026      	beq.n	8003176 <HAL_DMA_IRQHandler+0x7a>
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b00      	cmp	r3, #0
 8003130:	d021      	beq.n	8003176 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0320 	and.w	r3, r3, #32
 800313c:	2b00      	cmp	r3, #0
 800313e:	d107      	bne.n	8003150 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0204 	bic.w	r2, r2, #4
 800314e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003154:	f003 021c 	and.w	r2, r3, #28
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	2104      	movs	r1, #4
 800315e:	fa01 f202 	lsl.w	r2, r1, r2
 8003162:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	2b00      	cmp	r3, #0
 800316a:	d071      	beq.n	8003250 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003174:	e06c      	b.n	8003250 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317a:	f003 031c 	and.w	r3, r3, #28
 800317e:	2202      	movs	r2, #2
 8003180:	409a      	lsls	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4013      	ands	r3, r2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d02e      	beq.n	80031e8 <HAL_DMA_IRQHandler+0xec>
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d029      	beq.n	80031e8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0320 	and.w	r3, r3, #32
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10b      	bne.n	80031ba <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 020a 	bic.w	r2, r2, #10
 80031b0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031be:	f003 021c 	and.w	r2, r3, #28
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	2102      	movs	r1, #2
 80031c8:	fa01 f202 	lsl.w	r2, r1, r2
 80031cc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d038      	beq.n	8003250 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80031e6:	e033      	b.n	8003250 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ec:	f003 031c 	and.w	r3, r3, #28
 80031f0:	2208      	movs	r2, #8
 80031f2:	409a      	lsls	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d02a      	beq.n	8003252 <HAL_DMA_IRQHandler+0x156>
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d025      	beq.n	8003252 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 020e 	bic.w	r2, r2, #14
 8003214:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321a:	f003 021c 	and.w	r2, r3, #28
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	2101      	movs	r1, #1
 8003224:	fa01 f202 	lsl.w	r2, r1, r2
 8003228:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003244:	2b00      	cmp	r3, #0
 8003246:	d004      	beq.n	8003252 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003250:	bf00      	nop
 8003252:	bf00      	nop
}
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800325a:	b480      	push	{r7}
 800325c:	b085      	sub	sp, #20
 800325e:	af00      	add	r7, sp, #0
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	607a      	str	r2, [r7, #4]
 8003266:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003270:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003276:	2b00      	cmp	r3, #0
 8003278:	d004      	beq.n	8003284 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003282:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003288:	f003 021c 	and.w	r2, r3, #28
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	2101      	movs	r1, #1
 8003292:	fa01 f202 	lsl.w	r2, r1, r2
 8003296:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2b10      	cmp	r3, #16
 80032a6:	d108      	bne.n	80032ba <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032b8:	e007      	b.n	80032ca <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	60da      	str	r2, [r3, #12]
}
 80032ca:	bf00      	nop
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
	...

080032d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	461a      	mov	r2, r3
 80032e6:	4b17      	ldr	r3, [pc, #92]	; (8003344 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d80a      	bhi.n	8003302 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f0:	089b      	lsrs	r3, r3, #2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032f8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6493      	str	r3, [r2, #72]	; 0x48
 8003300:	e007      	b.n	8003312 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003306:	089b      	lsrs	r3, r3, #2
 8003308:	009a      	lsls	r2, r3, #2
 800330a:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800330c:	4413      	add	r3, r2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	b2db      	uxtb	r3, r3
 8003318:	3b08      	subs	r3, #8
 800331a:	4a0c      	ldr	r2, [pc, #48]	; (800334c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800331c:	fba2 2303 	umull	r2, r3, r2, r3
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a0a      	ldr	r2, [pc, #40]	; (8003350 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003328:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f003 031f 	and.w	r3, r3, #31
 8003330:	2201      	movs	r2, #1
 8003332:	409a      	lsls	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003338:	bf00      	nop
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	40020407 	.word	0x40020407
 8003348:	4002081c 	.word	0x4002081c
 800334c:	cccccccd 	.word	0xcccccccd
 8003350:	40020880 	.word	0x40020880

08003354 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003368:	4413      	add	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	461a      	mov	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a08      	ldr	r2, [pc, #32]	; (8003398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003376:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	3b01      	subs	r3, #1
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	2201      	movs	r2, #1
 8003382:	409a      	lsls	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003388:	bf00      	nop
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	1000823f 	.word	0x1000823f
 8003398:	40020940 	.word	0x40020940

0800339c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800339c:	b480      	push	{r7}
 800339e:	b087      	sub	sp, #28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033aa:	e166      	b.n	800367a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	2101      	movs	r1, #1
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	fa01 f303 	lsl.w	r3, r1, r3
 80033b8:	4013      	ands	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 8158 	beq.w	8003674 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f003 0303 	and.w	r3, r3, #3
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d005      	beq.n	80033dc <HAL_GPIO_Init+0x40>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d130      	bne.n	800343e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	2203      	movs	r2, #3
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4013      	ands	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4313      	orrs	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003412:	2201      	movs	r2, #1
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43db      	mvns	r3, r3
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	4013      	ands	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	091b      	lsrs	r3, r3, #4
 8003428:	f003 0201 	and.w	r2, r3, #1
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	2b03      	cmp	r3, #3
 8003448:	d017      	beq.n	800347a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	2203      	movs	r2, #3
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43db      	mvns	r3, r3
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4013      	ands	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d123      	bne.n	80034ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	08da      	lsrs	r2, r3, #3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3208      	adds	r2, #8
 800348e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003492:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	220f      	movs	r2, #15
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	43db      	mvns	r3, r3
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4013      	ands	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	691a      	ldr	r2, [r3, #16]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	08da      	lsrs	r2, r3, #3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3208      	adds	r2, #8
 80034c8:	6939      	ldr	r1, [r7, #16]
 80034ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	2203      	movs	r2, #3
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43db      	mvns	r3, r3
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	4013      	ands	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 0203 	and.w	r2, r3, #3
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 80b2 	beq.w	8003674 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003510:	4b61      	ldr	r3, [pc, #388]	; (8003698 <HAL_GPIO_Init+0x2fc>)
 8003512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003514:	4a60      	ldr	r2, [pc, #384]	; (8003698 <HAL_GPIO_Init+0x2fc>)
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	6613      	str	r3, [r2, #96]	; 0x60
 800351c:	4b5e      	ldr	r3, [pc, #376]	; (8003698 <HAL_GPIO_Init+0x2fc>)
 800351e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003528:	4a5c      	ldr	r2, [pc, #368]	; (800369c <HAL_GPIO_Init+0x300>)
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	089b      	lsrs	r3, r3, #2
 800352e:	3302      	adds	r3, #2
 8003530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003534:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	220f      	movs	r2, #15
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4013      	ands	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003552:	d02b      	beq.n	80035ac <HAL_GPIO_Init+0x210>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a52      	ldr	r2, [pc, #328]	; (80036a0 <HAL_GPIO_Init+0x304>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d025      	beq.n	80035a8 <HAL_GPIO_Init+0x20c>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a51      	ldr	r2, [pc, #324]	; (80036a4 <HAL_GPIO_Init+0x308>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d01f      	beq.n	80035a4 <HAL_GPIO_Init+0x208>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a50      	ldr	r2, [pc, #320]	; (80036a8 <HAL_GPIO_Init+0x30c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d019      	beq.n	80035a0 <HAL_GPIO_Init+0x204>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a4f      	ldr	r2, [pc, #316]	; (80036ac <HAL_GPIO_Init+0x310>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d013      	beq.n	800359c <HAL_GPIO_Init+0x200>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a4e      	ldr	r2, [pc, #312]	; (80036b0 <HAL_GPIO_Init+0x314>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00d      	beq.n	8003598 <HAL_GPIO_Init+0x1fc>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a4d      	ldr	r2, [pc, #308]	; (80036b4 <HAL_GPIO_Init+0x318>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d007      	beq.n	8003594 <HAL_GPIO_Init+0x1f8>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a4c      	ldr	r2, [pc, #304]	; (80036b8 <HAL_GPIO_Init+0x31c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d101      	bne.n	8003590 <HAL_GPIO_Init+0x1f4>
 800358c:	2307      	movs	r3, #7
 800358e:	e00e      	b.n	80035ae <HAL_GPIO_Init+0x212>
 8003590:	2308      	movs	r3, #8
 8003592:	e00c      	b.n	80035ae <HAL_GPIO_Init+0x212>
 8003594:	2306      	movs	r3, #6
 8003596:	e00a      	b.n	80035ae <HAL_GPIO_Init+0x212>
 8003598:	2305      	movs	r3, #5
 800359a:	e008      	b.n	80035ae <HAL_GPIO_Init+0x212>
 800359c:	2304      	movs	r3, #4
 800359e:	e006      	b.n	80035ae <HAL_GPIO_Init+0x212>
 80035a0:	2303      	movs	r3, #3
 80035a2:	e004      	b.n	80035ae <HAL_GPIO_Init+0x212>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e002      	b.n	80035ae <HAL_GPIO_Init+0x212>
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <HAL_GPIO_Init+0x212>
 80035ac:	2300      	movs	r3, #0
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	f002 0203 	and.w	r2, r2, #3
 80035b4:	0092      	lsls	r2, r2, #2
 80035b6:	4093      	lsls	r3, r2
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035be:	4937      	ldr	r1, [pc, #220]	; (800369c <HAL_GPIO_Init+0x300>)
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	089b      	lsrs	r3, r3, #2
 80035c4:	3302      	adds	r3, #2
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035cc:	4b3b      	ldr	r3, [pc, #236]	; (80036bc <HAL_GPIO_Init+0x320>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	43db      	mvns	r3, r3
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4013      	ands	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035f0:	4a32      	ldr	r2, [pc, #200]	; (80036bc <HAL_GPIO_Init+0x320>)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035f6:	4b31      	ldr	r3, [pc, #196]	; (80036bc <HAL_GPIO_Init+0x320>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	43db      	mvns	r3, r3
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4013      	ands	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800361a:	4a28      	ldr	r2, [pc, #160]	; (80036bc <HAL_GPIO_Init+0x320>)
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003620:	4b26      	ldr	r3, [pc, #152]	; (80036bc <HAL_GPIO_Init+0x320>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	43db      	mvns	r3, r3
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4013      	ands	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003644:	4a1d      	ldr	r2, [pc, #116]	; (80036bc <HAL_GPIO_Init+0x320>)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800364a:	4b1c      	ldr	r3, [pc, #112]	; (80036bc <HAL_GPIO_Init+0x320>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	43db      	mvns	r3, r3
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4013      	ands	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800366e:	4a13      	ldr	r2, [pc, #76]	; (80036bc <HAL_GPIO_Init+0x320>)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	3301      	adds	r3, #1
 8003678:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	f47f ae91 	bne.w	80033ac <HAL_GPIO_Init+0x10>
  }
}
 800368a:	bf00      	nop
 800368c:	bf00      	nop
 800368e:	371c      	adds	r7, #28
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	40021000 	.word	0x40021000
 800369c:	40010000 	.word	0x40010000
 80036a0:	48000400 	.word	0x48000400
 80036a4:	48000800 	.word	0x48000800
 80036a8:	48000c00 	.word	0x48000c00
 80036ac:	48001000 	.word	0x48001000
 80036b0:	48001400 	.word	0x48001400
 80036b4:	48001800 	.word	0x48001800
 80036b8:	48001c00 	.word	0x48001c00
 80036bc:	40010400 	.word	0x40010400

080036c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	887b      	ldrh	r3, [r7, #2]
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036d8:	2301      	movs	r3, #1
 80036da:	73fb      	strb	r3, [r7, #15]
 80036dc:	e001      	b.n	80036e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036de:	2300      	movs	r3, #0
 80036e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	807b      	strh	r3, [r7, #2]
 80036fc:	4613      	mov	r3, r2
 80036fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003700:	787b      	ldrb	r3, [r7, #1]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003706:	887a      	ldrh	r2, [r7, #2]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800370c:	e002      	b.n	8003714 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800370e:	887a      	ldrh	r2, [r7, #2]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003732:	887a      	ldrh	r2, [r7, #2]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4013      	ands	r3, r2
 8003738:	041a      	lsls	r2, r3, #16
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	43d9      	mvns	r1, r3
 800373e:	887b      	ldrh	r3, [r7, #2]
 8003740:	400b      	ands	r3, r1
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	619a      	str	r2, [r3, #24]
}
 8003748:	bf00      	nop
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e081      	b.n	800386a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fe fdea 	bl	8002354 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2224      	movs	r2, #36	; 0x24
 8003784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0201 	bic.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d107      	bne.n	80037ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037ca:	609a      	str	r2, [r3, #8]
 80037cc:	e006      	b.n	80037dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80037da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d104      	bne.n	80037ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6812      	ldr	r2, [r2, #0]
 80037f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003800:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003810:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691a      	ldr	r2, [r3, #16]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69d9      	ldr	r1, [r3, #28]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1a      	ldr	r2, [r3, #32]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0201 	orr.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003880:	b2db      	uxtb	r3, r3
}
 8003882:	4618      	mov	r0, r3
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	d138      	bne.n	8003916 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e032      	b.n	8003918 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2224      	movs	r2, #36	; 0x24
 80038be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0201 	bic.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038e0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6819      	ldr	r1, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f042 0201 	orr.w	r2, r2, #1
 8003900:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	e000      	b.n	8003918 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003916:	2302      	movs	r3, #2
  }
}
 8003918:	4618      	mov	r0, r3
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b20      	cmp	r3, #32
 8003938:	d139      	bne.n	80039ae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003944:	2302      	movs	r3, #2
 8003946:	e033      	b.n	80039b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2224      	movs	r2, #36	; 0x24
 8003954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0201 	bic.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003976:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f042 0201 	orr.w	r2, r2, #1
 8003998:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2220      	movs	r2, #32
 800399e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	e000      	b.n	80039b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039ae:	2302      	movs	r3, #2
  }
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039be:	b08f      	sub	sp, #60	; 0x3c
 80039c0:	af0a      	add	r7, sp, #40	; 0x28
 80039c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e116      	b.n	8003bfc <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d106      	bne.n	80039ee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f00d fa0f 	bl	8010e0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2203      	movs	r2, #3
 80039f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d102      	bne.n	8003a08 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f009 fefa 	bl	800d806 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	687e      	ldr	r6, [r7, #4]
 8003a1a:	466d      	mov	r5, sp
 8003a1c:	f106 0410 	add.w	r4, r6, #16
 8003a20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a30:	1d33      	adds	r3, r6, #4
 8003a32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a34:	6838      	ldr	r0, [r7, #0]
 8003a36:	f009 fe0d 	bl	800d654 <USB_CoreInit>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0d7      	b.n	8003bfc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2100      	movs	r1, #0
 8003a52:	4618      	mov	r0, r3
 8003a54:	f009 fee8 	bl	800d828 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a58:	2300      	movs	r3, #0
 8003a5a:	73fb      	strb	r3, [r7, #15]
 8003a5c:	e04a      	b.n	8003af4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a5e:	7bfa      	ldrb	r2, [r7, #15]
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	4413      	add	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	333d      	adds	r3, #61	; 0x3d
 8003a6e:	2201      	movs	r2, #1
 8003a70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a72:	7bfa      	ldrb	r2, [r7, #15]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	333c      	adds	r3, #60	; 0x3c
 8003a82:	7bfa      	ldrb	r2, [r7, #15]
 8003a84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a86:	7bfa      	ldrb	r2, [r7, #15]
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	b298      	uxth	r0, r3
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	3344      	adds	r3, #68	; 0x44
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a9e:	7bfa      	ldrb	r2, [r7, #15]
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	3340      	adds	r3, #64	; 0x40
 8003aae:	2200      	movs	r2, #0
 8003ab0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ab2:	7bfa      	ldrb	r2, [r7, #15]
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	3348      	adds	r3, #72	; 0x48
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ac6:	7bfa      	ldrb	r2, [r7, #15]
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	334c      	adds	r3, #76	; 0x4c
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ada:	7bfa      	ldrb	r2, [r7, #15]
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	3354      	adds	r3, #84	; 0x54
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
 8003af0:	3301      	adds	r3, #1
 8003af2:	73fb      	strb	r3, [r7, #15]
 8003af4:	7bfa      	ldrb	r2, [r7, #15]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d3af      	bcc.n	8003a5e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003afe:	2300      	movs	r3, #0
 8003b00:	73fb      	strb	r3, [r7, #15]
 8003b02:	e044      	b.n	8003b8e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b04:	7bfa      	ldrb	r2, [r7, #15]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003b16:	2200      	movs	r2, #0
 8003b18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b1a:	7bfa      	ldrb	r2, [r7, #15]
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	4413      	add	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003b2c:	7bfa      	ldrb	r2, [r7, #15]
 8003b2e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b30:	7bfa      	ldrb	r2, [r7, #15]
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	4613      	mov	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b46:	7bfa      	ldrb	r2, [r7, #15]
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b5c:	7bfa      	ldrb	r2, [r7, #15]
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	4613      	mov	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b72:	7bfa      	ldrb	r2, [r7, #15]
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	4413      	add	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	73fb      	strb	r3, [r7, #15]
 8003b8e:	7bfa      	ldrb	r2, [r7, #15]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d3b5      	bcc.n	8003b04 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	603b      	str	r3, [r7, #0]
 8003b9e:	687e      	ldr	r6, [r7, #4]
 8003ba0:	466d      	mov	r5, sp
 8003ba2:	f106 0410 	add.w	r4, r6, #16
 8003ba6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ba8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003baa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bb6:	1d33      	adds	r3, r6, #4
 8003bb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bba:	6838      	ldr	r0, [r7, #0]
 8003bbc:	f009 fe80 	bl	800d8c0 <USB_DevInit>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d005      	beq.n	8003bd2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2202      	movs	r2, #2
 8003bca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e014      	b.n	8003bfc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d102      	bne.n	8003bf0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f001 f882 	bl	8004cf4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f00a ff08 	bl	800ea0a <USB_DevDisconnect>

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c04 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_PCD_Start+0x1c>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e01c      	b.n	8003c5a <HAL_PCD_Start+0x56>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d105      	bne.n	8003c3c <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c34:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f009 fdcf 	bl	800d7e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f00a febc 	bl	800e9c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c62:	b590      	push	{r4, r7, lr}
 8003c64:	b08d      	sub	sp, #52	; 0x34
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f00a ff7a 	bl	800eb72 <USB_GetMode>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f040 847e 	bne.w	8004582 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f00a fede 	bl	800ea4c <USB_ReadInterrupts>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 8474 	beq.w	8004580 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	0a1b      	lsrs	r3, r3, #8
 8003ca2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f00a fecb 	bl	800ea4c <USB_ReadInterrupts>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d107      	bne.n	8003cd0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695a      	ldr	r2, [r3, #20]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f002 0202 	and.w	r2, r2, #2
 8003cce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f00a feb9 	bl	800ea4c <USB_ReadInterrupts>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	2b10      	cmp	r3, #16
 8003ce2:	d161      	bne.n	8003da8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699a      	ldr	r2, [r3, #24]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0210 	bic.w	r2, r2, #16
 8003cf2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	f003 020f 	and.w	r2, r3, #15
 8003d00:	4613      	mov	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	4413      	add	r3, r2
 8003d10:	3304      	adds	r3, #4
 8003d12:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	0c5b      	lsrs	r3, r3, #17
 8003d18:	f003 030f 	and.w	r3, r3, #15
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d124      	bne.n	8003d6a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003d26:	4013      	ands	r3, r2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d035      	beq.n	8003d98 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	091b      	lsrs	r3, r3, #4
 8003d34:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	6a38      	ldr	r0, [r7, #32]
 8003d40:	f00a fcf0 	bl	800e724 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	691a      	ldr	r2, [r3, #16]
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d50:	441a      	add	r2, r3
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	6a1a      	ldr	r2, [r3, #32]
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	091b      	lsrs	r3, r3, #4
 8003d5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d62:	441a      	add	r2, r3
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	621a      	str	r2, [r3, #32]
 8003d68:	e016      	b.n	8003d98 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	0c5b      	lsrs	r3, r3, #17
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	2b06      	cmp	r3, #6
 8003d74:	d110      	bne.n	8003d98 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d7c:	2208      	movs	r2, #8
 8003d7e:	4619      	mov	r1, r3
 8003d80:	6a38      	ldr	r0, [r7, #32]
 8003d82:	f00a fccf 	bl	800e724 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	6a1a      	ldr	r2, [r3, #32]
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d92:	441a      	add	r2, r3
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699a      	ldr	r2, [r3, #24]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0210 	orr.w	r2, r2, #16
 8003da6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f00a fe4d 	bl	800ea4c <USB_ReadInterrupts>
 8003db2:	4603      	mov	r3, r0
 8003db4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003db8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003dbc:	f040 80a7 	bne.w	8003f0e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f00a fe52 	bl	800ea72 <USB_ReadDevAllOutEpInterrupt>
 8003dce:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003dd0:	e099      	b.n	8003f06 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 808e 	beq.w	8003efa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	4611      	mov	r1, r2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f00a fe76 	bl	800eada <USB_ReadDevOutEPInterrupt>
 8003dee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00c      	beq.n	8003e14 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	015a      	lsls	r2, r3, #5
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	4413      	add	r3, r2
 8003e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e06:	461a      	mov	r2, r3
 8003e08:	2301      	movs	r3, #1
 8003e0a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003e0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fe96 	bl	8004b40 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00c      	beq.n	8003e38 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2308      	movs	r3, #8
 8003e2e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003e30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fed2 	bl	8004bdc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f003 0310 	and.w	r3, r3, #16
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d008      	beq.n	8003e54 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4e:	461a      	mov	r2, r3
 8003e50:	2310      	movs	r3, #16
 8003e52:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d030      	beq.n	8003ec0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e66:	2b80      	cmp	r3, #128	; 0x80
 8003e68:	d109      	bne.n	8003e7e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	69fa      	ldr	r2, [r7, #28]
 8003e74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e7c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e80:	4613      	mov	r3, r2
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	4413      	add	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	4413      	add	r3, r2
 8003e90:	3304      	adds	r3, #4
 8003e92:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	78db      	ldrb	r3, [r3, #3]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d108      	bne.n	8003eae <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f00d f8f3 	bl	8011094 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eba:	461a      	mov	r2, r3
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d008      	beq.n	8003edc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	2320      	movs	r3, #32
 8003eda:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d009      	beq.n	8003efa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ef8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	3301      	adds	r3, #1
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f02:	085b      	lsrs	r3, r3, #1
 8003f04:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f47f af62 	bne.w	8003dd2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f00a fd9a 	bl	800ea4c <USB_ReadInterrupts>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f22:	f040 80a4 	bne.w	800406e <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f00a fdbb 	bl	800eaa6 <USB_ReadDevAllInEpInterrupt>
 8003f30:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003f36:	e096      	b.n	8004066 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 808b 	beq.w	800405a <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	4611      	mov	r1, r2
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f00a fde1 	bl	800eb16 <USB_ReadDevInEPInterrupt>
 8003f54:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d020      	beq.n	8003fa2 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	2201      	movs	r2, #1
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	69f9      	ldr	r1, [r7, #28]
 8003f7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f80:	4013      	ands	r3, r2
 8003f82:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f90:	461a      	mov	r2, r3
 8003f92:	2301      	movs	r3, #1
 8003f94:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f00c ffe4 	bl	8010f6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb8:	461a      	mov	r2, r3
 8003fba:	2308      	movs	r3, #8
 8003fbc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f003 0310 	and.w	r3, r3, #16
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d008      	beq.n	8003fda <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	2310      	movs	r3, #16
 8003fd8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	2340      	movs	r3, #64	; 0x40
 8003ff4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d023      	beq.n	8004048 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004000:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004002:	6a38      	ldr	r0, [r7, #32]
 8004004:	f009 fda8 	bl	800db58 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800400a:	4613      	mov	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	4413      	add	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	3338      	adds	r3, #56	; 0x38
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	4413      	add	r3, r2
 8004018:	3304      	adds	r3, #4
 800401a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	78db      	ldrb	r3, [r3, #3]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d108      	bne.n	8004036 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	2200      	movs	r2, #0
 8004028:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	b2db      	uxtb	r3, r3
 800402e:	4619      	mov	r1, r3
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f00d f841 	bl	80110b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	015a      	lsls	r2, r3, #5
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	4413      	add	r3, r2
 800403e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004042:	461a      	mov	r2, r3
 8004044:	2302      	movs	r3, #2
 8004046:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004052:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 fcea 	bl	8004a2e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	3301      	adds	r3, #1
 800405e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004062:	085b      	lsrs	r3, r3, #1
 8004064:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004068:	2b00      	cmp	r3, #0
 800406a:	f47f af65 	bne.w	8003f38 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f00a fcea 	bl	800ea4c <USB_ReadInterrupts>
 8004078:	4603      	mov	r3, r0
 800407a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800407e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004082:	d122      	bne.n	80040ca <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	69fa      	ldr	r2, [r7, #28]
 800408e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004092:	f023 0301 	bic.w	r3, r3, #1
 8004096:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d108      	bne.n	80040b4 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040aa:	2100      	movs	r1, #0
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 fe45 	bl	8004d3c <HAL_PCDEx_LPM_Callback>
 80040b2:	e002      	b.n	80040ba <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f00c ffc5 	bl	8011044 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695a      	ldr	r2, [r3, #20]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80040c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f00a fcbc 	bl	800ea4c <USB_ReadInterrupts>
 80040d4:	4603      	mov	r3, r0
 80040d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040de:	d112      	bne.n	8004106 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d102      	bne.n	80040f6 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f00c ff81 	bl	8010ff8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695a      	ldr	r2, [r3, #20]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004104:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f00a fc9e 	bl	800ea4c <USB_ReadInterrupts>
 8004110:	4603      	mov	r3, r0
 8004112:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004116:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800411a:	d121      	bne.n	8004160 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695a      	ldr	r2, [r3, #20]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800412a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004132:	2b00      	cmp	r3, #0
 8004134:	d111      	bne.n	800415a <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004144:	089b      	lsrs	r3, r3, #2
 8004146:	f003 020f 	and.w	r2, r3, #15
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004150:	2101      	movs	r1, #1
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fdf2 	bl	8004d3c <HAL_PCDEx_LPM_Callback>
 8004158:	e002      	b.n	8004160 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f00c ff4c 	bl	8010ff8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4618      	mov	r0, r3
 8004166:	f00a fc71 	bl	800ea4c <USB_ReadInterrupts>
 800416a:	4603      	mov	r3, r0
 800416c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004174:	f040 80b5 	bne.w	80042e2 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	69fa      	ldr	r2, [r7, #28]
 8004182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004186:	f023 0301 	bic.w	r3, r3, #1
 800418a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2110      	movs	r1, #16
 8004192:	4618      	mov	r0, r3
 8004194:	f009 fce0 	bl	800db58 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004198:	2300      	movs	r3, #0
 800419a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800419c:	e046      	b.n	800422c <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800419e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a0:	015a      	lsls	r2, r3, #5
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041aa:	461a      	mov	r2, r3
 80041ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041b0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80041b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b4:	015a      	lsls	r2, r3, #5
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	4413      	add	r3, r2
 80041ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041c2:	0151      	lsls	r1, r2, #5
 80041c4:	69fa      	ldr	r2, [r7, #28]
 80041c6:	440a      	add	r2, r1
 80041c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80041d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041de:	461a      	mov	r2, r3
 80041e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041e4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041f6:	0151      	lsls	r1, r2, #5
 80041f8:	69fa      	ldr	r2, [r7, #28]
 80041fa:	440a      	add	r2, r1
 80041fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004200:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004204:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004216:	0151      	lsls	r1, r2, #5
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	440a      	add	r2, r1
 800421c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004220:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004224:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004228:	3301      	adds	r3, #1
 800422a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004232:	429a      	cmp	r2, r3
 8004234:	d3b3      	bcc.n	800419e <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004244:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004248:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424e:	2b00      	cmp	r3, #0
 8004250:	d016      	beq.n	8004280 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800425c:	69fa      	ldr	r2, [r7, #28]
 800425e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004262:	f043 030b 	orr.w	r3, r3, #11
 8004266:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004272:	69fa      	ldr	r2, [r7, #28]
 8004274:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004278:	f043 030b 	orr.w	r3, r3, #11
 800427c:	6453      	str	r3, [r2, #68]	; 0x44
 800427e:	e015      	b.n	80042ac <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800428e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004292:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004296:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	69fa      	ldr	r2, [r7, #28]
 80042a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042a6:	f043 030b 	orr.w	r3, r3, #11
 80042aa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80042be:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042ca:	4619      	mov	r1, r3
 80042cc:	4610      	mov	r0, r2
 80042ce:	f00a fc81 	bl	800ebd4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695a      	ldr	r2, [r3, #20]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80042e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f00a fbb0 	bl	800ea4c <USB_ReadInterrupts>
 80042ec:	4603      	mov	r3, r0
 80042ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f6:	d124      	bne.n	8004342 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f00a fc46 	bl	800eb8e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f009 fca3 	bl	800dc52 <USB_GetDevSpeed>
 800430c:	4603      	mov	r3, r0
 800430e:	461a      	mov	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681c      	ldr	r4, [r3, #0]
 8004318:	f001 fbd0 	bl	8005abc <HAL_RCC_GetHCLKFreq>
 800431c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004322:	b2db      	uxtb	r3, r3
 8004324:	461a      	mov	r2, r3
 8004326:	4620      	mov	r0, r4
 8004328:	f009 f9c0 	bl	800d6ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f00c fe44 	bl	8010fba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695a      	ldr	r2, [r3, #20]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004340:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4618      	mov	r0, r3
 8004348:	f00a fb80 	bl	800ea4c <USB_ReadInterrupts>
 800434c:	4603      	mov	r3, r0
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b08      	cmp	r3, #8
 8004354:	d10a      	bne.n	800436c <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f00c fe21 	bl	8010f9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f002 0208 	and.w	r2, r2, #8
 800436a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f00a fb6b 	bl	800ea4c <USB_ReadInterrupts>
 8004376:	4603      	mov	r3, r0
 8004378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437c:	2b80      	cmp	r3, #128	; 0x80
 800437e:	d122      	bne.n	80043c6 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800438c:	2301      	movs	r3, #1
 800438e:	627b      	str	r3, [r7, #36]	; 0x24
 8004390:	e014      	b.n	80043bc <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004396:	4613      	mov	r3, r2
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	4413      	add	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	440b      	add	r3, r1
 80043a0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d105      	bne.n	80043b6 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	4619      	mov	r1, r3
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fb0b 	bl	80049cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	3301      	adds	r3, #1
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d3e5      	bcc.n	8004392 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f00a fb3e 	bl	800ea4c <USB_ReadInterrupts>
 80043d0:	4603      	mov	r3, r0
 80043d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043da:	d13b      	bne.n	8004454 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043dc:	2301      	movs	r3, #1
 80043de:	627b      	str	r3, [r7, #36]	; 0x24
 80043e0:	e02b      	b.n	800443a <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f6:	4613      	mov	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	3340      	adds	r3, #64	; 0x40
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d115      	bne.n	8004434 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004408:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800440a:	2b00      	cmp	r3, #0
 800440c:	da12      	bge.n	8004434 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004412:	4613      	mov	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	4413      	add	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	440b      	add	r3, r1
 800441c:	333f      	adds	r3, #63	; 0x3f
 800441e:	2201      	movs	r2, #1
 8004420:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	b2db      	uxtb	r3, r3
 8004426:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800442a:	b2db      	uxtb	r3, r3
 800442c:	4619      	mov	r1, r3
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 facc 	bl	80049cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	3301      	adds	r3, #1
 8004438:	627b      	str	r3, [r7, #36]	; 0x24
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004440:	429a      	cmp	r2, r3
 8004442:	d3ce      	bcc.n	80043e2 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695a      	ldr	r2, [r3, #20]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004452:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4618      	mov	r0, r3
 800445a:	f00a faf7 	bl	800ea4c <USB_ReadInterrupts>
 800445e:	4603      	mov	r3, r0
 8004460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004464:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004468:	d155      	bne.n	8004516 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800446a:	2301      	movs	r3, #1
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
 800446e:	e045      	b.n	80044fc <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	4413      	add	r3, r2
 8004478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004480:	6879      	ldr	r1, [r7, #4]
 8004482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004484:	4613      	mov	r3, r2
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	440b      	add	r3, r1
 800448e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d12e      	bne.n	80044f6 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004498:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800449a:	2b00      	cmp	r3, #0
 800449c:	da2b      	bge.n	80044f6 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80044aa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d121      	bne.n	80044f6 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b6:	4613      	mov	r3, r2
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	4413      	add	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	440b      	add	r3, r1
 80044c0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80044c4:	2201      	movs	r2, #1
 80044c6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10a      	bne.n	80044f6 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	69fa      	ldr	r2, [r7, #28]
 80044ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044f2:	6053      	str	r3, [r2, #4]
            break;
 80044f4:	e007      	b.n	8004506 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	3301      	adds	r3, #1
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004502:	429a      	cmp	r2, r3
 8004504:	d3b4      	bcc.n	8004470 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695a      	ldr	r2, [r3, #20]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004514:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4618      	mov	r0, r3
 800451c:	f00a fa96 	bl	800ea4c <USB_ReadInterrupts>
 8004520:	4603      	mov	r3, r0
 8004522:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800452a:	d10a      	bne.n	8004542 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f00c fdd5 	bl	80110dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695a      	ldr	r2, [r3, #20]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004540:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f00a fa80 	bl	800ea4c <USB_ReadInterrupts>
 800454c:	4603      	mov	r3, r0
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b04      	cmp	r3, #4
 8004554:	d115      	bne.n	8004582 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	d002      	beq.n	800456e <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f00c fdc5 	bl	80110f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6859      	ldr	r1, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	430a      	orrs	r2, r1
 800457c:	605a      	str	r2, [r3, #4]
 800457e:	e000      	b.n	8004582 <HAL_PCD_IRQHandler+0x920>
      return;
 8004580:	bf00      	nop
    }
  }
}
 8004582:	3734      	adds	r7, #52	; 0x34
 8004584:	46bd      	mov	sp, r7
 8004586:	bd90      	pop	{r4, r7, pc}

08004588 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <HAL_PCD_SetAddress+0x1a>
 800459e:	2302      	movs	r3, #2
 80045a0:	e013      	b.n	80045ca <HAL_PCD_SetAddress+0x42>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	78fa      	ldrb	r2, [r7, #3]
 80045ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	78fa      	ldrb	r2, [r7, #3]
 80045b8:	4611      	mov	r1, r2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f00a f9de 	bl	800e97c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b084      	sub	sp, #16
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	4608      	mov	r0, r1
 80045dc:	4611      	mov	r1, r2
 80045de:	461a      	mov	r2, r3
 80045e0:	4603      	mov	r3, r0
 80045e2:	70fb      	strb	r3, [r7, #3]
 80045e4:	460b      	mov	r3, r1
 80045e6:	803b      	strh	r3, [r7, #0]
 80045e8:	4613      	mov	r3, r2
 80045ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	da0f      	bge.n	8004618 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045f8:	78fb      	ldrb	r3, [r7, #3]
 80045fa:	f003 020f 	and.w	r2, r3, #15
 80045fe:	4613      	mov	r3, r2
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	3338      	adds	r3, #56	; 0x38
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	4413      	add	r3, r2
 800460c:	3304      	adds	r3, #4
 800460e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2201      	movs	r2, #1
 8004614:	705a      	strb	r2, [r3, #1]
 8004616:	e00f      	b.n	8004638 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004618:	78fb      	ldrb	r3, [r7, #3]
 800461a:	f003 020f 	and.w	r2, r3, #15
 800461e:	4613      	mov	r3, r2
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	4413      	add	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	4413      	add	r3, r2
 800462e:	3304      	adds	r3, #4
 8004630:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	b2da      	uxtb	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004644:	883a      	ldrh	r2, [r7, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	78ba      	ldrb	r2, [r7, #2]
 800464e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	785b      	ldrb	r3, [r3, #1]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d004      	beq.n	8004662 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004662:	78bb      	ldrb	r3, [r7, #2]
 8004664:	2b02      	cmp	r3, #2
 8004666:	d102      	bne.n	800466e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <HAL_PCD_EP_Open+0xaa>
 8004678:	2302      	movs	r3, #2
 800467a:	e00e      	b.n	800469a <HAL_PCD_EP_Open+0xc8>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68f9      	ldr	r1, [r7, #12]
 800468a:	4618      	mov	r0, r3
 800468c:	f009 fb00 	bl	800dc90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004698:	7afb      	ldrb	r3, [r7, #11]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b084      	sub	sp, #16
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
 80046aa:	460b      	mov	r3, r1
 80046ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	da0f      	bge.n	80046d6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046b6:	78fb      	ldrb	r3, [r7, #3]
 80046b8:	f003 020f 	and.w	r2, r3, #15
 80046bc:	4613      	mov	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	3338      	adds	r3, #56	; 0x38
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	4413      	add	r3, r2
 80046ca:	3304      	adds	r3, #4
 80046cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2201      	movs	r2, #1
 80046d2:	705a      	strb	r2, [r3, #1]
 80046d4:	e00f      	b.n	80046f6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046d6:	78fb      	ldrb	r3, [r7, #3]
 80046d8:	f003 020f 	and.w	r2, r3, #15
 80046dc:	4613      	mov	r3, r2
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	4413      	add	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	4413      	add	r3, r2
 80046ec:	3304      	adds	r3, #4
 80046ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80046f6:	78fb      	ldrb	r3, [r7, #3]
 80046f8:	f003 030f 	and.w	r3, r3, #15
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_PCD_EP_Close+0x6e>
 800470c:	2302      	movs	r3, #2
 800470e:	e00e      	b.n	800472e <HAL_PCD_EP_Close+0x8c>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68f9      	ldr	r1, [r7, #12]
 800471e:	4618      	mov	r0, r3
 8004720:	f009 fb3e 	bl	800dda0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b086      	sub	sp, #24
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	607a      	str	r2, [r7, #4]
 8004740:	603b      	str	r3, [r7, #0]
 8004742:	460b      	mov	r3, r1
 8004744:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004746:	7afb      	ldrb	r3, [r7, #11]
 8004748:	f003 020f 	and.w	r2, r3, #15
 800474c:	4613      	mov	r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	4413      	add	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	4413      	add	r3, r2
 800475c:	3304      	adds	r3, #4
 800475e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	2200      	movs	r2, #0
 8004770:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2200      	movs	r2, #0
 8004776:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004778:	7afb      	ldrb	r3, [r7, #11]
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	b2da      	uxtb	r2, r3
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004784:	7afb      	ldrb	r3, [r7, #11]
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	2b00      	cmp	r3, #0
 800478c:	d106      	bne.n	800479c <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6979      	ldr	r1, [r7, #20]
 8004794:	4618      	mov	r0, r3
 8004796:	f009 fdbf 	bl	800e318 <USB_EP0StartXfer>
 800479a:	e005      	b.n	80047a8 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6979      	ldr	r1, [r7, #20]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f009 fbd8 	bl	800df58 <USB_EPStartXfer>
  }

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b083      	sub	sp, #12
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	460b      	mov	r3, r1
 80047bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047be:	78fb      	ldrb	r3, [r7, #3]
 80047c0:	f003 020f 	and.w	r2, r3, #15
 80047c4:	6879      	ldr	r1, [r7, #4]
 80047c6:	4613      	mov	r3, r2
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	4413      	add	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	440b      	add	r3, r1
 80047d0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80047d4:	681b      	ldr	r3, [r3, #0]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b086      	sub	sp, #24
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	603b      	str	r3, [r7, #0]
 80047ee:	460b      	mov	r3, r1
 80047f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047f2:	7afb      	ldrb	r3, [r7, #11]
 80047f4:	f003 020f 	and.w	r2, r3, #15
 80047f8:	4613      	mov	r3, r2
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	4413      	add	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	3338      	adds	r3, #56	; 0x38
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4413      	add	r3, r2
 8004806:	3304      	adds	r3, #4
 8004808:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2200      	movs	r2, #0
 800481a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2201      	movs	r2, #1
 8004820:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004822:	7afb      	ldrb	r3, [r7, #11]
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	b2da      	uxtb	r2, r3
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800482e:	7afb      	ldrb	r3, [r7, #11]
 8004830:	f003 030f 	and.w	r3, r3, #15
 8004834:	2b00      	cmp	r3, #0
 8004836:	d106      	bne.n	8004846 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6979      	ldr	r1, [r7, #20]
 800483e:	4618      	mov	r0, r3
 8004840:	f009 fd6a 	bl	800e318 <USB_EP0StartXfer>
 8004844:	e005      	b.n	8004852 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6979      	ldr	r1, [r7, #20]
 800484c:	4618      	mov	r0, r3
 800484e:	f009 fb83 	bl	800df58 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3718      	adds	r7, #24
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004868:	78fb      	ldrb	r3, [r7, #3]
 800486a:	f003 020f 	and.w	r2, r3, #15
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	429a      	cmp	r2, r3
 8004874:	d901      	bls.n	800487a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e04e      	b.n	8004918 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800487a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800487e:	2b00      	cmp	r3, #0
 8004880:	da0f      	bge.n	80048a2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004882:	78fb      	ldrb	r3, [r7, #3]
 8004884:	f003 020f 	and.w	r2, r3, #15
 8004888:	4613      	mov	r3, r2
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4413      	add	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	3338      	adds	r3, #56	; 0x38
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	4413      	add	r3, r2
 8004896:	3304      	adds	r3, #4
 8004898:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2201      	movs	r2, #1
 800489e:	705a      	strb	r2, [r3, #1]
 80048a0:	e00d      	b.n	80048be <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048a2:	78fa      	ldrb	r2, [r7, #3]
 80048a4:	4613      	mov	r3, r2
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	4413      	add	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	4413      	add	r3, r2
 80048b4:	3304      	adds	r3, #4
 80048b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2201      	movs	r2, #1
 80048c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d101      	bne.n	80048de <HAL_PCD_EP_SetStall+0x82>
 80048da:	2302      	movs	r3, #2
 80048dc:	e01c      	b.n	8004918 <HAL_PCD_EP_SetStall+0xbc>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68f9      	ldr	r1, [r7, #12]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f009 ff71 	bl	800e7d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048f2:	78fb      	ldrb	r3, [r7, #3]
 80048f4:	f003 030f 	and.w	r3, r3, #15
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d108      	bne.n	800490e <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004906:	4619      	mov	r1, r3
 8004908:	4610      	mov	r0, r2
 800490a:	f00a f963 	bl	800ebd4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	460b      	mov	r3, r1
 800492a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800492c:	78fb      	ldrb	r3, [r7, #3]
 800492e:	f003 020f 	and.w	r2, r3, #15
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	429a      	cmp	r2, r3
 8004938:	d901      	bls.n	800493e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e042      	b.n	80049c4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800493e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004942:	2b00      	cmp	r3, #0
 8004944:	da0f      	bge.n	8004966 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004946:	78fb      	ldrb	r3, [r7, #3]
 8004948:	f003 020f 	and.w	r2, r3, #15
 800494c:	4613      	mov	r3, r2
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	4413      	add	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	3338      	adds	r3, #56	; 0x38
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	4413      	add	r3, r2
 800495a:	3304      	adds	r3, #4
 800495c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2201      	movs	r2, #1
 8004962:	705a      	strb	r2, [r3, #1]
 8004964:	e00f      	b.n	8004986 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004966:	78fb      	ldrb	r3, [r7, #3]
 8004968:	f003 020f 	and.w	r2, r3, #15
 800496c:	4613      	mov	r3, r2
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	4413      	add	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	4413      	add	r3, r2
 800497c:	3304      	adds	r3, #4
 800497e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800498c:	78fb      	ldrb	r3, [r7, #3]
 800498e:	f003 030f 	and.w	r3, r3, #15
 8004992:	b2da      	uxtb	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d101      	bne.n	80049a6 <HAL_PCD_EP_ClrStall+0x86>
 80049a2:	2302      	movs	r3, #2
 80049a4:	e00e      	b.n	80049c4 <HAL_PCD_EP_ClrStall+0xa4>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68f9      	ldr	r1, [r7, #12]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f009 ff7b 	bl	800e8b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	460b      	mov	r3, r1
 80049d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80049d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	da0c      	bge.n	80049fa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049e0:	78fb      	ldrb	r3, [r7, #3]
 80049e2:	f003 020f 	and.w	r2, r3, #15
 80049e6:	4613      	mov	r3, r2
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	4413      	add	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	3338      	adds	r3, #56	; 0x38
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	4413      	add	r3, r2
 80049f4:	3304      	adds	r3, #4
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	e00c      	b.n	8004a14 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049fa:	78fb      	ldrb	r3, [r7, #3]
 80049fc:	f003 020f 	and.w	r2, r3, #15
 8004a00:	4613      	mov	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	4413      	add	r3, r2
 8004a10:	3304      	adds	r3, #4
 8004a12:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68f9      	ldr	r1, [r7, #12]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f009 fd9e 	bl	800e55c <USB_EPStopXfer>
 8004a20:	4603      	mov	r3, r0
 8004a22:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a24:	7afb      	ldrb	r3, [r7, #11]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b088      	sub	sp, #32
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	4613      	mov	r3, r2
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	4413      	add	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	3338      	adds	r3, #56	; 0x38
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	4413      	add	r3, r2
 8004a52:	3304      	adds	r3, #4
 8004a54:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6a1a      	ldr	r2, [r3, #32]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d901      	bls.n	8004a66 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e067      	b.n	8004b36 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	699a      	ldr	r2, [r3, #24]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	69fa      	ldr	r2, [r7, #28]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d902      	bls.n	8004a82 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	3303      	adds	r3, #3
 8004a86:	089b      	lsrs	r3, r3, #2
 8004a88:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a8a:	e026      	b.n	8004ada <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	699a      	ldr	r2, [r3, #24]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	69fa      	ldr	r2, [r7, #28]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d902      	bls.n	8004aa8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	3303      	adds	r3, #3
 8004aac:	089b      	lsrs	r3, r3, #2
 8004aae:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6919      	ldr	r1, [r3, #16]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	6978      	ldr	r0, [r7, #20]
 8004abe:	f009 fdf7 	bl	800e6b0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	691a      	ldr	r2, [r3, #16]
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	441a      	add	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6a1a      	ldr	r2, [r3, #32]
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	441a      	add	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d809      	bhi.n	8004b04 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a1a      	ldr	r2, [r3, #32]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d203      	bcs.n	8004b04 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1c3      	bne.n	8004a8c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	699a      	ldr	r2, [r3, #24]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d811      	bhi.n	8004b34 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	2201      	movs	r2, #1
 8004b18:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	43db      	mvns	r3, r3
 8004b2a:	6939      	ldr	r1, [r7, #16]
 8004b2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b30:	4013      	ands	r3, r2
 8004b32:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3720      	adds	r7, #32
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	333c      	adds	r3, #60	; 0x3c
 8004b58:	3304      	adds	r3, #4
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4a19      	ldr	r2, [pc, #100]	; (8004bd8 <PCD_EP_OutXfrComplete_int+0x98>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d124      	bne.n	8004bc0 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00a      	beq.n	8004b96 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b92:	6093      	str	r3, [r2, #8]
 8004b94:	e01a      	b.n	8004bcc <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	f003 0320 	and.w	r3, r3, #32
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d008      	beq.n	8004bb2 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bac:	461a      	mov	r2, r3
 8004bae:	2320      	movs	r3, #32
 8004bb0:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f00c f9bb 	bl	8010f34 <HAL_PCD_DataOutStageCallback>
 8004bbe:	e005      	b.n	8004bcc <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f00c f9b4 	bl	8010f34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	4f54310a 	.word	0x4f54310a

08004bdc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	333c      	adds	r3, #60	; 0x3c
 8004bf4:	3304      	adds	r3, #4
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	015a      	lsls	r2, r3, #5
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	4413      	add	r3, r2
 8004c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	4a0c      	ldr	r2, [pc, #48]	; (8004c40 <PCD_EP_OutSetupPacket_int+0x64>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d90e      	bls.n	8004c30 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d009      	beq.n	8004c30 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c28:	461a      	mov	r2, r3
 8004c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c2e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f00c f96d 	bl	8010f10 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	4f54300a 	.word	0x4f54300a

08004c44 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	70fb      	strb	r3, [r7, #3]
 8004c50:	4613      	mov	r3, r2
 8004c52:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004c5c:	78fb      	ldrb	r3, [r7, #3]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d107      	bne.n	8004c72 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004c62:	883b      	ldrh	r3, [r7, #0]
 8004c64:	0419      	lsls	r1, r3, #16
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	629a      	str	r2, [r3, #40]	; 0x28
 8004c70:	e028      	b.n	8004cc4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c78:	0c1b      	lsrs	r3, r3, #16
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c80:	2300      	movs	r3, #0
 8004c82:	73fb      	strb	r3, [r7, #15]
 8004c84:	e00d      	b.n	8004ca2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	7bfb      	ldrb	r3, [r7, #15]
 8004c8c:	3340      	adds	r3, #64	; 0x40
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	0c1b      	lsrs	r3, r3, #16
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	4413      	add	r3, r2
 8004c9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	73fb      	strb	r3, [r7, #15]
 8004ca2:	7bfa      	ldrb	r2, [r7, #15]
 8004ca4:	78fb      	ldrb	r3, [r7, #3]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d3ec      	bcc.n	8004c86 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004cac:	883b      	ldrh	r3, [r7, #0]
 8004cae:	0418      	lsls	r0, r3, #16
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6819      	ldr	r1, [r3, #0]
 8004cb4:	78fb      	ldrb	r3, [r7, #3]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	4302      	orrs	r2, r0
 8004cbc:	3340      	adds	r3, #64	; 0x40
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	460b      	mov	r3, r1
 8004cdc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	887a      	ldrh	r2, [r7, #2]
 8004ce4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d26:	f043 0303 	orr.w	r3, r3, #3
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d58:	4b0d      	ldr	r3, [pc, #52]	; (8004d90 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d64:	d102      	bne.n	8004d6c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d6a:	e00b      	b.n	8004d84 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004d6c:	4b08      	ldr	r3, [pc, #32]	; (8004d90 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d7a:	d102      	bne.n	8004d82 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d80:	e000      	b.n	8004d84 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004d82:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	40007000 	.word	0x40007000

08004d94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d141      	bne.n	8004e26 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004da2:	4b4b      	ldr	r3, [pc, #300]	; (8004ed0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dae:	d131      	bne.n	8004e14 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004db0:	4b47      	ldr	r3, [pc, #284]	; (8004ed0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004db6:	4a46      	ldr	r2, [pc, #280]	; (8004ed0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004dc0:	4b43      	ldr	r3, [pc, #268]	; (8004ed0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004dc8:	4a41      	ldr	r2, [pc, #260]	; (8004ed0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004dd0:	4b40      	ldr	r3, [pc, #256]	; (8004ed4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2232      	movs	r2, #50	; 0x32
 8004dd6:	fb02 f303 	mul.w	r3, r2, r3
 8004dda:	4a3f      	ldr	r2, [pc, #252]	; (8004ed8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8004de0:	0c9b      	lsrs	r3, r3, #18
 8004de2:	3301      	adds	r3, #1
 8004de4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004de6:	e002      	b.n	8004dee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dee:	4b38      	ldr	r3, [pc, #224]	; (8004ed0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dfa:	d102      	bne.n	8004e02 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1f2      	bne.n	8004de8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e02:	4b33      	ldr	r3, [pc, #204]	; (8004ed0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e0e:	d158      	bne.n	8004ec2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e057      	b.n	8004ec4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e14:	4b2e      	ldr	r3, [pc, #184]	; (8004ed0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e1a:	4a2d      	ldr	r2, [pc, #180]	; (8004ed0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004e24:	e04d      	b.n	8004ec2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e2c:	d141      	bne.n	8004eb2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e2e:	4b28      	ldr	r3, [pc, #160]	; (8004ed0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e3a:	d131      	bne.n	8004ea0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e3c:	4b24      	ldr	r3, [pc, #144]	; (8004ed0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e42:	4a23      	ldr	r2, [pc, #140]	; (8004ed0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e4c:	4b20      	ldr	r3, [pc, #128]	; (8004ed0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e54:	4a1e      	ldr	r2, [pc, #120]	; (8004ed0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004e5c:	4b1d      	ldr	r3, [pc, #116]	; (8004ed4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2232      	movs	r2, #50	; 0x32
 8004e62:	fb02 f303 	mul.w	r3, r2, r3
 8004e66:	4a1c      	ldr	r2, [pc, #112]	; (8004ed8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e68:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6c:	0c9b      	lsrs	r3, r3, #18
 8004e6e:	3301      	adds	r3, #1
 8004e70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e72:	e002      	b.n	8004e7a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e7a:	4b15      	ldr	r3, [pc, #84]	; (8004ed0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e86:	d102      	bne.n	8004e8e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f2      	bne.n	8004e74 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e8e:	4b10      	ldr	r3, [pc, #64]	; (8004ed0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e9a:	d112      	bne.n	8004ec2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e011      	b.n	8004ec4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ea6:	4a0a      	ldr	r2, [pc, #40]	; (8004ed0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004eb0:	e007      	b.n	8004ec2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004eb2:	4b07      	ldr	r3, [pc, #28]	; (8004ed0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004eba:	4a05      	ldr	r2, [pc, #20]	; (8004ed0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ebc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ec0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	40007000 	.word	0x40007000
 8004ed4:	2000000c 	.word	0x2000000c
 8004ed8:	431bde83 	.word	0x431bde83

08004edc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004ee0:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	4a04      	ldr	r2, [pc, #16]	; (8004ef8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004ee6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004eea:	6053      	str	r3, [r2, #4]
}
 8004eec:	bf00      	nop
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	40007000 	.word	0x40007000

08004efc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d102      	bne.n	8004f10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	f000 bc08 	b.w	8005720 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f10:	4b96      	ldr	r3, [pc, #600]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f003 030c 	and.w	r3, r3, #12
 8004f18:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f1a:	4b94      	ldr	r3, [pc, #592]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0310 	and.w	r3, r3, #16
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 80e4 	beq.w	80050fa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d007      	beq.n	8004f48 <HAL_RCC_OscConfig+0x4c>
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	2b0c      	cmp	r3, #12
 8004f3c:	f040 808b 	bne.w	8005056 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	f040 8087 	bne.w	8005056 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f48:	4b88      	ldr	r3, [pc, #544]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d005      	beq.n	8004f60 <HAL_RCC_OscConfig+0x64>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e3df      	b.n	8005720 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a1a      	ldr	r2, [r3, #32]
 8004f64:	4b81      	ldr	r3, [pc, #516]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d004      	beq.n	8004f7a <HAL_RCC_OscConfig+0x7e>
 8004f70:	4b7e      	ldr	r3, [pc, #504]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f78:	e005      	b.n	8004f86 <HAL_RCC_OscConfig+0x8a>
 8004f7a:	4b7c      	ldr	r3, [pc, #496]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f80:	091b      	lsrs	r3, r3, #4
 8004f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d223      	bcs.n	8004fd2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 fdf8 	bl	8005b84 <RCC_SetFlashLatencyFromMSIRange>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e3c0      	b.n	8005720 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f9e:	4b73      	ldr	r3, [pc, #460]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a72      	ldr	r2, [pc, #456]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004fa4:	f043 0308 	orr.w	r3, r3, #8
 8004fa8:	6013      	str	r3, [r2, #0]
 8004faa:	4b70      	ldr	r3, [pc, #448]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	496d      	ldr	r1, [pc, #436]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fbc:	4b6b      	ldr	r3, [pc, #428]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	69db      	ldr	r3, [r3, #28]
 8004fc8:	021b      	lsls	r3, r3, #8
 8004fca:	4968      	ldr	r1, [pc, #416]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	604b      	str	r3, [r1, #4]
 8004fd0:	e025      	b.n	800501e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fd2:	4b66      	ldr	r3, [pc, #408]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a65      	ldr	r2, [pc, #404]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004fd8:	f043 0308 	orr.w	r3, r3, #8
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	4b63      	ldr	r3, [pc, #396]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	4960      	ldr	r1, [pc, #384]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ff0:	4b5e      	ldr	r3, [pc, #376]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	021b      	lsls	r3, r3, #8
 8004ffe:	495b      	ldr	r1, [pc, #364]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8005000:	4313      	orrs	r3, r2
 8005002:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d109      	bne.n	800501e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	4618      	mov	r0, r3
 8005010:	f000 fdb8 	bl	8005b84 <RCC_SetFlashLatencyFromMSIRange>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e380      	b.n	8005720 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800501e:	f000 fcc1 	bl	80059a4 <HAL_RCC_GetSysClockFreq>
 8005022:	4602      	mov	r2, r0
 8005024:	4b51      	ldr	r3, [pc, #324]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	091b      	lsrs	r3, r3, #4
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	4950      	ldr	r1, [pc, #320]	; (8005170 <HAL_RCC_OscConfig+0x274>)
 8005030:	5ccb      	ldrb	r3, [r1, r3]
 8005032:	f003 031f 	and.w	r3, r3, #31
 8005036:	fa22 f303 	lsr.w	r3, r2, r3
 800503a:	4a4e      	ldr	r2, [pc, #312]	; (8005174 <HAL_RCC_OscConfig+0x278>)
 800503c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800503e:	4b4e      	ldr	r3, [pc, #312]	; (8005178 <HAL_RCC_OscConfig+0x27c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4618      	mov	r0, r3
 8005044:	f7fd fcea 	bl	8002a1c <HAL_InitTick>
 8005048:	4603      	mov	r3, r0
 800504a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800504c:	7bfb      	ldrb	r3, [r7, #15]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d052      	beq.n	80050f8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005052:	7bfb      	ldrb	r3, [r7, #15]
 8005054:	e364      	b.n	8005720 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d032      	beq.n	80050c4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800505e:	4b43      	ldr	r3, [pc, #268]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a42      	ldr	r2, [pc, #264]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8005064:	f043 0301 	orr.w	r3, r3, #1
 8005068:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800506a:	f7fd fd27 	bl	8002abc <HAL_GetTick>
 800506e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005070:	e008      	b.n	8005084 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005072:	f7fd fd23 	bl	8002abc <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d901      	bls.n	8005084 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e34d      	b.n	8005720 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005084:	4b39      	ldr	r3, [pc, #228]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0f0      	beq.n	8005072 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005090:	4b36      	ldr	r3, [pc, #216]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a35      	ldr	r2, [pc, #212]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8005096:	f043 0308 	orr.w	r3, r3, #8
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	4b33      	ldr	r3, [pc, #204]	; (800516c <HAL_RCC_OscConfig+0x270>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a1b      	ldr	r3, [r3, #32]
 80050a8:	4930      	ldr	r1, [pc, #192]	; (800516c <HAL_RCC_OscConfig+0x270>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050ae:	4b2f      	ldr	r3, [pc, #188]	; (800516c <HAL_RCC_OscConfig+0x270>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	021b      	lsls	r3, r3, #8
 80050bc:	492b      	ldr	r1, [pc, #172]	; (800516c <HAL_RCC_OscConfig+0x270>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	604b      	str	r3, [r1, #4]
 80050c2:	e01a      	b.n	80050fa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80050c4:	4b29      	ldr	r3, [pc, #164]	; (800516c <HAL_RCC_OscConfig+0x270>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a28      	ldr	r2, [pc, #160]	; (800516c <HAL_RCC_OscConfig+0x270>)
 80050ca:	f023 0301 	bic.w	r3, r3, #1
 80050ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80050d0:	f7fd fcf4 	bl	8002abc <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050d8:	f7fd fcf0 	bl	8002abc <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e31a      	b.n	8005720 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80050ea:	4b20      	ldr	r3, [pc, #128]	; (800516c <HAL_RCC_OscConfig+0x270>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f0      	bne.n	80050d8 <HAL_RCC_OscConfig+0x1dc>
 80050f6:	e000      	b.n	80050fa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d073      	beq.n	80051ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	2b08      	cmp	r3, #8
 800510a:	d005      	beq.n	8005118 <HAL_RCC_OscConfig+0x21c>
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	2b0c      	cmp	r3, #12
 8005110:	d10e      	bne.n	8005130 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b03      	cmp	r3, #3
 8005116:	d10b      	bne.n	8005130 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005118:	4b14      	ldr	r3, [pc, #80]	; (800516c <HAL_RCC_OscConfig+0x270>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d063      	beq.n	80051ec <HAL_RCC_OscConfig+0x2f0>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d15f      	bne.n	80051ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e2f7      	b.n	8005720 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005138:	d106      	bne.n	8005148 <HAL_RCC_OscConfig+0x24c>
 800513a:	4b0c      	ldr	r3, [pc, #48]	; (800516c <HAL_RCC_OscConfig+0x270>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a0b      	ldr	r2, [pc, #44]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8005140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	e025      	b.n	8005194 <HAL_RCC_OscConfig+0x298>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005150:	d114      	bne.n	800517c <HAL_RCC_OscConfig+0x280>
 8005152:	4b06      	ldr	r3, [pc, #24]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a05      	ldr	r2, [pc, #20]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8005158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800515c:	6013      	str	r3, [r2, #0]
 800515e:	4b03      	ldr	r3, [pc, #12]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a02      	ldr	r2, [pc, #8]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8005164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	e013      	b.n	8005194 <HAL_RCC_OscConfig+0x298>
 800516c:	40021000 	.word	0x40021000
 8005170:	08014238 	.word	0x08014238
 8005174:	2000000c 	.word	0x2000000c
 8005178:	20000010 	.word	0x20000010
 800517c:	4ba0      	ldr	r3, [pc, #640]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a9f      	ldr	r2, [pc, #636]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 8005182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	4b9d      	ldr	r3, [pc, #628]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a9c      	ldr	r2, [pc, #624]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 800518e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005192:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d013      	beq.n	80051c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519c:	f7fd fc8e 	bl	8002abc <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051a4:	f7fd fc8a 	bl	8002abc <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b64      	cmp	r3, #100	; 0x64
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e2b4      	b.n	8005720 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051b6:	4b92      	ldr	r3, [pc, #584]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0f0      	beq.n	80051a4 <HAL_RCC_OscConfig+0x2a8>
 80051c2:	e014      	b.n	80051ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c4:	f7fd fc7a 	bl	8002abc <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051cc:	f7fd fc76 	bl	8002abc <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b64      	cmp	r3, #100	; 0x64
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e2a0      	b.n	8005720 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051de:	4b88      	ldr	r3, [pc, #544]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1f0      	bne.n	80051cc <HAL_RCC_OscConfig+0x2d0>
 80051ea:	e000      	b.n	80051ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d060      	beq.n	80052bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d005      	beq.n	800520c <HAL_RCC_OscConfig+0x310>
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	2b0c      	cmp	r3, #12
 8005204:	d119      	bne.n	800523a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2b02      	cmp	r3, #2
 800520a:	d116      	bne.n	800523a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800520c:	4b7c      	ldr	r3, [pc, #496]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005214:	2b00      	cmp	r3, #0
 8005216:	d005      	beq.n	8005224 <HAL_RCC_OscConfig+0x328>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e27d      	b.n	8005720 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005224:	4b76      	ldr	r3, [pc, #472]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	061b      	lsls	r3, r3, #24
 8005232:	4973      	ldr	r1, [pc, #460]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 8005234:	4313      	orrs	r3, r2
 8005236:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005238:	e040      	b.n	80052bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d023      	beq.n	800528a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005242:	4b6f      	ldr	r3, [pc, #444]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a6e      	ldr	r2, [pc, #440]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 8005248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800524c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524e:	f7fd fc35 	bl	8002abc <HAL_GetTick>
 8005252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005254:	e008      	b.n	8005268 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005256:	f7fd fc31 	bl	8002abc <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d901      	bls.n	8005268 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e25b      	b.n	8005720 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005268:	4b65      	ldr	r3, [pc, #404]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0f0      	beq.n	8005256 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005274:	4b62      	ldr	r3, [pc, #392]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	061b      	lsls	r3, r3, #24
 8005282:	495f      	ldr	r1, [pc, #380]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 8005284:	4313      	orrs	r3, r2
 8005286:	604b      	str	r3, [r1, #4]
 8005288:	e018      	b.n	80052bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800528a:	4b5d      	ldr	r3, [pc, #372]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a5c      	ldr	r2, [pc, #368]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 8005290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005294:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005296:	f7fd fc11 	bl	8002abc <HAL_GetTick>
 800529a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800529c:	e008      	b.n	80052b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800529e:	f7fd fc0d 	bl	8002abc <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e237      	b.n	8005720 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052b0:	4b53      	ldr	r3, [pc, #332]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1f0      	bne.n	800529e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0308 	and.w	r3, r3, #8
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d03c      	beq.n	8005342 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01c      	beq.n	800530a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052d0:	4b4b      	ldr	r3, [pc, #300]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 80052d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052d6:	4a4a      	ldr	r2, [pc, #296]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 80052d8:	f043 0301 	orr.w	r3, r3, #1
 80052dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e0:	f7fd fbec 	bl	8002abc <HAL_GetTick>
 80052e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052e8:	f7fd fbe8 	bl	8002abc <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e212      	b.n	8005720 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052fa:	4b41      	ldr	r3, [pc, #260]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 80052fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d0ef      	beq.n	80052e8 <HAL_RCC_OscConfig+0x3ec>
 8005308:	e01b      	b.n	8005342 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800530a:	4b3d      	ldr	r3, [pc, #244]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 800530c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005310:	4a3b      	ldr	r2, [pc, #236]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 8005312:	f023 0301 	bic.w	r3, r3, #1
 8005316:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800531a:	f7fd fbcf 	bl	8002abc <HAL_GetTick>
 800531e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005320:	e008      	b.n	8005334 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005322:	f7fd fbcb 	bl	8002abc <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b02      	cmp	r3, #2
 800532e:	d901      	bls.n	8005334 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e1f5      	b.n	8005720 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005334:	4b32      	ldr	r3, [pc, #200]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 8005336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1ef      	bne.n	8005322 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 80a6 	beq.w	800549c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005350:	2300      	movs	r3, #0
 8005352:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005354:	4b2a      	ldr	r3, [pc, #168]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 8005356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10d      	bne.n	800537c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005360:	4b27      	ldr	r3, [pc, #156]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 8005362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005364:	4a26      	ldr	r2, [pc, #152]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 8005366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800536a:	6593      	str	r3, [r2, #88]	; 0x58
 800536c:	4b24      	ldr	r3, [pc, #144]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 800536e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005374:	60bb      	str	r3, [r7, #8]
 8005376:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005378:	2301      	movs	r3, #1
 800537a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800537c:	4b21      	ldr	r3, [pc, #132]	; (8005404 <HAL_RCC_OscConfig+0x508>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005384:	2b00      	cmp	r3, #0
 8005386:	d118      	bne.n	80053ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005388:	4b1e      	ldr	r3, [pc, #120]	; (8005404 <HAL_RCC_OscConfig+0x508>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a1d      	ldr	r2, [pc, #116]	; (8005404 <HAL_RCC_OscConfig+0x508>)
 800538e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005392:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005394:	f7fd fb92 	bl	8002abc <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800539c:	f7fd fb8e 	bl	8002abc <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e1b8      	b.n	8005720 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053ae:	4b15      	ldr	r3, [pc, #84]	; (8005404 <HAL_RCC_OscConfig+0x508>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0f0      	beq.n	800539c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d108      	bne.n	80053d4 <HAL_RCC_OscConfig+0x4d8>
 80053c2:	4b0f      	ldr	r3, [pc, #60]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 80053c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c8:	4a0d      	ldr	r2, [pc, #52]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 80053ca:	f043 0301 	orr.w	r3, r3, #1
 80053ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053d2:	e029      	b.n	8005428 <HAL_RCC_OscConfig+0x52c>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	2b05      	cmp	r3, #5
 80053da:	d115      	bne.n	8005408 <HAL_RCC_OscConfig+0x50c>
 80053dc:	4b08      	ldr	r3, [pc, #32]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 80053de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e2:	4a07      	ldr	r2, [pc, #28]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 80053e4:	f043 0304 	orr.w	r3, r3, #4
 80053e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053ec:	4b04      	ldr	r3, [pc, #16]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 80053ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f2:	4a03      	ldr	r2, [pc, #12]	; (8005400 <HAL_RCC_OscConfig+0x504>)
 80053f4:	f043 0301 	orr.w	r3, r3, #1
 80053f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053fc:	e014      	b.n	8005428 <HAL_RCC_OscConfig+0x52c>
 80053fe:	bf00      	nop
 8005400:	40021000 	.word	0x40021000
 8005404:	40007000 	.word	0x40007000
 8005408:	4b9d      	ldr	r3, [pc, #628]	; (8005680 <HAL_RCC_OscConfig+0x784>)
 800540a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540e:	4a9c      	ldr	r2, [pc, #624]	; (8005680 <HAL_RCC_OscConfig+0x784>)
 8005410:	f023 0301 	bic.w	r3, r3, #1
 8005414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005418:	4b99      	ldr	r3, [pc, #612]	; (8005680 <HAL_RCC_OscConfig+0x784>)
 800541a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541e:	4a98      	ldr	r2, [pc, #608]	; (8005680 <HAL_RCC_OscConfig+0x784>)
 8005420:	f023 0304 	bic.w	r3, r3, #4
 8005424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d016      	beq.n	800545e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005430:	f7fd fb44 	bl	8002abc <HAL_GetTick>
 8005434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005436:	e00a      	b.n	800544e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005438:	f7fd fb40 	bl	8002abc <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	f241 3288 	movw	r2, #5000	; 0x1388
 8005446:	4293      	cmp	r3, r2
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e168      	b.n	8005720 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800544e:	4b8c      	ldr	r3, [pc, #560]	; (8005680 <HAL_RCC_OscConfig+0x784>)
 8005450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d0ed      	beq.n	8005438 <HAL_RCC_OscConfig+0x53c>
 800545c:	e015      	b.n	800548a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800545e:	f7fd fb2d 	bl	8002abc <HAL_GetTick>
 8005462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005464:	e00a      	b.n	800547c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005466:	f7fd fb29 	bl	8002abc <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	f241 3288 	movw	r2, #5000	; 0x1388
 8005474:	4293      	cmp	r3, r2
 8005476:	d901      	bls.n	800547c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e151      	b.n	8005720 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800547c:	4b80      	ldr	r3, [pc, #512]	; (8005680 <HAL_RCC_OscConfig+0x784>)
 800547e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1ed      	bne.n	8005466 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800548a:	7ffb      	ldrb	r3, [r7, #31]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d105      	bne.n	800549c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005490:	4b7b      	ldr	r3, [pc, #492]	; (8005680 <HAL_RCC_OscConfig+0x784>)
 8005492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005494:	4a7a      	ldr	r2, [pc, #488]	; (8005680 <HAL_RCC_OscConfig+0x784>)
 8005496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800549a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0320 	and.w	r3, r3, #32
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d03c      	beq.n	8005522 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d01c      	beq.n	80054ea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054b0:	4b73      	ldr	r3, [pc, #460]	; (8005680 <HAL_RCC_OscConfig+0x784>)
 80054b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054b6:	4a72      	ldr	r2, [pc, #456]	; (8005680 <HAL_RCC_OscConfig+0x784>)
 80054b8:	f043 0301 	orr.w	r3, r3, #1
 80054bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c0:	f7fd fafc 	bl	8002abc <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054c8:	f7fd faf8 	bl	8002abc <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e122      	b.n	8005720 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054da:	4b69      	ldr	r3, [pc, #420]	; (8005680 <HAL_RCC_OscConfig+0x784>)
 80054dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0ef      	beq.n	80054c8 <HAL_RCC_OscConfig+0x5cc>
 80054e8:	e01b      	b.n	8005522 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80054ea:	4b65      	ldr	r3, [pc, #404]	; (8005680 <HAL_RCC_OscConfig+0x784>)
 80054ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054f0:	4a63      	ldr	r2, [pc, #396]	; (8005680 <HAL_RCC_OscConfig+0x784>)
 80054f2:	f023 0301 	bic.w	r3, r3, #1
 80054f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054fa:	f7fd fadf 	bl	8002abc <HAL_GetTick>
 80054fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005500:	e008      	b.n	8005514 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005502:	f7fd fadb 	bl	8002abc <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d901      	bls.n	8005514 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e105      	b.n	8005720 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005514:	4b5a      	ldr	r3, [pc, #360]	; (8005680 <HAL_RCC_OscConfig+0x784>)
 8005516:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1ef      	bne.n	8005502 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 80f9 	beq.w	800571e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005530:	2b02      	cmp	r3, #2
 8005532:	f040 80cf 	bne.w	80056d4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005536:	4b52      	ldr	r3, [pc, #328]	; (8005680 <HAL_RCC_OscConfig+0x784>)
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f003 0203 	and.w	r2, r3, #3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005546:	429a      	cmp	r2, r3
 8005548:	d12c      	bne.n	80055a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005554:	3b01      	subs	r3, #1
 8005556:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005558:	429a      	cmp	r2, r3
 800555a:	d123      	bne.n	80055a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005566:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005568:	429a      	cmp	r2, r3
 800556a:	d11b      	bne.n	80055a4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005576:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005578:	429a      	cmp	r2, r3
 800557a:	d113      	bne.n	80055a4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005586:	085b      	lsrs	r3, r3, #1
 8005588:	3b01      	subs	r3, #1
 800558a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800558c:	429a      	cmp	r2, r3
 800558e:	d109      	bne.n	80055a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	085b      	lsrs	r3, r3, #1
 800559c:	3b01      	subs	r3, #1
 800559e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d071      	beq.n	8005688 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	2b0c      	cmp	r3, #12
 80055a8:	d068      	beq.n	800567c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80055aa:	4b35      	ldr	r3, [pc, #212]	; (8005680 <HAL_RCC_OscConfig+0x784>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d105      	bne.n	80055c2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80055b6:	4b32      	ldr	r3, [pc, #200]	; (8005680 <HAL_RCC_OscConfig+0x784>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e0ac      	b.n	8005720 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80055c6:	4b2e      	ldr	r3, [pc, #184]	; (8005680 <HAL_RCC_OscConfig+0x784>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a2d      	ldr	r2, [pc, #180]	; (8005680 <HAL_RCC_OscConfig+0x784>)
 80055cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80055d2:	f7fd fa73 	bl	8002abc <HAL_GetTick>
 80055d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055d8:	e008      	b.n	80055ec <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055da:	f7fd fa6f 	bl	8002abc <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d901      	bls.n	80055ec <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e099      	b.n	8005720 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055ec:	4b24      	ldr	r3, [pc, #144]	; (8005680 <HAL_RCC_OscConfig+0x784>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1f0      	bne.n	80055da <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055f8:	4b21      	ldr	r3, [pc, #132]	; (8005680 <HAL_RCC_OscConfig+0x784>)
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	4b21      	ldr	r3, [pc, #132]	; (8005684 <HAL_RCC_OscConfig+0x788>)
 80055fe:	4013      	ands	r3, r2
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005608:	3a01      	subs	r2, #1
 800560a:	0112      	lsls	r2, r2, #4
 800560c:	4311      	orrs	r1, r2
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005612:	0212      	lsls	r2, r2, #8
 8005614:	4311      	orrs	r1, r2
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800561a:	0852      	lsrs	r2, r2, #1
 800561c:	3a01      	subs	r2, #1
 800561e:	0552      	lsls	r2, r2, #21
 8005620:	4311      	orrs	r1, r2
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005626:	0852      	lsrs	r2, r2, #1
 8005628:	3a01      	subs	r2, #1
 800562a:	0652      	lsls	r2, r2, #25
 800562c:	4311      	orrs	r1, r2
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005632:	06d2      	lsls	r2, r2, #27
 8005634:	430a      	orrs	r2, r1
 8005636:	4912      	ldr	r1, [pc, #72]	; (8005680 <HAL_RCC_OscConfig+0x784>)
 8005638:	4313      	orrs	r3, r2
 800563a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800563c:	4b10      	ldr	r3, [pc, #64]	; (8005680 <HAL_RCC_OscConfig+0x784>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a0f      	ldr	r2, [pc, #60]	; (8005680 <HAL_RCC_OscConfig+0x784>)
 8005642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005646:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005648:	4b0d      	ldr	r3, [pc, #52]	; (8005680 <HAL_RCC_OscConfig+0x784>)
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	4a0c      	ldr	r2, [pc, #48]	; (8005680 <HAL_RCC_OscConfig+0x784>)
 800564e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005652:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005654:	f7fd fa32 	bl	8002abc <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800565c:	f7fd fa2e 	bl	8002abc <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e058      	b.n	8005720 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800566e:	4b04      	ldr	r3, [pc, #16]	; (8005680 <HAL_RCC_OscConfig+0x784>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0f0      	beq.n	800565c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800567a:	e050      	b.n	800571e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e04f      	b.n	8005720 <HAL_RCC_OscConfig+0x824>
 8005680:	40021000 	.word	0x40021000
 8005684:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005688:	4b27      	ldr	r3, [pc, #156]	; (8005728 <HAL_RCC_OscConfig+0x82c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d144      	bne.n	800571e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005694:	4b24      	ldr	r3, [pc, #144]	; (8005728 <HAL_RCC_OscConfig+0x82c>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a23      	ldr	r2, [pc, #140]	; (8005728 <HAL_RCC_OscConfig+0x82c>)
 800569a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800569e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056a0:	4b21      	ldr	r3, [pc, #132]	; (8005728 <HAL_RCC_OscConfig+0x82c>)
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	4a20      	ldr	r2, [pc, #128]	; (8005728 <HAL_RCC_OscConfig+0x82c>)
 80056a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80056ac:	f7fd fa06 	bl	8002abc <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056b4:	f7fd fa02 	bl	8002abc <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e02c      	b.n	8005720 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056c6:	4b18      	ldr	r3, [pc, #96]	; (8005728 <HAL_RCC_OscConfig+0x82c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0f0      	beq.n	80056b4 <HAL_RCC_OscConfig+0x7b8>
 80056d2:	e024      	b.n	800571e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	2b0c      	cmp	r3, #12
 80056d8:	d01f      	beq.n	800571a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056da:	4b13      	ldr	r3, [pc, #76]	; (8005728 <HAL_RCC_OscConfig+0x82c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a12      	ldr	r2, [pc, #72]	; (8005728 <HAL_RCC_OscConfig+0x82c>)
 80056e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e6:	f7fd f9e9 	bl	8002abc <HAL_GetTick>
 80056ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056ec:	e008      	b.n	8005700 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ee:	f7fd f9e5 	bl	8002abc <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d901      	bls.n	8005700 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e00f      	b.n	8005720 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005700:	4b09      	ldr	r3, [pc, #36]	; (8005728 <HAL_RCC_OscConfig+0x82c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1f0      	bne.n	80056ee <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800570c:	4b06      	ldr	r3, [pc, #24]	; (8005728 <HAL_RCC_OscConfig+0x82c>)
 800570e:	68da      	ldr	r2, [r3, #12]
 8005710:	4905      	ldr	r1, [pc, #20]	; (8005728 <HAL_RCC_OscConfig+0x82c>)
 8005712:	4b06      	ldr	r3, [pc, #24]	; (800572c <HAL_RCC_OscConfig+0x830>)
 8005714:	4013      	ands	r3, r2
 8005716:	60cb      	str	r3, [r1, #12]
 8005718:	e001      	b.n	800571e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e000      	b.n	8005720 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3720      	adds	r7, #32
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40021000 	.word	0x40021000
 800572c:	feeefffc 	.word	0xfeeefffc

08005730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800573a:	2300      	movs	r3, #0
 800573c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e11d      	b.n	8005984 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005748:	4b90      	ldr	r3, [pc, #576]	; (800598c <HAL_RCC_ClockConfig+0x25c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 030f 	and.w	r3, r3, #15
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	429a      	cmp	r2, r3
 8005754:	d910      	bls.n	8005778 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005756:	4b8d      	ldr	r3, [pc, #564]	; (800598c <HAL_RCC_ClockConfig+0x25c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f023 020f 	bic.w	r2, r3, #15
 800575e:	498b      	ldr	r1, [pc, #556]	; (800598c <HAL_RCC_ClockConfig+0x25c>)
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	4313      	orrs	r3, r2
 8005764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005766:	4b89      	ldr	r3, [pc, #548]	; (800598c <HAL_RCC_ClockConfig+0x25c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 030f 	and.w	r3, r3, #15
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	429a      	cmp	r2, r3
 8005772:	d001      	beq.n	8005778 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e105      	b.n	8005984 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	2b00      	cmp	r3, #0
 8005782:	d010      	beq.n	80057a6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	4b81      	ldr	r3, [pc, #516]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005790:	429a      	cmp	r2, r3
 8005792:	d908      	bls.n	80057a6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005794:	4b7e      	ldr	r3, [pc, #504]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	497b      	ldr	r1, [pc, #492]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d079      	beq.n	80058a6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2b03      	cmp	r3, #3
 80057b8:	d11e      	bne.n	80057f8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057ba:	4b75      	ldr	r3, [pc, #468]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e0dc      	b.n	8005984 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80057ca:	f000 fa35 	bl	8005c38 <RCC_GetSysClockFreqFromPLLSource>
 80057ce:	4603      	mov	r3, r0
 80057d0:	4a70      	ldr	r2, [pc, #448]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d946      	bls.n	8005864 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80057d6:	4b6e      	ldr	r3, [pc, #440]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d140      	bne.n	8005864 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057e2:	4b6b      	ldr	r3, [pc, #428]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057ea:	4a69      	ldr	r2, [pc, #420]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 80057ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80057f2:	2380      	movs	r3, #128	; 0x80
 80057f4:	617b      	str	r3, [r7, #20]
 80057f6:	e035      	b.n	8005864 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d107      	bne.n	8005810 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005800:	4b63      	ldr	r3, [pc, #396]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d115      	bne.n	8005838 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e0b9      	b.n	8005984 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d107      	bne.n	8005828 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005818:	4b5d      	ldr	r3, [pc, #372]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d109      	bne.n	8005838 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e0ad      	b.n	8005984 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005828:	4b59      	ldr	r3, [pc, #356]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e0a5      	b.n	8005984 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005838:	f000 f8b4 	bl	80059a4 <HAL_RCC_GetSysClockFreq>
 800583c:	4603      	mov	r3, r0
 800583e:	4a55      	ldr	r2, [pc, #340]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d90f      	bls.n	8005864 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005844:	4b52      	ldr	r3, [pc, #328]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d109      	bne.n	8005864 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005850:	4b4f      	ldr	r3, [pc, #316]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005858:	4a4d      	ldr	r2, [pc, #308]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 800585a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800585e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005860:	2380      	movs	r3, #128	; 0x80
 8005862:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005864:	4b4a      	ldr	r3, [pc, #296]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f023 0203 	bic.w	r2, r3, #3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	4947      	ldr	r1, [pc, #284]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 8005872:	4313      	orrs	r3, r2
 8005874:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005876:	f7fd f921 	bl	8002abc <HAL_GetTick>
 800587a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800587c:	e00a      	b.n	8005894 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800587e:	f7fd f91d 	bl	8002abc <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	f241 3288 	movw	r2, #5000	; 0x1388
 800588c:	4293      	cmp	r3, r2
 800588e:	d901      	bls.n	8005894 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e077      	b.n	8005984 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005894:	4b3e      	ldr	r3, [pc, #248]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f003 020c 	and.w	r2, r3, #12
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d1eb      	bne.n	800587e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2b80      	cmp	r3, #128	; 0x80
 80058aa:	d105      	bne.n	80058b8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80058ac:	4b38      	ldr	r3, [pc, #224]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	4a37      	ldr	r2, [pc, #220]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 80058b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058b6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d010      	beq.n	80058e6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	4b31      	ldr	r3, [pc, #196]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d208      	bcs.n	80058e6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058d4:	4b2e      	ldr	r3, [pc, #184]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	492b      	ldr	r1, [pc, #172]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058e6:	4b29      	ldr	r3, [pc, #164]	; (800598c <HAL_RCC_ClockConfig+0x25c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d210      	bcs.n	8005916 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058f4:	4b25      	ldr	r3, [pc, #148]	; (800598c <HAL_RCC_ClockConfig+0x25c>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f023 020f 	bic.w	r2, r3, #15
 80058fc:	4923      	ldr	r1, [pc, #140]	; (800598c <HAL_RCC_ClockConfig+0x25c>)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	4313      	orrs	r3, r2
 8005902:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005904:	4b21      	ldr	r3, [pc, #132]	; (800598c <HAL_RCC_ClockConfig+0x25c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 030f 	and.w	r3, r3, #15
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	429a      	cmp	r2, r3
 8005910:	d001      	beq.n	8005916 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e036      	b.n	8005984 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0304 	and.w	r3, r3, #4
 800591e:	2b00      	cmp	r3, #0
 8005920:	d008      	beq.n	8005934 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005922:	4b1b      	ldr	r3, [pc, #108]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	4918      	ldr	r1, [pc, #96]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 8005930:	4313      	orrs	r3, r2
 8005932:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0308 	and.w	r3, r3, #8
 800593c:	2b00      	cmp	r3, #0
 800593e:	d009      	beq.n	8005954 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005940:	4b13      	ldr	r3, [pc, #76]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	00db      	lsls	r3, r3, #3
 800594e:	4910      	ldr	r1, [pc, #64]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 8005950:	4313      	orrs	r3, r2
 8005952:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005954:	f000 f826 	bl	80059a4 <HAL_RCC_GetSysClockFreq>
 8005958:	4602      	mov	r2, r0
 800595a:	4b0d      	ldr	r3, [pc, #52]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	091b      	lsrs	r3, r3, #4
 8005960:	f003 030f 	and.w	r3, r3, #15
 8005964:	490c      	ldr	r1, [pc, #48]	; (8005998 <HAL_RCC_ClockConfig+0x268>)
 8005966:	5ccb      	ldrb	r3, [r1, r3]
 8005968:	f003 031f 	and.w	r3, r3, #31
 800596c:	fa22 f303 	lsr.w	r3, r2, r3
 8005970:	4a0a      	ldr	r2, [pc, #40]	; (800599c <HAL_RCC_ClockConfig+0x26c>)
 8005972:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005974:	4b0a      	ldr	r3, [pc, #40]	; (80059a0 <HAL_RCC_ClockConfig+0x270>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4618      	mov	r0, r3
 800597a:	f7fd f84f 	bl	8002a1c <HAL_InitTick>
 800597e:	4603      	mov	r3, r0
 8005980:	73fb      	strb	r3, [r7, #15]

  return status;
 8005982:	7bfb      	ldrb	r3, [r7, #15]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	40022000 	.word	0x40022000
 8005990:	40021000 	.word	0x40021000
 8005994:	04c4b400 	.word	0x04c4b400
 8005998:	08014238 	.word	0x08014238
 800599c:	2000000c 	.word	0x2000000c
 80059a0:	20000010 	.word	0x20000010

080059a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b089      	sub	sp, #36	; 0x24
 80059a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	61fb      	str	r3, [r7, #28]
 80059ae:	2300      	movs	r3, #0
 80059b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059b2:	4b3e      	ldr	r3, [pc, #248]	; (8005aac <HAL_RCC_GetSysClockFreq+0x108>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f003 030c 	and.w	r3, r3, #12
 80059ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059bc:	4b3b      	ldr	r3, [pc, #236]	; (8005aac <HAL_RCC_GetSysClockFreq+0x108>)
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	f003 0303 	and.w	r3, r3, #3
 80059c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d005      	beq.n	80059d8 <HAL_RCC_GetSysClockFreq+0x34>
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	2b0c      	cmp	r3, #12
 80059d0:	d121      	bne.n	8005a16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d11e      	bne.n	8005a16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80059d8:	4b34      	ldr	r3, [pc, #208]	; (8005aac <HAL_RCC_GetSysClockFreq+0x108>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0308 	and.w	r3, r3, #8
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d107      	bne.n	80059f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80059e4:	4b31      	ldr	r3, [pc, #196]	; (8005aac <HAL_RCC_GetSysClockFreq+0x108>)
 80059e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ea:	0a1b      	lsrs	r3, r3, #8
 80059ec:	f003 030f 	and.w	r3, r3, #15
 80059f0:	61fb      	str	r3, [r7, #28]
 80059f2:	e005      	b.n	8005a00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80059f4:	4b2d      	ldr	r3, [pc, #180]	; (8005aac <HAL_RCC_GetSysClockFreq+0x108>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	091b      	lsrs	r3, r3, #4
 80059fa:	f003 030f 	and.w	r3, r3, #15
 80059fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005a00:	4a2b      	ldr	r2, [pc, #172]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10d      	bne.n	8005a2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a14:	e00a      	b.n	8005a2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	2b04      	cmp	r3, #4
 8005a1a:	d102      	bne.n	8005a22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a1c:	4b25      	ldr	r3, [pc, #148]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005a1e:	61bb      	str	r3, [r7, #24]
 8005a20:	e004      	b.n	8005a2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d101      	bne.n	8005a2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a28:	4b23      	ldr	r3, [pc, #140]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005a2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	2b0c      	cmp	r3, #12
 8005a30:	d134      	bne.n	8005a9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a32:	4b1e      	ldr	r3, [pc, #120]	; (8005aac <HAL_RCC_GetSysClockFreq+0x108>)
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f003 0303 	and.w	r3, r3, #3
 8005a3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d003      	beq.n	8005a4a <HAL_RCC_GetSysClockFreq+0xa6>
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2b03      	cmp	r3, #3
 8005a46:	d003      	beq.n	8005a50 <HAL_RCC_GetSysClockFreq+0xac>
 8005a48:	e005      	b.n	8005a56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005a4a:	4b1a      	ldr	r3, [pc, #104]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005a4c:	617b      	str	r3, [r7, #20]
      break;
 8005a4e:	e005      	b.n	8005a5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005a50:	4b19      	ldr	r3, [pc, #100]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005a52:	617b      	str	r3, [r7, #20]
      break;
 8005a54:	e002      	b.n	8005a5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	617b      	str	r3, [r7, #20]
      break;
 8005a5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a5c:	4b13      	ldr	r3, [pc, #76]	; (8005aac <HAL_RCC_GetSysClockFreq+0x108>)
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	091b      	lsrs	r3, r3, #4
 8005a62:	f003 030f 	and.w	r3, r3, #15
 8005a66:	3301      	adds	r3, #1
 8005a68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005a6a:	4b10      	ldr	r3, [pc, #64]	; (8005aac <HAL_RCC_GetSysClockFreq+0x108>)
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	0a1b      	lsrs	r3, r3, #8
 8005a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	fb03 f202 	mul.w	r2, r3, r2
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a82:	4b0a      	ldr	r3, [pc, #40]	; (8005aac <HAL_RCC_GetSysClockFreq+0x108>)
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	0e5b      	lsrs	r3, r3, #25
 8005a88:	f003 0303 	and.w	r3, r3, #3
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005a9c:	69bb      	ldr	r3, [r7, #24]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3724      	adds	r7, #36	; 0x24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	40021000 	.word	0x40021000
 8005ab0:	08014250 	.word	0x08014250
 8005ab4:	00f42400 	.word	0x00f42400
 8005ab8:	007a1200 	.word	0x007a1200

08005abc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ac0:	4b03      	ldr	r3, [pc, #12]	; (8005ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	2000000c 	.word	0x2000000c

08005ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ad8:	f7ff fff0 	bl	8005abc <HAL_RCC_GetHCLKFreq>
 8005adc:	4602      	mov	r2, r0
 8005ade:	4b06      	ldr	r3, [pc, #24]	; (8005af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	0a1b      	lsrs	r3, r3, #8
 8005ae4:	f003 0307 	and.w	r3, r3, #7
 8005ae8:	4904      	ldr	r1, [pc, #16]	; (8005afc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005aea:	5ccb      	ldrb	r3, [r1, r3]
 8005aec:	f003 031f 	and.w	r3, r3, #31
 8005af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	40021000 	.word	0x40021000
 8005afc:	08014248 	.word	0x08014248

08005b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b04:	f7ff ffda 	bl	8005abc <HAL_RCC_GetHCLKFreq>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	4b06      	ldr	r3, [pc, #24]	; (8005b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	0adb      	lsrs	r3, r3, #11
 8005b10:	f003 0307 	and.w	r3, r3, #7
 8005b14:	4904      	ldr	r1, [pc, #16]	; (8005b28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b16:	5ccb      	ldrb	r3, [r1, r3]
 8005b18:	f003 031f 	and.w	r3, r3, #31
 8005b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	40021000 	.word	0x40021000
 8005b28:	08014248 	.word	0x08014248

08005b2c <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005b30:	4b05      	ldr	r3, [pc, #20]	; (8005b48 <HAL_RCC_EnableCSS+0x1c>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a04      	ldr	r2, [pc, #16]	; (8005b48 <HAL_RCC_EnableCSS+0x1c>)
 8005b36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b3a:	6013      	str	r3, [r2, #0]
}
 8005b3c:	bf00      	nop
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	40021000 	.word	0x40021000

08005b4c <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005b50:	4b07      	ldr	r3, [pc, #28]	; (8005b70 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b5c:	d105      	bne.n	8005b6a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005b5e:	f000 f809 	bl	8005b74 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005b62:	4b03      	ldr	r3, [pc, #12]	; (8005b70 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005b64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b68:	621a      	str	r2, [r3, #32]
  }
}
 8005b6a:	bf00      	nop
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	40021000 	.word	0x40021000

08005b74 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005b74:	b480      	push	{r7}
 8005b76:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
	...

08005b84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005b90:	4b27      	ldr	r3, [pc, #156]	; (8005c30 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005b9c:	f7ff f8da 	bl	8004d54 <HAL_PWREx_GetVoltageRange>
 8005ba0:	6178      	str	r0, [r7, #20]
 8005ba2:	e014      	b.n	8005bce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ba4:	4b22      	ldr	r3, [pc, #136]	; (8005c30 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba8:	4a21      	ldr	r2, [pc, #132]	; (8005c30 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bae:	6593      	str	r3, [r2, #88]	; 0x58
 8005bb0:	4b1f      	ldr	r3, [pc, #124]	; (8005c30 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb8:	60fb      	str	r3, [r7, #12]
 8005bba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005bbc:	f7ff f8ca 	bl	8004d54 <HAL_PWREx_GetVoltageRange>
 8005bc0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005bc2:	4b1b      	ldr	r3, [pc, #108]	; (8005c30 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc6:	4a1a      	ldr	r2, [pc, #104]	; (8005c30 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bcc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bd4:	d10b      	bne.n	8005bee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b80      	cmp	r3, #128	; 0x80
 8005bda:	d913      	bls.n	8005c04 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2ba0      	cmp	r3, #160	; 0xa0
 8005be0:	d902      	bls.n	8005be8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005be2:	2302      	movs	r3, #2
 8005be4:	613b      	str	r3, [r7, #16]
 8005be6:	e00d      	b.n	8005c04 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005be8:	2301      	movs	r3, #1
 8005bea:	613b      	str	r3, [r7, #16]
 8005bec:	e00a      	b.n	8005c04 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b7f      	cmp	r3, #127	; 0x7f
 8005bf2:	d902      	bls.n	8005bfa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	613b      	str	r3, [r7, #16]
 8005bf8:	e004      	b.n	8005c04 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b70      	cmp	r3, #112	; 0x70
 8005bfe:	d101      	bne.n	8005c04 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c00:	2301      	movs	r3, #1
 8005c02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c04:	4b0b      	ldr	r3, [pc, #44]	; (8005c34 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f023 020f 	bic.w	r2, r3, #15
 8005c0c:	4909      	ldr	r1, [pc, #36]	; (8005c34 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c14:	4b07      	ldr	r3, [pc, #28]	; (8005c34 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 030f 	and.w	r3, r3, #15
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d001      	beq.n	8005c26 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e000      	b.n	8005c28 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3718      	adds	r7, #24
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	40021000 	.word	0x40021000
 8005c34:	40022000 	.word	0x40022000

08005c38 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b087      	sub	sp, #28
 8005c3c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c3e:	4b2d      	ldr	r3, [pc, #180]	; (8005cf4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f003 0303 	and.w	r3, r3, #3
 8005c46:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2b03      	cmp	r3, #3
 8005c4c:	d00b      	beq.n	8005c66 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d825      	bhi.n	8005ca0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d008      	beq.n	8005c6c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d11f      	bne.n	8005ca0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005c60:	4b25      	ldr	r3, [pc, #148]	; (8005cf8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005c62:	613b      	str	r3, [r7, #16]
    break;
 8005c64:	e01f      	b.n	8005ca6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005c66:	4b25      	ldr	r3, [pc, #148]	; (8005cfc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005c68:	613b      	str	r3, [r7, #16]
    break;
 8005c6a:	e01c      	b.n	8005ca6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c6c:	4b21      	ldr	r3, [pc, #132]	; (8005cf4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0308 	and.w	r3, r3, #8
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d107      	bne.n	8005c88 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c78:	4b1e      	ldr	r3, [pc, #120]	; (8005cf4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c7e:	0a1b      	lsrs	r3, r3, #8
 8005c80:	f003 030f 	and.w	r3, r3, #15
 8005c84:	617b      	str	r3, [r7, #20]
 8005c86:	e005      	b.n	8005c94 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005c88:	4b1a      	ldr	r3, [pc, #104]	; (8005cf4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	091b      	lsrs	r3, r3, #4
 8005c8e:	f003 030f 	and.w	r3, r3, #15
 8005c92:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005c94:	4a1a      	ldr	r2, [pc, #104]	; (8005d00 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c9c:	613b      	str	r3, [r7, #16]
    break;
 8005c9e:	e002      	b.n	8005ca6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	613b      	str	r3, [r7, #16]
    break;
 8005ca4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ca6:	4b13      	ldr	r3, [pc, #76]	; (8005cf4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	091b      	lsrs	r3, r3, #4
 8005cac:	f003 030f 	and.w	r3, r3, #15
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005cb4:	4b0f      	ldr	r3, [pc, #60]	; (8005cf4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	0a1b      	lsrs	r3, r3, #8
 8005cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	fb03 f202 	mul.w	r2, r3, r2
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cca:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ccc:	4b09      	ldr	r3, [pc, #36]	; (8005cf4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	0e5b      	lsrs	r3, r3, #25
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005ce6:	683b      	ldr	r3, [r7, #0]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	371c      	adds	r7, #28
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	40021000 	.word	0x40021000
 8005cf8:	00f42400 	.word	0x00f42400
 8005cfc:	007a1200 	.word	0x007a1200
 8005d00:	08014250 	.word	0x08014250

08005d04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d10:	2300      	movs	r3, #0
 8005d12:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d040      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d24:	2b80      	cmp	r3, #128	; 0x80
 8005d26:	d02a      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d28:	2b80      	cmp	r3, #128	; 0x80
 8005d2a:	d825      	bhi.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005d2c:	2b60      	cmp	r3, #96	; 0x60
 8005d2e:	d026      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d30:	2b60      	cmp	r3, #96	; 0x60
 8005d32:	d821      	bhi.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005d34:	2b40      	cmp	r3, #64	; 0x40
 8005d36:	d006      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005d38:	2b40      	cmp	r3, #64	; 0x40
 8005d3a:	d81d      	bhi.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d009      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005d40:	2b20      	cmp	r3, #32
 8005d42:	d010      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005d44:	e018      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d46:	4b89      	ldr	r3, [pc, #548]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	4a88      	ldr	r2, [pc, #544]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d50:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d52:	e015      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3304      	adds	r3, #4
 8005d58:	2100      	movs	r1, #0
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f001 fa24 	bl	80071a8 <RCCEx_PLLSAI1_Config>
 8005d60:	4603      	mov	r3, r0
 8005d62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d64:	e00c      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	3320      	adds	r3, #32
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f001 fb0f 	bl	8007390 <RCCEx_PLLSAI2_Config>
 8005d72:	4603      	mov	r3, r0
 8005d74:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d76:	e003      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	74fb      	strb	r3, [r7, #19]
      break;
 8005d7c:	e000      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005d7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d80:	7cfb      	ldrb	r3, [r7, #19]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10b      	bne.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d86:	4b79      	ldr	r3, [pc, #484]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d8c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d94:	4975      	ldr	r1, [pc, #468]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005d9c:	e001      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d9e:	7cfb      	ldrb	r3, [r7, #19]
 8005da0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d047      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005db6:	d030      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dbc:	d82a      	bhi.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005dbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dc2:	d02a      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005dc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dc8:	d824      	bhi.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005dca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dce:	d008      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dd4:	d81e      	bhi.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00a      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dde:	d010      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005de0:	e018      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005de2:	4b62      	ldr	r3, [pc, #392]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	4a61      	ldr	r2, [pc, #388]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dec:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005dee:	e015      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3304      	adds	r3, #4
 8005df4:	2100      	movs	r1, #0
 8005df6:	4618      	mov	r0, r3
 8005df8:	f001 f9d6 	bl	80071a8 <RCCEx_PLLSAI1_Config>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e00:	e00c      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	3320      	adds	r3, #32
 8005e06:	2100      	movs	r1, #0
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f001 fac1 	bl	8007390 <RCCEx_PLLSAI2_Config>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e12:	e003      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	74fb      	strb	r3, [r7, #19]
      break;
 8005e18:	e000      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005e1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e1c:	7cfb      	ldrb	r3, [r7, #19]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10b      	bne.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e22:	4b52      	ldr	r3, [pc, #328]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e30:	494e      	ldr	r1, [pc, #312]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005e38:	e001      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e3a:	7cfb      	ldrb	r3, [r7, #19]
 8005e3c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f000 809f 	beq.w	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e50:	4b46      	ldr	r3, [pc, #280]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e000      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005e60:	2300      	movs	r3, #0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00d      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e66:	4b41      	ldr	r3, [pc, #260]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e6a:	4a40      	ldr	r2, [pc, #256]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e70:	6593      	str	r3, [r2, #88]	; 0x58
 8005e72:	4b3e      	ldr	r3, [pc, #248]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e7a:	60bb      	str	r3, [r7, #8]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e82:	4b3b      	ldr	r3, [pc, #236]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a3a      	ldr	r2, [pc, #232]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e8e:	f7fc fe15 	bl	8002abc <HAL_GetTick>
 8005e92:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e94:	e009      	b.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e96:	f7fc fe11 	bl	8002abc <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d902      	bls.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	74fb      	strb	r3, [r7, #19]
        break;
 8005ea8:	e005      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005eaa:	4b31      	ldr	r3, [pc, #196]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0ef      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005eb6:	7cfb      	ldrb	r3, [r7, #19]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d15b      	bne.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ebc:	4b2b      	ldr	r3, [pc, #172]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ec6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d01f      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d019      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005eda:	4b24      	ldr	r3, [pc, #144]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ee4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ee6:	4b21      	ldr	r3, [pc, #132]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eec:	4a1f      	ldr	r2, [pc, #124]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ef2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ef6:	4b1d      	ldr	r3, [pc, #116]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005efc:	4a1b      	ldr	r2, [pc, #108]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f06:	4a19      	ldr	r2, [pc, #100]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d016      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f18:	f7fc fdd0 	bl	8002abc <HAL_GetTick>
 8005f1c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f1e:	e00b      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f20:	f7fc fdcc 	bl	8002abc <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d902      	bls.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	74fb      	strb	r3, [r7, #19]
            break;
 8005f36:	e006      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f38:	4b0c      	ldr	r3, [pc, #48]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d0ec      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005f46:	7cfb      	ldrb	r3, [r7, #19]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10c      	bne.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f4c:	4b07      	ldr	r3, [pc, #28]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f5c:	4903      	ldr	r1, [pc, #12]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005f64:	e008      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f66:	7cfb      	ldrb	r3, [r7, #19]
 8005f68:	74bb      	strb	r3, [r7, #18]
 8005f6a:	e005      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005f6c:	40021000 	.word	0x40021000
 8005f70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f74:	7cfb      	ldrb	r3, [r7, #19]
 8005f76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f78:	7c7b      	ldrb	r3, [r7, #17]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d105      	bne.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f7e:	4ba0      	ldr	r3, [pc, #640]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f82:	4a9f      	ldr	r2, [pc, #636]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f88:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00a      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f96:	4b9a      	ldr	r3, [pc, #616]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f9c:	f023 0203 	bic.w	r2, r3, #3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa4:	4996      	ldr	r1, [pc, #600]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00a      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fb8:	4b91      	ldr	r3, [pc, #580]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fbe:	f023 020c 	bic.w	r2, r3, #12
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	498e      	ldr	r1, [pc, #568]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0304 	and.w	r3, r3, #4
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00a      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005fda:	4b89      	ldr	r3, [pc, #548]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe8:	4985      	ldr	r1, [pc, #532]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0308 	and.w	r3, r3, #8
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00a      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ffc:	4b80      	ldr	r3, [pc, #512]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006002:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800600a:	497d      	ldr	r1, [pc, #500]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800600c:	4313      	orrs	r3, r2
 800600e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0310 	and.w	r3, r3, #16
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00a      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800601e:	4b78      	ldr	r3, [pc, #480]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006024:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800602c:	4974      	ldr	r1, [pc, #464]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800602e:	4313      	orrs	r3, r2
 8006030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0320 	and.w	r3, r3, #32
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00a      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006040:	4b6f      	ldr	r3, [pc, #444]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006046:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800604e:	496c      	ldr	r1, [pc, #432]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006050:	4313      	orrs	r3, r2
 8006052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00a      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006062:	4b67      	ldr	r3, [pc, #412]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006068:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006070:	4963      	ldr	r1, [pc, #396]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006072:	4313      	orrs	r3, r2
 8006074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00a      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006084:	4b5e      	ldr	r3, [pc, #376]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006092:	495b      	ldr	r1, [pc, #364]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006094:	4313      	orrs	r3, r2
 8006096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00a      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060a6:	4b56      	ldr	r3, [pc, #344]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b4:	4952      	ldr	r1, [pc, #328]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00a      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060c8:	4b4d      	ldr	r3, [pc, #308]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d6:	494a      	ldr	r1, [pc, #296]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00a      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060ea:	4b45      	ldr	r3, [pc, #276]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f8:	4941      	ldr	r1, [pc, #260]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00a      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800610c:	4b3c      	ldr	r3, [pc, #240]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800610e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006112:	f023 0203 	bic.w	r2, r3, #3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800611a:	4939      	ldr	r1, [pc, #228]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800611c:	4313      	orrs	r3, r2
 800611e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d028      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800612e:	4b34      	ldr	r3, [pc, #208]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006134:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800613c:	4930      	ldr	r1, [pc, #192]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800613e:	4313      	orrs	r3, r2
 8006140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006148:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800614c:	d106      	bne.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800614e:	4b2c      	ldr	r3, [pc, #176]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	4a2b      	ldr	r2, [pc, #172]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006154:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006158:	60d3      	str	r3, [r2, #12]
 800615a:	e011      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006160:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006164:	d10c      	bne.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3304      	adds	r3, #4
 800616a:	2101      	movs	r1, #1
 800616c:	4618      	mov	r0, r3
 800616e:	f001 f81b 	bl	80071a8 <RCCEx_PLLSAI1_Config>
 8006172:	4603      	mov	r3, r0
 8006174:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006176:	7cfb      	ldrb	r3, [r7, #19]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800617c:	7cfb      	ldrb	r3, [r7, #19]
 800617e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d04d      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006190:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006194:	d108      	bne.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006196:	4b1a      	ldr	r3, [pc, #104]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006198:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800619c:	4a18      	ldr	r2, [pc, #96]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800619e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061a2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80061a6:	e012      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80061a8:	4b15      	ldr	r3, [pc, #84]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061ae:	4a14      	ldr	r2, [pc, #80]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061b4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80061b8:	4b11      	ldr	r3, [pc, #68]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061c6:	490e      	ldr	r1, [pc, #56]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061d6:	d106      	bne.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061d8:	4b09      	ldr	r3, [pc, #36]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	4a08      	ldr	r2, [pc, #32]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061e2:	60d3      	str	r3, [r2, #12]
 80061e4:	e020      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061ee:	d109      	bne.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80061f0:	4b03      	ldr	r3, [pc, #12]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	4a02      	ldr	r2, [pc, #8]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061fa:	60d3      	str	r3, [r2, #12]
 80061fc:	e014      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80061fe:	bf00      	nop
 8006200:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006208:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800620c:	d10c      	bne.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	3304      	adds	r3, #4
 8006212:	2101      	movs	r1, #1
 8006214:	4618      	mov	r0, r3
 8006216:	f000 ffc7 	bl	80071a8 <RCCEx_PLLSAI1_Config>
 800621a:	4603      	mov	r3, r0
 800621c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800621e:	7cfb      	ldrb	r3, [r7, #19]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006224:	7cfb      	ldrb	r3, [r7, #19]
 8006226:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d028      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006234:	4b4a      	ldr	r3, [pc, #296]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800623a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006242:	4947      	ldr	r1, [pc, #284]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006244:	4313      	orrs	r3, r2
 8006246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800624e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006252:	d106      	bne.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006254:	4b42      	ldr	r3, [pc, #264]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	4a41      	ldr	r2, [pc, #260]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800625a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800625e:	60d3      	str	r3, [r2, #12]
 8006260:	e011      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006266:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800626a:	d10c      	bne.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	3304      	adds	r3, #4
 8006270:	2101      	movs	r1, #1
 8006272:	4618      	mov	r0, r3
 8006274:	f000 ff98 	bl	80071a8 <RCCEx_PLLSAI1_Config>
 8006278:	4603      	mov	r3, r0
 800627a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800627c:	7cfb      	ldrb	r3, [r7, #19]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006282:	7cfb      	ldrb	r3, [r7, #19]
 8006284:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d01e      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006292:	4b33      	ldr	r3, [pc, #204]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006298:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062a2:	492f      	ldr	r1, [pc, #188]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062a4:	4313      	orrs	r3, r2
 80062a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062b4:	d10c      	bne.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	3304      	adds	r3, #4
 80062ba:	2102      	movs	r1, #2
 80062bc:	4618      	mov	r0, r3
 80062be:	f000 ff73 	bl	80071a8 <RCCEx_PLLSAI1_Config>
 80062c2:	4603      	mov	r3, r0
 80062c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062c6:	7cfb      	ldrb	r3, [r7, #19]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80062cc:	7cfb      	ldrb	r3, [r7, #19]
 80062ce:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00b      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80062dc:	4b20      	ldr	r3, [pc, #128]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062e2:	f023 0204 	bic.w	r2, r3, #4
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062ec:	491c      	ldr	r1, [pc, #112]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00b      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006300:	4b17      	ldr	r3, [pc, #92]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006302:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006306:	f023 0218 	bic.w	r2, r3, #24
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006310:	4913      	ldr	r1, [pc, #76]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006312:	4313      	orrs	r3, r2
 8006314:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d017      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006324:	4b0e      	ldr	r3, [pc, #56]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006326:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800632a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006334:	490a      	ldr	r1, [pc, #40]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006336:	4313      	orrs	r3, r2
 8006338:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006342:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006346:	d105      	bne.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006348:	4b05      	ldr	r3, [pc, #20]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	4a04      	ldr	r2, [pc, #16]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800634e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006352:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006354:	7cbb      	ldrb	r3, [r7, #18]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3718      	adds	r7, #24
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	40021000 	.word	0x40021000

08006364 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b088      	sub	sp, #32
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800636c:	2300      	movs	r3, #0
 800636e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006376:	d13e      	bne.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006378:	4bb6      	ldr	r3, [pc, #728]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800637a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800637e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006382:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800638a:	d028      	beq.n	80063de <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006392:	f200 86f4 	bhi.w	800717e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800639c:	d005      	beq.n	80063aa <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063a4:	d00e      	beq.n	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80063a6:	f000 beea 	b.w	800717e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80063aa:	4baa      	ldr	r3, [pc, #680]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80063ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	f040 86e4 	bne.w	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 80063ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063be:	61fb      	str	r3, [r7, #28]
      break;
 80063c0:	f000 bedf 	b.w	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80063c4:	4ba3      	ldr	r3, [pc, #652]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80063c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	f040 86d9 	bne.w	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 80063d4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80063d8:	61fb      	str	r3, [r7, #28]
      break;
 80063da:	f000 bed4 	b.w	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80063de:	4b9d      	ldr	r3, [pc, #628]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063ea:	f040 86ce 	bne.w	800718a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 80063ee:	4b9a      	ldr	r3, [pc, #616]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80063f0:	61fb      	str	r3, [r7, #28]
      break;
 80063f2:	f000 beca 	b.w	800718a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063f6:	4b97      	ldr	r3, [pc, #604]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	f003 0303 	and.w	r3, r3, #3
 80063fe:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	2b03      	cmp	r3, #3
 8006404:	d036      	beq.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	2b03      	cmp	r3, #3
 800640a:	d840      	bhi.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d003      	beq.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	2b02      	cmp	r3, #2
 8006416:	d020      	beq.n	800645a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8006418:	e039      	b.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800641a:	4b8e      	ldr	r3, [pc, #568]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b02      	cmp	r3, #2
 8006424:	d116      	bne.n	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006426:	4b8b      	ldr	r3, [pc, #556]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0308 	and.w	r3, r3, #8
 800642e:	2b00      	cmp	r3, #0
 8006430:	d005      	beq.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8006432:	4b88      	ldr	r3, [pc, #544]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	091b      	lsrs	r3, r3, #4
 8006438:	f003 030f 	and.w	r3, r3, #15
 800643c:	e005      	b.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800643e:	4b85      	ldr	r3, [pc, #532]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006444:	0a1b      	lsrs	r3, r3, #8
 8006446:	f003 030f 	and.w	r3, r3, #15
 800644a:	4a84      	ldr	r2, [pc, #528]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800644c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006450:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006452:	e01f      	b.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	61bb      	str	r3, [r7, #24]
      break;
 8006458:	e01c      	b.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800645a:	4b7e      	ldr	r3, [pc, #504]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006466:	d102      	bne.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8006468:	4b7d      	ldr	r3, [pc, #500]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800646a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800646c:	e012      	b.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	61bb      	str	r3, [r7, #24]
      break;
 8006472:	e00f      	b.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006474:	4b77      	ldr	r3, [pc, #476]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800647c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006480:	d102      	bne.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8006482:	4b78      	ldr	r3, [pc, #480]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8006484:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006486:	e005      	b.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006488:	2300      	movs	r3, #0
 800648a:	61bb      	str	r3, [r7, #24]
      break;
 800648c:	e002      	b.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800648e:	2300      	movs	r3, #0
 8006490:	61bb      	str	r3, [r7, #24]
      break;
 8006492:	bf00      	nop
    }

    switch(PeriphClk)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800649a:	f000 8606 	beq.w	80070aa <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064a4:	f200 8673 	bhi.w	800718e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064ae:	f000 8469 	beq.w	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064b8:	f200 8669 	bhi.w	800718e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064c2:	f000 8531 	beq.w	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064cc:	f200 865f 	bhi.w	800718e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80064d6:	f000 8187 	beq.w	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80064e0:	f200 8655 	bhi.w	800718e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064ea:	f000 80cd 	beq.w	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064f4:	f200 864b 	bhi.w	800718e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064fe:	f000 8430 	beq.w	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006508:	f200 8641 	bhi.w	800718e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006512:	f000 83e4 	beq.w	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800651c:	f200 8637 	bhi.w	800718e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006526:	f000 80af 	beq.w	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006530:	f200 862d 	bhi.w	800718e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800653a:	f000 809d 	beq.w	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006544:	f200 8623 	bhi.w	800718e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800654e:	f000 808b 	beq.w	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006558:	f200 8619 	bhi.w	800718e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006562:	f000 8554 	beq.w	800700e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800656c:	f200 860f 	bhi.w	800718e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006576:	f000 8500 	beq.w	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006580:	f200 8605 	bhi.w	800718e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800658a:	f000 84a1 	beq.w	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006594:	f200 85fb 	bhi.w	800718e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b80      	cmp	r3, #128	; 0x80
 800659c:	f000 846c 	beq.w	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b80      	cmp	r3, #128	; 0x80
 80065a4:	f200 85f3 	bhi.w	800718e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b20      	cmp	r3, #32
 80065ac:	d84c      	bhi.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 85ec 	beq.w	800718e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	3b01      	subs	r3, #1
 80065ba:	2b1f      	cmp	r3, #31
 80065bc:	f200 85e7 	bhi.w	800718e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80065c0:	a201      	add	r2, pc, #4	; (adr r2, 80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80065c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c6:	bf00      	nop
 80065c8:	080069dd 	.word	0x080069dd
 80065cc:	08006a4b 	.word	0x08006a4b
 80065d0:	0800718f 	.word	0x0800718f
 80065d4:	08006adf 	.word	0x08006adf
 80065d8:	0800718f 	.word	0x0800718f
 80065dc:	0800718f 	.word	0x0800718f
 80065e0:	0800718f 	.word	0x0800718f
 80065e4:	08006b57 	.word	0x08006b57
 80065e8:	0800718f 	.word	0x0800718f
 80065ec:	0800718f 	.word	0x0800718f
 80065f0:	0800718f 	.word	0x0800718f
 80065f4:	0800718f 	.word	0x0800718f
 80065f8:	0800718f 	.word	0x0800718f
 80065fc:	0800718f 	.word	0x0800718f
 8006600:	0800718f 	.word	0x0800718f
 8006604:	08006bdb 	.word	0x08006bdb
 8006608:	0800718f 	.word	0x0800718f
 800660c:	0800718f 	.word	0x0800718f
 8006610:	0800718f 	.word	0x0800718f
 8006614:	0800718f 	.word	0x0800718f
 8006618:	0800718f 	.word	0x0800718f
 800661c:	0800718f 	.word	0x0800718f
 8006620:	0800718f 	.word	0x0800718f
 8006624:	0800718f 	.word	0x0800718f
 8006628:	0800718f 	.word	0x0800718f
 800662c:	0800718f 	.word	0x0800718f
 8006630:	0800718f 	.word	0x0800718f
 8006634:	0800718f 	.word	0x0800718f
 8006638:	0800718f 	.word	0x0800718f
 800663c:	0800718f 	.word	0x0800718f
 8006640:	0800718f 	.word	0x0800718f
 8006644:	08006c5d 	.word	0x08006c5d
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b40      	cmp	r3, #64	; 0x40
 800664c:	f000 83e8 	beq.w	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8006650:	f000 bd9d 	b.w	800718e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006654:	40021000 	.word	0x40021000
 8006658:	0003d090 	.word	0x0003d090
 800665c:	08014250 	.word	0x08014250
 8006660:	00f42400 	.word	0x00f42400
 8006664:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006668:	69b9      	ldr	r1, [r7, #24]
 800666a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800666e:	f000 ff83 	bl	8007578 <RCCEx_GetSAIxPeriphCLKFreq>
 8006672:	61f8      	str	r0, [r7, #28]
      break;
 8006674:	f000 bd8e 	b.w	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8006678:	69b9      	ldr	r1, [r7, #24]
 800667a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800667e:	f000 ff7b 	bl	8007578 <RCCEx_GetSAIxPeriphCLKFreq>
 8006682:	61f8      	str	r0, [r7, #28]
      break;
 8006684:	f000 bd86 	b.w	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006688:	4b9a      	ldr	r3, [pc, #616]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800668a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800668e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800669a:	d015      	beq.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80066a2:	f200 8092 	bhi.w	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066ac:	d029      	beq.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066b4:	f200 8089 	bhi.w	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d07b      	beq.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066c4:	d04a      	beq.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 80066c6:	e080      	b.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80066c8:	4b8a      	ldr	r3, [pc, #552]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d17d      	bne.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80066d4:	4b87      	ldr	r3, [pc, #540]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0308 	and.w	r3, r3, #8
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d005      	beq.n	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 80066e0:	4b84      	ldr	r3, [pc, #528]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	091b      	lsrs	r3, r3, #4
 80066e6:	f003 030f 	and.w	r3, r3, #15
 80066ea:	e005      	b.n	80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 80066ec:	4b81      	ldr	r3, [pc, #516]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80066ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066f2:	0a1b      	lsrs	r3, r3, #8
 80066f4:	f003 030f 	and.w	r3, r3, #15
 80066f8:	4a7f      	ldr	r2, [pc, #508]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80066fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066fe:	61fb      	str	r3, [r7, #28]
          break;
 8006700:	e066      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006702:	4b7c      	ldr	r3, [pc, #496]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800670a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800670e:	d162      	bne.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006710:	4b78      	ldr	r3, [pc, #480]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006718:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800671c:	d15b      	bne.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800671e:	4b75      	ldr	r3, [pc, #468]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	0a1b      	lsrs	r3, r3, #8
 8006724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006728:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	fb03 f202 	mul.w	r2, r3, r2
 8006732:	4b70      	ldr	r3, [pc, #448]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	091b      	lsrs	r3, r3, #4
 8006738:	f003 030f 	and.w	r3, r3, #15
 800673c:	3301      	adds	r3, #1
 800673e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006742:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006744:	4b6b      	ldr	r3, [pc, #428]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	0d5b      	lsrs	r3, r3, #21
 800674a:	f003 0303 	and.w	r3, r3, #3
 800674e:	3301      	adds	r3, #1
 8006750:	005b      	lsls	r3, r3, #1
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	fbb2 f3f3 	udiv	r3, r2, r3
 8006758:	61fb      	str	r3, [r7, #28]
          break;
 800675a:	e03c      	b.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800675c:	4b65      	ldr	r3, [pc, #404]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006764:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006768:	d138      	bne.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800676a:	4b62      	ldr	r3, [pc, #392]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006776:	d131      	bne.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006778:	4b5e      	ldr	r3, [pc, #376]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	0a1b      	lsrs	r3, r3, #8
 800677e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006782:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	fb03 f202 	mul.w	r2, r3, r2
 800678c:	4b59      	ldr	r3, [pc, #356]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	091b      	lsrs	r3, r3, #4
 8006792:	f003 030f 	and.w	r3, r3, #15
 8006796:	3301      	adds	r3, #1
 8006798:	fbb2 f3f3 	udiv	r3, r2, r3
 800679c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800679e:	4b55      	ldr	r3, [pc, #340]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	0d5b      	lsrs	r3, r3, #21
 80067a4:	f003 0303 	and.w	r3, r3, #3
 80067a8:	3301      	adds	r3, #1
 80067aa:	005b      	lsls	r3, r3, #1
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b2:	61fb      	str	r3, [r7, #28]
          break;
 80067b4:	e012      	b.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80067b6:	4b4f      	ldr	r3, [pc, #316]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80067b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d10e      	bne.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 80067c4:	4b4d      	ldr	r3, [pc, #308]	; (80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80067c6:	61fb      	str	r3, [r7, #28]
          break;
 80067c8:	e00b      	b.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 80067ca:	bf00      	nop
 80067cc:	f000 bce2 	b.w	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80067d0:	bf00      	nop
 80067d2:	f000 bcdf 	b.w	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80067d6:	bf00      	nop
 80067d8:	f000 bcdc 	b.w	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80067dc:	bf00      	nop
 80067de:	f000 bcd9 	b.w	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80067e2:	bf00      	nop
        break;
 80067e4:	f000 bcd6 	b.w	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80067e8:	4b42      	ldr	r3, [pc, #264]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80067ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067f6:	d13d      	bne.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80067f8:	4b3e      	ldr	r3, [pc, #248]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006800:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006804:	f040 84c5 	bne.w	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8006808:	4b3a      	ldr	r3, [pc, #232]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006814:	f040 84bd 	bne.w	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006818:	4b36      	ldr	r3, [pc, #216]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	0a1b      	lsrs	r3, r3, #8
 800681e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006822:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	fb03 f202 	mul.w	r2, r3, r2
 800682c:	4b31      	ldr	r3, [pc, #196]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	091b      	lsrs	r3, r3, #4
 8006832:	f003 030f 	and.w	r3, r3, #15
 8006836:	3301      	adds	r3, #1
 8006838:	fbb2 f3f3 	udiv	r3, r2, r3
 800683c:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800683e:	4b2d      	ldr	r3, [pc, #180]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	0edb      	lsrs	r3, r3, #27
 8006844:	f003 031f 	and.w	r3, r3, #31
 8006848:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10a      	bne.n	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006850:	4b28      	ldr	r3, [pc, #160]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d002      	beq.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 800685c:	2311      	movs	r3, #17
 800685e:	617b      	str	r3, [r7, #20]
 8006860:	e001      	b.n	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8006862:	2307      	movs	r3, #7
 8006864:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	fbb2 f3f3 	udiv	r3, r2, r3
 800686e:	61fb      	str	r3, [r7, #28]
      break;
 8006870:	f000 bc8f 	b.w	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006874:	4b1f      	ldr	r3, [pc, #124]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800687a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800687e:	60fb      	str	r3, [r7, #12]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006886:	d016      	beq.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800688e:	f200 809b 	bhi.w	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006898:	d032      	beq.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068a0:	f200 8092 	bhi.w	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 8084 	beq.w	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068b2:	d052      	beq.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 80068b4:	e088      	b.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80068b6:	4b0f      	ldr	r3, [pc, #60]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b02      	cmp	r3, #2
 80068c0:	f040 8084 	bne.w	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80068c4:	4b0b      	ldr	r3, [pc, #44]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0308 	and.w	r3, r3, #8
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d005      	beq.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80068d0:	4b08      	ldr	r3, [pc, #32]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	091b      	lsrs	r3, r3, #4
 80068d6:	f003 030f 	and.w	r3, r3, #15
 80068da:	e005      	b.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 80068dc:	4b05      	ldr	r3, [pc, #20]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068e2:	0a1b      	lsrs	r3, r3, #8
 80068e4:	f003 030f 	and.w	r3, r3, #15
 80068e8:	4a03      	ldr	r2, [pc, #12]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80068ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068ee:	61fb      	str	r3, [r7, #28]
          break;
 80068f0:	e06c      	b.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 80068f2:	bf00      	nop
 80068f4:	40021000 	.word	0x40021000
 80068f8:	08014250 	.word	0x08014250
 80068fc:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006900:	4ba5      	ldr	r3, [pc, #660]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006908:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800690c:	d160      	bne.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800690e:	4ba2      	ldr	r3, [pc, #648]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800691a:	d159      	bne.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800691c:	4b9e      	ldr	r3, [pc, #632]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	0a1b      	lsrs	r3, r3, #8
 8006922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006926:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	fb03 f202 	mul.w	r2, r3, r2
 8006930:	4b99      	ldr	r3, [pc, #612]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	091b      	lsrs	r3, r3, #4
 8006936:	f003 030f 	and.w	r3, r3, #15
 800693a:	3301      	adds	r3, #1
 800693c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006940:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006942:	4b95      	ldr	r3, [pc, #596]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	0d5b      	lsrs	r3, r3, #21
 8006948:	f003 0303 	and.w	r3, r3, #3
 800694c:	3301      	adds	r3, #1
 800694e:	005b      	lsls	r3, r3, #1
 8006950:	69ba      	ldr	r2, [r7, #24]
 8006952:	fbb2 f3f3 	udiv	r3, r2, r3
 8006956:	61fb      	str	r3, [r7, #28]
          break;
 8006958:	e03a      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800695a:	4b8f      	ldr	r3, [pc, #572]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006962:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006966:	d135      	bne.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006968:	4b8b      	ldr	r3, [pc, #556]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006970:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006974:	d12e      	bne.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006976:	4b88      	ldr	r3, [pc, #544]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	0a1b      	lsrs	r3, r3, #8
 800697c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006980:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	fb03 f202 	mul.w	r2, r3, r2
 800698a:	4b83      	ldr	r3, [pc, #524]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	091b      	lsrs	r3, r3, #4
 8006990:	f003 030f 	and.w	r3, r3, #15
 8006994:	3301      	adds	r3, #1
 8006996:	fbb2 f3f3 	udiv	r3, r2, r3
 800699a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800699c:	4b7e      	ldr	r3, [pc, #504]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	0d5b      	lsrs	r3, r3, #21
 80069a2:	f003 0303 	and.w	r3, r3, #3
 80069a6:	3301      	adds	r3, #1
 80069a8:	005b      	lsls	r3, r3, #1
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b0:	61fb      	str	r3, [r7, #28]
          break;
 80069b2:	e00f      	b.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80069b4:	4b78      	ldr	r3, [pc, #480]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80069b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069ba:	f003 0302 	and.w	r3, r3, #2
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d10a      	bne.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 80069c2:	4b76      	ldr	r3, [pc, #472]	; (8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80069c4:	61fb      	str	r3, [r7, #28]
          break;
 80069c6:	e007      	b.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 80069c8:	bf00      	nop
 80069ca:	e3e2      	b.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80069cc:	bf00      	nop
 80069ce:	e3e0      	b.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80069d0:	bf00      	nop
 80069d2:	e3de      	b.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80069d4:	bf00      	nop
 80069d6:	e3dc      	b.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80069d8:	bf00      	nop
      break;
 80069da:	e3da      	b.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80069dc:	4b6e      	ldr	r3, [pc, #440]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80069de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069e2:	f003 0303 	and.w	r3, r3, #3
 80069e6:	60fb      	str	r3, [r7, #12]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2b03      	cmp	r3, #3
 80069ec:	d827      	bhi.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80069ee:	a201      	add	r2, pc, #4	; (adr r2, 80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 80069f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f4:	08006a05 	.word	0x08006a05
 80069f8:	08006a0d 	.word	0x08006a0d
 80069fc:	08006a15 	.word	0x08006a15
 8006a00:	08006a29 	.word	0x08006a29
          frequency = HAL_RCC_GetPCLK2Freq();
 8006a04:	f7ff f87c 	bl	8005b00 <HAL_RCC_GetPCLK2Freq>
 8006a08:	61f8      	str	r0, [r7, #28]
          break;
 8006a0a:	e01d      	b.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8006a0c:	f7fe ffca 	bl	80059a4 <HAL_RCC_GetSysClockFreq>
 8006a10:	61f8      	str	r0, [r7, #28]
          break;
 8006a12:	e019      	b.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a14:	4b60      	ldr	r3, [pc, #384]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a20:	d10f      	bne.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8006a22:	4b5f      	ldr	r3, [pc, #380]	; (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a24:	61fb      	str	r3, [r7, #28]
          break;
 8006a26:	e00c      	b.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a28:	4b5b      	ldr	r3, [pc, #364]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d107      	bne.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8006a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a3a:	61fb      	str	r3, [r7, #28]
          break;
 8006a3c:	e003      	b.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8006a3e:	bf00      	nop
 8006a40:	e3a8      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a42:	bf00      	nop
 8006a44:	e3a6      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a46:	bf00      	nop
        break;
 8006a48:	e3a4      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006a4a:	4b53      	ldr	r3, [pc, #332]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a50:	f003 030c 	and.w	r3, r3, #12
 8006a54:	60fb      	str	r3, [r7, #12]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2b0c      	cmp	r3, #12
 8006a5a:	d83a      	bhi.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006a5c:	a201      	add	r2, pc, #4	; (adr r2, 8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8006a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a62:	bf00      	nop
 8006a64:	08006a99 	.word	0x08006a99
 8006a68:	08006ad3 	.word	0x08006ad3
 8006a6c:	08006ad3 	.word	0x08006ad3
 8006a70:	08006ad3 	.word	0x08006ad3
 8006a74:	08006aa1 	.word	0x08006aa1
 8006a78:	08006ad3 	.word	0x08006ad3
 8006a7c:	08006ad3 	.word	0x08006ad3
 8006a80:	08006ad3 	.word	0x08006ad3
 8006a84:	08006aa9 	.word	0x08006aa9
 8006a88:	08006ad3 	.word	0x08006ad3
 8006a8c:	08006ad3 	.word	0x08006ad3
 8006a90:	08006ad3 	.word	0x08006ad3
 8006a94:	08006abd 	.word	0x08006abd
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a98:	f7ff f81c 	bl	8005ad4 <HAL_RCC_GetPCLK1Freq>
 8006a9c:	61f8      	str	r0, [r7, #28]
          break;
 8006a9e:	e01d      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8006aa0:	f7fe ff80 	bl	80059a4 <HAL_RCC_GetSysClockFreq>
 8006aa4:	61f8      	str	r0, [r7, #28]
          break;
 8006aa6:	e019      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006aa8:	4b3b      	ldr	r3, [pc, #236]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ab4:	d10f      	bne.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8006ab6:	4b3a      	ldr	r3, [pc, #232]	; (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006ab8:	61fb      	str	r3, [r7, #28]
          break;
 8006aba:	e00c      	b.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006abc:	4b36      	ldr	r3, [pc, #216]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d107      	bne.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8006aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ace:	61fb      	str	r3, [r7, #28]
          break;
 8006ad0:	e003      	b.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8006ad2:	bf00      	nop
 8006ad4:	e35e      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006ad6:	bf00      	nop
 8006ad8:	e35c      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006ada:	bf00      	nop
        break;
 8006adc:	e35a      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006ade:	4b2e      	ldr	r3, [pc, #184]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ae8:	60fb      	str	r3, [r7, #12]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2b30      	cmp	r3, #48	; 0x30
 8006aee:	d021      	beq.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2b30      	cmp	r3, #48	; 0x30
 8006af4:	d829      	bhi.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2b20      	cmp	r3, #32
 8006afa:	d011      	beq.n	8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2b20      	cmp	r3, #32
 8006b00:	d823      	bhi.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d003      	beq.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2b10      	cmp	r3, #16
 8006b0c:	d004      	beq.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8006b0e:	e01c      	b.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b10:	f7fe ffe0 	bl	8005ad4 <HAL_RCC_GetPCLK1Freq>
 8006b14:	61f8      	str	r0, [r7, #28]
          break;
 8006b16:	e01d      	b.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006b18:	f7fe ff44 	bl	80059a4 <HAL_RCC_GetSysClockFreq>
 8006b1c:	61f8      	str	r0, [r7, #28]
          break;
 8006b1e:	e019      	b.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b20:	4b1d      	ldr	r3, [pc, #116]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b2c:	d10f      	bne.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8006b2e:	4b1c      	ldr	r3, [pc, #112]	; (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b30:	61fb      	str	r3, [r7, #28]
          break;
 8006b32:	e00c      	b.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b34:	4b18      	ldr	r3, [pc, #96]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d107      	bne.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8006b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b46:	61fb      	str	r3, [r7, #28]
          break;
 8006b48:	e003      	b.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8006b4a:	bf00      	nop
 8006b4c:	e322      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006b4e:	bf00      	nop
 8006b50:	e320      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006b52:	bf00      	nop
        break;
 8006b54:	e31e      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006b56:	4b10      	ldr	r3, [pc, #64]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b60:	60fb      	str	r3, [r7, #12]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2bc0      	cmp	r3, #192	; 0xc0
 8006b66:	d027      	beq.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2bc0      	cmp	r3, #192	; 0xc0
 8006b6c:	d82f      	bhi.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2b80      	cmp	r3, #128	; 0x80
 8006b72:	d017      	beq.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2b80      	cmp	r3, #128	; 0x80
 8006b78:	d829      	bhi.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d003      	beq.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2b40      	cmp	r3, #64	; 0x40
 8006b84:	d004      	beq.n	8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8006b86:	e022      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b88:	f7fe ffa4 	bl	8005ad4 <HAL_RCC_GetPCLK1Freq>
 8006b8c:	61f8      	str	r0, [r7, #28]
          break;
 8006b8e:	e023      	b.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8006b90:	f7fe ff08 	bl	80059a4 <HAL_RCC_GetSysClockFreq>
 8006b94:	61f8      	str	r0, [r7, #28]
          break;
 8006b96:	e01f      	b.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8006b98:	40021000 	.word	0x40021000
 8006b9c:	02dc6c00 	.word	0x02dc6c00
 8006ba0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ba4:	4b9b      	ldr	r3, [pc, #620]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bb0:	d10f      	bne.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8006bb2:	4b99      	ldr	r3, [pc, #612]	; (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006bb4:	61fb      	str	r3, [r7, #28]
          break;
 8006bb6:	e00c      	b.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006bb8:	4b96      	ldr	r3, [pc, #600]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d107      	bne.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8006bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bca:	61fb      	str	r3, [r7, #28]
          break;
 8006bcc:	e003      	b.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8006bce:	bf00      	nop
 8006bd0:	e2e0      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006bd2:	bf00      	nop
 8006bd4:	e2de      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006bd6:	bf00      	nop
        break;
 8006bd8:	e2dc      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006bda:	4b8e      	ldr	r3, [pc, #568]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006be4:	60fb      	str	r3, [r7, #12]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bec:	d025      	beq.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bf4:	d82c      	bhi.n	8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bfc:	d013      	beq.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c04:	d824      	bhi.n	8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d004      	beq.n	8006c16 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c12:	d004      	beq.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8006c14:	e01c      	b.n	8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c16:	f7fe ff5d 	bl	8005ad4 <HAL_RCC_GetPCLK1Freq>
 8006c1a:	61f8      	str	r0, [r7, #28]
          break;
 8006c1c:	e01d      	b.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c1e:	f7fe fec1 	bl	80059a4 <HAL_RCC_GetSysClockFreq>
 8006c22:	61f8      	str	r0, [r7, #28]
          break;
 8006c24:	e019      	b.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c26:	4b7b      	ldr	r3, [pc, #492]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c32:	d10f      	bne.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8006c34:	4b78      	ldr	r3, [pc, #480]	; (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006c36:	61fb      	str	r3, [r7, #28]
          break;
 8006c38:	e00c      	b.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c3a:	4b76      	ldr	r3, [pc, #472]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c40:	f003 0302 	and.w	r3, r3, #2
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d107      	bne.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8006c48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c4c:	61fb      	str	r3, [r7, #28]
          break;
 8006c4e:	e003      	b.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8006c50:	bf00      	nop
 8006c52:	e29f      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006c54:	bf00      	nop
 8006c56:	e29d      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006c58:	bf00      	nop
        break;
 8006c5a:	e29b      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006c5c:	4b6d      	ldr	r3, [pc, #436]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c62:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c66:	60fb      	str	r3, [r7, #12]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c6e:	d025      	beq.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c76:	d82c      	bhi.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c7e:	d013      	beq.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c86:	d824      	bhi.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d004      	beq.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c94:	d004      	beq.n	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8006c96:	e01c      	b.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c98:	f7fe ff1c 	bl	8005ad4 <HAL_RCC_GetPCLK1Freq>
 8006c9c:	61f8      	str	r0, [r7, #28]
          break;
 8006c9e:	e01d      	b.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ca0:	f7fe fe80 	bl	80059a4 <HAL_RCC_GetSysClockFreq>
 8006ca4:	61f8      	str	r0, [r7, #28]
          break;
 8006ca6:	e019      	b.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ca8:	4b5a      	ldr	r3, [pc, #360]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cb4:	d10f      	bne.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8006cb6:	4b58      	ldr	r3, [pc, #352]	; (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006cb8:	61fb      	str	r3, [r7, #28]
          break;
 8006cba:	e00c      	b.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006cbc:	4b55      	ldr	r3, [pc, #340]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d107      	bne.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8006cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cce:	61fb      	str	r3, [r7, #28]
          break;
 8006cd0:	e003      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8006cd2:	bf00      	nop
 8006cd4:	e25e      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006cd6:	bf00      	nop
 8006cd8:	e25c      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006cda:	bf00      	nop
        break;
 8006cdc:	e25a      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006cde:	4b4d      	ldr	r3, [pc, #308]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ce8:	60fb      	str	r3, [r7, #12]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cf0:	d007      	beq.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cf8:	d12f      	bne.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006cfa:	f7fe fe53 	bl	80059a4 <HAL_RCC_GetSysClockFreq>
 8006cfe:	61f8      	str	r0, [r7, #28]
          break;
 8006d00:	e02e      	b.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8006d02:	4b44      	ldr	r3, [pc, #272]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d0e:	d126      	bne.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8006d10:	4b40      	ldr	r3, [pc, #256]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d020      	beq.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006d1c:	4b3d      	ldr	r3, [pc, #244]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	0a1b      	lsrs	r3, r3, #8
 8006d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d26:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	fb03 f202 	mul.w	r2, r3, r2
 8006d30:	4b38      	ldr	r3, [pc, #224]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	091b      	lsrs	r3, r3, #4
 8006d36:	f003 030f 	and.w	r3, r3, #15
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d40:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006d42:	4b34      	ldr	r3, [pc, #208]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	0e5b      	lsrs	r3, r3, #25
 8006d48:	f003 0303 	and.w	r3, r3, #3
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	005b      	lsls	r3, r3, #1
 8006d50:	69ba      	ldr	r2, [r7, #24]
 8006d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d56:	61fb      	str	r3, [r7, #28]
          break;
 8006d58:	e001      	b.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8006d5a:	bf00      	nop
 8006d5c:	e21a      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006d5e:	bf00      	nop
        break;
 8006d60:	e218      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006d62:	4b2c      	ldr	r3, [pc, #176]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d103      	bne.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006d74:	f7fe fec4 	bl	8005b00 <HAL_RCC_GetPCLK2Freq>
 8006d78:	61f8      	str	r0, [r7, #28]
        break;
 8006d7a:	e20b      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d7c:	f7fe fe12 	bl	80059a4 <HAL_RCC_GetSysClockFreq>
 8006d80:	61f8      	str	r0, [r7, #28]
        break;
 8006d82:	e207      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8006d84:	4b23      	ldr	r3, [pc, #140]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d8a:	f003 0318 	and.w	r3, r3, #24
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2b10      	cmp	r3, #16
 8006d94:	d010      	beq.n	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2b10      	cmp	r3, #16
 8006d9a:	d834      	bhi.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d003      	beq.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b08      	cmp	r3, #8
 8006da6:	d024      	beq.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8006da8:	e02d      	b.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006daa:	69b9      	ldr	r1, [r7, #24]
 8006dac:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006db0:	f000 fbe2 	bl	8007578 <RCCEx_GetSAIxPeriphCLKFreq>
 8006db4:	61f8      	str	r0, [r7, #28]
          break;
 8006db6:	e02b      	b.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006db8:	4b16      	ldr	r3, [pc, #88]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0302 	and.w	r3, r3, #2
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d122      	bne.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006dc4:	4b13      	ldr	r3, [pc, #76]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0308 	and.w	r3, r3, #8
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d005      	beq.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8006dd0:	4b10      	ldr	r3, [pc, #64]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	091b      	lsrs	r3, r3, #4
 8006dd6:	f003 030f 	and.w	r3, r3, #15
 8006dda:	e005      	b.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8006ddc:	4b0d      	ldr	r3, [pc, #52]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006de2:	0a1b      	lsrs	r3, r3, #8
 8006de4:	f003 030f 	and.w	r3, r3, #15
 8006de8:	4a0c      	ldr	r2, [pc, #48]	; (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dee:	61fb      	str	r3, [r7, #28]
          break;
 8006df0:	e00b      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006df2:	4b08      	ldr	r3, [pc, #32]	; (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dfe:	d106      	bne.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8006e00:	4b05      	ldr	r3, [pc, #20]	; (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006e02:	61fb      	str	r3, [r7, #28]
          break;
 8006e04:	e003      	b.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8006e06:	bf00      	nop
 8006e08:	e1c4      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006e0a:	bf00      	nop
 8006e0c:	e1c2      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006e0e:	bf00      	nop
        break;
 8006e10:	e1c0      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8006e12:	bf00      	nop
 8006e14:	40021000 	.word	0x40021000
 8006e18:	00f42400 	.word	0x00f42400
 8006e1c:	08014250 	.word	0x08014250
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006e20:	4b96      	ldr	r3, [pc, #600]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e26:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006e2a:	60fb      	str	r3, [r7, #12]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e32:	d013      	beq.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e3a:	d819      	bhi.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d004      	beq.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e48:	d004      	beq.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8006e4a:	e011      	b.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e4c:	f7fe fe42 	bl	8005ad4 <HAL_RCC_GetPCLK1Freq>
 8006e50:	61f8      	str	r0, [r7, #28]
          break;
 8006e52:	e010      	b.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8006e54:	f7fe fda6 	bl	80059a4 <HAL_RCC_GetSysClockFreq>
 8006e58:	61f8      	str	r0, [r7, #28]
          break;
 8006e5a:	e00c      	b.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e5c:	4b87      	ldr	r3, [pc, #540]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e68:	d104      	bne.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8006e6a:	4b85      	ldr	r3, [pc, #532]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006e6c:	61fb      	str	r3, [r7, #28]
          break;
 8006e6e:	e001      	b.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8006e70:	bf00      	nop
 8006e72:	e18f      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006e74:	bf00      	nop
        break;
 8006e76:	e18d      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006e78:	4b80      	ldr	r3, [pc, #512]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e7e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006e82:	60fb      	str	r3, [r7, #12]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e8a:	d013      	beq.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e92:	d819      	bhi.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d004      	beq.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ea0:	d004      	beq.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8006ea2:	e011      	b.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ea4:	f7fe fe16 	bl	8005ad4 <HAL_RCC_GetPCLK1Freq>
 8006ea8:	61f8      	str	r0, [r7, #28]
          break;
 8006eaa:	e010      	b.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006eac:	f7fe fd7a 	bl	80059a4 <HAL_RCC_GetSysClockFreq>
 8006eb0:	61f8      	str	r0, [r7, #28]
          break;
 8006eb2:	e00c      	b.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006eb4:	4b71      	ldr	r3, [pc, #452]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ec0:	d104      	bne.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8006ec2:	4b6f      	ldr	r3, [pc, #444]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006ec4:	61fb      	str	r3, [r7, #28]
          break;
 8006ec6:	e001      	b.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8006ec8:	bf00      	nop
 8006eca:	e163      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006ecc:	bf00      	nop
        break;
 8006ece:	e161      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006ed0:	4b6a      	ldr	r3, [pc, #424]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ed6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006eda:	60fb      	str	r3, [r7, #12]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ee2:	d013      	beq.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eea:	d819      	bhi.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d004      	beq.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ef8:	d004      	beq.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8006efa:	e011      	b.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006efc:	f7fe fdea 	bl	8005ad4 <HAL_RCC_GetPCLK1Freq>
 8006f00:	61f8      	str	r0, [r7, #28]
          break;
 8006f02:	e010      	b.n	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f04:	f7fe fd4e 	bl	80059a4 <HAL_RCC_GetSysClockFreq>
 8006f08:	61f8      	str	r0, [r7, #28]
          break;
 8006f0a:	e00c      	b.n	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f0c:	4b5b      	ldr	r3, [pc, #364]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f18:	d104      	bne.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8006f1a:	4b59      	ldr	r3, [pc, #356]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006f1c:	61fb      	str	r3, [r7, #28]
          break;
 8006f1e:	e001      	b.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8006f20:	bf00      	nop
 8006f22:	e137      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006f24:	bf00      	nop
        break;
 8006f26:	e135      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006f28:	4b54      	ldr	r3, [pc, #336]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006f2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f2e:	f003 0303 	and.w	r3, r3, #3
 8006f32:	60fb      	str	r3, [r7, #12]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d011      	beq.n	8006f5e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d818      	bhi.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d003      	beq.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d004      	beq.n	8006f56 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8006f4c:	e011      	b.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f4e:	f7fe fdc1 	bl	8005ad4 <HAL_RCC_GetPCLK1Freq>
 8006f52:	61f8      	str	r0, [r7, #28]
          break;
 8006f54:	e010      	b.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f56:	f7fe fd25 	bl	80059a4 <HAL_RCC_GetSysClockFreq>
 8006f5a:	61f8      	str	r0, [r7, #28]
          break;
 8006f5c:	e00c      	b.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f5e:	4b47      	ldr	r3, [pc, #284]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f6a:	d104      	bne.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8006f6c:	4b44      	ldr	r3, [pc, #272]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006f6e:	61fb      	str	r3, [r7, #28]
          break;
 8006f70:	e001      	b.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8006f72:	bf00      	nop
 8006f74:	e10e      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006f76:	bf00      	nop
        break;
 8006f78:	e10c      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006f7a:	4b40      	ldr	r3, [pc, #256]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f80:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006f84:	60fb      	str	r3, [r7, #12]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006f8c:	d02c      	beq.n	8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006f94:	d833      	bhi.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006f9c:	d01a      	beq.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006fa4:	d82b      	bhi.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d004      	beq.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fb2:	d004      	beq.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8006fb4:	e023      	b.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006fb6:	f7fe fd8d 	bl	8005ad4 <HAL_RCC_GetPCLK1Freq>
 8006fba:	61f8      	str	r0, [r7, #28]
          break;
 8006fbc:	e026      	b.n	800700c <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006fbe:	4b2f      	ldr	r3, [pc, #188]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fc4:	f003 0302 	and.w	r3, r3, #2
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d11a      	bne.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8006fcc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006fd0:	61fb      	str	r3, [r7, #28]
          break;
 8006fd2:	e016      	b.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fd4:	4b29      	ldr	r3, [pc, #164]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fe0:	d111      	bne.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8006fe2:	4b27      	ldr	r3, [pc, #156]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006fe4:	61fb      	str	r3, [r7, #28]
          break;
 8006fe6:	e00e      	b.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006fe8:	4b24      	ldr	r3, [pc, #144]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fee:	f003 0302 	and.w	r3, r3, #2
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d109      	bne.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8006ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ffa:	61fb      	str	r3, [r7, #28]
          break;
 8006ffc:	e005      	b.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8006ffe:	bf00      	nop
 8007000:	e0c8      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007002:	bf00      	nop
 8007004:	e0c6      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007006:	bf00      	nop
 8007008:	e0c4      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800700a:	bf00      	nop
        break;
 800700c:	e0c2      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800700e:	4b1b      	ldr	r3, [pc, #108]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007014:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007018:	60fb      	str	r3, [r7, #12]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007020:	d030      	beq.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007028:	d837      	bhi.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007030:	d01a      	beq.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007038:	d82f      	bhi.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d004      	beq.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007046:	d004      	beq.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8007048:	e027      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800704a:	f7fe fd43 	bl	8005ad4 <HAL_RCC_GetPCLK1Freq>
 800704e:	61f8      	str	r0, [r7, #28]
          break;
 8007050:	e02a      	b.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007052:	4b0a      	ldr	r3, [pc, #40]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	2b02      	cmp	r3, #2
 800705e:	d11e      	bne.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8007060:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007064:	61fb      	str	r3, [r7, #28]
          break;
 8007066:	e01a      	b.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007068:	4b04      	ldr	r3, [pc, #16]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007074:	d115      	bne.n	80070a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8007076:	4b02      	ldr	r3, [pc, #8]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007078:	61fb      	str	r3, [r7, #28]
          break;
 800707a:	e012      	b.n	80070a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800707c:	40021000 	.word	0x40021000
 8007080:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007084:	4b46      	ldr	r3, [pc, #280]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	2b02      	cmp	r3, #2
 8007090:	d109      	bne.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8007092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007096:	61fb      	str	r3, [r7, #28]
          break;
 8007098:	e005      	b.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800709a:	bf00      	nop
 800709c:	e07a      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800709e:	bf00      	nop
 80070a0:	e078      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80070a2:	bf00      	nop
 80070a4:	e076      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80070a6:	bf00      	nop
        break;
 80070a8:	e074      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80070aa:	4b3d      	ldr	r3, [pc, #244]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80070ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80070b4:	60fb      	str	r3, [r7, #12]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070bc:	d02c      	beq.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070c4:	d855      	bhi.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d004      	beq.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070d2:	d004      	beq.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 80070d4:	e04d      	b.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 80070d6:	f7fe fc65 	bl	80059a4 <HAL_RCC_GetSysClockFreq>
 80070da:	61f8      	str	r0, [r7, #28]
          break;
 80070dc:	e04e      	b.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80070de:	4b30      	ldr	r3, [pc, #192]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0302 	and.w	r3, r3, #2
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d145      	bne.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80070ea:	4b2d      	ldr	r3, [pc, #180]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0308 	and.w	r3, r3, #8
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d005      	beq.n	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 80070f6:	4b2a      	ldr	r3, [pc, #168]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	091b      	lsrs	r3, r3, #4
 80070fc:	f003 030f 	and.w	r3, r3, #15
 8007100:	e005      	b.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8007102:	4b27      	ldr	r3, [pc, #156]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007104:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007108:	0a1b      	lsrs	r3, r3, #8
 800710a:	f003 030f 	and.w	r3, r3, #15
 800710e:	4a25      	ldr	r2, [pc, #148]	; (80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8007110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007114:	61fb      	str	r3, [r7, #28]
          break;
 8007116:	e02e      	b.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007118:	4b21      	ldr	r3, [pc, #132]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007120:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007124:	d129      	bne.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007126:	4b1e      	ldr	r3, [pc, #120]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800712e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007132:	d122      	bne.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007134:	4b1a      	ldr	r3, [pc, #104]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	0a1b      	lsrs	r3, r3, #8
 800713a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800713e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	fb03 f202 	mul.w	r2, r3, r2
 8007148:	4b15      	ldr	r3, [pc, #84]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	091b      	lsrs	r3, r3, #4
 800714e:	f003 030f 	and.w	r3, r3, #15
 8007152:	3301      	adds	r3, #1
 8007154:	fbb2 f3f3 	udiv	r3, r2, r3
 8007158:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800715a:	4b11      	ldr	r3, [pc, #68]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	0d5b      	lsrs	r3, r3, #21
 8007160:	f003 0303 	and.w	r3, r3, #3
 8007164:	3301      	adds	r3, #1
 8007166:	005b      	lsls	r3, r3, #1
 8007168:	69ba      	ldr	r2, [r7, #24]
 800716a:	fbb2 f3f3 	udiv	r3, r2, r3
 800716e:	61fb      	str	r3, [r7, #28]
          break;
 8007170:	e003      	b.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8007172:	bf00      	nop
 8007174:	e00e      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007176:	bf00      	nop
 8007178:	e00c      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800717a:	bf00      	nop
        break;
 800717c:	e00a      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800717e:	bf00      	nop
 8007180:	e008      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007182:	bf00      	nop
 8007184:	e006      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007186:	bf00      	nop
 8007188:	e004      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800718a:	bf00      	nop
 800718c:	e002      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800718e:	bf00      	nop
 8007190:	e000      	b.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007192:	bf00      	nop
    }
  }

  return(frequency);
 8007194:	69fb      	ldr	r3, [r7, #28]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3720      	adds	r7, #32
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	40021000 	.word	0x40021000
 80071a4:	08014250 	.word	0x08014250

080071a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80071b6:	4b72      	ldr	r3, [pc, #456]	; (8007380 <RCCEx_PLLSAI1_Config+0x1d8>)
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	f003 0303 	and.w	r3, r3, #3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00e      	beq.n	80071e0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80071c2:	4b6f      	ldr	r3, [pc, #444]	; (8007380 <RCCEx_PLLSAI1_Config+0x1d8>)
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	f003 0203 	and.w	r2, r3, #3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d103      	bne.n	80071da <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
       ||
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d142      	bne.n	8007260 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	73fb      	strb	r3, [r7, #15]
 80071de:	e03f      	b.n	8007260 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2b03      	cmp	r3, #3
 80071e6:	d018      	beq.n	800721a <RCCEx_PLLSAI1_Config+0x72>
 80071e8:	2b03      	cmp	r3, #3
 80071ea:	d825      	bhi.n	8007238 <RCCEx_PLLSAI1_Config+0x90>
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d002      	beq.n	80071f6 <RCCEx_PLLSAI1_Config+0x4e>
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d009      	beq.n	8007208 <RCCEx_PLLSAI1_Config+0x60>
 80071f4:	e020      	b.n	8007238 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80071f6:	4b62      	ldr	r3, [pc, #392]	; (8007380 <RCCEx_PLLSAI1_Config+0x1d8>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0302 	and.w	r3, r3, #2
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d11d      	bne.n	800723e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007206:	e01a      	b.n	800723e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007208:	4b5d      	ldr	r3, [pc, #372]	; (8007380 <RCCEx_PLLSAI1_Config+0x1d8>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007210:	2b00      	cmp	r3, #0
 8007212:	d116      	bne.n	8007242 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007218:	e013      	b.n	8007242 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800721a:	4b59      	ldr	r3, [pc, #356]	; (8007380 <RCCEx_PLLSAI1_Config+0x1d8>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10f      	bne.n	8007246 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007226:	4b56      	ldr	r3, [pc, #344]	; (8007380 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d109      	bne.n	8007246 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007236:	e006      	b.n	8007246 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	73fb      	strb	r3, [r7, #15]
      break;
 800723c:	e004      	b.n	8007248 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800723e:	bf00      	nop
 8007240:	e002      	b.n	8007248 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007242:	bf00      	nop
 8007244:	e000      	b.n	8007248 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007246:	bf00      	nop
    }

    if(status == HAL_OK)
 8007248:	7bfb      	ldrb	r3, [r7, #15]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d108      	bne.n	8007260 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800724e:	4b4c      	ldr	r3, [pc, #304]	; (8007380 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	f023 0203 	bic.w	r2, r3, #3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4949      	ldr	r1, [pc, #292]	; (8007380 <RCCEx_PLLSAI1_Config+0x1d8>)
 800725c:	4313      	orrs	r3, r2
 800725e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007260:	7bfb      	ldrb	r3, [r7, #15]
 8007262:	2b00      	cmp	r3, #0
 8007264:	f040 8086 	bne.w	8007374 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007268:	4b45      	ldr	r3, [pc, #276]	; (8007380 <RCCEx_PLLSAI1_Config+0x1d8>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a44      	ldr	r2, [pc, #272]	; (8007380 <RCCEx_PLLSAI1_Config+0x1d8>)
 800726e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007272:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007274:	f7fb fc22 	bl	8002abc <HAL_GetTick>
 8007278:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800727a:	e009      	b.n	8007290 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800727c:	f7fb fc1e 	bl	8002abc <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	2b02      	cmp	r3, #2
 8007288:	d902      	bls.n	8007290 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	73fb      	strb	r3, [r7, #15]
        break;
 800728e:	e005      	b.n	800729c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007290:	4b3b      	ldr	r3, [pc, #236]	; (8007380 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1ef      	bne.n	800727c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800729c:	7bfb      	ldrb	r3, [r7, #15]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d168      	bne.n	8007374 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d113      	bne.n	80072d0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80072a8:	4b35      	ldr	r3, [pc, #212]	; (8007380 <RCCEx_PLLSAI1_Config+0x1d8>)
 80072aa:	691a      	ldr	r2, [r3, #16]
 80072ac:	4b35      	ldr	r3, [pc, #212]	; (8007384 <RCCEx_PLLSAI1_Config+0x1dc>)
 80072ae:	4013      	ands	r3, r2
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	6892      	ldr	r2, [r2, #8]
 80072b4:	0211      	lsls	r1, r2, #8
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	68d2      	ldr	r2, [r2, #12]
 80072ba:	06d2      	lsls	r2, r2, #27
 80072bc:	4311      	orrs	r1, r2
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	6852      	ldr	r2, [r2, #4]
 80072c2:	3a01      	subs	r2, #1
 80072c4:	0112      	lsls	r2, r2, #4
 80072c6:	430a      	orrs	r2, r1
 80072c8:	492d      	ldr	r1, [pc, #180]	; (8007380 <RCCEx_PLLSAI1_Config+0x1d8>)
 80072ca:	4313      	orrs	r3, r2
 80072cc:	610b      	str	r3, [r1, #16]
 80072ce:	e02d      	b.n	800732c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d115      	bne.n	8007302 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80072d6:	4b2a      	ldr	r3, [pc, #168]	; (8007380 <RCCEx_PLLSAI1_Config+0x1d8>)
 80072d8:	691a      	ldr	r2, [r3, #16]
 80072da:	4b2b      	ldr	r3, [pc, #172]	; (8007388 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072dc:	4013      	ands	r3, r2
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	6892      	ldr	r2, [r2, #8]
 80072e2:	0211      	lsls	r1, r2, #8
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	6912      	ldr	r2, [r2, #16]
 80072e8:	0852      	lsrs	r2, r2, #1
 80072ea:	3a01      	subs	r2, #1
 80072ec:	0552      	lsls	r2, r2, #21
 80072ee:	4311      	orrs	r1, r2
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	6852      	ldr	r2, [r2, #4]
 80072f4:	3a01      	subs	r2, #1
 80072f6:	0112      	lsls	r2, r2, #4
 80072f8:	430a      	orrs	r2, r1
 80072fa:	4921      	ldr	r1, [pc, #132]	; (8007380 <RCCEx_PLLSAI1_Config+0x1d8>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	610b      	str	r3, [r1, #16]
 8007300:	e014      	b.n	800732c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007302:	4b1f      	ldr	r3, [pc, #124]	; (8007380 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007304:	691a      	ldr	r2, [r3, #16]
 8007306:	4b21      	ldr	r3, [pc, #132]	; (800738c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007308:	4013      	ands	r3, r2
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	6892      	ldr	r2, [r2, #8]
 800730e:	0211      	lsls	r1, r2, #8
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	6952      	ldr	r2, [r2, #20]
 8007314:	0852      	lsrs	r2, r2, #1
 8007316:	3a01      	subs	r2, #1
 8007318:	0652      	lsls	r2, r2, #25
 800731a:	4311      	orrs	r1, r2
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	6852      	ldr	r2, [r2, #4]
 8007320:	3a01      	subs	r2, #1
 8007322:	0112      	lsls	r2, r2, #4
 8007324:	430a      	orrs	r2, r1
 8007326:	4916      	ldr	r1, [pc, #88]	; (8007380 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007328:	4313      	orrs	r3, r2
 800732a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800732c:	4b14      	ldr	r3, [pc, #80]	; (8007380 <RCCEx_PLLSAI1_Config+0x1d8>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a13      	ldr	r2, [pc, #76]	; (8007380 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007332:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007336:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007338:	f7fb fbc0 	bl	8002abc <HAL_GetTick>
 800733c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800733e:	e009      	b.n	8007354 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007340:	f7fb fbbc 	bl	8002abc <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	2b02      	cmp	r3, #2
 800734c:	d902      	bls.n	8007354 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	73fb      	strb	r3, [r7, #15]
          break;
 8007352:	e005      	b.n	8007360 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007354:	4b0a      	ldr	r3, [pc, #40]	; (8007380 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d0ef      	beq.n	8007340 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007360:	7bfb      	ldrb	r3, [r7, #15]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d106      	bne.n	8007374 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007366:	4b06      	ldr	r3, [pc, #24]	; (8007380 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007368:	691a      	ldr	r2, [r3, #16]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	4904      	ldr	r1, [pc, #16]	; (8007380 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007370:	4313      	orrs	r3, r2
 8007372:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007374:	7bfb      	ldrb	r3, [r7, #15]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	40021000 	.word	0x40021000
 8007384:	07ff800f 	.word	0x07ff800f
 8007388:	ff9f800f 	.word	0xff9f800f
 800738c:	f9ff800f 	.word	0xf9ff800f

08007390 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800739e:	4b72      	ldr	r3, [pc, #456]	; (8007568 <RCCEx_PLLSAI2_Config+0x1d8>)
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	f003 0303 	and.w	r3, r3, #3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00e      	beq.n	80073c8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80073aa:	4b6f      	ldr	r3, [pc, #444]	; (8007568 <RCCEx_PLLSAI2_Config+0x1d8>)
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	f003 0203 	and.w	r2, r3, #3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d103      	bne.n	80073c2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
       ||
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d142      	bne.n	8007448 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	73fb      	strb	r3, [r7, #15]
 80073c6:	e03f      	b.n	8007448 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b03      	cmp	r3, #3
 80073ce:	d018      	beq.n	8007402 <RCCEx_PLLSAI2_Config+0x72>
 80073d0:	2b03      	cmp	r3, #3
 80073d2:	d825      	bhi.n	8007420 <RCCEx_PLLSAI2_Config+0x90>
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d002      	beq.n	80073de <RCCEx_PLLSAI2_Config+0x4e>
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d009      	beq.n	80073f0 <RCCEx_PLLSAI2_Config+0x60>
 80073dc:	e020      	b.n	8007420 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80073de:	4b62      	ldr	r3, [pc, #392]	; (8007568 <RCCEx_PLLSAI2_Config+0x1d8>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0302 	and.w	r3, r3, #2
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d11d      	bne.n	8007426 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073ee:	e01a      	b.n	8007426 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80073f0:	4b5d      	ldr	r3, [pc, #372]	; (8007568 <RCCEx_PLLSAI2_Config+0x1d8>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d116      	bne.n	800742a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007400:	e013      	b.n	800742a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007402:	4b59      	ldr	r3, [pc, #356]	; (8007568 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10f      	bne.n	800742e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800740e:	4b56      	ldr	r3, [pc, #344]	; (8007568 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d109      	bne.n	800742e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800741e:	e006      	b.n	800742e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	73fb      	strb	r3, [r7, #15]
      break;
 8007424:	e004      	b.n	8007430 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007426:	bf00      	nop
 8007428:	e002      	b.n	8007430 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800742a:	bf00      	nop
 800742c:	e000      	b.n	8007430 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800742e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007430:	7bfb      	ldrb	r3, [r7, #15]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d108      	bne.n	8007448 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8007436:	4b4c      	ldr	r3, [pc, #304]	; (8007568 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	f023 0203 	bic.w	r2, r3, #3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4949      	ldr	r1, [pc, #292]	; (8007568 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007444:	4313      	orrs	r3, r2
 8007446:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007448:	7bfb      	ldrb	r3, [r7, #15]
 800744a:	2b00      	cmp	r3, #0
 800744c:	f040 8086 	bne.w	800755c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007450:	4b45      	ldr	r3, [pc, #276]	; (8007568 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a44      	ldr	r2, [pc, #272]	; (8007568 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007456:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800745a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800745c:	f7fb fb2e 	bl	8002abc <HAL_GetTick>
 8007460:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007462:	e009      	b.n	8007478 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007464:	f7fb fb2a 	bl	8002abc <HAL_GetTick>
 8007468:	4602      	mov	r2, r0
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	2b02      	cmp	r3, #2
 8007470:	d902      	bls.n	8007478 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	73fb      	strb	r3, [r7, #15]
        break;
 8007476:	e005      	b.n	8007484 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007478:	4b3b      	ldr	r3, [pc, #236]	; (8007568 <RCCEx_PLLSAI2_Config+0x1d8>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1ef      	bne.n	8007464 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007484:	7bfb      	ldrb	r3, [r7, #15]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d168      	bne.n	800755c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d113      	bne.n	80074b8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007490:	4b35      	ldr	r3, [pc, #212]	; (8007568 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007492:	695a      	ldr	r2, [r3, #20]
 8007494:	4b35      	ldr	r3, [pc, #212]	; (800756c <RCCEx_PLLSAI2_Config+0x1dc>)
 8007496:	4013      	ands	r3, r2
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	6892      	ldr	r2, [r2, #8]
 800749c:	0211      	lsls	r1, r2, #8
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	68d2      	ldr	r2, [r2, #12]
 80074a2:	06d2      	lsls	r2, r2, #27
 80074a4:	4311      	orrs	r1, r2
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	6852      	ldr	r2, [r2, #4]
 80074aa:	3a01      	subs	r2, #1
 80074ac:	0112      	lsls	r2, r2, #4
 80074ae:	430a      	orrs	r2, r1
 80074b0:	492d      	ldr	r1, [pc, #180]	; (8007568 <RCCEx_PLLSAI2_Config+0x1d8>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	614b      	str	r3, [r1, #20]
 80074b6:	e02d      	b.n	8007514 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d115      	bne.n	80074ea <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80074be:	4b2a      	ldr	r3, [pc, #168]	; (8007568 <RCCEx_PLLSAI2_Config+0x1d8>)
 80074c0:	695a      	ldr	r2, [r3, #20]
 80074c2:	4b2b      	ldr	r3, [pc, #172]	; (8007570 <RCCEx_PLLSAI2_Config+0x1e0>)
 80074c4:	4013      	ands	r3, r2
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	6892      	ldr	r2, [r2, #8]
 80074ca:	0211      	lsls	r1, r2, #8
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	6912      	ldr	r2, [r2, #16]
 80074d0:	0852      	lsrs	r2, r2, #1
 80074d2:	3a01      	subs	r2, #1
 80074d4:	0552      	lsls	r2, r2, #21
 80074d6:	4311      	orrs	r1, r2
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	6852      	ldr	r2, [r2, #4]
 80074dc:	3a01      	subs	r2, #1
 80074de:	0112      	lsls	r2, r2, #4
 80074e0:	430a      	orrs	r2, r1
 80074e2:	4921      	ldr	r1, [pc, #132]	; (8007568 <RCCEx_PLLSAI2_Config+0x1d8>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	614b      	str	r3, [r1, #20]
 80074e8:	e014      	b.n	8007514 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80074ea:	4b1f      	ldr	r3, [pc, #124]	; (8007568 <RCCEx_PLLSAI2_Config+0x1d8>)
 80074ec:	695a      	ldr	r2, [r3, #20]
 80074ee:	4b21      	ldr	r3, [pc, #132]	; (8007574 <RCCEx_PLLSAI2_Config+0x1e4>)
 80074f0:	4013      	ands	r3, r2
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	6892      	ldr	r2, [r2, #8]
 80074f6:	0211      	lsls	r1, r2, #8
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	6952      	ldr	r2, [r2, #20]
 80074fc:	0852      	lsrs	r2, r2, #1
 80074fe:	3a01      	subs	r2, #1
 8007500:	0652      	lsls	r2, r2, #25
 8007502:	4311      	orrs	r1, r2
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	6852      	ldr	r2, [r2, #4]
 8007508:	3a01      	subs	r2, #1
 800750a:	0112      	lsls	r2, r2, #4
 800750c:	430a      	orrs	r2, r1
 800750e:	4916      	ldr	r1, [pc, #88]	; (8007568 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007510:	4313      	orrs	r3, r2
 8007512:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007514:	4b14      	ldr	r3, [pc, #80]	; (8007568 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a13      	ldr	r2, [pc, #76]	; (8007568 <RCCEx_PLLSAI2_Config+0x1d8>)
 800751a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800751e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007520:	f7fb facc 	bl	8002abc <HAL_GetTick>
 8007524:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007526:	e009      	b.n	800753c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007528:	f7fb fac8 	bl	8002abc <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	2b02      	cmp	r3, #2
 8007534:	d902      	bls.n	800753c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	73fb      	strb	r3, [r7, #15]
          break;
 800753a:	e005      	b.n	8007548 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800753c:	4b0a      	ldr	r3, [pc, #40]	; (8007568 <RCCEx_PLLSAI2_Config+0x1d8>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d0ef      	beq.n	8007528 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007548:	7bfb      	ldrb	r3, [r7, #15]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d106      	bne.n	800755c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800754e:	4b06      	ldr	r3, [pc, #24]	; (8007568 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007550:	695a      	ldr	r2, [r3, #20]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	4904      	ldr	r1, [pc, #16]	; (8007568 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007558:	4313      	orrs	r3, r2
 800755a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800755c:	7bfb      	ldrb	r3, [r7, #15]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	40021000 	.word	0x40021000
 800756c:	07ff800f 	.word	0x07ff800f
 8007570:	ff9f800f 	.word	0xff9f800f
 8007574:	f9ff800f 	.word	0xf9ff800f

08007578 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8007578:	b480      	push	{r7}
 800757a:	b089      	sub	sp, #36	; 0x24
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8007582:	2300      	movs	r3, #0
 8007584:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8007586:	2300      	movs	r3, #0
 8007588:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800758a:	2300      	movs	r3, #0
 800758c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007594:	d10b      	bne.n	80075ae <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007596:	4b7e      	ldr	r3, [pc, #504]	; (8007790 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007598:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800759c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80075a0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	2b60      	cmp	r3, #96	; 0x60
 80075a6:	d112      	bne.n	80075ce <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80075a8:	4b7a      	ldr	r3, [pc, #488]	; (8007794 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80075aa:	61fb      	str	r3, [r7, #28]
 80075ac:	e00f      	b.n	80075ce <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075b4:	d10b      	bne.n	80075ce <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80075b6:	4b76      	ldr	r3, [pc, #472]	; (8007790 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80075b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075c0:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075c8:	d101      	bne.n	80075ce <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80075ca:	4b72      	ldr	r3, [pc, #456]	; (8007794 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80075cc:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f040 80d6 	bne.w	8007782 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	2b40      	cmp	r3, #64	; 0x40
 80075de:	d003      	beq.n	80075e8 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075e6:	d13b      	bne.n	8007660 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80075e8:	4b69      	ldr	r3, [pc, #420]	; (8007790 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075f4:	f040 80c4 	bne.w	8007780 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80075f8:	4b65      	ldr	r3, [pc, #404]	; (8007790 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007600:	2b00      	cmp	r3, #0
 8007602:	f000 80bd 	beq.w	8007780 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007606:	4b62      	ldr	r3, [pc, #392]	; (8007790 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	091b      	lsrs	r3, r3, #4
 800760c:	f003 030f 	and.w	r3, r3, #15
 8007610:	3301      	adds	r3, #1
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	fbb2 f3f3 	udiv	r3, r2, r3
 8007618:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800761a:	4b5d      	ldr	r3, [pc, #372]	; (8007790 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	0a1b      	lsrs	r3, r3, #8
 8007620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007624:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8007626:	4b5a      	ldr	r3, [pc, #360]	; (8007790 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	0edb      	lsrs	r3, r3, #27
 800762c:	f003 031f 	and.w	r3, r3, #31
 8007630:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10a      	bne.n	800764e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007638:	4b55      	ldr	r3, [pc, #340]	; (8007790 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8007644:	2311      	movs	r3, #17
 8007646:	617b      	str	r3, [r7, #20]
 8007648:	e001      	b.n	800764e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800764a:	2307      	movs	r3, #7
 800764c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	fb03 f202 	mul.w	r2, r3, r2
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	fbb2 f3f3 	udiv	r3, r2, r3
 800765c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800765e:	e08f      	b.n	8007780 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d13a      	bne.n	80076dc <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8007666:	4b4a      	ldr	r3, [pc, #296]	; (8007790 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800766e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007672:	f040 8086 	bne.w	8007782 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8007676:	4b46      	ldr	r3, [pc, #280]	; (8007790 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d07f      	beq.n	8007782 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007682:	4b43      	ldr	r3, [pc, #268]	; (8007790 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	091b      	lsrs	r3, r3, #4
 8007688:	f003 030f 	and.w	r3, r3, #15
 800768c:	3301      	adds	r3, #1
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	fbb2 f3f3 	udiv	r3, r2, r3
 8007694:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007696:	4b3e      	ldr	r3, [pc, #248]	; (8007790 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	0a1b      	lsrs	r3, r3, #8
 800769c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076a0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80076a2:	4b3b      	ldr	r3, [pc, #236]	; (8007790 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	0edb      	lsrs	r3, r3, #27
 80076a8:	f003 031f 	and.w	r3, r3, #31
 80076ac:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10a      	bne.n	80076ca <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80076b4:	4b36      	ldr	r3, [pc, #216]	; (8007790 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d002      	beq.n	80076c6 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80076c0:	2311      	movs	r3, #17
 80076c2:	617b      	str	r3, [r7, #20]
 80076c4:	e001      	b.n	80076ca <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 80076c6:	2307      	movs	r3, #7
 80076c8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	fb03 f202 	mul.w	r2, r3, r2
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d8:	61fb      	str	r3, [r7, #28]
 80076da:	e052      	b.n	8007782 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	2b80      	cmp	r3, #128	; 0x80
 80076e0:	d003      	beq.n	80076ea <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076e8:	d109      	bne.n	80076fe <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80076ea:	4b29      	ldr	r3, [pc, #164]	; (8007790 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076f6:	d144      	bne.n	8007782 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80076f8:	4b27      	ldr	r3, [pc, #156]	; (8007798 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80076fa:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80076fc:	e041      	b.n	8007782 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	2b20      	cmp	r3, #32
 8007702:	d003      	beq.n	800770c <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800770a:	d13a      	bne.n	8007782 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800770c:	4b20      	ldr	r3, [pc, #128]	; (8007790 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007718:	d133      	bne.n	8007782 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800771a:	4b1d      	ldr	r3, [pc, #116]	; (8007790 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d02d      	beq.n	8007782 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8007726:	4b1a      	ldr	r3, [pc, #104]	; (8007790 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	091b      	lsrs	r3, r3, #4
 800772c:	f003 030f 	and.w	r3, r3, #15
 8007730:	3301      	adds	r3, #1
 8007732:	693a      	ldr	r2, [r7, #16]
 8007734:	fbb2 f3f3 	udiv	r3, r2, r3
 8007738:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800773a:	4b15      	ldr	r3, [pc, #84]	; (8007790 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800773c:	695b      	ldr	r3, [r3, #20]
 800773e:	0a1b      	lsrs	r3, r3, #8
 8007740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007744:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8007746:	4b12      	ldr	r3, [pc, #72]	; (8007790 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	0edb      	lsrs	r3, r3, #27
 800774c:	f003 031f 	and.w	r3, r3, #31
 8007750:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10a      	bne.n	800776e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8007758:	4b0d      	ldr	r3, [pc, #52]	; (8007790 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d002      	beq.n	800776a <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8007764:	2311      	movs	r3, #17
 8007766:	617b      	str	r3, [r7, #20]
 8007768:	e001      	b.n	800776e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800776a:	2307      	movs	r3, #7
 800776c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	fb03 f202 	mul.w	r2, r3, r2
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	fbb2 f3f3 	udiv	r3, r2, r3
 800777c:	61fb      	str	r3, [r7, #28]
 800777e:	e000      	b.n	8007782 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007780:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8007782:	69fb      	ldr	r3, [r7, #28]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3724      	adds	r7, #36	; 0x24
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	40021000 	.word	0x40021000
 8007794:	001fff68 	.word	0x001fff68
 8007798:	00f42400 	.word	0x00f42400

0800779c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b08a      	sub	sp, #40	; 0x28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d101      	bne.n	80077ae <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e078      	b.n	80078a0 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d105      	bne.n	80077c6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7fa fe25 	bl	8002410 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2203      	movs	r2, #3
 80077ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f86a 	bl	80078a8 <HAL_SD_InitCard>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e060      	b.n	80078a0 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80077de:	f107 0308 	add.w	r3, r7, #8
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fdcd 	bl	8008384 <HAL_SD_GetCardStatus>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d001      	beq.n	80077f4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e055      	b.n	80078a0 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80077f4:	7e3b      	ldrb	r3, [r7, #24]
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80077fa:	7e7b      	ldrb	r3, [r7, #25]
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007804:	2b01      	cmp	r3, #1
 8007806:	d10a      	bne.n	800781e <HAL_SD_Init+0x82>
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	2b00      	cmp	r3, #0
 800780c:	d102      	bne.n	8007814 <HAL_SD_Init+0x78>
 800780e:	6a3b      	ldr	r3, [r7, #32]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d004      	beq.n	800781e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800781a:	65da      	str	r2, [r3, #92]	; 0x5c
 800781c:	e00b      	b.n	8007836 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007822:	2b01      	cmp	r3, #1
 8007824:	d104      	bne.n	8007830 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f44f 7280 	mov.w	r2, #256	; 0x100
 800782c:	65da      	str	r2, [r3, #92]	; 0x5c
 800782e:	e002      	b.n	8007836 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fe83 	bl	8008548 <HAL_SD_ConfigWideBusOperation>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d001      	beq.n	800784c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e029      	b.n	80078a0 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800784c:	f7fb f936 	bl	8002abc <HAL_GetTick>
 8007850:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007852:	e014      	b.n	800787e <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8007854:	f7fb f932 	bl	8002abc <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007862:	d10c      	bne.n	800787e <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800786a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	e010      	b.n	80078a0 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 ff76 	bl	8008770 <HAL_SD_GetCardState>
 8007884:	4603      	mov	r3, r0
 8007886:	2b04      	cmp	r3, #4
 8007888:	d1e4      	bne.n	8007854 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2201      	movs	r2, #1
 800789a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3728      	adds	r7, #40	; 0x28
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80078a8:	b5b0      	push	{r4, r5, r7, lr}
 80078aa:	b08e      	sub	sp, #56	; 0x38
 80078ac:	af04      	add	r7, sp, #16
 80078ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80078b0:	2300      	movs	r3, #0
 80078b2:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80078b4:	2300      	movs	r3, #0
 80078b6:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80078b8:	2300      	movs	r3, #0
 80078ba:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80078bc:	2300      	movs	r3, #0
 80078be:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80078c0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80078c4:	f7fe fd4e 	bl	8006364 <HAL_RCCEx_GetPeriphCLKFreq>
 80078c8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80078ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d109      	bne.n	80078e4 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80078de:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e079      	b.n	80079d8 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80078e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e6:	0a1b      	lsrs	r3, r3, #8
 80078e8:	4a3d      	ldr	r2, [pc, #244]	; (80079e0 <HAL_SD_InitCard+0x138>)
 80078ea:	fba2 2303 	umull	r2, r3, r2, r3
 80078ee:	091b      	lsrs	r3, r3, #4
 80078f0:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d107      	bne.n	8007910 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f042 0210 	orr.w	r2, r2, #16
 800790e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681d      	ldr	r5, [r3, #0]
 8007914:	466c      	mov	r4, sp
 8007916:	f107 0314 	add.w	r3, r7, #20
 800791a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800791e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007922:	f107 0308 	add.w	r3, r7, #8
 8007926:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007928:	4628      	mov	r0, r5
 800792a:	f005 f8ad 	bl	800ca88 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4618      	mov	r0, r3
 8007934:	f005 f8f0 	bl	800cb18 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	005b      	lsls	r3, r3, #1
 800793c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800793e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007942:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8007944:	4a27      	ldr	r2, [pc, #156]	; (80079e4 <HAL_SD_InitCard+0x13c>)
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	fbb2 f3f3 	udiv	r3, r2, r3
 800794c:	3301      	adds	r3, #1
 800794e:	4618      	mov	r0, r3
 8007950:	f7fb f8c0 	bl	8002ad4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 ffeb 	bl	8008930 <SD_PowerON>
 800795a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00b      	beq.n	800797a <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2201      	movs	r2, #1
 8007966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800796e:	6a3b      	ldr	r3, [r7, #32]
 8007970:	431a      	orrs	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e02e      	b.n	80079d8 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 ff18 	bl	80087b0 <SD_InitCard>
 8007980:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007982:	6a3b      	ldr	r3, [r7, #32]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00b      	beq.n	80079a0 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	431a      	orrs	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e01b      	b.n	80079d8 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80079a8:	4618      	mov	r0, r3
 80079aa:	f005 f94b 	bl	800cc44 <SDMMC_CmdBlockLength>
 80079ae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00f      	beq.n	80079d6 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a0b      	ldr	r2, [pc, #44]	; (80079e8 <HAL_SD_InitCard+0x140>)
 80079bc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079c2:	6a3b      	ldr	r3, [r7, #32]
 80079c4:	431a      	orrs	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e000      	b.n	80079d8 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3728      	adds	r7, #40	; 0x28
 80079dc:	46bd      	mov	sp, r7
 80079de:	bdb0      	pop	{r4, r5, r7, pc}
 80079e0:	014f8b59 	.word	0x014f8b59
 80079e4:	00012110 	.word	0x00012110
 80079e8:	1fe00fff 	.word	0x1fe00fff

080079ec <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b092      	sub	sp, #72	; 0x48
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80079fa:	f7fb f85f 	bl	8002abc <HAL_GetTick>
 80079fe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d107      	bne.n	8007a1e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a12:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e170      	b.n	8007d00 <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	f040 8163 	bne.w	8007cf2 <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007a32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	441a      	add	r2, r3
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d907      	bls.n	8007a50 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a44:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e157      	b.n	8007d00 <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2203      	movs	r2, #3
 8007a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d002      	beq.n	8007a6e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6a:	025b      	lsls	r3, r3, #9
 8007a6c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a72:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	025b      	lsls	r3, r3, #9
 8007a78:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007a7a:	2390      	movs	r3, #144	; 0x90
 8007a7c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007a7e:	2302      	movs	r3, #2
 8007a80:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007a82:	2300      	movs	r3, #0
 8007a84:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007a86:	2300      	movs	r3, #0
 8007a88:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f107 0214 	add.w	r2, r7, #20
 8007a92:	4611      	mov	r1, r2
 8007a94:	4618      	mov	r0, r3
 8007a96:	f005 f8a9 	bl	800cbec <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68da      	ldr	r2, [r3, #12]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007aa8:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d90a      	bls.n	8007ac6 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007abc:	4618      	mov	r0, r3
 8007abe:	f005 f907 	bl	800ccd0 <SDMMC_CmdReadMultiBlock>
 8007ac2:	6478      	str	r0, [r7, #68]	; 0x44
 8007ac4:	e009      	b.n	8007ada <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f005 f8d9 	bl	800cc8a <SDMMC_CmdReadSingleBlock>
 8007ad8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d012      	beq.n	8007b06 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a88      	ldr	r2, [pc, #544]	; (8007d08 <HAL_SD_ReadBlocks+0x31c>)
 8007ae6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007aee:	431a      	orrs	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e0fc      	b.n	8007d00 <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007b0a:	e061      	b.n	8007bd0 <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d03c      	beq.n	8007b94 <HAL_SD_ReadBlocks+0x1a8>
 8007b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d039      	beq.n	8007b94 <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007b20:	2300      	movs	r3, #0
 8007b22:	643b      	str	r3, [r7, #64]	; 0x40
 8007b24:	e033      	b.n	8007b8e <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f004 ffd6 	bl	800cadc <SDMMC_ReadFIFO>
 8007b30:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b34:	b2da      	uxtb	r2, r3
 8007b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b38:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b42:	3b01      	subs	r3, #1
 8007b44:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b48:	0a1b      	lsrs	r3, r3, #8
 8007b4a:	b2da      	uxtb	r2, r3
 8007b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b4e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b52:	3301      	adds	r3, #1
 8007b54:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5e:	0c1b      	lsrs	r3, r3, #16
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b64:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b68:	3301      	adds	r3, #1
 8007b6a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b74:	0e1b      	lsrs	r3, r3, #24
 8007b76:	b2da      	uxtb	r2, r3
 8007b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b7a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b7e:	3301      	adds	r3, #1
 8007b80:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b84:	3b01      	subs	r3, #1
 8007b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8007b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	643b      	str	r3, [r7, #64]	; 0x40
 8007b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b90:	2b07      	cmp	r3, #7
 8007b92:	d9c8      	bls.n	8007b26 <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007b94:	f7fa ff92 	bl	8002abc <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d902      	bls.n	8007baa <HAL_SD_ReadBlocks+0x1be>
 8007ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d112      	bne.n	8007bd0 <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a56      	ldr	r2, [pc, #344]	; (8007d08 <HAL_SD_ReadBlocks+0x31c>)
 8007bb0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e097      	b.n	8007d00 <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d096      	beq.n	8007b0c <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68da      	ldr	r2, [r3, #12]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bec:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d022      	beq.n	8007c42 <HAL_SD_ReadBlocks+0x256>
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d91f      	bls.n	8007c42 <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c06:	2b03      	cmp	r3, #3
 8007c08:	d01b      	beq.n	8007c42 <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f005 f8c8 	bl	800cda4 <SDMMC_CmdStopTransfer>
 8007c14:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007c16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d012      	beq.n	8007c42 <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a39      	ldr	r2, [pc, #228]	; (8007d08 <HAL_SD_ReadBlocks+0x31c>)
 8007c22:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e05e      	b.n	8007d00 <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c48:	f003 0308 	and.w	r3, r3, #8
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d012      	beq.n	8007c76 <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a2c      	ldr	r2, [pc, #176]	; (8007d08 <HAL_SD_ReadBlocks+0x31c>)
 8007c56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5c:	f043 0208 	orr.w	r2, r3, #8
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e044      	b.n	8007d00 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c7c:	f003 0302 	and.w	r3, r3, #2
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d012      	beq.n	8007caa <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a1f      	ldr	r2, [pc, #124]	; (8007d08 <HAL_SD_ReadBlocks+0x31c>)
 8007c8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c90:	f043 0202 	orr.w	r2, r3, #2
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e02a      	b.n	8007d00 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb0:	f003 0320 	and.w	r3, r3, #32
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d012      	beq.n	8007cde <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a12      	ldr	r2, [pc, #72]	; (8007d08 <HAL_SD_ReadBlocks+0x31c>)
 8007cbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc4:	f043 0220 	orr.w	r2, r3, #32
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e010      	b.n	8007d00 <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a0a      	ldr	r2, [pc, #40]	; (8007d0c <HAL_SD_ReadBlocks+0x320>)
 8007ce4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	e006      	b.n	8007d00 <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
  }
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3748      	adds	r7, #72	; 0x48
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	1fe00fff 	.word	0x1fe00fff
 8007d0c:	18000f3a 	.word	0x18000f3a

08007d10 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b092      	sub	sp, #72	; 0x48
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
 8007d1c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007d1e:	f7fa fecd 	bl	8002abc <HAL_GetTick>
 8007d22:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d107      	bne.n	8007d42 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d36:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e174      	b.n	800802c <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	f040 8167 	bne.w	800801e <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007d56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	441a      	add	r2, r3
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d907      	bls.n	8007d74 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d68:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	e15b      	b.n	800802c <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2203      	movs	r2, #3
 8007d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2200      	movs	r2, #0
 8007d82:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d002      	beq.n	8007d92 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8e:	025b      	lsls	r3, r3, #9
 8007d90:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d96:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	025b      	lsls	r3, r3, #9
 8007d9c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007d9e:	2390      	movs	r3, #144	; 0x90
 8007da0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007da2:	2300      	movs	r3, #0
 8007da4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007daa:	2300      	movs	r3, #0
 8007dac:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f107 0218 	add.w	r2, r7, #24
 8007db6:	4611      	mov	r1, r2
 8007db8:	4618      	mov	r0, r3
 8007dba:	f004 ff17 	bl	800cbec <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68da      	ldr	r2, [r3, #12]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dcc:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d90a      	bls.n	8007dea <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2220      	movs	r2, #32
 8007dd8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007de0:	4618      	mov	r0, r3
 8007de2:	f004 ffbb 	bl	800cd5c <SDMMC_CmdWriteMultiBlock>
 8007de6:	6478      	str	r0, [r7, #68]	; 0x44
 8007de8:	e009      	b.n	8007dfe <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2210      	movs	r2, #16
 8007dee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007df6:	4618      	mov	r0, r3
 8007df8:	f004 ff8d 	bl	800cd16 <SDMMC_CmdWriteSingleBlock>
 8007dfc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d012      	beq.n	8007e2a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a8a      	ldr	r2, [pc, #552]	; (8008034 <HAL_SD_WriteBlocks+0x324>)
 8007e0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e12:	431a      	orrs	r2, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2200      	movs	r2, #0
 8007e24:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e100      	b.n	800802c <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007e2e:	e065      	b.n	8007efc <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d040      	beq.n	8007ec0 <HAL_SD_WriteBlocks+0x1b0>
 8007e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d03d      	beq.n	8007ec0 <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007e44:	2300      	movs	r3, #0
 8007e46:	643b      	str	r3, [r7, #64]	; 0x40
 8007e48:	e037      	b.n	8007eba <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 8007e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e52:	3301      	adds	r3, #1
 8007e54:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	021a      	lsls	r2, r3, #8
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e70:	3b01      	subs	r3, #1
 8007e72:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	041a      	lsls	r2, r3, #16
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e82:	3301      	adds	r3, #1
 8007e84:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	061a      	lsls	r2, r3, #24
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f107 0214 	add.w	r2, r7, #20
 8007eac:	4611      	mov	r1, r2
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f004 fe21 	bl	800caf6 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	643b      	str	r3, [r7, #64]	; 0x40
 8007eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ebc:	2b07      	cmp	r3, #7
 8007ebe:	d9c4      	bls.n	8007e4a <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007ec0:	f7fa fdfc 	bl	8002abc <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d902      	bls.n	8007ed6 <HAL_SD_WriteBlocks+0x1c6>
 8007ed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d112      	bne.n	8007efc <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a56      	ldr	r2, [pc, #344]	; (8008034 <HAL_SD_WriteBlocks+0x324>)
 8007edc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ee4:	431a      	orrs	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e097      	b.n	800802c <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f02:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d092      	beq.n	8007e30 <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68da      	ldr	r2, [r3, #12]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f18:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d022      	beq.n	8007f6e <HAL_SD_WriteBlocks+0x25e>
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d91f      	bls.n	8007f6e <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f32:	2b03      	cmp	r3, #3
 8007f34:	d01b      	beq.n	8007f6e <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f004 ff32 	bl	800cda4 <SDMMC_CmdStopTransfer>
 8007f40:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d012      	beq.n	8007f6e <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a39      	ldr	r2, [pc, #228]	; (8008034 <HAL_SD_WriteBlocks+0x324>)
 8007f4e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f56:	431a      	orrs	r2, r3
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e05e      	b.n	800802c <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f74:	f003 0308 	and.w	r3, r3, #8
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d012      	beq.n	8007fa2 <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a2c      	ldr	r2, [pc, #176]	; (8008034 <HAL_SD_WriteBlocks+0x324>)
 8007f82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f88:	f043 0208 	orr.w	r2, r3, #8
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e044      	b.n	800802c <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fa8:	f003 0302 	and.w	r3, r3, #2
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d012      	beq.n	8007fd6 <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a1f      	ldr	r2, [pc, #124]	; (8008034 <HAL_SD_WriteBlocks+0x324>)
 8007fb6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbc:	f043 0202 	orr.w	r2, r3, #2
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e02a      	b.n	800802c <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fdc:	f003 0310 	and.w	r3, r3, #16
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d012      	beq.n	800800a <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a12      	ldr	r2, [pc, #72]	; (8008034 <HAL_SD_WriteBlocks+0x324>)
 8007fea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff0:	f043 0210 	orr.w	r2, r3, #16
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e010      	b.n	800802c <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a0a      	ldr	r2, [pc, #40]	; (8008038 <HAL_SD_WriteBlocks+0x328>)
 8008010:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2201      	movs	r2, #1
 8008016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800801a:	2300      	movs	r3, #0
 800801c:	e006      	b.n	800802c <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008022:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
  }
}
 800802c:	4618      	mov	r0, r3
 800802e:	3748      	adds	r7, #72	; 0x48
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	1fe00fff 	.word	0x1fe00fff
 8008038:	18000f3a 	.word	0x18000f3a

0800803c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800804a:	0f9b      	lsrs	r3, r3, #30
 800804c:	b2da      	uxtb	r2, r3
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008056:	0e9b      	lsrs	r3, r3, #26
 8008058:	b2db      	uxtb	r3, r3
 800805a:	f003 030f 	and.w	r3, r3, #15
 800805e:	b2da      	uxtb	r2, r3
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008068:	0e1b      	lsrs	r3, r3, #24
 800806a:	b2db      	uxtb	r3, r3
 800806c:	f003 0303 	and.w	r3, r3, #3
 8008070:	b2da      	uxtb	r2, r3
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800807a:	0c1b      	lsrs	r3, r3, #16
 800807c:	b2da      	uxtb	r2, r3
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008086:	0a1b      	lsrs	r3, r3, #8
 8008088:	b2da      	uxtb	r2, r3
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008092:	b2da      	uxtb	r2, r3
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800809c:	0d1b      	lsrs	r3, r3, #20
 800809e:	b29a      	uxth	r2, r3
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080a8:	0c1b      	lsrs	r3, r3, #16
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	f003 030f 	and.w	r3, r3, #15
 80080b0:	b2da      	uxtb	r2, r3
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080ba:	0bdb      	lsrs	r3, r3, #15
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	f003 0301 	and.w	r3, r3, #1
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080cc:	0b9b      	lsrs	r3, r3, #14
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	f003 0301 	and.w	r3, r3, #1
 80080d4:	b2da      	uxtb	r2, r3
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080de:	0b5b      	lsrs	r3, r3, #13
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	b2da      	uxtb	r2, r3
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080f0:	0b1b      	lsrs	r3, r3, #12
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	f003 0301 	and.w	r3, r3, #1
 80080f8:	b2da      	uxtb	r2, r3
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	2200      	movs	r2, #0
 8008102:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008108:	2b00      	cmp	r3, #0
 800810a:	d163      	bne.n	80081d4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008110:	009a      	lsls	r2, r3, #2
 8008112:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008116:	4013      	ands	r3, r2
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800811c:	0f92      	lsrs	r2, r2, #30
 800811e:	431a      	orrs	r2, r3
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008128:	0edb      	lsrs	r3, r3, #27
 800812a:	b2db      	uxtb	r3, r3
 800812c:	f003 0307 	and.w	r3, r3, #7
 8008130:	b2da      	uxtb	r2, r3
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800813a:	0e1b      	lsrs	r3, r3, #24
 800813c:	b2db      	uxtb	r3, r3
 800813e:	f003 0307 	and.w	r3, r3, #7
 8008142:	b2da      	uxtb	r2, r3
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800814c:	0d5b      	lsrs	r3, r3, #21
 800814e:	b2db      	uxtb	r3, r3
 8008150:	f003 0307 	and.w	r3, r3, #7
 8008154:	b2da      	uxtb	r2, r3
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800815e:	0c9b      	lsrs	r3, r3, #18
 8008160:	b2db      	uxtb	r3, r3
 8008162:	f003 0307 	and.w	r3, r3, #7
 8008166:	b2da      	uxtb	r2, r3
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008170:	0bdb      	lsrs	r3, r3, #15
 8008172:	b2db      	uxtb	r3, r3
 8008174:	f003 0307 	and.w	r3, r3, #7
 8008178:	b2da      	uxtb	r2, r3
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	1c5a      	adds	r2, r3, #1
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	7e1b      	ldrb	r3, [r3, #24]
 800818c:	b2db      	uxtb	r3, r3
 800818e:	f003 0307 	and.w	r3, r3, #7
 8008192:	3302      	adds	r3, #2
 8008194:	2201      	movs	r2, #1
 8008196:	fa02 f303 	lsl.w	r3, r2, r3
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800819e:	fb03 f202 	mul.w	r2, r3, r2
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	7a1b      	ldrb	r3, [r3, #8]
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	f003 030f 	and.w	r3, r3, #15
 80081b0:	2201      	movs	r2, #1
 80081b2:	409a      	lsls	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80081c0:	0a52      	lsrs	r2, r2, #9
 80081c2:	fb03 f202 	mul.w	r2, r3, r2
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081d0:	659a      	str	r2, [r3, #88]	; 0x58
 80081d2:	e031      	b.n	8008238 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d11d      	bne.n	8008218 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081e0:	041b      	lsls	r3, r3, #16
 80081e2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081ea:	0c1b      	lsrs	r3, r3, #16
 80081ec:	431a      	orrs	r2, r3
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	3301      	adds	r3, #1
 80081f8:	029a      	lsls	r2, r3, #10
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f44f 7200 	mov.w	r2, #512	; 0x200
 800820c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	659a      	str	r2, [r3, #88]	; 0x58
 8008216:	e00f      	b.n	8008238 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a58      	ldr	r2, [pc, #352]	; (8008380 <HAL_SD_GetCardCSD+0x344>)
 800821e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008224:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	e09d      	b.n	8008374 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800823c:	0b9b      	lsrs	r3, r3, #14
 800823e:	b2db      	uxtb	r3, r3
 8008240:	f003 0301 	and.w	r3, r3, #1
 8008244:	b2da      	uxtb	r2, r3
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800824e:	09db      	lsrs	r3, r3, #7
 8008250:	b2db      	uxtb	r3, r3
 8008252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008256:	b2da      	uxtb	r2, r3
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008260:	b2db      	uxtb	r3, r3
 8008262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008266:	b2da      	uxtb	r2, r3
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008270:	0fdb      	lsrs	r3, r3, #31
 8008272:	b2da      	uxtb	r2, r3
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800827c:	0f5b      	lsrs	r3, r3, #29
 800827e:	b2db      	uxtb	r3, r3
 8008280:	f003 0303 	and.w	r3, r3, #3
 8008284:	b2da      	uxtb	r2, r3
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800828e:	0e9b      	lsrs	r3, r3, #26
 8008290:	b2db      	uxtb	r3, r3
 8008292:	f003 0307 	and.w	r3, r3, #7
 8008296:	b2da      	uxtb	r2, r3
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082a0:	0d9b      	lsrs	r3, r3, #22
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	f003 030f 	and.w	r3, r3, #15
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082b2:	0d5b      	lsrs	r3, r3, #21
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	f003 0301 	and.w	r3, r3, #1
 80082ba:	b2da      	uxtb	r2, r3
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ce:	0c1b      	lsrs	r3, r3, #16
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	b2da      	uxtb	r2, r3
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082e2:	0bdb      	lsrs	r3, r3, #15
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	f003 0301 	and.w	r3, r3, #1
 80082ea:	b2da      	uxtb	r2, r3
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082f6:	0b9b      	lsrs	r3, r3, #14
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	f003 0301 	and.w	r3, r3, #1
 80082fe:	b2da      	uxtb	r2, r3
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800830a:	0b5b      	lsrs	r3, r3, #13
 800830c:	b2db      	uxtb	r3, r3
 800830e:	f003 0301 	and.w	r3, r3, #1
 8008312:	b2da      	uxtb	r2, r3
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800831e:	0b1b      	lsrs	r3, r3, #12
 8008320:	b2db      	uxtb	r3, r3
 8008322:	f003 0301 	and.w	r3, r3, #1
 8008326:	b2da      	uxtb	r2, r3
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008332:	0a9b      	lsrs	r3, r3, #10
 8008334:	b2db      	uxtb	r3, r3
 8008336:	f003 0303 	and.w	r3, r3, #3
 800833a:	b2da      	uxtb	r2, r3
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008346:	0a1b      	lsrs	r3, r3, #8
 8008348:	b2db      	uxtb	r3, r3
 800834a:	f003 0303 	and.w	r3, r3, #3
 800834e:	b2da      	uxtb	r2, r3
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800835a:	085b      	lsrs	r3, r3, #1
 800835c:	b2db      	uxtb	r3, r3
 800835e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008362:	b2da      	uxtb	r2, r3
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	2201      	movs	r2, #1
 800836e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr
 8008380:	1fe00fff 	.word	0x1fe00fff

08008384 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b094      	sub	sp, #80	; 0x50
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800838e:	2300      	movs	r3, #0
 8008390:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008394:	f107 0308 	add.w	r3, r7, #8
 8008398:	4619      	mov	r1, r3
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fbd4 	bl	8008b48 <SD_SendSDStatus>
 80083a0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80083a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d011      	beq.n	80083cc <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a4f      	ldr	r2, [pc, #316]	; (80084ec <HAL_SD_GetCardStatus+0x168>)
 80083ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083b6:	431a      	orrs	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80083ca:	e070      	b.n	80084ae <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	099b      	lsrs	r3, r3, #6
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	f003 0303 	and.w	r3, r3, #3
 80083d6:	b2da      	uxtb	r2, r3
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	095b      	lsrs	r3, r3, #5
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	f003 0301 	and.w	r3, r3, #1
 80083e6:	b2da      	uxtb	r2, r3
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	0a1b      	lsrs	r3, r3, #8
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	0e1b      	lsrs	r3, r3, #24
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	4313      	orrs	r3, r2
 8008400:	b29a      	uxth	r2, r3
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	061a      	lsls	r2, r3, #24
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	021b      	lsls	r3, r3, #8
 800840e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008412:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	0a1b      	lsrs	r3, r3, #8
 8008418:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800841c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	0e1b      	lsrs	r3, r3, #24
 8008422:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	b2da      	uxtb	r2, r3
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	0a1b      	lsrs	r3, r3, #8
 8008434:	b2da      	uxtb	r2, r3
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	0d1b      	lsrs	r3, r3, #20
 800843e:	b2db      	uxtb	r3, r3
 8008440:	f003 030f 	and.w	r3, r3, #15
 8008444:	b2da      	uxtb	r2, r3
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	0c1b      	lsrs	r3, r3, #16
 800844e:	b29b      	uxth	r3, r3
 8008450:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008454:	b29a      	uxth	r2, r3
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	b29b      	uxth	r3, r3
 800845a:	b2db      	uxtb	r3, r3
 800845c:	b29b      	uxth	r3, r3
 800845e:	4313      	orrs	r3, r2
 8008460:	b29a      	uxth	r2, r3
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	0a9b      	lsrs	r3, r3, #10
 800846a:	b2db      	uxtb	r3, r3
 800846c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008470:	b2da      	uxtb	r2, r3
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	0a1b      	lsrs	r3, r3, #8
 800847a:	b2db      	uxtb	r3, r3
 800847c:	f003 0303 	and.w	r3, r3, #3
 8008480:	b2da      	uxtb	r2, r3
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	091b      	lsrs	r3, r3, #4
 800848a:	b2db      	uxtb	r3, r3
 800848c:	f003 030f 	and.w	r3, r3, #15
 8008490:	b2da      	uxtb	r2, r3
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	b2db      	uxtb	r3, r3
 800849a:	f003 030f 	and.w	r3, r3, #15
 800849e:	b2da      	uxtb	r2, r3
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	0e1b      	lsrs	r3, r3, #24
 80084a8:	b2da      	uxtb	r2, r3
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80084b6:	4618      	mov	r0, r3
 80084b8:	f004 fbc4 	bl	800cc44 <SDMMC_CmdBlockLength>
 80084bc:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80084be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00d      	beq.n	80084e0 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a08      	ldr	r2, [pc, #32]	; (80084ec <HAL_SD_GetCardStatus+0x168>)
 80084ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084d0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2201      	movs	r2, #1
 80084d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80084e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3750      	adds	r7, #80	; 0x50
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	1fe00fff 	.word	0x1fe00fff

080084f0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008548:	b5b0      	push	{r4, r5, r7, lr}
 800854a:	b090      	sub	sp, #64	; 0x40
 800854c:	af04      	add	r7, sp, #16
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2203      	movs	r2, #3
 800855c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008564:	2b03      	cmp	r3, #3
 8008566:	d02e      	beq.n	80085c6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800856e:	d106      	bne.n	800857e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008574:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	639a      	str	r2, [r3, #56]	; 0x38
 800857c:	e029      	b.n	80085d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008584:	d10a      	bne.n	800859c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fbd6 	bl	8008d38 <SD_WideBus_Enable>
 800858c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008594:	431a      	orrs	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	639a      	str	r2, [r3, #56]	; 0x38
 800859a:	e01a      	b.n	80085d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10a      	bne.n	80085b8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fc13 	bl	8008dce <SD_WideBus_Disable>
 80085a8:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b0:	431a      	orrs	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	639a      	str	r2, [r3, #56]	; 0x38
 80085b6:	e00c      	b.n	80085d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	639a      	str	r2, [r3, #56]	; 0x38
 80085c4:	e005      	b.n	80085d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d007      	beq.n	80085ea <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a60      	ldr	r2, [pc, #384]	; (8008760 <HAL_SD_ConfigWideBusOperation+0x218>)
 80085e0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80085e8:	e097      	b.n	800871a <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80085ea:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80085ee:	f7fd feb9 	bl	8006364 <HAL_RCCEx_GetPeriphCLKFreq>
 80085f2:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 80085f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f000 8086 	beq.w	8008708 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	695a      	ldr	r2, [r3, #20]
 8008616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008618:	4952      	ldr	r1, [pc, #328]	; (8008764 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800861a:	fba1 1303 	umull	r1, r3, r1, r3
 800861e:	0e1b      	lsrs	r3, r3, #24
 8008620:	429a      	cmp	r2, r3
 8008622:	d303      	bcc.n	800862c <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	695b      	ldr	r3, [r3, #20]
 8008628:	61fb      	str	r3, [r7, #28]
 800862a:	e05a      	b.n	80086e2 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008634:	d103      	bne.n	800863e <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	61fb      	str	r3, [r7, #28]
 800863c:	e051      	b.n	80086e2 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008646:	d126      	bne.n	8008696 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	695b      	ldr	r3, [r3, #20]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10e      	bne.n	800866e <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008652:	4a45      	ldr	r2, [pc, #276]	; (8008768 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d906      	bls.n	8008666 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865a:	4a42      	ldr	r2, [pc, #264]	; (8008764 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800865c:	fba2 2303 	umull	r2, r3, r2, r3
 8008660:	0e5b      	lsrs	r3, r3, #25
 8008662:	61fb      	str	r3, [r7, #28]
 8008664:	e03d      	b.n	80086e2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	695b      	ldr	r3, [r3, #20]
 800866a:	61fb      	str	r3, [r7, #28]
 800866c:	e039      	b.n	80086e2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	005b      	lsls	r3, r3, #1
 8008674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008676:	fbb2 f3f3 	udiv	r3, r2, r3
 800867a:	4a3b      	ldr	r2, [pc, #236]	; (8008768 <HAL_SD_ConfigWideBusOperation+0x220>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d906      	bls.n	800868e <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	4a38      	ldr	r2, [pc, #224]	; (8008764 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008684:	fba2 2303 	umull	r2, r3, r2, r3
 8008688:	0e5b      	lsrs	r3, r3, #25
 800868a:	61fb      	str	r3, [r7, #28]
 800868c:	e029      	b.n	80086e2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	61fb      	str	r3, [r7, #28]
 8008694:	e025      	b.n	80086e2 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10e      	bne.n	80086bc <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	4a32      	ldr	r2, [pc, #200]	; (800876c <HAL_SD_ConfigWideBusOperation+0x224>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d906      	bls.n	80086b4 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80086a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a8:	4a2e      	ldr	r2, [pc, #184]	; (8008764 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80086aa:	fba2 2303 	umull	r2, r3, r2, r3
 80086ae:	0e1b      	lsrs	r3, r3, #24
 80086b0:	61fb      	str	r3, [r7, #28]
 80086b2:	e016      	b.n	80086e2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	695b      	ldr	r3, [r3, #20]
 80086b8:	61fb      	str	r3, [r7, #28]
 80086ba:	e012      	b.n	80086e2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	695b      	ldr	r3, [r3, #20]
 80086c0:	005b      	lsls	r3, r3, #1
 80086c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80086c8:	4a28      	ldr	r2, [pc, #160]	; (800876c <HAL_SD_ConfigWideBusOperation+0x224>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d906      	bls.n	80086dc <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80086ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d0:	4a24      	ldr	r2, [pc, #144]	; (8008764 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80086d2:	fba2 2303 	umull	r2, r3, r2, r3
 80086d6:	0e1b      	lsrs	r3, r3, #24
 80086d8:	61fb      	str	r3, [r7, #28]
 80086da:	e002      	b.n	80086e2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	695b      	ldr	r3, [r3, #20]
 80086e0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	699b      	ldr	r3, [r3, #24]
 80086e6:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681d      	ldr	r5, [r3, #0]
 80086ec:	466c      	mov	r4, sp
 80086ee:	f107 0318 	add.w	r3, r7, #24
 80086f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80086f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80086fa:	f107 030c 	add.w	r3, r7, #12
 80086fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008700:	4628      	mov	r0, r5
 8008702:	f004 f9c1 	bl	800ca88 <SDMMC_Init>
 8008706:	e008      	b.n	800871a <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008722:	4618      	mov	r0, r3
 8008724:	f004 fa8e 	bl	800cc44 <SDMMC_CmdBlockLength>
 8008728:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800872a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00c      	beq.n	800874a <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a0a      	ldr	r2, [pc, #40]	; (8008760 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008736:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800873c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873e:	431a      	orrs	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008752:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008756:	4618      	mov	r0, r3
 8008758:	3730      	adds	r7, #48	; 0x30
 800875a:	46bd      	mov	sp, r7
 800875c:	bdb0      	pop	{r4, r5, r7, pc}
 800875e:	bf00      	nop
 8008760:	1fe00fff 	.word	0x1fe00fff
 8008764:	55e63b89 	.word	0x55e63b89
 8008768:	02faf080 	.word	0x02faf080
 800876c:	017d7840 	.word	0x017d7840

08008770 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b086      	sub	sp, #24
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008778:	2300      	movs	r3, #0
 800877a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800877c:	f107 030c 	add.w	r3, r7, #12
 8008780:	4619      	mov	r1, r3
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fab0 	bl	8008ce8 <SD_SendStatus>
 8008788:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d005      	beq.n	800879c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	431a      	orrs	r2, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	0a5b      	lsrs	r3, r3, #9
 80087a0:	f003 030f 	and.w	r3, r3, #15
 80087a4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80087a6:	693b      	ldr	r3, [r7, #16]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3718      	adds	r7, #24
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80087b0:	b5b0      	push	{r4, r5, r7, lr}
 80087b2:	b090      	sub	sp, #64	; 0x40
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80087b8:	2301      	movs	r3, #1
 80087ba:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4618      	mov	r0, r3
 80087c2:	f004 f9bb 	bl	800cb3c <SDMMC_GetPowerState>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d102      	bne.n	80087d2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80087cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80087d0:	e0a9      	b.n	8008926 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d6:	2b03      	cmp	r3, #3
 80087d8:	d02e      	beq.n	8008838 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4618      	mov	r0, r3
 80087e0:	f004 fc00 	bl	800cfe4 <SDMMC_CmdSendCID>
 80087e4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80087e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d001      	beq.n	80087f0 <SD_InitCard+0x40>
    {
      return errorstate;
 80087ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ee:	e09a      	b.n	8008926 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2100      	movs	r1, #0
 80087f6:	4618      	mov	r0, r3
 80087f8:	f004 f9e5 	bl	800cbc6 <SDMMC_GetResponse>
 80087fc:	4602      	mov	r2, r0
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2104      	movs	r1, #4
 8008808:	4618      	mov	r0, r3
 800880a:	f004 f9dc 	bl	800cbc6 <SDMMC_GetResponse>
 800880e:	4602      	mov	r2, r0
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2108      	movs	r1, #8
 800881a:	4618      	mov	r0, r3
 800881c:	f004 f9d3 	bl	800cbc6 <SDMMC_GetResponse>
 8008820:	4602      	mov	r2, r0
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	210c      	movs	r1, #12
 800882c:	4618      	mov	r0, r3
 800882e:	f004 f9ca 	bl	800cbc6 <SDMMC_GetResponse>
 8008832:	4602      	mov	r2, r0
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800883c:	2b03      	cmp	r3, #3
 800883e:	d00d      	beq.n	800885c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f107 020e 	add.w	r2, r7, #14
 8008848:	4611      	mov	r1, r2
 800884a:	4618      	mov	r0, r3
 800884c:	f004 fc09 	bl	800d062 <SDMMC_CmdSetRelAdd>
 8008850:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008854:	2b00      	cmp	r3, #0
 8008856:	d001      	beq.n	800885c <SD_InitCard+0xac>
    {
      return errorstate;
 8008858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800885a:	e064      	b.n	8008926 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008860:	2b03      	cmp	r3, #3
 8008862:	d036      	beq.n	80088d2 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008864:	89fb      	ldrh	r3, [r7, #14]
 8008866:	461a      	mov	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008874:	041b      	lsls	r3, r3, #16
 8008876:	4619      	mov	r1, r3
 8008878:	4610      	mov	r0, r2
 800887a:	f004 fbd2 	bl	800d022 <SDMMC_CmdSendCSD>
 800887e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008882:	2b00      	cmp	r3, #0
 8008884:	d001      	beq.n	800888a <SD_InitCard+0xda>
    {
      return errorstate;
 8008886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008888:	e04d      	b.n	8008926 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2100      	movs	r1, #0
 8008890:	4618      	mov	r0, r3
 8008892:	f004 f998 	bl	800cbc6 <SDMMC_GetResponse>
 8008896:	4602      	mov	r2, r0
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2104      	movs	r1, #4
 80088a2:	4618      	mov	r0, r3
 80088a4:	f004 f98f 	bl	800cbc6 <SDMMC_GetResponse>
 80088a8:	4602      	mov	r2, r0
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2108      	movs	r1, #8
 80088b4:	4618      	mov	r0, r3
 80088b6:	f004 f986 	bl	800cbc6 <SDMMC_GetResponse>
 80088ba:	4602      	mov	r2, r0
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	210c      	movs	r1, #12
 80088c6:	4618      	mov	r0, r3
 80088c8:	f004 f97d 	bl	800cbc6 <SDMMC_GetResponse>
 80088cc:	4602      	mov	r2, r0
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2104      	movs	r1, #4
 80088d8:	4618      	mov	r0, r3
 80088da:	f004 f974 	bl	800cbc6 <SDMMC_GetResponse>
 80088de:	4603      	mov	r3, r0
 80088e0:	0d1a      	lsrs	r2, r3, #20
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80088e6:	f107 0310 	add.w	r3, r7, #16
 80088ea:	4619      	mov	r1, r3
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f7ff fba5 	bl	800803c <HAL_SD_GetCardCSD>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d002      	beq.n	80088fe <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80088fc:	e013      	b.n	8008926 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6819      	ldr	r1, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008906:	041b      	lsls	r3, r3, #16
 8008908:	2200      	movs	r2, #0
 800890a:	461c      	mov	r4, r3
 800890c:	4615      	mov	r5, r2
 800890e:	4622      	mov	r2, r4
 8008910:	462b      	mov	r3, r5
 8008912:	4608      	mov	r0, r1
 8008914:	f004 fa7c 	bl	800ce10 <SDMMC_CmdSelDesel>
 8008918:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800891a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800891c:	2b00      	cmp	r3, #0
 800891e:	d001      	beq.n	8008924 <SD_InitCard+0x174>
  {
    return errorstate;
 8008920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008922:	e000      	b.n	8008926 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3740      	adds	r7, #64	; 0x40
 800892a:	46bd      	mov	sp, r7
 800892c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008930 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b088      	sub	sp, #32
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008938:	2300      	movs	r3, #0
 800893a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800893c:	2300      	movs	r3, #0
 800893e:	61fb      	str	r3, [r7, #28]
 8008940:	2300      	movs	r3, #0
 8008942:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8008944:	f7fa f8ba 	bl	8002abc <HAL_GetTick>
 8008948:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4618      	mov	r0, r3
 8008950:	f004 fa82 	bl	800ce58 <SDMMC_CmdGoIdleState>
 8008954:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <SD_PowerON+0x30>
  {
    return errorstate;
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	e0ed      	b.n	8008b3c <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4618      	mov	r0, r3
 8008966:	f004 fa95 	bl	800ce94 <SDMMC_CmdOperCond>
 800896a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00d      	beq.n	800898e <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4618      	mov	r0, r3
 800897e:	f004 fa6b 	bl	800ce58 <SDMMC_CmdGoIdleState>
 8008982:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d004      	beq.n	8008994 <SD_PowerON+0x64>
    {
      return errorstate;
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	e0d6      	b.n	8008b3c <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2201      	movs	r2, #1
 8008992:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008998:	2b01      	cmp	r3, #1
 800899a:	d137      	bne.n	8008a0c <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2100      	movs	r1, #0
 80089a2:	4618      	mov	r0, r3
 80089a4:	f004 fa96 	bl	800ced4 <SDMMC_CmdAppCommand>
 80089a8:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d02d      	beq.n	8008a0c <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80089b4:	e0c2      	b.n	8008b3c <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2100      	movs	r1, #0
 80089bc:	4618      	mov	r0, r3
 80089be:	f004 fa89 	bl	800ced4 <SDMMC_CmdAppCommand>
 80089c2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <SD_PowerON+0x9e>
    {
      return errorstate;
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	e0b6      	b.n	8008b3c <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	495c      	ldr	r1, [pc, #368]	; (8008b44 <SD_PowerON+0x214>)
 80089d4:	4618      	mov	r0, r3
 80089d6:	f004 faa0 	bl	800cf1a <SDMMC_CmdAppOperCommand>
 80089da:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d002      	beq.n	80089e8 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80089e6:	e0a9      	b.n	8008b3c <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2100      	movs	r1, #0
 80089ee:	4618      	mov	r0, r3
 80089f0:	f004 f8e9 	bl	800cbc6 <SDMMC_GetResponse>
 80089f4:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	0fdb      	lsrs	r3, r3, #31
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d101      	bne.n	8008a02 <SD_PowerON+0xd2>
 80089fe:	2301      	movs	r3, #1
 8008a00:	e000      	b.n	8008a04 <SD_PowerON+0xd4>
 8008a02:	2300      	movs	r3, #0
 8008a04:	61bb      	str	r3, [r7, #24]

    count++;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d802      	bhi.n	8008a1c <SD_PowerON+0xec>
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d0cc      	beq.n	80089b6 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d902      	bls.n	8008a2c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008a26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a2a:	e087      	b.n	8008b3c <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d07e      	beq.n	8008b34 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	699b      	ldr	r3, [r3, #24]
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d17a      	bne.n	8008b3a <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d075      	beq.n	8008b3a <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a54:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f042 0208 	orr.w	r2, r2, #8
 8008a64:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f004 fb60 	bl	800d130 <SDMMC_CmdVoltageSwitch>
 8008a70:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00c      	beq.n	8008a92 <SD_PowerON+0x162>
        {
          return errorstate;
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	e05f      	b.n	8008b3c <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008a7c:	f7fa f81e 	bl	8002abc <HAL_GetTick>
 8008a80:	4602      	mov	r2, r0
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a8a:	d102      	bne.n	8008a92 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8008a8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a90:	e054      	b.n	8008b3c <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008a9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008aa0:	d1ec      	bne.n	8008a7c <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008aaa:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008aba:	d002      	beq.n	8008ac2 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8008abc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008ac0:	e03c      	b.n	8008b3c <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8008ac2:	2001      	movs	r0, #1
 8008ac4:	f000 fa9e 	bl	8009004 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f042 0204 	orr.w	r2, r2, #4
 8008ad6:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008ad8:	e00a      	b.n	8008af0 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008ada:	f7f9 ffef 	bl	8002abc <HAL_GetTick>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ae8:	d102      	bne.n	8008af0 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8008aea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008aee:	e025      	b.n	8008b3c <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008afa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008afe:	d1ec      	bne.n	8008ada <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008b08:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b18:	d102      	bne.n	8008b20 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008b1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b1e:	e00d      	b.n	8008b3c <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2213      	movs	r2, #19
 8008b26:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b30:	639a      	str	r2, [r3, #56]	; 0x38
 8008b32:	e002      	b.n	8008b3a <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3720      	adds	r7, #32
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	c1100000 	.word	0xc1100000

08008b48 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b08c      	sub	sp, #48	; 0x30
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008b52:	f7f9 ffb3 	bl	8002abc <HAL_GetTick>
 8008b56:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2100      	movs	r1, #0
 8008b62:	4618      	mov	r0, r3
 8008b64:	f004 f82f 	bl	800cbc6 <SDMMC_GetResponse>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b72:	d102      	bne.n	8008b7a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008b74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b78:	e0b0      	b.n	8008cdc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2140      	movs	r1, #64	; 0x40
 8008b80:	4618      	mov	r0, r3
 8008b82:	f004 f85f 	bl	800cc44 <SDMMC_CmdBlockLength>
 8008b86:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b88:	6a3b      	ldr	r3, [r7, #32]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d005      	beq.n	8008b9a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008b96:	6a3b      	ldr	r3, [r7, #32]
 8008b98:	e0a0      	b.n	8008cdc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ba2:	041b      	lsls	r3, r3, #16
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	4610      	mov	r0, r2
 8008ba8:	f004 f994 	bl	800ced4 <SDMMC_CmdAppCommand>
 8008bac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bae:	6a3b      	ldr	r3, [r7, #32]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d005      	beq.n	8008bc0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008bbc:	6a3b      	ldr	r3, [r7, #32]
 8008bbe:	e08d      	b.n	8008cdc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008bc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bc4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008bc6:	2340      	movs	r3, #64	; 0x40
 8008bc8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008bca:	2360      	movs	r3, #96	; 0x60
 8008bcc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008bce:	2302      	movs	r3, #2
 8008bd0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f107 0208 	add.w	r2, r7, #8
 8008be2:	4611      	mov	r1, r2
 8008be4:	4618      	mov	r0, r3
 8008be6:	f004 f801 	bl	800cbec <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f004 fa7c 	bl	800d0ec <SDMMC_CmdStatusRegister>
 8008bf4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bf6:	6a3b      	ldr	r3, [r7, #32]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d02b      	beq.n	8008c54 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008c04:	6a3b      	ldr	r3, [r7, #32]
 8008c06:	e069      	b.n	8008cdc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d013      	beq.n	8008c3e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8008c16:	2300      	movs	r3, #0
 8008c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c1a:	e00d      	b.n	8008c38 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4618      	mov	r0, r3
 8008c22:	f003 ff5b 	bl	800cadc <SDMMC_ReadFIFO>
 8008c26:	4602      	mov	r2, r0
 8008c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2a:	601a      	str	r2, [r3, #0]
        pData++;
 8008c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2e:	3304      	adds	r3, #4
 8008c30:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8008c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c34:	3301      	adds	r3, #1
 8008c36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c3a:	2b07      	cmp	r3, #7
 8008c3c:	d9ee      	bls.n	8008c1c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008c3e:	f7f9 ff3d 	bl	8002abc <HAL_GetTick>
 8008c42:	4602      	mov	r2, r0
 8008c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c4c:	d102      	bne.n	8008c54 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008c4e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c52:	e043      	b.n	8008cdc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c5a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d0d2      	beq.n	8008c08 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c68:	f003 0308 	and.w	r3, r3, #8
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008c70:	2308      	movs	r3, #8
 8008c72:	e033      	b.n	8008cdc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c7a:	f003 0302 	and.w	r3, r3, #2
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008c82:	2302      	movs	r3, #2
 8008c84:	e02a      	b.n	8008cdc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c8c:	f003 0320 	and.w	r3, r3, #32
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d017      	beq.n	8008cc4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008c94:	2320      	movs	r3, #32
 8008c96:	e021      	b.n	8008cdc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f003 ff1d 	bl	800cadc <SDMMC_ReadFIFO>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca6:	601a      	str	r2, [r3, #0]
    pData++;
 8008ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008caa:	3304      	adds	r3, #4
 8008cac:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008cae:	f7f9 ff05 	bl	8002abc <HAL_GetTick>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb6:	1ad3      	subs	r3, r2, r3
 8008cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cbc:	d102      	bne.n	8008cc4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008cbe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008cc2:	e00b      	b.n	8008cdc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d1e2      	bne.n	8008c98 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a03      	ldr	r2, [pc, #12]	; (8008ce4 <SD_SendSDStatus+0x19c>)
 8008cd8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3730      	adds	r7, #48	; 0x30
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	18000f3a 	.word	0x18000f3a

08008ce8 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d102      	bne.n	8008cfe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008cf8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008cfc:	e018      	b.n	8008d30 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d06:	041b      	lsls	r3, r3, #16
 8008d08:	4619      	mov	r1, r3
 8008d0a:	4610      	mov	r0, r2
 8008d0c:	f004 f9cb 	bl	800d0a6 <SDMMC_CmdSendStatus>
 8008d10:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d001      	beq.n	8008d1c <SD_SendStatus+0x34>
  {
    return errorstate;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	e009      	b.n	8008d30 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2100      	movs	r1, #0
 8008d22:	4618      	mov	r0, r3
 8008d24:	f003 ff4f 	bl	800cbc6 <SDMMC_GetResponse>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3710      	adds	r7, #16
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b086      	sub	sp, #24
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008d40:	2300      	movs	r3, #0
 8008d42:	60fb      	str	r3, [r7, #12]
 8008d44:	2300      	movs	r3, #0
 8008d46:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f003 ff39 	bl	800cbc6 <SDMMC_GetResponse>
 8008d54:	4603      	mov	r3, r0
 8008d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d5e:	d102      	bne.n	8008d66 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008d60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d64:	e02f      	b.n	8008dc6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008d66:	f107 030c 	add.w	r3, r7, #12
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 f879 	bl	8008e64 <SD_FindSCR>
 8008d72:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d001      	beq.n	8008d7e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	e023      	b.n	8008dc6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d01c      	beq.n	8008dc2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d90:	041b      	lsls	r3, r3, #16
 8008d92:	4619      	mov	r1, r3
 8008d94:	4610      	mov	r0, r2
 8008d96:	f004 f89d 	bl	800ced4 <SDMMC_CmdAppCommand>
 8008d9a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d001      	beq.n	8008da6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	e00f      	b.n	8008dc6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2102      	movs	r1, #2
 8008dac:	4618      	mov	r0, r3
 8008dae:	f004 f8d4 	bl	800cf5a <SDMMC_CmdBusWidth>
 8008db2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d001      	beq.n	8008dbe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	e003      	b.n	8008dc6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	e001      	b.n	8008dc6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008dc2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3718      	adds	r7, #24
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b086      	sub	sp, #24
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	60fb      	str	r3, [r7, #12]
 8008dda:	2300      	movs	r3, #0
 8008ddc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2100      	movs	r1, #0
 8008de4:	4618      	mov	r0, r3
 8008de6:	f003 feee 	bl	800cbc6 <SDMMC_GetResponse>
 8008dea:	4603      	mov	r3, r0
 8008dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008df0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008df4:	d102      	bne.n	8008dfc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008df6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008dfa:	e02f      	b.n	8008e5c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008dfc:	f107 030c 	add.w	r3, r7, #12
 8008e00:	4619      	mov	r1, r3
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 f82e 	bl	8008e64 <SD_FindSCR>
 8008e08:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d001      	beq.n	8008e14 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	e023      	b.n	8008e5c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d01c      	beq.n	8008e58 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e26:	041b      	lsls	r3, r3, #16
 8008e28:	4619      	mov	r1, r3
 8008e2a:	4610      	mov	r0, r2
 8008e2c:	f004 f852 	bl	800ced4 <SDMMC_CmdAppCommand>
 8008e30:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d001      	beq.n	8008e3c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	e00f      	b.n	8008e5c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2100      	movs	r1, #0
 8008e42:	4618      	mov	r0, r3
 8008e44:	f004 f889 	bl	800cf5a <SDMMC_CmdBusWidth>
 8008e48:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d001      	beq.n	8008e54 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	e003      	b.n	8008e5c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008e54:	2300      	movs	r3, #0
 8008e56:	e001      	b.n	8008e5c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008e58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3718      	adds	r7, #24
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b08e      	sub	sp, #56	; 0x38
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008e6e:	f7f9 fe25 	bl	8002abc <HAL_GetTick>
 8008e72:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008e74:	2300      	movs	r3, #0
 8008e76:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008e78:	2300      	movs	r3, #0
 8008e7a:	60bb      	str	r3, [r7, #8]
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2108      	movs	r1, #8
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f003 feda 	bl	800cc44 <SDMMC_CmdBlockLength>
 8008e90:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d001      	beq.n	8008e9c <SD_FindSCR+0x38>
  {
    return errorstate;
 8008e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9a:	e0ad      	b.n	8008ff8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ea4:	041b      	lsls	r3, r3, #16
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	4610      	mov	r0, r2
 8008eaa:	f004 f813 	bl	800ced4 <SDMMC_CmdAppCommand>
 8008eae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d001      	beq.n	8008eba <SD_FindSCR+0x56>
  {
    return errorstate;
 8008eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb8:	e09e      	b.n	8008ff8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ebe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008ec0:	2308      	movs	r3, #8
 8008ec2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008ec4:	2330      	movs	r3, #48	; 0x30
 8008ec6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008ec8:	2302      	movs	r3, #2
 8008eca:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f107 0210 	add.w	r2, r7, #16
 8008edc:	4611      	mov	r1, r2
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f003 fe84 	bl	800cbec <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f004 f859 	bl	800cfa0 <SDMMC_CmdSendSCR>
 8008eee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d027      	beq.n	8008f46 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef8:	e07e      	b.n	8008ff8 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d113      	bne.n	8008f30 <SD_FindSCR+0xcc>
 8008f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d110      	bne.n	8008f30 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4618      	mov	r0, r3
 8008f14:	f003 fde2 	bl	800cadc <SDMMC_ReadFIFO>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4618      	mov	r0, r3
 8008f22:	f003 fddb 	bl	800cadc <SDMMC_ReadFIFO>
 8008f26:	4603      	mov	r3, r0
 8008f28:	60fb      	str	r3, [r7, #12]
      index++;
 8008f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008f30:	f7f9 fdc4 	bl	8002abc <HAL_GetTick>
 8008f34:	4602      	mov	r2, r0
 8008f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f3e:	d102      	bne.n	8008f46 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008f40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f44:	e058      	b.n	8008ff8 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f4c:	f240 532a 	movw	r3, #1322	; 0x52a
 8008f50:	4013      	ands	r3, r2
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d0d1      	beq.n	8008efa <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f5c:	f003 0308 	and.w	r3, r3, #8
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d005      	beq.n	8008f70 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2208      	movs	r2, #8
 8008f6a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008f6c:	2308      	movs	r3, #8
 8008f6e:	e043      	b.n	8008ff8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f76:	f003 0302 	and.w	r3, r3, #2
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d005      	beq.n	8008f8a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2202      	movs	r2, #2
 8008f84:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008f86:	2302      	movs	r3, #2
 8008f88:	e036      	b.n	8008ff8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f90:	f003 0320 	and.w	r3, r3, #32
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d005      	beq.n	8008fa4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2220      	movs	r2, #32
 8008f9e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008fa0:	2320      	movs	r3, #32
 8008fa2:	e029      	b.n	8008ff8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a15      	ldr	r2, [pc, #84]	; (8009000 <SD_FindSCR+0x19c>)
 8008faa:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	061a      	lsls	r2, r3, #24
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	021b      	lsls	r3, r3, #8
 8008fb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008fb8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	0a1b      	lsrs	r3, r3, #8
 8008fbe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008fc2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	0e1b      	lsrs	r3, r3, #24
 8008fc8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fcc:	601a      	str	r2, [r3, #0]
    scr++;
 8008fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd0:	3304      	adds	r3, #4
 8008fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	061a      	lsls	r2, r3, #24
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	021b      	lsls	r3, r3, #8
 8008fdc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008fe0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	0a1b      	lsrs	r3, r3, #8
 8008fe6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008fea:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	0e1b      	lsrs	r3, r3, #24
 8008ff0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3738      	adds	r7, #56	; 0x38
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	18000f3a 	.word	0x18000f3a

08009004 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	4603      	mov	r3, r0
 800900c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800900e:	bf00      	nop
 8009010:	370c      	adds	r7, #12
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr

0800901a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b084      	sub	sp, #16
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d101      	bne.n	800902c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	e095      	b.n	8009158 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009030:	2b00      	cmp	r3, #0
 8009032:	d108      	bne.n	8009046 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800903c:	d009      	beq.n	8009052 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	61da      	str	r2, [r3, #28]
 8009044:	e005      	b.n	8009052 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b00      	cmp	r3, #0
 8009062:	d106      	bne.n	8009072 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f7f9 fa53 	bl	8002518 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2202      	movs	r2, #2
 8009076:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009088:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009092:	d902      	bls.n	800909a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009094:	2300      	movs	r3, #0
 8009096:	60fb      	str	r3, [r7, #12]
 8009098:	e002      	b.n	80090a0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800909a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800909e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80090a8:	d007      	beq.n	80090ba <HAL_SPI_Init+0xa0>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80090b2:	d002      	beq.n	80090ba <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80090ca:	431a      	orrs	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	691b      	ldr	r3, [r3, #16]
 80090d0:	f003 0302 	and.w	r3, r3, #2
 80090d4:	431a      	orrs	r2, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	695b      	ldr	r3, [r3, #20]
 80090da:	f003 0301 	and.w	r3, r3, #1
 80090de:	431a      	orrs	r2, r3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090e8:	431a      	orrs	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	69db      	ldr	r3, [r3, #28]
 80090ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090f2:	431a      	orrs	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6a1b      	ldr	r3, [r3, #32]
 80090f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090fc:	ea42 0103 	orr.w	r1, r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009104:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	430a      	orrs	r2, r1
 800910e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	699b      	ldr	r3, [r3, #24]
 8009114:	0c1b      	lsrs	r3, r3, #16
 8009116:	f003 0204 	and.w	r2, r3, #4
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911e:	f003 0310 	and.w	r3, r3, #16
 8009122:	431a      	orrs	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009128:	f003 0308 	and.w	r3, r3, #8
 800912c:	431a      	orrs	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009136:	ea42 0103 	orr.w	r1, r2, r3
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	430a      	orrs	r2, r1
 8009146:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2201      	movs	r2, #1
 8009152:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b088      	sub	sp, #32
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	603b      	str	r3, [r7, #0]
 800916c:	4613      	mov	r3, r2
 800916e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009170:	2300      	movs	r3, #0
 8009172:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800917a:	2b01      	cmp	r3, #1
 800917c:	d101      	bne.n	8009182 <HAL_SPI_Transmit+0x22>
 800917e:	2302      	movs	r3, #2
 8009180:	e158      	b.n	8009434 <HAL_SPI_Transmit+0x2d4>
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2201      	movs	r2, #1
 8009186:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800918a:	f7f9 fc97 	bl	8002abc <HAL_GetTick>
 800918e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009190:	88fb      	ldrh	r3, [r7, #6]
 8009192:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800919a:	b2db      	uxtb	r3, r3
 800919c:	2b01      	cmp	r3, #1
 800919e:	d002      	beq.n	80091a6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80091a0:	2302      	movs	r3, #2
 80091a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80091a4:	e13d      	b.n	8009422 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d002      	beq.n	80091b2 <HAL_SPI_Transmit+0x52>
 80091ac:	88fb      	ldrh	r3, [r7, #6]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d102      	bne.n	80091b8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80091b6:	e134      	b.n	8009422 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2203      	movs	r2, #3
 80091bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2200      	movs	r2, #0
 80091c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	68ba      	ldr	r2, [r7, #8]
 80091ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	88fa      	ldrh	r2, [r7, #6]
 80091d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	88fa      	ldrh	r2, [r7, #6]
 80091d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2200      	movs	r2, #0
 80091dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2200      	movs	r2, #0
 80091f2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2200      	movs	r2, #0
 80091f8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009202:	d10f      	bne.n	8009224 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009212:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009222:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800922e:	2b40      	cmp	r3, #64	; 0x40
 8009230:	d007      	beq.n	8009242 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009240:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800924a:	d94b      	bls.n	80092e4 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d002      	beq.n	800925a <HAL_SPI_Transmit+0xfa>
 8009254:	8afb      	ldrh	r3, [r7, #22]
 8009256:	2b01      	cmp	r3, #1
 8009258:	d13e      	bne.n	80092d8 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800925e:	881a      	ldrh	r2, [r3, #0]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800926a:	1c9a      	adds	r2, r3, #2
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009274:	b29b      	uxth	r3, r3
 8009276:	3b01      	subs	r3, #1
 8009278:	b29a      	uxth	r2, r3
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800927e:	e02b      	b.n	80092d8 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	f003 0302 	and.w	r3, r3, #2
 800928a:	2b02      	cmp	r3, #2
 800928c:	d112      	bne.n	80092b4 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009292:	881a      	ldrh	r2, [r3, #0]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800929e:	1c9a      	adds	r2, r3, #2
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	3b01      	subs	r3, #1
 80092ac:	b29a      	uxth	r2, r3
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80092b2:	e011      	b.n	80092d8 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092b4:	f7f9 fc02 	bl	8002abc <HAL_GetTick>
 80092b8:	4602      	mov	r2, r0
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d803      	bhi.n	80092cc <HAL_SPI_Transmit+0x16c>
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092ca:	d102      	bne.n	80092d2 <HAL_SPI_Transmit+0x172>
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d102      	bne.n	80092d8 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80092d2:	2303      	movs	r3, #3
 80092d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80092d6:	e0a4      	b.n	8009422 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092dc:	b29b      	uxth	r3, r3
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1ce      	bne.n	8009280 <HAL_SPI_Transmit+0x120>
 80092e2:	e07c      	b.n	80093de <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d002      	beq.n	80092f2 <HAL_SPI_Transmit+0x192>
 80092ec:	8afb      	ldrh	r3, [r7, #22]
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d170      	bne.n	80093d4 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d912      	bls.n	8009322 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009300:	881a      	ldrh	r2, [r3, #0]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800930c:	1c9a      	adds	r2, r3, #2
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009316:	b29b      	uxth	r3, r3
 8009318:	3b02      	subs	r3, #2
 800931a:	b29a      	uxth	r2, r3
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009320:	e058      	b.n	80093d4 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	330c      	adds	r3, #12
 800932c:	7812      	ldrb	r2, [r2, #0]
 800932e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009334:	1c5a      	adds	r2, r3, #1
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800933e:	b29b      	uxth	r3, r3
 8009340:	3b01      	subs	r3, #1
 8009342:	b29a      	uxth	r2, r3
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009348:	e044      	b.n	80093d4 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	f003 0302 	and.w	r3, r3, #2
 8009354:	2b02      	cmp	r3, #2
 8009356:	d12b      	bne.n	80093b0 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800935c:	b29b      	uxth	r3, r3
 800935e:	2b01      	cmp	r3, #1
 8009360:	d912      	bls.n	8009388 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009366:	881a      	ldrh	r2, [r3, #0]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009372:	1c9a      	adds	r2, r3, #2
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800937c:	b29b      	uxth	r3, r3
 800937e:	3b02      	subs	r3, #2
 8009380:	b29a      	uxth	r2, r3
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009386:	e025      	b.n	80093d4 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	330c      	adds	r3, #12
 8009392:	7812      	ldrb	r2, [r2, #0]
 8009394:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800939a:	1c5a      	adds	r2, r3, #1
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	3b01      	subs	r3, #1
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80093ae:	e011      	b.n	80093d4 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093b0:	f7f9 fb84 	bl	8002abc <HAL_GetTick>
 80093b4:	4602      	mov	r2, r0
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	683a      	ldr	r2, [r7, #0]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d803      	bhi.n	80093c8 <HAL_SPI_Transmit+0x268>
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093c6:	d102      	bne.n	80093ce <HAL_SPI_Transmit+0x26e>
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d102      	bne.n	80093d4 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80093ce:	2303      	movs	r3, #3
 80093d0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80093d2:	e026      	b.n	8009422 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093d8:	b29b      	uxth	r3, r3
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1b5      	bne.n	800934a <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80093de:	69ba      	ldr	r2, [r7, #24]
 80093e0:	6839      	ldr	r1, [r7, #0]
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f001 fa08 	bl	800a7f8 <SPI_EndRxTxTransaction>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d002      	beq.n	80093f4 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2220      	movs	r2, #32
 80093f2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d10a      	bne.n	8009412 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093fc:	2300      	movs	r3, #0
 80093fe:	613b      	str	r3, [r7, #16]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	613b      	str	r3, [r7, #16]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	613b      	str	r3, [r7, #16]
 8009410:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009416:	2b00      	cmp	r3, #0
 8009418:	d002      	beq.n	8009420 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	77fb      	strb	r3, [r7, #31]
 800941e:	e000      	b.n	8009422 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8009420:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2201      	movs	r2, #1
 8009426:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2200      	movs	r2, #0
 800942e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009432:	7ffb      	ldrb	r3, [r7, #31]
}
 8009434:	4618      	mov	r0, r3
 8009436:	3720      	adds	r7, #32
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b088      	sub	sp, #32
 8009440:	af02      	add	r7, sp, #8
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	603b      	str	r3, [r7, #0]
 8009448:	4613      	mov	r3, r2
 800944a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800944c:	2300      	movs	r3, #0
 800944e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009458:	d112      	bne.n	8009480 <HAL_SPI_Receive+0x44>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d10e      	bne.n	8009480 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2204      	movs	r2, #4
 8009466:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800946a:	88fa      	ldrh	r2, [r7, #6]
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	4613      	mov	r3, r2
 8009472:	68ba      	ldr	r2, [r7, #8]
 8009474:	68b9      	ldr	r1, [r7, #8]
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f000 f910 	bl	800969c <HAL_SPI_TransmitReceive>
 800947c:	4603      	mov	r3, r0
 800947e:	e109      	b.n	8009694 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009486:	2b01      	cmp	r3, #1
 8009488:	d101      	bne.n	800948e <HAL_SPI_Receive+0x52>
 800948a:	2302      	movs	r3, #2
 800948c:	e102      	b.n	8009694 <HAL_SPI_Receive+0x258>
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2201      	movs	r2, #1
 8009492:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009496:	f7f9 fb11 	bl	8002abc <HAL_GetTick>
 800949a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d002      	beq.n	80094ae <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80094a8:	2302      	movs	r3, #2
 80094aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80094ac:	e0e9      	b.n	8009682 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d002      	beq.n	80094ba <HAL_SPI_Receive+0x7e>
 80094b4:	88fb      	ldrh	r3, [r7, #6]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d102      	bne.n	80094c0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80094be:	e0e0      	b.n	8009682 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2204      	movs	r2, #4
 80094c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2200      	movs	r2, #0
 80094cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	88fa      	ldrh	r2, [r7, #6]
 80094d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	88fa      	ldrh	r2, [r7, #6]
 80094e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2200      	movs	r2, #0
 80094e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2200      	movs	r2, #0
 80094f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2200      	movs	r2, #0
 80094fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2200      	movs	r2, #0
 8009500:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800950a:	d908      	bls.n	800951e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	685a      	ldr	r2, [r3, #4]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800951a:	605a      	str	r2, [r3, #4]
 800951c:	e007      	b.n	800952e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	685a      	ldr	r2, [r3, #4]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800952c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009536:	d10f      	bne.n	8009558 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009546:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009556:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009562:	2b40      	cmp	r3, #64	; 0x40
 8009564:	d007      	beq.n	8009576 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009574:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800957e:	d867      	bhi.n	8009650 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009580:	e030      	b.n	80095e4 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	f003 0301 	and.w	r3, r3, #1
 800958c:	2b01      	cmp	r3, #1
 800958e:	d117      	bne.n	80095c0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f103 020c 	add.w	r2, r3, #12
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800959c:	7812      	ldrb	r2, [r2, #0]
 800959e:	b2d2      	uxtb	r2, r2
 80095a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a6:	1c5a      	adds	r2, r3, #1
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	3b01      	subs	r3, #1
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80095be:	e011      	b.n	80095e4 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095c0:	f7f9 fa7c 	bl	8002abc <HAL_GetTick>
 80095c4:	4602      	mov	r2, r0
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d803      	bhi.n	80095d8 <HAL_SPI_Receive+0x19c>
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095d6:	d102      	bne.n	80095de <HAL_SPI_Receive+0x1a2>
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d102      	bne.n	80095e4 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80095de:	2303      	movs	r3, #3
 80095e0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80095e2:	e04e      	b.n	8009682 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1c8      	bne.n	8009582 <HAL_SPI_Receive+0x146>
 80095f0:	e034      	b.n	800965c <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	f003 0301 	and.w	r3, r3, #1
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d115      	bne.n	800962c <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	68da      	ldr	r2, [r3, #12]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960a:	b292      	uxth	r2, r2
 800960c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009612:	1c9a      	adds	r2, r3, #2
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800961e:	b29b      	uxth	r3, r3
 8009620:	3b01      	subs	r3, #1
 8009622:	b29a      	uxth	r2, r3
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800962a:	e011      	b.n	8009650 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800962c:	f7f9 fa46 	bl	8002abc <HAL_GetTick>
 8009630:	4602      	mov	r2, r0
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	1ad3      	subs	r3, r2, r3
 8009636:	683a      	ldr	r2, [r7, #0]
 8009638:	429a      	cmp	r2, r3
 800963a:	d803      	bhi.n	8009644 <HAL_SPI_Receive+0x208>
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009642:	d102      	bne.n	800964a <HAL_SPI_Receive+0x20e>
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d102      	bne.n	8009650 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800964a:	2303      	movs	r3, #3
 800964c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800964e:	e018      	b.n	8009682 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009656:	b29b      	uxth	r3, r3
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1ca      	bne.n	80095f2 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800965c:	693a      	ldr	r2, [r7, #16]
 800965e:	6839      	ldr	r1, [r7, #0]
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f001 f871 	bl	800a748 <SPI_EndRxTransaction>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d002      	beq.n	8009672 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2220      	movs	r2, #32
 8009670:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009676:	2b00      	cmp	r3, #0
 8009678:	d002      	beq.n	8009680 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	75fb      	strb	r3, [r7, #23]
 800967e:	e000      	b.n	8009682 <HAL_SPI_Receive+0x246>
  }

error :
 8009680:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2201      	movs	r2, #1
 8009686:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2200      	movs	r2, #0
 800968e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009692:	7dfb      	ldrb	r3, [r7, #23]
}
 8009694:	4618      	mov	r0, r3
 8009696:	3718      	adds	r7, #24
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b08a      	sub	sp, #40	; 0x28
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
 80096a8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80096aa:	2301      	movs	r3, #1
 80096ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80096ae:	2300      	movs	r3, #0
 80096b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d101      	bne.n	80096c2 <HAL_SPI_TransmitReceive+0x26>
 80096be:	2302      	movs	r3, #2
 80096c0:	e1fb      	b.n	8009aba <HAL_SPI_TransmitReceive+0x41e>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2201      	movs	r2, #1
 80096c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80096ca:	f7f9 f9f7 	bl	8002abc <HAL_GetTick>
 80096ce:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80096d6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80096de:	887b      	ldrh	r3, [r7, #2]
 80096e0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80096e2:	887b      	ldrh	r3, [r7, #2]
 80096e4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80096e6:	7efb      	ldrb	r3, [r7, #27]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d00e      	beq.n	800970a <HAL_SPI_TransmitReceive+0x6e>
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096f2:	d106      	bne.n	8009702 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d102      	bne.n	8009702 <HAL_SPI_TransmitReceive+0x66>
 80096fc:	7efb      	ldrb	r3, [r7, #27]
 80096fe:	2b04      	cmp	r3, #4
 8009700:	d003      	beq.n	800970a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009702:	2302      	movs	r3, #2
 8009704:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009708:	e1cd      	b.n	8009aa6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d005      	beq.n	800971c <HAL_SPI_TransmitReceive+0x80>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d002      	beq.n	800971c <HAL_SPI_TransmitReceive+0x80>
 8009716:	887b      	ldrh	r3, [r7, #2]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d103      	bne.n	8009724 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009722:	e1c0      	b.n	8009aa6 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800972a:	b2db      	uxtb	r3, r3
 800972c:	2b04      	cmp	r3, #4
 800972e:	d003      	beq.n	8009738 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2205      	movs	r2, #5
 8009734:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2200      	movs	r2, #0
 800973c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	887a      	ldrh	r2, [r7, #2]
 8009748:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	887a      	ldrh	r2, [r7, #2]
 8009750:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	68ba      	ldr	r2, [r7, #8]
 8009758:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	887a      	ldrh	r2, [r7, #2]
 800975e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	887a      	ldrh	r2, [r7, #2]
 8009764:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2200      	movs	r2, #0
 800976a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2200      	movs	r2, #0
 8009770:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800977a:	d802      	bhi.n	8009782 <HAL_SPI_TransmitReceive+0xe6>
 800977c:	8a3b      	ldrh	r3, [r7, #16]
 800977e:	2b01      	cmp	r3, #1
 8009780:	d908      	bls.n	8009794 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	685a      	ldr	r2, [r3, #4]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009790:	605a      	str	r2, [r3, #4]
 8009792:	e007      	b.n	80097a4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	685a      	ldr	r2, [r3, #4]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80097a2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ae:	2b40      	cmp	r3, #64	; 0x40
 80097b0:	d007      	beq.n	80097c2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80097ca:	d97c      	bls.n	80098c6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d002      	beq.n	80097da <HAL_SPI_TransmitReceive+0x13e>
 80097d4:	8a7b      	ldrh	r3, [r7, #18]
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d169      	bne.n	80098ae <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097de:	881a      	ldrh	r2, [r3, #0]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ea:	1c9a      	adds	r2, r3, #2
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	3b01      	subs	r3, #1
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097fe:	e056      	b.n	80098ae <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	f003 0302 	and.w	r3, r3, #2
 800980a:	2b02      	cmp	r3, #2
 800980c:	d11b      	bne.n	8009846 <HAL_SPI_TransmitReceive+0x1aa>
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009812:	b29b      	uxth	r3, r3
 8009814:	2b00      	cmp	r3, #0
 8009816:	d016      	beq.n	8009846 <HAL_SPI_TransmitReceive+0x1aa>
 8009818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981a:	2b01      	cmp	r3, #1
 800981c:	d113      	bne.n	8009846 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009822:	881a      	ldrh	r2, [r3, #0]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800982e:	1c9a      	adds	r2, r3, #2
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009838:	b29b      	uxth	r3, r3
 800983a:	3b01      	subs	r3, #1
 800983c:	b29a      	uxth	r2, r3
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009842:	2300      	movs	r3, #0
 8009844:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	f003 0301 	and.w	r3, r3, #1
 8009850:	2b01      	cmp	r3, #1
 8009852:	d11c      	bne.n	800988e <HAL_SPI_TransmitReceive+0x1f2>
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800985a:	b29b      	uxth	r3, r3
 800985c:	2b00      	cmp	r3, #0
 800985e:	d016      	beq.n	800988e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	68da      	ldr	r2, [r3, #12]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986a:	b292      	uxth	r2, r2
 800986c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009872:	1c9a      	adds	r2, r3, #2
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800987e:	b29b      	uxth	r3, r3
 8009880:	3b01      	subs	r3, #1
 8009882:	b29a      	uxth	r2, r3
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800988a:	2301      	movs	r3, #1
 800988c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800988e:	f7f9 f915 	bl	8002abc <HAL_GetTick>
 8009892:	4602      	mov	r2, r0
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	1ad3      	subs	r3, r2, r3
 8009898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800989a:	429a      	cmp	r2, r3
 800989c:	d807      	bhi.n	80098ae <HAL_SPI_TransmitReceive+0x212>
 800989e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098a4:	d003      	beq.n	80098ae <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80098a6:	2303      	movs	r3, #3
 80098a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80098ac:	e0fb      	b.n	8009aa6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d1a3      	bne.n	8009800 <HAL_SPI_TransmitReceive+0x164>
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098be:	b29b      	uxth	r3, r3
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d19d      	bne.n	8009800 <HAL_SPI_TransmitReceive+0x164>
 80098c4:	e0df      	b.n	8009a86 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d003      	beq.n	80098d6 <HAL_SPI_TransmitReceive+0x23a>
 80098ce:	8a7b      	ldrh	r3, [r7, #18]
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	f040 80cb 	bne.w	8009a6c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098da:	b29b      	uxth	r3, r3
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d912      	bls.n	8009906 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098e4:	881a      	ldrh	r2, [r3, #0]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f0:	1c9a      	adds	r2, r3, #2
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	3b02      	subs	r3, #2
 80098fe:	b29a      	uxth	r2, r3
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009904:	e0b2      	b.n	8009a6c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	330c      	adds	r3, #12
 8009910:	7812      	ldrb	r2, [r2, #0]
 8009912:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009918:	1c5a      	adds	r2, r3, #1
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009922:	b29b      	uxth	r3, r3
 8009924:	3b01      	subs	r3, #1
 8009926:	b29a      	uxth	r2, r3
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800992c:	e09e      	b.n	8009a6c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	f003 0302 	and.w	r3, r3, #2
 8009938:	2b02      	cmp	r3, #2
 800993a:	d134      	bne.n	80099a6 <HAL_SPI_TransmitReceive+0x30a>
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009940:	b29b      	uxth	r3, r3
 8009942:	2b00      	cmp	r3, #0
 8009944:	d02f      	beq.n	80099a6 <HAL_SPI_TransmitReceive+0x30a>
 8009946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009948:	2b01      	cmp	r3, #1
 800994a:	d12c      	bne.n	80099a6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009950:	b29b      	uxth	r3, r3
 8009952:	2b01      	cmp	r3, #1
 8009954:	d912      	bls.n	800997c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800995a:	881a      	ldrh	r2, [r3, #0]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009966:	1c9a      	adds	r2, r3, #2
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009970:	b29b      	uxth	r3, r3
 8009972:	3b02      	subs	r3, #2
 8009974:	b29a      	uxth	r2, r3
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	87da      	strh	r2, [r3, #62]	; 0x3e
 800997a:	e012      	b.n	80099a2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	330c      	adds	r3, #12
 8009986:	7812      	ldrb	r2, [r2, #0]
 8009988:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800998e:	1c5a      	adds	r2, r3, #1
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009998:	b29b      	uxth	r3, r3
 800999a:	3b01      	subs	r3, #1
 800999c:	b29a      	uxth	r2, r3
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80099a2:	2300      	movs	r3, #0
 80099a4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	f003 0301 	and.w	r3, r3, #1
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d148      	bne.n	8009a46 <HAL_SPI_TransmitReceive+0x3aa>
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d042      	beq.n	8009a46 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d923      	bls.n	8009a14 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68da      	ldr	r2, [r3, #12]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d6:	b292      	uxth	r2, r2
 80099d8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099de:	1c9a      	adds	r2, r3, #2
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	3b02      	subs	r3, #2
 80099ee:	b29a      	uxth	r2, r3
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d81f      	bhi.n	8009a42 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	685a      	ldr	r2, [r3, #4]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009a10:	605a      	str	r2, [r3, #4]
 8009a12:	e016      	b.n	8009a42 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f103 020c 	add.w	r2, r3, #12
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a20:	7812      	ldrb	r2, [r2, #0]
 8009a22:	b2d2      	uxtb	r2, r2
 8009a24:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2a:	1c5a      	adds	r2, r3, #1
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a42:	2301      	movs	r3, #1
 8009a44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009a46:	f7f9 f839 	bl	8002abc <HAL_GetTick>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	1ad3      	subs	r3, r2, r3
 8009a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d803      	bhi.n	8009a5e <HAL_SPI_TransmitReceive+0x3c2>
 8009a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a5c:	d102      	bne.n	8009a64 <HAL_SPI_TransmitReceive+0x3c8>
 8009a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d103      	bne.n	8009a6c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8009a64:	2303      	movs	r3, #3
 8009a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009a6a:	e01c      	b.n	8009aa6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f47f af5b 	bne.w	800992e <HAL_SPI_TransmitReceive+0x292>
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f47f af54 	bne.w	800992e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009a86:	69fa      	ldr	r2, [r7, #28]
 8009a88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	f000 feb4 	bl	800a7f8 <SPI_EndRxTxTransaction>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d006      	beq.n	8009aa4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2220      	movs	r2, #32
 8009aa0:	661a      	str	r2, [r3, #96]	; 0x60
 8009aa2:	e000      	b.n	8009aa6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8009aa4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009ab6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3728      	adds	r7, #40	; 0x28
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
	...

08009ac4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b086      	sub	sp, #24
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	4613      	mov	r3, r2
 8009ad0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d101      	bne.n	8009ae4 <HAL_SPI_Transmit_DMA+0x20>
 8009ae0:	2302      	movs	r3, #2
 8009ae2:	e0d8      	b.n	8009c96 <HAL_SPI_Transmit_DMA+0x1d2>
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d002      	beq.n	8009afe <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8009af8:	2302      	movs	r3, #2
 8009afa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009afc:	e0c6      	b.n	8009c8c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d002      	beq.n	8009b0a <HAL_SPI_Transmit_DMA+0x46>
 8009b04:	88fb      	ldrh	r3, [r7, #6]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d102      	bne.n	8009b10 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009b0e:	e0bd      	b.n	8009c8c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2203      	movs	r2, #3
 8009b14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	68ba      	ldr	r2, [r7, #8]
 8009b22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	88fa      	ldrh	r2, [r7, #6]
 8009b28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	88fa      	ldrh	r2, [r7, #6]
 8009b2e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2200      	movs	r2, #0
 8009b34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b5a:	d10f      	bne.n	8009b7c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b6a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b7a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b80:	4a47      	ldr	r2, [pc, #284]	; (8009ca0 <HAL_SPI_Transmit_DMA+0x1dc>)
 8009b82:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b88:	4a46      	ldr	r2, [pc, #280]	; (8009ca4 <HAL_SPI_Transmit_DMA+0x1e0>)
 8009b8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b90:	4a45      	ldr	r2, [pc, #276]	; (8009ca8 <HAL_SPI_Transmit_DMA+0x1e4>)
 8009b92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b98:	2200      	movs	r2, #0
 8009b9a:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	685a      	ldr	r2, [r3, #4]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009baa:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009bb4:	d82d      	bhi.n	8009c12 <HAL_SPI_Transmit_DMA+0x14e>
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bc0:	d127      	bne.n	8009c12 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	f003 0301 	and.w	r3, r3, #1
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d10f      	bne.n	8009bf0 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	685a      	ldr	r2, [r3, #4]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009bde:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	085b      	lsrs	r3, r3, #1
 8009be8:	b29a      	uxth	r2, r3
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009bee:	e010      	b.n	8009c12 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	685a      	ldr	r2, [r3, #4]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009bfe:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	085b      	lsrs	r3, r3, #1
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	b29a      	uxth	r2, r3
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	330c      	adds	r3, #12
 8009c22:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c28:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009c2a:	f7f9 f931 	bl	8002e90 <HAL_DMA_Start_IT>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d00c      	beq.n	8009c4e <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c38:	f043 0210 	orr.w	r2, r3, #16
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8009c4c:	e01e      	b.n	8009c8c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c58:	2b40      	cmp	r3, #64	; 0x40
 8009c5a:	d007      	beq.n	8009c6c <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c6a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	685a      	ldr	r2, [r3, #4]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f042 0220 	orr.w	r2, r2, #32
 8009c7a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	685a      	ldr	r2, [r3, #4]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f042 0202 	orr.w	r2, r2, #2
 8009c8a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3718      	adds	r7, #24
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	0800a477 	.word	0x0800a477
 8009ca4:	0800a299 	.word	0x0800a299
 8009ca8:	0800a4cb 	.word	0x0800a4cb

08009cac <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b086      	sub	sp, #24
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d110      	bne.n	8009ce8 <HAL_SPI_Receive_DMA+0x3c>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009cce:	d10b      	bne.n	8009ce8 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2204      	movs	r2, #4
 8009cd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8009cd8:	88fb      	ldrh	r3, [r7, #6]
 8009cda:	68ba      	ldr	r2, [r7, #8]
 8009cdc:	68b9      	ldr	r1, [r7, #8]
 8009cde:	68f8      	ldr	r0, [r7, #12]
 8009ce0:	f000 f908 	bl	8009ef4 <HAL_SPI_TransmitReceive_DMA>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	e0fb      	b.n	8009ee0 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d101      	bne.n	8009cf6 <HAL_SPI_Receive_DMA+0x4a>
 8009cf2:	2302      	movs	r3, #2
 8009cf4:	e0f4      	b.n	8009ee0 <HAL_SPI_Receive_DMA+0x234>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d002      	beq.n	8009d10 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8009d0a:	2302      	movs	r3, #2
 8009d0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009d0e:	e0e2      	b.n	8009ed6 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d002      	beq.n	8009d1c <HAL_SPI_Receive_DMA+0x70>
 8009d16:	88fb      	ldrh	r3, [r7, #6]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d102      	bne.n	8009d22 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009d20:	e0d9      	b.n	8009ed6 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2204      	movs	r2, #4
 8009d26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	68ba      	ldr	r2, [r7, #8]
 8009d34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	88fa      	ldrh	r2, [r7, #6]
 8009d3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	88fa      	ldrh	r2, [r7, #6]
 8009d42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2200      	movs	r2, #0
 8009d56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d66:	d10f      	bne.n	8009d88 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009d86:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	685a      	ldr	r2, [r3, #4]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d96:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009da0:	d908      	bls.n	8009db4 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	685a      	ldr	r2, [r3, #4]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009db0:	605a      	str	r2, [r3, #4]
 8009db2:	e042      	b.n	8009e3a <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	685a      	ldr	r2, [r3, #4]
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009dc2:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dc8:	699b      	ldr	r3, [r3, #24]
 8009dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009dce:	d134      	bne.n	8009e3a <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	685a      	ldr	r2, [r3, #4]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009dde:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	f003 0301 	and.w	r3, r3, #1
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d111      	bne.n	8009e14 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	685a      	ldr	r2, [r3, #4]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009dfe:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	085b      	lsrs	r3, r3, #1
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009e12:	e012      	b.n	8009e3a <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	685a      	ldr	r2, [r3, #4]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009e22:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	085b      	lsrs	r3, r3, #1
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	3301      	adds	r3, #1
 8009e32:	b29a      	uxth	r2, r3
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e3e:	4a2a      	ldr	r2, [pc, #168]	; (8009ee8 <HAL_SPI_Receive_DMA+0x23c>)
 8009e40:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e46:	4a29      	ldr	r2, [pc, #164]	; (8009eec <HAL_SPI_Receive_DMA+0x240>)
 8009e48:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e4e:	4a28      	ldr	r2, [pc, #160]	; (8009ef0 <HAL_SPI_Receive_DMA+0x244>)
 8009e50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e56:	2200      	movs	r2, #0
 8009e58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	330c      	adds	r3, #12
 8009e64:	4619      	mov	r1, r3
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6a:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009e72:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009e74:	f7f9 f80c 	bl	8002e90 <HAL_DMA_Start_IT>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00c      	beq.n	8009e98 <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e82:	f043 0210 	orr.w	r2, r3, #16
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2201      	movs	r2, #1
 8009e92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8009e96:	e01e      	b.n	8009ed6 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ea2:	2b40      	cmp	r3, #64	; 0x40
 8009ea4:	d007      	beq.n	8009eb6 <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009eb4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	685a      	ldr	r2, [r3, #4]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f042 0220 	orr.w	r2, r2, #32
 8009ec4:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	685a      	ldr	r2, [r3, #4]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f042 0201 	orr.w	r2, r2, #1
 8009ed4:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3718      	adds	r7, #24
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	0800a493 	.word	0x0800a493
 8009eec:	0800a33f 	.word	0x0800a33f
 8009ef0:	0800a4cb 	.word	0x0800a4cb

08009ef4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b086      	sub	sp, #24
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
 8009f00:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009f02:	2300      	movs	r3, #0
 8009f04:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d101      	bne.n	8009f14 <HAL_SPI_TransmitReceive_DMA+0x20>
 8009f10:	2302      	movs	r3, #2
 8009f12:	e16c      	b.n	800a1ee <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009f22:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8009f2a:	7dbb      	ldrb	r3, [r7, #22]
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d00d      	beq.n	8009f4c <HAL_SPI_TransmitReceive_DMA+0x58>
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f36:	d106      	bne.n	8009f46 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d102      	bne.n	8009f46 <HAL_SPI_TransmitReceive_DMA+0x52>
 8009f40:	7dbb      	ldrb	r3, [r7, #22]
 8009f42:	2b04      	cmp	r3, #4
 8009f44:	d002      	beq.n	8009f4c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8009f46:	2302      	movs	r3, #2
 8009f48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009f4a:	e14b      	b.n	800a1e4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d005      	beq.n	8009f5e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d002      	beq.n	8009f5e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8009f58:	887b      	ldrh	r3, [r7, #2]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d102      	bne.n	8009f64 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009f62:	e13f      	b.n	800a1e4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	2b04      	cmp	r3, #4
 8009f6e:	d003      	beq.n	8009f78 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2205      	movs	r2, #5
 8009f74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	887a      	ldrh	r2, [r7, #2]
 8009f88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	887a      	ldrh	r2, [r7, #2]
 8009f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	887a      	ldrh	r2, [r7, #2]
 8009f9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	887a      	ldrh	r2, [r7, #2]
 8009fa2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	685a      	ldr	r2, [r3, #4]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8009fc0:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009fca:	d908      	bls.n	8009fde <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	685a      	ldr	r2, [r3, #4]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009fda:	605a      	str	r2, [r3, #4]
 8009fdc:	e06f      	b.n	800a0be <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	685a      	ldr	r2, [r3, #4]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009fec:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ff2:	699b      	ldr	r3, [r3, #24]
 8009ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ff8:	d126      	bne.n	800a048 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8009ffe:	f003 0301 	and.w	r3, r3, #1
 800a002:	2b00      	cmp	r3, #0
 800a004:	d10f      	bne.n	800a026 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	685a      	ldr	r2, [r3, #4]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a014:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	085b      	lsrs	r3, r3, #1
 800a01e:	b29a      	uxth	r2, r3
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a024:	e010      	b.n	800a048 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	685a      	ldr	r2, [r3, #4]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a034:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	085b      	lsrs	r3, r3, #1
 800a03e:	b29b      	uxth	r3, r3
 800a040:	3301      	adds	r3, #1
 800a042:	b29a      	uxth	r2, r3
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a04c:	699b      	ldr	r3, [r3, #24]
 800a04e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a052:	d134      	bne.n	800a0be <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	685a      	ldr	r2, [r3, #4]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a062:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	f003 0301 	and.w	r3, r3, #1
 800a070:	2b00      	cmp	r3, #0
 800a072:	d111      	bne.n	800a098 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	685a      	ldr	r2, [r3, #4]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a082:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	085b      	lsrs	r3, r3, #1
 800a08e:	b29a      	uxth	r2, r3
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800a096:	e012      	b.n	800a0be <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	685a      	ldr	r2, [r3, #4]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a0a6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	085b      	lsrs	r3, r3, #1
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	b29a      	uxth	r2, r3
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	2b04      	cmp	r3, #4
 800a0c8:	d108      	bne.n	800a0dc <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ce:	4a4a      	ldr	r2, [pc, #296]	; (800a1f8 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800a0d0:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0d6:	4a49      	ldr	r2, [pc, #292]	; (800a1fc <HAL_SPI_TransmitReceive_DMA+0x308>)
 800a0d8:	62da      	str	r2, [r3, #44]	; 0x2c
 800a0da:	e007      	b.n	800a0ec <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0e0:	4a47      	ldr	r2, [pc, #284]	; (800a200 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800a0e2:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0e8:	4a46      	ldr	r2, [pc, #280]	; (800a204 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800a0ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0f0:	4a45      	ldr	r2, [pc, #276]	; (800a208 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800a0f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	330c      	adds	r3, #12
 800a106:	4619      	mov	r1, r3
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a10c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a114:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a116:	f7f8 febb 	bl	8002e90 <HAL_DMA_Start_IT>
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00c      	beq.n	800a13a <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a124:	f043 0210 	orr.w	r2, r3, #16
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2201      	movs	r2, #1
 800a134:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800a138:	e054      	b.n	800a1e4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	685a      	ldr	r2, [r3, #4]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f042 0201 	orr.w	r2, r2, #1
 800a148:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a14e:	2200      	movs	r2, #0
 800a150:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a156:	2200      	movs	r2, #0
 800a158:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a15e:	2200      	movs	r2, #0
 800a160:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a166:	2200      	movs	r2, #0
 800a168:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a172:	4619      	mov	r1, r3
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	330c      	adds	r3, #12
 800a17a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a180:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a182:	f7f8 fe85 	bl	8002e90 <HAL_DMA_Start_IT>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00c      	beq.n	800a1a6 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a190:	f043 0210 	orr.w	r2, r3, #16
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2201      	movs	r2, #1
 800a1a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800a1a4:	e01e      	b.n	800a1e4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1b0:	2b40      	cmp	r3, #64	; 0x40
 800a1b2:	d007      	beq.n	800a1c4 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1c2:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	685a      	ldr	r2, [r3, #4]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f042 0220 	orr.w	r2, r2, #32
 800a1d2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	685a      	ldr	r2, [r3, #4]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f042 0202 	orr.w	r2, r2, #2
 800a1e2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a1ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3718      	adds	r7, #24
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	0800a493 	.word	0x0800a493
 800a1fc:	0800a33f 	.word	0x0800a33f
 800a200:	0800a4af 	.word	0x0800a4af
 800a204:	0800a3e7 	.word	0x0800a3e7
 800a208:	0800a4cb 	.word	0x0800a4cb

0800a20c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a214:	bf00      	nop
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a220:	b480      	push	{r7}
 800a222:	b083      	sub	sp, #12
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a228:	bf00      	nop
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a23c:	bf00      	nop
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a250:	bf00      	nop
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800a264:	bf00      	nop
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800a278:	bf00      	nop
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a28c:	bf00      	nop
 800a28e:	370c      	adds	r7, #12
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b086      	sub	sp, #24
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a2a6:	f7f8 fc09 	bl	8002abc <HAL_GetTick>
 800a2aa:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f003 0320 	and.w	r3, r3, #32
 800a2b6:	2b20      	cmp	r3, #32
 800a2b8:	d03b      	beq.n	800a332 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	685a      	ldr	r2, [r3, #4]
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f022 0220 	bic.w	r2, r2, #32
 800a2c8:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	685a      	ldr	r2, [r3, #4]
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f022 0202 	bic.w	r2, r2, #2
 800a2d8:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a2da:	693a      	ldr	r2, [r7, #16]
 800a2dc:	2164      	movs	r1, #100	; 0x64
 800a2de:	6978      	ldr	r0, [r7, #20]
 800a2e0:	f000 fa8a 	bl	800a7f8 <SPI_EndRxTxTransaction>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d005      	beq.n	800a2f6 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2ee:	f043 0220 	orr.w	r2, r3, #32
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d10a      	bne.n	800a314 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a2fe:	2300      	movs	r3, #0
 800a300:	60fb      	str	r3, [r7, #12]
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	60fb      	str	r3, [r7, #12]
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	60fb      	str	r3, [r7, #12]
 800a312:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	2200      	movs	r2, #0
 800a318:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	2201      	movs	r2, #1
 800a31e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a326:	2b00      	cmp	r3, #0
 800a328:	d003      	beq.n	800a332 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a32a:	6978      	ldr	r0, [r7, #20]
 800a32c:	f7ff ffaa 	bl	800a284 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a330:	e002      	b.n	800a338 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800a332:	6978      	ldr	r0, [r7, #20]
 800a334:	f7ff ff6a 	bl	800a20c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a338:	3718      	adds	r7, #24
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b084      	sub	sp, #16
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a34a:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a34c:	f7f8 fbb6 	bl	8002abc <HAL_GetTick>
 800a350:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f003 0320 	and.w	r3, r3, #32
 800a35c:	2b20      	cmp	r3, #32
 800a35e:	d03c      	beq.n	800a3da <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	685a      	ldr	r2, [r3, #4]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f022 0220 	bic.w	r2, r2, #32
 800a36e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d10d      	bne.n	800a394 <SPI_DMAReceiveCplt+0x56>
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a380:	d108      	bne.n	800a394 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	685a      	ldr	r2, [r3, #4]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f022 0203 	bic.w	r2, r2, #3
 800a390:	605a      	str	r2, [r3, #4]
 800a392:	e007      	b.n	800a3a4 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	685a      	ldr	r2, [r3, #4]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f022 0201 	bic.w	r2, r2, #1
 800a3a2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a3a4:	68ba      	ldr	r2, [r7, #8]
 800a3a6:	2164      	movs	r1, #100	; 0x64
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	f000 f9cd 	bl	800a748 <SPI_EndRxTransaction>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d002      	beq.n	800a3ba <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2220      	movs	r2, #32
 800a3b8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d003      	beq.n	800a3da <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f7ff ff56 	bl	800a284 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a3d8:	e002      	b.n	800a3e0 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800a3da:	68f8      	ldr	r0, [r7, #12]
 800a3dc:	f7ff ff20 	bl	800a220 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}

0800a3e6 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b084      	sub	sp, #16
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f2:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a3f4:	f7f8 fb62 	bl	8002abc <HAL_GetTick>
 800a3f8:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f003 0320 	and.w	r3, r3, #32
 800a404:	2b20      	cmp	r3, #32
 800a406:	d030      	beq.n	800a46a <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	685a      	ldr	r2, [r3, #4]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f022 0220 	bic.w	r2, r2, #32
 800a416:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a418:	68ba      	ldr	r2, [r7, #8]
 800a41a:	2164      	movs	r1, #100	; 0x64
 800a41c:	68f8      	ldr	r0, [r7, #12]
 800a41e:	f000 f9eb 	bl	800a7f8 <SPI_EndRxTxTransaction>
 800a422:	4603      	mov	r3, r0
 800a424:	2b00      	cmp	r3, #0
 800a426:	d005      	beq.n	800a434 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a42c:	f043 0220 	orr.w	r2, r3, #32
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	685a      	ldr	r2, [r3, #4]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f022 0203 	bic.w	r2, r2, #3
 800a442:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2200      	movs	r2, #0
 800a448:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2200      	movs	r2, #0
 800a44e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2201      	movs	r2, #1
 800a456:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d003      	beq.n	800a46a <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f7ff ff0e 	bl	800a284 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a468:	e002      	b.n	800a470 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	f7ff fee2 	bl	800a234 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}

0800a476 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a476:	b580      	push	{r7, lr}
 800a478:	b084      	sub	sp, #16
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a482:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	f7ff fedf 	bl	800a248 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a48a:	bf00      	nop
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a492:	b580      	push	{r7, lr}
 800a494:	b084      	sub	sp, #16
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a49e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f7ff fedb 	bl	800a25c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a4a6:	bf00      	nop
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a4ae:	b580      	push	{r7, lr}
 800a4b0:	b084      	sub	sp, #16
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ba:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f7ff fed7 	bl	800a270 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a4c2:	bf00      	nop
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b084      	sub	sp, #16
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	685a      	ldr	r2, [r3, #4]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f022 0203 	bic.w	r2, r2, #3
 800a4e6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4ec:	f043 0210 	orr.w	r2, r3, #16
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a4fc:	68f8      	ldr	r0, [r7, #12]
 800a4fe:	f7ff fec1 	bl	800a284 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a502:	bf00      	nop
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
	...

0800a50c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b088      	sub	sp, #32
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	603b      	str	r3, [r7, #0]
 800a518:	4613      	mov	r3, r2
 800a51a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a51c:	f7f8 face 	bl	8002abc <HAL_GetTick>
 800a520:	4602      	mov	r2, r0
 800a522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a524:	1a9b      	subs	r3, r3, r2
 800a526:	683a      	ldr	r2, [r7, #0]
 800a528:	4413      	add	r3, r2
 800a52a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a52c:	f7f8 fac6 	bl	8002abc <HAL_GetTick>
 800a530:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a532:	4b39      	ldr	r3, [pc, #228]	; (800a618 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	015b      	lsls	r3, r3, #5
 800a538:	0d1b      	lsrs	r3, r3, #20
 800a53a:	69fa      	ldr	r2, [r7, #28]
 800a53c:	fb02 f303 	mul.w	r3, r2, r3
 800a540:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a542:	e054      	b.n	800a5ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a54a:	d050      	beq.n	800a5ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a54c:	f7f8 fab6 	bl	8002abc <HAL_GetTick>
 800a550:	4602      	mov	r2, r0
 800a552:	69bb      	ldr	r3, [r7, #24]
 800a554:	1ad3      	subs	r3, r2, r3
 800a556:	69fa      	ldr	r2, [r7, #28]
 800a558:	429a      	cmp	r2, r3
 800a55a:	d902      	bls.n	800a562 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a55c:	69fb      	ldr	r3, [r7, #28]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d13d      	bne.n	800a5de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	685a      	ldr	r2, [r3, #4]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a570:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a57a:	d111      	bne.n	800a5a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	689b      	ldr	r3, [r3, #8]
 800a580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a584:	d004      	beq.n	800a590 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a58e:	d107      	bne.n	800a5a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a59e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5a8:	d10f      	bne.n	800a5ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a5b8:	601a      	str	r2, [r3, #0]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a5c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a5da:	2303      	movs	r3, #3
 800a5dc:	e017      	b.n	800a60e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d101      	bne.n	800a5e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	689a      	ldr	r2, [r3, #8]
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	4013      	ands	r3, r2
 800a5f8:	68ba      	ldr	r2, [r7, #8]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	bf0c      	ite	eq
 800a5fe:	2301      	moveq	r3, #1
 800a600:	2300      	movne	r3, #0
 800a602:	b2db      	uxtb	r3, r3
 800a604:	461a      	mov	r2, r3
 800a606:	79fb      	ldrb	r3, [r7, #7]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d19b      	bne.n	800a544 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3720      	adds	r7, #32
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	2000000c 	.word	0x2000000c

0800a61c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b08a      	sub	sp, #40	; 0x28
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]
 800a628:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a62a:	2300      	movs	r3, #0
 800a62c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a62e:	f7f8 fa45 	bl	8002abc <HAL_GetTick>
 800a632:	4602      	mov	r2, r0
 800a634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a636:	1a9b      	subs	r3, r3, r2
 800a638:	683a      	ldr	r2, [r7, #0]
 800a63a:	4413      	add	r3, r2
 800a63c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a63e:	f7f8 fa3d 	bl	8002abc <HAL_GetTick>
 800a642:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	330c      	adds	r3, #12
 800a64a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a64c:	4b3d      	ldr	r3, [pc, #244]	; (800a744 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	4613      	mov	r3, r2
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	4413      	add	r3, r2
 800a656:	00da      	lsls	r2, r3, #3
 800a658:	1ad3      	subs	r3, r2, r3
 800a65a:	0d1b      	lsrs	r3, r3, #20
 800a65c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a65e:	fb02 f303 	mul.w	r3, r2, r3
 800a662:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a664:	e060      	b.n	800a728 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a66c:	d107      	bne.n	800a67e <SPI_WaitFifoStateUntilTimeout+0x62>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d104      	bne.n	800a67e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a674:	69fb      	ldr	r3, [r7, #28]
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a67c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a684:	d050      	beq.n	800a728 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a686:	f7f8 fa19 	bl	8002abc <HAL_GetTick>
 800a68a:	4602      	mov	r2, r0
 800a68c:	6a3b      	ldr	r3, [r7, #32]
 800a68e:	1ad3      	subs	r3, r2, r3
 800a690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a692:	429a      	cmp	r2, r3
 800a694:	d902      	bls.n	800a69c <SPI_WaitFifoStateUntilTimeout+0x80>
 800a696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d13d      	bne.n	800a718 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	685a      	ldr	r2, [r3, #4]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a6aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a6b4:	d111      	bne.n	800a6da <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	689b      	ldr	r3, [r3, #8]
 800a6ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6be:	d004      	beq.n	800a6ca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6c8:	d107      	bne.n	800a6da <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6e2:	d10f      	bne.n	800a704 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a6f2:	601a      	str	r2, [r3, #0]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a702:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2201      	movs	r2, #1
 800a708:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2200      	movs	r2, #0
 800a710:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a714:	2303      	movs	r3, #3
 800a716:	e010      	b.n	800a73a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a718:	69bb      	ldr	r3, [r7, #24]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d101      	bne.n	800a722 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a71e:	2300      	movs	r3, #0
 800a720:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a722:	69bb      	ldr	r3, [r7, #24]
 800a724:	3b01      	subs	r3, #1
 800a726:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	689a      	ldr	r2, [r3, #8]
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	4013      	ands	r3, r2
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	429a      	cmp	r2, r3
 800a736:	d196      	bne.n	800a666 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3728      	adds	r7, #40	; 0x28
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	2000000c 	.word	0x2000000c

0800a748 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af02      	add	r7, sp, #8
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a75c:	d111      	bne.n	800a782 <SPI_EndRxTransaction+0x3a>
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	689b      	ldr	r3, [r3, #8]
 800a762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a766:	d004      	beq.n	800a772 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a770:	d107      	bne.n	800a782 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a780:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	9300      	str	r3, [sp, #0]
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	2200      	movs	r2, #0
 800a78a:	2180      	movs	r1, #128	; 0x80
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	f7ff febd 	bl	800a50c <SPI_WaitFlagStateUntilTimeout>
 800a792:	4603      	mov	r3, r0
 800a794:	2b00      	cmp	r3, #0
 800a796:	d007      	beq.n	800a7a8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a79c:	f043 0220 	orr.w	r2, r3, #32
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a7a4:	2303      	movs	r3, #3
 800a7a6:	e023      	b.n	800a7f0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a7b0:	d11d      	bne.n	800a7ee <SPI_EndRxTransaction+0xa6>
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7ba:	d004      	beq.n	800a7c6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	689b      	ldr	r3, [r3, #8]
 800a7c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7c4:	d113      	bne.n	800a7ee <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	9300      	str	r3, [sp, #0]
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f7ff ff22 	bl	800a61c <SPI_WaitFifoStateUntilTimeout>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d007      	beq.n	800a7ee <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7e2:	f043 0220 	orr.w	r2, r3, #32
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a7ea:	2303      	movs	r3, #3
 800a7ec:	e000      	b.n	800a7f0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800a7ee:	2300      	movs	r3, #0
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3710      	adds	r7, #16
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b086      	sub	sp, #24
 800a7fc:	af02      	add	r7, sp, #8
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	9300      	str	r3, [sp, #0]
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a810:	68f8      	ldr	r0, [r7, #12]
 800a812:	f7ff ff03 	bl	800a61c <SPI_WaitFifoStateUntilTimeout>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d007      	beq.n	800a82c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a820:	f043 0220 	orr.w	r2, r3, #32
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a828:	2303      	movs	r3, #3
 800a82a:	e027      	b.n	800a87c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	9300      	str	r3, [sp, #0]
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	2200      	movs	r2, #0
 800a834:	2180      	movs	r1, #128	; 0x80
 800a836:	68f8      	ldr	r0, [r7, #12]
 800a838:	f7ff fe68 	bl	800a50c <SPI_WaitFlagStateUntilTimeout>
 800a83c:	4603      	mov	r3, r0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d007      	beq.n	800a852 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a846:	f043 0220 	orr.w	r2, r3, #32
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a84e:	2303      	movs	r3, #3
 800a850:	e014      	b.n	800a87c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	9300      	str	r3, [sp, #0]
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	2200      	movs	r2, #0
 800a85a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a85e:	68f8      	ldr	r0, [r7, #12]
 800a860:	f7ff fedc 	bl	800a61c <SPI_WaitFifoStateUntilTimeout>
 800a864:	4603      	mov	r3, r0
 800a866:	2b00      	cmp	r3, #0
 800a868:	d007      	beq.n	800a87a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a86e:	f043 0220 	orr.w	r2, r3, #32
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a876:	2303      	movs	r3, #3
 800a878:	e000      	b.n	800a87c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3710      	adds	r7, #16
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d101      	bne.n	800a896 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a892:	2301      	movs	r3, #1
 800a894:	e049      	b.n	800a92a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d106      	bne.n	800a8b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f7f7 fe76 	bl	800259c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2202      	movs	r2, #2
 800a8b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	3304      	adds	r3, #4
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	4610      	mov	r0, r2
 800a8c4:	f000 fad2 	bl	800ae6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2201      	movs	r2, #1
 800a904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2201      	movs	r2, #1
 800a90c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2201      	movs	r2, #1
 800a914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2201      	movs	r2, #1
 800a91c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2201      	movs	r2, #1
 800a924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3708      	adds	r7, #8
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
	...

0800a934 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a934:	b480      	push	{r7}
 800a936:	b085      	sub	sp, #20
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a942:	b2db      	uxtb	r3, r3
 800a944:	2b01      	cmp	r3, #1
 800a946:	d001      	beq.n	800a94c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a948:	2301      	movs	r3, #1
 800a94a:	e04f      	b.n	800a9ec <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2202      	movs	r2, #2
 800a950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	68da      	ldr	r2, [r3, #12]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f042 0201 	orr.w	r2, r2, #1
 800a962:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a23      	ldr	r2, [pc, #140]	; (800a9f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d01d      	beq.n	800a9aa <HAL_TIM_Base_Start_IT+0x76>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a976:	d018      	beq.n	800a9aa <HAL_TIM_Base_Start_IT+0x76>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a1f      	ldr	r2, [pc, #124]	; (800a9fc <HAL_TIM_Base_Start_IT+0xc8>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d013      	beq.n	800a9aa <HAL_TIM_Base_Start_IT+0x76>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4a1e      	ldr	r2, [pc, #120]	; (800aa00 <HAL_TIM_Base_Start_IT+0xcc>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d00e      	beq.n	800a9aa <HAL_TIM_Base_Start_IT+0x76>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a1c      	ldr	r2, [pc, #112]	; (800aa04 <HAL_TIM_Base_Start_IT+0xd0>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d009      	beq.n	800a9aa <HAL_TIM_Base_Start_IT+0x76>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a1b      	ldr	r2, [pc, #108]	; (800aa08 <HAL_TIM_Base_Start_IT+0xd4>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d004      	beq.n	800a9aa <HAL_TIM_Base_Start_IT+0x76>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a19      	ldr	r2, [pc, #100]	; (800aa0c <HAL_TIM_Base_Start_IT+0xd8>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d115      	bne.n	800a9d6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	689a      	ldr	r2, [r3, #8]
 800a9b0:	4b17      	ldr	r3, [pc, #92]	; (800aa10 <HAL_TIM_Base_Start_IT+0xdc>)
 800a9b2:	4013      	ands	r3, r2
 800a9b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2b06      	cmp	r3, #6
 800a9ba:	d015      	beq.n	800a9e8 <HAL_TIM_Base_Start_IT+0xb4>
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9c2:	d011      	beq.n	800a9e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f042 0201 	orr.w	r2, r2, #1
 800a9d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9d4:	e008      	b.n	800a9e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f042 0201 	orr.w	r2, r2, #1
 800a9e4:	601a      	str	r2, [r3, #0]
 800a9e6:	e000      	b.n	800a9ea <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a9ea:	2300      	movs	r3, #0
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3714      	adds	r7, #20
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr
 800a9f8:	40012c00 	.word	0x40012c00
 800a9fc:	40000400 	.word	0x40000400
 800aa00:	40000800 	.word	0x40000800
 800aa04:	40000c00 	.word	0x40000c00
 800aa08:	40013400 	.word	0x40013400
 800aa0c:	40014000 	.word	0x40014000
 800aa10:	00010007 	.word	0x00010007

0800aa14 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d101      	bne.n	800aa26 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800aa22:	2301      	movs	r3, #1
 800aa24:	e049      	b.n	800aaba <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d106      	bne.n	800aa40 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 f841 	bl	800aac2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2202      	movs	r2, #2
 800aa44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	3304      	adds	r3, #4
 800aa50:	4619      	mov	r1, r3
 800aa52:	4610      	mov	r0, r2
 800aa54:	f000 fa0a 	bl	800ae6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2201      	movs	r2, #1
 800aa64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2201      	movs	r2, #1
 800aa74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2201      	movs	r2, #1
 800aa84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2201      	movs	r2, #1
 800aa94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2201      	movs	r2, #1
 800aaac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2201      	movs	r2, #1
 800aab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aab8:	2300      	movs	r3, #0
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3708      	adds	r7, #8
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}

0800aac2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800aac2:	b480      	push	{r7}
 800aac4:	b083      	sub	sp, #12
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800aaca:	bf00      	nop
 800aacc:	370c      	adds	r7, #12
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr

0800aad6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b082      	sub	sp, #8
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	691b      	ldr	r3, [r3, #16]
 800aae4:	f003 0302 	and.w	r3, r3, #2
 800aae8:	2b02      	cmp	r3, #2
 800aaea:	d122      	bne.n	800ab32 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	f003 0302 	and.w	r3, r3, #2
 800aaf6:	2b02      	cmp	r3, #2
 800aaf8:	d11b      	bne.n	800ab32 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f06f 0202 	mvn.w	r2, #2
 800ab02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2201      	movs	r2, #1
 800ab08:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	699b      	ldr	r3, [r3, #24]
 800ab10:	f003 0303 	and.w	r3, r3, #3
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d003      	beq.n	800ab20 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f000 f989 	bl	800ae30 <HAL_TIM_IC_CaptureCallback>
 800ab1e:	e005      	b.n	800ab2c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 f97b 	bl	800ae1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 f98c 	bl	800ae44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	691b      	ldr	r3, [r3, #16]
 800ab38:	f003 0304 	and.w	r3, r3, #4
 800ab3c:	2b04      	cmp	r3, #4
 800ab3e:	d122      	bne.n	800ab86 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	68db      	ldr	r3, [r3, #12]
 800ab46:	f003 0304 	and.w	r3, r3, #4
 800ab4a:	2b04      	cmp	r3, #4
 800ab4c:	d11b      	bne.n	800ab86 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f06f 0204 	mvn.w	r2, #4
 800ab56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2202      	movs	r2, #2
 800ab5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	699b      	ldr	r3, [r3, #24]
 800ab64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d003      	beq.n	800ab74 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 f95f 	bl	800ae30 <HAL_TIM_IC_CaptureCallback>
 800ab72:	e005      	b.n	800ab80 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 f951 	bl	800ae1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 f962 	bl	800ae44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2200      	movs	r2, #0
 800ab84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	691b      	ldr	r3, [r3, #16]
 800ab8c:	f003 0308 	and.w	r3, r3, #8
 800ab90:	2b08      	cmp	r3, #8
 800ab92:	d122      	bne.n	800abda <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	68db      	ldr	r3, [r3, #12]
 800ab9a:	f003 0308 	and.w	r3, r3, #8
 800ab9e:	2b08      	cmp	r3, #8
 800aba0:	d11b      	bne.n	800abda <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f06f 0208 	mvn.w	r2, #8
 800abaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2204      	movs	r2, #4
 800abb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	69db      	ldr	r3, [r3, #28]
 800abb8:	f003 0303 	and.w	r3, r3, #3
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d003      	beq.n	800abc8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 f935 	bl	800ae30 <HAL_TIM_IC_CaptureCallback>
 800abc6:	e005      	b.n	800abd4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 f927 	bl	800ae1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 f938 	bl	800ae44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2200      	movs	r2, #0
 800abd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	691b      	ldr	r3, [r3, #16]
 800abe0:	f003 0310 	and.w	r3, r3, #16
 800abe4:	2b10      	cmp	r3, #16
 800abe6:	d122      	bne.n	800ac2e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	f003 0310 	and.w	r3, r3, #16
 800abf2:	2b10      	cmp	r3, #16
 800abf4:	d11b      	bne.n	800ac2e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f06f 0210 	mvn.w	r2, #16
 800abfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2208      	movs	r2, #8
 800ac04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	69db      	ldr	r3, [r3, #28]
 800ac0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d003      	beq.n	800ac1c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f000 f90b 	bl	800ae30 <HAL_TIM_IC_CaptureCallback>
 800ac1a:	e005      	b.n	800ac28 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 f8fd 	bl	800ae1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 f90e 	bl	800ae44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	691b      	ldr	r3, [r3, #16]
 800ac34:	f003 0301 	and.w	r3, r3, #1
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d10e      	bne.n	800ac5a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	f003 0301 	and.w	r3, r3, #1
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d107      	bne.n	800ac5a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f06f 0201 	mvn.w	r2, #1
 800ac52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 f8d7 	bl	800ae08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	691b      	ldr	r3, [r3, #16]
 800ac60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac64:	2b80      	cmp	r3, #128	; 0x80
 800ac66:	d10e      	bne.n	800ac86 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	68db      	ldr	r3, [r3, #12]
 800ac6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac72:	2b80      	cmp	r3, #128	; 0x80
 800ac74:	d107      	bne.n	800ac86 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ac7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 fceb 	bl	800b65c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	691b      	ldr	r3, [r3, #16]
 800ac8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac94:	d10e      	bne.n	800acb4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aca0:	2b80      	cmp	r3, #128	; 0x80
 800aca2:	d107      	bne.n	800acb4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800acac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 fcde 	bl	800b670 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	691b      	ldr	r3, [r3, #16]
 800acba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acbe:	2b40      	cmp	r3, #64	; 0x40
 800acc0:	d10e      	bne.n	800ace0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800accc:	2b40      	cmp	r3, #64	; 0x40
 800acce:	d107      	bne.n	800ace0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800acd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 f8bc 	bl	800ae58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	691b      	ldr	r3, [r3, #16]
 800ace6:	f003 0320 	and.w	r3, r3, #32
 800acea:	2b20      	cmp	r3, #32
 800acec:	d10e      	bne.n	800ad0c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	68db      	ldr	r3, [r3, #12]
 800acf4:	f003 0320 	and.w	r3, r3, #32
 800acf8:	2b20      	cmp	r3, #32
 800acfa:	d107      	bne.n	800ad0c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f06f 0220 	mvn.w	r2, #32
 800ad04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 fc9e 	bl	800b648 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ad0c:	bf00      	nop
 800ad0e:	3708      	adds	r7, #8
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b086      	sub	sp, #24
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad20:	2300      	movs	r3, #0
 800ad22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d101      	bne.n	800ad32 <HAL_TIM_OC_ConfigChannel+0x1e>
 800ad2e:	2302      	movs	r3, #2
 800ad30:	e066      	b.n	800ae00 <HAL_TIM_OC_ConfigChannel+0xec>
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2201      	movs	r2, #1
 800ad36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2b14      	cmp	r3, #20
 800ad3e:	d857      	bhi.n	800adf0 <HAL_TIM_OC_ConfigChannel+0xdc>
 800ad40:	a201      	add	r2, pc, #4	; (adr r2, 800ad48 <HAL_TIM_OC_ConfigChannel+0x34>)
 800ad42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad46:	bf00      	nop
 800ad48:	0800ad9d 	.word	0x0800ad9d
 800ad4c:	0800adf1 	.word	0x0800adf1
 800ad50:	0800adf1 	.word	0x0800adf1
 800ad54:	0800adf1 	.word	0x0800adf1
 800ad58:	0800adab 	.word	0x0800adab
 800ad5c:	0800adf1 	.word	0x0800adf1
 800ad60:	0800adf1 	.word	0x0800adf1
 800ad64:	0800adf1 	.word	0x0800adf1
 800ad68:	0800adb9 	.word	0x0800adb9
 800ad6c:	0800adf1 	.word	0x0800adf1
 800ad70:	0800adf1 	.word	0x0800adf1
 800ad74:	0800adf1 	.word	0x0800adf1
 800ad78:	0800adc7 	.word	0x0800adc7
 800ad7c:	0800adf1 	.word	0x0800adf1
 800ad80:	0800adf1 	.word	0x0800adf1
 800ad84:	0800adf1 	.word	0x0800adf1
 800ad88:	0800add5 	.word	0x0800add5
 800ad8c:	0800adf1 	.word	0x0800adf1
 800ad90:	0800adf1 	.word	0x0800adf1
 800ad94:	0800adf1 	.word	0x0800adf1
 800ad98:	0800ade3 	.word	0x0800ade3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	68b9      	ldr	r1, [r7, #8]
 800ada2:	4618      	mov	r0, r3
 800ada4:	f000 f8fc 	bl	800afa0 <TIM_OC1_SetConfig>
      break;
 800ada8:	e025      	b.n	800adf6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	68b9      	ldr	r1, [r7, #8]
 800adb0:	4618      	mov	r0, r3
 800adb2:	f000 f985 	bl	800b0c0 <TIM_OC2_SetConfig>
      break;
 800adb6:	e01e      	b.n	800adf6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	68b9      	ldr	r1, [r7, #8]
 800adbe:	4618      	mov	r0, r3
 800adc0:	f000 fa08 	bl	800b1d4 <TIM_OC3_SetConfig>
      break;
 800adc4:	e017      	b.n	800adf6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	68b9      	ldr	r1, [r7, #8]
 800adcc:	4618      	mov	r0, r3
 800adce:	f000 fa89 	bl	800b2e4 <TIM_OC4_SetConfig>
      break;
 800add2:	e010      	b.n	800adf6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	68b9      	ldr	r1, [r7, #8]
 800adda:	4618      	mov	r0, r3
 800addc:	f000 faec 	bl	800b3b8 <TIM_OC5_SetConfig>
      break;
 800ade0:	e009      	b.n	800adf6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	68b9      	ldr	r1, [r7, #8]
 800ade8:	4618      	mov	r0, r3
 800adea:	f000 fb49 	bl	800b480 <TIM_OC6_SetConfig>
      break;
 800adee:	e002      	b.n	800adf6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800adf0:	2301      	movs	r3, #1
 800adf2:	75fb      	strb	r3, [r7, #23]
      break;
 800adf4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800adfe:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3718      	adds	r7, #24
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b083      	sub	sp, #12
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ae10:	bf00      	nop
 800ae12:	370c      	adds	r7, #12
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae24:	bf00      	nop
 800ae26:	370c      	adds	r7, #12
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae38:	bf00      	nop
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae4c:	bf00      	nop
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae60:	bf00      	nop
 800ae62:	370c      	adds	r7, #12
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	4a40      	ldr	r2, [pc, #256]	; (800af80 <TIM_Base_SetConfig+0x114>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d013      	beq.n	800aeac <TIM_Base_SetConfig+0x40>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae8a:	d00f      	beq.n	800aeac <TIM_Base_SetConfig+0x40>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	4a3d      	ldr	r2, [pc, #244]	; (800af84 <TIM_Base_SetConfig+0x118>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d00b      	beq.n	800aeac <TIM_Base_SetConfig+0x40>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	4a3c      	ldr	r2, [pc, #240]	; (800af88 <TIM_Base_SetConfig+0x11c>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d007      	beq.n	800aeac <TIM_Base_SetConfig+0x40>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	4a3b      	ldr	r2, [pc, #236]	; (800af8c <TIM_Base_SetConfig+0x120>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d003      	beq.n	800aeac <TIM_Base_SetConfig+0x40>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	4a3a      	ldr	r2, [pc, #232]	; (800af90 <TIM_Base_SetConfig+0x124>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d108      	bne.n	800aebe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aeb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	68fa      	ldr	r2, [r7, #12]
 800aeba:	4313      	orrs	r3, r2
 800aebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	4a2f      	ldr	r2, [pc, #188]	; (800af80 <TIM_Base_SetConfig+0x114>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d01f      	beq.n	800af06 <TIM_Base_SetConfig+0x9a>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aecc:	d01b      	beq.n	800af06 <TIM_Base_SetConfig+0x9a>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4a2c      	ldr	r2, [pc, #176]	; (800af84 <TIM_Base_SetConfig+0x118>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d017      	beq.n	800af06 <TIM_Base_SetConfig+0x9a>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	4a2b      	ldr	r2, [pc, #172]	; (800af88 <TIM_Base_SetConfig+0x11c>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d013      	beq.n	800af06 <TIM_Base_SetConfig+0x9a>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	4a2a      	ldr	r2, [pc, #168]	; (800af8c <TIM_Base_SetConfig+0x120>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d00f      	beq.n	800af06 <TIM_Base_SetConfig+0x9a>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	4a29      	ldr	r2, [pc, #164]	; (800af90 <TIM_Base_SetConfig+0x124>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d00b      	beq.n	800af06 <TIM_Base_SetConfig+0x9a>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	4a28      	ldr	r2, [pc, #160]	; (800af94 <TIM_Base_SetConfig+0x128>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d007      	beq.n	800af06 <TIM_Base_SetConfig+0x9a>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	4a27      	ldr	r2, [pc, #156]	; (800af98 <TIM_Base_SetConfig+0x12c>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d003      	beq.n	800af06 <TIM_Base_SetConfig+0x9a>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4a26      	ldr	r2, [pc, #152]	; (800af9c <TIM_Base_SetConfig+0x130>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d108      	bne.n	800af18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	68fa      	ldr	r2, [r7, #12]
 800af14:	4313      	orrs	r3, r2
 800af16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	695b      	ldr	r3, [r3, #20]
 800af22:	4313      	orrs	r3, r2
 800af24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	689a      	ldr	r2, [r3, #8]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	4a10      	ldr	r2, [pc, #64]	; (800af80 <TIM_Base_SetConfig+0x114>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d00f      	beq.n	800af64 <TIM_Base_SetConfig+0xf8>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	4a12      	ldr	r2, [pc, #72]	; (800af90 <TIM_Base_SetConfig+0x124>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d00b      	beq.n	800af64 <TIM_Base_SetConfig+0xf8>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	4a11      	ldr	r2, [pc, #68]	; (800af94 <TIM_Base_SetConfig+0x128>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d007      	beq.n	800af64 <TIM_Base_SetConfig+0xf8>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	4a10      	ldr	r2, [pc, #64]	; (800af98 <TIM_Base_SetConfig+0x12c>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d003      	beq.n	800af64 <TIM_Base_SetConfig+0xf8>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	4a0f      	ldr	r2, [pc, #60]	; (800af9c <TIM_Base_SetConfig+0x130>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d103      	bne.n	800af6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	691a      	ldr	r2, [r3, #16]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2201      	movs	r2, #1
 800af70:	615a      	str	r2, [r3, #20]
}
 800af72:	bf00      	nop
 800af74:	3714      	adds	r7, #20
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr
 800af7e:	bf00      	nop
 800af80:	40012c00 	.word	0x40012c00
 800af84:	40000400 	.word	0x40000400
 800af88:	40000800 	.word	0x40000800
 800af8c:	40000c00 	.word	0x40000c00
 800af90:	40013400 	.word	0x40013400
 800af94:	40014000 	.word	0x40014000
 800af98:	40014400 	.word	0x40014400
 800af9c:	40014800 	.word	0x40014800

0800afa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b087      	sub	sp, #28
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6a1b      	ldr	r3, [r3, #32]
 800afae:	f023 0201 	bic.w	r2, r3, #1
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a1b      	ldr	r3, [r3, #32]
 800afba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	699b      	ldr	r3, [r3, #24]
 800afc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f023 0303 	bic.w	r3, r3, #3
 800afda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	68fa      	ldr	r2, [r7, #12]
 800afe2:	4313      	orrs	r3, r2
 800afe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	f023 0302 	bic.w	r3, r3, #2
 800afec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	689b      	ldr	r3, [r3, #8]
 800aff2:	697a      	ldr	r2, [r7, #20]
 800aff4:	4313      	orrs	r3, r2
 800aff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	4a2c      	ldr	r2, [pc, #176]	; (800b0ac <TIM_OC1_SetConfig+0x10c>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d00f      	beq.n	800b020 <TIM_OC1_SetConfig+0x80>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	4a2b      	ldr	r2, [pc, #172]	; (800b0b0 <TIM_OC1_SetConfig+0x110>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d00b      	beq.n	800b020 <TIM_OC1_SetConfig+0x80>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	4a2a      	ldr	r2, [pc, #168]	; (800b0b4 <TIM_OC1_SetConfig+0x114>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d007      	beq.n	800b020 <TIM_OC1_SetConfig+0x80>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	4a29      	ldr	r2, [pc, #164]	; (800b0b8 <TIM_OC1_SetConfig+0x118>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d003      	beq.n	800b020 <TIM_OC1_SetConfig+0x80>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	4a28      	ldr	r2, [pc, #160]	; (800b0bc <TIM_OC1_SetConfig+0x11c>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d10c      	bne.n	800b03a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	f023 0308 	bic.w	r3, r3, #8
 800b026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	697a      	ldr	r2, [r7, #20]
 800b02e:	4313      	orrs	r3, r2
 800b030:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	f023 0304 	bic.w	r3, r3, #4
 800b038:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	4a1b      	ldr	r2, [pc, #108]	; (800b0ac <TIM_OC1_SetConfig+0x10c>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d00f      	beq.n	800b062 <TIM_OC1_SetConfig+0xc2>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	4a1a      	ldr	r2, [pc, #104]	; (800b0b0 <TIM_OC1_SetConfig+0x110>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d00b      	beq.n	800b062 <TIM_OC1_SetConfig+0xc2>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	4a19      	ldr	r2, [pc, #100]	; (800b0b4 <TIM_OC1_SetConfig+0x114>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d007      	beq.n	800b062 <TIM_OC1_SetConfig+0xc2>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	4a18      	ldr	r2, [pc, #96]	; (800b0b8 <TIM_OC1_SetConfig+0x118>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d003      	beq.n	800b062 <TIM_OC1_SetConfig+0xc2>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	4a17      	ldr	r2, [pc, #92]	; (800b0bc <TIM_OC1_SetConfig+0x11c>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d111      	bne.n	800b086 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	695b      	ldr	r3, [r3, #20]
 800b076:	693a      	ldr	r2, [r7, #16]
 800b078:	4313      	orrs	r3, r2
 800b07a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	699b      	ldr	r3, [r3, #24]
 800b080:	693a      	ldr	r2, [r7, #16]
 800b082:	4313      	orrs	r3, r2
 800b084:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	693a      	ldr	r2, [r7, #16]
 800b08a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	68fa      	ldr	r2, [r7, #12]
 800b090:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	685a      	ldr	r2, [r3, #4]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	697a      	ldr	r2, [r7, #20]
 800b09e:	621a      	str	r2, [r3, #32]
}
 800b0a0:	bf00      	nop
 800b0a2:	371c      	adds	r7, #28
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr
 800b0ac:	40012c00 	.word	0x40012c00
 800b0b0:	40013400 	.word	0x40013400
 800b0b4:	40014000 	.word	0x40014000
 800b0b8:	40014400 	.word	0x40014400
 800b0bc:	40014800 	.word	0x40014800

0800b0c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b087      	sub	sp, #28
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6a1b      	ldr	r3, [r3, #32]
 800b0ce:	f023 0210 	bic.w	r2, r3, #16
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6a1b      	ldr	r3, [r3, #32]
 800b0da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	699b      	ldr	r3, [r3, #24]
 800b0e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b0ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	021b      	lsls	r3, r3, #8
 800b102:	68fa      	ldr	r2, [r7, #12]
 800b104:	4313      	orrs	r3, r2
 800b106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	f023 0320 	bic.w	r3, r3, #32
 800b10e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	689b      	ldr	r3, [r3, #8]
 800b114:	011b      	lsls	r3, r3, #4
 800b116:	697a      	ldr	r2, [r7, #20]
 800b118:	4313      	orrs	r3, r2
 800b11a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	4a28      	ldr	r2, [pc, #160]	; (800b1c0 <TIM_OC2_SetConfig+0x100>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d003      	beq.n	800b12c <TIM_OC2_SetConfig+0x6c>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	4a27      	ldr	r2, [pc, #156]	; (800b1c4 <TIM_OC2_SetConfig+0x104>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d10d      	bne.n	800b148 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	68db      	ldr	r3, [r3, #12]
 800b138:	011b      	lsls	r3, r3, #4
 800b13a:	697a      	ldr	r2, [r7, #20]
 800b13c:	4313      	orrs	r3, r2
 800b13e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b146:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	4a1d      	ldr	r2, [pc, #116]	; (800b1c0 <TIM_OC2_SetConfig+0x100>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d00f      	beq.n	800b170 <TIM_OC2_SetConfig+0xb0>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	4a1c      	ldr	r2, [pc, #112]	; (800b1c4 <TIM_OC2_SetConfig+0x104>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d00b      	beq.n	800b170 <TIM_OC2_SetConfig+0xb0>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	4a1b      	ldr	r2, [pc, #108]	; (800b1c8 <TIM_OC2_SetConfig+0x108>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d007      	beq.n	800b170 <TIM_OC2_SetConfig+0xb0>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	4a1a      	ldr	r2, [pc, #104]	; (800b1cc <TIM_OC2_SetConfig+0x10c>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d003      	beq.n	800b170 <TIM_OC2_SetConfig+0xb0>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	4a19      	ldr	r2, [pc, #100]	; (800b1d0 <TIM_OC2_SetConfig+0x110>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d113      	bne.n	800b198 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b176:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b17e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	695b      	ldr	r3, [r3, #20]
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	693a      	ldr	r2, [r7, #16]
 800b188:	4313      	orrs	r3, r2
 800b18a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	699b      	ldr	r3, [r3, #24]
 800b190:	009b      	lsls	r3, r3, #2
 800b192:	693a      	ldr	r2, [r7, #16]
 800b194:	4313      	orrs	r3, r2
 800b196:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	693a      	ldr	r2, [r7, #16]
 800b19c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	68fa      	ldr	r2, [r7, #12]
 800b1a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	685a      	ldr	r2, [r3, #4]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	697a      	ldr	r2, [r7, #20]
 800b1b0:	621a      	str	r2, [r3, #32]
}
 800b1b2:	bf00      	nop
 800b1b4:	371c      	adds	r7, #28
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr
 800b1be:	bf00      	nop
 800b1c0:	40012c00 	.word	0x40012c00
 800b1c4:	40013400 	.word	0x40013400
 800b1c8:	40014000 	.word	0x40014000
 800b1cc:	40014400 	.word	0x40014400
 800b1d0:	40014800 	.word	0x40014800

0800b1d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b087      	sub	sp, #28
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6a1b      	ldr	r3, [r3, #32]
 800b1e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6a1b      	ldr	r3, [r3, #32]
 800b1ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	69db      	ldr	r3, [r3, #28]
 800b1fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f023 0303 	bic.w	r3, r3, #3
 800b20e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	68fa      	ldr	r2, [r7, #12]
 800b216:	4313      	orrs	r3, r2
 800b218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	689b      	ldr	r3, [r3, #8]
 800b226:	021b      	lsls	r3, r3, #8
 800b228:	697a      	ldr	r2, [r7, #20]
 800b22a:	4313      	orrs	r3, r2
 800b22c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	4a27      	ldr	r2, [pc, #156]	; (800b2d0 <TIM_OC3_SetConfig+0xfc>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d003      	beq.n	800b23e <TIM_OC3_SetConfig+0x6a>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	4a26      	ldr	r2, [pc, #152]	; (800b2d4 <TIM_OC3_SetConfig+0x100>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d10d      	bne.n	800b25a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b244:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	68db      	ldr	r3, [r3, #12]
 800b24a:	021b      	lsls	r3, r3, #8
 800b24c:	697a      	ldr	r2, [r7, #20]
 800b24e:	4313      	orrs	r3, r2
 800b250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	4a1c      	ldr	r2, [pc, #112]	; (800b2d0 <TIM_OC3_SetConfig+0xfc>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d00f      	beq.n	800b282 <TIM_OC3_SetConfig+0xae>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	4a1b      	ldr	r2, [pc, #108]	; (800b2d4 <TIM_OC3_SetConfig+0x100>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d00b      	beq.n	800b282 <TIM_OC3_SetConfig+0xae>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	4a1a      	ldr	r2, [pc, #104]	; (800b2d8 <TIM_OC3_SetConfig+0x104>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d007      	beq.n	800b282 <TIM_OC3_SetConfig+0xae>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	4a19      	ldr	r2, [pc, #100]	; (800b2dc <TIM_OC3_SetConfig+0x108>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d003      	beq.n	800b282 <TIM_OC3_SetConfig+0xae>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	4a18      	ldr	r2, [pc, #96]	; (800b2e0 <TIM_OC3_SetConfig+0x10c>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d113      	bne.n	800b2aa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	695b      	ldr	r3, [r3, #20]
 800b296:	011b      	lsls	r3, r3, #4
 800b298:	693a      	ldr	r2, [r7, #16]
 800b29a:	4313      	orrs	r3, r2
 800b29c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	699b      	ldr	r3, [r3, #24]
 800b2a2:	011b      	lsls	r3, r3, #4
 800b2a4:	693a      	ldr	r2, [r7, #16]
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	693a      	ldr	r2, [r7, #16]
 800b2ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	68fa      	ldr	r2, [r7, #12]
 800b2b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	685a      	ldr	r2, [r3, #4]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	697a      	ldr	r2, [r7, #20]
 800b2c2:	621a      	str	r2, [r3, #32]
}
 800b2c4:	bf00      	nop
 800b2c6:	371c      	adds	r7, #28
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr
 800b2d0:	40012c00 	.word	0x40012c00
 800b2d4:	40013400 	.word	0x40013400
 800b2d8:	40014000 	.word	0x40014000
 800b2dc:	40014400 	.word	0x40014400
 800b2e0:	40014800 	.word	0x40014800

0800b2e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b087      	sub	sp, #28
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6a1b      	ldr	r3, [r3, #32]
 800b2f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6a1b      	ldr	r3, [r3, #32]
 800b2fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	69db      	ldr	r3, [r3, #28]
 800b30a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b31e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	021b      	lsls	r3, r3, #8
 800b326:	68fa      	ldr	r2, [r7, #12]
 800b328:	4313      	orrs	r3, r2
 800b32a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b332:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	031b      	lsls	r3, r3, #12
 800b33a:	693a      	ldr	r2, [r7, #16]
 800b33c:	4313      	orrs	r3, r2
 800b33e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	4a18      	ldr	r2, [pc, #96]	; (800b3a4 <TIM_OC4_SetConfig+0xc0>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d00f      	beq.n	800b368 <TIM_OC4_SetConfig+0x84>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	4a17      	ldr	r2, [pc, #92]	; (800b3a8 <TIM_OC4_SetConfig+0xc4>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d00b      	beq.n	800b368 <TIM_OC4_SetConfig+0x84>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	4a16      	ldr	r2, [pc, #88]	; (800b3ac <TIM_OC4_SetConfig+0xc8>)
 800b354:	4293      	cmp	r3, r2
 800b356:	d007      	beq.n	800b368 <TIM_OC4_SetConfig+0x84>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	4a15      	ldr	r2, [pc, #84]	; (800b3b0 <TIM_OC4_SetConfig+0xcc>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d003      	beq.n	800b368 <TIM_OC4_SetConfig+0x84>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	4a14      	ldr	r2, [pc, #80]	; (800b3b4 <TIM_OC4_SetConfig+0xd0>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d109      	bne.n	800b37c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b36e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	695b      	ldr	r3, [r3, #20]
 800b374:	019b      	lsls	r3, r3, #6
 800b376:	697a      	ldr	r2, [r7, #20]
 800b378:	4313      	orrs	r3, r2
 800b37a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	697a      	ldr	r2, [r7, #20]
 800b380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	68fa      	ldr	r2, [r7, #12]
 800b386:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	685a      	ldr	r2, [r3, #4]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	693a      	ldr	r2, [r7, #16]
 800b394:	621a      	str	r2, [r3, #32]
}
 800b396:	bf00      	nop
 800b398:	371c      	adds	r7, #28
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr
 800b3a2:	bf00      	nop
 800b3a4:	40012c00 	.word	0x40012c00
 800b3a8:	40013400 	.word	0x40013400
 800b3ac:	40014000 	.word	0x40014000
 800b3b0:	40014400 	.word	0x40014400
 800b3b4:	40014800 	.word	0x40014800

0800b3b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b087      	sub	sp, #28
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6a1b      	ldr	r3, [r3, #32]
 800b3c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6a1b      	ldr	r3, [r3, #32]
 800b3d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b3e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	68fa      	ldr	r2, [r7, #12]
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b3fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	041b      	lsls	r3, r3, #16
 800b404:	693a      	ldr	r2, [r7, #16]
 800b406:	4313      	orrs	r3, r2
 800b408:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	4a17      	ldr	r2, [pc, #92]	; (800b46c <TIM_OC5_SetConfig+0xb4>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d00f      	beq.n	800b432 <TIM_OC5_SetConfig+0x7a>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	4a16      	ldr	r2, [pc, #88]	; (800b470 <TIM_OC5_SetConfig+0xb8>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d00b      	beq.n	800b432 <TIM_OC5_SetConfig+0x7a>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	4a15      	ldr	r2, [pc, #84]	; (800b474 <TIM_OC5_SetConfig+0xbc>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d007      	beq.n	800b432 <TIM_OC5_SetConfig+0x7a>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	4a14      	ldr	r2, [pc, #80]	; (800b478 <TIM_OC5_SetConfig+0xc0>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d003      	beq.n	800b432 <TIM_OC5_SetConfig+0x7a>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	4a13      	ldr	r2, [pc, #76]	; (800b47c <TIM_OC5_SetConfig+0xc4>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d109      	bne.n	800b446 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b438:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	695b      	ldr	r3, [r3, #20]
 800b43e:	021b      	lsls	r3, r3, #8
 800b440:	697a      	ldr	r2, [r7, #20]
 800b442:	4313      	orrs	r3, r2
 800b444:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	697a      	ldr	r2, [r7, #20]
 800b44a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	68fa      	ldr	r2, [r7, #12]
 800b450:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	685a      	ldr	r2, [r3, #4]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	693a      	ldr	r2, [r7, #16]
 800b45e:	621a      	str	r2, [r3, #32]
}
 800b460:	bf00      	nop
 800b462:	371c      	adds	r7, #28
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr
 800b46c:	40012c00 	.word	0x40012c00
 800b470:	40013400 	.word	0x40013400
 800b474:	40014000 	.word	0x40014000
 800b478:	40014400 	.word	0x40014400
 800b47c:	40014800 	.word	0x40014800

0800b480 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b480:	b480      	push	{r7}
 800b482:	b087      	sub	sp, #28
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6a1b      	ldr	r3, [r3, #32]
 800b48e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6a1b      	ldr	r3, [r3, #32]
 800b49a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b4ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	021b      	lsls	r3, r3, #8
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b4c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	051b      	lsls	r3, r3, #20
 800b4ce:	693a      	ldr	r2, [r7, #16]
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	4a18      	ldr	r2, [pc, #96]	; (800b538 <TIM_OC6_SetConfig+0xb8>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d00f      	beq.n	800b4fc <TIM_OC6_SetConfig+0x7c>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	4a17      	ldr	r2, [pc, #92]	; (800b53c <TIM_OC6_SetConfig+0xbc>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d00b      	beq.n	800b4fc <TIM_OC6_SetConfig+0x7c>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	4a16      	ldr	r2, [pc, #88]	; (800b540 <TIM_OC6_SetConfig+0xc0>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d007      	beq.n	800b4fc <TIM_OC6_SetConfig+0x7c>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	4a15      	ldr	r2, [pc, #84]	; (800b544 <TIM_OC6_SetConfig+0xc4>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d003      	beq.n	800b4fc <TIM_OC6_SetConfig+0x7c>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	4a14      	ldr	r2, [pc, #80]	; (800b548 <TIM_OC6_SetConfig+0xc8>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d109      	bne.n	800b510 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b502:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	695b      	ldr	r3, [r3, #20]
 800b508:	029b      	lsls	r3, r3, #10
 800b50a:	697a      	ldr	r2, [r7, #20]
 800b50c:	4313      	orrs	r3, r2
 800b50e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	697a      	ldr	r2, [r7, #20]
 800b514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	68fa      	ldr	r2, [r7, #12]
 800b51a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	685a      	ldr	r2, [r3, #4]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	693a      	ldr	r2, [r7, #16]
 800b528:	621a      	str	r2, [r3, #32]
}
 800b52a:	bf00      	nop
 800b52c:	371c      	adds	r7, #28
 800b52e:	46bd      	mov	sp, r7
 800b530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b534:	4770      	bx	lr
 800b536:	bf00      	nop
 800b538:	40012c00 	.word	0x40012c00
 800b53c:	40013400 	.word	0x40013400
 800b540:	40014000 	.word	0x40014000
 800b544:	40014400 	.word	0x40014400
 800b548:	40014800 	.word	0x40014800

0800b54c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b085      	sub	sp, #20
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b556:	2300      	movs	r3, #0
 800b558:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b560:	2b01      	cmp	r3, #1
 800b562:	d101      	bne.n	800b568 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b564:	2302      	movs	r3, #2
 800b566:	e065      	b.n	800b634 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2201      	movs	r2, #1
 800b56c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	68db      	ldr	r3, [r3, #12]
 800b57a:	4313      	orrs	r3, r2
 800b57c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	689b      	ldr	r3, [r3, #8]
 800b588:	4313      	orrs	r3, r2
 800b58a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	4313      	orrs	r3, r2
 800b598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	691b      	ldr	r3, [r3, #16]
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	695b      	ldr	r3, [r3, #20]
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	699b      	ldr	r3, [r3, #24]
 800b5dc:	041b      	lsls	r3, r3, #16
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a16      	ldr	r2, [pc, #88]	; (800b640 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d004      	beq.n	800b5f6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a14      	ldr	r2, [pc, #80]	; (800b644 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d115      	bne.n	800b622 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b600:	051b      	lsls	r3, r3, #20
 800b602:	4313      	orrs	r3, r2
 800b604:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	69db      	ldr	r3, [r3, #28]
 800b610:	4313      	orrs	r3, r2
 800b612:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	6a1b      	ldr	r3, [r3, #32]
 800b61e:	4313      	orrs	r3, r2
 800b620:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	68fa      	ldr	r2, [r7, #12]
 800b628:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2200      	movs	r2, #0
 800b62e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b632:	2300      	movs	r3, #0
}
 800b634:	4618      	mov	r0, r3
 800b636:	3714      	adds	r7, #20
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr
 800b640:	40012c00 	.word	0x40012c00
 800b644:	40013400 	.word	0x40013400

0800b648 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b650:	bf00      	nop
 800b652:	370c      	adds	r7, #12
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr

0800b65c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b664:	bf00      	nop
 800b666:	370c      	adds	r7, #12
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b678:	bf00      	nop
 800b67a:	370c      	adds	r7, #12
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d101      	bne.n	800b696 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b692:	2301      	movs	r3, #1
 800b694:	e042      	b.n	800b71c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d106      	bne.n	800b6ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f7f6 ff97 	bl	80025dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2224      	movs	r2, #36	; 0x24
 800b6b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f022 0201 	bic.w	r2, r2, #1
 800b6c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 fb64 	bl	800bd94 <UART_SetConfig>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	d101      	bne.n	800b6d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e022      	b.n	800b71c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d002      	beq.n	800b6e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 fe54 	bl	800c38c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	685a      	ldr	r2, [r3, #4]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b6f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	689a      	ldr	r2, [r3, #8]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b702:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f042 0201 	orr.w	r2, r2, #1
 800b712:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 fedb 	bl	800c4d0 <UART_CheckIdleState>
 800b71a:	4603      	mov	r3, r0
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3708      	adds	r7, #8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b0ba      	sub	sp, #232	; 0xe8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	69db      	ldr	r3, [r3, #28]
 800b732:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b74a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b74e:	f640 030f 	movw	r3, #2063	; 0x80f
 800b752:	4013      	ands	r3, r2
 800b754:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b758:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d11b      	bne.n	800b798 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b764:	f003 0320 	and.w	r3, r3, #32
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d015      	beq.n	800b798 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b76c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b770:	f003 0320 	and.w	r3, r3, #32
 800b774:	2b00      	cmp	r3, #0
 800b776:	d105      	bne.n	800b784 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b77c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b780:	2b00      	cmp	r3, #0
 800b782:	d009      	beq.n	800b798 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b788:	2b00      	cmp	r3, #0
 800b78a:	f000 82d6 	beq.w	800bd3a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	4798      	blx	r3
      }
      return;
 800b796:	e2d0      	b.n	800bd3a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800b798:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	f000 811f 	beq.w	800b9e0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b7a2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b7a6:	4b8b      	ldr	r3, [pc, #556]	; (800b9d4 <HAL_UART_IRQHandler+0x2b0>)
 800b7a8:	4013      	ands	r3, r2
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d106      	bne.n	800b7bc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b7ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b7b2:	4b89      	ldr	r3, [pc, #548]	; (800b9d8 <HAL_UART_IRQHandler+0x2b4>)
 800b7b4:	4013      	ands	r3, r2
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	f000 8112 	beq.w	800b9e0 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b7bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7c0:	f003 0301 	and.w	r3, r3, #1
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d011      	beq.n	800b7ec <HAL_UART_IRQHandler+0xc8>
 800b7c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d00b      	beq.n	800b7ec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2201      	movs	r2, #1
 800b7da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7e2:	f043 0201 	orr.w	r2, r3, #1
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7f0:	f003 0302 	and.w	r3, r3, #2
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d011      	beq.n	800b81c <HAL_UART_IRQHandler+0xf8>
 800b7f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7fc:	f003 0301 	and.w	r3, r3, #1
 800b800:	2b00      	cmp	r3, #0
 800b802:	d00b      	beq.n	800b81c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	2202      	movs	r2, #2
 800b80a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b812:	f043 0204 	orr.w	r2, r3, #4
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b81c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b820:	f003 0304 	and.w	r3, r3, #4
 800b824:	2b00      	cmp	r3, #0
 800b826:	d011      	beq.n	800b84c <HAL_UART_IRQHandler+0x128>
 800b828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b82c:	f003 0301 	and.w	r3, r3, #1
 800b830:	2b00      	cmp	r3, #0
 800b832:	d00b      	beq.n	800b84c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	2204      	movs	r2, #4
 800b83a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b842:	f043 0202 	orr.w	r2, r3, #2
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b84c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b850:	f003 0308 	and.w	r3, r3, #8
 800b854:	2b00      	cmp	r3, #0
 800b856:	d017      	beq.n	800b888 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b85c:	f003 0320 	and.w	r3, r3, #32
 800b860:	2b00      	cmp	r3, #0
 800b862:	d105      	bne.n	800b870 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b864:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b868:	4b5a      	ldr	r3, [pc, #360]	; (800b9d4 <HAL_UART_IRQHandler+0x2b0>)
 800b86a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d00b      	beq.n	800b888 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	2208      	movs	r2, #8
 800b876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b87e:	f043 0208 	orr.w	r2, r3, #8
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b88c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b890:	2b00      	cmp	r3, #0
 800b892:	d012      	beq.n	800b8ba <HAL_UART_IRQHandler+0x196>
 800b894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b898:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d00c      	beq.n	800b8ba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b8a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8b0:	f043 0220 	orr.w	r2, r3, #32
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	f000 823c 	beq.w	800bd3e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b8c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8ca:	f003 0320 	and.w	r3, r3, #32
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d013      	beq.n	800b8fa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b8d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8d6:	f003 0320 	and.w	r3, r3, #32
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d105      	bne.n	800b8ea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b8de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d007      	beq.n	800b8fa <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d003      	beq.n	800b8fa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b900:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b90e:	2b40      	cmp	r3, #64	; 0x40
 800b910:	d005      	beq.n	800b91e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b912:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b916:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d04f      	beq.n	800b9be <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 fee9 	bl	800c6f6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b92e:	2b40      	cmp	r3, #64	; 0x40
 800b930:	d141      	bne.n	800b9b6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	3308      	adds	r3, #8
 800b938:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b93c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b940:	e853 3f00 	ldrex	r3, [r3]
 800b944:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b948:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b94c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b950:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	3308      	adds	r3, #8
 800b95a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b95e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b962:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b966:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b96a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b96e:	e841 2300 	strex	r3, r2, [r1]
 800b972:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b976:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d1d9      	bne.n	800b932 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b982:	2b00      	cmp	r3, #0
 800b984:	d013      	beq.n	800b9ae <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b98a:	4a14      	ldr	r2, [pc, #80]	; (800b9dc <HAL_UART_IRQHandler+0x2b8>)
 800b98c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b992:	4618      	mov	r0, r3
 800b994:	f7f7 fb53 	bl	800303e <HAL_DMA_Abort_IT>
 800b998:	4603      	mov	r3, r0
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d017      	beq.n	800b9ce <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9a4:	687a      	ldr	r2, [r7, #4]
 800b9a6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b9a8:	4610      	mov	r0, r2
 800b9aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9ac:	e00f      	b.n	800b9ce <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 f9da 	bl	800bd68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9b4:	e00b      	b.n	800b9ce <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 f9d6 	bl	800bd68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9bc:	e007      	b.n	800b9ce <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f000 f9d2 	bl	800bd68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b9cc:	e1b7      	b.n	800bd3e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9ce:	bf00      	nop
    return;
 800b9d0:	e1b5      	b.n	800bd3e <HAL_UART_IRQHandler+0x61a>
 800b9d2:	bf00      	nop
 800b9d4:	10000001 	.word	0x10000001
 800b9d8:	04000120 	.word	0x04000120
 800b9dc:	0800c7c3 	.word	0x0800c7c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	f040 814a 	bne.w	800bc7e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b9ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9ee:	f003 0310 	and.w	r3, r3, #16
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	f000 8143 	beq.w	800bc7e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b9f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9fc:	f003 0310 	and.w	r3, r3, #16
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f000 813c 	beq.w	800bc7e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2210      	movs	r2, #16
 800ba0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	689b      	ldr	r3, [r3, #8]
 800ba14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba18:	2b40      	cmp	r3, #64	; 0x40
 800ba1a:	f040 80b5 	bne.w	800bb88 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ba2a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	f000 8187 	beq.w	800bd42 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ba3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	f080 817f 	bcs.w	800bd42 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ba4a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f003 0320 	and.w	r3, r3, #32
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	f040 8086 	bne.w	800bb6c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba6c:	e853 3f00 	ldrex	r3, [r3]
 800ba70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ba74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	461a      	mov	r2, r3
 800ba86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ba8e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ba96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ba9a:	e841 2300 	strex	r3, r2, [r1]
 800ba9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800baa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d1da      	bne.n	800ba60 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	3308      	adds	r3, #8
 800bab0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bab2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bab4:	e853 3f00 	ldrex	r3, [r3]
 800bab8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800baba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800babc:	f023 0301 	bic.w	r3, r3, #1
 800bac0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	3308      	adds	r3, #8
 800baca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bace:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bad2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bad4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bad6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bada:	e841 2300 	strex	r3, r2, [r1]
 800bade:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bae0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d1e1      	bne.n	800baaa <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	3308      	adds	r3, #8
 800baec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800baf0:	e853 3f00 	ldrex	r3, [r3]
 800baf4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800baf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800baf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bafc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	3308      	adds	r3, #8
 800bb06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bb0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bb0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bb10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bb12:	e841 2300 	strex	r3, r2, [r1]
 800bb16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bb18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d1e3      	bne.n	800bae6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2220      	movs	r2, #32
 800bb22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb34:	e853 3f00 	ldrex	r3, [r3]
 800bb38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bb3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb3c:	f023 0310 	bic.w	r3, r3, #16
 800bb40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	461a      	mov	r2, r3
 800bb4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bb4e:	65bb      	str	r3, [r7, #88]	; 0x58
 800bb50:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bb54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb56:	e841 2300 	strex	r3, r2, [r1]
 800bb5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bb5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d1e4      	bne.n	800bb2c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7f7 fa0d 	bl	8002f86 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	1ad3      	subs	r3, r2, r3
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	4619      	mov	r1, r3
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f000 f8fb 	bl	800bd7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bb86:	e0dc      	b.n	800bd42 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb94:	b29b      	uxth	r3, r3
 800bb96:	1ad3      	subs	r3, r2, r3
 800bb98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f000 80ce 	beq.w	800bd46 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800bbaa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	f000 80c9 	beq.w	800bd46 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbbc:	e853 3f00 	ldrex	r3, [r3]
 800bbc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bbc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bbc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bbd6:	647b      	str	r3, [r7, #68]	; 0x44
 800bbd8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bbdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbde:	e841 2300 	strex	r3, r2, [r1]
 800bbe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bbe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d1e4      	bne.n	800bbb4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	3308      	adds	r3, #8
 800bbf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf4:	e853 3f00 	ldrex	r3, [r3]
 800bbf8:	623b      	str	r3, [r7, #32]
   return(result);
 800bbfa:	6a3b      	ldr	r3, [r7, #32]
 800bbfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bc00:	f023 0301 	bic.w	r3, r3, #1
 800bc04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	3308      	adds	r3, #8
 800bc0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bc12:	633a      	str	r2, [r7, #48]	; 0x30
 800bc14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc1a:	e841 2300 	strex	r3, r2, [r1]
 800bc1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d1e1      	bne.n	800bbea <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2220      	movs	r2, #32
 800bc2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	e853 3f00 	ldrex	r3, [r3]
 800bc46:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f023 0310 	bic.w	r3, r3, #16
 800bc4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	461a      	mov	r2, r3
 800bc58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bc5c:	61fb      	str	r3, [r7, #28]
 800bc5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc60:	69b9      	ldr	r1, [r7, #24]
 800bc62:	69fa      	ldr	r2, [r7, #28]
 800bc64:	e841 2300 	strex	r3, r2, [r1]
 800bc68:	617b      	str	r3, [r7, #20]
   return(result);
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d1e4      	bne.n	800bc3a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bc70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bc74:	4619      	mov	r1, r3
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 f880 	bl	800bd7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bc7c:	e063      	b.n	800bd46 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bc7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d00e      	beq.n	800bca8 <HAL_UART_IRQHandler+0x584>
 800bc8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d008      	beq.n	800bca8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bc9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f000 fdcf 	bl	800c844 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bca6:	e051      	b.n	800bd4c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d014      	beq.n	800bcde <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bcb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d105      	bne.n	800bccc <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bcc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d008      	beq.n	800bcde <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d03a      	beq.n	800bd4a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	4798      	blx	r3
    }
    return;
 800bcdc:	e035      	b.n	800bd4a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bcde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d009      	beq.n	800bcfe <HAL_UART_IRQHandler+0x5da>
 800bcea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d003      	beq.n	800bcfe <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 fd79 	bl	800c7ee <UART_EndTransmit_IT>
    return;
 800bcfc:	e026      	b.n	800bd4c <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bcfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d009      	beq.n	800bd1e <HAL_UART_IRQHandler+0x5fa>
 800bd0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd0e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d003      	beq.n	800bd1e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 fda8 	bl	800c86c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd1c:	e016      	b.n	800bd4c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bd1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d010      	beq.n	800bd4c <HAL_UART_IRQHandler+0x628>
 800bd2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	da0c      	bge.n	800bd4c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f000 fd90 	bl	800c858 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd38:	e008      	b.n	800bd4c <HAL_UART_IRQHandler+0x628>
      return;
 800bd3a:	bf00      	nop
 800bd3c:	e006      	b.n	800bd4c <HAL_UART_IRQHandler+0x628>
    return;
 800bd3e:	bf00      	nop
 800bd40:	e004      	b.n	800bd4c <HAL_UART_IRQHandler+0x628>
      return;
 800bd42:	bf00      	nop
 800bd44:	e002      	b.n	800bd4c <HAL_UART_IRQHandler+0x628>
      return;
 800bd46:	bf00      	nop
 800bd48:	e000      	b.n	800bd4c <HAL_UART_IRQHandler+0x628>
    return;
 800bd4a:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800bd4c:	37e8      	adds	r7, #232	; 0xe8
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop

0800bd54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b083      	sub	sp, #12
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bd5c:	bf00      	nop
 800bd5e:	370c      	adds	r7, #12
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr

0800bd68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b083      	sub	sp, #12
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bd70:	bf00      	nop
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr

0800bd7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b083      	sub	sp, #12
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	460b      	mov	r3, r1
 800bd86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bd88:	bf00      	nop
 800bd8a:	370c      	adds	r7, #12
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr

0800bd94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bd94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bd98:	b08c      	sub	sp, #48	; 0x30
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	689a      	ldr	r2, [r3, #8]
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	691b      	ldr	r3, [r3, #16]
 800bdac:	431a      	orrs	r2, r3
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	695b      	ldr	r3, [r3, #20]
 800bdb2:	431a      	orrs	r2, r3
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	69db      	ldr	r3, [r3, #28]
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	4baa      	ldr	r3, [pc, #680]	; (800c06c <UART_SetConfig+0x2d8>)
 800bdc4:	4013      	ands	r3, r2
 800bdc6:	697a      	ldr	r2, [r7, #20]
 800bdc8:	6812      	ldr	r2, [r2, #0]
 800bdca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bdcc:	430b      	orrs	r3, r1
 800bdce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	68da      	ldr	r2, [r3, #12]
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	430a      	orrs	r2, r1
 800bde4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	699b      	ldr	r3, [r3, #24]
 800bdea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a9f      	ldr	r2, [pc, #636]	; (800c070 <UART_SetConfig+0x2dc>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d004      	beq.n	800be00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	6a1b      	ldr	r3, [r3, #32]
 800bdfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdfc:	4313      	orrs	r3, r2
 800bdfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	689b      	ldr	r3, [r3, #8]
 800be06:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800be0a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800be0e:	697a      	ldr	r2, [r7, #20]
 800be10:	6812      	ldr	r2, [r2, #0]
 800be12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be14:	430b      	orrs	r3, r1
 800be16:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be1e:	f023 010f 	bic.w	r1, r3, #15
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	430a      	orrs	r2, r1
 800be2c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4a90      	ldr	r2, [pc, #576]	; (800c074 <UART_SetConfig+0x2e0>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d125      	bne.n	800be84 <UART_SetConfig+0xf0>
 800be38:	4b8f      	ldr	r3, [pc, #572]	; (800c078 <UART_SetConfig+0x2e4>)
 800be3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be3e:	f003 0303 	and.w	r3, r3, #3
 800be42:	2b03      	cmp	r3, #3
 800be44:	d81a      	bhi.n	800be7c <UART_SetConfig+0xe8>
 800be46:	a201      	add	r2, pc, #4	; (adr r2, 800be4c <UART_SetConfig+0xb8>)
 800be48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be4c:	0800be5d 	.word	0x0800be5d
 800be50:	0800be6d 	.word	0x0800be6d
 800be54:	0800be65 	.word	0x0800be65
 800be58:	0800be75 	.word	0x0800be75
 800be5c:	2301      	movs	r3, #1
 800be5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be62:	e116      	b.n	800c092 <UART_SetConfig+0x2fe>
 800be64:	2302      	movs	r3, #2
 800be66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be6a:	e112      	b.n	800c092 <UART_SetConfig+0x2fe>
 800be6c:	2304      	movs	r3, #4
 800be6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be72:	e10e      	b.n	800c092 <UART_SetConfig+0x2fe>
 800be74:	2308      	movs	r3, #8
 800be76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be7a:	e10a      	b.n	800c092 <UART_SetConfig+0x2fe>
 800be7c:	2310      	movs	r3, #16
 800be7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be82:	e106      	b.n	800c092 <UART_SetConfig+0x2fe>
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	4a7c      	ldr	r2, [pc, #496]	; (800c07c <UART_SetConfig+0x2e8>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d138      	bne.n	800bf00 <UART_SetConfig+0x16c>
 800be8e:	4b7a      	ldr	r3, [pc, #488]	; (800c078 <UART_SetConfig+0x2e4>)
 800be90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be94:	f003 030c 	and.w	r3, r3, #12
 800be98:	2b0c      	cmp	r3, #12
 800be9a:	d82d      	bhi.n	800bef8 <UART_SetConfig+0x164>
 800be9c:	a201      	add	r2, pc, #4	; (adr r2, 800bea4 <UART_SetConfig+0x110>)
 800be9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea2:	bf00      	nop
 800bea4:	0800bed9 	.word	0x0800bed9
 800bea8:	0800bef9 	.word	0x0800bef9
 800beac:	0800bef9 	.word	0x0800bef9
 800beb0:	0800bef9 	.word	0x0800bef9
 800beb4:	0800bee9 	.word	0x0800bee9
 800beb8:	0800bef9 	.word	0x0800bef9
 800bebc:	0800bef9 	.word	0x0800bef9
 800bec0:	0800bef9 	.word	0x0800bef9
 800bec4:	0800bee1 	.word	0x0800bee1
 800bec8:	0800bef9 	.word	0x0800bef9
 800becc:	0800bef9 	.word	0x0800bef9
 800bed0:	0800bef9 	.word	0x0800bef9
 800bed4:	0800bef1 	.word	0x0800bef1
 800bed8:	2300      	movs	r3, #0
 800beda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bede:	e0d8      	b.n	800c092 <UART_SetConfig+0x2fe>
 800bee0:	2302      	movs	r3, #2
 800bee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bee6:	e0d4      	b.n	800c092 <UART_SetConfig+0x2fe>
 800bee8:	2304      	movs	r3, #4
 800beea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800beee:	e0d0      	b.n	800c092 <UART_SetConfig+0x2fe>
 800bef0:	2308      	movs	r3, #8
 800bef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bef6:	e0cc      	b.n	800c092 <UART_SetConfig+0x2fe>
 800bef8:	2310      	movs	r3, #16
 800befa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800befe:	e0c8      	b.n	800c092 <UART_SetConfig+0x2fe>
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a5e      	ldr	r2, [pc, #376]	; (800c080 <UART_SetConfig+0x2ec>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d125      	bne.n	800bf56 <UART_SetConfig+0x1c2>
 800bf0a:	4b5b      	ldr	r3, [pc, #364]	; (800c078 <UART_SetConfig+0x2e4>)
 800bf0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bf14:	2b30      	cmp	r3, #48	; 0x30
 800bf16:	d016      	beq.n	800bf46 <UART_SetConfig+0x1b2>
 800bf18:	2b30      	cmp	r3, #48	; 0x30
 800bf1a:	d818      	bhi.n	800bf4e <UART_SetConfig+0x1ba>
 800bf1c:	2b20      	cmp	r3, #32
 800bf1e:	d00a      	beq.n	800bf36 <UART_SetConfig+0x1a2>
 800bf20:	2b20      	cmp	r3, #32
 800bf22:	d814      	bhi.n	800bf4e <UART_SetConfig+0x1ba>
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d002      	beq.n	800bf2e <UART_SetConfig+0x19a>
 800bf28:	2b10      	cmp	r3, #16
 800bf2a:	d008      	beq.n	800bf3e <UART_SetConfig+0x1aa>
 800bf2c:	e00f      	b.n	800bf4e <UART_SetConfig+0x1ba>
 800bf2e:	2300      	movs	r3, #0
 800bf30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf34:	e0ad      	b.n	800c092 <UART_SetConfig+0x2fe>
 800bf36:	2302      	movs	r3, #2
 800bf38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf3c:	e0a9      	b.n	800c092 <UART_SetConfig+0x2fe>
 800bf3e:	2304      	movs	r3, #4
 800bf40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf44:	e0a5      	b.n	800c092 <UART_SetConfig+0x2fe>
 800bf46:	2308      	movs	r3, #8
 800bf48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf4c:	e0a1      	b.n	800c092 <UART_SetConfig+0x2fe>
 800bf4e:	2310      	movs	r3, #16
 800bf50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf54:	e09d      	b.n	800c092 <UART_SetConfig+0x2fe>
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4a4a      	ldr	r2, [pc, #296]	; (800c084 <UART_SetConfig+0x2f0>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d125      	bne.n	800bfac <UART_SetConfig+0x218>
 800bf60:	4b45      	ldr	r3, [pc, #276]	; (800c078 <UART_SetConfig+0x2e4>)
 800bf62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bf6a:	2bc0      	cmp	r3, #192	; 0xc0
 800bf6c:	d016      	beq.n	800bf9c <UART_SetConfig+0x208>
 800bf6e:	2bc0      	cmp	r3, #192	; 0xc0
 800bf70:	d818      	bhi.n	800bfa4 <UART_SetConfig+0x210>
 800bf72:	2b80      	cmp	r3, #128	; 0x80
 800bf74:	d00a      	beq.n	800bf8c <UART_SetConfig+0x1f8>
 800bf76:	2b80      	cmp	r3, #128	; 0x80
 800bf78:	d814      	bhi.n	800bfa4 <UART_SetConfig+0x210>
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d002      	beq.n	800bf84 <UART_SetConfig+0x1f0>
 800bf7e:	2b40      	cmp	r3, #64	; 0x40
 800bf80:	d008      	beq.n	800bf94 <UART_SetConfig+0x200>
 800bf82:	e00f      	b.n	800bfa4 <UART_SetConfig+0x210>
 800bf84:	2300      	movs	r3, #0
 800bf86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf8a:	e082      	b.n	800c092 <UART_SetConfig+0x2fe>
 800bf8c:	2302      	movs	r3, #2
 800bf8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf92:	e07e      	b.n	800c092 <UART_SetConfig+0x2fe>
 800bf94:	2304      	movs	r3, #4
 800bf96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf9a:	e07a      	b.n	800c092 <UART_SetConfig+0x2fe>
 800bf9c:	2308      	movs	r3, #8
 800bf9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bfa2:	e076      	b.n	800c092 <UART_SetConfig+0x2fe>
 800bfa4:	2310      	movs	r3, #16
 800bfa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bfaa:	e072      	b.n	800c092 <UART_SetConfig+0x2fe>
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4a35      	ldr	r2, [pc, #212]	; (800c088 <UART_SetConfig+0x2f4>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d12a      	bne.n	800c00c <UART_SetConfig+0x278>
 800bfb6:	4b30      	ldr	r3, [pc, #192]	; (800c078 <UART_SetConfig+0x2e4>)
 800bfb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfc4:	d01a      	beq.n	800bffc <UART_SetConfig+0x268>
 800bfc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfca:	d81b      	bhi.n	800c004 <UART_SetConfig+0x270>
 800bfcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfd0:	d00c      	beq.n	800bfec <UART_SetConfig+0x258>
 800bfd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfd6:	d815      	bhi.n	800c004 <UART_SetConfig+0x270>
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d003      	beq.n	800bfe4 <UART_SetConfig+0x250>
 800bfdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfe0:	d008      	beq.n	800bff4 <UART_SetConfig+0x260>
 800bfe2:	e00f      	b.n	800c004 <UART_SetConfig+0x270>
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bfea:	e052      	b.n	800c092 <UART_SetConfig+0x2fe>
 800bfec:	2302      	movs	r3, #2
 800bfee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bff2:	e04e      	b.n	800c092 <UART_SetConfig+0x2fe>
 800bff4:	2304      	movs	r3, #4
 800bff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bffa:	e04a      	b.n	800c092 <UART_SetConfig+0x2fe>
 800bffc:	2308      	movs	r3, #8
 800bffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c002:	e046      	b.n	800c092 <UART_SetConfig+0x2fe>
 800c004:	2310      	movs	r3, #16
 800c006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c00a:	e042      	b.n	800c092 <UART_SetConfig+0x2fe>
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4a17      	ldr	r2, [pc, #92]	; (800c070 <UART_SetConfig+0x2dc>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d13a      	bne.n	800c08c <UART_SetConfig+0x2f8>
 800c016:	4b18      	ldr	r3, [pc, #96]	; (800c078 <UART_SetConfig+0x2e4>)
 800c018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c01c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c020:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c024:	d01a      	beq.n	800c05c <UART_SetConfig+0x2c8>
 800c026:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c02a:	d81b      	bhi.n	800c064 <UART_SetConfig+0x2d0>
 800c02c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c030:	d00c      	beq.n	800c04c <UART_SetConfig+0x2b8>
 800c032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c036:	d815      	bhi.n	800c064 <UART_SetConfig+0x2d0>
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d003      	beq.n	800c044 <UART_SetConfig+0x2b0>
 800c03c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c040:	d008      	beq.n	800c054 <UART_SetConfig+0x2c0>
 800c042:	e00f      	b.n	800c064 <UART_SetConfig+0x2d0>
 800c044:	2300      	movs	r3, #0
 800c046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c04a:	e022      	b.n	800c092 <UART_SetConfig+0x2fe>
 800c04c:	2302      	movs	r3, #2
 800c04e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c052:	e01e      	b.n	800c092 <UART_SetConfig+0x2fe>
 800c054:	2304      	movs	r3, #4
 800c056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c05a:	e01a      	b.n	800c092 <UART_SetConfig+0x2fe>
 800c05c:	2308      	movs	r3, #8
 800c05e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c062:	e016      	b.n	800c092 <UART_SetConfig+0x2fe>
 800c064:	2310      	movs	r3, #16
 800c066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c06a:	e012      	b.n	800c092 <UART_SetConfig+0x2fe>
 800c06c:	cfff69f3 	.word	0xcfff69f3
 800c070:	40008000 	.word	0x40008000
 800c074:	40013800 	.word	0x40013800
 800c078:	40021000 	.word	0x40021000
 800c07c:	40004400 	.word	0x40004400
 800c080:	40004800 	.word	0x40004800
 800c084:	40004c00 	.word	0x40004c00
 800c088:	40005000 	.word	0x40005000
 800c08c:	2310      	movs	r3, #16
 800c08e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4aae      	ldr	r2, [pc, #696]	; (800c350 <UART_SetConfig+0x5bc>)
 800c098:	4293      	cmp	r3, r2
 800c09a:	f040 8097 	bne.w	800c1cc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c09e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c0a2:	2b08      	cmp	r3, #8
 800c0a4:	d823      	bhi.n	800c0ee <UART_SetConfig+0x35a>
 800c0a6:	a201      	add	r2, pc, #4	; (adr r2, 800c0ac <UART_SetConfig+0x318>)
 800c0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ac:	0800c0d1 	.word	0x0800c0d1
 800c0b0:	0800c0ef 	.word	0x0800c0ef
 800c0b4:	0800c0d9 	.word	0x0800c0d9
 800c0b8:	0800c0ef 	.word	0x0800c0ef
 800c0bc:	0800c0df 	.word	0x0800c0df
 800c0c0:	0800c0ef 	.word	0x0800c0ef
 800c0c4:	0800c0ef 	.word	0x0800c0ef
 800c0c8:	0800c0ef 	.word	0x0800c0ef
 800c0cc:	0800c0e7 	.word	0x0800c0e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c0d0:	f7f9 fd00 	bl	8005ad4 <HAL_RCC_GetPCLK1Freq>
 800c0d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c0d6:	e010      	b.n	800c0fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c0d8:	4b9e      	ldr	r3, [pc, #632]	; (800c354 <UART_SetConfig+0x5c0>)
 800c0da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c0dc:	e00d      	b.n	800c0fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c0de:	f7f9 fc61 	bl	80059a4 <HAL_RCC_GetSysClockFreq>
 800c0e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c0e4:	e009      	b.n	800c0fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c0ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c0ec:	e005      	b.n	800c0fa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c0f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	f000 8130 	beq.w	800c362 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c106:	4a94      	ldr	r2, [pc, #592]	; (800c358 <UART_SetConfig+0x5c4>)
 800c108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c10c:	461a      	mov	r2, r3
 800c10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c110:	fbb3 f3f2 	udiv	r3, r3, r2
 800c114:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	685a      	ldr	r2, [r3, #4]
 800c11a:	4613      	mov	r3, r2
 800c11c:	005b      	lsls	r3, r3, #1
 800c11e:	4413      	add	r3, r2
 800c120:	69ba      	ldr	r2, [r7, #24]
 800c122:	429a      	cmp	r2, r3
 800c124:	d305      	bcc.n	800c132 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c12c:	69ba      	ldr	r2, [r7, #24]
 800c12e:	429a      	cmp	r2, r3
 800c130:	d903      	bls.n	800c13a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c132:	2301      	movs	r3, #1
 800c134:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c138:	e113      	b.n	800c362 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13c:	2200      	movs	r2, #0
 800c13e:	60bb      	str	r3, [r7, #8]
 800c140:	60fa      	str	r2, [r7, #12]
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c146:	4a84      	ldr	r2, [pc, #528]	; (800c358 <UART_SetConfig+0x5c4>)
 800c148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	2200      	movs	r2, #0
 800c150:	603b      	str	r3, [r7, #0]
 800c152:	607a      	str	r2, [r7, #4]
 800c154:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c158:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c15c:	f7f4 fd3c 	bl	8000bd8 <__aeabi_uldivmod>
 800c160:	4602      	mov	r2, r0
 800c162:	460b      	mov	r3, r1
 800c164:	4610      	mov	r0, r2
 800c166:	4619      	mov	r1, r3
 800c168:	f04f 0200 	mov.w	r2, #0
 800c16c:	f04f 0300 	mov.w	r3, #0
 800c170:	020b      	lsls	r3, r1, #8
 800c172:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c176:	0202      	lsls	r2, r0, #8
 800c178:	6979      	ldr	r1, [r7, #20]
 800c17a:	6849      	ldr	r1, [r1, #4]
 800c17c:	0849      	lsrs	r1, r1, #1
 800c17e:	2000      	movs	r0, #0
 800c180:	460c      	mov	r4, r1
 800c182:	4605      	mov	r5, r0
 800c184:	eb12 0804 	adds.w	r8, r2, r4
 800c188:	eb43 0905 	adc.w	r9, r3, r5
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	2200      	movs	r2, #0
 800c192:	469a      	mov	sl, r3
 800c194:	4693      	mov	fp, r2
 800c196:	4652      	mov	r2, sl
 800c198:	465b      	mov	r3, fp
 800c19a:	4640      	mov	r0, r8
 800c19c:	4649      	mov	r1, r9
 800c19e:	f7f4 fd1b 	bl	8000bd8 <__aeabi_uldivmod>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	4613      	mov	r3, r2
 800c1a8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c1aa:	6a3b      	ldr	r3, [r7, #32]
 800c1ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c1b0:	d308      	bcc.n	800c1c4 <UART_SetConfig+0x430>
 800c1b2:	6a3b      	ldr	r3, [r7, #32]
 800c1b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1b8:	d204      	bcs.n	800c1c4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	6a3a      	ldr	r2, [r7, #32]
 800c1c0:	60da      	str	r2, [r3, #12]
 800c1c2:	e0ce      	b.n	800c362 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c1ca:	e0ca      	b.n	800c362 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	69db      	ldr	r3, [r3, #28]
 800c1d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1d4:	d166      	bne.n	800c2a4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c1d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c1da:	2b08      	cmp	r3, #8
 800c1dc:	d827      	bhi.n	800c22e <UART_SetConfig+0x49a>
 800c1de:	a201      	add	r2, pc, #4	; (adr r2, 800c1e4 <UART_SetConfig+0x450>)
 800c1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1e4:	0800c209 	.word	0x0800c209
 800c1e8:	0800c211 	.word	0x0800c211
 800c1ec:	0800c219 	.word	0x0800c219
 800c1f0:	0800c22f 	.word	0x0800c22f
 800c1f4:	0800c21f 	.word	0x0800c21f
 800c1f8:	0800c22f 	.word	0x0800c22f
 800c1fc:	0800c22f 	.word	0x0800c22f
 800c200:	0800c22f 	.word	0x0800c22f
 800c204:	0800c227 	.word	0x0800c227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c208:	f7f9 fc64 	bl	8005ad4 <HAL_RCC_GetPCLK1Freq>
 800c20c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c20e:	e014      	b.n	800c23a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c210:	f7f9 fc76 	bl	8005b00 <HAL_RCC_GetPCLK2Freq>
 800c214:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c216:	e010      	b.n	800c23a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c218:	4b4e      	ldr	r3, [pc, #312]	; (800c354 <UART_SetConfig+0x5c0>)
 800c21a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c21c:	e00d      	b.n	800c23a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c21e:	f7f9 fbc1 	bl	80059a4 <HAL_RCC_GetSysClockFreq>
 800c222:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c224:	e009      	b.n	800c23a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c22a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c22c:	e005      	b.n	800c23a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c22e:	2300      	movs	r3, #0
 800c230:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c232:	2301      	movs	r3, #1
 800c234:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c238:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f000 8090 	beq.w	800c362 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c246:	4a44      	ldr	r2, [pc, #272]	; (800c358 <UART_SetConfig+0x5c4>)
 800c248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c24c:	461a      	mov	r2, r3
 800c24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c250:	fbb3 f3f2 	udiv	r3, r3, r2
 800c254:	005a      	lsls	r2, r3, #1
 800c256:	697b      	ldr	r3, [r7, #20]
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	085b      	lsrs	r3, r3, #1
 800c25c:	441a      	add	r2, r3
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	fbb2 f3f3 	udiv	r3, r2, r3
 800c266:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c268:	6a3b      	ldr	r3, [r7, #32]
 800c26a:	2b0f      	cmp	r3, #15
 800c26c:	d916      	bls.n	800c29c <UART_SetConfig+0x508>
 800c26e:	6a3b      	ldr	r3, [r7, #32]
 800c270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c274:	d212      	bcs.n	800c29c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c276:	6a3b      	ldr	r3, [r7, #32]
 800c278:	b29b      	uxth	r3, r3
 800c27a:	f023 030f 	bic.w	r3, r3, #15
 800c27e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c280:	6a3b      	ldr	r3, [r7, #32]
 800c282:	085b      	lsrs	r3, r3, #1
 800c284:	b29b      	uxth	r3, r3
 800c286:	f003 0307 	and.w	r3, r3, #7
 800c28a:	b29a      	uxth	r2, r3
 800c28c:	8bfb      	ldrh	r3, [r7, #30]
 800c28e:	4313      	orrs	r3, r2
 800c290:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	8bfa      	ldrh	r2, [r7, #30]
 800c298:	60da      	str	r2, [r3, #12]
 800c29a:	e062      	b.n	800c362 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c29c:	2301      	movs	r3, #1
 800c29e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c2a2:	e05e      	b.n	800c362 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c2a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c2a8:	2b08      	cmp	r3, #8
 800c2aa:	d828      	bhi.n	800c2fe <UART_SetConfig+0x56a>
 800c2ac:	a201      	add	r2, pc, #4	; (adr r2, 800c2b4 <UART_SetConfig+0x520>)
 800c2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2b2:	bf00      	nop
 800c2b4:	0800c2d9 	.word	0x0800c2d9
 800c2b8:	0800c2e1 	.word	0x0800c2e1
 800c2bc:	0800c2e9 	.word	0x0800c2e9
 800c2c0:	0800c2ff 	.word	0x0800c2ff
 800c2c4:	0800c2ef 	.word	0x0800c2ef
 800c2c8:	0800c2ff 	.word	0x0800c2ff
 800c2cc:	0800c2ff 	.word	0x0800c2ff
 800c2d0:	0800c2ff 	.word	0x0800c2ff
 800c2d4:	0800c2f7 	.word	0x0800c2f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c2d8:	f7f9 fbfc 	bl	8005ad4 <HAL_RCC_GetPCLK1Freq>
 800c2dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c2de:	e014      	b.n	800c30a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c2e0:	f7f9 fc0e 	bl	8005b00 <HAL_RCC_GetPCLK2Freq>
 800c2e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c2e6:	e010      	b.n	800c30a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c2e8:	4b1a      	ldr	r3, [pc, #104]	; (800c354 <UART_SetConfig+0x5c0>)
 800c2ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c2ec:	e00d      	b.n	800c30a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c2ee:	f7f9 fb59 	bl	80059a4 <HAL_RCC_GetSysClockFreq>
 800c2f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c2f4:	e009      	b.n	800c30a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c2f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c2fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c2fc:	e005      	b.n	800c30a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c2fe:	2300      	movs	r3, #0
 800c300:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c302:	2301      	movs	r3, #1
 800c304:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c308:	bf00      	nop
    }

    if (pclk != 0U)
 800c30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d028      	beq.n	800c362 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c314:	4a10      	ldr	r2, [pc, #64]	; (800c358 <UART_SetConfig+0x5c4>)
 800c316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c31a:	461a      	mov	r2, r3
 800c31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31e:	fbb3 f2f2 	udiv	r2, r3, r2
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	685b      	ldr	r3, [r3, #4]
 800c326:	085b      	lsrs	r3, r3, #1
 800c328:	441a      	add	r2, r3
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c332:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c334:	6a3b      	ldr	r3, [r7, #32]
 800c336:	2b0f      	cmp	r3, #15
 800c338:	d910      	bls.n	800c35c <UART_SetConfig+0x5c8>
 800c33a:	6a3b      	ldr	r3, [r7, #32]
 800c33c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c340:	d20c      	bcs.n	800c35c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c342:	6a3b      	ldr	r3, [r7, #32]
 800c344:	b29a      	uxth	r2, r3
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	60da      	str	r2, [r3, #12]
 800c34c:	e009      	b.n	800c362 <UART_SetConfig+0x5ce>
 800c34e:	bf00      	nop
 800c350:	40008000 	.word	0x40008000
 800c354:	00f42400 	.word	0x00f42400
 800c358:	08014280 	.word	0x08014280
      }
      else
      {
        ret = HAL_ERROR;
 800c35c:	2301      	movs	r3, #1
 800c35e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	2201      	movs	r2, #1
 800c366:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	2201      	movs	r2, #1
 800c36e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	2200      	movs	r2, #0
 800c376:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	2200      	movs	r2, #0
 800c37c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c37e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c382:	4618      	mov	r0, r3
 800c384:	3730      	adds	r7, #48	; 0x30
 800c386:	46bd      	mov	sp, r7
 800c388:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c38c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b083      	sub	sp, #12
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c398:	f003 0301 	and.w	r3, r3, #1
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d00a      	beq.n	800c3b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	430a      	orrs	r2, r1
 800c3b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ba:	f003 0302 	and.w	r3, r3, #2
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d00a      	beq.n	800c3d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	685b      	ldr	r3, [r3, #4]
 800c3c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	430a      	orrs	r2, r1
 800c3d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3dc:	f003 0304 	and.w	r3, r3, #4
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d00a      	beq.n	800c3fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	685b      	ldr	r3, [r3, #4]
 800c3ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	430a      	orrs	r2, r1
 800c3f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3fe:	f003 0308 	and.w	r3, r3, #8
 800c402:	2b00      	cmp	r3, #0
 800c404:	d00a      	beq.n	800c41c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	430a      	orrs	r2, r1
 800c41a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c420:	f003 0310 	and.w	r3, r3, #16
 800c424:	2b00      	cmp	r3, #0
 800c426:	d00a      	beq.n	800c43e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	689b      	ldr	r3, [r3, #8]
 800c42e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	430a      	orrs	r2, r1
 800c43c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c442:	f003 0320 	and.w	r3, r3, #32
 800c446:	2b00      	cmp	r3, #0
 800c448:	d00a      	beq.n	800c460 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	689b      	ldr	r3, [r3, #8]
 800c450:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	430a      	orrs	r2, r1
 800c45e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d01a      	beq.n	800c4a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	430a      	orrs	r2, r1
 800c480:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c486:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c48a:	d10a      	bne.n	800c4a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	430a      	orrs	r2, r1
 800c4a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00a      	beq.n	800c4c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	430a      	orrs	r2, r1
 800c4c2:	605a      	str	r2, [r3, #4]
  }
}
 800c4c4:	bf00      	nop
 800c4c6:	370c      	adds	r7, #12
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr

0800c4d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b086      	sub	sp, #24
 800c4d4:	af02      	add	r7, sp, #8
 800c4d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c4e0:	f7f6 faec 	bl	8002abc <HAL_GetTick>
 800c4e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f003 0308 	and.w	r3, r3, #8
 800c4f0:	2b08      	cmp	r3, #8
 800c4f2:	d10e      	bne.n	800c512 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c4f8:	9300      	str	r3, [sp, #0]
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 f82f 	bl	800c566 <UART_WaitOnFlagUntilTimeout>
 800c508:	4603      	mov	r3, r0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d001      	beq.n	800c512 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c50e:	2303      	movs	r3, #3
 800c510:	e025      	b.n	800c55e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f003 0304 	and.w	r3, r3, #4
 800c51c:	2b04      	cmp	r3, #4
 800c51e:	d10e      	bne.n	800c53e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c520:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c524:	9300      	str	r3, [sp, #0]
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	2200      	movs	r2, #0
 800c52a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 f819 	bl	800c566 <UART_WaitOnFlagUntilTimeout>
 800c534:	4603      	mov	r3, r0
 800c536:	2b00      	cmp	r3, #0
 800c538:	d001      	beq.n	800c53e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c53a:	2303      	movs	r3, #3
 800c53c:	e00f      	b.n	800c55e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2220      	movs	r2, #32
 800c542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2220      	movs	r2, #32
 800c54a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2200      	movs	r2, #0
 800c552:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2200      	movs	r2, #0
 800c558:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c55c:	2300      	movs	r3, #0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3710      	adds	r7, #16
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}

0800c566 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c566:	b580      	push	{r7, lr}
 800c568:	b09c      	sub	sp, #112	; 0x70
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	60f8      	str	r0, [r7, #12]
 800c56e:	60b9      	str	r1, [r7, #8]
 800c570:	603b      	str	r3, [r7, #0]
 800c572:	4613      	mov	r3, r2
 800c574:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c576:	e0a9      	b.n	800c6cc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c578:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c57a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c57e:	f000 80a5 	beq.w	800c6cc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c582:	f7f6 fa9b 	bl	8002abc <HAL_GetTick>
 800c586:	4602      	mov	r2, r0
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	1ad3      	subs	r3, r2, r3
 800c58c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c58e:	429a      	cmp	r2, r3
 800c590:	d302      	bcc.n	800c598 <UART_WaitOnFlagUntilTimeout+0x32>
 800c592:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c594:	2b00      	cmp	r3, #0
 800c596:	d140      	bne.n	800c61a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c59e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5a0:	e853 3f00 	ldrex	r3, [r3]
 800c5a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c5a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c5ac:	667b      	str	r3, [r7, #100]	; 0x64
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5b8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c5bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c5be:	e841 2300 	strex	r3, r2, [r1]
 800c5c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c5c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d1e6      	bne.n	800c598 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	3308      	adds	r3, #8
 800c5d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5d4:	e853 3f00 	ldrex	r3, [r3]
 800c5d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5dc:	f023 0301 	bic.w	r3, r3, #1
 800c5e0:	663b      	str	r3, [r7, #96]	; 0x60
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	3308      	adds	r3, #8
 800c5e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c5ea:	64ba      	str	r2, [r7, #72]	; 0x48
 800c5ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c5f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c5f2:	e841 2300 	strex	r3, r2, [r1]
 800c5f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c5f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d1e5      	bne.n	800c5ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	2220      	movs	r2, #32
 800c602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	2220      	movs	r2, #32
 800c60a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2200      	movs	r2, #0
 800c612:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c616:	2303      	movs	r3, #3
 800c618:	e069      	b.n	800c6ee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f003 0304 	and.w	r3, r3, #4
 800c624:	2b00      	cmp	r3, #0
 800c626:	d051      	beq.n	800c6cc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	69db      	ldr	r3, [r3, #28]
 800c62e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c636:	d149      	bne.n	800c6cc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c640:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c64a:	e853 3f00 	ldrex	r3, [r3]
 800c64e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c652:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c656:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	461a      	mov	r2, r3
 800c65e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c660:	637b      	str	r3, [r7, #52]	; 0x34
 800c662:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c664:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c666:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c668:	e841 2300 	strex	r3, r2, [r1]
 800c66c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c670:	2b00      	cmp	r3, #0
 800c672:	d1e6      	bne.n	800c642 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	3308      	adds	r3, #8
 800c67a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	e853 3f00 	ldrex	r3, [r3]
 800c682:	613b      	str	r3, [r7, #16]
   return(result);
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	f023 0301 	bic.w	r3, r3, #1
 800c68a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	3308      	adds	r3, #8
 800c692:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c694:	623a      	str	r2, [r7, #32]
 800c696:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c698:	69f9      	ldr	r1, [r7, #28]
 800c69a:	6a3a      	ldr	r2, [r7, #32]
 800c69c:	e841 2300 	strex	r3, r2, [r1]
 800c6a0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c6a2:	69bb      	ldr	r3, [r7, #24]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d1e5      	bne.n	800c674 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2220      	movs	r2, #32
 800c6ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	2220      	movs	r2, #32
 800c6b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2220      	movs	r2, #32
 800c6bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c6c8:	2303      	movs	r3, #3
 800c6ca:	e010      	b.n	800c6ee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	69da      	ldr	r2, [r3, #28]
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	4013      	ands	r3, r2
 800c6d6:	68ba      	ldr	r2, [r7, #8]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	bf0c      	ite	eq
 800c6dc:	2301      	moveq	r3, #1
 800c6de:	2300      	movne	r3, #0
 800c6e0:	b2db      	uxtb	r3, r3
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	79fb      	ldrb	r3, [r7, #7]
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	f43f af46 	beq.w	800c578 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c6ec:	2300      	movs	r3, #0
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3770      	adds	r7, #112	; 0x70
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}

0800c6f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c6f6:	b480      	push	{r7}
 800c6f8:	b095      	sub	sp, #84	; 0x54
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c706:	e853 3f00 	ldrex	r3, [r3]
 800c70a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c70e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c712:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	461a      	mov	r2, r3
 800c71a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c71c:	643b      	str	r3, [r7, #64]	; 0x40
 800c71e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c720:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c722:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c724:	e841 2300 	strex	r3, r2, [r1]
 800c728:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d1e6      	bne.n	800c6fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	3308      	adds	r3, #8
 800c736:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c738:	6a3b      	ldr	r3, [r7, #32]
 800c73a:	e853 3f00 	ldrex	r3, [r3]
 800c73e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c740:	69fb      	ldr	r3, [r7, #28]
 800c742:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c746:	f023 0301 	bic.w	r3, r3, #1
 800c74a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	3308      	adds	r3, #8
 800c752:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c754:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c756:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c758:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c75a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c75c:	e841 2300 	strex	r3, r2, [r1]
 800c760:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c764:	2b00      	cmp	r3, #0
 800c766:	d1e3      	bne.n	800c730 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d118      	bne.n	800c7a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	e853 3f00 	ldrex	r3, [r3]
 800c77c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	f023 0310 	bic.w	r3, r3, #16
 800c784:	647b      	str	r3, [r7, #68]	; 0x44
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	461a      	mov	r2, r3
 800c78c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c78e:	61bb      	str	r3, [r7, #24]
 800c790:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c792:	6979      	ldr	r1, [r7, #20]
 800c794:	69ba      	ldr	r2, [r7, #24]
 800c796:	e841 2300 	strex	r3, r2, [r1]
 800c79a:	613b      	str	r3, [r7, #16]
   return(result);
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d1e6      	bne.n	800c770 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2220      	movs	r2, #32
 800c7a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c7b6:	bf00      	nop
 800c7b8:	3754      	adds	r7, #84	; 0x54
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr

0800c7c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c7c2:	b580      	push	{r7, lr}
 800c7c4:	b084      	sub	sp, #16
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	f7ff fac1 	bl	800bd68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7e6:	bf00      	nop
 800c7e8:	3710      	adds	r7, #16
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}

0800c7ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c7ee:	b580      	push	{r7, lr}
 800c7f0:	b088      	sub	sp, #32
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	e853 3f00 	ldrex	r3, [r3]
 800c802:	60bb      	str	r3, [r7, #8]
   return(result);
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c80a:	61fb      	str	r3, [r7, #28]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	461a      	mov	r2, r3
 800c812:	69fb      	ldr	r3, [r7, #28]
 800c814:	61bb      	str	r3, [r7, #24]
 800c816:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c818:	6979      	ldr	r1, [r7, #20]
 800c81a:	69ba      	ldr	r2, [r7, #24]
 800c81c:	e841 2300 	strex	r3, r2, [r1]
 800c820:	613b      	str	r3, [r7, #16]
   return(result);
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d1e6      	bne.n	800c7f6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2220      	movs	r2, #32
 800c82c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2200      	movs	r2, #0
 800c834:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f7ff fa8c 	bl	800bd54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c83c:	bf00      	nop
 800c83e:	3720      	adds	r7, #32
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c844:	b480      	push	{r7}
 800c846:	b083      	sub	sp, #12
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c84c:	bf00      	nop
 800c84e:	370c      	adds	r7, #12
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr

0800c858 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c860:	bf00      	nop
 800c862:	370c      	adds	r7, #12
 800c864:	46bd      	mov	sp, r7
 800c866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86a:	4770      	bx	lr

0800c86c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b083      	sub	sp, #12
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c874:	bf00      	nop
 800c876:	370c      	adds	r7, #12
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr

0800c880 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c880:	b480      	push	{r7}
 800c882:	b085      	sub	sp, #20
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c88e:	2b01      	cmp	r3, #1
 800c890:	d101      	bne.n	800c896 <HAL_UARTEx_DisableFifoMode+0x16>
 800c892:	2302      	movs	r3, #2
 800c894:	e027      	b.n	800c8e6 <HAL_UARTEx_DisableFifoMode+0x66>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2201      	movs	r2, #1
 800c89a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2224      	movs	r2, #36	; 0x24
 800c8a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	681a      	ldr	r2, [r3, #0]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f022 0201 	bic.w	r2, r2, #1
 800c8bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c8c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	68fa      	ldr	r2, [r7, #12]
 800c8d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2220      	movs	r2, #32
 800c8d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c8e4:	2300      	movs	r3, #0
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3714      	adds	r7, #20
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f0:	4770      	bx	lr

0800c8f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c8f2:	b580      	push	{r7, lr}
 800c8f4:	b084      	sub	sp, #16
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	6078      	str	r0, [r7, #4]
 800c8fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c902:	2b01      	cmp	r3, #1
 800c904:	d101      	bne.n	800c90a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c906:	2302      	movs	r3, #2
 800c908:	e02d      	b.n	800c966 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2201      	movs	r2, #1
 800c90e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2224      	movs	r2, #36	; 0x24
 800c916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	681a      	ldr	r2, [r3, #0]
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f022 0201 	bic.w	r2, r2, #1
 800c930:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	689b      	ldr	r3, [r3, #8]
 800c938:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	683a      	ldr	r2, [r7, #0]
 800c942:	430a      	orrs	r2, r1
 800c944:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f000 f850 	bl	800c9ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	68fa      	ldr	r2, [r7, #12]
 800c952:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2220      	movs	r2, #32
 800c958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2200      	movs	r2, #0
 800c960:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c964:	2300      	movs	r3, #0
}
 800c966:	4618      	mov	r0, r3
 800c968:	3710      	adds	r7, #16
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}

0800c96e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c96e:	b580      	push	{r7, lr}
 800c970:	b084      	sub	sp, #16
 800c972:	af00      	add	r7, sp, #0
 800c974:	6078      	str	r0, [r7, #4]
 800c976:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c97e:	2b01      	cmp	r3, #1
 800c980:	d101      	bne.n	800c986 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c982:	2302      	movs	r3, #2
 800c984:	e02d      	b.n	800c9e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2201      	movs	r2, #1
 800c98a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2224      	movs	r2, #36	; 0x24
 800c992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	681a      	ldr	r2, [r3, #0]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f022 0201 	bic.w	r2, r2, #1
 800c9ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	689b      	ldr	r3, [r3, #8]
 800c9b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	683a      	ldr	r2, [r7, #0]
 800c9be:	430a      	orrs	r2, r1
 800c9c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f000 f812 	bl	800c9ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	68fa      	ldr	r2, [r7, #12]
 800c9ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2220      	movs	r2, #32
 800c9d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c9e0:	2300      	movs	r3, #0
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3710      	adds	r7, #16
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}
	...

0800c9ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b085      	sub	sp, #20
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d108      	bne.n	800ca0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2201      	movs	r2, #1
 800ca00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2201      	movs	r2, #1
 800ca08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ca0c:	e031      	b.n	800ca72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ca0e:	2308      	movs	r3, #8
 800ca10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ca12:	2308      	movs	r3, #8
 800ca14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	689b      	ldr	r3, [r3, #8]
 800ca1c:	0e5b      	lsrs	r3, r3, #25
 800ca1e:	b2db      	uxtb	r3, r3
 800ca20:	f003 0307 	and.w	r3, r3, #7
 800ca24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	689b      	ldr	r3, [r3, #8]
 800ca2c:	0f5b      	lsrs	r3, r3, #29
 800ca2e:	b2db      	uxtb	r3, r3
 800ca30:	f003 0307 	and.w	r3, r3, #7
 800ca34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca36:	7bbb      	ldrb	r3, [r7, #14]
 800ca38:	7b3a      	ldrb	r2, [r7, #12]
 800ca3a:	4911      	ldr	r1, [pc, #68]	; (800ca80 <UARTEx_SetNbDataToProcess+0x94>)
 800ca3c:	5c8a      	ldrb	r2, [r1, r2]
 800ca3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ca42:	7b3a      	ldrb	r2, [r7, #12]
 800ca44:	490f      	ldr	r1, [pc, #60]	; (800ca84 <UARTEx_SetNbDataToProcess+0x98>)
 800ca46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca48:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca4c:	b29a      	uxth	r2, r3
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca54:	7bfb      	ldrb	r3, [r7, #15]
 800ca56:	7b7a      	ldrb	r2, [r7, #13]
 800ca58:	4909      	ldr	r1, [pc, #36]	; (800ca80 <UARTEx_SetNbDataToProcess+0x94>)
 800ca5a:	5c8a      	ldrb	r2, [r1, r2]
 800ca5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ca60:	7b7a      	ldrb	r2, [r7, #13]
 800ca62:	4908      	ldr	r1, [pc, #32]	; (800ca84 <UARTEx_SetNbDataToProcess+0x98>)
 800ca64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca66:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca6a:	b29a      	uxth	r2, r3
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ca72:	bf00      	nop
 800ca74:	3714      	adds	r7, #20
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr
 800ca7e:	bf00      	nop
 800ca80:	08014298 	.word	0x08014298
 800ca84:	080142a0 	.word	0x080142a0

0800ca88 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ca88:	b084      	sub	sp, #16
 800ca8a:	b480      	push	{r7}
 800ca8c:	b085      	sub	sp, #20
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	6078      	str	r0, [r7, #4]
 800ca92:	f107 001c 	add.w	r0, r7, #28
 800ca96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800ca9e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800caa0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800caa2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800caa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800caa6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800caa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800caaa:	431a      	orrs	r2, r3
             Init.ClockDiv
 800caac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800caae:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800cab0:	68fa      	ldr	r2, [r7, #12]
 800cab2:	4313      	orrs	r3, r2
 800cab4:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	685a      	ldr	r2, [r3, #4]
 800caba:	4b07      	ldr	r3, [pc, #28]	; (800cad8 <SDMMC_Init+0x50>)
 800cabc:	4013      	ands	r3, r2
 800cabe:	68fa      	ldr	r2, [r7, #12]
 800cac0:	431a      	orrs	r2, r3
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cac6:	2300      	movs	r3, #0
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3714      	adds	r7, #20
 800cacc:	46bd      	mov	sp, r7
 800cace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad2:	b004      	add	sp, #16
 800cad4:	4770      	bx	lr
 800cad6:	bf00      	nop
 800cad8:	ffc02c00 	.word	0xffc02c00

0800cadc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800cadc:	b480      	push	{r7}
 800cade:	b083      	sub	sp, #12
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800caea:	4618      	mov	r0, r3
 800caec:	370c      	adds	r7, #12
 800caee:	46bd      	mov	sp, r7
 800caf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf4:	4770      	bx	lr

0800caf6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800caf6:	b480      	push	{r7}
 800caf8:	b083      	sub	sp, #12
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	6078      	str	r0, [r7, #4]
 800cafe:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	681a      	ldr	r2, [r3, #0]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cb0a:	2300      	movs	r3, #0
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	370c      	adds	r7, #12
 800cb10:	46bd      	mov	sp, r7
 800cb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb16:	4770      	bx	lr

0800cb18 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f043 0203 	orr.w	r2, r3, #3
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800cb2c:	2002      	movs	r0, #2
 800cb2e:	f7f5 ffd1 	bl	8002ad4 <HAL_Delay>

  return HAL_OK;
 800cb32:	2300      	movs	r3, #0
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3708      	adds	r7, #8
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b083      	sub	sp, #12
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f003 0303 	and.w	r3, r3, #3
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	370c      	adds	r7, #12
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr

0800cb58 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b085      	sub	sp, #20
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cb62:	2300      	movs	r3, #0
 800cb64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	681a      	ldr	r2, [r3, #0]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cb76:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800cb7c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800cb82:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cb84:	68fa      	ldr	r2, [r7, #12]
 800cb86:	4313      	orrs	r3, r2
 800cb88:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	68da      	ldr	r2, [r3, #12]
 800cb8e:	4b06      	ldr	r3, [pc, #24]	; (800cba8 <SDMMC_SendCommand+0x50>)
 800cb90:	4013      	ands	r3, r2
 800cb92:	68fa      	ldr	r2, [r7, #12]
 800cb94:	431a      	orrs	r2, r3
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cb9a:	2300      	movs	r3, #0
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3714      	adds	r7, #20
 800cba0:	46bd      	mov	sp, r7
 800cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba6:	4770      	bx	lr
 800cba8:	fffee0c0 	.word	0xfffee0c0

0800cbac <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b083      	sub	sp, #12
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	691b      	ldr	r3, [r3, #16]
 800cbb8:	b2db      	uxtb	r3, r3
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	370c      	adds	r7, #12
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc4:	4770      	bx	lr

0800cbc6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800cbc6:	b480      	push	{r7}
 800cbc8:	b085      	sub	sp, #20
 800cbca:	af00      	add	r7, sp, #0
 800cbcc:	6078      	str	r0, [r7, #4]
 800cbce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	3314      	adds	r3, #20
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	4413      	add	r3, r2
 800cbda:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	681b      	ldr	r3, [r3, #0]
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3714      	adds	r7, #20
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr

0800cbec <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b085      	sub	sp, #20
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	681a      	ldr	r2, [r3, #0]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	685a      	ldr	r2, [r3, #4]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cc12:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cc18:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cc1e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cc20:	68fa      	ldr	r2, [r7, #12]
 800cc22:	4313      	orrs	r3, r2
 800cc24:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	431a      	orrs	r2, r3
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800cc36:	2300      	movs	r3, #0

}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3714      	adds	r7, #20
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr

0800cc44 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b088      	sub	sp, #32
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cc52:	2310      	movs	r3, #16
 800cc54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc56:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc66:	f107 0308 	add.w	r3, r7, #8
 800cc6a:	4619      	mov	r1, r3
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f7ff ff73 	bl	800cb58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800cc72:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc76:	2110      	movs	r1, #16
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f000 fa7b 	bl	800d174 <SDMMC_GetCmdResp1>
 800cc7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc80:	69fb      	ldr	r3, [r7, #28]
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3720      	adds	r7, #32
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}

0800cc8a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cc8a:	b580      	push	{r7, lr}
 800cc8c:	b088      	sub	sp, #32
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	6078      	str	r0, [r7, #4]
 800cc92:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cc98:	2311      	movs	r3, #17
 800cc9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cca0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cca2:	2300      	movs	r3, #0
 800cca4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ccaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccac:	f107 0308 	add.w	r3, r7, #8
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f7ff ff50 	bl	800cb58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ccb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccbc:	2111      	movs	r1, #17
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 fa58 	bl	800d174 <SDMMC_GetCmdResp1>
 800ccc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccc6:	69fb      	ldr	r3, [r7, #28]
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3720      	adds	r7, #32
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b088      	sub	sp, #32
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ccde:	2312      	movs	r3, #18
 800cce0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cce2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cce6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cce8:	2300      	movs	r3, #0
 800ccea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ccf0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccf2:	f107 0308 	add.w	r3, r7, #8
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f7ff ff2d 	bl	800cb58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ccfe:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd02:	2112      	movs	r1, #18
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 fa35 	bl	800d174 <SDMMC_GetCmdResp1>
 800cd0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd0c:	69fb      	ldr	r3, [r7, #28]
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3720      	adds	r7, #32
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}

0800cd16 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cd16:	b580      	push	{r7, lr}
 800cd18:	b088      	sub	sp, #32
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
 800cd1e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cd24:	2318      	movs	r3, #24
 800cd26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd28:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd38:	f107 0308 	add.w	r3, r7, #8
 800cd3c:	4619      	mov	r1, r3
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f7ff ff0a 	bl	800cb58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cd44:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd48:	2118      	movs	r1, #24
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f000 fa12 	bl	800d174 <SDMMC_GetCmdResp1>
 800cd50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd52:	69fb      	ldr	r3, [r7, #28]
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3720      	adds	r7, #32
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b088      	sub	sp, #32
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cd6a:	2319      	movs	r3, #25
 800cd6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd74:	2300      	movs	r3, #0
 800cd76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd7e:	f107 0308 	add.w	r3, r7, #8
 800cd82:	4619      	mov	r1, r3
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f7ff fee7 	bl	800cb58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cd8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd8e:	2119      	movs	r1, #25
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f000 f9ef 	bl	800d174 <SDMMC_GetCmdResp1>
 800cd96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd98:	69fb      	ldr	r3, [r7, #28]
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3720      	adds	r7, #32
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
	...

0800cda4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b088      	sub	sp, #32
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cdac:	2300      	movs	r3, #0
 800cdae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cdb0:	230c      	movs	r3, #12
 800cdb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cdb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cdb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cdc2:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	68db      	ldr	r3, [r3, #12]
 800cdc8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	68db      	ldr	r3, [r3, #12]
 800cdd4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cddc:	f107 0308 	add.w	r3, r7, #8
 800cde0:	4619      	mov	r1, r3
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f7ff feb8 	bl	800cb58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800cde8:	4a08      	ldr	r2, [pc, #32]	; (800ce0c <SDMMC_CmdStopTransfer+0x68>)
 800cdea:	210c      	movs	r1, #12
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f000 f9c1 	bl	800d174 <SDMMC_GetCmdResp1>
 800cdf2:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	68db      	ldr	r3, [r3, #12]
 800cdf8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800ce00:	69fb      	ldr	r3, [r7, #28]
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3720      	adds	r7, #32
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
 800ce0a:	bf00      	nop
 800ce0c:	05f5e100 	.word	0x05f5e100

0800ce10 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b08a      	sub	sp, #40	; 0x28
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ce20:	2307      	movs	r3, #7
 800ce22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce24:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce28:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce32:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce34:	f107 0310 	add.w	r3, r7, #16
 800ce38:	4619      	mov	r1, r3
 800ce3a:	68f8      	ldr	r0, [r7, #12]
 800ce3c:	f7ff fe8c 	bl	800cb58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ce40:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce44:	2107      	movs	r1, #7
 800ce46:	68f8      	ldr	r0, [r7, #12]
 800ce48:	f000 f994 	bl	800d174 <SDMMC_GetCmdResp1>
 800ce4c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ce4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3728      	adds	r7, #40	; 0x28
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b088      	sub	sp, #32
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ce60:	2300      	movs	r3, #0
 800ce62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ce64:	2300      	movs	r3, #0
 800ce66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce76:	f107 0308 	add.w	r3, r7, #8
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f7ff fe6b 	bl	800cb58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f000 fbb8 	bl	800d5f8 <SDMMC_GetCmdError>
 800ce88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce8a:	69fb      	ldr	r3, [r7, #28]
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3720      	adds	r7, #32
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b088      	sub	sp, #32
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ce9c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800cea0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cea2:	2308      	movs	r3, #8
 800cea4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ceaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ceac:	2300      	movs	r3, #0
 800ceae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ceb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ceb4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ceb6:	f107 0308 	add.w	r3, r7, #8
 800ceba:	4619      	mov	r1, r3
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f7ff fe4b 	bl	800cb58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f000 fb4a 	bl	800d55c <SDMMC_GetCmdResp7>
 800cec8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ceca:	69fb      	ldr	r3, [r7, #28]
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3720      	adds	r7, #32
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b088      	sub	sp, #32
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cee2:	2337      	movs	r3, #55	; 0x37
 800cee4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ceea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ceec:	2300      	movs	r3, #0
 800ceee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cef4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cef6:	f107 0308 	add.w	r3, r7, #8
 800cefa:	4619      	mov	r1, r3
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f7ff fe2b 	bl	800cb58 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800cf02:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf06:	2137      	movs	r1, #55	; 0x37
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f000 f933 	bl	800d174 <SDMMC_GetCmdResp1>
 800cf0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf10:	69fb      	ldr	r3, [r7, #28]
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3720      	adds	r7, #32
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}

0800cf1a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cf1a:	b580      	push	{r7, lr}
 800cf1c:	b088      	sub	sp, #32
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	6078      	str	r0, [r7, #4]
 800cf22:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cf28:	2329      	movs	r3, #41	; 0x29
 800cf2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf32:	2300      	movs	r3, #0
 800cf34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf3c:	f107 0308 	add.w	r3, r7, #8
 800cf40:	4619      	mov	r1, r3
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f7ff fe08 	bl	800cb58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f000 fa4f 	bl	800d3ec <SDMMC_GetCmdResp3>
 800cf4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf50:	69fb      	ldr	r3, [r7, #28]
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3720      	adds	r7, #32
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}

0800cf5a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800cf5a:	b580      	push	{r7, lr}
 800cf5c:	b088      	sub	sp, #32
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	6078      	str	r0, [r7, #4]
 800cf62:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800cf68:	2306      	movs	r3, #6
 800cf6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf72:	2300      	movs	r3, #0
 800cf74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf7c:	f107 0308 	add.w	r3, r7, #8
 800cf80:	4619      	mov	r1, r3
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f7ff fde8 	bl	800cb58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800cf88:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf8c:	2106      	movs	r1, #6
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f000 f8f0 	bl	800d174 <SDMMC_GetCmdResp1>
 800cf94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf96:	69fb      	ldr	r3, [r7, #28]
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3720      	adds	r7, #32
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b088      	sub	sp, #32
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cfac:	2333      	movs	r3, #51	; 0x33
 800cfae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cfb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cfbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfc0:	f107 0308 	add.w	r3, r7, #8
 800cfc4:	4619      	mov	r1, r3
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f7ff fdc6 	bl	800cb58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800cfcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfd0:	2133      	movs	r1, #51	; 0x33
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f000 f8ce 	bl	800d174 <SDMMC_GetCmdResp1>
 800cfd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfda:	69fb      	ldr	r3, [r7, #28]
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3720      	adds	r7, #32
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b088      	sub	sp, #32
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cfec:	2300      	movs	r3, #0
 800cfee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cff0:	2302      	movs	r3, #2
 800cff2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cff4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800cff8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cffa:	2300      	movs	r3, #0
 800cffc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d002:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d004:	f107 0308 	add.w	r3, r7, #8
 800d008:	4619      	mov	r1, r3
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f7ff fda4 	bl	800cb58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f000 f9a1 	bl	800d358 <SDMMC_GetCmdResp2>
 800d016:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d018:	69fb      	ldr	r3, [r7, #28]
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3720      	adds	r7, #32
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}

0800d022 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d022:	b580      	push	{r7, lr}
 800d024:	b088      	sub	sp, #32
 800d026:	af00      	add	r7, sp, #0
 800d028:	6078      	str	r0, [r7, #4]
 800d02a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d030:	2309      	movs	r3, #9
 800d032:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d034:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d038:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d03a:	2300      	movs	r3, #0
 800d03c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d03e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d042:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d044:	f107 0308 	add.w	r3, r7, #8
 800d048:	4619      	mov	r1, r3
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f7ff fd84 	bl	800cb58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f000 f981 	bl	800d358 <SDMMC_GetCmdResp2>
 800d056:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d058:	69fb      	ldr	r3, [r7, #28]
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3720      	adds	r7, #32
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}

0800d062 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d062:	b580      	push	{r7, lr}
 800d064:	b088      	sub	sp, #32
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
 800d06a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d06c:	2300      	movs	r3, #0
 800d06e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d070:	2303      	movs	r3, #3
 800d072:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d074:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d078:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d07a:	2300      	movs	r3, #0
 800d07c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d07e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d082:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d084:	f107 0308 	add.w	r3, r7, #8
 800d088:	4619      	mov	r1, r3
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f7ff fd64 	bl	800cb58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d090:	683a      	ldr	r2, [r7, #0]
 800d092:	2103      	movs	r1, #3
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f000 f9e9 	bl	800d46c <SDMMC_GetCmdResp6>
 800d09a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d09c:	69fb      	ldr	r3, [r7, #28]
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3720      	adds	r7, #32
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}

0800d0a6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d0a6:	b580      	push	{r7, lr}
 800d0a8:	b088      	sub	sp, #32
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	6078      	str	r0, [r7, #4]
 800d0ae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d0b4:	230d      	movs	r3, #13
 800d0b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d0bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d0c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0c8:	f107 0308 	add.w	r3, r7, #8
 800d0cc:	4619      	mov	r1, r3
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f7ff fd42 	bl	800cb58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d0d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0d8:	210d      	movs	r1, #13
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f000 f84a 	bl	800d174 <SDMMC_GetCmdResp1>
 800d0e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0e2:	69fb      	ldr	r3, [r7, #28]
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3720      	adds	r7, #32
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b088      	sub	sp, #32
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d0f8:	230d      	movs	r3, #13
 800d0fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d100:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d102:	2300      	movs	r3, #0
 800d104:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d10a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d10c:	f107 0308 	add.w	r3, r7, #8
 800d110:	4619      	mov	r1, r3
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f7ff fd20 	bl	800cb58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d118:	f241 3288 	movw	r2, #5000	; 0x1388
 800d11c:	210d      	movs	r1, #13
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f000 f828 	bl	800d174 <SDMMC_GetCmdResp1>
 800d124:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d126:	69fb      	ldr	r3, [r7, #28]
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3720      	adds	r7, #32
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}

0800d130 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b088      	sub	sp, #32
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800d138:	2300      	movs	r3, #0
 800d13a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800d13c:	230b      	movs	r3, #11
 800d13e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d140:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d144:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d146:	2300      	movs	r3, #0
 800d148:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d14a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d14e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d150:	f107 0308 	add.w	r3, r7, #8
 800d154:	4619      	mov	r1, r3
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f7ff fcfe 	bl	800cb58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800d15c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d160:	210b      	movs	r1, #11
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f000 f806 	bl	800d174 <SDMMC_GetCmdResp1>
 800d168:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d16a:	69fb      	ldr	r3, [r7, #28]
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3720      	adds	r7, #32
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}

0800d174 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b088      	sub	sp, #32
 800d178:	af00      	add	r7, sp, #0
 800d17a:	60f8      	str	r0, [r7, #12]
 800d17c:	460b      	mov	r3, r1
 800d17e:	607a      	str	r2, [r7, #4]
 800d180:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d182:	4b70      	ldr	r3, [pc, #448]	; (800d344 <SDMMC_GetCmdResp1+0x1d0>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	4a70      	ldr	r2, [pc, #448]	; (800d348 <SDMMC_GetCmdResp1+0x1d4>)
 800d188:	fba2 2303 	umull	r2, r3, r2, r3
 800d18c:	0a5a      	lsrs	r2, r3, #9
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	fb02 f303 	mul.w	r3, r2, r3
 800d194:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d196:	69fb      	ldr	r3, [r7, #28]
 800d198:	1e5a      	subs	r2, r3, #1
 800d19a:	61fa      	str	r2, [r7, #28]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d102      	bne.n	800d1a6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d1a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d1a4:	e0c9      	b.n	800d33a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1aa:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d1ac:	69ba      	ldr	r2, [r7, #24]
 800d1ae:	4b67      	ldr	r3, [pc, #412]	; (800d34c <SDMMC_GetCmdResp1+0x1d8>)
 800d1b0:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d0ef      	beq.n	800d196 <SDMMC_GetCmdResp1+0x22>
 800d1b6:	69bb      	ldr	r3, [r7, #24]
 800d1b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d1ea      	bne.n	800d196 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1c4:	f003 0304 	and.w	r3, r3, #4
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d004      	beq.n	800d1d6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	2204      	movs	r2, #4
 800d1d0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d1d2:	2304      	movs	r3, #4
 800d1d4:	e0b1      	b.n	800d33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1da:	f003 0301 	and.w	r3, r3, #1
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d004      	beq.n	800d1ec <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	e0a6      	b.n	800d33a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	4a58      	ldr	r2, [pc, #352]	; (800d350 <SDMMC_GetCmdResp1+0x1dc>)
 800d1f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d1f2:	68f8      	ldr	r0, [r7, #12]
 800d1f4:	f7ff fcda 	bl	800cbac <SDMMC_GetCommandResponse>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	7afb      	ldrb	r3, [r7, #11]
 800d1fe:	4293      	cmp	r3, r2
 800d200:	d001      	beq.n	800d206 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d202:	2301      	movs	r3, #1
 800d204:	e099      	b.n	800d33a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d206:	2100      	movs	r1, #0
 800d208:	68f8      	ldr	r0, [r7, #12]
 800d20a:	f7ff fcdc 	bl	800cbc6 <SDMMC_GetResponse>
 800d20e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d210:	697a      	ldr	r2, [r7, #20]
 800d212:	4b50      	ldr	r3, [pc, #320]	; (800d354 <SDMMC_GetCmdResp1+0x1e0>)
 800d214:	4013      	ands	r3, r2
 800d216:	2b00      	cmp	r3, #0
 800d218:	d101      	bne.n	800d21e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d21a:	2300      	movs	r3, #0
 800d21c:	e08d      	b.n	800d33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	2b00      	cmp	r3, #0
 800d222:	da02      	bge.n	800d22a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d224:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d228:	e087      	b.n	800d33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d230:	2b00      	cmp	r3, #0
 800d232:	d001      	beq.n	800d238 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d234:	2340      	movs	r3, #64	; 0x40
 800d236:	e080      	b.n	800d33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d001      	beq.n	800d246 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d242:	2380      	movs	r3, #128	; 0x80
 800d244:	e079      	b.n	800d33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d002      	beq.n	800d256 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d250:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d254:	e071      	b.n	800d33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d002      	beq.n	800d266 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d260:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d264:	e069      	b.n	800d33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d002      	beq.n	800d276 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d274:	e061      	b.n	800d33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d002      	beq.n	800d286 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d280:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d284:	e059      	b.n	800d33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d002      	beq.n	800d296 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d290:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d294:	e051      	b.n	800d33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d002      	beq.n	800d2a6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d2a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d2a4:	e049      	b.n	800d33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d002      	beq.n	800d2b6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d2b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d2b4:	e041      	b.n	800d33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d002      	beq.n	800d2c6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d2c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d2c4:	e039      	b.n	800d33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d002      	beq.n	800d2d6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d2d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d2d4:	e031      	b.n	800d33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d002      	beq.n	800d2e6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d2e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d2e4:	e029      	b.n	800d33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d002      	beq.n	800d2f6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d2f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d2f4:	e021      	b.n	800d33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d002      	beq.n	800d306 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d300:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d304:	e019      	b.n	800d33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d002      	beq.n	800d316 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d310:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d314:	e011      	b.n	800d33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d002      	beq.n	800d326 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d320:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d324:	e009      	b.n	800d33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	f003 0308 	and.w	r3, r3, #8
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d002      	beq.n	800d336 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d330:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d334:	e001      	b.n	800d33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d336:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3720      	adds	r7, #32
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
 800d342:	bf00      	nop
 800d344:	2000000c 	.word	0x2000000c
 800d348:	10624dd3 	.word	0x10624dd3
 800d34c:	00200045 	.word	0x00200045
 800d350:	002000c5 	.word	0x002000c5
 800d354:	fdffe008 	.word	0xfdffe008

0800d358 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d358:	b480      	push	{r7}
 800d35a:	b085      	sub	sp, #20
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d360:	4b1f      	ldr	r3, [pc, #124]	; (800d3e0 <SDMMC_GetCmdResp2+0x88>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4a1f      	ldr	r2, [pc, #124]	; (800d3e4 <SDMMC_GetCmdResp2+0x8c>)
 800d366:	fba2 2303 	umull	r2, r3, r2, r3
 800d36a:	0a5b      	lsrs	r3, r3, #9
 800d36c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d370:	fb02 f303 	mul.w	r3, r2, r3
 800d374:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	1e5a      	subs	r2, r3, #1
 800d37a:	60fa      	str	r2, [r7, #12]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d102      	bne.n	800d386 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d380:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d384:	e026      	b.n	800d3d4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d38a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d392:	2b00      	cmp	r3, #0
 800d394:	d0ef      	beq.n	800d376 <SDMMC_GetCmdResp2+0x1e>
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d1ea      	bne.n	800d376 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3a4:	f003 0304 	and.w	r3, r3, #4
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d004      	beq.n	800d3b6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2204      	movs	r2, #4
 800d3b0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d3b2:	2304      	movs	r3, #4
 800d3b4:	e00e      	b.n	800d3d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3ba:	f003 0301 	and.w	r3, r3, #1
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d004      	beq.n	800d3cc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2201      	movs	r2, #1
 800d3c6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	e003      	b.n	800d3d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	4a06      	ldr	r2, [pc, #24]	; (800d3e8 <SDMMC_GetCmdResp2+0x90>)
 800d3d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d3d2:	2300      	movs	r3, #0
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3714      	adds	r7, #20
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr
 800d3e0:	2000000c 	.word	0x2000000c
 800d3e4:	10624dd3 	.word	0x10624dd3
 800d3e8:	002000c5 	.word	0x002000c5

0800d3ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b085      	sub	sp, #20
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d3f4:	4b1a      	ldr	r3, [pc, #104]	; (800d460 <SDMMC_GetCmdResp3+0x74>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	4a1a      	ldr	r2, [pc, #104]	; (800d464 <SDMMC_GetCmdResp3+0x78>)
 800d3fa:	fba2 2303 	umull	r2, r3, r2, r3
 800d3fe:	0a5b      	lsrs	r3, r3, #9
 800d400:	f241 3288 	movw	r2, #5000	; 0x1388
 800d404:	fb02 f303 	mul.w	r3, r2, r3
 800d408:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	1e5a      	subs	r2, r3, #1
 800d40e:	60fa      	str	r2, [r7, #12]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d102      	bne.n	800d41a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d414:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d418:	e01b      	b.n	800d452 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d41e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d426:	2b00      	cmp	r3, #0
 800d428:	d0ef      	beq.n	800d40a <SDMMC_GetCmdResp3+0x1e>
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d430:	2b00      	cmp	r3, #0
 800d432:	d1ea      	bne.n	800d40a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d438:	f003 0304 	and.w	r3, r3, #4
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d004      	beq.n	800d44a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2204      	movs	r2, #4
 800d444:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d446:	2304      	movs	r3, #4
 800d448:	e003      	b.n	800d452 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	4a06      	ldr	r2, [pc, #24]	; (800d468 <SDMMC_GetCmdResp3+0x7c>)
 800d44e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d450:	2300      	movs	r3, #0
}
 800d452:	4618      	mov	r0, r3
 800d454:	3714      	adds	r7, #20
 800d456:	46bd      	mov	sp, r7
 800d458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45c:	4770      	bx	lr
 800d45e:	bf00      	nop
 800d460:	2000000c 	.word	0x2000000c
 800d464:	10624dd3 	.word	0x10624dd3
 800d468:	002000c5 	.word	0x002000c5

0800d46c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b088      	sub	sp, #32
 800d470:	af00      	add	r7, sp, #0
 800d472:	60f8      	str	r0, [r7, #12]
 800d474:	460b      	mov	r3, r1
 800d476:	607a      	str	r2, [r7, #4]
 800d478:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d47a:	4b35      	ldr	r3, [pc, #212]	; (800d550 <SDMMC_GetCmdResp6+0xe4>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	4a35      	ldr	r2, [pc, #212]	; (800d554 <SDMMC_GetCmdResp6+0xe8>)
 800d480:	fba2 2303 	umull	r2, r3, r2, r3
 800d484:	0a5b      	lsrs	r3, r3, #9
 800d486:	f241 3288 	movw	r2, #5000	; 0x1388
 800d48a:	fb02 f303 	mul.w	r3, r2, r3
 800d48e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d490:	69fb      	ldr	r3, [r7, #28]
 800d492:	1e5a      	subs	r2, r3, #1
 800d494:	61fa      	str	r2, [r7, #28]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d102      	bne.n	800d4a0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d49a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d49e:	e052      	b.n	800d546 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4a4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d4a6:	69bb      	ldr	r3, [r7, #24]
 800d4a8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d0ef      	beq.n	800d490 <SDMMC_GetCmdResp6+0x24>
 800d4b0:	69bb      	ldr	r3, [r7, #24]
 800d4b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d1ea      	bne.n	800d490 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4be:	f003 0304 	and.w	r3, r3, #4
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d004      	beq.n	800d4d0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	2204      	movs	r2, #4
 800d4ca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d4cc:	2304      	movs	r3, #4
 800d4ce:	e03a      	b.n	800d546 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4d4:	f003 0301 	and.w	r3, r3, #1
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d004      	beq.n	800d4e6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2201      	movs	r2, #1
 800d4e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	e02f      	b.n	800d546 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d4e6:	68f8      	ldr	r0, [r7, #12]
 800d4e8:	f7ff fb60 	bl	800cbac <SDMMC_GetCommandResponse>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	461a      	mov	r2, r3
 800d4f0:	7afb      	ldrb	r3, [r7, #11]
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	d001      	beq.n	800d4fa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	e025      	b.n	800d546 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	4a16      	ldr	r2, [pc, #88]	; (800d558 <SDMMC_GetCmdResp6+0xec>)
 800d4fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d500:	2100      	movs	r1, #0
 800d502:	68f8      	ldr	r0, [r7, #12]
 800d504:	f7ff fb5f 	bl	800cbc6 <SDMMC_GetResponse>
 800d508:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d510:	2b00      	cmp	r3, #0
 800d512:	d106      	bne.n	800d522 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	0c1b      	lsrs	r3, r3, #16
 800d518:	b29a      	uxth	r2, r3
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800d51e:	2300      	movs	r3, #0
 800d520:	e011      	b.n	800d546 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d002      	beq.n	800d532 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d52c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d530:	e009      	b.n	800d546 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d002      	beq.n	800d542 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d53c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d540:	e001      	b.n	800d546 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d542:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d546:	4618      	mov	r0, r3
 800d548:	3720      	adds	r7, #32
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}
 800d54e:	bf00      	nop
 800d550:	2000000c 	.word	0x2000000c
 800d554:	10624dd3 	.word	0x10624dd3
 800d558:	002000c5 	.word	0x002000c5

0800d55c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d55c:	b480      	push	{r7}
 800d55e:	b085      	sub	sp, #20
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d564:	4b22      	ldr	r3, [pc, #136]	; (800d5f0 <SDMMC_GetCmdResp7+0x94>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	4a22      	ldr	r2, [pc, #136]	; (800d5f4 <SDMMC_GetCmdResp7+0x98>)
 800d56a:	fba2 2303 	umull	r2, r3, r2, r3
 800d56e:	0a5b      	lsrs	r3, r3, #9
 800d570:	f241 3288 	movw	r2, #5000	; 0x1388
 800d574:	fb02 f303 	mul.w	r3, r2, r3
 800d578:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	1e5a      	subs	r2, r3, #1
 800d57e:	60fa      	str	r2, [r7, #12]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d102      	bne.n	800d58a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d584:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d588:	e02c      	b.n	800d5e4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d58e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d596:	2b00      	cmp	r3, #0
 800d598:	d0ef      	beq.n	800d57a <SDMMC_GetCmdResp7+0x1e>
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d1ea      	bne.n	800d57a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5a8:	f003 0304 	and.w	r3, r3, #4
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d004      	beq.n	800d5ba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2204      	movs	r2, #4
 800d5b4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d5b6:	2304      	movs	r3, #4
 800d5b8:	e014      	b.n	800d5e4 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5be:	f003 0301 	and.w	r3, r3, #1
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d004      	beq.n	800d5d0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2201      	movs	r2, #1
 800d5ca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	e009      	b.n	800d5e4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d002      	beq.n	800d5e2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2240      	movs	r2, #64	; 0x40
 800d5e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d5e2:	2300      	movs	r3, #0

}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3714      	adds	r7, #20
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr
 800d5f0:	2000000c 	.word	0x2000000c
 800d5f4:	10624dd3 	.word	0x10624dd3

0800d5f8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	b085      	sub	sp, #20
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d600:	4b11      	ldr	r3, [pc, #68]	; (800d648 <SDMMC_GetCmdError+0x50>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	4a11      	ldr	r2, [pc, #68]	; (800d64c <SDMMC_GetCmdError+0x54>)
 800d606:	fba2 2303 	umull	r2, r3, r2, r3
 800d60a:	0a5b      	lsrs	r3, r3, #9
 800d60c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d610:	fb02 f303 	mul.w	r3, r2, r3
 800d614:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	1e5a      	subs	r2, r3, #1
 800d61a:	60fa      	str	r2, [r7, #12]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d102      	bne.n	800d626 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d620:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d624:	e009      	b.n	800d63a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d62a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d0f1      	beq.n	800d616 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	4a06      	ldr	r2, [pc, #24]	; (800d650 <SDMMC_GetCmdError+0x58>)
 800d636:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800d638:	2300      	movs	r3, #0
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3714      	adds	r7, #20
 800d63e:	46bd      	mov	sp, r7
 800d640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d644:	4770      	bx	lr
 800d646:	bf00      	nop
 800d648:	2000000c 	.word	0x2000000c
 800d64c:	10624dd3 	.word	0x10624dd3
 800d650:	002000c5 	.word	0x002000c5

0800d654 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d654:	b084      	sub	sp, #16
 800d656:	b580      	push	{r7, lr}
 800d658:	b084      	sub	sp, #16
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	6078      	str	r0, [r7, #4]
 800d65e:	f107 001c 	add.w	r0, r7, #28
 800d662:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	68db      	ldr	r3, [r3, #12]
 800d66a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f001 faf6 	bl	800ec64 <USB_CoreReset>
 800d678:	4603      	mov	r3, r0
 800d67a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800d67c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d106      	bne.n	800d690 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d686:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	639a      	str	r2, [r3, #56]	; 0x38
 800d68e:	e005      	b.n	800d69c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d694:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800d69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3710      	adds	r7, #16
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d6a8:	b004      	add	sp, #16
 800d6aa:	4770      	bx	lr

0800d6ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b087      	sub	sp, #28
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	60f8      	str	r0, [r7, #12]
 800d6b4:	60b9      	str	r1, [r7, #8]
 800d6b6:	4613      	mov	r3, r2
 800d6b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d6ba:	79fb      	ldrb	r3, [r7, #7]
 800d6bc:	2b02      	cmp	r3, #2
 800d6be:	d165      	bne.n	800d78c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	4a3e      	ldr	r2, [pc, #248]	; (800d7bc <USB_SetTurnaroundTime+0x110>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d906      	bls.n	800d6d6 <USB_SetTurnaroundTime+0x2a>
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	4a3d      	ldr	r2, [pc, #244]	; (800d7c0 <USB_SetTurnaroundTime+0x114>)
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	d202      	bcs.n	800d6d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d6d0:	230f      	movs	r3, #15
 800d6d2:	617b      	str	r3, [r7, #20]
 800d6d4:	e05c      	b.n	800d790 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	4a39      	ldr	r2, [pc, #228]	; (800d7c0 <USB_SetTurnaroundTime+0x114>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d306      	bcc.n	800d6ec <USB_SetTurnaroundTime+0x40>
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	4a38      	ldr	r2, [pc, #224]	; (800d7c4 <USB_SetTurnaroundTime+0x118>)
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d202      	bcs.n	800d6ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d6e6:	230e      	movs	r3, #14
 800d6e8:	617b      	str	r3, [r7, #20]
 800d6ea:	e051      	b.n	800d790 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	4a35      	ldr	r2, [pc, #212]	; (800d7c4 <USB_SetTurnaroundTime+0x118>)
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	d306      	bcc.n	800d702 <USB_SetTurnaroundTime+0x56>
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	4a34      	ldr	r2, [pc, #208]	; (800d7c8 <USB_SetTurnaroundTime+0x11c>)
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d202      	bcs.n	800d702 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d6fc:	230d      	movs	r3, #13
 800d6fe:	617b      	str	r3, [r7, #20]
 800d700:	e046      	b.n	800d790 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	4a30      	ldr	r2, [pc, #192]	; (800d7c8 <USB_SetTurnaroundTime+0x11c>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d306      	bcc.n	800d718 <USB_SetTurnaroundTime+0x6c>
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	4a2f      	ldr	r2, [pc, #188]	; (800d7cc <USB_SetTurnaroundTime+0x120>)
 800d70e:	4293      	cmp	r3, r2
 800d710:	d802      	bhi.n	800d718 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d712:	230c      	movs	r3, #12
 800d714:	617b      	str	r3, [r7, #20]
 800d716:	e03b      	b.n	800d790 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	4a2c      	ldr	r2, [pc, #176]	; (800d7cc <USB_SetTurnaroundTime+0x120>)
 800d71c:	4293      	cmp	r3, r2
 800d71e:	d906      	bls.n	800d72e <USB_SetTurnaroundTime+0x82>
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	4a2b      	ldr	r2, [pc, #172]	; (800d7d0 <USB_SetTurnaroundTime+0x124>)
 800d724:	4293      	cmp	r3, r2
 800d726:	d802      	bhi.n	800d72e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d728:	230b      	movs	r3, #11
 800d72a:	617b      	str	r3, [r7, #20]
 800d72c:	e030      	b.n	800d790 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	4a27      	ldr	r2, [pc, #156]	; (800d7d0 <USB_SetTurnaroundTime+0x124>)
 800d732:	4293      	cmp	r3, r2
 800d734:	d906      	bls.n	800d744 <USB_SetTurnaroundTime+0x98>
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	4a26      	ldr	r2, [pc, #152]	; (800d7d4 <USB_SetTurnaroundTime+0x128>)
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d802      	bhi.n	800d744 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d73e:	230a      	movs	r3, #10
 800d740:	617b      	str	r3, [r7, #20]
 800d742:	e025      	b.n	800d790 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	4a23      	ldr	r2, [pc, #140]	; (800d7d4 <USB_SetTurnaroundTime+0x128>)
 800d748:	4293      	cmp	r3, r2
 800d74a:	d906      	bls.n	800d75a <USB_SetTurnaroundTime+0xae>
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	4a22      	ldr	r2, [pc, #136]	; (800d7d8 <USB_SetTurnaroundTime+0x12c>)
 800d750:	4293      	cmp	r3, r2
 800d752:	d202      	bcs.n	800d75a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d754:	2309      	movs	r3, #9
 800d756:	617b      	str	r3, [r7, #20]
 800d758:	e01a      	b.n	800d790 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	4a1e      	ldr	r2, [pc, #120]	; (800d7d8 <USB_SetTurnaroundTime+0x12c>)
 800d75e:	4293      	cmp	r3, r2
 800d760:	d306      	bcc.n	800d770 <USB_SetTurnaroundTime+0xc4>
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	4a1d      	ldr	r2, [pc, #116]	; (800d7dc <USB_SetTurnaroundTime+0x130>)
 800d766:	4293      	cmp	r3, r2
 800d768:	d802      	bhi.n	800d770 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d76a:	2308      	movs	r3, #8
 800d76c:	617b      	str	r3, [r7, #20]
 800d76e:	e00f      	b.n	800d790 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	4a1a      	ldr	r2, [pc, #104]	; (800d7dc <USB_SetTurnaroundTime+0x130>)
 800d774:	4293      	cmp	r3, r2
 800d776:	d906      	bls.n	800d786 <USB_SetTurnaroundTime+0xda>
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	4a19      	ldr	r2, [pc, #100]	; (800d7e0 <USB_SetTurnaroundTime+0x134>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d202      	bcs.n	800d786 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d780:	2307      	movs	r3, #7
 800d782:	617b      	str	r3, [r7, #20]
 800d784:	e004      	b.n	800d790 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d786:	2306      	movs	r3, #6
 800d788:	617b      	str	r3, [r7, #20]
 800d78a:	e001      	b.n	800d790 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d78c:	2309      	movs	r3, #9
 800d78e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	68db      	ldr	r3, [r3, #12]
 800d794:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	68da      	ldr	r2, [r3, #12]
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	029b      	lsls	r3, r3, #10
 800d7a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d7a8:	431a      	orrs	r2, r3
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d7ae:	2300      	movs	r3, #0
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	371c      	adds	r7, #28
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ba:	4770      	bx	lr
 800d7bc:	00d8acbf 	.word	0x00d8acbf
 800d7c0:	00e4e1c0 	.word	0x00e4e1c0
 800d7c4:	00f42400 	.word	0x00f42400
 800d7c8:	01067380 	.word	0x01067380
 800d7cc:	011a499f 	.word	0x011a499f
 800d7d0:	01312cff 	.word	0x01312cff
 800d7d4:	014ca43f 	.word	0x014ca43f
 800d7d8:	016e3600 	.word	0x016e3600
 800d7dc:	01a6ab1f 	.word	0x01a6ab1f
 800d7e0:	01e84800 	.word	0x01e84800

0800d7e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b083      	sub	sp, #12
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	689b      	ldr	r3, [r3, #8]
 800d7f0:	f043 0201 	orr.w	r2, r3, #1
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d7f8:	2300      	movs	r3, #0
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	370c      	adds	r7, #12
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr

0800d806 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d806:	b480      	push	{r7}
 800d808:	b083      	sub	sp, #12
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	689b      	ldr	r3, [r3, #8]
 800d812:	f023 0201 	bic.w	r2, r3, #1
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d81a:	2300      	movs	r3, #0
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	370c      	adds	r7, #12
 800d820:	46bd      	mov	sp, r7
 800d822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d826:	4770      	bx	lr

0800d828 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b084      	sub	sp, #16
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	460b      	mov	r3, r1
 800d832:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d834:	2300      	movs	r3, #0
 800d836:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	68db      	ldr	r3, [r3, #12]
 800d83c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d844:	78fb      	ldrb	r3, [r7, #3]
 800d846:	2b01      	cmp	r3, #1
 800d848:	d115      	bne.n	800d876 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d856:	2001      	movs	r0, #1
 800d858:	f7f5 f93c 	bl	8002ad4 <HAL_Delay>
      ms++;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	3301      	adds	r3, #1
 800d860:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f001 f985 	bl	800eb72 <USB_GetMode>
 800d868:	4603      	mov	r3, r0
 800d86a:	2b01      	cmp	r3, #1
 800d86c:	d01e      	beq.n	800d8ac <USB_SetCurrentMode+0x84>
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2b31      	cmp	r3, #49	; 0x31
 800d872:	d9f0      	bls.n	800d856 <USB_SetCurrentMode+0x2e>
 800d874:	e01a      	b.n	800d8ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d876:	78fb      	ldrb	r3, [r7, #3]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d115      	bne.n	800d8a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	68db      	ldr	r3, [r3, #12]
 800d880:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d888:	2001      	movs	r0, #1
 800d88a:	f7f5 f923 	bl	8002ad4 <HAL_Delay>
      ms++;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	3301      	adds	r3, #1
 800d892:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f001 f96c 	bl	800eb72 <USB_GetMode>
 800d89a:	4603      	mov	r3, r0
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d005      	beq.n	800d8ac <USB_SetCurrentMode+0x84>
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	2b31      	cmp	r3, #49	; 0x31
 800d8a4:	d9f0      	bls.n	800d888 <USB_SetCurrentMode+0x60>
 800d8a6:	e001      	b.n	800d8ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	e005      	b.n	800d8b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	2b32      	cmp	r3, #50	; 0x32
 800d8b0:	d101      	bne.n	800d8b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	e000      	b.n	800d8b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d8b6:	2300      	movs	r3, #0
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	3710      	adds	r7, #16
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}

0800d8c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d8c0:	b084      	sub	sp, #16
 800d8c2:	b580      	push	{r7, lr}
 800d8c4:	b086      	sub	sp, #24
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	6078      	str	r0, [r7, #4]
 800d8ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d8ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d8da:	2300      	movs	r3, #0
 800d8dc:	613b      	str	r3, [r7, #16]
 800d8de:	e009      	b.n	800d8f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d8e0:	687a      	ldr	r2, [r7, #4]
 800d8e2:	693b      	ldr	r3, [r7, #16]
 800d8e4:	3340      	adds	r3, #64	; 0x40
 800d8e6:	009b      	lsls	r3, r3, #2
 800d8e8:	4413      	add	r3, r2
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	3301      	adds	r3, #1
 800d8f2:	613b      	str	r3, [r7, #16]
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	2b0e      	cmp	r3, #14
 800d8f8:	d9f2      	bls.n	800d8e0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d8fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d11c      	bne.n	800d93a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d906:	685b      	ldr	r3, [r3, #4]
 800d908:	68fa      	ldr	r2, [r7, #12]
 800d90a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d90e:	f043 0302 	orr.w	r3, r3, #2
 800d912:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d918:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	601a      	str	r2, [r3, #0]
 800d938:	e005      	b.n	800d946 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d93e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d94c:	461a      	mov	r2, r3
 800d94e:	2300      	movs	r3, #0
 800d950:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d958:	4619      	mov	r1, r3
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d960:	461a      	mov	r2, r3
 800d962:	680b      	ldr	r3, [r1, #0]
 800d964:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d966:	2103      	movs	r1, #3
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f000 f959 	bl	800dc20 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d96e:	2110      	movs	r1, #16
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f000 f8f1 	bl	800db58 <USB_FlushTxFifo>
 800d976:	4603      	mov	r3, r0
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d001      	beq.n	800d980 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800d97c:	2301      	movs	r3, #1
 800d97e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f000 f91d 	bl	800dbc0 <USB_FlushRxFifo>
 800d986:	4603      	mov	r3, r0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d001      	beq.n	800d990 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800d98c:	2301      	movs	r3, #1
 800d98e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d996:	461a      	mov	r2, r3
 800d998:	2300      	movs	r3, #0
 800d99a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9a2:	461a      	mov	r2, r3
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	613b      	str	r3, [r7, #16]
 800d9b8:	e043      	b.n	800da42 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	015a      	lsls	r2, r3, #5
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	4413      	add	r3, r2
 800d9c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d9cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d9d0:	d118      	bne.n	800da04 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d10a      	bne.n	800d9ee <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d9d8:	693b      	ldr	r3, [r7, #16]
 800d9da:	015a      	lsls	r2, r3, #5
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	4413      	add	r3, r2
 800d9e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9e4:	461a      	mov	r2, r3
 800d9e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d9ea:	6013      	str	r3, [r2, #0]
 800d9ec:	e013      	b.n	800da16 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d9ee:	693b      	ldr	r3, [r7, #16]
 800d9f0:	015a      	lsls	r2, r3, #5
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	4413      	add	r3, r2
 800d9f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9fa:	461a      	mov	r2, r3
 800d9fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800da00:	6013      	str	r3, [r2, #0]
 800da02:	e008      	b.n	800da16 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	015a      	lsls	r2, r3, #5
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	4413      	add	r3, r2
 800da0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da10:	461a      	mov	r2, r3
 800da12:	2300      	movs	r3, #0
 800da14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800da16:	693b      	ldr	r3, [r7, #16]
 800da18:	015a      	lsls	r2, r3, #5
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	4413      	add	r3, r2
 800da1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da22:	461a      	mov	r2, r3
 800da24:	2300      	movs	r3, #0
 800da26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800da28:	693b      	ldr	r3, [r7, #16]
 800da2a:	015a      	lsls	r2, r3, #5
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	4413      	add	r3, r2
 800da30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da34:	461a      	mov	r2, r3
 800da36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800da3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	3301      	adds	r3, #1
 800da40:	613b      	str	r3, [r7, #16]
 800da42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da44:	693a      	ldr	r2, [r7, #16]
 800da46:	429a      	cmp	r2, r3
 800da48:	d3b7      	bcc.n	800d9ba <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800da4a:	2300      	movs	r3, #0
 800da4c:	613b      	str	r3, [r7, #16]
 800da4e:	e043      	b.n	800dad8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800da50:	693b      	ldr	r3, [r7, #16]
 800da52:	015a      	lsls	r2, r3, #5
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	4413      	add	r3, r2
 800da58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800da62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800da66:	d118      	bne.n	800da9a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d10a      	bne.n	800da84 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	015a      	lsls	r2, r3, #5
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	4413      	add	r3, r2
 800da76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da7a:	461a      	mov	r2, r3
 800da7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800da80:	6013      	str	r3, [r2, #0]
 800da82:	e013      	b.n	800daac <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	015a      	lsls	r2, r3, #5
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	4413      	add	r3, r2
 800da8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da90:	461a      	mov	r2, r3
 800da92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800da96:	6013      	str	r3, [r2, #0]
 800da98:	e008      	b.n	800daac <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800da9a:	693b      	ldr	r3, [r7, #16]
 800da9c:	015a      	lsls	r2, r3, #5
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	4413      	add	r3, r2
 800daa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daa6:	461a      	mov	r2, r3
 800daa8:	2300      	movs	r3, #0
 800daaa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	015a      	lsls	r2, r3, #5
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	4413      	add	r3, r2
 800dab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dab8:	461a      	mov	r2, r3
 800daba:	2300      	movs	r3, #0
 800dabc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	015a      	lsls	r2, r3, #5
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	4413      	add	r3, r2
 800dac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daca:	461a      	mov	r2, r3
 800dacc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dad0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dad2:	693b      	ldr	r3, [r7, #16]
 800dad4:	3301      	adds	r3, #1
 800dad6:	613b      	str	r3, [r7, #16]
 800dad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dada:	693a      	ldr	r2, [r7, #16]
 800dadc:	429a      	cmp	r2, r3
 800dade:	d3b7      	bcc.n	800da50 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dae6:	691b      	ldr	r3, [r3, #16]
 800dae8:	68fa      	ldr	r2, [r7, #12]
 800daea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800daee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800daf2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2200      	movs	r2, #0
 800daf8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800db00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	699b      	ldr	r3, [r3, #24]
 800db06:	f043 0210 	orr.w	r2, r3, #16
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	699a      	ldr	r2, [r3, #24]
 800db12:	4b10      	ldr	r3, [pc, #64]	; (800db54 <USB_DevInit+0x294>)
 800db14:	4313      	orrs	r3, r2
 800db16:	687a      	ldr	r2, [r7, #4]
 800db18:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800db1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d005      	beq.n	800db2c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	699b      	ldr	r3, [r3, #24]
 800db24:	f043 0208 	orr.w	r2, r3, #8
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800db2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db2e:	2b01      	cmp	r3, #1
 800db30:	d107      	bne.n	800db42 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	699b      	ldr	r3, [r3, #24]
 800db36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db3a:	f043 0304 	orr.w	r3, r3, #4
 800db3e:	687a      	ldr	r2, [r7, #4]
 800db40:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800db42:	7dfb      	ldrb	r3, [r7, #23]
}
 800db44:	4618      	mov	r0, r3
 800db46:	3718      	adds	r7, #24
 800db48:	46bd      	mov	sp, r7
 800db4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800db4e:	b004      	add	sp, #16
 800db50:	4770      	bx	lr
 800db52:	bf00      	nop
 800db54:	803c3800 	.word	0x803c3800

0800db58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800db58:	b480      	push	{r7}
 800db5a:	b085      	sub	sp, #20
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800db62:	2300      	movs	r3, #0
 800db64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	3301      	adds	r3, #1
 800db6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	4a13      	ldr	r2, [pc, #76]	; (800dbbc <USB_FlushTxFifo+0x64>)
 800db70:	4293      	cmp	r3, r2
 800db72:	d901      	bls.n	800db78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800db74:	2303      	movs	r3, #3
 800db76:	e01b      	b.n	800dbb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	691b      	ldr	r3, [r3, #16]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	daf2      	bge.n	800db66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800db80:	2300      	movs	r3, #0
 800db82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	019b      	lsls	r3, r3, #6
 800db88:	f043 0220 	orr.w	r2, r3, #32
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	3301      	adds	r3, #1
 800db94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	4a08      	ldr	r2, [pc, #32]	; (800dbbc <USB_FlushTxFifo+0x64>)
 800db9a:	4293      	cmp	r3, r2
 800db9c:	d901      	bls.n	800dba2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800db9e:	2303      	movs	r3, #3
 800dba0:	e006      	b.n	800dbb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	691b      	ldr	r3, [r3, #16]
 800dba6:	f003 0320 	and.w	r3, r3, #32
 800dbaa:	2b20      	cmp	r3, #32
 800dbac:	d0f0      	beq.n	800db90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800dbae:	2300      	movs	r3, #0
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3714      	adds	r7, #20
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbba:	4770      	bx	lr
 800dbbc:	00030d40 	.word	0x00030d40

0800dbc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b085      	sub	sp, #20
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	3301      	adds	r3, #1
 800dbd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	4a11      	ldr	r2, [pc, #68]	; (800dc1c <USB_FlushRxFifo+0x5c>)
 800dbd6:	4293      	cmp	r3, r2
 800dbd8:	d901      	bls.n	800dbde <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800dbda:	2303      	movs	r3, #3
 800dbdc:	e018      	b.n	800dc10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	691b      	ldr	r3, [r3, #16]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	daf2      	bge.n	800dbcc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2210      	movs	r2, #16
 800dbee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	3301      	adds	r3, #1
 800dbf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	4a08      	ldr	r2, [pc, #32]	; (800dc1c <USB_FlushRxFifo+0x5c>)
 800dbfa:	4293      	cmp	r3, r2
 800dbfc:	d901      	bls.n	800dc02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800dbfe:	2303      	movs	r3, #3
 800dc00:	e006      	b.n	800dc10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	691b      	ldr	r3, [r3, #16]
 800dc06:	f003 0310 	and.w	r3, r3, #16
 800dc0a:	2b10      	cmp	r3, #16
 800dc0c:	d0f0      	beq.n	800dbf0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800dc0e:	2300      	movs	r3, #0
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	3714      	adds	r7, #20
 800dc14:	46bd      	mov	sp, r7
 800dc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1a:	4770      	bx	lr
 800dc1c:	00030d40 	.word	0x00030d40

0800dc20 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b085      	sub	sp, #20
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	460b      	mov	r3, r1
 800dc2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc36:	681a      	ldr	r2, [r3, #0]
 800dc38:	78fb      	ldrb	r3, [r7, #3]
 800dc3a:	68f9      	ldr	r1, [r7, #12]
 800dc3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc40:	4313      	orrs	r3, r2
 800dc42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dc44:	2300      	movs	r3, #0
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3714      	adds	r7, #20
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc50:	4770      	bx	lr

0800dc52 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800dc52:	b480      	push	{r7}
 800dc54:	b087      	sub	sp, #28
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc64:	689b      	ldr	r3, [r3, #8]
 800dc66:	f003 0306 	and.w	r3, r3, #6
 800dc6a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	2b02      	cmp	r3, #2
 800dc70:	d002      	beq.n	800dc78 <USB_GetDevSpeed+0x26>
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	2b06      	cmp	r3, #6
 800dc76:	d102      	bne.n	800dc7e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800dc78:	2302      	movs	r3, #2
 800dc7a:	75fb      	strb	r3, [r7, #23]
 800dc7c:	e001      	b.n	800dc82 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800dc7e:	230f      	movs	r3, #15
 800dc80:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800dc82:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	371c      	adds	r7, #28
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8e:	4770      	bx	lr

0800dc90 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dc90:	b480      	push	{r7}
 800dc92:	b085      	sub	sp, #20
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	781b      	ldrb	r3, [r3, #0]
 800dca2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	785b      	ldrb	r3, [r3, #1]
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d13a      	bne.n	800dd22 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcb2:	69da      	ldr	r2, [r3, #28]
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	781b      	ldrb	r3, [r3, #0]
 800dcb8:	f003 030f 	and.w	r3, r3, #15
 800dcbc:	2101      	movs	r1, #1
 800dcbe:	fa01 f303 	lsl.w	r3, r1, r3
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	68f9      	ldr	r1, [r7, #12]
 800dcc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dcca:	4313      	orrs	r3, r2
 800dccc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	015a      	lsls	r2, r3, #5
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	4413      	add	r3, r2
 800dcd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d155      	bne.n	800dd90 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	015a      	lsls	r2, r3, #5
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	4413      	add	r3, r2
 800dcec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcf0:	681a      	ldr	r2, [r3, #0]
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	68db      	ldr	r3, [r3, #12]
 800dcf6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	791b      	ldrb	r3, [r3, #4]
 800dcfe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dd00:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	059b      	lsls	r3, r3, #22
 800dd06:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dd08:	4313      	orrs	r3, r2
 800dd0a:	68ba      	ldr	r2, [r7, #8]
 800dd0c:	0151      	lsls	r1, r2, #5
 800dd0e:	68fa      	ldr	r2, [r7, #12]
 800dd10:	440a      	add	r2, r1
 800dd12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dd1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd1e:	6013      	str	r3, [r2, #0]
 800dd20:	e036      	b.n	800dd90 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd28:	69da      	ldr	r2, [r3, #28]
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	f003 030f 	and.w	r3, r3, #15
 800dd32:	2101      	movs	r1, #1
 800dd34:	fa01 f303 	lsl.w	r3, r1, r3
 800dd38:	041b      	lsls	r3, r3, #16
 800dd3a:	68f9      	ldr	r1, [r7, #12]
 800dd3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dd40:	4313      	orrs	r3, r2
 800dd42:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	015a      	lsls	r2, r3, #5
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	4413      	add	r3, r2
 800dd4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d11a      	bne.n	800dd90 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	015a      	lsls	r2, r3, #5
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	4413      	add	r3, r2
 800dd62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd66:	681a      	ldr	r2, [r3, #0]
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	68db      	ldr	r3, [r3, #12]
 800dd6c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	791b      	ldrb	r3, [r3, #4]
 800dd74:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dd76:	430b      	orrs	r3, r1
 800dd78:	4313      	orrs	r3, r2
 800dd7a:	68ba      	ldr	r2, [r7, #8]
 800dd7c:	0151      	lsls	r1, r2, #5
 800dd7e:	68fa      	ldr	r2, [r7, #12]
 800dd80:	440a      	add	r2, r1
 800dd82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dd8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd8e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800dd90:	2300      	movs	r3, #0
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3714      	adds	r7, #20
 800dd96:	46bd      	mov	sp, r7
 800dd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9c:	4770      	bx	lr
	...

0800dda0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dda0:	b480      	push	{r7}
 800dda2:	b085      	sub	sp, #20
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	785b      	ldrb	r3, [r3, #1]
 800ddb8:	2b01      	cmp	r3, #1
 800ddba:	d161      	bne.n	800de80 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	015a      	lsls	r2, r3, #5
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	4413      	add	r3, r2
 800ddc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ddce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ddd2:	d11f      	bne.n	800de14 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	015a      	lsls	r2, r3, #5
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	4413      	add	r3, r2
 800dddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	68ba      	ldr	r2, [r7, #8]
 800dde4:	0151      	lsls	r1, r2, #5
 800dde6:	68fa      	ldr	r2, [r7, #12]
 800dde8:	440a      	add	r2, r1
 800ddea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ddf2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	015a      	lsls	r2, r3, #5
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	4413      	add	r3, r2
 800ddfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	68ba      	ldr	r2, [r7, #8]
 800de04:	0151      	lsls	r1, r2, #5
 800de06:	68fa      	ldr	r2, [r7, #12]
 800de08:	440a      	add	r2, r1
 800de0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	f003 030f 	and.w	r3, r3, #15
 800de24:	2101      	movs	r1, #1
 800de26:	fa01 f303 	lsl.w	r3, r1, r3
 800de2a:	b29b      	uxth	r3, r3
 800de2c:	43db      	mvns	r3, r3
 800de2e:	68f9      	ldr	r1, [r7, #12]
 800de30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de34:	4013      	ands	r3, r2
 800de36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de3e:	69da      	ldr	r2, [r3, #28]
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	781b      	ldrb	r3, [r3, #0]
 800de44:	f003 030f 	and.w	r3, r3, #15
 800de48:	2101      	movs	r1, #1
 800de4a:	fa01 f303 	lsl.w	r3, r1, r3
 800de4e:	b29b      	uxth	r3, r3
 800de50:	43db      	mvns	r3, r3
 800de52:	68f9      	ldr	r1, [r7, #12]
 800de54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de58:	4013      	ands	r3, r2
 800de5a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	015a      	lsls	r2, r3, #5
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	4413      	add	r3, r2
 800de64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de68:	681a      	ldr	r2, [r3, #0]
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	0159      	lsls	r1, r3, #5
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	440b      	add	r3, r1
 800de72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de76:	4619      	mov	r1, r3
 800de78:	4b35      	ldr	r3, [pc, #212]	; (800df50 <USB_DeactivateEndpoint+0x1b0>)
 800de7a:	4013      	ands	r3, r2
 800de7c:	600b      	str	r3, [r1, #0]
 800de7e:	e060      	b.n	800df42 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	015a      	lsls	r2, r3, #5
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	4413      	add	r3, r2
 800de88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de96:	d11f      	bne.n	800ded8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	015a      	lsls	r2, r3, #5
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	4413      	add	r3, r2
 800dea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	68ba      	ldr	r2, [r7, #8]
 800dea8:	0151      	lsls	r1, r2, #5
 800deaa:	68fa      	ldr	r2, [r7, #12]
 800deac:	440a      	add	r2, r1
 800deae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800deb2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800deb6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	015a      	lsls	r2, r3, #5
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	4413      	add	r3, r2
 800dec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	68ba      	ldr	r2, [r7, #8]
 800dec8:	0151      	lsls	r1, r2, #5
 800deca:	68fa      	ldr	r2, [r7, #12]
 800decc:	440a      	add	r2, r1
 800dece:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ded2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ded6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	781b      	ldrb	r3, [r3, #0]
 800dee4:	f003 030f 	and.w	r3, r3, #15
 800dee8:	2101      	movs	r1, #1
 800deea:	fa01 f303 	lsl.w	r3, r1, r3
 800deee:	041b      	lsls	r3, r3, #16
 800def0:	43db      	mvns	r3, r3
 800def2:	68f9      	ldr	r1, [r7, #12]
 800def4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800def8:	4013      	ands	r3, r2
 800defa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df02:	69da      	ldr	r2, [r3, #28]
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	f003 030f 	and.w	r3, r3, #15
 800df0c:	2101      	movs	r1, #1
 800df0e:	fa01 f303 	lsl.w	r3, r1, r3
 800df12:	041b      	lsls	r3, r3, #16
 800df14:	43db      	mvns	r3, r3
 800df16:	68f9      	ldr	r1, [r7, #12]
 800df18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800df1c:	4013      	ands	r3, r2
 800df1e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	015a      	lsls	r2, r3, #5
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	4413      	add	r3, r2
 800df28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df2c:	681a      	ldr	r2, [r3, #0]
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	0159      	lsls	r1, r3, #5
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	440b      	add	r3, r1
 800df36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df3a:	4619      	mov	r1, r3
 800df3c:	4b05      	ldr	r3, [pc, #20]	; (800df54 <USB_DeactivateEndpoint+0x1b4>)
 800df3e:	4013      	ands	r3, r2
 800df40:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800df42:	2300      	movs	r3, #0
}
 800df44:	4618      	mov	r0, r3
 800df46:	3714      	adds	r7, #20
 800df48:	46bd      	mov	sp, r7
 800df4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4e:	4770      	bx	lr
 800df50:	ec337800 	.word	0xec337800
 800df54:	eff37800 	.word	0xeff37800

0800df58 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b086      	sub	sp, #24
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	785b      	ldrb	r3, [r3, #1]
 800df70:	2b01      	cmp	r3, #1
 800df72:	f040 810a 	bne.w	800e18a <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	699b      	ldr	r3, [r3, #24]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d132      	bne.n	800dfe4 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	015a      	lsls	r2, r3, #5
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	4413      	add	r3, r2
 800df86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df8a:	691b      	ldr	r3, [r3, #16]
 800df8c:	693a      	ldr	r2, [r7, #16]
 800df8e:	0151      	lsls	r1, r2, #5
 800df90:	697a      	ldr	r2, [r7, #20]
 800df92:	440a      	add	r2, r1
 800df94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800df9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dfa0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	015a      	lsls	r2, r3, #5
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	4413      	add	r3, r2
 800dfaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfae:	691b      	ldr	r3, [r3, #16]
 800dfb0:	693a      	ldr	r2, [r7, #16]
 800dfb2:	0151      	lsls	r1, r2, #5
 800dfb4:	697a      	ldr	r2, [r7, #20]
 800dfb6:	440a      	add	r2, r1
 800dfb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dfc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dfc2:	693b      	ldr	r3, [r7, #16]
 800dfc4:	015a      	lsls	r2, r3, #5
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	4413      	add	r3, r2
 800dfca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfce:	691b      	ldr	r3, [r3, #16]
 800dfd0:	693a      	ldr	r2, [r7, #16]
 800dfd2:	0151      	lsls	r1, r2, #5
 800dfd4:	697a      	ldr	r2, [r7, #20]
 800dfd6:	440a      	add	r2, r1
 800dfd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfdc:	0cdb      	lsrs	r3, r3, #19
 800dfde:	04db      	lsls	r3, r3, #19
 800dfe0:	6113      	str	r3, [r2, #16]
 800dfe2:	e074      	b.n	800e0ce <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	015a      	lsls	r2, r3, #5
 800dfe8:	697b      	ldr	r3, [r7, #20]
 800dfea:	4413      	add	r3, r2
 800dfec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dff0:	691b      	ldr	r3, [r3, #16]
 800dff2:	693a      	ldr	r2, [r7, #16]
 800dff4:	0151      	lsls	r1, r2, #5
 800dff6:	697a      	ldr	r2, [r7, #20]
 800dff8:	440a      	add	r2, r1
 800dffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dffe:	0cdb      	lsrs	r3, r3, #19
 800e000:	04db      	lsls	r3, r3, #19
 800e002:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	015a      	lsls	r2, r3, #5
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	4413      	add	r3, r2
 800e00c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e010:	691b      	ldr	r3, [r3, #16]
 800e012:	693a      	ldr	r2, [r7, #16]
 800e014:	0151      	lsls	r1, r2, #5
 800e016:	697a      	ldr	r2, [r7, #20]
 800e018:	440a      	add	r2, r1
 800e01a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e01e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e022:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e026:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	015a      	lsls	r2, r3, #5
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	4413      	add	r3, r2
 800e030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e034:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	6999      	ldr	r1, [r3, #24]
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	68db      	ldr	r3, [r3, #12]
 800e03e:	440b      	add	r3, r1
 800e040:	1e59      	subs	r1, r3, #1
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	68db      	ldr	r3, [r3, #12]
 800e046:	fbb1 f3f3 	udiv	r3, r1, r3
 800e04a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e04c:	4b9e      	ldr	r3, [pc, #632]	; (800e2c8 <USB_EPStartXfer+0x370>)
 800e04e:	400b      	ands	r3, r1
 800e050:	6939      	ldr	r1, [r7, #16]
 800e052:	0148      	lsls	r0, r1, #5
 800e054:	6979      	ldr	r1, [r7, #20]
 800e056:	4401      	add	r1, r0
 800e058:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e05c:	4313      	orrs	r3, r2
 800e05e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e060:	693b      	ldr	r3, [r7, #16]
 800e062:	015a      	lsls	r2, r3, #5
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	4413      	add	r3, r2
 800e068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e06c:	691a      	ldr	r2, [r3, #16]
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	699b      	ldr	r3, [r3, #24]
 800e072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e076:	6939      	ldr	r1, [r7, #16]
 800e078:	0148      	lsls	r0, r1, #5
 800e07a:	6979      	ldr	r1, [r7, #20]
 800e07c:	4401      	add	r1, r0
 800e07e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e082:	4313      	orrs	r3, r2
 800e084:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	791b      	ldrb	r3, [r3, #4]
 800e08a:	2b01      	cmp	r3, #1
 800e08c:	d11f      	bne.n	800e0ce <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	015a      	lsls	r2, r3, #5
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	4413      	add	r3, r2
 800e096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e09a:	691b      	ldr	r3, [r3, #16]
 800e09c:	693a      	ldr	r2, [r7, #16]
 800e09e:	0151      	lsls	r1, r2, #5
 800e0a0:	697a      	ldr	r2, [r7, #20]
 800e0a2:	440a      	add	r2, r1
 800e0a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e0ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	015a      	lsls	r2, r3, #5
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	4413      	add	r3, r2
 800e0b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0ba:	691b      	ldr	r3, [r3, #16]
 800e0bc:	693a      	ldr	r2, [r7, #16]
 800e0be:	0151      	lsls	r1, r2, #5
 800e0c0:	697a      	ldr	r2, [r7, #20]
 800e0c2:	440a      	add	r2, r1
 800e0c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e0cc:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	015a      	lsls	r2, r3, #5
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	4413      	add	r3, r2
 800e0d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	693a      	ldr	r2, [r7, #16]
 800e0de:	0151      	lsls	r1, r2, #5
 800e0e0:	697a      	ldr	r2, [r7, #20]
 800e0e2:	440a      	add	r2, r1
 800e0e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e0ec:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	791b      	ldrb	r3, [r3, #4]
 800e0f2:	2b01      	cmp	r3, #1
 800e0f4:	d015      	beq.n	800e122 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	699b      	ldr	r3, [r3, #24]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	f000 8106 	beq.w	800e30c <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	781b      	ldrb	r3, [r3, #0]
 800e10c:	f003 030f 	and.w	r3, r3, #15
 800e110:	2101      	movs	r1, #1
 800e112:	fa01 f303 	lsl.w	r3, r1, r3
 800e116:	6979      	ldr	r1, [r7, #20]
 800e118:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e11c:	4313      	orrs	r3, r2
 800e11e:	634b      	str	r3, [r1, #52]	; 0x34
 800e120:	e0f4      	b.n	800e30c <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e128:	689b      	ldr	r3, [r3, #8]
 800e12a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d110      	bne.n	800e154 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	015a      	lsls	r2, r3, #5
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	4413      	add	r3, r2
 800e13a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	693a      	ldr	r2, [r7, #16]
 800e142:	0151      	lsls	r1, r2, #5
 800e144:	697a      	ldr	r2, [r7, #20]
 800e146:	440a      	add	r2, r1
 800e148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e14c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e150:	6013      	str	r3, [r2, #0]
 800e152:	e00f      	b.n	800e174 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	015a      	lsls	r2, r3, #5
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	4413      	add	r3, r2
 800e15c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	693a      	ldr	r2, [r7, #16]
 800e164:	0151      	lsls	r1, r2, #5
 800e166:	697a      	ldr	r2, [r7, #20]
 800e168:	440a      	add	r2, r1
 800e16a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e16e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e172:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	6919      	ldr	r1, [r3, #16]
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	781a      	ldrb	r2, [r3, #0]
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	699b      	ldr	r3, [r3, #24]
 800e180:	b29b      	uxth	r3, r3
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f000 fa94 	bl	800e6b0 <USB_WritePacket>
 800e188:	e0c0      	b.n	800e30c <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e18a:	693b      	ldr	r3, [r7, #16]
 800e18c:	015a      	lsls	r2, r3, #5
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	4413      	add	r3, r2
 800e192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e196:	691b      	ldr	r3, [r3, #16]
 800e198:	693a      	ldr	r2, [r7, #16]
 800e19a:	0151      	lsls	r1, r2, #5
 800e19c:	697a      	ldr	r2, [r7, #20]
 800e19e:	440a      	add	r2, r1
 800e1a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e1a4:	0cdb      	lsrs	r3, r3, #19
 800e1a6:	04db      	lsls	r3, r3, #19
 800e1a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e1aa:	693b      	ldr	r3, [r7, #16]
 800e1ac:	015a      	lsls	r2, r3, #5
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	4413      	add	r3, r2
 800e1b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1b6:	691b      	ldr	r3, [r3, #16]
 800e1b8:	693a      	ldr	r2, [r7, #16]
 800e1ba:	0151      	lsls	r1, r2, #5
 800e1bc:	697a      	ldr	r2, [r7, #20]
 800e1be:	440a      	add	r2, r1
 800e1c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e1c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e1c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e1cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	699b      	ldr	r3, [r3, #24]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d123      	bne.n	800e21e <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	015a      	lsls	r2, r3, #5
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	4413      	add	r3, r2
 800e1de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1e2:	691a      	ldr	r2, [r3, #16]
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	68db      	ldr	r3, [r3, #12]
 800e1e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e1ec:	6939      	ldr	r1, [r7, #16]
 800e1ee:	0148      	lsls	r0, r1, #5
 800e1f0:	6979      	ldr	r1, [r7, #20]
 800e1f2:	4401      	add	r1, r0
 800e1f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e1f8:	4313      	orrs	r3, r2
 800e1fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	015a      	lsls	r2, r3, #5
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	4413      	add	r3, r2
 800e204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e208:	691b      	ldr	r3, [r3, #16]
 800e20a:	693a      	ldr	r2, [r7, #16]
 800e20c:	0151      	lsls	r1, r2, #5
 800e20e:	697a      	ldr	r2, [r7, #20]
 800e210:	440a      	add	r2, r1
 800e212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e216:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e21a:	6113      	str	r3, [r2, #16]
 800e21c:	e037      	b.n	800e28e <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	699a      	ldr	r2, [r3, #24]
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	68db      	ldr	r3, [r3, #12]
 800e226:	4413      	add	r3, r2
 800e228:	1e5a      	subs	r2, r3, #1
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	68db      	ldr	r3, [r3, #12]
 800e22e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e232:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	68db      	ldr	r3, [r3, #12]
 800e238:	89fa      	ldrh	r2, [r7, #14]
 800e23a:	fb03 f202 	mul.w	r2, r3, r2
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e242:	693b      	ldr	r3, [r7, #16]
 800e244:	015a      	lsls	r2, r3, #5
 800e246:	697b      	ldr	r3, [r7, #20]
 800e248:	4413      	add	r3, r2
 800e24a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e24e:	691a      	ldr	r2, [r3, #16]
 800e250:	89fb      	ldrh	r3, [r7, #14]
 800e252:	04d9      	lsls	r1, r3, #19
 800e254:	4b1c      	ldr	r3, [pc, #112]	; (800e2c8 <USB_EPStartXfer+0x370>)
 800e256:	400b      	ands	r3, r1
 800e258:	6939      	ldr	r1, [r7, #16]
 800e25a:	0148      	lsls	r0, r1, #5
 800e25c:	6979      	ldr	r1, [r7, #20]
 800e25e:	4401      	add	r1, r0
 800e260:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e264:	4313      	orrs	r3, r2
 800e266:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	015a      	lsls	r2, r3, #5
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	4413      	add	r3, r2
 800e270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e274:	691a      	ldr	r2, [r3, #16]
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	69db      	ldr	r3, [r3, #28]
 800e27a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e27e:	6939      	ldr	r1, [r7, #16]
 800e280:	0148      	lsls	r0, r1, #5
 800e282:	6979      	ldr	r1, [r7, #20]
 800e284:	4401      	add	r1, r0
 800e286:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e28a:	4313      	orrs	r3, r2
 800e28c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	791b      	ldrb	r3, [r3, #4]
 800e292:	2b01      	cmp	r3, #1
 800e294:	d12a      	bne.n	800e2ec <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e29c:	689b      	ldr	r3, [r3, #8]
 800e29e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d112      	bne.n	800e2cc <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	015a      	lsls	r2, r3, #5
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	4413      	add	r3, r2
 800e2ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	693a      	ldr	r2, [r7, #16]
 800e2b6:	0151      	lsls	r1, r2, #5
 800e2b8:	697a      	ldr	r2, [r7, #20]
 800e2ba:	440a      	add	r2, r1
 800e2bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e2c4:	6013      	str	r3, [r2, #0]
 800e2c6:	e011      	b.n	800e2ec <USB_EPStartXfer+0x394>
 800e2c8:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	015a      	lsls	r2, r3, #5
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	4413      	add	r3, r2
 800e2d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	693a      	ldr	r2, [r7, #16]
 800e2dc:	0151      	lsls	r1, r2, #5
 800e2de:	697a      	ldr	r2, [r7, #20]
 800e2e0:	440a      	add	r2, r1
 800e2e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e2ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e2ec:	693b      	ldr	r3, [r7, #16]
 800e2ee:	015a      	lsls	r2, r3, #5
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	4413      	add	r3, r2
 800e2f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	693a      	ldr	r2, [r7, #16]
 800e2fc:	0151      	lsls	r1, r2, #5
 800e2fe:	697a      	ldr	r2, [r7, #20]
 800e300:	440a      	add	r2, r1
 800e302:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e306:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e30a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e30c:	2300      	movs	r3, #0
}
 800e30e:	4618      	mov	r0, r3
 800e310:	3718      	adds	r7, #24
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
 800e316:	bf00      	nop

0800e318 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e318:	b480      	push	{r7}
 800e31a:	b085      	sub	sp, #20
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
 800e320:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	781b      	ldrb	r3, [r3, #0]
 800e32a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	785b      	ldrb	r3, [r3, #1]
 800e330:	2b01      	cmp	r3, #1
 800e332:	f040 80ab 	bne.w	800e48c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	699b      	ldr	r3, [r3, #24]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d132      	bne.n	800e3a4 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	015a      	lsls	r2, r3, #5
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	4413      	add	r3, r2
 800e346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e34a:	691b      	ldr	r3, [r3, #16]
 800e34c:	68ba      	ldr	r2, [r7, #8]
 800e34e:	0151      	lsls	r1, r2, #5
 800e350:	68fa      	ldr	r2, [r7, #12]
 800e352:	440a      	add	r2, r1
 800e354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e358:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e35c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e360:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	015a      	lsls	r2, r3, #5
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	4413      	add	r3, r2
 800e36a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e36e:	691b      	ldr	r3, [r3, #16]
 800e370:	68ba      	ldr	r2, [r7, #8]
 800e372:	0151      	lsls	r1, r2, #5
 800e374:	68fa      	ldr	r2, [r7, #12]
 800e376:	440a      	add	r2, r1
 800e378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e37c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e380:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	015a      	lsls	r2, r3, #5
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	4413      	add	r3, r2
 800e38a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e38e:	691b      	ldr	r3, [r3, #16]
 800e390:	68ba      	ldr	r2, [r7, #8]
 800e392:	0151      	lsls	r1, r2, #5
 800e394:	68fa      	ldr	r2, [r7, #12]
 800e396:	440a      	add	r2, r1
 800e398:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e39c:	0cdb      	lsrs	r3, r3, #19
 800e39e:	04db      	lsls	r3, r3, #19
 800e3a0:	6113      	str	r3, [r2, #16]
 800e3a2:	e04e      	b.n	800e442 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	015a      	lsls	r2, r3, #5
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	4413      	add	r3, r2
 800e3ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3b0:	691b      	ldr	r3, [r3, #16]
 800e3b2:	68ba      	ldr	r2, [r7, #8]
 800e3b4:	0151      	lsls	r1, r2, #5
 800e3b6:	68fa      	ldr	r2, [r7, #12]
 800e3b8:	440a      	add	r2, r1
 800e3ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3be:	0cdb      	lsrs	r3, r3, #19
 800e3c0:	04db      	lsls	r3, r3, #19
 800e3c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	015a      	lsls	r2, r3, #5
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	4413      	add	r3, r2
 800e3cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3d0:	691b      	ldr	r3, [r3, #16]
 800e3d2:	68ba      	ldr	r2, [r7, #8]
 800e3d4:	0151      	lsls	r1, r2, #5
 800e3d6:	68fa      	ldr	r2, [r7, #12]
 800e3d8:	440a      	add	r2, r1
 800e3da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e3e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e3e6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	699a      	ldr	r2, [r3, #24]
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	68db      	ldr	r3, [r3, #12]
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	d903      	bls.n	800e3fc <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	68da      	ldr	r2, [r3, #12]
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	015a      	lsls	r2, r3, #5
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	4413      	add	r3, r2
 800e404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e408:	691b      	ldr	r3, [r3, #16]
 800e40a:	68ba      	ldr	r2, [r7, #8]
 800e40c:	0151      	lsls	r1, r2, #5
 800e40e:	68fa      	ldr	r2, [r7, #12]
 800e410:	440a      	add	r2, r1
 800e412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e416:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e41a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	015a      	lsls	r2, r3, #5
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	4413      	add	r3, r2
 800e424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e428:	691a      	ldr	r2, [r3, #16]
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	699b      	ldr	r3, [r3, #24]
 800e42e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e432:	68b9      	ldr	r1, [r7, #8]
 800e434:	0148      	lsls	r0, r1, #5
 800e436:	68f9      	ldr	r1, [r7, #12]
 800e438:	4401      	add	r1, r0
 800e43a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e43e:	4313      	orrs	r3, r2
 800e440:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	015a      	lsls	r2, r3, #5
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	4413      	add	r3, r2
 800e44a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	68ba      	ldr	r2, [r7, #8]
 800e452:	0151      	lsls	r1, r2, #5
 800e454:	68fa      	ldr	r2, [r7, #12]
 800e456:	440a      	add	r2, r1
 800e458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e45c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e460:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	699b      	ldr	r3, [r3, #24]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d071      	beq.n	800e54e <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	781b      	ldrb	r3, [r3, #0]
 800e476:	f003 030f 	and.w	r3, r3, #15
 800e47a:	2101      	movs	r1, #1
 800e47c:	fa01 f303 	lsl.w	r3, r1, r3
 800e480:	68f9      	ldr	r1, [r7, #12]
 800e482:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e486:	4313      	orrs	r3, r2
 800e488:	634b      	str	r3, [r1, #52]	; 0x34
 800e48a:	e060      	b.n	800e54e <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	015a      	lsls	r2, r3, #5
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	4413      	add	r3, r2
 800e494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e498:	691b      	ldr	r3, [r3, #16]
 800e49a:	68ba      	ldr	r2, [r7, #8]
 800e49c:	0151      	lsls	r1, r2, #5
 800e49e:	68fa      	ldr	r2, [r7, #12]
 800e4a0:	440a      	add	r2, r1
 800e4a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e4a6:	0cdb      	lsrs	r3, r3, #19
 800e4a8:	04db      	lsls	r3, r3, #19
 800e4aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	015a      	lsls	r2, r3, #5
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	4413      	add	r3, r2
 800e4b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4b8:	691b      	ldr	r3, [r3, #16]
 800e4ba:	68ba      	ldr	r2, [r7, #8]
 800e4bc:	0151      	lsls	r1, r2, #5
 800e4be:	68fa      	ldr	r2, [r7, #12]
 800e4c0:	440a      	add	r2, r1
 800e4c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e4c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e4ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e4ce:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	699b      	ldr	r3, [r3, #24]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d003      	beq.n	800e4e0 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	68da      	ldr	r2, [r3, #12]
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	68da      	ldr	r2, [r3, #12]
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	015a      	lsls	r2, r3, #5
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	4413      	add	r3, r2
 800e4f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4f4:	691b      	ldr	r3, [r3, #16]
 800e4f6:	68ba      	ldr	r2, [r7, #8]
 800e4f8:	0151      	lsls	r1, r2, #5
 800e4fa:	68fa      	ldr	r2, [r7, #12]
 800e4fc:	440a      	add	r2, r1
 800e4fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e502:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e506:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	015a      	lsls	r2, r3, #5
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	4413      	add	r3, r2
 800e510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e514:	691a      	ldr	r2, [r3, #16]
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	69db      	ldr	r3, [r3, #28]
 800e51a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e51e:	68b9      	ldr	r1, [r7, #8]
 800e520:	0148      	lsls	r0, r1, #5
 800e522:	68f9      	ldr	r1, [r7, #12]
 800e524:	4401      	add	r1, r0
 800e526:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e52a:	4313      	orrs	r3, r2
 800e52c:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	015a      	lsls	r2, r3, #5
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	4413      	add	r3, r2
 800e536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	68ba      	ldr	r2, [r7, #8]
 800e53e:	0151      	lsls	r1, r2, #5
 800e540:	68fa      	ldr	r2, [r7, #12]
 800e542:	440a      	add	r2, r1
 800e544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e548:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e54c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e54e:	2300      	movs	r3, #0
}
 800e550:	4618      	mov	r0, r3
 800e552:	3714      	adds	r7, #20
 800e554:	46bd      	mov	sp, r7
 800e556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55a:	4770      	bx	lr

0800e55c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e55c:	b480      	push	{r7}
 800e55e:	b087      	sub	sp, #28
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
 800e564:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e566:	2300      	movs	r3, #0
 800e568:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e56a:	2300      	movs	r3, #0
 800e56c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	785b      	ldrb	r3, [r3, #1]
 800e576:	2b01      	cmp	r3, #1
 800e578:	d14a      	bne.n	800e610 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	781b      	ldrb	r3, [r3, #0]
 800e57e:	015a      	lsls	r2, r3, #5
 800e580:	693b      	ldr	r3, [r7, #16]
 800e582:	4413      	add	r3, r2
 800e584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e58e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e592:	f040 8086 	bne.w	800e6a2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	015a      	lsls	r2, r3, #5
 800e59c:	693b      	ldr	r3, [r7, #16]
 800e59e:	4413      	add	r3, r2
 800e5a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	683a      	ldr	r2, [r7, #0]
 800e5a8:	7812      	ldrb	r2, [r2, #0]
 800e5aa:	0151      	lsls	r1, r2, #5
 800e5ac:	693a      	ldr	r2, [r7, #16]
 800e5ae:	440a      	add	r2, r1
 800e5b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e5b8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	781b      	ldrb	r3, [r3, #0]
 800e5be:	015a      	lsls	r2, r3, #5
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	4413      	add	r3, r2
 800e5c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	683a      	ldr	r2, [r7, #0]
 800e5cc:	7812      	ldrb	r2, [r2, #0]
 800e5ce:	0151      	lsls	r1, r2, #5
 800e5d0:	693a      	ldr	r2, [r7, #16]
 800e5d2:	440a      	add	r2, r1
 800e5d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e5dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	3301      	adds	r3, #1
 800e5e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	f242 7210 	movw	r2, #10000	; 0x2710
 800e5ea:	4293      	cmp	r3, r2
 800e5ec:	d902      	bls.n	800e5f4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e5ee:	2301      	movs	r3, #1
 800e5f0:	75fb      	strb	r3, [r7, #23]
          break;
 800e5f2:	e056      	b.n	800e6a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	781b      	ldrb	r3, [r3, #0]
 800e5f8:	015a      	lsls	r2, r3, #5
 800e5fa:	693b      	ldr	r3, [r7, #16]
 800e5fc:	4413      	add	r3, r2
 800e5fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e608:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e60c:	d0e7      	beq.n	800e5de <USB_EPStopXfer+0x82>
 800e60e:	e048      	b.n	800e6a2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	781b      	ldrb	r3, [r3, #0]
 800e614:	015a      	lsls	r2, r3, #5
 800e616:	693b      	ldr	r3, [r7, #16]
 800e618:	4413      	add	r3, r2
 800e61a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e628:	d13b      	bne.n	800e6a2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	781b      	ldrb	r3, [r3, #0]
 800e62e:	015a      	lsls	r2, r3, #5
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	4413      	add	r3, r2
 800e634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	683a      	ldr	r2, [r7, #0]
 800e63c:	7812      	ldrb	r2, [r2, #0]
 800e63e:	0151      	lsls	r1, r2, #5
 800e640:	693a      	ldr	r2, [r7, #16]
 800e642:	440a      	add	r2, r1
 800e644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e648:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e64c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	015a      	lsls	r2, r3, #5
 800e654:	693b      	ldr	r3, [r7, #16]
 800e656:	4413      	add	r3, r2
 800e658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	683a      	ldr	r2, [r7, #0]
 800e660:	7812      	ldrb	r2, [r2, #0]
 800e662:	0151      	lsls	r1, r2, #5
 800e664:	693a      	ldr	r2, [r7, #16]
 800e666:	440a      	add	r2, r1
 800e668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e66c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e670:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	3301      	adds	r3, #1
 800e676:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	f242 7210 	movw	r2, #10000	; 0x2710
 800e67e:	4293      	cmp	r3, r2
 800e680:	d902      	bls.n	800e688 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e682:	2301      	movs	r3, #1
 800e684:	75fb      	strb	r3, [r7, #23]
          break;
 800e686:	e00c      	b.n	800e6a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	781b      	ldrb	r3, [r3, #0]
 800e68c:	015a      	lsls	r2, r3, #5
 800e68e:	693b      	ldr	r3, [r7, #16]
 800e690:	4413      	add	r3, r2
 800e692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e69c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e6a0:	d0e7      	beq.n	800e672 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e6a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	371c      	adds	r7, #28
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ae:	4770      	bx	lr

0800e6b0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	b089      	sub	sp, #36	; 0x24
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	60f8      	str	r0, [r7, #12]
 800e6b8:	60b9      	str	r1, [r7, #8]
 800e6ba:	4611      	mov	r1, r2
 800e6bc:	461a      	mov	r2, r3
 800e6be:	460b      	mov	r3, r1
 800e6c0:	71fb      	strb	r3, [r7, #7]
 800e6c2:	4613      	mov	r3, r2
 800e6c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800e6ce:	88bb      	ldrh	r3, [r7, #4]
 800e6d0:	3303      	adds	r3, #3
 800e6d2:	089b      	lsrs	r3, r3, #2
 800e6d4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	61bb      	str	r3, [r7, #24]
 800e6da:	e018      	b.n	800e70e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e6dc:	79fb      	ldrb	r3, [r7, #7]
 800e6de:	031a      	lsls	r2, r3, #12
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	4413      	add	r3, r2
 800e6e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6e8:	461a      	mov	r2, r3
 800e6ea:	69fb      	ldr	r3, [r7, #28]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	6013      	str	r3, [r2, #0]
    pSrc++;
 800e6f0:	69fb      	ldr	r3, [r7, #28]
 800e6f2:	3301      	adds	r3, #1
 800e6f4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800e6f6:	69fb      	ldr	r3, [r7, #28]
 800e6f8:	3301      	adds	r3, #1
 800e6fa:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800e6fc:	69fb      	ldr	r3, [r7, #28]
 800e6fe:	3301      	adds	r3, #1
 800e700:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800e702:	69fb      	ldr	r3, [r7, #28]
 800e704:	3301      	adds	r3, #1
 800e706:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800e708:	69bb      	ldr	r3, [r7, #24]
 800e70a:	3301      	adds	r3, #1
 800e70c:	61bb      	str	r3, [r7, #24]
 800e70e:	69ba      	ldr	r2, [r7, #24]
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	429a      	cmp	r2, r3
 800e714:	d3e2      	bcc.n	800e6dc <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800e716:	2300      	movs	r3, #0
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3724      	adds	r7, #36	; 0x24
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr

0800e724 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e724:	b480      	push	{r7}
 800e726:	b08b      	sub	sp, #44	; 0x2c
 800e728:	af00      	add	r7, sp, #0
 800e72a:	60f8      	str	r0, [r7, #12]
 800e72c:	60b9      	str	r1, [r7, #8]
 800e72e:	4613      	mov	r3, r2
 800e730:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e73a:	88fb      	ldrh	r3, [r7, #6]
 800e73c:	089b      	lsrs	r3, r3, #2
 800e73e:	b29b      	uxth	r3, r3
 800e740:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e742:	88fb      	ldrh	r3, [r7, #6]
 800e744:	f003 0303 	and.w	r3, r3, #3
 800e748:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e74a:	2300      	movs	r3, #0
 800e74c:	623b      	str	r3, [r7, #32]
 800e74e:	e014      	b.n	800e77a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e750:	69bb      	ldr	r3, [r7, #24]
 800e752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e756:	681a      	ldr	r2, [r3, #0]
 800e758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e75a:	601a      	str	r2, [r3, #0]
    pDest++;
 800e75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e75e:	3301      	adds	r3, #1
 800e760:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e764:	3301      	adds	r3, #1
 800e766:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e76a:	3301      	adds	r3, #1
 800e76c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e770:	3301      	adds	r3, #1
 800e772:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e774:	6a3b      	ldr	r3, [r7, #32]
 800e776:	3301      	adds	r3, #1
 800e778:	623b      	str	r3, [r7, #32]
 800e77a:	6a3a      	ldr	r2, [r7, #32]
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	429a      	cmp	r2, r3
 800e780:	d3e6      	bcc.n	800e750 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e782:	8bfb      	ldrh	r3, [r7, #30]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d01e      	beq.n	800e7c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e788:	2300      	movs	r3, #0
 800e78a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e78c:	69bb      	ldr	r3, [r7, #24]
 800e78e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e792:	461a      	mov	r2, r3
 800e794:	f107 0310 	add.w	r3, r7, #16
 800e798:	6812      	ldr	r2, [r2, #0]
 800e79a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e79c:	693a      	ldr	r2, [r7, #16]
 800e79e:	6a3b      	ldr	r3, [r7, #32]
 800e7a0:	b2db      	uxtb	r3, r3
 800e7a2:	00db      	lsls	r3, r3, #3
 800e7a4:	fa22 f303 	lsr.w	r3, r2, r3
 800e7a8:	b2da      	uxtb	r2, r3
 800e7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ac:	701a      	strb	r2, [r3, #0]
      i++;
 800e7ae:	6a3b      	ldr	r3, [r7, #32]
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	623b      	str	r3, [r7, #32]
      pDest++;
 800e7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b6:	3301      	adds	r3, #1
 800e7b8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e7ba:	8bfb      	ldrh	r3, [r7, #30]
 800e7bc:	3b01      	subs	r3, #1
 800e7be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e7c0:	8bfb      	ldrh	r3, [r7, #30]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d1ea      	bne.n	800e79c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	372c      	adds	r7, #44	; 0x2c
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d2:	4770      	bx	lr

0800e7d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e7d4:	b480      	push	{r7}
 800e7d6:	b085      	sub	sp, #20
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
 800e7dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	781b      	ldrb	r3, [r3, #0]
 800e7e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	785b      	ldrb	r3, [r3, #1]
 800e7ec:	2b01      	cmp	r3, #1
 800e7ee:	d12c      	bne.n	800e84a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	015a      	lsls	r2, r3, #5
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	4413      	add	r3, r2
 800e7f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	db12      	blt.n	800e828 <USB_EPSetStall+0x54>
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d00f      	beq.n	800e828 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	015a      	lsls	r2, r3, #5
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	4413      	add	r3, r2
 800e810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	68ba      	ldr	r2, [r7, #8]
 800e818:	0151      	lsls	r1, r2, #5
 800e81a:	68fa      	ldr	r2, [r7, #12]
 800e81c:	440a      	add	r2, r1
 800e81e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e822:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e826:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	015a      	lsls	r2, r3, #5
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	4413      	add	r3, r2
 800e830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	68ba      	ldr	r2, [r7, #8]
 800e838:	0151      	lsls	r1, r2, #5
 800e83a:	68fa      	ldr	r2, [r7, #12]
 800e83c:	440a      	add	r2, r1
 800e83e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e842:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e846:	6013      	str	r3, [r2, #0]
 800e848:	e02b      	b.n	800e8a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	015a      	lsls	r2, r3, #5
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	4413      	add	r3, r2
 800e852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	db12      	blt.n	800e882 <USB_EPSetStall+0xae>
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d00f      	beq.n	800e882 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	015a      	lsls	r2, r3, #5
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	4413      	add	r3, r2
 800e86a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	68ba      	ldr	r2, [r7, #8]
 800e872:	0151      	lsls	r1, r2, #5
 800e874:	68fa      	ldr	r2, [r7, #12]
 800e876:	440a      	add	r2, r1
 800e878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e87c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e880:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	015a      	lsls	r2, r3, #5
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	4413      	add	r3, r2
 800e88a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	68ba      	ldr	r2, [r7, #8]
 800e892:	0151      	lsls	r1, r2, #5
 800e894:	68fa      	ldr	r2, [r7, #12]
 800e896:	440a      	add	r2, r1
 800e898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e89c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e8a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e8a2:	2300      	movs	r3, #0
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3714      	adds	r7, #20
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ae:	4770      	bx	lr

0800e8b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b085      	sub	sp, #20
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
 800e8b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	781b      	ldrb	r3, [r3, #0]
 800e8c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	785b      	ldrb	r3, [r3, #1]
 800e8c8:	2b01      	cmp	r3, #1
 800e8ca:	d128      	bne.n	800e91e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	015a      	lsls	r2, r3, #5
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	4413      	add	r3, r2
 800e8d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	68ba      	ldr	r2, [r7, #8]
 800e8dc:	0151      	lsls	r1, r2, #5
 800e8de:	68fa      	ldr	r2, [r7, #12]
 800e8e0:	440a      	add	r2, r1
 800e8e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e8ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	791b      	ldrb	r3, [r3, #4]
 800e8f0:	2b03      	cmp	r3, #3
 800e8f2:	d003      	beq.n	800e8fc <USB_EPClearStall+0x4c>
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	791b      	ldrb	r3, [r3, #4]
 800e8f8:	2b02      	cmp	r3, #2
 800e8fa:	d138      	bne.n	800e96e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	015a      	lsls	r2, r3, #5
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	4413      	add	r3, r2
 800e904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	68ba      	ldr	r2, [r7, #8]
 800e90c:	0151      	lsls	r1, r2, #5
 800e90e:	68fa      	ldr	r2, [r7, #12]
 800e910:	440a      	add	r2, r1
 800e912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e91a:	6013      	str	r3, [r2, #0]
 800e91c:	e027      	b.n	800e96e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e91e:	68bb      	ldr	r3, [r7, #8]
 800e920:	015a      	lsls	r2, r3, #5
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	4413      	add	r3, r2
 800e926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	68ba      	ldr	r2, [r7, #8]
 800e92e:	0151      	lsls	r1, r2, #5
 800e930:	68fa      	ldr	r2, [r7, #12]
 800e932:	440a      	add	r2, r1
 800e934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e938:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e93c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	791b      	ldrb	r3, [r3, #4]
 800e942:	2b03      	cmp	r3, #3
 800e944:	d003      	beq.n	800e94e <USB_EPClearStall+0x9e>
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	791b      	ldrb	r3, [r3, #4]
 800e94a:	2b02      	cmp	r3, #2
 800e94c:	d10f      	bne.n	800e96e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	015a      	lsls	r2, r3, #5
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	4413      	add	r3, r2
 800e956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	68ba      	ldr	r2, [r7, #8]
 800e95e:	0151      	lsls	r1, r2, #5
 800e960:	68fa      	ldr	r2, [r7, #12]
 800e962:	440a      	add	r2, r1
 800e964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e96c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e96e:	2300      	movs	r3, #0
}
 800e970:	4618      	mov	r0, r3
 800e972:	3714      	adds	r7, #20
 800e974:	46bd      	mov	sp, r7
 800e976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97a:	4770      	bx	lr

0800e97c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e97c:	b480      	push	{r7}
 800e97e:	b085      	sub	sp, #20
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	460b      	mov	r3, r1
 800e986:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	68fa      	ldr	r2, [r7, #12]
 800e996:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e99a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e99e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9a6:	681a      	ldr	r2, [r3, #0]
 800e9a8:	78fb      	ldrb	r3, [r7, #3]
 800e9aa:	011b      	lsls	r3, r3, #4
 800e9ac:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e9b0:	68f9      	ldr	r1, [r7, #12]
 800e9b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e9b6:	4313      	orrs	r3, r2
 800e9b8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e9ba:	2300      	movs	r3, #0
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3714      	adds	r7, #20
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c6:	4770      	bx	lr

0800e9c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b085      	sub	sp, #20
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	68fa      	ldr	r2, [r7, #12]
 800e9de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e9e2:	f023 0303 	bic.w	r3, r3, #3
 800e9e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9ee:	685b      	ldr	r3, [r3, #4]
 800e9f0:	68fa      	ldr	r2, [r7, #12]
 800e9f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e9f6:	f023 0302 	bic.w	r3, r3, #2
 800e9fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e9fc:	2300      	movs	r3, #0
}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3714      	adds	r7, #20
 800ea02:	46bd      	mov	sp, r7
 800ea04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea08:	4770      	bx	lr

0800ea0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ea0a:	b480      	push	{r7}
 800ea0c:	b085      	sub	sp, #20
 800ea0e:	af00      	add	r7, sp, #0
 800ea10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	68fa      	ldr	r2, [r7, #12]
 800ea20:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ea24:	f023 0303 	bic.w	r3, r3, #3
 800ea28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea30:	685b      	ldr	r3, [r3, #4]
 800ea32:	68fa      	ldr	r2, [r7, #12]
 800ea34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ea38:	f043 0302 	orr.w	r3, r3, #2
 800ea3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ea3e:	2300      	movs	r3, #0
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	3714      	adds	r7, #20
 800ea44:	46bd      	mov	sp, r7
 800ea46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4a:	4770      	bx	lr

0800ea4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ea4c:	b480      	push	{r7}
 800ea4e:	b085      	sub	sp, #20
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	695b      	ldr	r3, [r3, #20]
 800ea58:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	699b      	ldr	r3, [r3, #24]
 800ea5e:	68fa      	ldr	r2, [r7, #12]
 800ea60:	4013      	ands	r3, r2
 800ea62:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ea64:	68fb      	ldr	r3, [r7, #12]
}
 800ea66:	4618      	mov	r0, r3
 800ea68:	3714      	adds	r7, #20
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea70:	4770      	bx	lr

0800ea72 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ea72:	b480      	push	{r7}
 800ea74:	b085      	sub	sp, #20
 800ea76:	af00      	add	r7, sp, #0
 800ea78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea84:	699b      	ldr	r3, [r3, #24]
 800ea86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea8e:	69db      	ldr	r3, [r3, #28]
 800ea90:	68ba      	ldr	r2, [r7, #8]
 800ea92:	4013      	ands	r3, r2
 800ea94:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	0c1b      	lsrs	r3, r3, #16
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3714      	adds	r7, #20
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr

0800eaa6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800eaa6:	b480      	push	{r7}
 800eaa8:	b085      	sub	sp, #20
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eab8:	699b      	ldr	r3, [r3, #24]
 800eaba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eac2:	69db      	ldr	r3, [r3, #28]
 800eac4:	68ba      	ldr	r2, [r7, #8]
 800eac6:	4013      	ands	r3, r2
 800eac8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800eaca:	68bb      	ldr	r3, [r7, #8]
 800eacc:	b29b      	uxth	r3, r3
}
 800eace:	4618      	mov	r0, r3
 800ead0:	3714      	adds	r7, #20
 800ead2:	46bd      	mov	sp, r7
 800ead4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead8:	4770      	bx	lr

0800eada <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800eada:	b480      	push	{r7}
 800eadc:	b085      	sub	sp, #20
 800eade:	af00      	add	r7, sp, #0
 800eae0:	6078      	str	r0, [r7, #4]
 800eae2:	460b      	mov	r3, r1
 800eae4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800eaea:	78fb      	ldrb	r3, [r7, #3]
 800eaec:	015a      	lsls	r2, r3, #5
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	4413      	add	r3, r2
 800eaf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eaf6:	689b      	ldr	r3, [r3, #8]
 800eaf8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb00:	695b      	ldr	r3, [r3, #20]
 800eb02:	68ba      	ldr	r2, [r7, #8]
 800eb04:	4013      	ands	r3, r2
 800eb06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eb08:	68bb      	ldr	r3, [r7, #8]
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3714      	adds	r7, #20
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb14:	4770      	bx	lr

0800eb16 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800eb16:	b480      	push	{r7}
 800eb18:	b087      	sub	sp, #28
 800eb1a:	af00      	add	r7, sp, #0
 800eb1c:	6078      	str	r0, [r7, #4]
 800eb1e:	460b      	mov	r3, r1
 800eb20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800eb26:	697b      	ldr	r3, [r7, #20]
 800eb28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb2c:	691b      	ldr	r3, [r3, #16]
 800eb2e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800eb30:	697b      	ldr	r3, [r7, #20]
 800eb32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb38:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800eb3a:	78fb      	ldrb	r3, [r7, #3]
 800eb3c:	f003 030f 	and.w	r3, r3, #15
 800eb40:	68fa      	ldr	r2, [r7, #12]
 800eb42:	fa22 f303 	lsr.w	r3, r2, r3
 800eb46:	01db      	lsls	r3, r3, #7
 800eb48:	b2db      	uxtb	r3, r3
 800eb4a:	693a      	ldr	r2, [r7, #16]
 800eb4c:	4313      	orrs	r3, r2
 800eb4e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800eb50:	78fb      	ldrb	r3, [r7, #3]
 800eb52:	015a      	lsls	r2, r3, #5
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	4413      	add	r3, r2
 800eb58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb5c:	689b      	ldr	r3, [r3, #8]
 800eb5e:	693a      	ldr	r2, [r7, #16]
 800eb60:	4013      	ands	r3, r2
 800eb62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eb64:	68bb      	ldr	r3, [r7, #8]
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	371c      	adds	r7, #28
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr

0800eb72 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800eb72:	b480      	push	{r7}
 800eb74:	b083      	sub	sp, #12
 800eb76:	af00      	add	r7, sp, #0
 800eb78:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	695b      	ldr	r3, [r3, #20]
 800eb7e:	f003 0301 	and.w	r3, r3, #1
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	370c      	adds	r7, #12
 800eb86:	46bd      	mov	sp, r7
 800eb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8c:	4770      	bx	lr

0800eb8e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800eb8e:	b480      	push	{r7}
 800eb90:	b085      	sub	sp, #20
 800eb92:	af00      	add	r7, sp, #0
 800eb94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	68fa      	ldr	r2, [r7, #12]
 800eba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eba8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ebac:	f023 0307 	bic.w	r3, r3, #7
 800ebb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebb8:	685b      	ldr	r3, [r3, #4]
 800ebba:	68fa      	ldr	r2, [r7, #12]
 800ebbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ebc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ebc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ebc6:	2300      	movs	r3, #0
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3714      	adds	r7, #20
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd2:	4770      	bx	lr

0800ebd4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b085      	sub	sp, #20
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	333c      	adds	r3, #60	; 0x3c
 800ebe6:	3304      	adds	r3, #4
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ebec:	68bb      	ldr	r3, [r7, #8]
 800ebee:	4a1c      	ldr	r2, [pc, #112]	; (800ec60 <USB_EP0_OutStart+0x8c>)
 800ebf0:	4293      	cmp	r3, r2
 800ebf2:	d90a      	bls.n	800ec0a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ec00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ec04:	d101      	bne.n	800ec0a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800ec06:	2300      	movs	r3, #0
 800ec08:	e024      	b.n	800ec54 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec10:	461a      	mov	r2, r3
 800ec12:	2300      	movs	r3, #0
 800ec14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec1c:	691b      	ldr	r3, [r3, #16]
 800ec1e:	68fa      	ldr	r2, [r7, #12]
 800ec20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ec28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec30:	691b      	ldr	r3, [r3, #16]
 800ec32:	68fa      	ldr	r2, [r7, #12]
 800ec34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec38:	f043 0318 	orr.w	r3, r3, #24
 800ec3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec44:	691b      	ldr	r3, [r3, #16]
 800ec46:	68fa      	ldr	r2, [r7, #12]
 800ec48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec4c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ec50:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800ec52:	2300      	movs	r3, #0
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	3714      	adds	r7, #20
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5e:	4770      	bx	lr
 800ec60:	4f54300a 	.word	0x4f54300a

0800ec64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b085      	sub	sp, #20
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	3301      	adds	r3, #1
 800ec74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	4a13      	ldr	r2, [pc, #76]	; (800ecc8 <USB_CoreReset+0x64>)
 800ec7a:	4293      	cmp	r3, r2
 800ec7c:	d901      	bls.n	800ec82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ec7e:	2303      	movs	r3, #3
 800ec80:	e01b      	b.n	800ecba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	691b      	ldr	r3, [r3, #16]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	daf2      	bge.n	800ec70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	691b      	ldr	r3, [r3, #16]
 800ec92:	f043 0201 	orr.w	r2, r3, #1
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	3301      	adds	r3, #1
 800ec9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	4a09      	ldr	r2, [pc, #36]	; (800ecc8 <USB_CoreReset+0x64>)
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d901      	bls.n	800ecac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800eca8:	2303      	movs	r3, #3
 800ecaa:	e006      	b.n	800ecba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	691b      	ldr	r3, [r3, #16]
 800ecb0:	f003 0301 	and.w	r3, r3, #1
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	d0f0      	beq.n	800ec9a <USB_CoreReset+0x36>

  return HAL_OK;
 800ecb8:	2300      	movs	r3, #0
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	3714      	adds	r7, #20
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc4:	4770      	bx	lr
 800ecc6:	bf00      	nop
 800ecc8:	00030d40 	.word	0x00030d40

0800eccc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ecd0:	4904      	ldr	r1, [pc, #16]	; (800ece4 <MX_FATFS_Init+0x18>)
 800ecd2:	4805      	ldr	r0, [pc, #20]	; (800ece8 <MX_FATFS_Init+0x1c>)
 800ecd4:	f001 fe74 	bl	80109c0 <FATFS_LinkDriver>
 800ecd8:	4603      	mov	r3, r0
 800ecda:	461a      	mov	r2, r3
 800ecdc:	4b03      	ldr	r3, [pc, #12]	; (800ecec <MX_FATFS_Init+0x20>)
 800ecde:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ece0:	bf00      	nop
 800ece2:	bd80      	pop	{r7, pc}
 800ece4:	20000d8c 	.word	0x20000d8c
 800ece8:	080142a8 	.word	0x080142a8
 800ecec:	20000d88 	.word	0x20000d88

0800ecf0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b082      	sub	sp, #8
 800ecf4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ecfa:	f000 f879 	bl	800edf0 <BSP_SD_IsDetected>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	2b01      	cmp	r3, #1
 800ed02:	d001      	beq.n	800ed08 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ed04:	2302      	movs	r3, #2
 800ed06:	e012      	b.n	800ed2e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ed08:	480b      	ldr	r0, [pc, #44]	; (800ed38 <BSP_SD_Init+0x48>)
 800ed0a:	f7f8 fd47 	bl	800779c <HAL_SD_Init>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ed12:	79fb      	ldrb	r3, [r7, #7]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d109      	bne.n	800ed2c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ed18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ed1c:	4806      	ldr	r0, [pc, #24]	; (800ed38 <BSP_SD_Init+0x48>)
 800ed1e:	f7f9 fc13 	bl	8008548 <HAL_SD_ConfigWideBusOperation>
 800ed22:	4603      	mov	r3, r0
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d001      	beq.n	800ed2c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ed28:	2301      	movs	r3, #1
 800ed2a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ed2c:	79fb      	ldrb	r3, [r7, #7]
}
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3708      	adds	r7, #8
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
 800ed36:	bf00      	nop
 800ed38:	20000424 	.word	0x20000424

0800ed3c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b088      	sub	sp, #32
 800ed40:	af02      	add	r7, sp, #8
 800ed42:	60f8      	str	r0, [r7, #12]
 800ed44:	60b9      	str	r1, [r7, #8]
 800ed46:	607a      	str	r2, [r7, #4]
 800ed48:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	9300      	str	r3, [sp, #0]
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	68ba      	ldr	r2, [r7, #8]
 800ed56:	68f9      	ldr	r1, [r7, #12]
 800ed58:	4806      	ldr	r0, [pc, #24]	; (800ed74 <BSP_SD_ReadBlocks+0x38>)
 800ed5a:	f7f8 fe47 	bl	80079ec <HAL_SD_ReadBlocks>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d001      	beq.n	800ed68 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ed64:	2301      	movs	r3, #1
 800ed66:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ed68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3718      	adds	r7, #24
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}
 800ed72:	bf00      	nop
 800ed74:	20000424 	.word	0x20000424

0800ed78 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b088      	sub	sp, #32
 800ed7c:	af02      	add	r7, sp, #8
 800ed7e:	60f8      	str	r0, [r7, #12]
 800ed80:	60b9      	str	r1, [r7, #8]
 800ed82:	607a      	str	r2, [r7, #4]
 800ed84:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ed86:	2300      	movs	r3, #0
 800ed88:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	9300      	str	r3, [sp, #0]
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	68ba      	ldr	r2, [r7, #8]
 800ed92:	68f9      	ldr	r1, [r7, #12]
 800ed94:	4806      	ldr	r0, [pc, #24]	; (800edb0 <BSP_SD_WriteBlocks+0x38>)
 800ed96:	f7f8 ffbb 	bl	8007d10 <HAL_SD_WriteBlocks>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d001      	beq.n	800eda4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800eda0:	2301      	movs	r3, #1
 800eda2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800eda4:	7dfb      	ldrb	r3, [r7, #23]
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	3718      	adds	r7, #24
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd80      	pop	{r7, pc}
 800edae:	bf00      	nop
 800edb0:	20000424 	.word	0x20000424

0800edb4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800edb8:	4805      	ldr	r0, [pc, #20]	; (800edd0 <BSP_SD_GetCardState+0x1c>)
 800edba:	f7f9 fcd9 	bl	8008770 <HAL_SD_GetCardState>
 800edbe:	4603      	mov	r3, r0
 800edc0:	2b04      	cmp	r3, #4
 800edc2:	bf14      	ite	ne
 800edc4:	2301      	movne	r3, #1
 800edc6:	2300      	moveq	r3, #0
 800edc8:	b2db      	uxtb	r3, r3
}
 800edca:	4618      	mov	r0, r3
 800edcc:	bd80      	pop	{r7, pc}
 800edce:	bf00      	nop
 800edd0:	20000424 	.word	0x20000424

0800edd4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b082      	sub	sp, #8
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800eddc:	6879      	ldr	r1, [r7, #4]
 800edde:	4803      	ldr	r0, [pc, #12]	; (800edec <BSP_SD_GetCardInfo+0x18>)
 800ede0:	f7f9 fb86 	bl	80084f0 <HAL_SD_GetCardInfo>
}
 800ede4:	bf00      	nop
 800ede6:	3708      	adds	r7, #8
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}
 800edec:	20000424 	.word	0x20000424

0800edf0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b082      	sub	sp, #8
 800edf4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800edf6:	2301      	movs	r3, #1
 800edf8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800edfa:	f000 f80b 	bl	800ee14 <BSP_PlatformIsDetected>
 800edfe:	4603      	mov	r3, r0
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d101      	bne.n	800ee08 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ee04:	2300      	movs	r3, #0
 800ee06:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ee08:	79fb      	ldrb	r3, [r7, #7]
 800ee0a:	b2db      	uxtb	r3, r3
}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3708      	adds	r7, #8
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}

0800ee14 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b082      	sub	sp, #8
 800ee18:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ee1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ee22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ee26:	f7f4 fc4b 	bl	80036c0 <HAL_GPIO_ReadPin>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d001      	beq.n	800ee34 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 800ee30:	2300      	movs	r3, #0
 800ee32:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ee34:	79fb      	ldrb	r3, [r7, #7]
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	3708      	adds	r7, #8
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}
	...

0800ee40 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b082      	sub	sp, #8
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	4603      	mov	r3, r0
 800ee48:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ee4a:	4b0b      	ldr	r3, [pc, #44]	; (800ee78 <SD_CheckStatus+0x38>)
 800ee4c:	2201      	movs	r2, #1
 800ee4e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ee50:	f7ff ffb0 	bl	800edb4 <BSP_SD_GetCardState>
 800ee54:	4603      	mov	r3, r0
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d107      	bne.n	800ee6a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ee5a:	4b07      	ldr	r3, [pc, #28]	; (800ee78 <SD_CheckStatus+0x38>)
 800ee5c:	781b      	ldrb	r3, [r3, #0]
 800ee5e:	b2db      	uxtb	r3, r3
 800ee60:	f023 0301 	bic.w	r3, r3, #1
 800ee64:	b2da      	uxtb	r2, r3
 800ee66:	4b04      	ldr	r3, [pc, #16]	; (800ee78 <SD_CheckStatus+0x38>)
 800ee68:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ee6a:	4b03      	ldr	r3, [pc, #12]	; (800ee78 <SD_CheckStatus+0x38>)
 800ee6c:	781b      	ldrb	r3, [r3, #0]
 800ee6e:	b2db      	uxtb	r3, r3
}
 800ee70:	4618      	mov	r0, r3
 800ee72:	3708      	adds	r7, #8
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bd80      	pop	{r7, pc}
 800ee78:	20000015 	.word	0x20000015

0800ee7c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b082      	sub	sp, #8
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	4603      	mov	r3, r0
 800ee84:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ee86:	4b0b      	ldr	r3, [pc, #44]	; (800eeb4 <SD_initialize+0x38>)
 800ee88:	2201      	movs	r2, #1
 800ee8a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ee8c:	f7ff ff30 	bl	800ecf0 <BSP_SD_Init>
 800ee90:	4603      	mov	r3, r0
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d107      	bne.n	800eea6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800ee96:	79fb      	ldrb	r3, [r7, #7]
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f7ff ffd1 	bl	800ee40 <SD_CheckStatus>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	461a      	mov	r2, r3
 800eea2:	4b04      	ldr	r3, [pc, #16]	; (800eeb4 <SD_initialize+0x38>)
 800eea4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800eea6:	4b03      	ldr	r3, [pc, #12]	; (800eeb4 <SD_initialize+0x38>)
 800eea8:	781b      	ldrb	r3, [r3, #0]
 800eeaa:	b2db      	uxtb	r3, r3
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	3708      	adds	r7, #8
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}
 800eeb4:	20000015 	.word	0x20000015

0800eeb8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b082      	sub	sp, #8
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	4603      	mov	r3, r0
 800eec0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800eec2:	79fb      	ldrb	r3, [r7, #7]
 800eec4:	4618      	mov	r0, r3
 800eec6:	f7ff ffbb 	bl	800ee40 <SD_CheckStatus>
 800eeca:	4603      	mov	r3, r0
}
 800eecc:	4618      	mov	r0, r3
 800eece:	3708      	adds	r7, #8
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}

0800eed4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b086      	sub	sp, #24
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	60b9      	str	r1, [r7, #8]
 800eedc:	607a      	str	r2, [r7, #4]
 800eede:	603b      	str	r3, [r7, #0]
 800eee0:	4603      	mov	r3, r0
 800eee2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800eee4:	2301      	movs	r3, #1
 800eee6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800eee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eeec:	683a      	ldr	r2, [r7, #0]
 800eeee:	6879      	ldr	r1, [r7, #4]
 800eef0:	68b8      	ldr	r0, [r7, #8]
 800eef2:	f7ff ff23 	bl	800ed3c <BSP_SD_ReadBlocks>
 800eef6:	4603      	mov	r3, r0
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d107      	bne.n	800ef0c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800eefc:	bf00      	nop
 800eefe:	f7ff ff59 	bl	800edb4 <BSP_SD_GetCardState>
 800ef02:	4603      	mov	r3, r0
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d1fa      	bne.n	800eefe <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ef0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3718      	adds	r7, #24
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}

0800ef16 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ef16:	b580      	push	{r7, lr}
 800ef18:	b086      	sub	sp, #24
 800ef1a:	af00      	add	r7, sp, #0
 800ef1c:	60b9      	str	r1, [r7, #8]
 800ef1e:	607a      	str	r2, [r7, #4]
 800ef20:	603b      	str	r3, [r7, #0]
 800ef22:	4603      	mov	r3, r0
 800ef24:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ef26:	2301      	movs	r3, #1
 800ef28:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ef2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ef2e:	683a      	ldr	r2, [r7, #0]
 800ef30:	6879      	ldr	r1, [r7, #4]
 800ef32:	68b8      	ldr	r0, [r7, #8]
 800ef34:	f7ff ff20 	bl	800ed78 <BSP_SD_WriteBlocks>
 800ef38:	4603      	mov	r3, r0
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d107      	bne.n	800ef4e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800ef3e:	bf00      	nop
 800ef40:	f7ff ff38 	bl	800edb4 <BSP_SD_GetCardState>
 800ef44:	4603      	mov	r3, r0
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d1fa      	bne.n	800ef40 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ef4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	3718      	adds	r7, #24
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}

0800ef58 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b08c      	sub	sp, #48	; 0x30
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	4603      	mov	r3, r0
 800ef60:	603a      	str	r2, [r7, #0]
 800ef62:	71fb      	strb	r3, [r7, #7]
 800ef64:	460b      	mov	r3, r1
 800ef66:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ef68:	2301      	movs	r3, #1
 800ef6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ef6e:	4b25      	ldr	r3, [pc, #148]	; (800f004 <SD_ioctl+0xac>)
 800ef70:	781b      	ldrb	r3, [r3, #0]
 800ef72:	b2db      	uxtb	r3, r3
 800ef74:	f003 0301 	and.w	r3, r3, #1
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d001      	beq.n	800ef80 <SD_ioctl+0x28>
 800ef7c:	2303      	movs	r3, #3
 800ef7e:	e03c      	b.n	800effa <SD_ioctl+0xa2>

  switch (cmd)
 800ef80:	79bb      	ldrb	r3, [r7, #6]
 800ef82:	2b03      	cmp	r3, #3
 800ef84:	d834      	bhi.n	800eff0 <SD_ioctl+0x98>
 800ef86:	a201      	add	r2, pc, #4	; (adr r2, 800ef8c <SD_ioctl+0x34>)
 800ef88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef8c:	0800ef9d 	.word	0x0800ef9d
 800ef90:	0800efa5 	.word	0x0800efa5
 800ef94:	0800efbd 	.word	0x0800efbd
 800ef98:	0800efd7 	.word	0x0800efd7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800efa2:	e028      	b.n	800eff6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800efa4:	f107 0308 	add.w	r3, r7, #8
 800efa8:	4618      	mov	r0, r3
 800efaa:	f7ff ff13 	bl	800edd4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800efae:	6a3a      	ldr	r2, [r7, #32]
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800efb4:	2300      	movs	r3, #0
 800efb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800efba:	e01c      	b.n	800eff6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800efbc:	f107 0308 	add.w	r3, r7, #8
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7ff ff07 	bl	800edd4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800efc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc8:	b29a      	uxth	r2, r3
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800efce:	2300      	movs	r3, #0
 800efd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800efd4:	e00f      	b.n	800eff6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800efd6:	f107 0308 	add.w	r3, r7, #8
 800efda:	4618      	mov	r0, r3
 800efdc:	f7ff fefa 	bl	800edd4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800efe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe2:	0a5a      	lsrs	r2, r3, #9
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800efe8:	2300      	movs	r3, #0
 800efea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800efee:	e002      	b.n	800eff6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800eff0:	2304      	movs	r3, #4
 800eff2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800eff6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800effa:	4618      	mov	r0, r3
 800effc:	3730      	adds	r7, #48	; 0x30
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}
 800f002:	bf00      	nop
 800f004:	20000015 	.word	0x20000015

0800f008 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b084      	sub	sp, #16
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	460b      	mov	r3, r1
 800f012:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f014:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f018:	f002 fabe 	bl	8011598 <USBD_static_malloc>
 800f01c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d105      	bne.n	800f030 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2200      	movs	r2, #0
 800f028:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800f02c:	2302      	movs	r3, #2
 800f02e:	e066      	b.n	800f0fe <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	68fa      	ldr	r2, [r7, #12]
 800f034:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	7c1b      	ldrb	r3, [r3, #16]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d119      	bne.n	800f074 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f040:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f044:	2202      	movs	r2, #2
 800f046:	2181      	movs	r1, #129	; 0x81
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f002 f8df 	bl	801120c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2201      	movs	r2, #1
 800f052:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f054:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f058:	2202      	movs	r2, #2
 800f05a:	2101      	movs	r1, #1
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f002 f8d5 	bl	801120c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	2201      	movs	r2, #1
 800f066:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2210      	movs	r2, #16
 800f06e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800f072:	e016      	b.n	800f0a2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f074:	2340      	movs	r3, #64	; 0x40
 800f076:	2202      	movs	r2, #2
 800f078:	2181      	movs	r1, #129	; 0x81
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f002 f8c6 	bl	801120c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2201      	movs	r2, #1
 800f084:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f086:	2340      	movs	r3, #64	; 0x40
 800f088:	2202      	movs	r2, #2
 800f08a:	2101      	movs	r1, #1
 800f08c:	6878      	ldr	r0, [r7, #4]
 800f08e:	f002 f8bd 	bl	801120c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2201      	movs	r2, #1
 800f096:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2210      	movs	r2, #16
 800f09e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f0a2:	2308      	movs	r3, #8
 800f0a4:	2203      	movs	r2, #3
 800f0a6:	2182      	movs	r1, #130	; 0x82
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f002 f8af 	bl	801120c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	2201      	movs	r2, #1
 800f0b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	7c1b      	ldrb	r3, [r3, #16]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d109      	bne.n	800f0ec <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f0de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f0e2:	2101      	movs	r1, #1
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f002 fa0b 	bl	8011500 <USBD_LL_PrepareReceive>
 800f0ea:	e007      	b.n	800f0fc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f0f2:	2340      	movs	r3, #64	; 0x40
 800f0f4:	2101      	movs	r1, #1
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f002 fa02 	bl	8011500 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f0fc:	2300      	movs	r3, #0
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	3710      	adds	r7, #16
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}

0800f106 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f106:	b580      	push	{r7, lr}
 800f108:	b082      	sub	sp, #8
 800f10a:	af00      	add	r7, sp, #0
 800f10c:	6078      	str	r0, [r7, #4]
 800f10e:	460b      	mov	r3, r1
 800f110:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f112:	2181      	movs	r1, #129	; 0x81
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f002 f8b7 	bl	8011288 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2200      	movs	r2, #0
 800f11e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f120:	2101      	movs	r1, #1
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f002 f8b0 	bl	8011288 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2200      	movs	r2, #0
 800f12c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f130:	2182      	movs	r1, #130	; 0x82
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f002 f8a8 	bl	8011288 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2200      	movs	r2, #0
 800f13c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	2200      	movs	r2, #0
 800f144:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d00e      	beq.n	800f170 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f158:	685b      	ldr	r3, [r3, #4]
 800f15a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f162:	4618      	mov	r0, r3
 800f164:	f002 fa26 	bl	80115b4 <USBD_static_free>
    pdev->pClassData = NULL;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2200      	movs	r2, #0
 800f16c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f170:	2300      	movs	r3, #0
}
 800f172:	4618      	mov	r0, r3
 800f174:	3708      	adds	r7, #8
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}
	...

0800f17c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b086      	sub	sp, #24
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
 800f184:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f18c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f18e:	2300      	movs	r3, #0
 800f190:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f192:	2300      	movs	r3, #0
 800f194:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f196:	2300      	movs	r3, #0
 800f198:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f19a:	693b      	ldr	r3, [r7, #16]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d101      	bne.n	800f1a4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800f1a0:	2303      	movs	r3, #3
 800f1a2:	e0af      	b.n	800f304 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	781b      	ldrb	r3, [r3, #0]
 800f1a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d03f      	beq.n	800f230 <USBD_CDC_Setup+0xb4>
 800f1b0:	2b20      	cmp	r3, #32
 800f1b2:	f040 809f 	bne.w	800f2f4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	88db      	ldrh	r3, [r3, #6]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d02e      	beq.n	800f21c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	781b      	ldrb	r3, [r3, #0]
 800f1c2:	b25b      	sxtb	r3, r3
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	da16      	bge.n	800f1f6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f1ce:	689b      	ldr	r3, [r3, #8]
 800f1d0:	683a      	ldr	r2, [r7, #0]
 800f1d2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800f1d4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f1d6:	683a      	ldr	r2, [r7, #0]
 800f1d8:	88d2      	ldrh	r2, [r2, #6]
 800f1da:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	88db      	ldrh	r3, [r3, #6]
 800f1e0:	2b07      	cmp	r3, #7
 800f1e2:	bf28      	it	cs
 800f1e4:	2307      	movcs	r3, #7
 800f1e6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f1e8:	693b      	ldr	r3, [r7, #16]
 800f1ea:	89fa      	ldrh	r2, [r7, #14]
 800f1ec:	4619      	mov	r1, r3
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f001 fb19 	bl	8010826 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800f1f4:	e085      	b.n	800f302 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	785a      	ldrb	r2, [r3, #1]
 800f1fa:	693b      	ldr	r3, [r7, #16]
 800f1fc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	88db      	ldrh	r3, [r3, #6]
 800f204:	b2da      	uxtb	r2, r3
 800f206:	693b      	ldr	r3, [r7, #16]
 800f208:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f20c:	6939      	ldr	r1, [r7, #16]
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	88db      	ldrh	r3, [r3, #6]
 800f212:	461a      	mov	r2, r3
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f001 fb32 	bl	801087e <USBD_CtlPrepareRx>
      break;
 800f21a:	e072      	b.n	800f302 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f222:	689b      	ldr	r3, [r3, #8]
 800f224:	683a      	ldr	r2, [r7, #0]
 800f226:	7850      	ldrb	r0, [r2, #1]
 800f228:	2200      	movs	r2, #0
 800f22a:	6839      	ldr	r1, [r7, #0]
 800f22c:	4798      	blx	r3
      break;
 800f22e:	e068      	b.n	800f302 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	785b      	ldrb	r3, [r3, #1]
 800f234:	2b0b      	cmp	r3, #11
 800f236:	d852      	bhi.n	800f2de <USBD_CDC_Setup+0x162>
 800f238:	a201      	add	r2, pc, #4	; (adr r2, 800f240 <USBD_CDC_Setup+0xc4>)
 800f23a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f23e:	bf00      	nop
 800f240:	0800f271 	.word	0x0800f271
 800f244:	0800f2ed 	.word	0x0800f2ed
 800f248:	0800f2df 	.word	0x0800f2df
 800f24c:	0800f2df 	.word	0x0800f2df
 800f250:	0800f2df 	.word	0x0800f2df
 800f254:	0800f2df 	.word	0x0800f2df
 800f258:	0800f2df 	.word	0x0800f2df
 800f25c:	0800f2df 	.word	0x0800f2df
 800f260:	0800f2df 	.word	0x0800f2df
 800f264:	0800f2df 	.word	0x0800f2df
 800f268:	0800f29b 	.word	0x0800f29b
 800f26c:	0800f2c5 	.word	0x0800f2c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f276:	b2db      	uxtb	r3, r3
 800f278:	2b03      	cmp	r3, #3
 800f27a:	d107      	bne.n	800f28c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f27c:	f107 030a 	add.w	r3, r7, #10
 800f280:	2202      	movs	r2, #2
 800f282:	4619      	mov	r1, r3
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f001 face 	bl	8010826 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f28a:	e032      	b.n	800f2f2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f28c:	6839      	ldr	r1, [r7, #0]
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f001 fa58 	bl	8010744 <USBD_CtlError>
            ret = USBD_FAIL;
 800f294:	2303      	movs	r3, #3
 800f296:	75fb      	strb	r3, [r7, #23]
          break;
 800f298:	e02b      	b.n	800f2f2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2a0:	b2db      	uxtb	r3, r3
 800f2a2:	2b03      	cmp	r3, #3
 800f2a4:	d107      	bne.n	800f2b6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f2a6:	f107 030d 	add.w	r3, r7, #13
 800f2aa:	2201      	movs	r2, #1
 800f2ac:	4619      	mov	r1, r3
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	f001 fab9 	bl	8010826 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f2b4:	e01d      	b.n	800f2f2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f2b6:	6839      	ldr	r1, [r7, #0]
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f001 fa43 	bl	8010744 <USBD_CtlError>
            ret = USBD_FAIL;
 800f2be:	2303      	movs	r3, #3
 800f2c0:	75fb      	strb	r3, [r7, #23]
          break;
 800f2c2:	e016      	b.n	800f2f2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2ca:	b2db      	uxtb	r3, r3
 800f2cc:	2b03      	cmp	r3, #3
 800f2ce:	d00f      	beq.n	800f2f0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800f2d0:	6839      	ldr	r1, [r7, #0]
 800f2d2:	6878      	ldr	r0, [r7, #4]
 800f2d4:	f001 fa36 	bl	8010744 <USBD_CtlError>
            ret = USBD_FAIL;
 800f2d8:	2303      	movs	r3, #3
 800f2da:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f2dc:	e008      	b.n	800f2f0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f2de:	6839      	ldr	r1, [r7, #0]
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f001 fa2f 	bl	8010744 <USBD_CtlError>
          ret = USBD_FAIL;
 800f2e6:	2303      	movs	r3, #3
 800f2e8:	75fb      	strb	r3, [r7, #23]
          break;
 800f2ea:	e002      	b.n	800f2f2 <USBD_CDC_Setup+0x176>
          break;
 800f2ec:	bf00      	nop
 800f2ee:	e008      	b.n	800f302 <USBD_CDC_Setup+0x186>
          break;
 800f2f0:	bf00      	nop
      }
      break;
 800f2f2:	e006      	b.n	800f302 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800f2f4:	6839      	ldr	r1, [r7, #0]
 800f2f6:	6878      	ldr	r0, [r7, #4]
 800f2f8:	f001 fa24 	bl	8010744 <USBD_CtlError>
      ret = USBD_FAIL;
 800f2fc:	2303      	movs	r3, #3
 800f2fe:	75fb      	strb	r3, [r7, #23]
      break;
 800f300:	bf00      	nop
  }

  return (uint8_t)ret;
 800f302:	7dfb      	ldrb	r3, [r7, #23]
}
 800f304:	4618      	mov	r0, r3
 800f306:	3718      	adds	r7, #24
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}

0800f30c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b084      	sub	sp, #16
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
 800f314:	460b      	mov	r3, r1
 800f316:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f31e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f326:	2b00      	cmp	r3, #0
 800f328:	d101      	bne.n	800f32e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f32a:	2303      	movs	r3, #3
 800f32c:	e04f      	b.n	800f3ce <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f334:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f336:	78fa      	ldrb	r2, [r7, #3]
 800f338:	6879      	ldr	r1, [r7, #4]
 800f33a:	4613      	mov	r3, r2
 800f33c:	009b      	lsls	r3, r3, #2
 800f33e:	4413      	add	r3, r2
 800f340:	009b      	lsls	r3, r3, #2
 800f342:	440b      	add	r3, r1
 800f344:	3318      	adds	r3, #24
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d029      	beq.n	800f3a0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f34c:	78fa      	ldrb	r2, [r7, #3]
 800f34e:	6879      	ldr	r1, [r7, #4]
 800f350:	4613      	mov	r3, r2
 800f352:	009b      	lsls	r3, r3, #2
 800f354:	4413      	add	r3, r2
 800f356:	009b      	lsls	r3, r3, #2
 800f358:	440b      	add	r3, r1
 800f35a:	3318      	adds	r3, #24
 800f35c:	681a      	ldr	r2, [r3, #0]
 800f35e:	78f9      	ldrb	r1, [r7, #3]
 800f360:	68f8      	ldr	r0, [r7, #12]
 800f362:	460b      	mov	r3, r1
 800f364:	00db      	lsls	r3, r3, #3
 800f366:	440b      	add	r3, r1
 800f368:	009b      	lsls	r3, r3, #2
 800f36a:	4403      	add	r3, r0
 800f36c:	3348      	adds	r3, #72	; 0x48
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	fbb2 f1f3 	udiv	r1, r2, r3
 800f374:	fb01 f303 	mul.w	r3, r1, r3
 800f378:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d110      	bne.n	800f3a0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800f37e:	78fa      	ldrb	r2, [r7, #3]
 800f380:	6879      	ldr	r1, [r7, #4]
 800f382:	4613      	mov	r3, r2
 800f384:	009b      	lsls	r3, r3, #2
 800f386:	4413      	add	r3, r2
 800f388:	009b      	lsls	r3, r3, #2
 800f38a:	440b      	add	r3, r1
 800f38c:	3318      	adds	r3, #24
 800f38e:	2200      	movs	r2, #0
 800f390:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f392:	78f9      	ldrb	r1, [r7, #3]
 800f394:	2300      	movs	r3, #0
 800f396:	2200      	movs	r2, #0
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f002 f879 	bl	8011490 <USBD_LL_Transmit>
 800f39e:	e015      	b.n	800f3cc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f3ae:	691b      	ldr	r3, [r3, #16]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d00b      	beq.n	800f3cc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f3ba:	691b      	ldr	r3, [r3, #16]
 800f3bc:	68ba      	ldr	r2, [r7, #8]
 800f3be:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800f3c2:	68ba      	ldr	r2, [r7, #8]
 800f3c4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800f3c8:	78fa      	ldrb	r2, [r7, #3]
 800f3ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f3cc:	2300      	movs	r3, #0
}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3710      	adds	r7, #16
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}

0800f3d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f3d6:	b580      	push	{r7, lr}
 800f3d8:	b084      	sub	sp, #16
 800f3da:	af00      	add	r7, sp, #0
 800f3dc:	6078      	str	r0, [r7, #4]
 800f3de:	460b      	mov	r3, r1
 800f3e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f3e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d101      	bne.n	800f3f8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f3f4:	2303      	movs	r3, #3
 800f3f6:	e015      	b.n	800f424 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f3f8:	78fb      	ldrb	r3, [r7, #3]
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f002 f8b7 	bl	8011570 <USBD_LL_GetRxDataSize>
 800f402:	4602      	mov	r2, r0
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f410:	68db      	ldr	r3, [r3, #12]
 800f412:	68fa      	ldr	r2, [r7, #12]
 800f414:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f418:	68fa      	ldr	r2, [r7, #12]
 800f41a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f41e:	4611      	mov	r1, r2
 800f420:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f422:	2300      	movs	r3, #0
}
 800f424:	4618      	mov	r0, r3
 800f426:	3710      	adds	r7, #16
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}

0800f42c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b084      	sub	sp, #16
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f43a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d101      	bne.n	800f446 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800f442:	2303      	movs	r3, #3
 800f444:	e01b      	b.n	800f47e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d015      	beq.n	800f47c <USBD_CDC_EP0_RxReady+0x50>
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f456:	2bff      	cmp	r3, #255	; 0xff
 800f458:	d010      	beq.n	800f47c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f460:	689b      	ldr	r3, [r3, #8]
 800f462:	68fa      	ldr	r2, [r7, #12]
 800f464:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800f468:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f46a:	68fa      	ldr	r2, [r7, #12]
 800f46c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f470:	b292      	uxth	r2, r2
 800f472:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	22ff      	movs	r2, #255	; 0xff
 800f478:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800f47c:	2300      	movs	r3, #0
}
 800f47e:	4618      	mov	r0, r3
 800f480:	3710      	adds	r7, #16
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}
	...

0800f488 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f488:	b480      	push	{r7}
 800f48a:	b083      	sub	sp, #12
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2243      	movs	r2, #67	; 0x43
 800f494:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800f496:	4b03      	ldr	r3, [pc, #12]	; (800f4a4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f498:	4618      	mov	r0, r3
 800f49a:	370c      	adds	r7, #12
 800f49c:	46bd      	mov	sp, r7
 800f49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a2:	4770      	bx	lr
 800f4a4:	200000a0 	.word	0x200000a0

0800f4a8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f4a8:	b480      	push	{r7}
 800f4aa:	b083      	sub	sp, #12
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2243      	movs	r2, #67	; 0x43
 800f4b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800f4b6:	4b03      	ldr	r3, [pc, #12]	; (800f4c4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	370c      	adds	r7, #12
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c2:	4770      	bx	lr
 800f4c4:	2000005c 	.word	0x2000005c

0800f4c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f4c8:	b480      	push	{r7}
 800f4ca:	b083      	sub	sp, #12
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2243      	movs	r2, #67	; 0x43
 800f4d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800f4d6:	4b03      	ldr	r3, [pc, #12]	; (800f4e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f4d8:	4618      	mov	r0, r3
 800f4da:	370c      	adds	r7, #12
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e2:	4770      	bx	lr
 800f4e4:	200000e4 	.word	0x200000e4

0800f4e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	b083      	sub	sp, #12
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	220a      	movs	r2, #10
 800f4f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f4f6:	4b03      	ldr	r3, [pc, #12]	; (800f504 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	370c      	adds	r7, #12
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f502:	4770      	bx	lr
 800f504:	20000018 	.word	0x20000018

0800f508 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f508:	b480      	push	{r7}
 800f50a:	b083      	sub	sp, #12
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d101      	bne.n	800f51c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f518:	2303      	movs	r3, #3
 800f51a:	e004      	b.n	800f526 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	683a      	ldr	r2, [r7, #0]
 800f520:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800f524:	2300      	movs	r3, #0
}
 800f526:	4618      	mov	r0, r3
 800f528:	370c      	adds	r7, #12
 800f52a:	46bd      	mov	sp, r7
 800f52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f530:	4770      	bx	lr

0800f532 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f532:	b480      	push	{r7}
 800f534:	b087      	sub	sp, #28
 800f536:	af00      	add	r7, sp, #0
 800f538:	60f8      	str	r0, [r7, #12]
 800f53a:	60b9      	str	r1, [r7, #8]
 800f53c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f544:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d101      	bne.n	800f550 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f54c:	2303      	movs	r3, #3
 800f54e:	e008      	b.n	800f562 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800f550:	697b      	ldr	r3, [r7, #20]
 800f552:	68ba      	ldr	r2, [r7, #8]
 800f554:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	687a      	ldr	r2, [r7, #4]
 800f55c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800f560:	2300      	movs	r3, #0
}
 800f562:	4618      	mov	r0, r3
 800f564:	371c      	adds	r7, #28
 800f566:	46bd      	mov	sp, r7
 800f568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56c:	4770      	bx	lr

0800f56e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f56e:	b480      	push	{r7}
 800f570:	b085      	sub	sp, #20
 800f572:	af00      	add	r7, sp, #0
 800f574:	6078      	str	r0, [r7, #4]
 800f576:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f57e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d101      	bne.n	800f58a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800f586:	2303      	movs	r3, #3
 800f588:	e004      	b.n	800f594 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	683a      	ldr	r2, [r7, #0]
 800f58e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800f592:	2300      	movs	r3, #0
}
 800f594:	4618      	mov	r0, r3
 800f596:	3714      	adds	r7, #20
 800f598:	46bd      	mov	sp, r7
 800f59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59e:	4770      	bx	lr

0800f5a0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b084      	sub	sp, #16
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f5ae:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800f5b0:	2301      	movs	r3, #1
 800f5b2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d101      	bne.n	800f5c2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f5be:	2303      	movs	r3, #3
 800f5c0:	e01a      	b.n	800f5f8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d114      	bne.n	800f5f6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	2201      	movs	r2, #1
 800f5d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800f5d4:	68bb      	ldr	r3, [r7, #8]
 800f5d6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800f5de:	68bb      	ldr	r3, [r7, #8]
 800f5e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f5ea:	2181      	movs	r1, #129	; 0x81
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f001 ff4f 	bl	8011490 <USBD_LL_Transmit>

    ret = USBD_OK;
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f5f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3710      	adds	r7, #16
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}

0800f600 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b084      	sub	sp, #16
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f60e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f616:	2b00      	cmp	r3, #0
 800f618:	d101      	bne.n	800f61e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f61a:	2303      	movs	r3, #3
 800f61c:	e016      	b.n	800f64c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	7c1b      	ldrb	r3, [r3, #16]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d109      	bne.n	800f63a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f62c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f630:	2101      	movs	r1, #1
 800f632:	6878      	ldr	r0, [r7, #4]
 800f634:	f001 ff64 	bl	8011500 <USBD_LL_PrepareReceive>
 800f638:	e007      	b.n	800f64a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f640:	2340      	movs	r3, #64	; 0x40
 800f642:	2101      	movs	r1, #1
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f001 ff5b 	bl	8011500 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f64a:	2300      	movs	r3, #0
}
 800f64c:	4618      	mov	r0, r3
 800f64e:	3710      	adds	r7, #16
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}

0800f654 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b086      	sub	sp, #24
 800f658:	af00      	add	r7, sp, #0
 800f65a:	60f8      	str	r0, [r7, #12]
 800f65c:	60b9      	str	r1, [r7, #8]
 800f65e:	4613      	mov	r3, r2
 800f660:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d101      	bne.n	800f66c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f668:	2303      	movs	r3, #3
 800f66a:	e01f      	b.n	800f6ac <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	2200      	movs	r2, #0
 800f670:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	2200      	movs	r2, #0
 800f678:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	2200      	movs	r2, #0
 800f680:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d003      	beq.n	800f692 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	68ba      	ldr	r2, [r7, #8]
 800f68e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	2201      	movs	r2, #1
 800f696:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	79fa      	ldrb	r2, [r7, #7]
 800f69e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f6a0:	68f8      	ldr	r0, [r7, #12]
 800f6a2:	f001 fd37 	bl	8011114 <USBD_LL_Init>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f6aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	3718      	adds	r7, #24
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}

0800f6b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b084      	sub	sp, #16
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
 800f6bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d101      	bne.n	800f6cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f6c8:	2303      	movs	r3, #3
 800f6ca:	e016      	b.n	800f6fa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	683a      	ldr	r2, [r7, #0]
 800f6d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d00b      	beq.n	800f6f8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6e8:	f107 020e 	add.w	r2, r7, #14
 800f6ec:	4610      	mov	r0, r2
 800f6ee:	4798      	blx	r3
 800f6f0:	4602      	mov	r2, r0
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f6f8:	2300      	movs	r3, #0
}
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	3710      	adds	r7, #16
 800f6fe:	46bd      	mov	sp, r7
 800f700:	bd80      	pop	{r7, pc}

0800f702 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f702:	b580      	push	{r7, lr}
 800f704:	b082      	sub	sp, #8
 800f706:	af00      	add	r7, sp, #0
 800f708:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	f001 fd4c 	bl	80111a8 <USBD_LL_Start>
 800f710:	4603      	mov	r3, r0
}
 800f712:	4618      	mov	r0, r3
 800f714:	3708      	adds	r7, #8
 800f716:	46bd      	mov	sp, r7
 800f718:	bd80      	pop	{r7, pc}

0800f71a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f71a:	b480      	push	{r7}
 800f71c:	b083      	sub	sp, #12
 800f71e:	af00      	add	r7, sp, #0
 800f720:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f722:	2300      	movs	r3, #0
}
 800f724:	4618      	mov	r0, r3
 800f726:	370c      	adds	r7, #12
 800f728:	46bd      	mov	sp, r7
 800f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72e:	4770      	bx	lr

0800f730 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b084      	sub	sp, #16
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
 800f738:	460b      	mov	r3, r1
 800f73a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f73c:	2303      	movs	r3, #3
 800f73e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f746:	2b00      	cmp	r3, #0
 800f748:	d009      	beq.n	800f75e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	78fa      	ldrb	r2, [r7, #3]
 800f754:	4611      	mov	r1, r2
 800f756:	6878      	ldr	r0, [r7, #4]
 800f758:	4798      	blx	r3
 800f75a:	4603      	mov	r3, r0
 800f75c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f75e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f760:	4618      	mov	r0, r3
 800f762:	3710      	adds	r7, #16
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}

0800f768 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b082      	sub	sp, #8
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
 800f770:	460b      	mov	r3, r1
 800f772:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d007      	beq.n	800f78e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f784:	685b      	ldr	r3, [r3, #4]
 800f786:	78fa      	ldrb	r2, [r7, #3]
 800f788:	4611      	mov	r1, r2
 800f78a:	6878      	ldr	r0, [r7, #4]
 800f78c:	4798      	blx	r3
  }

  return USBD_OK;
 800f78e:	2300      	movs	r3, #0
}
 800f790:	4618      	mov	r0, r3
 800f792:	3708      	adds	r7, #8
 800f794:	46bd      	mov	sp, r7
 800f796:	bd80      	pop	{r7, pc}

0800f798 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b084      	sub	sp, #16
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
 800f7a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f7a8:	6839      	ldr	r1, [r7, #0]
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f000 ff90 	bl	80106d0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2201      	movs	r2, #1
 800f7b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f7be:	461a      	mov	r2, r3
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f7cc:	f003 031f 	and.w	r3, r3, #31
 800f7d0:	2b02      	cmp	r3, #2
 800f7d2:	d01a      	beq.n	800f80a <USBD_LL_SetupStage+0x72>
 800f7d4:	2b02      	cmp	r3, #2
 800f7d6:	d822      	bhi.n	800f81e <USBD_LL_SetupStage+0x86>
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d002      	beq.n	800f7e2 <USBD_LL_SetupStage+0x4a>
 800f7dc:	2b01      	cmp	r3, #1
 800f7de:	d00a      	beq.n	800f7f6 <USBD_LL_SetupStage+0x5e>
 800f7e0:	e01d      	b.n	800f81e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f7e8:	4619      	mov	r1, r3
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f000 fa62 	bl	800fcb4 <USBD_StdDevReq>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	73fb      	strb	r3, [r7, #15]
      break;
 800f7f4:	e020      	b.n	800f838 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f7fc:	4619      	mov	r1, r3
 800f7fe:	6878      	ldr	r0, [r7, #4]
 800f800:	f000 fac6 	bl	800fd90 <USBD_StdItfReq>
 800f804:	4603      	mov	r3, r0
 800f806:	73fb      	strb	r3, [r7, #15]
      break;
 800f808:	e016      	b.n	800f838 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f810:	4619      	mov	r1, r3
 800f812:	6878      	ldr	r0, [r7, #4]
 800f814:	f000 fb05 	bl	800fe22 <USBD_StdEPReq>
 800f818:	4603      	mov	r3, r0
 800f81a:	73fb      	strb	r3, [r7, #15]
      break;
 800f81c:	e00c      	b.n	800f838 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f824:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f828:	b2db      	uxtb	r3, r3
 800f82a:	4619      	mov	r1, r3
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f001 fd61 	bl	80112f4 <USBD_LL_StallEP>
 800f832:	4603      	mov	r3, r0
 800f834:	73fb      	strb	r3, [r7, #15]
      break;
 800f836:	bf00      	nop
  }

  return ret;
 800f838:	7bfb      	ldrb	r3, [r7, #15]
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	3710      	adds	r7, #16
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}

0800f842 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f842:	b580      	push	{r7, lr}
 800f844:	b086      	sub	sp, #24
 800f846:	af00      	add	r7, sp, #0
 800f848:	60f8      	str	r0, [r7, #12]
 800f84a:	460b      	mov	r3, r1
 800f84c:	607a      	str	r2, [r7, #4]
 800f84e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f850:	7afb      	ldrb	r3, [r7, #11]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d138      	bne.n	800f8c8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f85c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f864:	2b03      	cmp	r3, #3
 800f866:	d14a      	bne.n	800f8fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f868:	693b      	ldr	r3, [r7, #16]
 800f86a:	689a      	ldr	r2, [r3, #8]
 800f86c:	693b      	ldr	r3, [r7, #16]
 800f86e:	68db      	ldr	r3, [r3, #12]
 800f870:	429a      	cmp	r2, r3
 800f872:	d913      	bls.n	800f89c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f874:	693b      	ldr	r3, [r7, #16]
 800f876:	689a      	ldr	r2, [r3, #8]
 800f878:	693b      	ldr	r3, [r7, #16]
 800f87a:	68db      	ldr	r3, [r3, #12]
 800f87c:	1ad2      	subs	r2, r2, r3
 800f87e:	693b      	ldr	r3, [r7, #16]
 800f880:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	68da      	ldr	r2, [r3, #12]
 800f886:	693b      	ldr	r3, [r7, #16]
 800f888:	689b      	ldr	r3, [r3, #8]
 800f88a:	4293      	cmp	r3, r2
 800f88c:	bf28      	it	cs
 800f88e:	4613      	movcs	r3, r2
 800f890:	461a      	mov	r2, r3
 800f892:	6879      	ldr	r1, [r7, #4]
 800f894:	68f8      	ldr	r0, [r7, #12]
 800f896:	f001 f80f 	bl	80108b8 <USBD_CtlContinueRx>
 800f89a:	e030      	b.n	800f8fe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8a2:	b2db      	uxtb	r3, r3
 800f8a4:	2b03      	cmp	r3, #3
 800f8a6:	d10b      	bne.n	800f8c0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8ae:	691b      	ldr	r3, [r3, #16]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d005      	beq.n	800f8c0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8ba:	691b      	ldr	r3, [r3, #16]
 800f8bc:	68f8      	ldr	r0, [r7, #12]
 800f8be:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f8c0:	68f8      	ldr	r0, [r7, #12]
 800f8c2:	f001 f80a 	bl	80108da <USBD_CtlSendStatus>
 800f8c6:	e01a      	b.n	800f8fe <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8ce:	b2db      	uxtb	r3, r3
 800f8d0:	2b03      	cmp	r3, #3
 800f8d2:	d114      	bne.n	800f8fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8da:	699b      	ldr	r3, [r3, #24]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d00e      	beq.n	800f8fe <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8e6:	699b      	ldr	r3, [r3, #24]
 800f8e8:	7afa      	ldrb	r2, [r7, #11]
 800f8ea:	4611      	mov	r1, r2
 800f8ec:	68f8      	ldr	r0, [r7, #12]
 800f8ee:	4798      	blx	r3
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f8f4:	7dfb      	ldrb	r3, [r7, #23]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d001      	beq.n	800f8fe <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800f8fa:	7dfb      	ldrb	r3, [r7, #23]
 800f8fc:	e000      	b.n	800f900 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800f8fe:	2300      	movs	r3, #0
}
 800f900:	4618      	mov	r0, r3
 800f902:	3718      	adds	r7, #24
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}

0800f908 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b086      	sub	sp, #24
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	60f8      	str	r0, [r7, #12]
 800f910:	460b      	mov	r3, r1
 800f912:	607a      	str	r2, [r7, #4]
 800f914:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f916:	7afb      	ldrb	r3, [r7, #11]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d16b      	bne.n	800f9f4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	3314      	adds	r3, #20
 800f920:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f928:	2b02      	cmp	r3, #2
 800f92a:	d156      	bne.n	800f9da <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f92c:	693b      	ldr	r3, [r7, #16]
 800f92e:	689a      	ldr	r2, [r3, #8]
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	68db      	ldr	r3, [r3, #12]
 800f934:	429a      	cmp	r2, r3
 800f936:	d914      	bls.n	800f962 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f938:	693b      	ldr	r3, [r7, #16]
 800f93a:	689a      	ldr	r2, [r3, #8]
 800f93c:	693b      	ldr	r3, [r7, #16]
 800f93e:	68db      	ldr	r3, [r3, #12]
 800f940:	1ad2      	subs	r2, r2, r3
 800f942:	693b      	ldr	r3, [r7, #16]
 800f944:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f946:	693b      	ldr	r3, [r7, #16]
 800f948:	689b      	ldr	r3, [r3, #8]
 800f94a:	461a      	mov	r2, r3
 800f94c:	6879      	ldr	r1, [r7, #4]
 800f94e:	68f8      	ldr	r0, [r7, #12]
 800f950:	f000 ff84 	bl	801085c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f954:	2300      	movs	r3, #0
 800f956:	2200      	movs	r2, #0
 800f958:	2100      	movs	r1, #0
 800f95a:	68f8      	ldr	r0, [r7, #12]
 800f95c:	f001 fdd0 	bl	8011500 <USBD_LL_PrepareReceive>
 800f960:	e03b      	b.n	800f9da <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f962:	693b      	ldr	r3, [r7, #16]
 800f964:	68da      	ldr	r2, [r3, #12]
 800f966:	693b      	ldr	r3, [r7, #16]
 800f968:	689b      	ldr	r3, [r3, #8]
 800f96a:	429a      	cmp	r2, r3
 800f96c:	d11c      	bne.n	800f9a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f96e:	693b      	ldr	r3, [r7, #16]
 800f970:	685a      	ldr	r2, [r3, #4]
 800f972:	693b      	ldr	r3, [r7, #16]
 800f974:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f976:	429a      	cmp	r2, r3
 800f978:	d316      	bcc.n	800f9a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f97a:	693b      	ldr	r3, [r7, #16]
 800f97c:	685a      	ldr	r2, [r3, #4]
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f984:	429a      	cmp	r2, r3
 800f986:	d20f      	bcs.n	800f9a8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f988:	2200      	movs	r2, #0
 800f98a:	2100      	movs	r1, #0
 800f98c:	68f8      	ldr	r0, [r7, #12]
 800f98e:	f000 ff65 	bl	801085c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	2200      	movs	r2, #0
 800f996:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f99a:	2300      	movs	r3, #0
 800f99c:	2200      	movs	r2, #0
 800f99e:	2100      	movs	r1, #0
 800f9a0:	68f8      	ldr	r0, [r7, #12]
 800f9a2:	f001 fdad 	bl	8011500 <USBD_LL_PrepareReceive>
 800f9a6:	e018      	b.n	800f9da <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9ae:	b2db      	uxtb	r3, r3
 800f9b0:	2b03      	cmp	r3, #3
 800f9b2:	d10b      	bne.n	800f9cc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9ba:	68db      	ldr	r3, [r3, #12]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d005      	beq.n	800f9cc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9c6:	68db      	ldr	r3, [r3, #12]
 800f9c8:	68f8      	ldr	r0, [r7, #12]
 800f9ca:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f9cc:	2180      	movs	r1, #128	; 0x80
 800f9ce:	68f8      	ldr	r0, [r7, #12]
 800f9d0:	f001 fc90 	bl	80112f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f9d4:	68f8      	ldr	r0, [r7, #12]
 800f9d6:	f000 ff93 	bl	8010900 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f9e0:	2b01      	cmp	r3, #1
 800f9e2:	d122      	bne.n	800fa2a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f9e4:	68f8      	ldr	r0, [r7, #12]
 800f9e6:	f7ff fe98 	bl	800f71a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f9f2:	e01a      	b.n	800fa2a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9fa:	b2db      	uxtb	r3, r3
 800f9fc:	2b03      	cmp	r3, #3
 800f9fe:	d114      	bne.n	800fa2a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa06:	695b      	ldr	r3, [r3, #20]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d00e      	beq.n	800fa2a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa12:	695b      	ldr	r3, [r3, #20]
 800fa14:	7afa      	ldrb	r2, [r7, #11]
 800fa16:	4611      	mov	r1, r2
 800fa18:	68f8      	ldr	r0, [r7, #12]
 800fa1a:	4798      	blx	r3
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800fa20:	7dfb      	ldrb	r3, [r7, #23]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d001      	beq.n	800fa2a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800fa26:	7dfb      	ldrb	r3, [r7, #23]
 800fa28:	e000      	b.n	800fa2c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800fa2a:	2300      	movs	r3, #0
}
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	3718      	adds	r7, #24
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd80      	pop	{r7, pc}

0800fa34 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b082      	sub	sp, #8
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2201      	movs	r2, #1
 800fa40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2200      	movs	r2, #0
 800fa48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2200      	movs	r2, #0
 800fa50:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2200      	movs	r2, #0
 800fa56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d101      	bne.n	800fa68 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800fa64:	2303      	movs	r3, #3
 800fa66:	e02f      	b.n	800fac8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d00f      	beq.n	800fa92 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa78:	685b      	ldr	r3, [r3, #4]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d009      	beq.n	800fa92 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa84:	685b      	ldr	r3, [r3, #4]
 800fa86:	687a      	ldr	r2, [r7, #4]
 800fa88:	6852      	ldr	r2, [r2, #4]
 800fa8a:	b2d2      	uxtb	r2, r2
 800fa8c:	4611      	mov	r1, r2
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fa92:	2340      	movs	r3, #64	; 0x40
 800fa94:	2200      	movs	r2, #0
 800fa96:	2100      	movs	r1, #0
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f001 fbb7 	bl	801120c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2201      	movs	r2, #1
 800faa2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2240      	movs	r2, #64	; 0x40
 800faaa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800faae:	2340      	movs	r3, #64	; 0x40
 800fab0:	2200      	movs	r2, #0
 800fab2:	2180      	movs	r1, #128	; 0x80
 800fab4:	6878      	ldr	r0, [r7, #4]
 800fab6:	f001 fba9 	bl	801120c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	2201      	movs	r2, #1
 800fabe:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2240      	movs	r2, #64	; 0x40
 800fac4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800fac6:	2300      	movs	r3, #0
}
 800fac8:	4618      	mov	r0, r3
 800faca:	3708      	adds	r7, #8
 800facc:	46bd      	mov	sp, r7
 800face:	bd80      	pop	{r7, pc}

0800fad0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fad0:	b480      	push	{r7}
 800fad2:	b083      	sub	sp, #12
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
 800fad8:	460b      	mov	r3, r1
 800fada:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	78fa      	ldrb	r2, [r7, #3]
 800fae0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fae2:	2300      	movs	r3, #0
}
 800fae4:	4618      	mov	r0, r3
 800fae6:	370c      	adds	r7, #12
 800fae8:	46bd      	mov	sp, r7
 800faea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faee:	4770      	bx	lr

0800faf0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800faf0:	b480      	push	{r7}
 800faf2:	b083      	sub	sp, #12
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fafe:	b2da      	uxtb	r2, r3
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	2204      	movs	r2, #4
 800fb0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800fb0e:	2300      	movs	r3, #0
}
 800fb10:	4618      	mov	r0, r3
 800fb12:	370c      	adds	r7, #12
 800fb14:	46bd      	mov	sp, r7
 800fb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1a:	4770      	bx	lr

0800fb1c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800fb1c:	b480      	push	{r7}
 800fb1e:	b083      	sub	sp, #12
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb2a:	b2db      	uxtb	r3, r3
 800fb2c:	2b04      	cmp	r3, #4
 800fb2e:	d106      	bne.n	800fb3e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800fb36:	b2da      	uxtb	r2, r3
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800fb3e:	2300      	movs	r3, #0
}
 800fb40:	4618      	mov	r0, r3
 800fb42:	370c      	adds	r7, #12
 800fb44:	46bd      	mov	sp, r7
 800fb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4a:	4770      	bx	lr

0800fb4c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b082      	sub	sp, #8
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d101      	bne.n	800fb62 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800fb5e:	2303      	movs	r3, #3
 800fb60:	e012      	b.n	800fb88 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb68:	b2db      	uxtb	r3, r3
 800fb6a:	2b03      	cmp	r3, #3
 800fb6c:	d10b      	bne.n	800fb86 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb74:	69db      	ldr	r3, [r3, #28]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d005      	beq.n	800fb86 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb80:	69db      	ldr	r3, [r3, #28]
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fb86:	2300      	movs	r3, #0
}
 800fb88:	4618      	mov	r0, r3
 800fb8a:	3708      	adds	r7, #8
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}

0800fb90 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b082      	sub	sp, #8
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
 800fb98:	460b      	mov	r3, r1
 800fb9a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d101      	bne.n	800fbaa <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800fba6:	2303      	movs	r3, #3
 800fba8:	e014      	b.n	800fbd4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbb0:	b2db      	uxtb	r3, r3
 800fbb2:	2b03      	cmp	r3, #3
 800fbb4:	d10d      	bne.n	800fbd2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbbc:	6a1b      	ldr	r3, [r3, #32]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d007      	beq.n	800fbd2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbc8:	6a1b      	ldr	r3, [r3, #32]
 800fbca:	78fa      	ldrb	r2, [r7, #3]
 800fbcc:	4611      	mov	r1, r2
 800fbce:	6878      	ldr	r0, [r7, #4]
 800fbd0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fbd2:	2300      	movs	r3, #0
}
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	3708      	adds	r7, #8
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}

0800fbdc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b082      	sub	sp, #8
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	460b      	mov	r3, r1
 800fbe6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d101      	bne.n	800fbf6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800fbf2:	2303      	movs	r3, #3
 800fbf4:	e014      	b.n	800fc20 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbfc:	b2db      	uxtb	r3, r3
 800fbfe:	2b03      	cmp	r3, #3
 800fc00:	d10d      	bne.n	800fc1e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d007      	beq.n	800fc1e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc16:	78fa      	ldrb	r2, [r7, #3]
 800fc18:	4611      	mov	r1, r2
 800fc1a:	6878      	ldr	r0, [r7, #4]
 800fc1c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fc1e:	2300      	movs	r3, #0
}
 800fc20:	4618      	mov	r0, r3
 800fc22:	3708      	adds	r7, #8
 800fc24:	46bd      	mov	sp, r7
 800fc26:	bd80      	pop	{r7, pc}

0800fc28 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b083      	sub	sp, #12
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fc30:	2300      	movs	r3, #0
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	370c      	adds	r7, #12
 800fc36:	46bd      	mov	sp, r7
 800fc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3c:	4770      	bx	lr

0800fc3e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800fc3e:	b580      	push	{r7, lr}
 800fc40:	b082      	sub	sp, #8
 800fc42:	af00      	add	r7, sp, #0
 800fc44:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2201      	movs	r2, #1
 800fc4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d009      	beq.n	800fc6c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc5e:	685b      	ldr	r3, [r3, #4]
 800fc60:	687a      	ldr	r2, [r7, #4]
 800fc62:	6852      	ldr	r2, [r2, #4]
 800fc64:	b2d2      	uxtb	r2, r2
 800fc66:	4611      	mov	r1, r2
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	4798      	blx	r3
  }

  return USBD_OK;
 800fc6c:	2300      	movs	r3, #0
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	3708      	adds	r7, #8
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}

0800fc76 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800fc76:	b480      	push	{r7}
 800fc78:	b087      	sub	sp, #28
 800fc7a:	af00      	add	r7, sp, #0
 800fc7c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800fc88:	697b      	ldr	r3, [r7, #20]
 800fc8a:	3301      	adds	r3, #1
 800fc8c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800fc8e:	697b      	ldr	r3, [r7, #20]
 800fc90:	781b      	ldrb	r3, [r3, #0]
 800fc92:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800fc94:	8a3b      	ldrh	r3, [r7, #16]
 800fc96:	021b      	lsls	r3, r3, #8
 800fc98:	b21a      	sxth	r2, r3
 800fc9a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fc9e:	4313      	orrs	r3, r2
 800fca0:	b21b      	sxth	r3, r3
 800fca2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800fca4:	89fb      	ldrh	r3, [r7, #14]
}
 800fca6:	4618      	mov	r0, r3
 800fca8:	371c      	adds	r7, #28
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb0:	4770      	bx	lr
	...

0800fcb4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b084      	sub	sp, #16
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
 800fcbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	781b      	ldrb	r3, [r3, #0]
 800fcc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fcca:	2b40      	cmp	r3, #64	; 0x40
 800fccc:	d005      	beq.n	800fcda <USBD_StdDevReq+0x26>
 800fcce:	2b40      	cmp	r3, #64	; 0x40
 800fcd0:	d853      	bhi.n	800fd7a <USBD_StdDevReq+0xc6>
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d00b      	beq.n	800fcee <USBD_StdDevReq+0x3a>
 800fcd6:	2b20      	cmp	r3, #32
 800fcd8:	d14f      	bne.n	800fd7a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fce0:	689b      	ldr	r3, [r3, #8]
 800fce2:	6839      	ldr	r1, [r7, #0]
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	4798      	blx	r3
 800fce8:	4603      	mov	r3, r0
 800fcea:	73fb      	strb	r3, [r7, #15]
      break;
 800fcec:	e04a      	b.n	800fd84 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	785b      	ldrb	r3, [r3, #1]
 800fcf2:	2b09      	cmp	r3, #9
 800fcf4:	d83b      	bhi.n	800fd6e <USBD_StdDevReq+0xba>
 800fcf6:	a201      	add	r2, pc, #4	; (adr r2, 800fcfc <USBD_StdDevReq+0x48>)
 800fcf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcfc:	0800fd51 	.word	0x0800fd51
 800fd00:	0800fd65 	.word	0x0800fd65
 800fd04:	0800fd6f 	.word	0x0800fd6f
 800fd08:	0800fd5b 	.word	0x0800fd5b
 800fd0c:	0800fd6f 	.word	0x0800fd6f
 800fd10:	0800fd2f 	.word	0x0800fd2f
 800fd14:	0800fd25 	.word	0x0800fd25
 800fd18:	0800fd6f 	.word	0x0800fd6f
 800fd1c:	0800fd47 	.word	0x0800fd47
 800fd20:	0800fd39 	.word	0x0800fd39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fd24:	6839      	ldr	r1, [r7, #0]
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f000 f9de 	bl	80100e8 <USBD_GetDescriptor>
          break;
 800fd2c:	e024      	b.n	800fd78 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fd2e:	6839      	ldr	r1, [r7, #0]
 800fd30:	6878      	ldr	r0, [r7, #4]
 800fd32:	f000 fb43 	bl	80103bc <USBD_SetAddress>
          break;
 800fd36:	e01f      	b.n	800fd78 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800fd38:	6839      	ldr	r1, [r7, #0]
 800fd3a:	6878      	ldr	r0, [r7, #4]
 800fd3c:	f000 fb82 	bl	8010444 <USBD_SetConfig>
 800fd40:	4603      	mov	r3, r0
 800fd42:	73fb      	strb	r3, [r7, #15]
          break;
 800fd44:	e018      	b.n	800fd78 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800fd46:	6839      	ldr	r1, [r7, #0]
 800fd48:	6878      	ldr	r0, [r7, #4]
 800fd4a:	f000 fc21 	bl	8010590 <USBD_GetConfig>
          break;
 800fd4e:	e013      	b.n	800fd78 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800fd50:	6839      	ldr	r1, [r7, #0]
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	f000 fc52 	bl	80105fc <USBD_GetStatus>
          break;
 800fd58:	e00e      	b.n	800fd78 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800fd5a:	6839      	ldr	r1, [r7, #0]
 800fd5c:	6878      	ldr	r0, [r7, #4]
 800fd5e:	f000 fc81 	bl	8010664 <USBD_SetFeature>
          break;
 800fd62:	e009      	b.n	800fd78 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fd64:	6839      	ldr	r1, [r7, #0]
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f000 fc90 	bl	801068c <USBD_ClrFeature>
          break;
 800fd6c:	e004      	b.n	800fd78 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800fd6e:	6839      	ldr	r1, [r7, #0]
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	f000 fce7 	bl	8010744 <USBD_CtlError>
          break;
 800fd76:	bf00      	nop
      }
      break;
 800fd78:	e004      	b.n	800fd84 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800fd7a:	6839      	ldr	r1, [r7, #0]
 800fd7c:	6878      	ldr	r0, [r7, #4]
 800fd7e:	f000 fce1 	bl	8010744 <USBD_CtlError>
      break;
 800fd82:	bf00      	nop
  }

  return ret;
 800fd84:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd86:	4618      	mov	r0, r3
 800fd88:	3710      	adds	r7, #16
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}
 800fd8e:	bf00      	nop

0800fd90 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b084      	sub	sp, #16
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
 800fd98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fd9e:	683b      	ldr	r3, [r7, #0]
 800fda0:	781b      	ldrb	r3, [r3, #0]
 800fda2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fda6:	2b40      	cmp	r3, #64	; 0x40
 800fda8:	d005      	beq.n	800fdb6 <USBD_StdItfReq+0x26>
 800fdaa:	2b40      	cmp	r3, #64	; 0x40
 800fdac:	d82f      	bhi.n	800fe0e <USBD_StdItfReq+0x7e>
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d001      	beq.n	800fdb6 <USBD_StdItfReq+0x26>
 800fdb2:	2b20      	cmp	r3, #32
 800fdb4:	d12b      	bne.n	800fe0e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fdbc:	b2db      	uxtb	r3, r3
 800fdbe:	3b01      	subs	r3, #1
 800fdc0:	2b02      	cmp	r3, #2
 800fdc2:	d81d      	bhi.n	800fe00 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	889b      	ldrh	r3, [r3, #4]
 800fdc8:	b2db      	uxtb	r3, r3
 800fdca:	2b01      	cmp	r3, #1
 800fdcc:	d813      	bhi.n	800fdf6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdd4:	689b      	ldr	r3, [r3, #8]
 800fdd6:	6839      	ldr	r1, [r7, #0]
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	4798      	blx	r3
 800fddc:	4603      	mov	r3, r0
 800fdde:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	88db      	ldrh	r3, [r3, #6]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d110      	bne.n	800fe0a <USBD_StdItfReq+0x7a>
 800fde8:	7bfb      	ldrb	r3, [r7, #15]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d10d      	bne.n	800fe0a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800fdee:	6878      	ldr	r0, [r7, #4]
 800fdf0:	f000 fd73 	bl	80108da <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800fdf4:	e009      	b.n	800fe0a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800fdf6:	6839      	ldr	r1, [r7, #0]
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f000 fca3 	bl	8010744 <USBD_CtlError>
          break;
 800fdfe:	e004      	b.n	800fe0a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800fe00:	6839      	ldr	r1, [r7, #0]
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f000 fc9e 	bl	8010744 <USBD_CtlError>
          break;
 800fe08:	e000      	b.n	800fe0c <USBD_StdItfReq+0x7c>
          break;
 800fe0a:	bf00      	nop
      }
      break;
 800fe0c:	e004      	b.n	800fe18 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800fe0e:	6839      	ldr	r1, [r7, #0]
 800fe10:	6878      	ldr	r0, [r7, #4]
 800fe12:	f000 fc97 	bl	8010744 <USBD_CtlError>
      break;
 800fe16:	bf00      	nop
  }

  return ret;
 800fe18:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	3710      	adds	r7, #16
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}

0800fe22 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe22:	b580      	push	{r7, lr}
 800fe24:	b084      	sub	sp, #16
 800fe26:	af00      	add	r7, sp, #0
 800fe28:	6078      	str	r0, [r7, #4]
 800fe2a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800fe30:	683b      	ldr	r3, [r7, #0]
 800fe32:	889b      	ldrh	r3, [r3, #4]
 800fe34:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fe36:	683b      	ldr	r3, [r7, #0]
 800fe38:	781b      	ldrb	r3, [r3, #0]
 800fe3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fe3e:	2b40      	cmp	r3, #64	; 0x40
 800fe40:	d007      	beq.n	800fe52 <USBD_StdEPReq+0x30>
 800fe42:	2b40      	cmp	r3, #64	; 0x40
 800fe44:	f200 8145 	bhi.w	80100d2 <USBD_StdEPReq+0x2b0>
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d00c      	beq.n	800fe66 <USBD_StdEPReq+0x44>
 800fe4c:	2b20      	cmp	r3, #32
 800fe4e:	f040 8140 	bne.w	80100d2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe58:	689b      	ldr	r3, [r3, #8]
 800fe5a:	6839      	ldr	r1, [r7, #0]
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	4798      	blx	r3
 800fe60:	4603      	mov	r3, r0
 800fe62:	73fb      	strb	r3, [r7, #15]
      break;
 800fe64:	e13a      	b.n	80100dc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	785b      	ldrb	r3, [r3, #1]
 800fe6a:	2b03      	cmp	r3, #3
 800fe6c:	d007      	beq.n	800fe7e <USBD_StdEPReq+0x5c>
 800fe6e:	2b03      	cmp	r3, #3
 800fe70:	f300 8129 	bgt.w	80100c6 <USBD_StdEPReq+0x2a4>
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d07f      	beq.n	800ff78 <USBD_StdEPReq+0x156>
 800fe78:	2b01      	cmp	r3, #1
 800fe7a:	d03c      	beq.n	800fef6 <USBD_StdEPReq+0xd4>
 800fe7c:	e123      	b.n	80100c6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe84:	b2db      	uxtb	r3, r3
 800fe86:	2b02      	cmp	r3, #2
 800fe88:	d002      	beq.n	800fe90 <USBD_StdEPReq+0x6e>
 800fe8a:	2b03      	cmp	r3, #3
 800fe8c:	d016      	beq.n	800febc <USBD_StdEPReq+0x9a>
 800fe8e:	e02c      	b.n	800feea <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fe90:	7bbb      	ldrb	r3, [r7, #14]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d00d      	beq.n	800feb2 <USBD_StdEPReq+0x90>
 800fe96:	7bbb      	ldrb	r3, [r7, #14]
 800fe98:	2b80      	cmp	r3, #128	; 0x80
 800fe9a:	d00a      	beq.n	800feb2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fe9c:	7bbb      	ldrb	r3, [r7, #14]
 800fe9e:	4619      	mov	r1, r3
 800fea0:	6878      	ldr	r0, [r7, #4]
 800fea2:	f001 fa27 	bl	80112f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fea6:	2180      	movs	r1, #128	; 0x80
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f001 fa23 	bl	80112f4 <USBD_LL_StallEP>
 800feae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800feb0:	e020      	b.n	800fef4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800feb2:	6839      	ldr	r1, [r7, #0]
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	f000 fc45 	bl	8010744 <USBD_CtlError>
              break;
 800feba:	e01b      	b.n	800fef4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	885b      	ldrh	r3, [r3, #2]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d10e      	bne.n	800fee2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fec4:	7bbb      	ldrb	r3, [r7, #14]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d00b      	beq.n	800fee2 <USBD_StdEPReq+0xc0>
 800feca:	7bbb      	ldrb	r3, [r7, #14]
 800fecc:	2b80      	cmp	r3, #128	; 0x80
 800fece:	d008      	beq.n	800fee2 <USBD_StdEPReq+0xc0>
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	88db      	ldrh	r3, [r3, #6]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d104      	bne.n	800fee2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800fed8:	7bbb      	ldrb	r3, [r7, #14]
 800feda:	4619      	mov	r1, r3
 800fedc:	6878      	ldr	r0, [r7, #4]
 800fede:	f001 fa09 	bl	80112f4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f000 fcf9 	bl	80108da <USBD_CtlSendStatus>

              break;
 800fee8:	e004      	b.n	800fef4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800feea:	6839      	ldr	r1, [r7, #0]
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	f000 fc29 	bl	8010744 <USBD_CtlError>
              break;
 800fef2:	bf00      	nop
          }
          break;
 800fef4:	e0ec      	b.n	80100d0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fefc:	b2db      	uxtb	r3, r3
 800fefe:	2b02      	cmp	r3, #2
 800ff00:	d002      	beq.n	800ff08 <USBD_StdEPReq+0xe6>
 800ff02:	2b03      	cmp	r3, #3
 800ff04:	d016      	beq.n	800ff34 <USBD_StdEPReq+0x112>
 800ff06:	e030      	b.n	800ff6a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ff08:	7bbb      	ldrb	r3, [r7, #14]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d00d      	beq.n	800ff2a <USBD_StdEPReq+0x108>
 800ff0e:	7bbb      	ldrb	r3, [r7, #14]
 800ff10:	2b80      	cmp	r3, #128	; 0x80
 800ff12:	d00a      	beq.n	800ff2a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ff14:	7bbb      	ldrb	r3, [r7, #14]
 800ff16:	4619      	mov	r1, r3
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f001 f9eb 	bl	80112f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ff1e:	2180      	movs	r1, #128	; 0x80
 800ff20:	6878      	ldr	r0, [r7, #4]
 800ff22:	f001 f9e7 	bl	80112f4 <USBD_LL_StallEP>
 800ff26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ff28:	e025      	b.n	800ff76 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ff2a:	6839      	ldr	r1, [r7, #0]
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f000 fc09 	bl	8010744 <USBD_CtlError>
              break;
 800ff32:	e020      	b.n	800ff76 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	885b      	ldrh	r3, [r3, #2]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d11b      	bne.n	800ff74 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ff3c:	7bbb      	ldrb	r3, [r7, #14]
 800ff3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d004      	beq.n	800ff50 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ff46:	7bbb      	ldrb	r3, [r7, #14]
 800ff48:	4619      	mov	r1, r3
 800ff4a:	6878      	ldr	r0, [r7, #4]
 800ff4c:	f001 fa08 	bl	8011360 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f000 fcc2 	bl	80108da <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff5c:	689b      	ldr	r3, [r3, #8]
 800ff5e:	6839      	ldr	r1, [r7, #0]
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	4798      	blx	r3
 800ff64:	4603      	mov	r3, r0
 800ff66:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ff68:	e004      	b.n	800ff74 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ff6a:	6839      	ldr	r1, [r7, #0]
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f000 fbe9 	bl	8010744 <USBD_CtlError>
              break;
 800ff72:	e000      	b.n	800ff76 <USBD_StdEPReq+0x154>
              break;
 800ff74:	bf00      	nop
          }
          break;
 800ff76:	e0ab      	b.n	80100d0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff7e:	b2db      	uxtb	r3, r3
 800ff80:	2b02      	cmp	r3, #2
 800ff82:	d002      	beq.n	800ff8a <USBD_StdEPReq+0x168>
 800ff84:	2b03      	cmp	r3, #3
 800ff86:	d032      	beq.n	800ffee <USBD_StdEPReq+0x1cc>
 800ff88:	e097      	b.n	80100ba <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ff8a:	7bbb      	ldrb	r3, [r7, #14]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d007      	beq.n	800ffa0 <USBD_StdEPReq+0x17e>
 800ff90:	7bbb      	ldrb	r3, [r7, #14]
 800ff92:	2b80      	cmp	r3, #128	; 0x80
 800ff94:	d004      	beq.n	800ffa0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ff96:	6839      	ldr	r1, [r7, #0]
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f000 fbd3 	bl	8010744 <USBD_CtlError>
                break;
 800ff9e:	e091      	b.n	80100c4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ffa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	da0b      	bge.n	800ffc0 <USBD_StdEPReq+0x19e>
 800ffa8:	7bbb      	ldrb	r3, [r7, #14]
 800ffaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ffae:	4613      	mov	r3, r2
 800ffb0:	009b      	lsls	r3, r3, #2
 800ffb2:	4413      	add	r3, r2
 800ffb4:	009b      	lsls	r3, r3, #2
 800ffb6:	3310      	adds	r3, #16
 800ffb8:	687a      	ldr	r2, [r7, #4]
 800ffba:	4413      	add	r3, r2
 800ffbc:	3304      	adds	r3, #4
 800ffbe:	e00b      	b.n	800ffd8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ffc0:	7bbb      	ldrb	r3, [r7, #14]
 800ffc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ffc6:	4613      	mov	r3, r2
 800ffc8:	009b      	lsls	r3, r3, #2
 800ffca:	4413      	add	r3, r2
 800ffcc:	009b      	lsls	r3, r3, #2
 800ffce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ffd2:	687a      	ldr	r2, [r7, #4]
 800ffd4:	4413      	add	r3, r2
 800ffd6:	3304      	adds	r3, #4
 800ffd8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ffda:	68bb      	ldr	r3, [r7, #8]
 800ffdc:	2200      	movs	r2, #0
 800ffde:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	2202      	movs	r2, #2
 800ffe4:	4619      	mov	r1, r3
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	f000 fc1d 	bl	8010826 <USBD_CtlSendData>
              break;
 800ffec:	e06a      	b.n	80100c4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ffee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	da11      	bge.n	801001a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fff6:	7bbb      	ldrb	r3, [r7, #14]
 800fff8:	f003 020f 	and.w	r2, r3, #15
 800fffc:	6879      	ldr	r1, [r7, #4]
 800fffe:	4613      	mov	r3, r2
 8010000:	009b      	lsls	r3, r3, #2
 8010002:	4413      	add	r3, r2
 8010004:	009b      	lsls	r3, r3, #2
 8010006:	440b      	add	r3, r1
 8010008:	3324      	adds	r3, #36	; 0x24
 801000a:	881b      	ldrh	r3, [r3, #0]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d117      	bne.n	8010040 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010010:	6839      	ldr	r1, [r7, #0]
 8010012:	6878      	ldr	r0, [r7, #4]
 8010014:	f000 fb96 	bl	8010744 <USBD_CtlError>
                  break;
 8010018:	e054      	b.n	80100c4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801001a:	7bbb      	ldrb	r3, [r7, #14]
 801001c:	f003 020f 	and.w	r2, r3, #15
 8010020:	6879      	ldr	r1, [r7, #4]
 8010022:	4613      	mov	r3, r2
 8010024:	009b      	lsls	r3, r3, #2
 8010026:	4413      	add	r3, r2
 8010028:	009b      	lsls	r3, r3, #2
 801002a:	440b      	add	r3, r1
 801002c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010030:	881b      	ldrh	r3, [r3, #0]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d104      	bne.n	8010040 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010036:	6839      	ldr	r1, [r7, #0]
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f000 fb83 	bl	8010744 <USBD_CtlError>
                  break;
 801003e:	e041      	b.n	80100c4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010040:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010044:	2b00      	cmp	r3, #0
 8010046:	da0b      	bge.n	8010060 <USBD_StdEPReq+0x23e>
 8010048:	7bbb      	ldrb	r3, [r7, #14]
 801004a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801004e:	4613      	mov	r3, r2
 8010050:	009b      	lsls	r3, r3, #2
 8010052:	4413      	add	r3, r2
 8010054:	009b      	lsls	r3, r3, #2
 8010056:	3310      	adds	r3, #16
 8010058:	687a      	ldr	r2, [r7, #4]
 801005a:	4413      	add	r3, r2
 801005c:	3304      	adds	r3, #4
 801005e:	e00b      	b.n	8010078 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010060:	7bbb      	ldrb	r3, [r7, #14]
 8010062:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010066:	4613      	mov	r3, r2
 8010068:	009b      	lsls	r3, r3, #2
 801006a:	4413      	add	r3, r2
 801006c:	009b      	lsls	r3, r3, #2
 801006e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010072:	687a      	ldr	r2, [r7, #4]
 8010074:	4413      	add	r3, r2
 8010076:	3304      	adds	r3, #4
 8010078:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801007a:	7bbb      	ldrb	r3, [r7, #14]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d002      	beq.n	8010086 <USBD_StdEPReq+0x264>
 8010080:	7bbb      	ldrb	r3, [r7, #14]
 8010082:	2b80      	cmp	r3, #128	; 0x80
 8010084:	d103      	bne.n	801008e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	2200      	movs	r2, #0
 801008a:	601a      	str	r2, [r3, #0]
 801008c:	e00e      	b.n	80100ac <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801008e:	7bbb      	ldrb	r3, [r7, #14]
 8010090:	4619      	mov	r1, r3
 8010092:	6878      	ldr	r0, [r7, #4]
 8010094:	f001 f99a 	bl	80113cc <USBD_LL_IsStallEP>
 8010098:	4603      	mov	r3, r0
 801009a:	2b00      	cmp	r3, #0
 801009c:	d003      	beq.n	80100a6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801009e:	68bb      	ldr	r3, [r7, #8]
 80100a0:	2201      	movs	r2, #1
 80100a2:	601a      	str	r2, [r3, #0]
 80100a4:	e002      	b.n	80100ac <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	2200      	movs	r2, #0
 80100aa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	2202      	movs	r2, #2
 80100b0:	4619      	mov	r1, r3
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f000 fbb7 	bl	8010826 <USBD_CtlSendData>
              break;
 80100b8:	e004      	b.n	80100c4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80100ba:	6839      	ldr	r1, [r7, #0]
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f000 fb41 	bl	8010744 <USBD_CtlError>
              break;
 80100c2:	bf00      	nop
          }
          break;
 80100c4:	e004      	b.n	80100d0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80100c6:	6839      	ldr	r1, [r7, #0]
 80100c8:	6878      	ldr	r0, [r7, #4]
 80100ca:	f000 fb3b 	bl	8010744 <USBD_CtlError>
          break;
 80100ce:	bf00      	nop
      }
      break;
 80100d0:	e004      	b.n	80100dc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80100d2:	6839      	ldr	r1, [r7, #0]
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f000 fb35 	bl	8010744 <USBD_CtlError>
      break;
 80100da:	bf00      	nop
  }

  return ret;
 80100dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80100de:	4618      	mov	r0, r3
 80100e0:	3710      	adds	r7, #16
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}
	...

080100e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b084      	sub	sp, #16
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
 80100f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80100f2:	2300      	movs	r3, #0
 80100f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80100f6:	2300      	movs	r3, #0
 80100f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80100fa:	2300      	movs	r3, #0
 80100fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80100fe:	683b      	ldr	r3, [r7, #0]
 8010100:	885b      	ldrh	r3, [r3, #2]
 8010102:	0a1b      	lsrs	r3, r3, #8
 8010104:	b29b      	uxth	r3, r3
 8010106:	3b01      	subs	r3, #1
 8010108:	2b06      	cmp	r3, #6
 801010a:	f200 8128 	bhi.w	801035e <USBD_GetDescriptor+0x276>
 801010e:	a201      	add	r2, pc, #4	; (adr r2, 8010114 <USBD_GetDescriptor+0x2c>)
 8010110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010114:	08010131 	.word	0x08010131
 8010118:	08010149 	.word	0x08010149
 801011c:	08010189 	.word	0x08010189
 8010120:	0801035f 	.word	0x0801035f
 8010124:	0801035f 	.word	0x0801035f
 8010128:	080102ff 	.word	0x080102ff
 801012c:	0801032b 	.word	0x0801032b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	687a      	ldr	r2, [r7, #4]
 801013a:	7c12      	ldrb	r2, [r2, #16]
 801013c:	f107 0108 	add.w	r1, r7, #8
 8010140:	4610      	mov	r0, r2
 8010142:	4798      	blx	r3
 8010144:	60f8      	str	r0, [r7, #12]
      break;
 8010146:	e112      	b.n	801036e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	7c1b      	ldrb	r3, [r3, #16]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d10d      	bne.n	801016c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010158:	f107 0208 	add.w	r2, r7, #8
 801015c:	4610      	mov	r0, r2
 801015e:	4798      	blx	r3
 8010160:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	3301      	adds	r3, #1
 8010166:	2202      	movs	r2, #2
 8010168:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801016a:	e100      	b.n	801036e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010174:	f107 0208 	add.w	r2, r7, #8
 8010178:	4610      	mov	r0, r2
 801017a:	4798      	blx	r3
 801017c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	3301      	adds	r3, #1
 8010182:	2202      	movs	r2, #2
 8010184:	701a      	strb	r2, [r3, #0]
      break;
 8010186:	e0f2      	b.n	801036e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	885b      	ldrh	r3, [r3, #2]
 801018c:	b2db      	uxtb	r3, r3
 801018e:	2b05      	cmp	r3, #5
 8010190:	f200 80ac 	bhi.w	80102ec <USBD_GetDescriptor+0x204>
 8010194:	a201      	add	r2, pc, #4	; (adr r2, 801019c <USBD_GetDescriptor+0xb4>)
 8010196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801019a:	bf00      	nop
 801019c:	080101b5 	.word	0x080101b5
 80101a0:	080101e9 	.word	0x080101e9
 80101a4:	0801021d 	.word	0x0801021d
 80101a8:	08010251 	.word	0x08010251
 80101ac:	08010285 	.word	0x08010285
 80101b0:	080102b9 	.word	0x080102b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80101ba:	685b      	ldr	r3, [r3, #4]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d00b      	beq.n	80101d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80101c6:	685b      	ldr	r3, [r3, #4]
 80101c8:	687a      	ldr	r2, [r7, #4]
 80101ca:	7c12      	ldrb	r2, [r2, #16]
 80101cc:	f107 0108 	add.w	r1, r7, #8
 80101d0:	4610      	mov	r0, r2
 80101d2:	4798      	blx	r3
 80101d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80101d6:	e091      	b.n	80102fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80101d8:	6839      	ldr	r1, [r7, #0]
 80101da:	6878      	ldr	r0, [r7, #4]
 80101dc:	f000 fab2 	bl	8010744 <USBD_CtlError>
            err++;
 80101e0:	7afb      	ldrb	r3, [r7, #11]
 80101e2:	3301      	adds	r3, #1
 80101e4:	72fb      	strb	r3, [r7, #11]
          break;
 80101e6:	e089      	b.n	80102fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80101ee:	689b      	ldr	r3, [r3, #8]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d00b      	beq.n	801020c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80101fa:	689b      	ldr	r3, [r3, #8]
 80101fc:	687a      	ldr	r2, [r7, #4]
 80101fe:	7c12      	ldrb	r2, [r2, #16]
 8010200:	f107 0108 	add.w	r1, r7, #8
 8010204:	4610      	mov	r0, r2
 8010206:	4798      	blx	r3
 8010208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801020a:	e077      	b.n	80102fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801020c:	6839      	ldr	r1, [r7, #0]
 801020e:	6878      	ldr	r0, [r7, #4]
 8010210:	f000 fa98 	bl	8010744 <USBD_CtlError>
            err++;
 8010214:	7afb      	ldrb	r3, [r7, #11]
 8010216:	3301      	adds	r3, #1
 8010218:	72fb      	strb	r3, [r7, #11]
          break;
 801021a:	e06f      	b.n	80102fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010222:	68db      	ldr	r3, [r3, #12]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d00b      	beq.n	8010240 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801022e:	68db      	ldr	r3, [r3, #12]
 8010230:	687a      	ldr	r2, [r7, #4]
 8010232:	7c12      	ldrb	r2, [r2, #16]
 8010234:	f107 0108 	add.w	r1, r7, #8
 8010238:	4610      	mov	r0, r2
 801023a:	4798      	blx	r3
 801023c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801023e:	e05d      	b.n	80102fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010240:	6839      	ldr	r1, [r7, #0]
 8010242:	6878      	ldr	r0, [r7, #4]
 8010244:	f000 fa7e 	bl	8010744 <USBD_CtlError>
            err++;
 8010248:	7afb      	ldrb	r3, [r7, #11]
 801024a:	3301      	adds	r3, #1
 801024c:	72fb      	strb	r3, [r7, #11]
          break;
 801024e:	e055      	b.n	80102fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010256:	691b      	ldr	r3, [r3, #16]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d00b      	beq.n	8010274 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010262:	691b      	ldr	r3, [r3, #16]
 8010264:	687a      	ldr	r2, [r7, #4]
 8010266:	7c12      	ldrb	r2, [r2, #16]
 8010268:	f107 0108 	add.w	r1, r7, #8
 801026c:	4610      	mov	r0, r2
 801026e:	4798      	blx	r3
 8010270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010272:	e043      	b.n	80102fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010274:	6839      	ldr	r1, [r7, #0]
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	f000 fa64 	bl	8010744 <USBD_CtlError>
            err++;
 801027c:	7afb      	ldrb	r3, [r7, #11]
 801027e:	3301      	adds	r3, #1
 8010280:	72fb      	strb	r3, [r7, #11]
          break;
 8010282:	e03b      	b.n	80102fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801028a:	695b      	ldr	r3, [r3, #20]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d00b      	beq.n	80102a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010296:	695b      	ldr	r3, [r3, #20]
 8010298:	687a      	ldr	r2, [r7, #4]
 801029a:	7c12      	ldrb	r2, [r2, #16]
 801029c:	f107 0108 	add.w	r1, r7, #8
 80102a0:	4610      	mov	r0, r2
 80102a2:	4798      	blx	r3
 80102a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80102a6:	e029      	b.n	80102fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80102a8:	6839      	ldr	r1, [r7, #0]
 80102aa:	6878      	ldr	r0, [r7, #4]
 80102ac:	f000 fa4a 	bl	8010744 <USBD_CtlError>
            err++;
 80102b0:	7afb      	ldrb	r3, [r7, #11]
 80102b2:	3301      	adds	r3, #1
 80102b4:	72fb      	strb	r3, [r7, #11]
          break;
 80102b6:	e021      	b.n	80102fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80102be:	699b      	ldr	r3, [r3, #24]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d00b      	beq.n	80102dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80102ca:	699b      	ldr	r3, [r3, #24]
 80102cc:	687a      	ldr	r2, [r7, #4]
 80102ce:	7c12      	ldrb	r2, [r2, #16]
 80102d0:	f107 0108 	add.w	r1, r7, #8
 80102d4:	4610      	mov	r0, r2
 80102d6:	4798      	blx	r3
 80102d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80102da:	e00f      	b.n	80102fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80102dc:	6839      	ldr	r1, [r7, #0]
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f000 fa30 	bl	8010744 <USBD_CtlError>
            err++;
 80102e4:	7afb      	ldrb	r3, [r7, #11]
 80102e6:	3301      	adds	r3, #1
 80102e8:	72fb      	strb	r3, [r7, #11]
          break;
 80102ea:	e007      	b.n	80102fc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80102ec:	6839      	ldr	r1, [r7, #0]
 80102ee:	6878      	ldr	r0, [r7, #4]
 80102f0:	f000 fa28 	bl	8010744 <USBD_CtlError>
          err++;
 80102f4:	7afb      	ldrb	r3, [r7, #11]
 80102f6:	3301      	adds	r3, #1
 80102f8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80102fa:	bf00      	nop
      }
      break;
 80102fc:	e037      	b.n	801036e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	7c1b      	ldrb	r3, [r3, #16]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d109      	bne.n	801031a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801030c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801030e:	f107 0208 	add.w	r2, r7, #8
 8010312:	4610      	mov	r0, r2
 8010314:	4798      	blx	r3
 8010316:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010318:	e029      	b.n	801036e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801031a:	6839      	ldr	r1, [r7, #0]
 801031c:	6878      	ldr	r0, [r7, #4]
 801031e:	f000 fa11 	bl	8010744 <USBD_CtlError>
        err++;
 8010322:	7afb      	ldrb	r3, [r7, #11]
 8010324:	3301      	adds	r3, #1
 8010326:	72fb      	strb	r3, [r7, #11]
      break;
 8010328:	e021      	b.n	801036e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	7c1b      	ldrb	r3, [r3, #16]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d10d      	bne.n	801034e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801033a:	f107 0208 	add.w	r2, r7, #8
 801033e:	4610      	mov	r0, r2
 8010340:	4798      	blx	r3
 8010342:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	3301      	adds	r3, #1
 8010348:	2207      	movs	r2, #7
 801034a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801034c:	e00f      	b.n	801036e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801034e:	6839      	ldr	r1, [r7, #0]
 8010350:	6878      	ldr	r0, [r7, #4]
 8010352:	f000 f9f7 	bl	8010744 <USBD_CtlError>
        err++;
 8010356:	7afb      	ldrb	r3, [r7, #11]
 8010358:	3301      	adds	r3, #1
 801035a:	72fb      	strb	r3, [r7, #11]
      break;
 801035c:	e007      	b.n	801036e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801035e:	6839      	ldr	r1, [r7, #0]
 8010360:	6878      	ldr	r0, [r7, #4]
 8010362:	f000 f9ef 	bl	8010744 <USBD_CtlError>
      err++;
 8010366:	7afb      	ldrb	r3, [r7, #11]
 8010368:	3301      	adds	r3, #1
 801036a:	72fb      	strb	r3, [r7, #11]
      break;
 801036c:	bf00      	nop
  }

  if (err != 0U)
 801036e:	7afb      	ldrb	r3, [r7, #11]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d11e      	bne.n	80103b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	88db      	ldrh	r3, [r3, #6]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d016      	beq.n	80103aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801037c:	893b      	ldrh	r3, [r7, #8]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d00e      	beq.n	80103a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	88da      	ldrh	r2, [r3, #6]
 8010386:	893b      	ldrh	r3, [r7, #8]
 8010388:	4293      	cmp	r3, r2
 801038a:	bf28      	it	cs
 801038c:	4613      	movcs	r3, r2
 801038e:	b29b      	uxth	r3, r3
 8010390:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010392:	893b      	ldrh	r3, [r7, #8]
 8010394:	461a      	mov	r2, r3
 8010396:	68f9      	ldr	r1, [r7, #12]
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f000 fa44 	bl	8010826 <USBD_CtlSendData>
 801039e:	e009      	b.n	80103b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80103a0:	6839      	ldr	r1, [r7, #0]
 80103a2:	6878      	ldr	r0, [r7, #4]
 80103a4:	f000 f9ce 	bl	8010744 <USBD_CtlError>
 80103a8:	e004      	b.n	80103b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	f000 fa95 	bl	80108da <USBD_CtlSendStatus>
 80103b0:	e000      	b.n	80103b4 <USBD_GetDescriptor+0x2cc>
    return;
 80103b2:	bf00      	nop
  }
}
 80103b4:	3710      	adds	r7, #16
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}
 80103ba:	bf00      	nop

080103bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b084      	sub	sp, #16
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
 80103c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	889b      	ldrh	r3, [r3, #4]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d131      	bne.n	8010432 <USBD_SetAddress+0x76>
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	88db      	ldrh	r3, [r3, #6]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d12d      	bne.n	8010432 <USBD_SetAddress+0x76>
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	885b      	ldrh	r3, [r3, #2]
 80103da:	2b7f      	cmp	r3, #127	; 0x7f
 80103dc:	d829      	bhi.n	8010432 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	885b      	ldrh	r3, [r3, #2]
 80103e2:	b2db      	uxtb	r3, r3
 80103e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80103e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80103f0:	b2db      	uxtb	r3, r3
 80103f2:	2b03      	cmp	r3, #3
 80103f4:	d104      	bne.n	8010400 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80103f6:	6839      	ldr	r1, [r7, #0]
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f000 f9a3 	bl	8010744 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103fe:	e01d      	b.n	801043c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	7bfa      	ldrb	r2, [r7, #15]
 8010404:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010408:	7bfb      	ldrb	r3, [r7, #15]
 801040a:	4619      	mov	r1, r3
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f001 f809 	bl	8011424 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010412:	6878      	ldr	r0, [r7, #4]
 8010414:	f000 fa61 	bl	80108da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010418:	7bfb      	ldrb	r3, [r7, #15]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d004      	beq.n	8010428 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	2202      	movs	r2, #2
 8010422:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010426:	e009      	b.n	801043c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2201      	movs	r2, #1
 801042c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010430:	e004      	b.n	801043c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010432:	6839      	ldr	r1, [r7, #0]
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	f000 f985 	bl	8010744 <USBD_CtlError>
  }
}
 801043a:	bf00      	nop
 801043c:	bf00      	nop
 801043e:	3710      	adds	r7, #16
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}

08010444 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b084      	sub	sp, #16
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801044e:	2300      	movs	r3, #0
 8010450:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	885b      	ldrh	r3, [r3, #2]
 8010456:	b2da      	uxtb	r2, r3
 8010458:	4b4c      	ldr	r3, [pc, #304]	; (801058c <USBD_SetConfig+0x148>)
 801045a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801045c:	4b4b      	ldr	r3, [pc, #300]	; (801058c <USBD_SetConfig+0x148>)
 801045e:	781b      	ldrb	r3, [r3, #0]
 8010460:	2b01      	cmp	r3, #1
 8010462:	d905      	bls.n	8010470 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010464:	6839      	ldr	r1, [r7, #0]
 8010466:	6878      	ldr	r0, [r7, #4]
 8010468:	f000 f96c 	bl	8010744 <USBD_CtlError>
    return USBD_FAIL;
 801046c:	2303      	movs	r3, #3
 801046e:	e088      	b.n	8010582 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010476:	b2db      	uxtb	r3, r3
 8010478:	2b02      	cmp	r3, #2
 801047a:	d002      	beq.n	8010482 <USBD_SetConfig+0x3e>
 801047c:	2b03      	cmp	r3, #3
 801047e:	d025      	beq.n	80104cc <USBD_SetConfig+0x88>
 8010480:	e071      	b.n	8010566 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010482:	4b42      	ldr	r3, [pc, #264]	; (801058c <USBD_SetConfig+0x148>)
 8010484:	781b      	ldrb	r3, [r3, #0]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d01c      	beq.n	80104c4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801048a:	4b40      	ldr	r3, [pc, #256]	; (801058c <USBD_SetConfig+0x148>)
 801048c:	781b      	ldrb	r3, [r3, #0]
 801048e:	461a      	mov	r2, r3
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010494:	4b3d      	ldr	r3, [pc, #244]	; (801058c <USBD_SetConfig+0x148>)
 8010496:	781b      	ldrb	r3, [r3, #0]
 8010498:	4619      	mov	r1, r3
 801049a:	6878      	ldr	r0, [r7, #4]
 801049c:	f7ff f948 	bl	800f730 <USBD_SetClassConfig>
 80104a0:	4603      	mov	r3, r0
 80104a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80104a4:	7bfb      	ldrb	r3, [r7, #15]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d004      	beq.n	80104b4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80104aa:	6839      	ldr	r1, [r7, #0]
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	f000 f949 	bl	8010744 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80104b2:	e065      	b.n	8010580 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	f000 fa10 	bl	80108da <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2203      	movs	r2, #3
 80104be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80104c2:	e05d      	b.n	8010580 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80104c4:	6878      	ldr	r0, [r7, #4]
 80104c6:	f000 fa08 	bl	80108da <USBD_CtlSendStatus>
      break;
 80104ca:	e059      	b.n	8010580 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80104cc:	4b2f      	ldr	r3, [pc, #188]	; (801058c <USBD_SetConfig+0x148>)
 80104ce:	781b      	ldrb	r3, [r3, #0]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d112      	bne.n	80104fa <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2202      	movs	r2, #2
 80104d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80104dc:	4b2b      	ldr	r3, [pc, #172]	; (801058c <USBD_SetConfig+0x148>)
 80104de:	781b      	ldrb	r3, [r3, #0]
 80104e0:	461a      	mov	r2, r3
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80104e6:	4b29      	ldr	r3, [pc, #164]	; (801058c <USBD_SetConfig+0x148>)
 80104e8:	781b      	ldrb	r3, [r3, #0]
 80104ea:	4619      	mov	r1, r3
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f7ff f93b 	bl	800f768 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80104f2:	6878      	ldr	r0, [r7, #4]
 80104f4:	f000 f9f1 	bl	80108da <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80104f8:	e042      	b.n	8010580 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80104fa:	4b24      	ldr	r3, [pc, #144]	; (801058c <USBD_SetConfig+0x148>)
 80104fc:	781b      	ldrb	r3, [r3, #0]
 80104fe:	461a      	mov	r2, r3
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	685b      	ldr	r3, [r3, #4]
 8010504:	429a      	cmp	r2, r3
 8010506:	d02a      	beq.n	801055e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	685b      	ldr	r3, [r3, #4]
 801050c:	b2db      	uxtb	r3, r3
 801050e:	4619      	mov	r1, r3
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	f7ff f929 	bl	800f768 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010516:	4b1d      	ldr	r3, [pc, #116]	; (801058c <USBD_SetConfig+0x148>)
 8010518:	781b      	ldrb	r3, [r3, #0]
 801051a:	461a      	mov	r2, r3
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010520:	4b1a      	ldr	r3, [pc, #104]	; (801058c <USBD_SetConfig+0x148>)
 8010522:	781b      	ldrb	r3, [r3, #0]
 8010524:	4619      	mov	r1, r3
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f7ff f902 	bl	800f730 <USBD_SetClassConfig>
 801052c:	4603      	mov	r3, r0
 801052e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010530:	7bfb      	ldrb	r3, [r7, #15]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d00f      	beq.n	8010556 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8010536:	6839      	ldr	r1, [r7, #0]
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f000 f903 	bl	8010744 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	685b      	ldr	r3, [r3, #4]
 8010542:	b2db      	uxtb	r3, r3
 8010544:	4619      	mov	r1, r3
 8010546:	6878      	ldr	r0, [r7, #4]
 8010548:	f7ff f90e 	bl	800f768 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	2202      	movs	r2, #2
 8010550:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010554:	e014      	b.n	8010580 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010556:	6878      	ldr	r0, [r7, #4]
 8010558:	f000 f9bf 	bl	80108da <USBD_CtlSendStatus>
      break;
 801055c:	e010      	b.n	8010580 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801055e:	6878      	ldr	r0, [r7, #4]
 8010560:	f000 f9bb 	bl	80108da <USBD_CtlSendStatus>
      break;
 8010564:	e00c      	b.n	8010580 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8010566:	6839      	ldr	r1, [r7, #0]
 8010568:	6878      	ldr	r0, [r7, #4]
 801056a:	f000 f8eb 	bl	8010744 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801056e:	4b07      	ldr	r3, [pc, #28]	; (801058c <USBD_SetConfig+0x148>)
 8010570:	781b      	ldrb	r3, [r3, #0]
 8010572:	4619      	mov	r1, r3
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f7ff f8f7 	bl	800f768 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801057a:	2303      	movs	r3, #3
 801057c:	73fb      	strb	r3, [r7, #15]
      break;
 801057e:	bf00      	nop
  }

  return ret;
 8010580:	7bfb      	ldrb	r3, [r7, #15]
}
 8010582:	4618      	mov	r0, r3
 8010584:	3710      	adds	r7, #16
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}
 801058a:	bf00      	nop
 801058c:	20000d90 	.word	0x20000d90

08010590 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b082      	sub	sp, #8
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	88db      	ldrh	r3, [r3, #6]
 801059e:	2b01      	cmp	r3, #1
 80105a0:	d004      	beq.n	80105ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80105a2:	6839      	ldr	r1, [r7, #0]
 80105a4:	6878      	ldr	r0, [r7, #4]
 80105a6:	f000 f8cd 	bl	8010744 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80105aa:	e023      	b.n	80105f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80105b2:	b2db      	uxtb	r3, r3
 80105b4:	2b02      	cmp	r3, #2
 80105b6:	dc02      	bgt.n	80105be <USBD_GetConfig+0x2e>
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	dc03      	bgt.n	80105c4 <USBD_GetConfig+0x34>
 80105bc:	e015      	b.n	80105ea <USBD_GetConfig+0x5a>
 80105be:	2b03      	cmp	r3, #3
 80105c0:	d00b      	beq.n	80105da <USBD_GetConfig+0x4a>
 80105c2:	e012      	b.n	80105ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2200      	movs	r2, #0
 80105c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	3308      	adds	r3, #8
 80105ce:	2201      	movs	r2, #1
 80105d0:	4619      	mov	r1, r3
 80105d2:	6878      	ldr	r0, [r7, #4]
 80105d4:	f000 f927 	bl	8010826 <USBD_CtlSendData>
        break;
 80105d8:	e00c      	b.n	80105f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	3304      	adds	r3, #4
 80105de:	2201      	movs	r2, #1
 80105e0:	4619      	mov	r1, r3
 80105e2:	6878      	ldr	r0, [r7, #4]
 80105e4:	f000 f91f 	bl	8010826 <USBD_CtlSendData>
        break;
 80105e8:	e004      	b.n	80105f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80105ea:	6839      	ldr	r1, [r7, #0]
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	f000 f8a9 	bl	8010744 <USBD_CtlError>
        break;
 80105f2:	bf00      	nop
}
 80105f4:	bf00      	nop
 80105f6:	3708      	adds	r7, #8
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}

080105fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b082      	sub	sp, #8
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801060c:	b2db      	uxtb	r3, r3
 801060e:	3b01      	subs	r3, #1
 8010610:	2b02      	cmp	r3, #2
 8010612:	d81e      	bhi.n	8010652 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010614:	683b      	ldr	r3, [r7, #0]
 8010616:	88db      	ldrh	r3, [r3, #6]
 8010618:	2b02      	cmp	r3, #2
 801061a:	d004      	beq.n	8010626 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801061c:	6839      	ldr	r1, [r7, #0]
 801061e:	6878      	ldr	r0, [r7, #4]
 8010620:	f000 f890 	bl	8010744 <USBD_CtlError>
        break;
 8010624:	e01a      	b.n	801065c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2201      	movs	r2, #1
 801062a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010632:	2b00      	cmp	r3, #0
 8010634:	d005      	beq.n	8010642 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	68db      	ldr	r3, [r3, #12]
 801063a:	f043 0202 	orr.w	r2, r3, #2
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	330c      	adds	r3, #12
 8010646:	2202      	movs	r2, #2
 8010648:	4619      	mov	r1, r3
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f000 f8eb 	bl	8010826 <USBD_CtlSendData>
      break;
 8010650:	e004      	b.n	801065c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010652:	6839      	ldr	r1, [r7, #0]
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f000 f875 	bl	8010744 <USBD_CtlError>
      break;
 801065a:	bf00      	nop
  }
}
 801065c:	bf00      	nop
 801065e:	3708      	adds	r7, #8
 8010660:	46bd      	mov	sp, r7
 8010662:	bd80      	pop	{r7, pc}

08010664 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b082      	sub	sp, #8
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
 801066c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	885b      	ldrh	r3, [r3, #2]
 8010672:	2b01      	cmp	r3, #1
 8010674:	d106      	bne.n	8010684 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	2201      	movs	r2, #1
 801067a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801067e:	6878      	ldr	r0, [r7, #4]
 8010680:	f000 f92b 	bl	80108da <USBD_CtlSendStatus>
  }
}
 8010684:	bf00      	nop
 8010686:	3708      	adds	r7, #8
 8010688:	46bd      	mov	sp, r7
 801068a:	bd80      	pop	{r7, pc}

0801068c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b082      	sub	sp, #8
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
 8010694:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801069c:	b2db      	uxtb	r3, r3
 801069e:	3b01      	subs	r3, #1
 80106a0:	2b02      	cmp	r3, #2
 80106a2:	d80b      	bhi.n	80106bc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	885b      	ldrh	r3, [r3, #2]
 80106a8:	2b01      	cmp	r3, #1
 80106aa:	d10c      	bne.n	80106c6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	2200      	movs	r2, #0
 80106b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80106b4:	6878      	ldr	r0, [r7, #4]
 80106b6:	f000 f910 	bl	80108da <USBD_CtlSendStatus>
      }
      break;
 80106ba:	e004      	b.n	80106c6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80106bc:	6839      	ldr	r1, [r7, #0]
 80106be:	6878      	ldr	r0, [r7, #4]
 80106c0:	f000 f840 	bl	8010744 <USBD_CtlError>
      break;
 80106c4:	e000      	b.n	80106c8 <USBD_ClrFeature+0x3c>
      break;
 80106c6:	bf00      	nop
  }
}
 80106c8:	bf00      	nop
 80106ca:	3708      	adds	r7, #8
 80106cc:	46bd      	mov	sp, r7
 80106ce:	bd80      	pop	{r7, pc}

080106d0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b084      	sub	sp, #16
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
 80106d8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	781a      	ldrb	r2, [r3, #0]
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	3301      	adds	r3, #1
 80106ea:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	781a      	ldrb	r2, [r3, #0]
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	3301      	adds	r3, #1
 80106f8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80106fa:	68f8      	ldr	r0, [r7, #12]
 80106fc:	f7ff fabb 	bl	800fc76 <SWAPBYTE>
 8010700:	4603      	mov	r3, r0
 8010702:	461a      	mov	r2, r3
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	3301      	adds	r3, #1
 801070c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	3301      	adds	r3, #1
 8010712:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010714:	68f8      	ldr	r0, [r7, #12]
 8010716:	f7ff faae 	bl	800fc76 <SWAPBYTE>
 801071a:	4603      	mov	r3, r0
 801071c:	461a      	mov	r2, r3
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	3301      	adds	r3, #1
 8010726:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	3301      	adds	r3, #1
 801072c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801072e:	68f8      	ldr	r0, [r7, #12]
 8010730:	f7ff faa1 	bl	800fc76 <SWAPBYTE>
 8010734:	4603      	mov	r3, r0
 8010736:	461a      	mov	r2, r3
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	80da      	strh	r2, [r3, #6]
}
 801073c:	bf00      	nop
 801073e:	3710      	adds	r7, #16
 8010740:	46bd      	mov	sp, r7
 8010742:	bd80      	pop	{r7, pc}

08010744 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b082      	sub	sp, #8
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
 801074c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801074e:	2180      	movs	r1, #128	; 0x80
 8010750:	6878      	ldr	r0, [r7, #4]
 8010752:	f000 fdcf 	bl	80112f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010756:	2100      	movs	r1, #0
 8010758:	6878      	ldr	r0, [r7, #4]
 801075a:	f000 fdcb 	bl	80112f4 <USBD_LL_StallEP>
}
 801075e:	bf00      	nop
 8010760:	3708      	adds	r7, #8
 8010762:	46bd      	mov	sp, r7
 8010764:	bd80      	pop	{r7, pc}

08010766 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010766:	b580      	push	{r7, lr}
 8010768:	b086      	sub	sp, #24
 801076a:	af00      	add	r7, sp, #0
 801076c:	60f8      	str	r0, [r7, #12]
 801076e:	60b9      	str	r1, [r7, #8]
 8010770:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010772:	2300      	movs	r3, #0
 8010774:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d036      	beq.n	80107ea <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010780:	6938      	ldr	r0, [r7, #16]
 8010782:	f000 f836 	bl	80107f2 <USBD_GetLen>
 8010786:	4603      	mov	r3, r0
 8010788:	3301      	adds	r3, #1
 801078a:	b29b      	uxth	r3, r3
 801078c:	005b      	lsls	r3, r3, #1
 801078e:	b29a      	uxth	r2, r3
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010794:	7dfb      	ldrb	r3, [r7, #23]
 8010796:	68ba      	ldr	r2, [r7, #8]
 8010798:	4413      	add	r3, r2
 801079a:	687a      	ldr	r2, [r7, #4]
 801079c:	7812      	ldrb	r2, [r2, #0]
 801079e:	701a      	strb	r2, [r3, #0]
  idx++;
 80107a0:	7dfb      	ldrb	r3, [r7, #23]
 80107a2:	3301      	adds	r3, #1
 80107a4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80107a6:	7dfb      	ldrb	r3, [r7, #23]
 80107a8:	68ba      	ldr	r2, [r7, #8]
 80107aa:	4413      	add	r3, r2
 80107ac:	2203      	movs	r2, #3
 80107ae:	701a      	strb	r2, [r3, #0]
  idx++;
 80107b0:	7dfb      	ldrb	r3, [r7, #23]
 80107b2:	3301      	adds	r3, #1
 80107b4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80107b6:	e013      	b.n	80107e0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80107b8:	7dfb      	ldrb	r3, [r7, #23]
 80107ba:	68ba      	ldr	r2, [r7, #8]
 80107bc:	4413      	add	r3, r2
 80107be:	693a      	ldr	r2, [r7, #16]
 80107c0:	7812      	ldrb	r2, [r2, #0]
 80107c2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80107c4:	693b      	ldr	r3, [r7, #16]
 80107c6:	3301      	adds	r3, #1
 80107c8:	613b      	str	r3, [r7, #16]
    idx++;
 80107ca:	7dfb      	ldrb	r3, [r7, #23]
 80107cc:	3301      	adds	r3, #1
 80107ce:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80107d0:	7dfb      	ldrb	r3, [r7, #23]
 80107d2:	68ba      	ldr	r2, [r7, #8]
 80107d4:	4413      	add	r3, r2
 80107d6:	2200      	movs	r2, #0
 80107d8:	701a      	strb	r2, [r3, #0]
    idx++;
 80107da:	7dfb      	ldrb	r3, [r7, #23]
 80107dc:	3301      	adds	r3, #1
 80107de:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80107e0:	693b      	ldr	r3, [r7, #16]
 80107e2:	781b      	ldrb	r3, [r3, #0]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d1e7      	bne.n	80107b8 <USBD_GetString+0x52>
 80107e8:	e000      	b.n	80107ec <USBD_GetString+0x86>
    return;
 80107ea:	bf00      	nop
  }
}
 80107ec:	3718      	adds	r7, #24
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}

080107f2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80107f2:	b480      	push	{r7}
 80107f4:	b085      	sub	sp, #20
 80107f6:	af00      	add	r7, sp, #0
 80107f8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80107fa:	2300      	movs	r3, #0
 80107fc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010802:	e005      	b.n	8010810 <USBD_GetLen+0x1e>
  {
    len++;
 8010804:	7bfb      	ldrb	r3, [r7, #15]
 8010806:	3301      	adds	r3, #1
 8010808:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801080a:	68bb      	ldr	r3, [r7, #8]
 801080c:	3301      	adds	r3, #1
 801080e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010810:	68bb      	ldr	r3, [r7, #8]
 8010812:	781b      	ldrb	r3, [r3, #0]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d1f5      	bne.n	8010804 <USBD_GetLen+0x12>
  }

  return len;
 8010818:	7bfb      	ldrb	r3, [r7, #15]
}
 801081a:	4618      	mov	r0, r3
 801081c:	3714      	adds	r7, #20
 801081e:	46bd      	mov	sp, r7
 8010820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010824:	4770      	bx	lr

08010826 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010826:	b580      	push	{r7, lr}
 8010828:	b084      	sub	sp, #16
 801082a:	af00      	add	r7, sp, #0
 801082c:	60f8      	str	r0, [r7, #12]
 801082e:	60b9      	str	r1, [r7, #8]
 8010830:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	2202      	movs	r2, #2
 8010836:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	687a      	ldr	r2, [r7, #4]
 801083e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	687a      	ldr	r2, [r7, #4]
 8010844:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	68ba      	ldr	r2, [r7, #8]
 801084a:	2100      	movs	r1, #0
 801084c:	68f8      	ldr	r0, [r7, #12]
 801084e:	f000 fe1f 	bl	8011490 <USBD_LL_Transmit>

  return USBD_OK;
 8010852:	2300      	movs	r3, #0
}
 8010854:	4618      	mov	r0, r3
 8010856:	3710      	adds	r7, #16
 8010858:	46bd      	mov	sp, r7
 801085a:	bd80      	pop	{r7, pc}

0801085c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b084      	sub	sp, #16
 8010860:	af00      	add	r7, sp, #0
 8010862:	60f8      	str	r0, [r7, #12]
 8010864:	60b9      	str	r1, [r7, #8]
 8010866:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	68ba      	ldr	r2, [r7, #8]
 801086c:	2100      	movs	r1, #0
 801086e:	68f8      	ldr	r0, [r7, #12]
 8010870:	f000 fe0e 	bl	8011490 <USBD_LL_Transmit>

  return USBD_OK;
 8010874:	2300      	movs	r3, #0
}
 8010876:	4618      	mov	r0, r3
 8010878:	3710      	adds	r7, #16
 801087a:	46bd      	mov	sp, r7
 801087c:	bd80      	pop	{r7, pc}

0801087e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801087e:	b580      	push	{r7, lr}
 8010880:	b084      	sub	sp, #16
 8010882:	af00      	add	r7, sp, #0
 8010884:	60f8      	str	r0, [r7, #12]
 8010886:	60b9      	str	r1, [r7, #8]
 8010888:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	2203      	movs	r2, #3
 801088e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	687a      	ldr	r2, [r7, #4]
 8010896:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	687a      	ldr	r2, [r7, #4]
 801089e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	68ba      	ldr	r2, [r7, #8]
 80108a6:	2100      	movs	r1, #0
 80108a8:	68f8      	ldr	r0, [r7, #12]
 80108aa:	f000 fe29 	bl	8011500 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80108ae:	2300      	movs	r3, #0
}
 80108b0:	4618      	mov	r0, r3
 80108b2:	3710      	adds	r7, #16
 80108b4:	46bd      	mov	sp, r7
 80108b6:	bd80      	pop	{r7, pc}

080108b8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b084      	sub	sp, #16
 80108bc:	af00      	add	r7, sp, #0
 80108be:	60f8      	str	r0, [r7, #12]
 80108c0:	60b9      	str	r1, [r7, #8]
 80108c2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	68ba      	ldr	r2, [r7, #8]
 80108c8:	2100      	movs	r1, #0
 80108ca:	68f8      	ldr	r0, [r7, #12]
 80108cc:	f000 fe18 	bl	8011500 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80108d0:	2300      	movs	r3, #0
}
 80108d2:	4618      	mov	r0, r3
 80108d4:	3710      	adds	r7, #16
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}

080108da <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80108da:	b580      	push	{r7, lr}
 80108dc:	b082      	sub	sp, #8
 80108de:	af00      	add	r7, sp, #0
 80108e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	2204      	movs	r2, #4
 80108e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80108ea:	2300      	movs	r3, #0
 80108ec:	2200      	movs	r2, #0
 80108ee:	2100      	movs	r1, #0
 80108f0:	6878      	ldr	r0, [r7, #4]
 80108f2:	f000 fdcd 	bl	8011490 <USBD_LL_Transmit>

  return USBD_OK;
 80108f6:	2300      	movs	r3, #0
}
 80108f8:	4618      	mov	r0, r3
 80108fa:	3708      	adds	r7, #8
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd80      	pop	{r7, pc}

08010900 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b082      	sub	sp, #8
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	2205      	movs	r2, #5
 801090c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010910:	2300      	movs	r3, #0
 8010912:	2200      	movs	r2, #0
 8010914:	2100      	movs	r1, #0
 8010916:	6878      	ldr	r0, [r7, #4]
 8010918:	f000 fdf2 	bl	8011500 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801091c:	2300      	movs	r3, #0
}
 801091e:	4618      	mov	r0, r3
 8010920:	3708      	adds	r7, #8
 8010922:	46bd      	mov	sp, r7
 8010924:	bd80      	pop	{r7, pc}
	...

08010928 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010928:	b480      	push	{r7}
 801092a:	b087      	sub	sp, #28
 801092c:	af00      	add	r7, sp, #0
 801092e:	60f8      	str	r0, [r7, #12]
 8010930:	60b9      	str	r1, [r7, #8]
 8010932:	4613      	mov	r3, r2
 8010934:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010936:	2301      	movs	r3, #1
 8010938:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801093a:	2300      	movs	r3, #0
 801093c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801093e:	4b1f      	ldr	r3, [pc, #124]	; (80109bc <FATFS_LinkDriverEx+0x94>)
 8010940:	7a5b      	ldrb	r3, [r3, #9]
 8010942:	b2db      	uxtb	r3, r3
 8010944:	2b00      	cmp	r3, #0
 8010946:	d131      	bne.n	80109ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010948:	4b1c      	ldr	r3, [pc, #112]	; (80109bc <FATFS_LinkDriverEx+0x94>)
 801094a:	7a5b      	ldrb	r3, [r3, #9]
 801094c:	b2db      	uxtb	r3, r3
 801094e:	461a      	mov	r2, r3
 8010950:	4b1a      	ldr	r3, [pc, #104]	; (80109bc <FATFS_LinkDriverEx+0x94>)
 8010952:	2100      	movs	r1, #0
 8010954:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010956:	4b19      	ldr	r3, [pc, #100]	; (80109bc <FATFS_LinkDriverEx+0x94>)
 8010958:	7a5b      	ldrb	r3, [r3, #9]
 801095a:	b2db      	uxtb	r3, r3
 801095c:	4a17      	ldr	r2, [pc, #92]	; (80109bc <FATFS_LinkDriverEx+0x94>)
 801095e:	009b      	lsls	r3, r3, #2
 8010960:	4413      	add	r3, r2
 8010962:	68fa      	ldr	r2, [r7, #12]
 8010964:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010966:	4b15      	ldr	r3, [pc, #84]	; (80109bc <FATFS_LinkDriverEx+0x94>)
 8010968:	7a5b      	ldrb	r3, [r3, #9]
 801096a:	b2db      	uxtb	r3, r3
 801096c:	461a      	mov	r2, r3
 801096e:	4b13      	ldr	r3, [pc, #76]	; (80109bc <FATFS_LinkDriverEx+0x94>)
 8010970:	4413      	add	r3, r2
 8010972:	79fa      	ldrb	r2, [r7, #7]
 8010974:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010976:	4b11      	ldr	r3, [pc, #68]	; (80109bc <FATFS_LinkDriverEx+0x94>)
 8010978:	7a5b      	ldrb	r3, [r3, #9]
 801097a:	b2db      	uxtb	r3, r3
 801097c:	1c5a      	adds	r2, r3, #1
 801097e:	b2d1      	uxtb	r1, r2
 8010980:	4a0e      	ldr	r2, [pc, #56]	; (80109bc <FATFS_LinkDriverEx+0x94>)
 8010982:	7251      	strb	r1, [r2, #9]
 8010984:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010986:	7dbb      	ldrb	r3, [r7, #22]
 8010988:	3330      	adds	r3, #48	; 0x30
 801098a:	b2da      	uxtb	r2, r3
 801098c:	68bb      	ldr	r3, [r7, #8]
 801098e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010990:	68bb      	ldr	r3, [r7, #8]
 8010992:	3301      	adds	r3, #1
 8010994:	223a      	movs	r2, #58	; 0x3a
 8010996:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	3302      	adds	r3, #2
 801099c:	222f      	movs	r2, #47	; 0x2f
 801099e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80109a0:	68bb      	ldr	r3, [r7, #8]
 80109a2:	3303      	adds	r3, #3
 80109a4:	2200      	movs	r2, #0
 80109a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80109a8:	2300      	movs	r3, #0
 80109aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80109ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80109ae:	4618      	mov	r0, r3
 80109b0:	371c      	adds	r7, #28
 80109b2:	46bd      	mov	sp, r7
 80109b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b8:	4770      	bx	lr
 80109ba:	bf00      	nop
 80109bc:	20000d94 	.word	0x20000d94

080109c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b082      	sub	sp, #8
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
 80109c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80109ca:	2200      	movs	r2, #0
 80109cc:	6839      	ldr	r1, [r7, #0]
 80109ce:	6878      	ldr	r0, [r7, #4]
 80109d0:	f7ff ffaa 	bl	8010928 <FATFS_LinkDriverEx>
 80109d4:	4603      	mov	r3, r0
}
 80109d6:	4618      	mov	r0, r3
 80109d8:	3708      	adds	r7, #8
 80109da:	46bd      	mov	sp, r7
 80109dc:	bd80      	pop	{r7, pc}
	...

080109e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80109e4:	2200      	movs	r2, #0
 80109e6:	4912      	ldr	r1, [pc, #72]	; (8010a30 <MX_USB_DEVICE_Init+0x50>)
 80109e8:	4812      	ldr	r0, [pc, #72]	; (8010a34 <MX_USB_DEVICE_Init+0x54>)
 80109ea:	f7fe fe33 	bl	800f654 <USBD_Init>
 80109ee:	4603      	mov	r3, r0
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d001      	beq.n	80109f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80109f4:	f7f1 fc80 	bl	80022f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80109f8:	490f      	ldr	r1, [pc, #60]	; (8010a38 <MX_USB_DEVICE_Init+0x58>)
 80109fa:	480e      	ldr	r0, [pc, #56]	; (8010a34 <MX_USB_DEVICE_Init+0x54>)
 80109fc:	f7fe fe5a 	bl	800f6b4 <USBD_RegisterClass>
 8010a00:	4603      	mov	r3, r0
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d001      	beq.n	8010a0a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010a06:	f7f1 fc77 	bl	80022f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010a0a:	490c      	ldr	r1, [pc, #48]	; (8010a3c <MX_USB_DEVICE_Init+0x5c>)
 8010a0c:	4809      	ldr	r0, [pc, #36]	; (8010a34 <MX_USB_DEVICE_Init+0x54>)
 8010a0e:	f7fe fd7b 	bl	800f508 <USBD_CDC_RegisterInterface>
 8010a12:	4603      	mov	r3, r0
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d001      	beq.n	8010a1c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010a18:	f7f1 fc6e 	bl	80022f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010a1c:	4805      	ldr	r0, [pc, #20]	; (8010a34 <MX_USB_DEVICE_Init+0x54>)
 8010a1e:	f7fe fe70 	bl	800f702 <USBD_Start>
 8010a22:	4603      	mov	r3, r0
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d001      	beq.n	8010a2c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010a28:	f7f1 fc66 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010a2c:	bf00      	nop
 8010a2e:	bd80      	pop	{r7, pc}
 8010a30:	2000013c 	.word	0x2000013c
 8010a34:	20000da0 	.word	0x20000da0
 8010a38:	20000024 	.word	0x20000024
 8010a3c:	20000128 	.word	0x20000128

08010a40 <CDC_Init_FS>:
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010a44:	2200      	movs	r2, #0
 8010a46:	4905      	ldr	r1, [pc, #20]	; (8010a5c <CDC_Init_FS+0x1c>)
 8010a48:	4805      	ldr	r0, [pc, #20]	; (8010a60 <CDC_Init_FS+0x20>)
 8010a4a:	f7fe fd72 	bl	800f532 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010a4e:	4905      	ldr	r1, [pc, #20]	; (8010a64 <CDC_Init_FS+0x24>)
 8010a50:	4803      	ldr	r0, [pc, #12]	; (8010a60 <CDC_Init_FS+0x20>)
 8010a52:	f7fe fd8c 	bl	800f56e <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8010a56:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 8010a58:	4618      	mov	r0, r3
 8010a5a:	bd80      	pop	{r7, pc}
 8010a5c:	20001874 	.word	0x20001874
 8010a60:	20000da0 	.word	0x20000da0
 8010a64:	20001074 	.word	0x20001074

08010a68 <CDC_DeInit_FS>:
/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void)
{
 8010a68:	b480      	push	{r7}
 8010a6a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 8010a6c:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	46bd      	mov	sp, r7
 8010a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a76:	4770      	bx	lr

08010a78 <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010a78:	b480      	push	{r7}
 8010a7a:	b083      	sub	sp, #12
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	4603      	mov	r3, r0
 8010a80:	6039      	str	r1, [r7, #0]
 8010a82:	71fb      	strb	r3, [r7, #7]
 8010a84:	4613      	mov	r3, r2
 8010a86:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch(cmd)
 8010a88:	79fb      	ldrb	r3, [r7, #7]
 8010a8a:	2b23      	cmp	r3, #35	; 0x23
 8010a8c:	d84a      	bhi.n	8010b24 <CDC_Control_FS+0xac>
 8010a8e:	a201      	add	r2, pc, #4	; (adr r2, 8010a94 <CDC_Control_FS+0x1c>)
 8010a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a94:	08010b25 	.word	0x08010b25
 8010a98:	08010b25 	.word	0x08010b25
 8010a9c:	08010b25 	.word	0x08010b25
 8010aa0:	08010b25 	.word	0x08010b25
 8010aa4:	08010b25 	.word	0x08010b25
 8010aa8:	08010b25 	.word	0x08010b25
 8010aac:	08010b25 	.word	0x08010b25
 8010ab0:	08010b25 	.word	0x08010b25
 8010ab4:	08010b25 	.word	0x08010b25
 8010ab8:	08010b25 	.word	0x08010b25
 8010abc:	08010b25 	.word	0x08010b25
 8010ac0:	08010b25 	.word	0x08010b25
 8010ac4:	08010b25 	.word	0x08010b25
 8010ac8:	08010b25 	.word	0x08010b25
 8010acc:	08010b25 	.word	0x08010b25
 8010ad0:	08010b25 	.word	0x08010b25
 8010ad4:	08010b25 	.word	0x08010b25
 8010ad8:	08010b25 	.word	0x08010b25
 8010adc:	08010b25 	.word	0x08010b25
 8010ae0:	08010b25 	.word	0x08010b25
 8010ae4:	08010b25 	.word	0x08010b25
 8010ae8:	08010b25 	.word	0x08010b25
 8010aec:	08010b25 	.word	0x08010b25
 8010af0:	08010b25 	.word	0x08010b25
 8010af4:	08010b25 	.word	0x08010b25
 8010af8:	08010b25 	.word	0x08010b25
 8010afc:	08010b25 	.word	0x08010b25
 8010b00:	08010b25 	.word	0x08010b25
 8010b04:	08010b25 	.word	0x08010b25
 8010b08:	08010b25 	.word	0x08010b25
 8010b0c:	08010b25 	.word	0x08010b25
 8010b10:	08010b25 	.word	0x08010b25
 8010b14:	08010b25 	.word	0x08010b25
 8010b18:	08010b25 	.word	0x08010b25
 8010b1c:	08010b25 	.word	0x08010b25
 8010b20:	08010b25 	.word	0x08010b25
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8010b24:	bf00      	nop
	}

	return (USBD_OK);
 8010b26:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 8010b28:	4618      	mov	r0, r3
 8010b2a:	370c      	adds	r7, #12
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b32:	4770      	bx	lr

08010b34 <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b084      	sub	sp, #16
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]
 8010b3c:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010b3e:	6879      	ldr	r1, [r7, #4]
 8010b40:	480b      	ldr	r0, [pc, #44]	; (8010b70 <CDC_Receive_FS+0x3c>)
 8010b42:	f7fe fd14 	bl	800f56e <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010b46:	480a      	ldr	r0, [pc, #40]	; (8010b70 <CDC_Receive_FS+0x3c>)
 8010b48:	f7fe fd5a 	bl	800f600 <USBD_CDC_ReceivePacket>

	uint8_t len = (uint8_t)*Len;
 8010b4c:	683b      	ldr	r3, [r7, #0]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	73fb      	strb	r3, [r7, #15]
	memcpy(usb_Rx_buffer, Buf, len);  // copy the data to the buffer
 8010b52:	7bfb      	ldrb	r3, [r7, #15]
 8010b54:	461a      	mov	r2, r3
 8010b56:	6879      	ldr	r1, [r7, #4]
 8010b58:	4806      	ldr	r0, [pc, #24]	; (8010b74 <CDC_Receive_FS+0x40>)
 8010b5a:	f000 fd67 	bl	801162c <memcpy>

	usb_Rx_ready = 1;
 8010b5e:	4b06      	ldr	r3, [pc, #24]	; (8010b78 <CDC_Receive_FS+0x44>)
 8010b60:	2201      	movs	r2, #1
 8010b62:	701a      	strb	r2, [r3, #0]

	return (USBD_OK);
 8010b64:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 8010b66:	4618      	mov	r0, r3
 8010b68:	3710      	adds	r7, #16
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}
 8010b6e:	bf00      	nop
 8010b70:	20000da0 	.word	0x20000da0
 8010b74:	20001070 	.word	0x20001070
 8010b78:	20001072 	.word	0x20001072

08010b7c <CDC_Transmit_FS>:
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b084      	sub	sp, #16
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
 8010b84:	460b      	mov	r3, r1
 8010b86:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 8010b88:	2300      	movs	r3, #0
 8010b8a:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010b8c:	4b0d      	ldr	r3, [pc, #52]	; (8010bc4 <CDC_Transmit_FS+0x48>)
 8010b8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b92:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0){
 8010b94:	68bb      	ldr	r3, [r7, #8]
 8010b96:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d001      	beq.n	8010ba2 <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 8010b9e:	2301      	movs	r3, #1
 8010ba0:	e00b      	b.n	8010bba <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010ba2:	887b      	ldrh	r3, [r7, #2]
 8010ba4:	461a      	mov	r2, r3
 8010ba6:	6879      	ldr	r1, [r7, #4]
 8010ba8:	4806      	ldr	r0, [pc, #24]	; (8010bc4 <CDC_Transmit_FS+0x48>)
 8010baa:	f7fe fcc2 	bl	800f532 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010bae:	4805      	ldr	r0, [pc, #20]	; (8010bc4 <CDC_Transmit_FS+0x48>)
 8010bb0:	f7fe fcf6 	bl	800f5a0 <USBD_CDC_TransmitPacket>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 8010bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	3710      	adds	r7, #16
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}
 8010bc2:	bf00      	nop
 8010bc4:	20000da0 	.word	0x20000da0

08010bc8 <CDC_TransmitCplt_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010bc8:	b480      	push	{r7}
 8010bca:	b087      	sub	sp, #28
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	60f8      	str	r0, [r7, #12]
 8010bd0:	60b9      	str	r1, [r7, #8]
 8010bd2:	4613      	mov	r3, r2
 8010bd4:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 13 */
	return result;
 8010bda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010bde:	4618      	mov	r0, r3
 8010be0:	371c      	adds	r7, #28
 8010be2:	46bd      	mov	sp, r7
 8010be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be8:	4770      	bx	lr
	...

08010bec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010bec:	b480      	push	{r7}
 8010bee:	b083      	sub	sp, #12
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	6039      	str	r1, [r7, #0]
 8010bf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010bf8:	683b      	ldr	r3, [r7, #0]
 8010bfa:	2212      	movs	r2, #18
 8010bfc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010bfe:	4b03      	ldr	r3, [pc, #12]	; (8010c0c <USBD_FS_DeviceDescriptor+0x20>)
}
 8010c00:	4618      	mov	r0, r3
 8010c02:	370c      	adds	r7, #12
 8010c04:	46bd      	mov	sp, r7
 8010c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0a:	4770      	bx	lr
 8010c0c:	20000158 	.word	0x20000158

08010c10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c10:	b480      	push	{r7}
 8010c12:	b083      	sub	sp, #12
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	4603      	mov	r3, r0
 8010c18:	6039      	str	r1, [r7, #0]
 8010c1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	2204      	movs	r2, #4
 8010c20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010c22:	4b03      	ldr	r3, [pc, #12]	; (8010c30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010c24:	4618      	mov	r0, r3
 8010c26:	370c      	adds	r7, #12
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2e:	4770      	bx	lr
 8010c30:	2000016c 	.word	0x2000016c

08010c34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b082      	sub	sp, #8
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	6039      	str	r1, [r7, #0]
 8010c3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010c40:	79fb      	ldrb	r3, [r7, #7]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d105      	bne.n	8010c52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010c46:	683a      	ldr	r2, [r7, #0]
 8010c48:	4907      	ldr	r1, [pc, #28]	; (8010c68 <USBD_FS_ProductStrDescriptor+0x34>)
 8010c4a:	4808      	ldr	r0, [pc, #32]	; (8010c6c <USBD_FS_ProductStrDescriptor+0x38>)
 8010c4c:	f7ff fd8b 	bl	8010766 <USBD_GetString>
 8010c50:	e004      	b.n	8010c5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010c52:	683a      	ldr	r2, [r7, #0]
 8010c54:	4904      	ldr	r1, [pc, #16]	; (8010c68 <USBD_FS_ProductStrDescriptor+0x34>)
 8010c56:	4805      	ldr	r0, [pc, #20]	; (8010c6c <USBD_FS_ProductStrDescriptor+0x38>)
 8010c58:	f7ff fd85 	bl	8010766 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010c5c:	4b02      	ldr	r3, [pc, #8]	; (8010c68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010c5e:	4618      	mov	r0, r3
 8010c60:	3708      	adds	r7, #8
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bd80      	pop	{r7, pc}
 8010c66:	bf00      	nop
 8010c68:	20002074 	.word	0x20002074
 8010c6c:	080141f0 	.word	0x080141f0

08010c70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b082      	sub	sp, #8
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	4603      	mov	r3, r0
 8010c78:	6039      	str	r1, [r7, #0]
 8010c7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010c7c:	683a      	ldr	r2, [r7, #0]
 8010c7e:	4904      	ldr	r1, [pc, #16]	; (8010c90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010c80:	4804      	ldr	r0, [pc, #16]	; (8010c94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010c82:	f7ff fd70 	bl	8010766 <USBD_GetString>
  return USBD_StrDesc;
 8010c86:	4b02      	ldr	r3, [pc, #8]	; (8010c90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010c88:	4618      	mov	r0, r3
 8010c8a:	3708      	adds	r7, #8
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	bd80      	pop	{r7, pc}
 8010c90:	20002074 	.word	0x20002074
 8010c94:	08014208 	.word	0x08014208

08010c98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b082      	sub	sp, #8
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	6039      	str	r1, [r7, #0]
 8010ca2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010ca4:	683b      	ldr	r3, [r7, #0]
 8010ca6:	221a      	movs	r2, #26
 8010ca8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010caa:	f000 f843 	bl	8010d34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010cae:	4b02      	ldr	r3, [pc, #8]	; (8010cb8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	3708      	adds	r7, #8
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	bd80      	pop	{r7, pc}
 8010cb8:	20000170 	.word	0x20000170

08010cbc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b082      	sub	sp, #8
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	6039      	str	r1, [r7, #0]
 8010cc6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010cc8:	79fb      	ldrb	r3, [r7, #7]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d105      	bne.n	8010cda <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010cce:	683a      	ldr	r2, [r7, #0]
 8010cd0:	4907      	ldr	r1, [pc, #28]	; (8010cf0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010cd2:	4808      	ldr	r0, [pc, #32]	; (8010cf4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010cd4:	f7ff fd47 	bl	8010766 <USBD_GetString>
 8010cd8:	e004      	b.n	8010ce4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010cda:	683a      	ldr	r2, [r7, #0]
 8010cdc:	4904      	ldr	r1, [pc, #16]	; (8010cf0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010cde:	4805      	ldr	r0, [pc, #20]	; (8010cf4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010ce0:	f7ff fd41 	bl	8010766 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010ce4:	4b02      	ldr	r3, [pc, #8]	; (8010cf0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	3708      	adds	r7, #8
 8010cea:	46bd      	mov	sp, r7
 8010cec:	bd80      	pop	{r7, pc}
 8010cee:	bf00      	nop
 8010cf0:	20002074 	.word	0x20002074
 8010cf4:	0801421c 	.word	0x0801421c

08010cf8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b082      	sub	sp, #8
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	4603      	mov	r3, r0
 8010d00:	6039      	str	r1, [r7, #0]
 8010d02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010d04:	79fb      	ldrb	r3, [r7, #7]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d105      	bne.n	8010d16 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010d0a:	683a      	ldr	r2, [r7, #0]
 8010d0c:	4907      	ldr	r1, [pc, #28]	; (8010d2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010d0e:	4808      	ldr	r0, [pc, #32]	; (8010d30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010d10:	f7ff fd29 	bl	8010766 <USBD_GetString>
 8010d14:	e004      	b.n	8010d20 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010d16:	683a      	ldr	r2, [r7, #0]
 8010d18:	4904      	ldr	r1, [pc, #16]	; (8010d2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010d1a:	4805      	ldr	r0, [pc, #20]	; (8010d30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010d1c:	f7ff fd23 	bl	8010766 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010d20:	4b02      	ldr	r3, [pc, #8]	; (8010d2c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010d22:	4618      	mov	r0, r3
 8010d24:	3708      	adds	r7, #8
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd80      	pop	{r7, pc}
 8010d2a:	bf00      	nop
 8010d2c:	20002074 	.word	0x20002074
 8010d30:	08014228 	.word	0x08014228

08010d34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b084      	sub	sp, #16
 8010d38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010d3a:	4b0f      	ldr	r3, [pc, #60]	; (8010d78 <Get_SerialNum+0x44>)
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010d40:	4b0e      	ldr	r3, [pc, #56]	; (8010d7c <Get_SerialNum+0x48>)
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010d46:	4b0e      	ldr	r3, [pc, #56]	; (8010d80 <Get_SerialNum+0x4c>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010d4c:	68fa      	ldr	r2, [r7, #12]
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	4413      	add	r3, r2
 8010d52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d009      	beq.n	8010d6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010d5a:	2208      	movs	r2, #8
 8010d5c:	4909      	ldr	r1, [pc, #36]	; (8010d84 <Get_SerialNum+0x50>)
 8010d5e:	68f8      	ldr	r0, [r7, #12]
 8010d60:	f000 f814 	bl	8010d8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010d64:	2204      	movs	r2, #4
 8010d66:	4908      	ldr	r1, [pc, #32]	; (8010d88 <Get_SerialNum+0x54>)
 8010d68:	68b8      	ldr	r0, [r7, #8]
 8010d6a:	f000 f80f 	bl	8010d8c <IntToUnicode>
  }
}
 8010d6e:	bf00      	nop
 8010d70:	3710      	adds	r7, #16
 8010d72:	46bd      	mov	sp, r7
 8010d74:	bd80      	pop	{r7, pc}
 8010d76:	bf00      	nop
 8010d78:	1fff7590 	.word	0x1fff7590
 8010d7c:	1fff7594 	.word	0x1fff7594
 8010d80:	1fff7598 	.word	0x1fff7598
 8010d84:	20000172 	.word	0x20000172
 8010d88:	20000182 	.word	0x20000182

08010d8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010d8c:	b480      	push	{r7}
 8010d8e:	b087      	sub	sp, #28
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	60f8      	str	r0, [r7, #12]
 8010d94:	60b9      	str	r1, [r7, #8]
 8010d96:	4613      	mov	r3, r2
 8010d98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010d9e:	2300      	movs	r3, #0
 8010da0:	75fb      	strb	r3, [r7, #23]
 8010da2:	e027      	b.n	8010df4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	0f1b      	lsrs	r3, r3, #28
 8010da8:	2b09      	cmp	r3, #9
 8010daa:	d80b      	bhi.n	8010dc4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	0f1b      	lsrs	r3, r3, #28
 8010db0:	b2da      	uxtb	r2, r3
 8010db2:	7dfb      	ldrb	r3, [r7, #23]
 8010db4:	005b      	lsls	r3, r3, #1
 8010db6:	4619      	mov	r1, r3
 8010db8:	68bb      	ldr	r3, [r7, #8]
 8010dba:	440b      	add	r3, r1
 8010dbc:	3230      	adds	r2, #48	; 0x30
 8010dbe:	b2d2      	uxtb	r2, r2
 8010dc0:	701a      	strb	r2, [r3, #0]
 8010dc2:	e00a      	b.n	8010dda <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	0f1b      	lsrs	r3, r3, #28
 8010dc8:	b2da      	uxtb	r2, r3
 8010dca:	7dfb      	ldrb	r3, [r7, #23]
 8010dcc:	005b      	lsls	r3, r3, #1
 8010dce:	4619      	mov	r1, r3
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	440b      	add	r3, r1
 8010dd4:	3237      	adds	r2, #55	; 0x37
 8010dd6:	b2d2      	uxtb	r2, r2
 8010dd8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	011b      	lsls	r3, r3, #4
 8010dde:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010de0:	7dfb      	ldrb	r3, [r7, #23]
 8010de2:	005b      	lsls	r3, r3, #1
 8010de4:	3301      	adds	r3, #1
 8010de6:	68ba      	ldr	r2, [r7, #8]
 8010de8:	4413      	add	r3, r2
 8010dea:	2200      	movs	r2, #0
 8010dec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010dee:	7dfb      	ldrb	r3, [r7, #23]
 8010df0:	3301      	adds	r3, #1
 8010df2:	75fb      	strb	r3, [r7, #23]
 8010df4:	7dfa      	ldrb	r2, [r7, #23]
 8010df6:	79fb      	ldrb	r3, [r7, #7]
 8010df8:	429a      	cmp	r2, r3
 8010dfa:	d3d3      	bcc.n	8010da4 <IntToUnicode+0x18>
  }
}
 8010dfc:	bf00      	nop
 8010dfe:	bf00      	nop
 8010e00:	371c      	adds	r7, #28
 8010e02:	46bd      	mov	sp, r7
 8010e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e08:	4770      	bx	lr
	...

08010e0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b0b0      	sub	sp, #192	; 0xc0
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010e14:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010e18:	2200      	movs	r2, #0
 8010e1a:	601a      	str	r2, [r3, #0]
 8010e1c:	605a      	str	r2, [r3, #4]
 8010e1e:	609a      	str	r2, [r3, #8]
 8010e20:	60da      	str	r2, [r3, #12]
 8010e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010e24:	f107 0318 	add.w	r3, r7, #24
 8010e28:	2294      	movs	r2, #148	; 0x94
 8010e2a:	2100      	movs	r1, #0
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f000 fc0b 	bl	8011648 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010e3a:	d163      	bne.n	8010f04 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010e3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010e40:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8010e42:	2300      	movs	r3, #0
 8010e44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010e48:	f107 0318 	add.w	r3, r7, #24
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f7f4 ff59 	bl	8005d04 <HAL_RCCEx_PeriphCLKConfig>
 8010e52:	4603      	mov	r3, r0
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d001      	beq.n	8010e5c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8010e58:	f7f1 fa4e 	bl	80022f8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010e5c:	4b2b      	ldr	r3, [pc, #172]	; (8010f0c <HAL_PCD_MspInit+0x100>)
 8010e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e60:	4a2a      	ldr	r2, [pc, #168]	; (8010f0c <HAL_PCD_MspInit+0x100>)
 8010e62:	f043 0301 	orr.w	r3, r3, #1
 8010e66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010e68:	4b28      	ldr	r3, [pc, #160]	; (8010f0c <HAL_PCD_MspInit+0x100>)
 8010e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e6c:	f003 0301 	and.w	r3, r3, #1
 8010e70:	617b      	str	r3, [r7, #20]
 8010e72:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010e74:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010e78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e7c:	2302      	movs	r3, #2
 8010e7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e82:	2300      	movs	r3, #0
 8010e84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e88:	2303      	movs	r3, #3
 8010e8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010e8e:	230a      	movs	r3, #10
 8010e90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010e94:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010e98:	4619      	mov	r1, r3
 8010e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010e9e:	f7f2 fa7d 	bl	800339c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010ea2:	4b1a      	ldr	r3, [pc, #104]	; (8010f0c <HAL_PCD_MspInit+0x100>)
 8010ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010ea6:	4a19      	ldr	r2, [pc, #100]	; (8010f0c <HAL_PCD_MspInit+0x100>)
 8010ea8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010eae:	4b17      	ldr	r3, [pc, #92]	; (8010f0c <HAL_PCD_MspInit+0x100>)
 8010eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010eb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010eb6:	613b      	str	r3, [r7, #16]
 8010eb8:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010eba:	4b14      	ldr	r3, [pc, #80]	; (8010f0c <HAL_PCD_MspInit+0x100>)
 8010ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d114      	bne.n	8010ef0 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010ec6:	4b11      	ldr	r3, [pc, #68]	; (8010f0c <HAL_PCD_MspInit+0x100>)
 8010ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010eca:	4a10      	ldr	r2, [pc, #64]	; (8010f0c <HAL_PCD_MspInit+0x100>)
 8010ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8010ed2:	4b0e      	ldr	r3, [pc, #56]	; (8010f0c <HAL_PCD_MspInit+0x100>)
 8010ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010eda:	60fb      	str	r3, [r7, #12]
 8010edc:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8010ede:	f7f3 fffd 	bl	8004edc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8010ee2:	4b0a      	ldr	r3, [pc, #40]	; (8010f0c <HAL_PCD_MspInit+0x100>)
 8010ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ee6:	4a09      	ldr	r2, [pc, #36]	; (8010f0c <HAL_PCD_MspInit+0x100>)
 8010ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010eec:	6593      	str	r3, [r2, #88]	; 0x58
 8010eee:	e001      	b.n	8010ef4 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8010ef0:	f7f3 fff4 	bl	8004edc <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	2100      	movs	r1, #0
 8010ef8:	2043      	movs	r0, #67	; 0x43
 8010efa:	f7f1 feea 	bl	8002cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010efe:	2043      	movs	r0, #67	; 0x43
 8010f00:	f7f1 ff03 	bl	8002d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010f04:	bf00      	nop
 8010f06:	37c0      	adds	r7, #192	; 0xc0
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}
 8010f0c:	40021000 	.word	0x40021000

08010f10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b082      	sub	sp, #8
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010f24:	4619      	mov	r1, r3
 8010f26:	4610      	mov	r0, r2
 8010f28:	f7fe fc36 	bl	800f798 <USBD_LL_SetupStage>
}
 8010f2c:	bf00      	nop
 8010f2e:	3708      	adds	r7, #8
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}

08010f34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b082      	sub	sp, #8
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
 8010f3c:	460b      	mov	r3, r1
 8010f3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010f46:	78fa      	ldrb	r2, [r7, #3]
 8010f48:	6879      	ldr	r1, [r7, #4]
 8010f4a:	4613      	mov	r3, r2
 8010f4c:	00db      	lsls	r3, r3, #3
 8010f4e:	4413      	add	r3, r2
 8010f50:	009b      	lsls	r3, r3, #2
 8010f52:	440b      	add	r3, r1
 8010f54:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010f58:	681a      	ldr	r2, [r3, #0]
 8010f5a:	78fb      	ldrb	r3, [r7, #3]
 8010f5c:	4619      	mov	r1, r3
 8010f5e:	f7fe fc70 	bl	800f842 <USBD_LL_DataOutStage>
}
 8010f62:	bf00      	nop
 8010f64:	3708      	adds	r7, #8
 8010f66:	46bd      	mov	sp, r7
 8010f68:	bd80      	pop	{r7, pc}

08010f6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f6a:	b580      	push	{r7, lr}
 8010f6c:	b082      	sub	sp, #8
 8010f6e:	af00      	add	r7, sp, #0
 8010f70:	6078      	str	r0, [r7, #4]
 8010f72:	460b      	mov	r3, r1
 8010f74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010f7c:	78fa      	ldrb	r2, [r7, #3]
 8010f7e:	6879      	ldr	r1, [r7, #4]
 8010f80:	4613      	mov	r3, r2
 8010f82:	00db      	lsls	r3, r3, #3
 8010f84:	4413      	add	r3, r2
 8010f86:	009b      	lsls	r3, r3, #2
 8010f88:	440b      	add	r3, r1
 8010f8a:	334c      	adds	r3, #76	; 0x4c
 8010f8c:	681a      	ldr	r2, [r3, #0]
 8010f8e:	78fb      	ldrb	r3, [r7, #3]
 8010f90:	4619      	mov	r1, r3
 8010f92:	f7fe fcb9 	bl	800f908 <USBD_LL_DataInStage>
}
 8010f96:	bf00      	nop
 8010f98:	3708      	adds	r7, #8
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	bd80      	pop	{r7, pc}

08010f9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f9e:	b580      	push	{r7, lr}
 8010fa0:	b082      	sub	sp, #8
 8010fa2:	af00      	add	r7, sp, #0
 8010fa4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010fac:	4618      	mov	r0, r3
 8010fae:	f7fe fdcd 	bl	800fb4c <USBD_LL_SOF>
}
 8010fb2:	bf00      	nop
 8010fb4:	3708      	adds	r7, #8
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd80      	pop	{r7, pc}

08010fba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fba:	b580      	push	{r7, lr}
 8010fbc:	b084      	sub	sp, #16
 8010fbe:	af00      	add	r7, sp, #0
 8010fc0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010fc2:	2301      	movs	r3, #1
 8010fc4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	68db      	ldr	r3, [r3, #12]
 8010fca:	2b02      	cmp	r3, #2
 8010fcc:	d001      	beq.n	8010fd2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010fce:	f7f1 f993 	bl	80022f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010fd8:	7bfa      	ldrb	r2, [r7, #15]
 8010fda:	4611      	mov	r1, r2
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f7fe fd77 	bl	800fad0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f7fe fd23 	bl	800fa34 <USBD_LL_Reset>
}
 8010fee:	bf00      	nop
 8010ff0:	3710      	adds	r7, #16
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	bd80      	pop	{r7, pc}
	...

08010ff8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b082      	sub	sp, #8
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	687a      	ldr	r2, [r7, #4]
 801100c:	6812      	ldr	r2, [r2, #0]
 801100e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011012:	f043 0301 	orr.w	r3, r3, #1
 8011016:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801101e:	4618      	mov	r0, r3
 8011020:	f7fe fd66 	bl	800faf0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	6a1b      	ldr	r3, [r3, #32]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d005      	beq.n	8011038 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801102c:	4b04      	ldr	r3, [pc, #16]	; (8011040 <HAL_PCD_SuspendCallback+0x48>)
 801102e:	691b      	ldr	r3, [r3, #16]
 8011030:	4a03      	ldr	r2, [pc, #12]	; (8011040 <HAL_PCD_SuspendCallback+0x48>)
 8011032:	f043 0306 	orr.w	r3, r3, #6
 8011036:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011038:	bf00      	nop
 801103a:	3708      	adds	r7, #8
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}
 8011040:	e000ed00 	.word	0xe000ed00

08011044 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011044:	b580      	push	{r7, lr}
 8011046:	b082      	sub	sp, #8
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	687a      	ldr	r2, [r7, #4]
 8011058:	6812      	ldr	r2, [r2, #0]
 801105a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801105e:	f023 0301 	bic.w	r3, r3, #1
 8011062:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	6a1b      	ldr	r3, [r3, #32]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d007      	beq.n	801107c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801106c:	4b08      	ldr	r3, [pc, #32]	; (8011090 <HAL_PCD_ResumeCallback+0x4c>)
 801106e:	691b      	ldr	r3, [r3, #16]
 8011070:	4a07      	ldr	r2, [pc, #28]	; (8011090 <HAL_PCD_ResumeCallback+0x4c>)
 8011072:	f023 0306 	bic.w	r3, r3, #6
 8011076:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8011078:	f000 faa6 	bl	80115c8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011082:	4618      	mov	r0, r3
 8011084:	f7fe fd4a 	bl	800fb1c <USBD_LL_Resume>
}
 8011088:	bf00      	nop
 801108a:	3708      	adds	r7, #8
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}
 8011090:	e000ed00 	.word	0xe000ed00

08011094 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b082      	sub	sp, #8
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
 801109c:	460b      	mov	r3, r1
 801109e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80110a6:	78fa      	ldrb	r2, [r7, #3]
 80110a8:	4611      	mov	r1, r2
 80110aa:	4618      	mov	r0, r3
 80110ac:	f7fe fd96 	bl	800fbdc <USBD_LL_IsoOUTIncomplete>
}
 80110b0:	bf00      	nop
 80110b2:	3708      	adds	r7, #8
 80110b4:	46bd      	mov	sp, r7
 80110b6:	bd80      	pop	{r7, pc}

080110b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	b082      	sub	sp, #8
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
 80110c0:	460b      	mov	r3, r1
 80110c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80110ca:	78fa      	ldrb	r2, [r7, #3]
 80110cc:	4611      	mov	r1, r2
 80110ce:	4618      	mov	r0, r3
 80110d0:	f7fe fd5e 	bl	800fb90 <USBD_LL_IsoINIncomplete>
}
 80110d4:	bf00      	nop
 80110d6:	3708      	adds	r7, #8
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}

080110dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b082      	sub	sp, #8
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80110ea:	4618      	mov	r0, r3
 80110ec:	f7fe fd9c 	bl	800fc28 <USBD_LL_DevConnected>
}
 80110f0:	bf00      	nop
 80110f2:	3708      	adds	r7, #8
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd80      	pop	{r7, pc}

080110f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b082      	sub	sp, #8
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011106:	4618      	mov	r0, r3
 8011108:	f7fe fd99 	bl	800fc3e <USBD_LL_DevDisconnected>
}
 801110c:	bf00      	nop
 801110e:	3708      	adds	r7, #8
 8011110:	46bd      	mov	sp, r7
 8011112:	bd80      	pop	{r7, pc}

08011114 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b082      	sub	sp, #8
 8011118:	af00      	add	r7, sp, #0
 801111a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	781b      	ldrb	r3, [r3, #0]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d139      	bne.n	8011198 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011124:	4a1f      	ldr	r2, [pc, #124]	; (80111a4 <USBD_LL_Init+0x90>)
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	4a1d      	ldr	r2, [pc, #116]	; (80111a4 <USBD_LL_Init+0x90>)
 8011130:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011134:	4b1b      	ldr	r3, [pc, #108]	; (80111a4 <USBD_LL_Init+0x90>)
 8011136:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801113a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801113c:	4b19      	ldr	r3, [pc, #100]	; (80111a4 <USBD_LL_Init+0x90>)
 801113e:	2206      	movs	r2, #6
 8011140:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011142:	4b18      	ldr	r3, [pc, #96]	; (80111a4 <USBD_LL_Init+0x90>)
 8011144:	2202      	movs	r2, #2
 8011146:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011148:	4b16      	ldr	r3, [pc, #88]	; (80111a4 <USBD_LL_Init+0x90>)
 801114a:	2200      	movs	r2, #0
 801114c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801114e:	4b15      	ldr	r3, [pc, #84]	; (80111a4 <USBD_LL_Init+0x90>)
 8011150:	2200      	movs	r2, #0
 8011152:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011154:	4b13      	ldr	r3, [pc, #76]	; (80111a4 <USBD_LL_Init+0x90>)
 8011156:	2200      	movs	r2, #0
 8011158:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801115a:	4b12      	ldr	r3, [pc, #72]	; (80111a4 <USBD_LL_Init+0x90>)
 801115c:	2200      	movs	r2, #0
 801115e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011160:	4b10      	ldr	r3, [pc, #64]	; (80111a4 <USBD_LL_Init+0x90>)
 8011162:	2200      	movs	r2, #0
 8011164:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011166:	4b0f      	ldr	r3, [pc, #60]	; (80111a4 <USBD_LL_Init+0x90>)
 8011168:	2200      	movs	r2, #0
 801116a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801116c:	480d      	ldr	r0, [pc, #52]	; (80111a4 <USBD_LL_Init+0x90>)
 801116e:	f7f2 fc25 	bl	80039bc <HAL_PCD_Init>
 8011172:	4603      	mov	r3, r0
 8011174:	2b00      	cmp	r3, #0
 8011176:	d001      	beq.n	801117c <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8011178:	f7f1 f8be 	bl	80022f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801117c:	2180      	movs	r1, #128	; 0x80
 801117e:	4809      	ldr	r0, [pc, #36]	; (80111a4 <USBD_LL_Init+0x90>)
 8011180:	f7f3 fda7 	bl	8004cd2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011184:	2240      	movs	r2, #64	; 0x40
 8011186:	2100      	movs	r1, #0
 8011188:	4806      	ldr	r0, [pc, #24]	; (80111a4 <USBD_LL_Init+0x90>)
 801118a:	f7f3 fd5b 	bl	8004c44 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801118e:	2280      	movs	r2, #128	; 0x80
 8011190:	2101      	movs	r1, #1
 8011192:	4804      	ldr	r0, [pc, #16]	; (80111a4 <USBD_LL_Init+0x90>)
 8011194:	f7f3 fd56 	bl	8004c44 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011198:	2300      	movs	r3, #0
}
 801119a:	4618      	mov	r0, r3
 801119c:	3708      	adds	r7, #8
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}
 80111a2:	bf00      	nop
 80111a4:	20002274 	.word	0x20002274

080111a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b084      	sub	sp, #16
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111b0:	2300      	movs	r3, #0
 80111b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111b4:	2300      	movs	r3, #0
 80111b6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80111be:	4618      	mov	r0, r3
 80111c0:	f7f2 fd20 	bl	8003c04 <HAL_PCD_Start>
 80111c4:	4603      	mov	r3, r0
 80111c6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80111c8:	7bbb      	ldrb	r3, [r7, #14]
 80111ca:	2b03      	cmp	r3, #3
 80111cc:	d816      	bhi.n	80111fc <USBD_LL_Start+0x54>
 80111ce:	a201      	add	r2, pc, #4	; (adr r2, 80111d4 <USBD_LL_Start+0x2c>)
 80111d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111d4:	080111e5 	.word	0x080111e5
 80111d8:	080111eb 	.word	0x080111eb
 80111dc:	080111f1 	.word	0x080111f1
 80111e0:	080111f7 	.word	0x080111f7
    case HAL_OK :
      usb_status = USBD_OK;
 80111e4:	2300      	movs	r3, #0
 80111e6:	73fb      	strb	r3, [r7, #15]
    break;
 80111e8:	e00b      	b.n	8011202 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80111ea:	2303      	movs	r3, #3
 80111ec:	73fb      	strb	r3, [r7, #15]
    break;
 80111ee:	e008      	b.n	8011202 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80111f0:	2301      	movs	r3, #1
 80111f2:	73fb      	strb	r3, [r7, #15]
    break;
 80111f4:	e005      	b.n	8011202 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80111f6:	2303      	movs	r3, #3
 80111f8:	73fb      	strb	r3, [r7, #15]
    break;
 80111fa:	e002      	b.n	8011202 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80111fc:	2303      	movs	r3, #3
 80111fe:	73fb      	strb	r3, [r7, #15]
    break;
 8011200:	bf00      	nop
  }
  return usb_status;
 8011202:	7bfb      	ldrb	r3, [r7, #15]
}
 8011204:	4618      	mov	r0, r3
 8011206:	3710      	adds	r7, #16
 8011208:	46bd      	mov	sp, r7
 801120a:	bd80      	pop	{r7, pc}

0801120c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b084      	sub	sp, #16
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
 8011214:	4608      	mov	r0, r1
 8011216:	4611      	mov	r1, r2
 8011218:	461a      	mov	r2, r3
 801121a:	4603      	mov	r3, r0
 801121c:	70fb      	strb	r3, [r7, #3]
 801121e:	460b      	mov	r3, r1
 8011220:	70bb      	strb	r3, [r7, #2]
 8011222:	4613      	mov	r3, r2
 8011224:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011226:	2300      	movs	r3, #0
 8011228:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801122a:	2300      	movs	r3, #0
 801122c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011234:	78bb      	ldrb	r3, [r7, #2]
 8011236:	883a      	ldrh	r2, [r7, #0]
 8011238:	78f9      	ldrb	r1, [r7, #3]
 801123a:	f7f3 f9ca 	bl	80045d2 <HAL_PCD_EP_Open>
 801123e:	4603      	mov	r3, r0
 8011240:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011242:	7bbb      	ldrb	r3, [r7, #14]
 8011244:	2b03      	cmp	r3, #3
 8011246:	d817      	bhi.n	8011278 <USBD_LL_OpenEP+0x6c>
 8011248:	a201      	add	r2, pc, #4	; (adr r2, 8011250 <USBD_LL_OpenEP+0x44>)
 801124a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801124e:	bf00      	nop
 8011250:	08011261 	.word	0x08011261
 8011254:	08011267 	.word	0x08011267
 8011258:	0801126d 	.word	0x0801126d
 801125c:	08011273 	.word	0x08011273
    case HAL_OK :
      usb_status = USBD_OK;
 8011260:	2300      	movs	r3, #0
 8011262:	73fb      	strb	r3, [r7, #15]
    break;
 8011264:	e00b      	b.n	801127e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011266:	2303      	movs	r3, #3
 8011268:	73fb      	strb	r3, [r7, #15]
    break;
 801126a:	e008      	b.n	801127e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801126c:	2301      	movs	r3, #1
 801126e:	73fb      	strb	r3, [r7, #15]
    break;
 8011270:	e005      	b.n	801127e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011272:	2303      	movs	r3, #3
 8011274:	73fb      	strb	r3, [r7, #15]
    break;
 8011276:	e002      	b.n	801127e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8011278:	2303      	movs	r3, #3
 801127a:	73fb      	strb	r3, [r7, #15]
    break;
 801127c:	bf00      	nop
  }
  return usb_status;
 801127e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011280:	4618      	mov	r0, r3
 8011282:	3710      	adds	r7, #16
 8011284:	46bd      	mov	sp, r7
 8011286:	bd80      	pop	{r7, pc}

08011288 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b084      	sub	sp, #16
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
 8011290:	460b      	mov	r3, r1
 8011292:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011294:	2300      	movs	r3, #0
 8011296:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011298:	2300      	movs	r3, #0
 801129a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80112a2:	78fa      	ldrb	r2, [r7, #3]
 80112a4:	4611      	mov	r1, r2
 80112a6:	4618      	mov	r0, r3
 80112a8:	f7f3 f9fb 	bl	80046a2 <HAL_PCD_EP_Close>
 80112ac:	4603      	mov	r3, r0
 80112ae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80112b0:	7bbb      	ldrb	r3, [r7, #14]
 80112b2:	2b03      	cmp	r3, #3
 80112b4:	d816      	bhi.n	80112e4 <USBD_LL_CloseEP+0x5c>
 80112b6:	a201      	add	r2, pc, #4	; (adr r2, 80112bc <USBD_LL_CloseEP+0x34>)
 80112b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112bc:	080112cd 	.word	0x080112cd
 80112c0:	080112d3 	.word	0x080112d3
 80112c4:	080112d9 	.word	0x080112d9
 80112c8:	080112df 	.word	0x080112df
    case HAL_OK :
      usb_status = USBD_OK;
 80112cc:	2300      	movs	r3, #0
 80112ce:	73fb      	strb	r3, [r7, #15]
    break;
 80112d0:	e00b      	b.n	80112ea <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80112d2:	2303      	movs	r3, #3
 80112d4:	73fb      	strb	r3, [r7, #15]
    break;
 80112d6:	e008      	b.n	80112ea <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80112d8:	2301      	movs	r3, #1
 80112da:	73fb      	strb	r3, [r7, #15]
    break;
 80112dc:	e005      	b.n	80112ea <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80112de:	2303      	movs	r3, #3
 80112e0:	73fb      	strb	r3, [r7, #15]
    break;
 80112e2:	e002      	b.n	80112ea <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80112e4:	2303      	movs	r3, #3
 80112e6:	73fb      	strb	r3, [r7, #15]
    break;
 80112e8:	bf00      	nop
  }
  return usb_status;
 80112ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80112ec:	4618      	mov	r0, r3
 80112ee:	3710      	adds	r7, #16
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}

080112f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b084      	sub	sp, #16
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
 80112fc:	460b      	mov	r3, r1
 80112fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011300:	2300      	movs	r3, #0
 8011302:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011304:	2300      	movs	r3, #0
 8011306:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801130e:	78fa      	ldrb	r2, [r7, #3]
 8011310:	4611      	mov	r1, r2
 8011312:	4618      	mov	r0, r3
 8011314:	f7f3 faa2 	bl	800485c <HAL_PCD_EP_SetStall>
 8011318:	4603      	mov	r3, r0
 801131a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801131c:	7bbb      	ldrb	r3, [r7, #14]
 801131e:	2b03      	cmp	r3, #3
 8011320:	d816      	bhi.n	8011350 <USBD_LL_StallEP+0x5c>
 8011322:	a201      	add	r2, pc, #4	; (adr r2, 8011328 <USBD_LL_StallEP+0x34>)
 8011324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011328:	08011339 	.word	0x08011339
 801132c:	0801133f 	.word	0x0801133f
 8011330:	08011345 	.word	0x08011345
 8011334:	0801134b 	.word	0x0801134b
    case HAL_OK :
      usb_status = USBD_OK;
 8011338:	2300      	movs	r3, #0
 801133a:	73fb      	strb	r3, [r7, #15]
    break;
 801133c:	e00b      	b.n	8011356 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801133e:	2303      	movs	r3, #3
 8011340:	73fb      	strb	r3, [r7, #15]
    break;
 8011342:	e008      	b.n	8011356 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011344:	2301      	movs	r3, #1
 8011346:	73fb      	strb	r3, [r7, #15]
    break;
 8011348:	e005      	b.n	8011356 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801134a:	2303      	movs	r3, #3
 801134c:	73fb      	strb	r3, [r7, #15]
    break;
 801134e:	e002      	b.n	8011356 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8011350:	2303      	movs	r3, #3
 8011352:	73fb      	strb	r3, [r7, #15]
    break;
 8011354:	bf00      	nop
  }
  return usb_status;
 8011356:	7bfb      	ldrb	r3, [r7, #15]
}
 8011358:	4618      	mov	r0, r3
 801135a:	3710      	adds	r7, #16
 801135c:	46bd      	mov	sp, r7
 801135e:	bd80      	pop	{r7, pc}

08011360 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b084      	sub	sp, #16
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
 8011368:	460b      	mov	r3, r1
 801136a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801136c:	2300      	movs	r3, #0
 801136e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011370:	2300      	movs	r3, #0
 8011372:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801137a:	78fa      	ldrb	r2, [r7, #3]
 801137c:	4611      	mov	r1, r2
 801137e:	4618      	mov	r0, r3
 8011380:	f7f3 face 	bl	8004920 <HAL_PCD_EP_ClrStall>
 8011384:	4603      	mov	r3, r0
 8011386:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011388:	7bbb      	ldrb	r3, [r7, #14]
 801138a:	2b03      	cmp	r3, #3
 801138c:	d816      	bhi.n	80113bc <USBD_LL_ClearStallEP+0x5c>
 801138e:	a201      	add	r2, pc, #4	; (adr r2, 8011394 <USBD_LL_ClearStallEP+0x34>)
 8011390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011394:	080113a5 	.word	0x080113a5
 8011398:	080113ab 	.word	0x080113ab
 801139c:	080113b1 	.word	0x080113b1
 80113a0:	080113b7 	.word	0x080113b7
    case HAL_OK :
      usb_status = USBD_OK;
 80113a4:	2300      	movs	r3, #0
 80113a6:	73fb      	strb	r3, [r7, #15]
    break;
 80113a8:	e00b      	b.n	80113c2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80113aa:	2303      	movs	r3, #3
 80113ac:	73fb      	strb	r3, [r7, #15]
    break;
 80113ae:	e008      	b.n	80113c2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80113b0:	2301      	movs	r3, #1
 80113b2:	73fb      	strb	r3, [r7, #15]
    break;
 80113b4:	e005      	b.n	80113c2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80113b6:	2303      	movs	r3, #3
 80113b8:	73fb      	strb	r3, [r7, #15]
    break;
 80113ba:	e002      	b.n	80113c2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80113bc:	2303      	movs	r3, #3
 80113be:	73fb      	strb	r3, [r7, #15]
    break;
 80113c0:	bf00      	nop
  }
  return usb_status;
 80113c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80113c4:	4618      	mov	r0, r3
 80113c6:	3710      	adds	r7, #16
 80113c8:	46bd      	mov	sp, r7
 80113ca:	bd80      	pop	{r7, pc}

080113cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80113cc:	b480      	push	{r7}
 80113ce:	b085      	sub	sp, #20
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
 80113d4:	460b      	mov	r3, r1
 80113d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80113de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80113e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	da0b      	bge.n	8011400 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80113e8:	78fb      	ldrb	r3, [r7, #3]
 80113ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80113ee:	68f9      	ldr	r1, [r7, #12]
 80113f0:	4613      	mov	r3, r2
 80113f2:	00db      	lsls	r3, r3, #3
 80113f4:	4413      	add	r3, r2
 80113f6:	009b      	lsls	r3, r3, #2
 80113f8:	440b      	add	r3, r1
 80113fa:	333e      	adds	r3, #62	; 0x3e
 80113fc:	781b      	ldrb	r3, [r3, #0]
 80113fe:	e00b      	b.n	8011418 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011400:	78fb      	ldrb	r3, [r7, #3]
 8011402:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011406:	68f9      	ldr	r1, [r7, #12]
 8011408:	4613      	mov	r3, r2
 801140a:	00db      	lsls	r3, r3, #3
 801140c:	4413      	add	r3, r2
 801140e:	009b      	lsls	r3, r3, #2
 8011410:	440b      	add	r3, r1
 8011412:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8011416:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011418:	4618      	mov	r0, r3
 801141a:	3714      	adds	r7, #20
 801141c:	46bd      	mov	sp, r7
 801141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011422:	4770      	bx	lr

08011424 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011424:	b580      	push	{r7, lr}
 8011426:	b084      	sub	sp, #16
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
 801142c:	460b      	mov	r3, r1
 801142e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011430:	2300      	movs	r3, #0
 8011432:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011434:	2300      	movs	r3, #0
 8011436:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801143e:	78fa      	ldrb	r2, [r7, #3]
 8011440:	4611      	mov	r1, r2
 8011442:	4618      	mov	r0, r3
 8011444:	f7f3 f8a0 	bl	8004588 <HAL_PCD_SetAddress>
 8011448:	4603      	mov	r3, r0
 801144a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801144c:	7bbb      	ldrb	r3, [r7, #14]
 801144e:	2b03      	cmp	r3, #3
 8011450:	d816      	bhi.n	8011480 <USBD_LL_SetUSBAddress+0x5c>
 8011452:	a201      	add	r2, pc, #4	; (adr r2, 8011458 <USBD_LL_SetUSBAddress+0x34>)
 8011454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011458:	08011469 	.word	0x08011469
 801145c:	0801146f 	.word	0x0801146f
 8011460:	08011475 	.word	0x08011475
 8011464:	0801147b 	.word	0x0801147b
    case HAL_OK :
      usb_status = USBD_OK;
 8011468:	2300      	movs	r3, #0
 801146a:	73fb      	strb	r3, [r7, #15]
    break;
 801146c:	e00b      	b.n	8011486 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801146e:	2303      	movs	r3, #3
 8011470:	73fb      	strb	r3, [r7, #15]
    break;
 8011472:	e008      	b.n	8011486 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011474:	2301      	movs	r3, #1
 8011476:	73fb      	strb	r3, [r7, #15]
    break;
 8011478:	e005      	b.n	8011486 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801147a:	2303      	movs	r3, #3
 801147c:	73fb      	strb	r3, [r7, #15]
    break;
 801147e:	e002      	b.n	8011486 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8011480:	2303      	movs	r3, #3
 8011482:	73fb      	strb	r3, [r7, #15]
    break;
 8011484:	bf00      	nop
  }
  return usb_status;
 8011486:	7bfb      	ldrb	r3, [r7, #15]
}
 8011488:	4618      	mov	r0, r3
 801148a:	3710      	adds	r7, #16
 801148c:	46bd      	mov	sp, r7
 801148e:	bd80      	pop	{r7, pc}

08011490 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b086      	sub	sp, #24
 8011494:	af00      	add	r7, sp, #0
 8011496:	60f8      	str	r0, [r7, #12]
 8011498:	607a      	str	r2, [r7, #4]
 801149a:	603b      	str	r3, [r7, #0]
 801149c:	460b      	mov	r3, r1
 801149e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114a0:	2300      	movs	r3, #0
 80114a2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114a4:	2300      	movs	r3, #0
 80114a6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80114ae:	7af9      	ldrb	r1, [r7, #11]
 80114b0:	683b      	ldr	r3, [r7, #0]
 80114b2:	687a      	ldr	r2, [r7, #4]
 80114b4:	f7f3 f995 	bl	80047e2 <HAL_PCD_EP_Transmit>
 80114b8:	4603      	mov	r3, r0
 80114ba:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80114bc:	7dbb      	ldrb	r3, [r7, #22]
 80114be:	2b03      	cmp	r3, #3
 80114c0:	d816      	bhi.n	80114f0 <USBD_LL_Transmit+0x60>
 80114c2:	a201      	add	r2, pc, #4	; (adr r2, 80114c8 <USBD_LL_Transmit+0x38>)
 80114c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114c8:	080114d9 	.word	0x080114d9
 80114cc:	080114df 	.word	0x080114df
 80114d0:	080114e5 	.word	0x080114e5
 80114d4:	080114eb 	.word	0x080114eb
    case HAL_OK :
      usb_status = USBD_OK;
 80114d8:	2300      	movs	r3, #0
 80114da:	75fb      	strb	r3, [r7, #23]
    break;
 80114dc:	e00b      	b.n	80114f6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80114de:	2303      	movs	r3, #3
 80114e0:	75fb      	strb	r3, [r7, #23]
    break;
 80114e2:	e008      	b.n	80114f6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80114e4:	2301      	movs	r3, #1
 80114e6:	75fb      	strb	r3, [r7, #23]
    break;
 80114e8:	e005      	b.n	80114f6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80114ea:	2303      	movs	r3, #3
 80114ec:	75fb      	strb	r3, [r7, #23]
    break;
 80114ee:	e002      	b.n	80114f6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80114f0:	2303      	movs	r3, #3
 80114f2:	75fb      	strb	r3, [r7, #23]
    break;
 80114f4:	bf00      	nop
  }
  return usb_status;
 80114f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80114f8:	4618      	mov	r0, r3
 80114fa:	3718      	adds	r7, #24
 80114fc:	46bd      	mov	sp, r7
 80114fe:	bd80      	pop	{r7, pc}

08011500 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011500:	b580      	push	{r7, lr}
 8011502:	b086      	sub	sp, #24
 8011504:	af00      	add	r7, sp, #0
 8011506:	60f8      	str	r0, [r7, #12]
 8011508:	607a      	str	r2, [r7, #4]
 801150a:	603b      	str	r3, [r7, #0]
 801150c:	460b      	mov	r3, r1
 801150e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011510:	2300      	movs	r3, #0
 8011512:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011514:	2300      	movs	r3, #0
 8011516:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801151e:	7af9      	ldrb	r1, [r7, #11]
 8011520:	683b      	ldr	r3, [r7, #0]
 8011522:	687a      	ldr	r2, [r7, #4]
 8011524:	f7f3 f907 	bl	8004736 <HAL_PCD_EP_Receive>
 8011528:	4603      	mov	r3, r0
 801152a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 801152c:	7dbb      	ldrb	r3, [r7, #22]
 801152e:	2b03      	cmp	r3, #3
 8011530:	d816      	bhi.n	8011560 <USBD_LL_PrepareReceive+0x60>
 8011532:	a201      	add	r2, pc, #4	; (adr r2, 8011538 <USBD_LL_PrepareReceive+0x38>)
 8011534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011538:	08011549 	.word	0x08011549
 801153c:	0801154f 	.word	0x0801154f
 8011540:	08011555 	.word	0x08011555
 8011544:	0801155b 	.word	0x0801155b
    case HAL_OK :
      usb_status = USBD_OK;
 8011548:	2300      	movs	r3, #0
 801154a:	75fb      	strb	r3, [r7, #23]
    break;
 801154c:	e00b      	b.n	8011566 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801154e:	2303      	movs	r3, #3
 8011550:	75fb      	strb	r3, [r7, #23]
    break;
 8011552:	e008      	b.n	8011566 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011554:	2301      	movs	r3, #1
 8011556:	75fb      	strb	r3, [r7, #23]
    break;
 8011558:	e005      	b.n	8011566 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801155a:	2303      	movs	r3, #3
 801155c:	75fb      	strb	r3, [r7, #23]
    break;
 801155e:	e002      	b.n	8011566 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8011560:	2303      	movs	r3, #3
 8011562:	75fb      	strb	r3, [r7, #23]
    break;
 8011564:	bf00      	nop
  }
  return usb_status;
 8011566:	7dfb      	ldrb	r3, [r7, #23]
}
 8011568:	4618      	mov	r0, r3
 801156a:	3718      	adds	r7, #24
 801156c:	46bd      	mov	sp, r7
 801156e:	bd80      	pop	{r7, pc}

08011570 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b082      	sub	sp, #8
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
 8011578:	460b      	mov	r3, r1
 801157a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011582:	78fa      	ldrb	r2, [r7, #3]
 8011584:	4611      	mov	r1, r2
 8011586:	4618      	mov	r0, r3
 8011588:	f7f3 f913 	bl	80047b2 <HAL_PCD_EP_GetRxCount>
 801158c:	4603      	mov	r3, r0
}
 801158e:	4618      	mov	r0, r3
 8011590:	3708      	adds	r7, #8
 8011592:	46bd      	mov	sp, r7
 8011594:	bd80      	pop	{r7, pc}
	...

08011598 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011598:	b480      	push	{r7}
 801159a:	b083      	sub	sp, #12
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80115a0:	4b03      	ldr	r3, [pc, #12]	; (80115b0 <USBD_static_malloc+0x18>)
}
 80115a2:	4618      	mov	r0, r3
 80115a4:	370c      	adds	r7, #12
 80115a6:	46bd      	mov	sp, r7
 80115a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ac:	4770      	bx	lr
 80115ae:	bf00      	nop
 80115b0:	20002780 	.word	0x20002780

080115b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80115b4:	b480      	push	{r7}
 80115b6:	b083      	sub	sp, #12
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]

}
 80115bc:	bf00      	nop
 80115be:	370c      	adds	r7, #12
 80115c0:	46bd      	mov	sp, r7
 80115c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c6:	4770      	bx	lr

080115c8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80115cc:	f7f0 fb70 	bl	8001cb0 <SystemClock_Config>
}
 80115d0:	bf00      	nop
 80115d2:	bd80      	pop	{r7, pc}

080115d4 <__libc_init_array>:
 80115d4:	b570      	push	{r4, r5, r6, lr}
 80115d6:	4d0d      	ldr	r5, [pc, #52]	; (801160c <__libc_init_array+0x38>)
 80115d8:	4c0d      	ldr	r4, [pc, #52]	; (8011610 <__libc_init_array+0x3c>)
 80115da:	1b64      	subs	r4, r4, r5
 80115dc:	10a4      	asrs	r4, r4, #2
 80115de:	2600      	movs	r6, #0
 80115e0:	42a6      	cmp	r6, r4
 80115e2:	d109      	bne.n	80115f8 <__libc_init_array+0x24>
 80115e4:	4d0b      	ldr	r5, [pc, #44]	; (8011614 <__libc_init_array+0x40>)
 80115e6:	4c0c      	ldr	r4, [pc, #48]	; (8011618 <__libc_init_array+0x44>)
 80115e8:	f002 fda0 	bl	801412c <_init>
 80115ec:	1b64      	subs	r4, r4, r5
 80115ee:	10a4      	asrs	r4, r4, #2
 80115f0:	2600      	movs	r6, #0
 80115f2:	42a6      	cmp	r6, r4
 80115f4:	d105      	bne.n	8011602 <__libc_init_array+0x2e>
 80115f6:	bd70      	pop	{r4, r5, r6, pc}
 80115f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80115fc:	4798      	blx	r3
 80115fe:	3601      	adds	r6, #1
 8011600:	e7ee      	b.n	80115e0 <__libc_init_array+0xc>
 8011602:	f855 3b04 	ldr.w	r3, [r5], #4
 8011606:	4798      	blx	r3
 8011608:	3601      	adds	r6, #1
 801160a:	e7f2      	b.n	80115f2 <__libc_init_array+0x1e>
 801160c:	080146a8 	.word	0x080146a8
 8011610:	080146a8 	.word	0x080146a8
 8011614:	080146a8 	.word	0x080146a8
 8011618:	080146ac 	.word	0x080146ac

0801161c <malloc>:
 801161c:	4b02      	ldr	r3, [pc, #8]	; (8011628 <malloc+0xc>)
 801161e:	4601      	mov	r1, r0
 8011620:	6818      	ldr	r0, [r3, #0]
 8011622:	f000 b885 	b.w	8011730 <_malloc_r>
 8011626:	bf00      	nop
 8011628:	2000018c 	.word	0x2000018c

0801162c <memcpy>:
 801162c:	440a      	add	r2, r1
 801162e:	4291      	cmp	r1, r2
 8011630:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011634:	d100      	bne.n	8011638 <memcpy+0xc>
 8011636:	4770      	bx	lr
 8011638:	b510      	push	{r4, lr}
 801163a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801163e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011642:	4291      	cmp	r1, r2
 8011644:	d1f9      	bne.n	801163a <memcpy+0xe>
 8011646:	bd10      	pop	{r4, pc}

08011648 <memset>:
 8011648:	4402      	add	r2, r0
 801164a:	4603      	mov	r3, r0
 801164c:	4293      	cmp	r3, r2
 801164e:	d100      	bne.n	8011652 <memset+0xa>
 8011650:	4770      	bx	lr
 8011652:	f803 1b01 	strb.w	r1, [r3], #1
 8011656:	e7f9      	b.n	801164c <memset+0x4>

08011658 <_free_r>:
 8011658:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801165a:	2900      	cmp	r1, #0
 801165c:	d044      	beq.n	80116e8 <_free_r+0x90>
 801165e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011662:	9001      	str	r0, [sp, #4]
 8011664:	2b00      	cmp	r3, #0
 8011666:	f1a1 0404 	sub.w	r4, r1, #4
 801166a:	bfb8      	it	lt
 801166c:	18e4      	addlt	r4, r4, r3
 801166e:	f001 fd1f 	bl	80130b0 <__malloc_lock>
 8011672:	4a1e      	ldr	r2, [pc, #120]	; (80116ec <_free_r+0x94>)
 8011674:	9801      	ldr	r0, [sp, #4]
 8011676:	6813      	ldr	r3, [r2, #0]
 8011678:	b933      	cbnz	r3, 8011688 <_free_r+0x30>
 801167a:	6063      	str	r3, [r4, #4]
 801167c:	6014      	str	r4, [r2, #0]
 801167e:	b003      	add	sp, #12
 8011680:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011684:	f001 bd1a 	b.w	80130bc <__malloc_unlock>
 8011688:	42a3      	cmp	r3, r4
 801168a:	d908      	bls.n	801169e <_free_r+0x46>
 801168c:	6825      	ldr	r5, [r4, #0]
 801168e:	1961      	adds	r1, r4, r5
 8011690:	428b      	cmp	r3, r1
 8011692:	bf01      	itttt	eq
 8011694:	6819      	ldreq	r1, [r3, #0]
 8011696:	685b      	ldreq	r3, [r3, #4]
 8011698:	1949      	addeq	r1, r1, r5
 801169a:	6021      	streq	r1, [r4, #0]
 801169c:	e7ed      	b.n	801167a <_free_r+0x22>
 801169e:	461a      	mov	r2, r3
 80116a0:	685b      	ldr	r3, [r3, #4]
 80116a2:	b10b      	cbz	r3, 80116a8 <_free_r+0x50>
 80116a4:	42a3      	cmp	r3, r4
 80116a6:	d9fa      	bls.n	801169e <_free_r+0x46>
 80116a8:	6811      	ldr	r1, [r2, #0]
 80116aa:	1855      	adds	r5, r2, r1
 80116ac:	42a5      	cmp	r5, r4
 80116ae:	d10b      	bne.n	80116c8 <_free_r+0x70>
 80116b0:	6824      	ldr	r4, [r4, #0]
 80116b2:	4421      	add	r1, r4
 80116b4:	1854      	adds	r4, r2, r1
 80116b6:	42a3      	cmp	r3, r4
 80116b8:	6011      	str	r1, [r2, #0]
 80116ba:	d1e0      	bne.n	801167e <_free_r+0x26>
 80116bc:	681c      	ldr	r4, [r3, #0]
 80116be:	685b      	ldr	r3, [r3, #4]
 80116c0:	6053      	str	r3, [r2, #4]
 80116c2:	4421      	add	r1, r4
 80116c4:	6011      	str	r1, [r2, #0]
 80116c6:	e7da      	b.n	801167e <_free_r+0x26>
 80116c8:	d902      	bls.n	80116d0 <_free_r+0x78>
 80116ca:	230c      	movs	r3, #12
 80116cc:	6003      	str	r3, [r0, #0]
 80116ce:	e7d6      	b.n	801167e <_free_r+0x26>
 80116d0:	6825      	ldr	r5, [r4, #0]
 80116d2:	1961      	adds	r1, r4, r5
 80116d4:	428b      	cmp	r3, r1
 80116d6:	bf04      	itt	eq
 80116d8:	6819      	ldreq	r1, [r3, #0]
 80116da:	685b      	ldreq	r3, [r3, #4]
 80116dc:	6063      	str	r3, [r4, #4]
 80116de:	bf04      	itt	eq
 80116e0:	1949      	addeq	r1, r1, r5
 80116e2:	6021      	streq	r1, [r4, #0]
 80116e4:	6054      	str	r4, [r2, #4]
 80116e6:	e7ca      	b.n	801167e <_free_r+0x26>
 80116e8:	b003      	add	sp, #12
 80116ea:	bd30      	pop	{r4, r5, pc}
 80116ec:	200029a0 	.word	0x200029a0

080116f0 <sbrk_aligned>:
 80116f0:	b570      	push	{r4, r5, r6, lr}
 80116f2:	4e0e      	ldr	r6, [pc, #56]	; (801172c <sbrk_aligned+0x3c>)
 80116f4:	460c      	mov	r4, r1
 80116f6:	6831      	ldr	r1, [r6, #0]
 80116f8:	4605      	mov	r5, r0
 80116fa:	b911      	cbnz	r1, 8011702 <sbrk_aligned+0x12>
 80116fc:	f000 fd0e 	bl	801211c <_sbrk_r>
 8011700:	6030      	str	r0, [r6, #0]
 8011702:	4621      	mov	r1, r4
 8011704:	4628      	mov	r0, r5
 8011706:	f000 fd09 	bl	801211c <_sbrk_r>
 801170a:	1c43      	adds	r3, r0, #1
 801170c:	d00a      	beq.n	8011724 <sbrk_aligned+0x34>
 801170e:	1cc4      	adds	r4, r0, #3
 8011710:	f024 0403 	bic.w	r4, r4, #3
 8011714:	42a0      	cmp	r0, r4
 8011716:	d007      	beq.n	8011728 <sbrk_aligned+0x38>
 8011718:	1a21      	subs	r1, r4, r0
 801171a:	4628      	mov	r0, r5
 801171c:	f000 fcfe 	bl	801211c <_sbrk_r>
 8011720:	3001      	adds	r0, #1
 8011722:	d101      	bne.n	8011728 <sbrk_aligned+0x38>
 8011724:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011728:	4620      	mov	r0, r4
 801172a:	bd70      	pop	{r4, r5, r6, pc}
 801172c:	200029a4 	.word	0x200029a4

08011730 <_malloc_r>:
 8011730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011734:	1ccd      	adds	r5, r1, #3
 8011736:	f025 0503 	bic.w	r5, r5, #3
 801173a:	3508      	adds	r5, #8
 801173c:	2d0c      	cmp	r5, #12
 801173e:	bf38      	it	cc
 8011740:	250c      	movcc	r5, #12
 8011742:	2d00      	cmp	r5, #0
 8011744:	4607      	mov	r7, r0
 8011746:	db01      	blt.n	801174c <_malloc_r+0x1c>
 8011748:	42a9      	cmp	r1, r5
 801174a:	d905      	bls.n	8011758 <_malloc_r+0x28>
 801174c:	230c      	movs	r3, #12
 801174e:	603b      	str	r3, [r7, #0]
 8011750:	2600      	movs	r6, #0
 8011752:	4630      	mov	r0, r6
 8011754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011758:	4e2e      	ldr	r6, [pc, #184]	; (8011814 <_malloc_r+0xe4>)
 801175a:	f001 fca9 	bl	80130b0 <__malloc_lock>
 801175e:	6833      	ldr	r3, [r6, #0]
 8011760:	461c      	mov	r4, r3
 8011762:	bb34      	cbnz	r4, 80117b2 <_malloc_r+0x82>
 8011764:	4629      	mov	r1, r5
 8011766:	4638      	mov	r0, r7
 8011768:	f7ff ffc2 	bl	80116f0 <sbrk_aligned>
 801176c:	1c43      	adds	r3, r0, #1
 801176e:	4604      	mov	r4, r0
 8011770:	d14d      	bne.n	801180e <_malloc_r+0xde>
 8011772:	6834      	ldr	r4, [r6, #0]
 8011774:	4626      	mov	r6, r4
 8011776:	2e00      	cmp	r6, #0
 8011778:	d140      	bne.n	80117fc <_malloc_r+0xcc>
 801177a:	6823      	ldr	r3, [r4, #0]
 801177c:	4631      	mov	r1, r6
 801177e:	4638      	mov	r0, r7
 8011780:	eb04 0803 	add.w	r8, r4, r3
 8011784:	f000 fcca 	bl	801211c <_sbrk_r>
 8011788:	4580      	cmp	r8, r0
 801178a:	d13a      	bne.n	8011802 <_malloc_r+0xd2>
 801178c:	6821      	ldr	r1, [r4, #0]
 801178e:	3503      	adds	r5, #3
 8011790:	1a6d      	subs	r5, r5, r1
 8011792:	f025 0503 	bic.w	r5, r5, #3
 8011796:	3508      	adds	r5, #8
 8011798:	2d0c      	cmp	r5, #12
 801179a:	bf38      	it	cc
 801179c:	250c      	movcc	r5, #12
 801179e:	4629      	mov	r1, r5
 80117a0:	4638      	mov	r0, r7
 80117a2:	f7ff ffa5 	bl	80116f0 <sbrk_aligned>
 80117a6:	3001      	adds	r0, #1
 80117a8:	d02b      	beq.n	8011802 <_malloc_r+0xd2>
 80117aa:	6823      	ldr	r3, [r4, #0]
 80117ac:	442b      	add	r3, r5
 80117ae:	6023      	str	r3, [r4, #0]
 80117b0:	e00e      	b.n	80117d0 <_malloc_r+0xa0>
 80117b2:	6822      	ldr	r2, [r4, #0]
 80117b4:	1b52      	subs	r2, r2, r5
 80117b6:	d41e      	bmi.n	80117f6 <_malloc_r+0xc6>
 80117b8:	2a0b      	cmp	r2, #11
 80117ba:	d916      	bls.n	80117ea <_malloc_r+0xba>
 80117bc:	1961      	adds	r1, r4, r5
 80117be:	42a3      	cmp	r3, r4
 80117c0:	6025      	str	r5, [r4, #0]
 80117c2:	bf18      	it	ne
 80117c4:	6059      	strne	r1, [r3, #4]
 80117c6:	6863      	ldr	r3, [r4, #4]
 80117c8:	bf08      	it	eq
 80117ca:	6031      	streq	r1, [r6, #0]
 80117cc:	5162      	str	r2, [r4, r5]
 80117ce:	604b      	str	r3, [r1, #4]
 80117d0:	4638      	mov	r0, r7
 80117d2:	f104 060b 	add.w	r6, r4, #11
 80117d6:	f001 fc71 	bl	80130bc <__malloc_unlock>
 80117da:	f026 0607 	bic.w	r6, r6, #7
 80117de:	1d23      	adds	r3, r4, #4
 80117e0:	1af2      	subs	r2, r6, r3
 80117e2:	d0b6      	beq.n	8011752 <_malloc_r+0x22>
 80117e4:	1b9b      	subs	r3, r3, r6
 80117e6:	50a3      	str	r3, [r4, r2]
 80117e8:	e7b3      	b.n	8011752 <_malloc_r+0x22>
 80117ea:	6862      	ldr	r2, [r4, #4]
 80117ec:	42a3      	cmp	r3, r4
 80117ee:	bf0c      	ite	eq
 80117f0:	6032      	streq	r2, [r6, #0]
 80117f2:	605a      	strne	r2, [r3, #4]
 80117f4:	e7ec      	b.n	80117d0 <_malloc_r+0xa0>
 80117f6:	4623      	mov	r3, r4
 80117f8:	6864      	ldr	r4, [r4, #4]
 80117fa:	e7b2      	b.n	8011762 <_malloc_r+0x32>
 80117fc:	4634      	mov	r4, r6
 80117fe:	6876      	ldr	r6, [r6, #4]
 8011800:	e7b9      	b.n	8011776 <_malloc_r+0x46>
 8011802:	230c      	movs	r3, #12
 8011804:	603b      	str	r3, [r7, #0]
 8011806:	4638      	mov	r0, r7
 8011808:	f001 fc58 	bl	80130bc <__malloc_unlock>
 801180c:	e7a1      	b.n	8011752 <_malloc_r+0x22>
 801180e:	6025      	str	r5, [r4, #0]
 8011810:	e7de      	b.n	80117d0 <_malloc_r+0xa0>
 8011812:	bf00      	nop
 8011814:	200029a0 	.word	0x200029a0

08011818 <__cvt>:
 8011818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801181c:	ec55 4b10 	vmov	r4, r5, d0
 8011820:	2d00      	cmp	r5, #0
 8011822:	460e      	mov	r6, r1
 8011824:	4619      	mov	r1, r3
 8011826:	462b      	mov	r3, r5
 8011828:	bfbb      	ittet	lt
 801182a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801182e:	461d      	movlt	r5, r3
 8011830:	2300      	movge	r3, #0
 8011832:	232d      	movlt	r3, #45	; 0x2d
 8011834:	700b      	strb	r3, [r1, #0]
 8011836:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011838:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801183c:	4691      	mov	r9, r2
 801183e:	f023 0820 	bic.w	r8, r3, #32
 8011842:	bfbc      	itt	lt
 8011844:	4622      	movlt	r2, r4
 8011846:	4614      	movlt	r4, r2
 8011848:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801184c:	d005      	beq.n	801185a <__cvt+0x42>
 801184e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011852:	d100      	bne.n	8011856 <__cvt+0x3e>
 8011854:	3601      	adds	r6, #1
 8011856:	2102      	movs	r1, #2
 8011858:	e000      	b.n	801185c <__cvt+0x44>
 801185a:	2103      	movs	r1, #3
 801185c:	ab03      	add	r3, sp, #12
 801185e:	9301      	str	r3, [sp, #4]
 8011860:	ab02      	add	r3, sp, #8
 8011862:	9300      	str	r3, [sp, #0]
 8011864:	ec45 4b10 	vmov	d0, r4, r5
 8011868:	4653      	mov	r3, sl
 801186a:	4632      	mov	r2, r6
 801186c:	f000 fd10 	bl	8012290 <_dtoa_r>
 8011870:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011874:	4607      	mov	r7, r0
 8011876:	d102      	bne.n	801187e <__cvt+0x66>
 8011878:	f019 0f01 	tst.w	r9, #1
 801187c:	d022      	beq.n	80118c4 <__cvt+0xac>
 801187e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011882:	eb07 0906 	add.w	r9, r7, r6
 8011886:	d110      	bne.n	80118aa <__cvt+0x92>
 8011888:	783b      	ldrb	r3, [r7, #0]
 801188a:	2b30      	cmp	r3, #48	; 0x30
 801188c:	d10a      	bne.n	80118a4 <__cvt+0x8c>
 801188e:	2200      	movs	r2, #0
 8011890:	2300      	movs	r3, #0
 8011892:	4620      	mov	r0, r4
 8011894:	4629      	mov	r1, r5
 8011896:	f7ef f92f 	bl	8000af8 <__aeabi_dcmpeq>
 801189a:	b918      	cbnz	r0, 80118a4 <__cvt+0x8c>
 801189c:	f1c6 0601 	rsb	r6, r6, #1
 80118a0:	f8ca 6000 	str.w	r6, [sl]
 80118a4:	f8da 3000 	ldr.w	r3, [sl]
 80118a8:	4499      	add	r9, r3
 80118aa:	2200      	movs	r2, #0
 80118ac:	2300      	movs	r3, #0
 80118ae:	4620      	mov	r0, r4
 80118b0:	4629      	mov	r1, r5
 80118b2:	f7ef f921 	bl	8000af8 <__aeabi_dcmpeq>
 80118b6:	b108      	cbz	r0, 80118bc <__cvt+0xa4>
 80118b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80118bc:	2230      	movs	r2, #48	; 0x30
 80118be:	9b03      	ldr	r3, [sp, #12]
 80118c0:	454b      	cmp	r3, r9
 80118c2:	d307      	bcc.n	80118d4 <__cvt+0xbc>
 80118c4:	9b03      	ldr	r3, [sp, #12]
 80118c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80118c8:	1bdb      	subs	r3, r3, r7
 80118ca:	4638      	mov	r0, r7
 80118cc:	6013      	str	r3, [r2, #0]
 80118ce:	b004      	add	sp, #16
 80118d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118d4:	1c59      	adds	r1, r3, #1
 80118d6:	9103      	str	r1, [sp, #12]
 80118d8:	701a      	strb	r2, [r3, #0]
 80118da:	e7f0      	b.n	80118be <__cvt+0xa6>

080118dc <__exponent>:
 80118dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80118de:	4603      	mov	r3, r0
 80118e0:	2900      	cmp	r1, #0
 80118e2:	bfb8      	it	lt
 80118e4:	4249      	neglt	r1, r1
 80118e6:	f803 2b02 	strb.w	r2, [r3], #2
 80118ea:	bfb4      	ite	lt
 80118ec:	222d      	movlt	r2, #45	; 0x2d
 80118ee:	222b      	movge	r2, #43	; 0x2b
 80118f0:	2909      	cmp	r1, #9
 80118f2:	7042      	strb	r2, [r0, #1]
 80118f4:	dd2a      	ble.n	801194c <__exponent+0x70>
 80118f6:	f10d 0407 	add.w	r4, sp, #7
 80118fa:	46a4      	mov	ip, r4
 80118fc:	270a      	movs	r7, #10
 80118fe:	46a6      	mov	lr, r4
 8011900:	460a      	mov	r2, r1
 8011902:	fb91 f6f7 	sdiv	r6, r1, r7
 8011906:	fb07 1516 	mls	r5, r7, r6, r1
 801190a:	3530      	adds	r5, #48	; 0x30
 801190c:	2a63      	cmp	r2, #99	; 0x63
 801190e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011912:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011916:	4631      	mov	r1, r6
 8011918:	dcf1      	bgt.n	80118fe <__exponent+0x22>
 801191a:	3130      	adds	r1, #48	; 0x30
 801191c:	f1ae 0502 	sub.w	r5, lr, #2
 8011920:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011924:	1c44      	adds	r4, r0, #1
 8011926:	4629      	mov	r1, r5
 8011928:	4561      	cmp	r1, ip
 801192a:	d30a      	bcc.n	8011942 <__exponent+0x66>
 801192c:	f10d 0209 	add.w	r2, sp, #9
 8011930:	eba2 020e 	sub.w	r2, r2, lr
 8011934:	4565      	cmp	r5, ip
 8011936:	bf88      	it	hi
 8011938:	2200      	movhi	r2, #0
 801193a:	4413      	add	r3, r2
 801193c:	1a18      	subs	r0, r3, r0
 801193e:	b003      	add	sp, #12
 8011940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011942:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011946:	f804 2f01 	strb.w	r2, [r4, #1]!
 801194a:	e7ed      	b.n	8011928 <__exponent+0x4c>
 801194c:	2330      	movs	r3, #48	; 0x30
 801194e:	3130      	adds	r1, #48	; 0x30
 8011950:	7083      	strb	r3, [r0, #2]
 8011952:	70c1      	strb	r1, [r0, #3]
 8011954:	1d03      	adds	r3, r0, #4
 8011956:	e7f1      	b.n	801193c <__exponent+0x60>

08011958 <_printf_float>:
 8011958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801195c:	ed2d 8b02 	vpush	{d8}
 8011960:	b08d      	sub	sp, #52	; 0x34
 8011962:	460c      	mov	r4, r1
 8011964:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011968:	4616      	mov	r6, r2
 801196a:	461f      	mov	r7, r3
 801196c:	4605      	mov	r5, r0
 801196e:	f001 fb85 	bl	801307c <_localeconv_r>
 8011972:	f8d0 a000 	ldr.w	sl, [r0]
 8011976:	4650      	mov	r0, sl
 8011978:	f7ee fc42 	bl	8000200 <strlen>
 801197c:	2300      	movs	r3, #0
 801197e:	930a      	str	r3, [sp, #40]	; 0x28
 8011980:	6823      	ldr	r3, [r4, #0]
 8011982:	9305      	str	r3, [sp, #20]
 8011984:	f8d8 3000 	ldr.w	r3, [r8]
 8011988:	f894 b018 	ldrb.w	fp, [r4, #24]
 801198c:	3307      	adds	r3, #7
 801198e:	f023 0307 	bic.w	r3, r3, #7
 8011992:	f103 0208 	add.w	r2, r3, #8
 8011996:	f8c8 2000 	str.w	r2, [r8]
 801199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801199e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80119a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80119a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80119aa:	9307      	str	r3, [sp, #28]
 80119ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80119b0:	ee08 0a10 	vmov	s16, r0
 80119b4:	4b9f      	ldr	r3, [pc, #636]	; (8011c34 <_printf_float+0x2dc>)
 80119b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80119ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80119be:	f7ef f8cd 	bl	8000b5c <__aeabi_dcmpun>
 80119c2:	bb88      	cbnz	r0, 8011a28 <_printf_float+0xd0>
 80119c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80119c8:	4b9a      	ldr	r3, [pc, #616]	; (8011c34 <_printf_float+0x2dc>)
 80119ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80119ce:	f7ef f8a7 	bl	8000b20 <__aeabi_dcmple>
 80119d2:	bb48      	cbnz	r0, 8011a28 <_printf_float+0xd0>
 80119d4:	2200      	movs	r2, #0
 80119d6:	2300      	movs	r3, #0
 80119d8:	4640      	mov	r0, r8
 80119da:	4649      	mov	r1, r9
 80119dc:	f7ef f896 	bl	8000b0c <__aeabi_dcmplt>
 80119e0:	b110      	cbz	r0, 80119e8 <_printf_float+0x90>
 80119e2:	232d      	movs	r3, #45	; 0x2d
 80119e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119e8:	4b93      	ldr	r3, [pc, #588]	; (8011c38 <_printf_float+0x2e0>)
 80119ea:	4894      	ldr	r0, [pc, #592]	; (8011c3c <_printf_float+0x2e4>)
 80119ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80119f0:	bf94      	ite	ls
 80119f2:	4698      	movls	r8, r3
 80119f4:	4680      	movhi	r8, r0
 80119f6:	2303      	movs	r3, #3
 80119f8:	6123      	str	r3, [r4, #16]
 80119fa:	9b05      	ldr	r3, [sp, #20]
 80119fc:	f023 0204 	bic.w	r2, r3, #4
 8011a00:	6022      	str	r2, [r4, #0]
 8011a02:	f04f 0900 	mov.w	r9, #0
 8011a06:	9700      	str	r7, [sp, #0]
 8011a08:	4633      	mov	r3, r6
 8011a0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8011a0c:	4621      	mov	r1, r4
 8011a0e:	4628      	mov	r0, r5
 8011a10:	f000 f9d8 	bl	8011dc4 <_printf_common>
 8011a14:	3001      	adds	r0, #1
 8011a16:	f040 8090 	bne.w	8011b3a <_printf_float+0x1e2>
 8011a1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a1e:	b00d      	add	sp, #52	; 0x34
 8011a20:	ecbd 8b02 	vpop	{d8}
 8011a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a28:	4642      	mov	r2, r8
 8011a2a:	464b      	mov	r3, r9
 8011a2c:	4640      	mov	r0, r8
 8011a2e:	4649      	mov	r1, r9
 8011a30:	f7ef f894 	bl	8000b5c <__aeabi_dcmpun>
 8011a34:	b140      	cbz	r0, 8011a48 <_printf_float+0xf0>
 8011a36:	464b      	mov	r3, r9
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	bfbc      	itt	lt
 8011a3c:	232d      	movlt	r3, #45	; 0x2d
 8011a3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011a42:	487f      	ldr	r0, [pc, #508]	; (8011c40 <_printf_float+0x2e8>)
 8011a44:	4b7f      	ldr	r3, [pc, #508]	; (8011c44 <_printf_float+0x2ec>)
 8011a46:	e7d1      	b.n	80119ec <_printf_float+0x94>
 8011a48:	6863      	ldr	r3, [r4, #4]
 8011a4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011a4e:	9206      	str	r2, [sp, #24]
 8011a50:	1c5a      	adds	r2, r3, #1
 8011a52:	d13f      	bne.n	8011ad4 <_printf_float+0x17c>
 8011a54:	2306      	movs	r3, #6
 8011a56:	6063      	str	r3, [r4, #4]
 8011a58:	9b05      	ldr	r3, [sp, #20]
 8011a5a:	6861      	ldr	r1, [r4, #4]
 8011a5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011a60:	2300      	movs	r3, #0
 8011a62:	9303      	str	r3, [sp, #12]
 8011a64:	ab0a      	add	r3, sp, #40	; 0x28
 8011a66:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011a6a:	ab09      	add	r3, sp, #36	; 0x24
 8011a6c:	ec49 8b10 	vmov	d0, r8, r9
 8011a70:	9300      	str	r3, [sp, #0]
 8011a72:	6022      	str	r2, [r4, #0]
 8011a74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011a78:	4628      	mov	r0, r5
 8011a7a:	f7ff fecd 	bl	8011818 <__cvt>
 8011a7e:	9b06      	ldr	r3, [sp, #24]
 8011a80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011a82:	2b47      	cmp	r3, #71	; 0x47
 8011a84:	4680      	mov	r8, r0
 8011a86:	d108      	bne.n	8011a9a <_printf_float+0x142>
 8011a88:	1cc8      	adds	r0, r1, #3
 8011a8a:	db02      	blt.n	8011a92 <_printf_float+0x13a>
 8011a8c:	6863      	ldr	r3, [r4, #4]
 8011a8e:	4299      	cmp	r1, r3
 8011a90:	dd41      	ble.n	8011b16 <_printf_float+0x1be>
 8011a92:	f1ab 0b02 	sub.w	fp, fp, #2
 8011a96:	fa5f fb8b 	uxtb.w	fp, fp
 8011a9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011a9e:	d820      	bhi.n	8011ae2 <_printf_float+0x18a>
 8011aa0:	3901      	subs	r1, #1
 8011aa2:	465a      	mov	r2, fp
 8011aa4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011aa8:	9109      	str	r1, [sp, #36]	; 0x24
 8011aaa:	f7ff ff17 	bl	80118dc <__exponent>
 8011aae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ab0:	1813      	adds	r3, r2, r0
 8011ab2:	2a01      	cmp	r2, #1
 8011ab4:	4681      	mov	r9, r0
 8011ab6:	6123      	str	r3, [r4, #16]
 8011ab8:	dc02      	bgt.n	8011ac0 <_printf_float+0x168>
 8011aba:	6822      	ldr	r2, [r4, #0]
 8011abc:	07d2      	lsls	r2, r2, #31
 8011abe:	d501      	bpl.n	8011ac4 <_printf_float+0x16c>
 8011ac0:	3301      	adds	r3, #1
 8011ac2:	6123      	str	r3, [r4, #16]
 8011ac4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d09c      	beq.n	8011a06 <_printf_float+0xae>
 8011acc:	232d      	movs	r3, #45	; 0x2d
 8011ace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ad2:	e798      	b.n	8011a06 <_printf_float+0xae>
 8011ad4:	9a06      	ldr	r2, [sp, #24]
 8011ad6:	2a47      	cmp	r2, #71	; 0x47
 8011ad8:	d1be      	bne.n	8011a58 <_printf_float+0x100>
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d1bc      	bne.n	8011a58 <_printf_float+0x100>
 8011ade:	2301      	movs	r3, #1
 8011ae0:	e7b9      	b.n	8011a56 <_printf_float+0xfe>
 8011ae2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011ae6:	d118      	bne.n	8011b1a <_printf_float+0x1c2>
 8011ae8:	2900      	cmp	r1, #0
 8011aea:	6863      	ldr	r3, [r4, #4]
 8011aec:	dd0b      	ble.n	8011b06 <_printf_float+0x1ae>
 8011aee:	6121      	str	r1, [r4, #16]
 8011af0:	b913      	cbnz	r3, 8011af8 <_printf_float+0x1a0>
 8011af2:	6822      	ldr	r2, [r4, #0]
 8011af4:	07d0      	lsls	r0, r2, #31
 8011af6:	d502      	bpl.n	8011afe <_printf_float+0x1a6>
 8011af8:	3301      	adds	r3, #1
 8011afa:	440b      	add	r3, r1
 8011afc:	6123      	str	r3, [r4, #16]
 8011afe:	65a1      	str	r1, [r4, #88]	; 0x58
 8011b00:	f04f 0900 	mov.w	r9, #0
 8011b04:	e7de      	b.n	8011ac4 <_printf_float+0x16c>
 8011b06:	b913      	cbnz	r3, 8011b0e <_printf_float+0x1b6>
 8011b08:	6822      	ldr	r2, [r4, #0]
 8011b0a:	07d2      	lsls	r2, r2, #31
 8011b0c:	d501      	bpl.n	8011b12 <_printf_float+0x1ba>
 8011b0e:	3302      	adds	r3, #2
 8011b10:	e7f4      	b.n	8011afc <_printf_float+0x1a4>
 8011b12:	2301      	movs	r3, #1
 8011b14:	e7f2      	b.n	8011afc <_printf_float+0x1a4>
 8011b16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b1c:	4299      	cmp	r1, r3
 8011b1e:	db05      	blt.n	8011b2c <_printf_float+0x1d4>
 8011b20:	6823      	ldr	r3, [r4, #0]
 8011b22:	6121      	str	r1, [r4, #16]
 8011b24:	07d8      	lsls	r0, r3, #31
 8011b26:	d5ea      	bpl.n	8011afe <_printf_float+0x1a6>
 8011b28:	1c4b      	adds	r3, r1, #1
 8011b2a:	e7e7      	b.n	8011afc <_printf_float+0x1a4>
 8011b2c:	2900      	cmp	r1, #0
 8011b2e:	bfd4      	ite	le
 8011b30:	f1c1 0202 	rsble	r2, r1, #2
 8011b34:	2201      	movgt	r2, #1
 8011b36:	4413      	add	r3, r2
 8011b38:	e7e0      	b.n	8011afc <_printf_float+0x1a4>
 8011b3a:	6823      	ldr	r3, [r4, #0]
 8011b3c:	055a      	lsls	r2, r3, #21
 8011b3e:	d407      	bmi.n	8011b50 <_printf_float+0x1f8>
 8011b40:	6923      	ldr	r3, [r4, #16]
 8011b42:	4642      	mov	r2, r8
 8011b44:	4631      	mov	r1, r6
 8011b46:	4628      	mov	r0, r5
 8011b48:	47b8      	blx	r7
 8011b4a:	3001      	adds	r0, #1
 8011b4c:	d12c      	bne.n	8011ba8 <_printf_float+0x250>
 8011b4e:	e764      	b.n	8011a1a <_printf_float+0xc2>
 8011b50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011b54:	f240 80e0 	bls.w	8011d18 <_printf_float+0x3c0>
 8011b58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	2300      	movs	r3, #0
 8011b60:	f7ee ffca 	bl	8000af8 <__aeabi_dcmpeq>
 8011b64:	2800      	cmp	r0, #0
 8011b66:	d034      	beq.n	8011bd2 <_printf_float+0x27a>
 8011b68:	4a37      	ldr	r2, [pc, #220]	; (8011c48 <_printf_float+0x2f0>)
 8011b6a:	2301      	movs	r3, #1
 8011b6c:	4631      	mov	r1, r6
 8011b6e:	4628      	mov	r0, r5
 8011b70:	47b8      	blx	r7
 8011b72:	3001      	adds	r0, #1
 8011b74:	f43f af51 	beq.w	8011a1a <_printf_float+0xc2>
 8011b78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011b7c:	429a      	cmp	r2, r3
 8011b7e:	db02      	blt.n	8011b86 <_printf_float+0x22e>
 8011b80:	6823      	ldr	r3, [r4, #0]
 8011b82:	07d8      	lsls	r0, r3, #31
 8011b84:	d510      	bpl.n	8011ba8 <_printf_float+0x250>
 8011b86:	ee18 3a10 	vmov	r3, s16
 8011b8a:	4652      	mov	r2, sl
 8011b8c:	4631      	mov	r1, r6
 8011b8e:	4628      	mov	r0, r5
 8011b90:	47b8      	blx	r7
 8011b92:	3001      	adds	r0, #1
 8011b94:	f43f af41 	beq.w	8011a1a <_printf_float+0xc2>
 8011b98:	f04f 0800 	mov.w	r8, #0
 8011b9c:	f104 091a 	add.w	r9, r4, #26
 8011ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ba2:	3b01      	subs	r3, #1
 8011ba4:	4543      	cmp	r3, r8
 8011ba6:	dc09      	bgt.n	8011bbc <_printf_float+0x264>
 8011ba8:	6823      	ldr	r3, [r4, #0]
 8011baa:	079b      	lsls	r3, r3, #30
 8011bac:	f100 8105 	bmi.w	8011dba <_printf_float+0x462>
 8011bb0:	68e0      	ldr	r0, [r4, #12]
 8011bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011bb4:	4298      	cmp	r0, r3
 8011bb6:	bfb8      	it	lt
 8011bb8:	4618      	movlt	r0, r3
 8011bba:	e730      	b.n	8011a1e <_printf_float+0xc6>
 8011bbc:	2301      	movs	r3, #1
 8011bbe:	464a      	mov	r2, r9
 8011bc0:	4631      	mov	r1, r6
 8011bc2:	4628      	mov	r0, r5
 8011bc4:	47b8      	blx	r7
 8011bc6:	3001      	adds	r0, #1
 8011bc8:	f43f af27 	beq.w	8011a1a <_printf_float+0xc2>
 8011bcc:	f108 0801 	add.w	r8, r8, #1
 8011bd0:	e7e6      	b.n	8011ba0 <_printf_float+0x248>
 8011bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	dc39      	bgt.n	8011c4c <_printf_float+0x2f4>
 8011bd8:	4a1b      	ldr	r2, [pc, #108]	; (8011c48 <_printf_float+0x2f0>)
 8011bda:	2301      	movs	r3, #1
 8011bdc:	4631      	mov	r1, r6
 8011bde:	4628      	mov	r0, r5
 8011be0:	47b8      	blx	r7
 8011be2:	3001      	adds	r0, #1
 8011be4:	f43f af19 	beq.w	8011a1a <_printf_float+0xc2>
 8011be8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011bec:	4313      	orrs	r3, r2
 8011bee:	d102      	bne.n	8011bf6 <_printf_float+0x29e>
 8011bf0:	6823      	ldr	r3, [r4, #0]
 8011bf2:	07d9      	lsls	r1, r3, #31
 8011bf4:	d5d8      	bpl.n	8011ba8 <_printf_float+0x250>
 8011bf6:	ee18 3a10 	vmov	r3, s16
 8011bfa:	4652      	mov	r2, sl
 8011bfc:	4631      	mov	r1, r6
 8011bfe:	4628      	mov	r0, r5
 8011c00:	47b8      	blx	r7
 8011c02:	3001      	adds	r0, #1
 8011c04:	f43f af09 	beq.w	8011a1a <_printf_float+0xc2>
 8011c08:	f04f 0900 	mov.w	r9, #0
 8011c0c:	f104 0a1a 	add.w	sl, r4, #26
 8011c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c12:	425b      	negs	r3, r3
 8011c14:	454b      	cmp	r3, r9
 8011c16:	dc01      	bgt.n	8011c1c <_printf_float+0x2c4>
 8011c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c1a:	e792      	b.n	8011b42 <_printf_float+0x1ea>
 8011c1c:	2301      	movs	r3, #1
 8011c1e:	4652      	mov	r2, sl
 8011c20:	4631      	mov	r1, r6
 8011c22:	4628      	mov	r0, r5
 8011c24:	47b8      	blx	r7
 8011c26:	3001      	adds	r0, #1
 8011c28:	f43f aef7 	beq.w	8011a1a <_printf_float+0xc2>
 8011c2c:	f109 0901 	add.w	r9, r9, #1
 8011c30:	e7ee      	b.n	8011c10 <_printf_float+0x2b8>
 8011c32:	bf00      	nop
 8011c34:	7fefffff 	.word	0x7fefffff
 8011c38:	080142c0 	.word	0x080142c0
 8011c3c:	080142c4 	.word	0x080142c4
 8011c40:	080142cc 	.word	0x080142cc
 8011c44:	080142c8 	.word	0x080142c8
 8011c48:	080142d0 	.word	0x080142d0
 8011c4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011c50:	429a      	cmp	r2, r3
 8011c52:	bfa8      	it	ge
 8011c54:	461a      	movge	r2, r3
 8011c56:	2a00      	cmp	r2, #0
 8011c58:	4691      	mov	r9, r2
 8011c5a:	dc37      	bgt.n	8011ccc <_printf_float+0x374>
 8011c5c:	f04f 0b00 	mov.w	fp, #0
 8011c60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011c64:	f104 021a 	add.w	r2, r4, #26
 8011c68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011c6a:	9305      	str	r3, [sp, #20]
 8011c6c:	eba3 0309 	sub.w	r3, r3, r9
 8011c70:	455b      	cmp	r3, fp
 8011c72:	dc33      	bgt.n	8011cdc <_printf_float+0x384>
 8011c74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011c78:	429a      	cmp	r2, r3
 8011c7a:	db3b      	blt.n	8011cf4 <_printf_float+0x39c>
 8011c7c:	6823      	ldr	r3, [r4, #0]
 8011c7e:	07da      	lsls	r2, r3, #31
 8011c80:	d438      	bmi.n	8011cf4 <_printf_float+0x39c>
 8011c82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c84:	9a05      	ldr	r2, [sp, #20]
 8011c86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011c88:	1a9a      	subs	r2, r3, r2
 8011c8a:	eba3 0901 	sub.w	r9, r3, r1
 8011c8e:	4591      	cmp	r9, r2
 8011c90:	bfa8      	it	ge
 8011c92:	4691      	movge	r9, r2
 8011c94:	f1b9 0f00 	cmp.w	r9, #0
 8011c98:	dc35      	bgt.n	8011d06 <_printf_float+0x3ae>
 8011c9a:	f04f 0800 	mov.w	r8, #0
 8011c9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011ca2:	f104 0a1a 	add.w	sl, r4, #26
 8011ca6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011caa:	1a9b      	subs	r3, r3, r2
 8011cac:	eba3 0309 	sub.w	r3, r3, r9
 8011cb0:	4543      	cmp	r3, r8
 8011cb2:	f77f af79 	ble.w	8011ba8 <_printf_float+0x250>
 8011cb6:	2301      	movs	r3, #1
 8011cb8:	4652      	mov	r2, sl
 8011cba:	4631      	mov	r1, r6
 8011cbc:	4628      	mov	r0, r5
 8011cbe:	47b8      	blx	r7
 8011cc0:	3001      	adds	r0, #1
 8011cc2:	f43f aeaa 	beq.w	8011a1a <_printf_float+0xc2>
 8011cc6:	f108 0801 	add.w	r8, r8, #1
 8011cca:	e7ec      	b.n	8011ca6 <_printf_float+0x34e>
 8011ccc:	4613      	mov	r3, r2
 8011cce:	4631      	mov	r1, r6
 8011cd0:	4642      	mov	r2, r8
 8011cd2:	4628      	mov	r0, r5
 8011cd4:	47b8      	blx	r7
 8011cd6:	3001      	adds	r0, #1
 8011cd8:	d1c0      	bne.n	8011c5c <_printf_float+0x304>
 8011cda:	e69e      	b.n	8011a1a <_printf_float+0xc2>
 8011cdc:	2301      	movs	r3, #1
 8011cde:	4631      	mov	r1, r6
 8011ce0:	4628      	mov	r0, r5
 8011ce2:	9205      	str	r2, [sp, #20]
 8011ce4:	47b8      	blx	r7
 8011ce6:	3001      	adds	r0, #1
 8011ce8:	f43f ae97 	beq.w	8011a1a <_printf_float+0xc2>
 8011cec:	9a05      	ldr	r2, [sp, #20]
 8011cee:	f10b 0b01 	add.w	fp, fp, #1
 8011cf2:	e7b9      	b.n	8011c68 <_printf_float+0x310>
 8011cf4:	ee18 3a10 	vmov	r3, s16
 8011cf8:	4652      	mov	r2, sl
 8011cfa:	4631      	mov	r1, r6
 8011cfc:	4628      	mov	r0, r5
 8011cfe:	47b8      	blx	r7
 8011d00:	3001      	adds	r0, #1
 8011d02:	d1be      	bne.n	8011c82 <_printf_float+0x32a>
 8011d04:	e689      	b.n	8011a1a <_printf_float+0xc2>
 8011d06:	9a05      	ldr	r2, [sp, #20]
 8011d08:	464b      	mov	r3, r9
 8011d0a:	4442      	add	r2, r8
 8011d0c:	4631      	mov	r1, r6
 8011d0e:	4628      	mov	r0, r5
 8011d10:	47b8      	blx	r7
 8011d12:	3001      	adds	r0, #1
 8011d14:	d1c1      	bne.n	8011c9a <_printf_float+0x342>
 8011d16:	e680      	b.n	8011a1a <_printf_float+0xc2>
 8011d18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d1a:	2a01      	cmp	r2, #1
 8011d1c:	dc01      	bgt.n	8011d22 <_printf_float+0x3ca>
 8011d1e:	07db      	lsls	r3, r3, #31
 8011d20:	d538      	bpl.n	8011d94 <_printf_float+0x43c>
 8011d22:	2301      	movs	r3, #1
 8011d24:	4642      	mov	r2, r8
 8011d26:	4631      	mov	r1, r6
 8011d28:	4628      	mov	r0, r5
 8011d2a:	47b8      	blx	r7
 8011d2c:	3001      	adds	r0, #1
 8011d2e:	f43f ae74 	beq.w	8011a1a <_printf_float+0xc2>
 8011d32:	ee18 3a10 	vmov	r3, s16
 8011d36:	4652      	mov	r2, sl
 8011d38:	4631      	mov	r1, r6
 8011d3a:	4628      	mov	r0, r5
 8011d3c:	47b8      	blx	r7
 8011d3e:	3001      	adds	r0, #1
 8011d40:	f43f ae6b 	beq.w	8011a1a <_printf_float+0xc2>
 8011d44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011d48:	2200      	movs	r2, #0
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	f7ee fed4 	bl	8000af8 <__aeabi_dcmpeq>
 8011d50:	b9d8      	cbnz	r0, 8011d8a <_printf_float+0x432>
 8011d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d54:	f108 0201 	add.w	r2, r8, #1
 8011d58:	3b01      	subs	r3, #1
 8011d5a:	4631      	mov	r1, r6
 8011d5c:	4628      	mov	r0, r5
 8011d5e:	47b8      	blx	r7
 8011d60:	3001      	adds	r0, #1
 8011d62:	d10e      	bne.n	8011d82 <_printf_float+0x42a>
 8011d64:	e659      	b.n	8011a1a <_printf_float+0xc2>
 8011d66:	2301      	movs	r3, #1
 8011d68:	4652      	mov	r2, sl
 8011d6a:	4631      	mov	r1, r6
 8011d6c:	4628      	mov	r0, r5
 8011d6e:	47b8      	blx	r7
 8011d70:	3001      	adds	r0, #1
 8011d72:	f43f ae52 	beq.w	8011a1a <_printf_float+0xc2>
 8011d76:	f108 0801 	add.w	r8, r8, #1
 8011d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d7c:	3b01      	subs	r3, #1
 8011d7e:	4543      	cmp	r3, r8
 8011d80:	dcf1      	bgt.n	8011d66 <_printf_float+0x40e>
 8011d82:	464b      	mov	r3, r9
 8011d84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011d88:	e6dc      	b.n	8011b44 <_printf_float+0x1ec>
 8011d8a:	f04f 0800 	mov.w	r8, #0
 8011d8e:	f104 0a1a 	add.w	sl, r4, #26
 8011d92:	e7f2      	b.n	8011d7a <_printf_float+0x422>
 8011d94:	2301      	movs	r3, #1
 8011d96:	4642      	mov	r2, r8
 8011d98:	e7df      	b.n	8011d5a <_printf_float+0x402>
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	464a      	mov	r2, r9
 8011d9e:	4631      	mov	r1, r6
 8011da0:	4628      	mov	r0, r5
 8011da2:	47b8      	blx	r7
 8011da4:	3001      	adds	r0, #1
 8011da6:	f43f ae38 	beq.w	8011a1a <_printf_float+0xc2>
 8011daa:	f108 0801 	add.w	r8, r8, #1
 8011dae:	68e3      	ldr	r3, [r4, #12]
 8011db0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011db2:	1a5b      	subs	r3, r3, r1
 8011db4:	4543      	cmp	r3, r8
 8011db6:	dcf0      	bgt.n	8011d9a <_printf_float+0x442>
 8011db8:	e6fa      	b.n	8011bb0 <_printf_float+0x258>
 8011dba:	f04f 0800 	mov.w	r8, #0
 8011dbe:	f104 0919 	add.w	r9, r4, #25
 8011dc2:	e7f4      	b.n	8011dae <_printf_float+0x456>

08011dc4 <_printf_common>:
 8011dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dc8:	4616      	mov	r6, r2
 8011dca:	4699      	mov	r9, r3
 8011dcc:	688a      	ldr	r2, [r1, #8]
 8011dce:	690b      	ldr	r3, [r1, #16]
 8011dd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011dd4:	4293      	cmp	r3, r2
 8011dd6:	bfb8      	it	lt
 8011dd8:	4613      	movlt	r3, r2
 8011dda:	6033      	str	r3, [r6, #0]
 8011ddc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011de0:	4607      	mov	r7, r0
 8011de2:	460c      	mov	r4, r1
 8011de4:	b10a      	cbz	r2, 8011dea <_printf_common+0x26>
 8011de6:	3301      	adds	r3, #1
 8011de8:	6033      	str	r3, [r6, #0]
 8011dea:	6823      	ldr	r3, [r4, #0]
 8011dec:	0699      	lsls	r1, r3, #26
 8011dee:	bf42      	ittt	mi
 8011df0:	6833      	ldrmi	r3, [r6, #0]
 8011df2:	3302      	addmi	r3, #2
 8011df4:	6033      	strmi	r3, [r6, #0]
 8011df6:	6825      	ldr	r5, [r4, #0]
 8011df8:	f015 0506 	ands.w	r5, r5, #6
 8011dfc:	d106      	bne.n	8011e0c <_printf_common+0x48>
 8011dfe:	f104 0a19 	add.w	sl, r4, #25
 8011e02:	68e3      	ldr	r3, [r4, #12]
 8011e04:	6832      	ldr	r2, [r6, #0]
 8011e06:	1a9b      	subs	r3, r3, r2
 8011e08:	42ab      	cmp	r3, r5
 8011e0a:	dc26      	bgt.n	8011e5a <_printf_common+0x96>
 8011e0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011e10:	1e13      	subs	r3, r2, #0
 8011e12:	6822      	ldr	r2, [r4, #0]
 8011e14:	bf18      	it	ne
 8011e16:	2301      	movne	r3, #1
 8011e18:	0692      	lsls	r2, r2, #26
 8011e1a:	d42b      	bmi.n	8011e74 <_printf_common+0xb0>
 8011e1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011e20:	4649      	mov	r1, r9
 8011e22:	4638      	mov	r0, r7
 8011e24:	47c0      	blx	r8
 8011e26:	3001      	adds	r0, #1
 8011e28:	d01e      	beq.n	8011e68 <_printf_common+0xa4>
 8011e2a:	6823      	ldr	r3, [r4, #0]
 8011e2c:	68e5      	ldr	r5, [r4, #12]
 8011e2e:	6832      	ldr	r2, [r6, #0]
 8011e30:	f003 0306 	and.w	r3, r3, #6
 8011e34:	2b04      	cmp	r3, #4
 8011e36:	bf08      	it	eq
 8011e38:	1aad      	subeq	r5, r5, r2
 8011e3a:	68a3      	ldr	r3, [r4, #8]
 8011e3c:	6922      	ldr	r2, [r4, #16]
 8011e3e:	bf0c      	ite	eq
 8011e40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011e44:	2500      	movne	r5, #0
 8011e46:	4293      	cmp	r3, r2
 8011e48:	bfc4      	itt	gt
 8011e4a:	1a9b      	subgt	r3, r3, r2
 8011e4c:	18ed      	addgt	r5, r5, r3
 8011e4e:	2600      	movs	r6, #0
 8011e50:	341a      	adds	r4, #26
 8011e52:	42b5      	cmp	r5, r6
 8011e54:	d11a      	bne.n	8011e8c <_printf_common+0xc8>
 8011e56:	2000      	movs	r0, #0
 8011e58:	e008      	b.n	8011e6c <_printf_common+0xa8>
 8011e5a:	2301      	movs	r3, #1
 8011e5c:	4652      	mov	r2, sl
 8011e5e:	4649      	mov	r1, r9
 8011e60:	4638      	mov	r0, r7
 8011e62:	47c0      	blx	r8
 8011e64:	3001      	adds	r0, #1
 8011e66:	d103      	bne.n	8011e70 <_printf_common+0xac>
 8011e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e70:	3501      	adds	r5, #1
 8011e72:	e7c6      	b.n	8011e02 <_printf_common+0x3e>
 8011e74:	18e1      	adds	r1, r4, r3
 8011e76:	1c5a      	adds	r2, r3, #1
 8011e78:	2030      	movs	r0, #48	; 0x30
 8011e7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011e7e:	4422      	add	r2, r4
 8011e80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011e84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011e88:	3302      	adds	r3, #2
 8011e8a:	e7c7      	b.n	8011e1c <_printf_common+0x58>
 8011e8c:	2301      	movs	r3, #1
 8011e8e:	4622      	mov	r2, r4
 8011e90:	4649      	mov	r1, r9
 8011e92:	4638      	mov	r0, r7
 8011e94:	47c0      	blx	r8
 8011e96:	3001      	adds	r0, #1
 8011e98:	d0e6      	beq.n	8011e68 <_printf_common+0xa4>
 8011e9a:	3601      	adds	r6, #1
 8011e9c:	e7d9      	b.n	8011e52 <_printf_common+0x8e>
	...

08011ea0 <_printf_i>:
 8011ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011ea4:	7e0f      	ldrb	r7, [r1, #24]
 8011ea6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011ea8:	2f78      	cmp	r7, #120	; 0x78
 8011eaa:	4691      	mov	r9, r2
 8011eac:	4680      	mov	r8, r0
 8011eae:	460c      	mov	r4, r1
 8011eb0:	469a      	mov	sl, r3
 8011eb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011eb6:	d807      	bhi.n	8011ec8 <_printf_i+0x28>
 8011eb8:	2f62      	cmp	r7, #98	; 0x62
 8011eba:	d80a      	bhi.n	8011ed2 <_printf_i+0x32>
 8011ebc:	2f00      	cmp	r7, #0
 8011ebe:	f000 80d8 	beq.w	8012072 <_printf_i+0x1d2>
 8011ec2:	2f58      	cmp	r7, #88	; 0x58
 8011ec4:	f000 80a3 	beq.w	801200e <_printf_i+0x16e>
 8011ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011ecc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011ed0:	e03a      	b.n	8011f48 <_printf_i+0xa8>
 8011ed2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011ed6:	2b15      	cmp	r3, #21
 8011ed8:	d8f6      	bhi.n	8011ec8 <_printf_i+0x28>
 8011eda:	a101      	add	r1, pc, #4	; (adr r1, 8011ee0 <_printf_i+0x40>)
 8011edc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011ee0:	08011f39 	.word	0x08011f39
 8011ee4:	08011f4d 	.word	0x08011f4d
 8011ee8:	08011ec9 	.word	0x08011ec9
 8011eec:	08011ec9 	.word	0x08011ec9
 8011ef0:	08011ec9 	.word	0x08011ec9
 8011ef4:	08011ec9 	.word	0x08011ec9
 8011ef8:	08011f4d 	.word	0x08011f4d
 8011efc:	08011ec9 	.word	0x08011ec9
 8011f00:	08011ec9 	.word	0x08011ec9
 8011f04:	08011ec9 	.word	0x08011ec9
 8011f08:	08011ec9 	.word	0x08011ec9
 8011f0c:	08012059 	.word	0x08012059
 8011f10:	08011f7d 	.word	0x08011f7d
 8011f14:	0801203b 	.word	0x0801203b
 8011f18:	08011ec9 	.word	0x08011ec9
 8011f1c:	08011ec9 	.word	0x08011ec9
 8011f20:	0801207b 	.word	0x0801207b
 8011f24:	08011ec9 	.word	0x08011ec9
 8011f28:	08011f7d 	.word	0x08011f7d
 8011f2c:	08011ec9 	.word	0x08011ec9
 8011f30:	08011ec9 	.word	0x08011ec9
 8011f34:	08012043 	.word	0x08012043
 8011f38:	682b      	ldr	r3, [r5, #0]
 8011f3a:	1d1a      	adds	r2, r3, #4
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	602a      	str	r2, [r5, #0]
 8011f40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011f48:	2301      	movs	r3, #1
 8011f4a:	e0a3      	b.n	8012094 <_printf_i+0x1f4>
 8011f4c:	6820      	ldr	r0, [r4, #0]
 8011f4e:	6829      	ldr	r1, [r5, #0]
 8011f50:	0606      	lsls	r6, r0, #24
 8011f52:	f101 0304 	add.w	r3, r1, #4
 8011f56:	d50a      	bpl.n	8011f6e <_printf_i+0xce>
 8011f58:	680e      	ldr	r6, [r1, #0]
 8011f5a:	602b      	str	r3, [r5, #0]
 8011f5c:	2e00      	cmp	r6, #0
 8011f5e:	da03      	bge.n	8011f68 <_printf_i+0xc8>
 8011f60:	232d      	movs	r3, #45	; 0x2d
 8011f62:	4276      	negs	r6, r6
 8011f64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f68:	485e      	ldr	r0, [pc, #376]	; (80120e4 <_printf_i+0x244>)
 8011f6a:	230a      	movs	r3, #10
 8011f6c:	e019      	b.n	8011fa2 <_printf_i+0x102>
 8011f6e:	680e      	ldr	r6, [r1, #0]
 8011f70:	602b      	str	r3, [r5, #0]
 8011f72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011f76:	bf18      	it	ne
 8011f78:	b236      	sxthne	r6, r6
 8011f7a:	e7ef      	b.n	8011f5c <_printf_i+0xbc>
 8011f7c:	682b      	ldr	r3, [r5, #0]
 8011f7e:	6820      	ldr	r0, [r4, #0]
 8011f80:	1d19      	adds	r1, r3, #4
 8011f82:	6029      	str	r1, [r5, #0]
 8011f84:	0601      	lsls	r1, r0, #24
 8011f86:	d501      	bpl.n	8011f8c <_printf_i+0xec>
 8011f88:	681e      	ldr	r6, [r3, #0]
 8011f8a:	e002      	b.n	8011f92 <_printf_i+0xf2>
 8011f8c:	0646      	lsls	r6, r0, #25
 8011f8e:	d5fb      	bpl.n	8011f88 <_printf_i+0xe8>
 8011f90:	881e      	ldrh	r6, [r3, #0]
 8011f92:	4854      	ldr	r0, [pc, #336]	; (80120e4 <_printf_i+0x244>)
 8011f94:	2f6f      	cmp	r7, #111	; 0x6f
 8011f96:	bf0c      	ite	eq
 8011f98:	2308      	moveq	r3, #8
 8011f9a:	230a      	movne	r3, #10
 8011f9c:	2100      	movs	r1, #0
 8011f9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011fa2:	6865      	ldr	r5, [r4, #4]
 8011fa4:	60a5      	str	r5, [r4, #8]
 8011fa6:	2d00      	cmp	r5, #0
 8011fa8:	bfa2      	ittt	ge
 8011faa:	6821      	ldrge	r1, [r4, #0]
 8011fac:	f021 0104 	bicge.w	r1, r1, #4
 8011fb0:	6021      	strge	r1, [r4, #0]
 8011fb2:	b90e      	cbnz	r6, 8011fb8 <_printf_i+0x118>
 8011fb4:	2d00      	cmp	r5, #0
 8011fb6:	d04d      	beq.n	8012054 <_printf_i+0x1b4>
 8011fb8:	4615      	mov	r5, r2
 8011fba:	fbb6 f1f3 	udiv	r1, r6, r3
 8011fbe:	fb03 6711 	mls	r7, r3, r1, r6
 8011fc2:	5dc7      	ldrb	r7, [r0, r7]
 8011fc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011fc8:	4637      	mov	r7, r6
 8011fca:	42bb      	cmp	r3, r7
 8011fcc:	460e      	mov	r6, r1
 8011fce:	d9f4      	bls.n	8011fba <_printf_i+0x11a>
 8011fd0:	2b08      	cmp	r3, #8
 8011fd2:	d10b      	bne.n	8011fec <_printf_i+0x14c>
 8011fd4:	6823      	ldr	r3, [r4, #0]
 8011fd6:	07de      	lsls	r6, r3, #31
 8011fd8:	d508      	bpl.n	8011fec <_printf_i+0x14c>
 8011fda:	6923      	ldr	r3, [r4, #16]
 8011fdc:	6861      	ldr	r1, [r4, #4]
 8011fde:	4299      	cmp	r1, r3
 8011fe0:	bfde      	ittt	le
 8011fe2:	2330      	movle	r3, #48	; 0x30
 8011fe4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011fe8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011fec:	1b52      	subs	r2, r2, r5
 8011fee:	6122      	str	r2, [r4, #16]
 8011ff0:	f8cd a000 	str.w	sl, [sp]
 8011ff4:	464b      	mov	r3, r9
 8011ff6:	aa03      	add	r2, sp, #12
 8011ff8:	4621      	mov	r1, r4
 8011ffa:	4640      	mov	r0, r8
 8011ffc:	f7ff fee2 	bl	8011dc4 <_printf_common>
 8012000:	3001      	adds	r0, #1
 8012002:	d14c      	bne.n	801209e <_printf_i+0x1fe>
 8012004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012008:	b004      	add	sp, #16
 801200a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801200e:	4835      	ldr	r0, [pc, #212]	; (80120e4 <_printf_i+0x244>)
 8012010:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012014:	6829      	ldr	r1, [r5, #0]
 8012016:	6823      	ldr	r3, [r4, #0]
 8012018:	f851 6b04 	ldr.w	r6, [r1], #4
 801201c:	6029      	str	r1, [r5, #0]
 801201e:	061d      	lsls	r5, r3, #24
 8012020:	d514      	bpl.n	801204c <_printf_i+0x1ac>
 8012022:	07df      	lsls	r7, r3, #31
 8012024:	bf44      	itt	mi
 8012026:	f043 0320 	orrmi.w	r3, r3, #32
 801202a:	6023      	strmi	r3, [r4, #0]
 801202c:	b91e      	cbnz	r6, 8012036 <_printf_i+0x196>
 801202e:	6823      	ldr	r3, [r4, #0]
 8012030:	f023 0320 	bic.w	r3, r3, #32
 8012034:	6023      	str	r3, [r4, #0]
 8012036:	2310      	movs	r3, #16
 8012038:	e7b0      	b.n	8011f9c <_printf_i+0xfc>
 801203a:	6823      	ldr	r3, [r4, #0]
 801203c:	f043 0320 	orr.w	r3, r3, #32
 8012040:	6023      	str	r3, [r4, #0]
 8012042:	2378      	movs	r3, #120	; 0x78
 8012044:	4828      	ldr	r0, [pc, #160]	; (80120e8 <_printf_i+0x248>)
 8012046:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801204a:	e7e3      	b.n	8012014 <_printf_i+0x174>
 801204c:	0659      	lsls	r1, r3, #25
 801204e:	bf48      	it	mi
 8012050:	b2b6      	uxthmi	r6, r6
 8012052:	e7e6      	b.n	8012022 <_printf_i+0x182>
 8012054:	4615      	mov	r5, r2
 8012056:	e7bb      	b.n	8011fd0 <_printf_i+0x130>
 8012058:	682b      	ldr	r3, [r5, #0]
 801205a:	6826      	ldr	r6, [r4, #0]
 801205c:	6961      	ldr	r1, [r4, #20]
 801205e:	1d18      	adds	r0, r3, #4
 8012060:	6028      	str	r0, [r5, #0]
 8012062:	0635      	lsls	r5, r6, #24
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	d501      	bpl.n	801206c <_printf_i+0x1cc>
 8012068:	6019      	str	r1, [r3, #0]
 801206a:	e002      	b.n	8012072 <_printf_i+0x1d2>
 801206c:	0670      	lsls	r0, r6, #25
 801206e:	d5fb      	bpl.n	8012068 <_printf_i+0x1c8>
 8012070:	8019      	strh	r1, [r3, #0]
 8012072:	2300      	movs	r3, #0
 8012074:	6123      	str	r3, [r4, #16]
 8012076:	4615      	mov	r5, r2
 8012078:	e7ba      	b.n	8011ff0 <_printf_i+0x150>
 801207a:	682b      	ldr	r3, [r5, #0]
 801207c:	1d1a      	adds	r2, r3, #4
 801207e:	602a      	str	r2, [r5, #0]
 8012080:	681d      	ldr	r5, [r3, #0]
 8012082:	6862      	ldr	r2, [r4, #4]
 8012084:	2100      	movs	r1, #0
 8012086:	4628      	mov	r0, r5
 8012088:	f7ee f8c2 	bl	8000210 <memchr>
 801208c:	b108      	cbz	r0, 8012092 <_printf_i+0x1f2>
 801208e:	1b40      	subs	r0, r0, r5
 8012090:	6060      	str	r0, [r4, #4]
 8012092:	6863      	ldr	r3, [r4, #4]
 8012094:	6123      	str	r3, [r4, #16]
 8012096:	2300      	movs	r3, #0
 8012098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801209c:	e7a8      	b.n	8011ff0 <_printf_i+0x150>
 801209e:	6923      	ldr	r3, [r4, #16]
 80120a0:	462a      	mov	r2, r5
 80120a2:	4649      	mov	r1, r9
 80120a4:	4640      	mov	r0, r8
 80120a6:	47d0      	blx	sl
 80120a8:	3001      	adds	r0, #1
 80120aa:	d0ab      	beq.n	8012004 <_printf_i+0x164>
 80120ac:	6823      	ldr	r3, [r4, #0]
 80120ae:	079b      	lsls	r3, r3, #30
 80120b0:	d413      	bmi.n	80120da <_printf_i+0x23a>
 80120b2:	68e0      	ldr	r0, [r4, #12]
 80120b4:	9b03      	ldr	r3, [sp, #12]
 80120b6:	4298      	cmp	r0, r3
 80120b8:	bfb8      	it	lt
 80120ba:	4618      	movlt	r0, r3
 80120bc:	e7a4      	b.n	8012008 <_printf_i+0x168>
 80120be:	2301      	movs	r3, #1
 80120c0:	4632      	mov	r2, r6
 80120c2:	4649      	mov	r1, r9
 80120c4:	4640      	mov	r0, r8
 80120c6:	47d0      	blx	sl
 80120c8:	3001      	adds	r0, #1
 80120ca:	d09b      	beq.n	8012004 <_printf_i+0x164>
 80120cc:	3501      	adds	r5, #1
 80120ce:	68e3      	ldr	r3, [r4, #12]
 80120d0:	9903      	ldr	r1, [sp, #12]
 80120d2:	1a5b      	subs	r3, r3, r1
 80120d4:	42ab      	cmp	r3, r5
 80120d6:	dcf2      	bgt.n	80120be <_printf_i+0x21e>
 80120d8:	e7eb      	b.n	80120b2 <_printf_i+0x212>
 80120da:	2500      	movs	r5, #0
 80120dc:	f104 0619 	add.w	r6, r4, #25
 80120e0:	e7f5      	b.n	80120ce <_printf_i+0x22e>
 80120e2:	bf00      	nop
 80120e4:	080142d2 	.word	0x080142d2
 80120e8:	080142e3 	.word	0x080142e3

080120ec <iprintf>:
 80120ec:	b40f      	push	{r0, r1, r2, r3}
 80120ee:	4b0a      	ldr	r3, [pc, #40]	; (8012118 <iprintf+0x2c>)
 80120f0:	b513      	push	{r0, r1, r4, lr}
 80120f2:	681c      	ldr	r4, [r3, #0]
 80120f4:	b124      	cbz	r4, 8012100 <iprintf+0x14>
 80120f6:	69a3      	ldr	r3, [r4, #24]
 80120f8:	b913      	cbnz	r3, 8012100 <iprintf+0x14>
 80120fa:	4620      	mov	r0, r4
 80120fc:	f000 ff0e 	bl	8012f1c <__sinit>
 8012100:	ab05      	add	r3, sp, #20
 8012102:	9a04      	ldr	r2, [sp, #16]
 8012104:	68a1      	ldr	r1, [r4, #8]
 8012106:	9301      	str	r3, [sp, #4]
 8012108:	4620      	mov	r0, r4
 801210a:	f001 fba1 	bl	8013850 <_vfiprintf_r>
 801210e:	b002      	add	sp, #8
 8012110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012114:	b004      	add	sp, #16
 8012116:	4770      	bx	lr
 8012118:	2000018c 	.word	0x2000018c

0801211c <_sbrk_r>:
 801211c:	b538      	push	{r3, r4, r5, lr}
 801211e:	4d06      	ldr	r5, [pc, #24]	; (8012138 <_sbrk_r+0x1c>)
 8012120:	2300      	movs	r3, #0
 8012122:	4604      	mov	r4, r0
 8012124:	4608      	mov	r0, r1
 8012126:	602b      	str	r3, [r5, #0]
 8012128:	f001 ffe8 	bl	80140fc <_sbrk>
 801212c:	1c43      	adds	r3, r0, #1
 801212e:	d102      	bne.n	8012136 <_sbrk_r+0x1a>
 8012130:	682b      	ldr	r3, [r5, #0]
 8012132:	b103      	cbz	r3, 8012136 <_sbrk_r+0x1a>
 8012134:	6023      	str	r3, [r4, #0]
 8012136:	bd38      	pop	{r3, r4, r5, pc}
 8012138:	200029ac 	.word	0x200029ac

0801213c <__assert_func>:
 801213c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801213e:	4614      	mov	r4, r2
 8012140:	461a      	mov	r2, r3
 8012142:	4b09      	ldr	r3, [pc, #36]	; (8012168 <__assert_func+0x2c>)
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	4605      	mov	r5, r0
 8012148:	68d8      	ldr	r0, [r3, #12]
 801214a:	b14c      	cbz	r4, 8012160 <__assert_func+0x24>
 801214c:	4b07      	ldr	r3, [pc, #28]	; (801216c <__assert_func+0x30>)
 801214e:	9100      	str	r1, [sp, #0]
 8012150:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012154:	4906      	ldr	r1, [pc, #24]	; (8012170 <__assert_func+0x34>)
 8012156:	462b      	mov	r3, r5
 8012158:	f000 ff5e 	bl	8013018 <fiprintf>
 801215c:	f001 fdcc 	bl	8013cf8 <abort>
 8012160:	4b04      	ldr	r3, [pc, #16]	; (8012174 <__assert_func+0x38>)
 8012162:	461c      	mov	r4, r3
 8012164:	e7f3      	b.n	801214e <__assert_func+0x12>
 8012166:	bf00      	nop
 8012168:	2000018c 	.word	0x2000018c
 801216c:	080142f4 	.word	0x080142f4
 8012170:	08014301 	.word	0x08014301
 8012174:	0801432f 	.word	0x0801432f

08012178 <quorem>:
 8012178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801217c:	6903      	ldr	r3, [r0, #16]
 801217e:	690c      	ldr	r4, [r1, #16]
 8012180:	42a3      	cmp	r3, r4
 8012182:	4607      	mov	r7, r0
 8012184:	f2c0 8081 	blt.w	801228a <quorem+0x112>
 8012188:	3c01      	subs	r4, #1
 801218a:	f101 0814 	add.w	r8, r1, #20
 801218e:	f100 0514 	add.w	r5, r0, #20
 8012192:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012196:	9301      	str	r3, [sp, #4]
 8012198:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801219c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80121a0:	3301      	adds	r3, #1
 80121a2:	429a      	cmp	r2, r3
 80121a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80121a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80121ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80121b0:	d331      	bcc.n	8012216 <quorem+0x9e>
 80121b2:	f04f 0e00 	mov.w	lr, #0
 80121b6:	4640      	mov	r0, r8
 80121b8:	46ac      	mov	ip, r5
 80121ba:	46f2      	mov	sl, lr
 80121bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80121c0:	b293      	uxth	r3, r2
 80121c2:	fb06 e303 	mla	r3, r6, r3, lr
 80121c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80121ca:	b29b      	uxth	r3, r3
 80121cc:	ebaa 0303 	sub.w	r3, sl, r3
 80121d0:	f8dc a000 	ldr.w	sl, [ip]
 80121d4:	0c12      	lsrs	r2, r2, #16
 80121d6:	fa13 f38a 	uxtah	r3, r3, sl
 80121da:	fb06 e202 	mla	r2, r6, r2, lr
 80121de:	9300      	str	r3, [sp, #0]
 80121e0:	9b00      	ldr	r3, [sp, #0]
 80121e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80121e6:	b292      	uxth	r2, r2
 80121e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80121ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80121f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80121f4:	4581      	cmp	r9, r0
 80121f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80121fa:	f84c 3b04 	str.w	r3, [ip], #4
 80121fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012202:	d2db      	bcs.n	80121bc <quorem+0x44>
 8012204:	f855 300b 	ldr.w	r3, [r5, fp]
 8012208:	b92b      	cbnz	r3, 8012216 <quorem+0x9e>
 801220a:	9b01      	ldr	r3, [sp, #4]
 801220c:	3b04      	subs	r3, #4
 801220e:	429d      	cmp	r5, r3
 8012210:	461a      	mov	r2, r3
 8012212:	d32e      	bcc.n	8012272 <quorem+0xfa>
 8012214:	613c      	str	r4, [r7, #16]
 8012216:	4638      	mov	r0, r7
 8012218:	f001 f9d8 	bl	80135cc <__mcmp>
 801221c:	2800      	cmp	r0, #0
 801221e:	db24      	blt.n	801226a <quorem+0xf2>
 8012220:	3601      	adds	r6, #1
 8012222:	4628      	mov	r0, r5
 8012224:	f04f 0c00 	mov.w	ip, #0
 8012228:	f858 2b04 	ldr.w	r2, [r8], #4
 801222c:	f8d0 e000 	ldr.w	lr, [r0]
 8012230:	b293      	uxth	r3, r2
 8012232:	ebac 0303 	sub.w	r3, ip, r3
 8012236:	0c12      	lsrs	r2, r2, #16
 8012238:	fa13 f38e 	uxtah	r3, r3, lr
 801223c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012240:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012244:	b29b      	uxth	r3, r3
 8012246:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801224a:	45c1      	cmp	r9, r8
 801224c:	f840 3b04 	str.w	r3, [r0], #4
 8012250:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012254:	d2e8      	bcs.n	8012228 <quorem+0xb0>
 8012256:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801225a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801225e:	b922      	cbnz	r2, 801226a <quorem+0xf2>
 8012260:	3b04      	subs	r3, #4
 8012262:	429d      	cmp	r5, r3
 8012264:	461a      	mov	r2, r3
 8012266:	d30a      	bcc.n	801227e <quorem+0x106>
 8012268:	613c      	str	r4, [r7, #16]
 801226a:	4630      	mov	r0, r6
 801226c:	b003      	add	sp, #12
 801226e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012272:	6812      	ldr	r2, [r2, #0]
 8012274:	3b04      	subs	r3, #4
 8012276:	2a00      	cmp	r2, #0
 8012278:	d1cc      	bne.n	8012214 <quorem+0x9c>
 801227a:	3c01      	subs	r4, #1
 801227c:	e7c7      	b.n	801220e <quorem+0x96>
 801227e:	6812      	ldr	r2, [r2, #0]
 8012280:	3b04      	subs	r3, #4
 8012282:	2a00      	cmp	r2, #0
 8012284:	d1f0      	bne.n	8012268 <quorem+0xf0>
 8012286:	3c01      	subs	r4, #1
 8012288:	e7eb      	b.n	8012262 <quorem+0xea>
 801228a:	2000      	movs	r0, #0
 801228c:	e7ee      	b.n	801226c <quorem+0xf4>
	...

08012290 <_dtoa_r>:
 8012290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012294:	ed2d 8b04 	vpush	{d8-d9}
 8012298:	ec57 6b10 	vmov	r6, r7, d0
 801229c:	b093      	sub	sp, #76	; 0x4c
 801229e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80122a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80122a4:	9106      	str	r1, [sp, #24]
 80122a6:	ee10 aa10 	vmov	sl, s0
 80122aa:	4604      	mov	r4, r0
 80122ac:	9209      	str	r2, [sp, #36]	; 0x24
 80122ae:	930c      	str	r3, [sp, #48]	; 0x30
 80122b0:	46bb      	mov	fp, r7
 80122b2:	b975      	cbnz	r5, 80122d2 <_dtoa_r+0x42>
 80122b4:	2010      	movs	r0, #16
 80122b6:	f7ff f9b1 	bl	801161c <malloc>
 80122ba:	4602      	mov	r2, r0
 80122bc:	6260      	str	r0, [r4, #36]	; 0x24
 80122be:	b920      	cbnz	r0, 80122ca <_dtoa_r+0x3a>
 80122c0:	4ba7      	ldr	r3, [pc, #668]	; (8012560 <_dtoa_r+0x2d0>)
 80122c2:	21ea      	movs	r1, #234	; 0xea
 80122c4:	48a7      	ldr	r0, [pc, #668]	; (8012564 <_dtoa_r+0x2d4>)
 80122c6:	f7ff ff39 	bl	801213c <__assert_func>
 80122ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80122ce:	6005      	str	r5, [r0, #0]
 80122d0:	60c5      	str	r5, [r0, #12]
 80122d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80122d4:	6819      	ldr	r1, [r3, #0]
 80122d6:	b151      	cbz	r1, 80122ee <_dtoa_r+0x5e>
 80122d8:	685a      	ldr	r2, [r3, #4]
 80122da:	604a      	str	r2, [r1, #4]
 80122dc:	2301      	movs	r3, #1
 80122de:	4093      	lsls	r3, r2
 80122e0:	608b      	str	r3, [r1, #8]
 80122e2:	4620      	mov	r0, r4
 80122e4:	f000 ff30 	bl	8013148 <_Bfree>
 80122e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80122ea:	2200      	movs	r2, #0
 80122ec:	601a      	str	r2, [r3, #0]
 80122ee:	1e3b      	subs	r3, r7, #0
 80122f0:	bfaa      	itet	ge
 80122f2:	2300      	movge	r3, #0
 80122f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80122f8:	f8c8 3000 	strge.w	r3, [r8]
 80122fc:	4b9a      	ldr	r3, [pc, #616]	; (8012568 <_dtoa_r+0x2d8>)
 80122fe:	bfbc      	itt	lt
 8012300:	2201      	movlt	r2, #1
 8012302:	f8c8 2000 	strlt.w	r2, [r8]
 8012306:	ea33 030b 	bics.w	r3, r3, fp
 801230a:	d11b      	bne.n	8012344 <_dtoa_r+0xb4>
 801230c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801230e:	f242 730f 	movw	r3, #9999	; 0x270f
 8012312:	6013      	str	r3, [r2, #0]
 8012314:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012318:	4333      	orrs	r3, r6
 801231a:	f000 8592 	beq.w	8012e42 <_dtoa_r+0xbb2>
 801231e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012320:	b963      	cbnz	r3, 801233c <_dtoa_r+0xac>
 8012322:	4b92      	ldr	r3, [pc, #584]	; (801256c <_dtoa_r+0x2dc>)
 8012324:	e022      	b.n	801236c <_dtoa_r+0xdc>
 8012326:	4b92      	ldr	r3, [pc, #584]	; (8012570 <_dtoa_r+0x2e0>)
 8012328:	9301      	str	r3, [sp, #4]
 801232a:	3308      	adds	r3, #8
 801232c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801232e:	6013      	str	r3, [r2, #0]
 8012330:	9801      	ldr	r0, [sp, #4]
 8012332:	b013      	add	sp, #76	; 0x4c
 8012334:	ecbd 8b04 	vpop	{d8-d9}
 8012338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801233c:	4b8b      	ldr	r3, [pc, #556]	; (801256c <_dtoa_r+0x2dc>)
 801233e:	9301      	str	r3, [sp, #4]
 8012340:	3303      	adds	r3, #3
 8012342:	e7f3      	b.n	801232c <_dtoa_r+0x9c>
 8012344:	2200      	movs	r2, #0
 8012346:	2300      	movs	r3, #0
 8012348:	4650      	mov	r0, sl
 801234a:	4659      	mov	r1, fp
 801234c:	f7ee fbd4 	bl	8000af8 <__aeabi_dcmpeq>
 8012350:	ec4b ab19 	vmov	d9, sl, fp
 8012354:	4680      	mov	r8, r0
 8012356:	b158      	cbz	r0, 8012370 <_dtoa_r+0xe0>
 8012358:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801235a:	2301      	movs	r3, #1
 801235c:	6013      	str	r3, [r2, #0]
 801235e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012360:	2b00      	cmp	r3, #0
 8012362:	f000 856b 	beq.w	8012e3c <_dtoa_r+0xbac>
 8012366:	4883      	ldr	r0, [pc, #524]	; (8012574 <_dtoa_r+0x2e4>)
 8012368:	6018      	str	r0, [r3, #0]
 801236a:	1e43      	subs	r3, r0, #1
 801236c:	9301      	str	r3, [sp, #4]
 801236e:	e7df      	b.n	8012330 <_dtoa_r+0xa0>
 8012370:	ec4b ab10 	vmov	d0, sl, fp
 8012374:	aa10      	add	r2, sp, #64	; 0x40
 8012376:	a911      	add	r1, sp, #68	; 0x44
 8012378:	4620      	mov	r0, r4
 801237a:	f001 f9cd 	bl	8013718 <__d2b>
 801237e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8012382:	ee08 0a10 	vmov	s16, r0
 8012386:	2d00      	cmp	r5, #0
 8012388:	f000 8084 	beq.w	8012494 <_dtoa_r+0x204>
 801238c:	ee19 3a90 	vmov	r3, s19
 8012390:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012394:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012398:	4656      	mov	r6, sl
 801239a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801239e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80123a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80123a6:	4b74      	ldr	r3, [pc, #464]	; (8012578 <_dtoa_r+0x2e8>)
 80123a8:	2200      	movs	r2, #0
 80123aa:	4630      	mov	r0, r6
 80123ac:	4639      	mov	r1, r7
 80123ae:	f7ed ff83 	bl	80002b8 <__aeabi_dsub>
 80123b2:	a365      	add	r3, pc, #404	; (adr r3, 8012548 <_dtoa_r+0x2b8>)
 80123b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123b8:	f7ee f936 	bl	8000628 <__aeabi_dmul>
 80123bc:	a364      	add	r3, pc, #400	; (adr r3, 8012550 <_dtoa_r+0x2c0>)
 80123be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c2:	f7ed ff7b 	bl	80002bc <__adddf3>
 80123c6:	4606      	mov	r6, r0
 80123c8:	4628      	mov	r0, r5
 80123ca:	460f      	mov	r7, r1
 80123cc:	f7ee f8c2 	bl	8000554 <__aeabi_i2d>
 80123d0:	a361      	add	r3, pc, #388	; (adr r3, 8012558 <_dtoa_r+0x2c8>)
 80123d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123d6:	f7ee f927 	bl	8000628 <__aeabi_dmul>
 80123da:	4602      	mov	r2, r0
 80123dc:	460b      	mov	r3, r1
 80123de:	4630      	mov	r0, r6
 80123e0:	4639      	mov	r1, r7
 80123e2:	f7ed ff6b 	bl	80002bc <__adddf3>
 80123e6:	4606      	mov	r6, r0
 80123e8:	460f      	mov	r7, r1
 80123ea:	f7ee fbcd 	bl	8000b88 <__aeabi_d2iz>
 80123ee:	2200      	movs	r2, #0
 80123f0:	9000      	str	r0, [sp, #0]
 80123f2:	2300      	movs	r3, #0
 80123f4:	4630      	mov	r0, r6
 80123f6:	4639      	mov	r1, r7
 80123f8:	f7ee fb88 	bl	8000b0c <__aeabi_dcmplt>
 80123fc:	b150      	cbz	r0, 8012414 <_dtoa_r+0x184>
 80123fe:	9800      	ldr	r0, [sp, #0]
 8012400:	f7ee f8a8 	bl	8000554 <__aeabi_i2d>
 8012404:	4632      	mov	r2, r6
 8012406:	463b      	mov	r3, r7
 8012408:	f7ee fb76 	bl	8000af8 <__aeabi_dcmpeq>
 801240c:	b910      	cbnz	r0, 8012414 <_dtoa_r+0x184>
 801240e:	9b00      	ldr	r3, [sp, #0]
 8012410:	3b01      	subs	r3, #1
 8012412:	9300      	str	r3, [sp, #0]
 8012414:	9b00      	ldr	r3, [sp, #0]
 8012416:	2b16      	cmp	r3, #22
 8012418:	d85a      	bhi.n	80124d0 <_dtoa_r+0x240>
 801241a:	9a00      	ldr	r2, [sp, #0]
 801241c:	4b57      	ldr	r3, [pc, #348]	; (801257c <_dtoa_r+0x2ec>)
 801241e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012426:	ec51 0b19 	vmov	r0, r1, d9
 801242a:	f7ee fb6f 	bl	8000b0c <__aeabi_dcmplt>
 801242e:	2800      	cmp	r0, #0
 8012430:	d050      	beq.n	80124d4 <_dtoa_r+0x244>
 8012432:	9b00      	ldr	r3, [sp, #0]
 8012434:	3b01      	subs	r3, #1
 8012436:	9300      	str	r3, [sp, #0]
 8012438:	2300      	movs	r3, #0
 801243a:	930b      	str	r3, [sp, #44]	; 0x2c
 801243c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801243e:	1b5d      	subs	r5, r3, r5
 8012440:	1e6b      	subs	r3, r5, #1
 8012442:	9305      	str	r3, [sp, #20]
 8012444:	bf45      	ittet	mi
 8012446:	f1c5 0301 	rsbmi	r3, r5, #1
 801244a:	9304      	strmi	r3, [sp, #16]
 801244c:	2300      	movpl	r3, #0
 801244e:	2300      	movmi	r3, #0
 8012450:	bf4c      	ite	mi
 8012452:	9305      	strmi	r3, [sp, #20]
 8012454:	9304      	strpl	r3, [sp, #16]
 8012456:	9b00      	ldr	r3, [sp, #0]
 8012458:	2b00      	cmp	r3, #0
 801245a:	db3d      	blt.n	80124d8 <_dtoa_r+0x248>
 801245c:	9b05      	ldr	r3, [sp, #20]
 801245e:	9a00      	ldr	r2, [sp, #0]
 8012460:	920a      	str	r2, [sp, #40]	; 0x28
 8012462:	4413      	add	r3, r2
 8012464:	9305      	str	r3, [sp, #20]
 8012466:	2300      	movs	r3, #0
 8012468:	9307      	str	r3, [sp, #28]
 801246a:	9b06      	ldr	r3, [sp, #24]
 801246c:	2b09      	cmp	r3, #9
 801246e:	f200 8089 	bhi.w	8012584 <_dtoa_r+0x2f4>
 8012472:	2b05      	cmp	r3, #5
 8012474:	bfc4      	itt	gt
 8012476:	3b04      	subgt	r3, #4
 8012478:	9306      	strgt	r3, [sp, #24]
 801247a:	9b06      	ldr	r3, [sp, #24]
 801247c:	f1a3 0302 	sub.w	r3, r3, #2
 8012480:	bfcc      	ite	gt
 8012482:	2500      	movgt	r5, #0
 8012484:	2501      	movle	r5, #1
 8012486:	2b03      	cmp	r3, #3
 8012488:	f200 8087 	bhi.w	801259a <_dtoa_r+0x30a>
 801248c:	e8df f003 	tbb	[pc, r3]
 8012490:	59383a2d 	.word	0x59383a2d
 8012494:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012498:	441d      	add	r5, r3
 801249a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801249e:	2b20      	cmp	r3, #32
 80124a0:	bfc1      	itttt	gt
 80124a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80124a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80124aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80124ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80124b2:	bfda      	itte	le
 80124b4:	f1c3 0320 	rsble	r3, r3, #32
 80124b8:	fa06 f003 	lslle.w	r0, r6, r3
 80124bc:	4318      	orrgt	r0, r3
 80124be:	f7ee f839 	bl	8000534 <__aeabi_ui2d>
 80124c2:	2301      	movs	r3, #1
 80124c4:	4606      	mov	r6, r0
 80124c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80124ca:	3d01      	subs	r5, #1
 80124cc:	930e      	str	r3, [sp, #56]	; 0x38
 80124ce:	e76a      	b.n	80123a6 <_dtoa_r+0x116>
 80124d0:	2301      	movs	r3, #1
 80124d2:	e7b2      	b.n	801243a <_dtoa_r+0x1aa>
 80124d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80124d6:	e7b1      	b.n	801243c <_dtoa_r+0x1ac>
 80124d8:	9b04      	ldr	r3, [sp, #16]
 80124da:	9a00      	ldr	r2, [sp, #0]
 80124dc:	1a9b      	subs	r3, r3, r2
 80124de:	9304      	str	r3, [sp, #16]
 80124e0:	4253      	negs	r3, r2
 80124e2:	9307      	str	r3, [sp, #28]
 80124e4:	2300      	movs	r3, #0
 80124e6:	930a      	str	r3, [sp, #40]	; 0x28
 80124e8:	e7bf      	b.n	801246a <_dtoa_r+0x1da>
 80124ea:	2300      	movs	r3, #0
 80124ec:	9308      	str	r3, [sp, #32]
 80124ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	dc55      	bgt.n	80125a0 <_dtoa_r+0x310>
 80124f4:	2301      	movs	r3, #1
 80124f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80124fa:	461a      	mov	r2, r3
 80124fc:	9209      	str	r2, [sp, #36]	; 0x24
 80124fe:	e00c      	b.n	801251a <_dtoa_r+0x28a>
 8012500:	2301      	movs	r3, #1
 8012502:	e7f3      	b.n	80124ec <_dtoa_r+0x25c>
 8012504:	2300      	movs	r3, #0
 8012506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012508:	9308      	str	r3, [sp, #32]
 801250a:	9b00      	ldr	r3, [sp, #0]
 801250c:	4413      	add	r3, r2
 801250e:	9302      	str	r3, [sp, #8]
 8012510:	3301      	adds	r3, #1
 8012512:	2b01      	cmp	r3, #1
 8012514:	9303      	str	r3, [sp, #12]
 8012516:	bfb8      	it	lt
 8012518:	2301      	movlt	r3, #1
 801251a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801251c:	2200      	movs	r2, #0
 801251e:	6042      	str	r2, [r0, #4]
 8012520:	2204      	movs	r2, #4
 8012522:	f102 0614 	add.w	r6, r2, #20
 8012526:	429e      	cmp	r6, r3
 8012528:	6841      	ldr	r1, [r0, #4]
 801252a:	d93d      	bls.n	80125a8 <_dtoa_r+0x318>
 801252c:	4620      	mov	r0, r4
 801252e:	f000 fdcb 	bl	80130c8 <_Balloc>
 8012532:	9001      	str	r0, [sp, #4]
 8012534:	2800      	cmp	r0, #0
 8012536:	d13b      	bne.n	80125b0 <_dtoa_r+0x320>
 8012538:	4b11      	ldr	r3, [pc, #68]	; (8012580 <_dtoa_r+0x2f0>)
 801253a:	4602      	mov	r2, r0
 801253c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012540:	e6c0      	b.n	80122c4 <_dtoa_r+0x34>
 8012542:	2301      	movs	r3, #1
 8012544:	e7df      	b.n	8012506 <_dtoa_r+0x276>
 8012546:	bf00      	nop
 8012548:	636f4361 	.word	0x636f4361
 801254c:	3fd287a7 	.word	0x3fd287a7
 8012550:	8b60c8b3 	.word	0x8b60c8b3
 8012554:	3fc68a28 	.word	0x3fc68a28
 8012558:	509f79fb 	.word	0x509f79fb
 801255c:	3fd34413 	.word	0x3fd34413
 8012560:	0801443e 	.word	0x0801443e
 8012564:	08014455 	.word	0x08014455
 8012568:	7ff00000 	.word	0x7ff00000
 801256c:	0801443a 	.word	0x0801443a
 8012570:	08014431 	.word	0x08014431
 8012574:	080142d1 	.word	0x080142d1
 8012578:	3ff80000 	.word	0x3ff80000
 801257c:	080145b8 	.word	0x080145b8
 8012580:	080144b0 	.word	0x080144b0
 8012584:	2501      	movs	r5, #1
 8012586:	2300      	movs	r3, #0
 8012588:	9306      	str	r3, [sp, #24]
 801258a:	9508      	str	r5, [sp, #32]
 801258c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012590:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012594:	2200      	movs	r2, #0
 8012596:	2312      	movs	r3, #18
 8012598:	e7b0      	b.n	80124fc <_dtoa_r+0x26c>
 801259a:	2301      	movs	r3, #1
 801259c:	9308      	str	r3, [sp, #32]
 801259e:	e7f5      	b.n	801258c <_dtoa_r+0x2fc>
 80125a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80125a6:	e7b8      	b.n	801251a <_dtoa_r+0x28a>
 80125a8:	3101      	adds	r1, #1
 80125aa:	6041      	str	r1, [r0, #4]
 80125ac:	0052      	lsls	r2, r2, #1
 80125ae:	e7b8      	b.n	8012522 <_dtoa_r+0x292>
 80125b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80125b2:	9a01      	ldr	r2, [sp, #4]
 80125b4:	601a      	str	r2, [r3, #0]
 80125b6:	9b03      	ldr	r3, [sp, #12]
 80125b8:	2b0e      	cmp	r3, #14
 80125ba:	f200 809d 	bhi.w	80126f8 <_dtoa_r+0x468>
 80125be:	2d00      	cmp	r5, #0
 80125c0:	f000 809a 	beq.w	80126f8 <_dtoa_r+0x468>
 80125c4:	9b00      	ldr	r3, [sp, #0]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	dd32      	ble.n	8012630 <_dtoa_r+0x3a0>
 80125ca:	4ab7      	ldr	r2, [pc, #732]	; (80128a8 <_dtoa_r+0x618>)
 80125cc:	f003 030f 	and.w	r3, r3, #15
 80125d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80125d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80125d8:	9b00      	ldr	r3, [sp, #0]
 80125da:	05d8      	lsls	r0, r3, #23
 80125dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80125e0:	d516      	bpl.n	8012610 <_dtoa_r+0x380>
 80125e2:	4bb2      	ldr	r3, [pc, #712]	; (80128ac <_dtoa_r+0x61c>)
 80125e4:	ec51 0b19 	vmov	r0, r1, d9
 80125e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80125ec:	f7ee f946 	bl	800087c <__aeabi_ddiv>
 80125f0:	f007 070f 	and.w	r7, r7, #15
 80125f4:	4682      	mov	sl, r0
 80125f6:	468b      	mov	fp, r1
 80125f8:	2503      	movs	r5, #3
 80125fa:	4eac      	ldr	r6, [pc, #688]	; (80128ac <_dtoa_r+0x61c>)
 80125fc:	b957      	cbnz	r7, 8012614 <_dtoa_r+0x384>
 80125fe:	4642      	mov	r2, r8
 8012600:	464b      	mov	r3, r9
 8012602:	4650      	mov	r0, sl
 8012604:	4659      	mov	r1, fp
 8012606:	f7ee f939 	bl	800087c <__aeabi_ddiv>
 801260a:	4682      	mov	sl, r0
 801260c:	468b      	mov	fp, r1
 801260e:	e028      	b.n	8012662 <_dtoa_r+0x3d2>
 8012610:	2502      	movs	r5, #2
 8012612:	e7f2      	b.n	80125fa <_dtoa_r+0x36a>
 8012614:	07f9      	lsls	r1, r7, #31
 8012616:	d508      	bpl.n	801262a <_dtoa_r+0x39a>
 8012618:	4640      	mov	r0, r8
 801261a:	4649      	mov	r1, r9
 801261c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012620:	f7ee f802 	bl	8000628 <__aeabi_dmul>
 8012624:	3501      	adds	r5, #1
 8012626:	4680      	mov	r8, r0
 8012628:	4689      	mov	r9, r1
 801262a:	107f      	asrs	r7, r7, #1
 801262c:	3608      	adds	r6, #8
 801262e:	e7e5      	b.n	80125fc <_dtoa_r+0x36c>
 8012630:	f000 809b 	beq.w	801276a <_dtoa_r+0x4da>
 8012634:	9b00      	ldr	r3, [sp, #0]
 8012636:	4f9d      	ldr	r7, [pc, #628]	; (80128ac <_dtoa_r+0x61c>)
 8012638:	425e      	negs	r6, r3
 801263a:	4b9b      	ldr	r3, [pc, #620]	; (80128a8 <_dtoa_r+0x618>)
 801263c:	f006 020f 	and.w	r2, r6, #15
 8012640:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012648:	ec51 0b19 	vmov	r0, r1, d9
 801264c:	f7ed ffec 	bl	8000628 <__aeabi_dmul>
 8012650:	1136      	asrs	r6, r6, #4
 8012652:	4682      	mov	sl, r0
 8012654:	468b      	mov	fp, r1
 8012656:	2300      	movs	r3, #0
 8012658:	2502      	movs	r5, #2
 801265a:	2e00      	cmp	r6, #0
 801265c:	d17a      	bne.n	8012754 <_dtoa_r+0x4c4>
 801265e:	2b00      	cmp	r3, #0
 8012660:	d1d3      	bne.n	801260a <_dtoa_r+0x37a>
 8012662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012664:	2b00      	cmp	r3, #0
 8012666:	f000 8082 	beq.w	801276e <_dtoa_r+0x4de>
 801266a:	4b91      	ldr	r3, [pc, #580]	; (80128b0 <_dtoa_r+0x620>)
 801266c:	2200      	movs	r2, #0
 801266e:	4650      	mov	r0, sl
 8012670:	4659      	mov	r1, fp
 8012672:	f7ee fa4b 	bl	8000b0c <__aeabi_dcmplt>
 8012676:	2800      	cmp	r0, #0
 8012678:	d079      	beq.n	801276e <_dtoa_r+0x4de>
 801267a:	9b03      	ldr	r3, [sp, #12]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d076      	beq.n	801276e <_dtoa_r+0x4de>
 8012680:	9b02      	ldr	r3, [sp, #8]
 8012682:	2b00      	cmp	r3, #0
 8012684:	dd36      	ble.n	80126f4 <_dtoa_r+0x464>
 8012686:	9b00      	ldr	r3, [sp, #0]
 8012688:	4650      	mov	r0, sl
 801268a:	4659      	mov	r1, fp
 801268c:	1e5f      	subs	r7, r3, #1
 801268e:	2200      	movs	r2, #0
 8012690:	4b88      	ldr	r3, [pc, #544]	; (80128b4 <_dtoa_r+0x624>)
 8012692:	f7ed ffc9 	bl	8000628 <__aeabi_dmul>
 8012696:	9e02      	ldr	r6, [sp, #8]
 8012698:	4682      	mov	sl, r0
 801269a:	468b      	mov	fp, r1
 801269c:	3501      	adds	r5, #1
 801269e:	4628      	mov	r0, r5
 80126a0:	f7ed ff58 	bl	8000554 <__aeabi_i2d>
 80126a4:	4652      	mov	r2, sl
 80126a6:	465b      	mov	r3, fp
 80126a8:	f7ed ffbe 	bl	8000628 <__aeabi_dmul>
 80126ac:	4b82      	ldr	r3, [pc, #520]	; (80128b8 <_dtoa_r+0x628>)
 80126ae:	2200      	movs	r2, #0
 80126b0:	f7ed fe04 	bl	80002bc <__adddf3>
 80126b4:	46d0      	mov	r8, sl
 80126b6:	46d9      	mov	r9, fp
 80126b8:	4682      	mov	sl, r0
 80126ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80126be:	2e00      	cmp	r6, #0
 80126c0:	d158      	bne.n	8012774 <_dtoa_r+0x4e4>
 80126c2:	4b7e      	ldr	r3, [pc, #504]	; (80128bc <_dtoa_r+0x62c>)
 80126c4:	2200      	movs	r2, #0
 80126c6:	4640      	mov	r0, r8
 80126c8:	4649      	mov	r1, r9
 80126ca:	f7ed fdf5 	bl	80002b8 <__aeabi_dsub>
 80126ce:	4652      	mov	r2, sl
 80126d0:	465b      	mov	r3, fp
 80126d2:	4680      	mov	r8, r0
 80126d4:	4689      	mov	r9, r1
 80126d6:	f7ee fa37 	bl	8000b48 <__aeabi_dcmpgt>
 80126da:	2800      	cmp	r0, #0
 80126dc:	f040 8295 	bne.w	8012c0a <_dtoa_r+0x97a>
 80126e0:	4652      	mov	r2, sl
 80126e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80126e6:	4640      	mov	r0, r8
 80126e8:	4649      	mov	r1, r9
 80126ea:	f7ee fa0f 	bl	8000b0c <__aeabi_dcmplt>
 80126ee:	2800      	cmp	r0, #0
 80126f0:	f040 8289 	bne.w	8012c06 <_dtoa_r+0x976>
 80126f4:	ec5b ab19 	vmov	sl, fp, d9
 80126f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	f2c0 8148 	blt.w	8012990 <_dtoa_r+0x700>
 8012700:	9a00      	ldr	r2, [sp, #0]
 8012702:	2a0e      	cmp	r2, #14
 8012704:	f300 8144 	bgt.w	8012990 <_dtoa_r+0x700>
 8012708:	4b67      	ldr	r3, [pc, #412]	; (80128a8 <_dtoa_r+0x618>)
 801270a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801270e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012714:	2b00      	cmp	r3, #0
 8012716:	f280 80d5 	bge.w	80128c4 <_dtoa_r+0x634>
 801271a:	9b03      	ldr	r3, [sp, #12]
 801271c:	2b00      	cmp	r3, #0
 801271e:	f300 80d1 	bgt.w	80128c4 <_dtoa_r+0x634>
 8012722:	f040 826f 	bne.w	8012c04 <_dtoa_r+0x974>
 8012726:	4b65      	ldr	r3, [pc, #404]	; (80128bc <_dtoa_r+0x62c>)
 8012728:	2200      	movs	r2, #0
 801272a:	4640      	mov	r0, r8
 801272c:	4649      	mov	r1, r9
 801272e:	f7ed ff7b 	bl	8000628 <__aeabi_dmul>
 8012732:	4652      	mov	r2, sl
 8012734:	465b      	mov	r3, fp
 8012736:	f7ee f9fd 	bl	8000b34 <__aeabi_dcmpge>
 801273a:	9e03      	ldr	r6, [sp, #12]
 801273c:	4637      	mov	r7, r6
 801273e:	2800      	cmp	r0, #0
 8012740:	f040 8245 	bne.w	8012bce <_dtoa_r+0x93e>
 8012744:	9d01      	ldr	r5, [sp, #4]
 8012746:	2331      	movs	r3, #49	; 0x31
 8012748:	f805 3b01 	strb.w	r3, [r5], #1
 801274c:	9b00      	ldr	r3, [sp, #0]
 801274e:	3301      	adds	r3, #1
 8012750:	9300      	str	r3, [sp, #0]
 8012752:	e240      	b.n	8012bd6 <_dtoa_r+0x946>
 8012754:	07f2      	lsls	r2, r6, #31
 8012756:	d505      	bpl.n	8012764 <_dtoa_r+0x4d4>
 8012758:	e9d7 2300 	ldrd	r2, r3, [r7]
 801275c:	f7ed ff64 	bl	8000628 <__aeabi_dmul>
 8012760:	3501      	adds	r5, #1
 8012762:	2301      	movs	r3, #1
 8012764:	1076      	asrs	r6, r6, #1
 8012766:	3708      	adds	r7, #8
 8012768:	e777      	b.n	801265a <_dtoa_r+0x3ca>
 801276a:	2502      	movs	r5, #2
 801276c:	e779      	b.n	8012662 <_dtoa_r+0x3d2>
 801276e:	9f00      	ldr	r7, [sp, #0]
 8012770:	9e03      	ldr	r6, [sp, #12]
 8012772:	e794      	b.n	801269e <_dtoa_r+0x40e>
 8012774:	9901      	ldr	r1, [sp, #4]
 8012776:	4b4c      	ldr	r3, [pc, #304]	; (80128a8 <_dtoa_r+0x618>)
 8012778:	4431      	add	r1, r6
 801277a:	910d      	str	r1, [sp, #52]	; 0x34
 801277c:	9908      	ldr	r1, [sp, #32]
 801277e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012782:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012786:	2900      	cmp	r1, #0
 8012788:	d043      	beq.n	8012812 <_dtoa_r+0x582>
 801278a:	494d      	ldr	r1, [pc, #308]	; (80128c0 <_dtoa_r+0x630>)
 801278c:	2000      	movs	r0, #0
 801278e:	f7ee f875 	bl	800087c <__aeabi_ddiv>
 8012792:	4652      	mov	r2, sl
 8012794:	465b      	mov	r3, fp
 8012796:	f7ed fd8f 	bl	80002b8 <__aeabi_dsub>
 801279a:	9d01      	ldr	r5, [sp, #4]
 801279c:	4682      	mov	sl, r0
 801279e:	468b      	mov	fp, r1
 80127a0:	4649      	mov	r1, r9
 80127a2:	4640      	mov	r0, r8
 80127a4:	f7ee f9f0 	bl	8000b88 <__aeabi_d2iz>
 80127a8:	4606      	mov	r6, r0
 80127aa:	f7ed fed3 	bl	8000554 <__aeabi_i2d>
 80127ae:	4602      	mov	r2, r0
 80127b0:	460b      	mov	r3, r1
 80127b2:	4640      	mov	r0, r8
 80127b4:	4649      	mov	r1, r9
 80127b6:	f7ed fd7f 	bl	80002b8 <__aeabi_dsub>
 80127ba:	3630      	adds	r6, #48	; 0x30
 80127bc:	f805 6b01 	strb.w	r6, [r5], #1
 80127c0:	4652      	mov	r2, sl
 80127c2:	465b      	mov	r3, fp
 80127c4:	4680      	mov	r8, r0
 80127c6:	4689      	mov	r9, r1
 80127c8:	f7ee f9a0 	bl	8000b0c <__aeabi_dcmplt>
 80127cc:	2800      	cmp	r0, #0
 80127ce:	d163      	bne.n	8012898 <_dtoa_r+0x608>
 80127d0:	4642      	mov	r2, r8
 80127d2:	464b      	mov	r3, r9
 80127d4:	4936      	ldr	r1, [pc, #216]	; (80128b0 <_dtoa_r+0x620>)
 80127d6:	2000      	movs	r0, #0
 80127d8:	f7ed fd6e 	bl	80002b8 <__aeabi_dsub>
 80127dc:	4652      	mov	r2, sl
 80127de:	465b      	mov	r3, fp
 80127e0:	f7ee f994 	bl	8000b0c <__aeabi_dcmplt>
 80127e4:	2800      	cmp	r0, #0
 80127e6:	f040 80b5 	bne.w	8012954 <_dtoa_r+0x6c4>
 80127ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80127ec:	429d      	cmp	r5, r3
 80127ee:	d081      	beq.n	80126f4 <_dtoa_r+0x464>
 80127f0:	4b30      	ldr	r3, [pc, #192]	; (80128b4 <_dtoa_r+0x624>)
 80127f2:	2200      	movs	r2, #0
 80127f4:	4650      	mov	r0, sl
 80127f6:	4659      	mov	r1, fp
 80127f8:	f7ed ff16 	bl	8000628 <__aeabi_dmul>
 80127fc:	4b2d      	ldr	r3, [pc, #180]	; (80128b4 <_dtoa_r+0x624>)
 80127fe:	4682      	mov	sl, r0
 8012800:	468b      	mov	fp, r1
 8012802:	4640      	mov	r0, r8
 8012804:	4649      	mov	r1, r9
 8012806:	2200      	movs	r2, #0
 8012808:	f7ed ff0e 	bl	8000628 <__aeabi_dmul>
 801280c:	4680      	mov	r8, r0
 801280e:	4689      	mov	r9, r1
 8012810:	e7c6      	b.n	80127a0 <_dtoa_r+0x510>
 8012812:	4650      	mov	r0, sl
 8012814:	4659      	mov	r1, fp
 8012816:	f7ed ff07 	bl	8000628 <__aeabi_dmul>
 801281a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801281c:	9d01      	ldr	r5, [sp, #4]
 801281e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012820:	4682      	mov	sl, r0
 8012822:	468b      	mov	fp, r1
 8012824:	4649      	mov	r1, r9
 8012826:	4640      	mov	r0, r8
 8012828:	f7ee f9ae 	bl	8000b88 <__aeabi_d2iz>
 801282c:	4606      	mov	r6, r0
 801282e:	f7ed fe91 	bl	8000554 <__aeabi_i2d>
 8012832:	3630      	adds	r6, #48	; 0x30
 8012834:	4602      	mov	r2, r0
 8012836:	460b      	mov	r3, r1
 8012838:	4640      	mov	r0, r8
 801283a:	4649      	mov	r1, r9
 801283c:	f7ed fd3c 	bl	80002b8 <__aeabi_dsub>
 8012840:	f805 6b01 	strb.w	r6, [r5], #1
 8012844:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012846:	429d      	cmp	r5, r3
 8012848:	4680      	mov	r8, r0
 801284a:	4689      	mov	r9, r1
 801284c:	f04f 0200 	mov.w	r2, #0
 8012850:	d124      	bne.n	801289c <_dtoa_r+0x60c>
 8012852:	4b1b      	ldr	r3, [pc, #108]	; (80128c0 <_dtoa_r+0x630>)
 8012854:	4650      	mov	r0, sl
 8012856:	4659      	mov	r1, fp
 8012858:	f7ed fd30 	bl	80002bc <__adddf3>
 801285c:	4602      	mov	r2, r0
 801285e:	460b      	mov	r3, r1
 8012860:	4640      	mov	r0, r8
 8012862:	4649      	mov	r1, r9
 8012864:	f7ee f970 	bl	8000b48 <__aeabi_dcmpgt>
 8012868:	2800      	cmp	r0, #0
 801286a:	d173      	bne.n	8012954 <_dtoa_r+0x6c4>
 801286c:	4652      	mov	r2, sl
 801286e:	465b      	mov	r3, fp
 8012870:	4913      	ldr	r1, [pc, #76]	; (80128c0 <_dtoa_r+0x630>)
 8012872:	2000      	movs	r0, #0
 8012874:	f7ed fd20 	bl	80002b8 <__aeabi_dsub>
 8012878:	4602      	mov	r2, r0
 801287a:	460b      	mov	r3, r1
 801287c:	4640      	mov	r0, r8
 801287e:	4649      	mov	r1, r9
 8012880:	f7ee f944 	bl	8000b0c <__aeabi_dcmplt>
 8012884:	2800      	cmp	r0, #0
 8012886:	f43f af35 	beq.w	80126f4 <_dtoa_r+0x464>
 801288a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801288c:	1e6b      	subs	r3, r5, #1
 801288e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012890:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012894:	2b30      	cmp	r3, #48	; 0x30
 8012896:	d0f8      	beq.n	801288a <_dtoa_r+0x5fa>
 8012898:	9700      	str	r7, [sp, #0]
 801289a:	e049      	b.n	8012930 <_dtoa_r+0x6a0>
 801289c:	4b05      	ldr	r3, [pc, #20]	; (80128b4 <_dtoa_r+0x624>)
 801289e:	f7ed fec3 	bl	8000628 <__aeabi_dmul>
 80128a2:	4680      	mov	r8, r0
 80128a4:	4689      	mov	r9, r1
 80128a6:	e7bd      	b.n	8012824 <_dtoa_r+0x594>
 80128a8:	080145b8 	.word	0x080145b8
 80128ac:	08014590 	.word	0x08014590
 80128b0:	3ff00000 	.word	0x3ff00000
 80128b4:	40240000 	.word	0x40240000
 80128b8:	401c0000 	.word	0x401c0000
 80128bc:	40140000 	.word	0x40140000
 80128c0:	3fe00000 	.word	0x3fe00000
 80128c4:	9d01      	ldr	r5, [sp, #4]
 80128c6:	4656      	mov	r6, sl
 80128c8:	465f      	mov	r7, fp
 80128ca:	4642      	mov	r2, r8
 80128cc:	464b      	mov	r3, r9
 80128ce:	4630      	mov	r0, r6
 80128d0:	4639      	mov	r1, r7
 80128d2:	f7ed ffd3 	bl	800087c <__aeabi_ddiv>
 80128d6:	f7ee f957 	bl	8000b88 <__aeabi_d2iz>
 80128da:	4682      	mov	sl, r0
 80128dc:	f7ed fe3a 	bl	8000554 <__aeabi_i2d>
 80128e0:	4642      	mov	r2, r8
 80128e2:	464b      	mov	r3, r9
 80128e4:	f7ed fea0 	bl	8000628 <__aeabi_dmul>
 80128e8:	4602      	mov	r2, r0
 80128ea:	460b      	mov	r3, r1
 80128ec:	4630      	mov	r0, r6
 80128ee:	4639      	mov	r1, r7
 80128f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80128f4:	f7ed fce0 	bl	80002b8 <__aeabi_dsub>
 80128f8:	f805 6b01 	strb.w	r6, [r5], #1
 80128fc:	9e01      	ldr	r6, [sp, #4]
 80128fe:	9f03      	ldr	r7, [sp, #12]
 8012900:	1bae      	subs	r6, r5, r6
 8012902:	42b7      	cmp	r7, r6
 8012904:	4602      	mov	r2, r0
 8012906:	460b      	mov	r3, r1
 8012908:	d135      	bne.n	8012976 <_dtoa_r+0x6e6>
 801290a:	f7ed fcd7 	bl	80002bc <__adddf3>
 801290e:	4642      	mov	r2, r8
 8012910:	464b      	mov	r3, r9
 8012912:	4606      	mov	r6, r0
 8012914:	460f      	mov	r7, r1
 8012916:	f7ee f917 	bl	8000b48 <__aeabi_dcmpgt>
 801291a:	b9d0      	cbnz	r0, 8012952 <_dtoa_r+0x6c2>
 801291c:	4642      	mov	r2, r8
 801291e:	464b      	mov	r3, r9
 8012920:	4630      	mov	r0, r6
 8012922:	4639      	mov	r1, r7
 8012924:	f7ee f8e8 	bl	8000af8 <__aeabi_dcmpeq>
 8012928:	b110      	cbz	r0, 8012930 <_dtoa_r+0x6a0>
 801292a:	f01a 0f01 	tst.w	sl, #1
 801292e:	d110      	bne.n	8012952 <_dtoa_r+0x6c2>
 8012930:	4620      	mov	r0, r4
 8012932:	ee18 1a10 	vmov	r1, s16
 8012936:	f000 fc07 	bl	8013148 <_Bfree>
 801293a:	2300      	movs	r3, #0
 801293c:	9800      	ldr	r0, [sp, #0]
 801293e:	702b      	strb	r3, [r5, #0]
 8012940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012942:	3001      	adds	r0, #1
 8012944:	6018      	str	r0, [r3, #0]
 8012946:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012948:	2b00      	cmp	r3, #0
 801294a:	f43f acf1 	beq.w	8012330 <_dtoa_r+0xa0>
 801294e:	601d      	str	r5, [r3, #0]
 8012950:	e4ee      	b.n	8012330 <_dtoa_r+0xa0>
 8012952:	9f00      	ldr	r7, [sp, #0]
 8012954:	462b      	mov	r3, r5
 8012956:	461d      	mov	r5, r3
 8012958:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801295c:	2a39      	cmp	r2, #57	; 0x39
 801295e:	d106      	bne.n	801296e <_dtoa_r+0x6de>
 8012960:	9a01      	ldr	r2, [sp, #4]
 8012962:	429a      	cmp	r2, r3
 8012964:	d1f7      	bne.n	8012956 <_dtoa_r+0x6c6>
 8012966:	9901      	ldr	r1, [sp, #4]
 8012968:	2230      	movs	r2, #48	; 0x30
 801296a:	3701      	adds	r7, #1
 801296c:	700a      	strb	r2, [r1, #0]
 801296e:	781a      	ldrb	r2, [r3, #0]
 8012970:	3201      	adds	r2, #1
 8012972:	701a      	strb	r2, [r3, #0]
 8012974:	e790      	b.n	8012898 <_dtoa_r+0x608>
 8012976:	4ba6      	ldr	r3, [pc, #664]	; (8012c10 <_dtoa_r+0x980>)
 8012978:	2200      	movs	r2, #0
 801297a:	f7ed fe55 	bl	8000628 <__aeabi_dmul>
 801297e:	2200      	movs	r2, #0
 8012980:	2300      	movs	r3, #0
 8012982:	4606      	mov	r6, r0
 8012984:	460f      	mov	r7, r1
 8012986:	f7ee f8b7 	bl	8000af8 <__aeabi_dcmpeq>
 801298a:	2800      	cmp	r0, #0
 801298c:	d09d      	beq.n	80128ca <_dtoa_r+0x63a>
 801298e:	e7cf      	b.n	8012930 <_dtoa_r+0x6a0>
 8012990:	9a08      	ldr	r2, [sp, #32]
 8012992:	2a00      	cmp	r2, #0
 8012994:	f000 80d7 	beq.w	8012b46 <_dtoa_r+0x8b6>
 8012998:	9a06      	ldr	r2, [sp, #24]
 801299a:	2a01      	cmp	r2, #1
 801299c:	f300 80ba 	bgt.w	8012b14 <_dtoa_r+0x884>
 80129a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80129a2:	2a00      	cmp	r2, #0
 80129a4:	f000 80b2 	beq.w	8012b0c <_dtoa_r+0x87c>
 80129a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80129ac:	9e07      	ldr	r6, [sp, #28]
 80129ae:	9d04      	ldr	r5, [sp, #16]
 80129b0:	9a04      	ldr	r2, [sp, #16]
 80129b2:	441a      	add	r2, r3
 80129b4:	9204      	str	r2, [sp, #16]
 80129b6:	9a05      	ldr	r2, [sp, #20]
 80129b8:	2101      	movs	r1, #1
 80129ba:	441a      	add	r2, r3
 80129bc:	4620      	mov	r0, r4
 80129be:	9205      	str	r2, [sp, #20]
 80129c0:	f000 fc7a 	bl	80132b8 <__i2b>
 80129c4:	4607      	mov	r7, r0
 80129c6:	2d00      	cmp	r5, #0
 80129c8:	dd0c      	ble.n	80129e4 <_dtoa_r+0x754>
 80129ca:	9b05      	ldr	r3, [sp, #20]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	dd09      	ble.n	80129e4 <_dtoa_r+0x754>
 80129d0:	42ab      	cmp	r3, r5
 80129d2:	9a04      	ldr	r2, [sp, #16]
 80129d4:	bfa8      	it	ge
 80129d6:	462b      	movge	r3, r5
 80129d8:	1ad2      	subs	r2, r2, r3
 80129da:	9204      	str	r2, [sp, #16]
 80129dc:	9a05      	ldr	r2, [sp, #20]
 80129de:	1aed      	subs	r5, r5, r3
 80129e0:	1ad3      	subs	r3, r2, r3
 80129e2:	9305      	str	r3, [sp, #20]
 80129e4:	9b07      	ldr	r3, [sp, #28]
 80129e6:	b31b      	cbz	r3, 8012a30 <_dtoa_r+0x7a0>
 80129e8:	9b08      	ldr	r3, [sp, #32]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	f000 80af 	beq.w	8012b4e <_dtoa_r+0x8be>
 80129f0:	2e00      	cmp	r6, #0
 80129f2:	dd13      	ble.n	8012a1c <_dtoa_r+0x78c>
 80129f4:	4639      	mov	r1, r7
 80129f6:	4632      	mov	r2, r6
 80129f8:	4620      	mov	r0, r4
 80129fa:	f000 fd1d 	bl	8013438 <__pow5mult>
 80129fe:	ee18 2a10 	vmov	r2, s16
 8012a02:	4601      	mov	r1, r0
 8012a04:	4607      	mov	r7, r0
 8012a06:	4620      	mov	r0, r4
 8012a08:	f000 fc6c 	bl	80132e4 <__multiply>
 8012a0c:	ee18 1a10 	vmov	r1, s16
 8012a10:	4680      	mov	r8, r0
 8012a12:	4620      	mov	r0, r4
 8012a14:	f000 fb98 	bl	8013148 <_Bfree>
 8012a18:	ee08 8a10 	vmov	s16, r8
 8012a1c:	9b07      	ldr	r3, [sp, #28]
 8012a1e:	1b9a      	subs	r2, r3, r6
 8012a20:	d006      	beq.n	8012a30 <_dtoa_r+0x7a0>
 8012a22:	ee18 1a10 	vmov	r1, s16
 8012a26:	4620      	mov	r0, r4
 8012a28:	f000 fd06 	bl	8013438 <__pow5mult>
 8012a2c:	ee08 0a10 	vmov	s16, r0
 8012a30:	2101      	movs	r1, #1
 8012a32:	4620      	mov	r0, r4
 8012a34:	f000 fc40 	bl	80132b8 <__i2b>
 8012a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	4606      	mov	r6, r0
 8012a3e:	f340 8088 	ble.w	8012b52 <_dtoa_r+0x8c2>
 8012a42:	461a      	mov	r2, r3
 8012a44:	4601      	mov	r1, r0
 8012a46:	4620      	mov	r0, r4
 8012a48:	f000 fcf6 	bl	8013438 <__pow5mult>
 8012a4c:	9b06      	ldr	r3, [sp, #24]
 8012a4e:	2b01      	cmp	r3, #1
 8012a50:	4606      	mov	r6, r0
 8012a52:	f340 8081 	ble.w	8012b58 <_dtoa_r+0x8c8>
 8012a56:	f04f 0800 	mov.w	r8, #0
 8012a5a:	6933      	ldr	r3, [r6, #16]
 8012a5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012a60:	6918      	ldr	r0, [r3, #16]
 8012a62:	f000 fbd9 	bl	8013218 <__hi0bits>
 8012a66:	f1c0 0020 	rsb	r0, r0, #32
 8012a6a:	9b05      	ldr	r3, [sp, #20]
 8012a6c:	4418      	add	r0, r3
 8012a6e:	f010 001f 	ands.w	r0, r0, #31
 8012a72:	f000 8092 	beq.w	8012b9a <_dtoa_r+0x90a>
 8012a76:	f1c0 0320 	rsb	r3, r0, #32
 8012a7a:	2b04      	cmp	r3, #4
 8012a7c:	f340 808a 	ble.w	8012b94 <_dtoa_r+0x904>
 8012a80:	f1c0 001c 	rsb	r0, r0, #28
 8012a84:	9b04      	ldr	r3, [sp, #16]
 8012a86:	4403      	add	r3, r0
 8012a88:	9304      	str	r3, [sp, #16]
 8012a8a:	9b05      	ldr	r3, [sp, #20]
 8012a8c:	4403      	add	r3, r0
 8012a8e:	4405      	add	r5, r0
 8012a90:	9305      	str	r3, [sp, #20]
 8012a92:	9b04      	ldr	r3, [sp, #16]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	dd07      	ble.n	8012aa8 <_dtoa_r+0x818>
 8012a98:	ee18 1a10 	vmov	r1, s16
 8012a9c:	461a      	mov	r2, r3
 8012a9e:	4620      	mov	r0, r4
 8012aa0:	f000 fd24 	bl	80134ec <__lshift>
 8012aa4:	ee08 0a10 	vmov	s16, r0
 8012aa8:	9b05      	ldr	r3, [sp, #20]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	dd05      	ble.n	8012aba <_dtoa_r+0x82a>
 8012aae:	4631      	mov	r1, r6
 8012ab0:	461a      	mov	r2, r3
 8012ab2:	4620      	mov	r0, r4
 8012ab4:	f000 fd1a 	bl	80134ec <__lshift>
 8012ab8:	4606      	mov	r6, r0
 8012aba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d06e      	beq.n	8012b9e <_dtoa_r+0x90e>
 8012ac0:	ee18 0a10 	vmov	r0, s16
 8012ac4:	4631      	mov	r1, r6
 8012ac6:	f000 fd81 	bl	80135cc <__mcmp>
 8012aca:	2800      	cmp	r0, #0
 8012acc:	da67      	bge.n	8012b9e <_dtoa_r+0x90e>
 8012ace:	9b00      	ldr	r3, [sp, #0]
 8012ad0:	3b01      	subs	r3, #1
 8012ad2:	ee18 1a10 	vmov	r1, s16
 8012ad6:	9300      	str	r3, [sp, #0]
 8012ad8:	220a      	movs	r2, #10
 8012ada:	2300      	movs	r3, #0
 8012adc:	4620      	mov	r0, r4
 8012ade:	f000 fb55 	bl	801318c <__multadd>
 8012ae2:	9b08      	ldr	r3, [sp, #32]
 8012ae4:	ee08 0a10 	vmov	s16, r0
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	f000 81b1 	beq.w	8012e50 <_dtoa_r+0xbc0>
 8012aee:	2300      	movs	r3, #0
 8012af0:	4639      	mov	r1, r7
 8012af2:	220a      	movs	r2, #10
 8012af4:	4620      	mov	r0, r4
 8012af6:	f000 fb49 	bl	801318c <__multadd>
 8012afa:	9b02      	ldr	r3, [sp, #8]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	4607      	mov	r7, r0
 8012b00:	f300 808e 	bgt.w	8012c20 <_dtoa_r+0x990>
 8012b04:	9b06      	ldr	r3, [sp, #24]
 8012b06:	2b02      	cmp	r3, #2
 8012b08:	dc51      	bgt.n	8012bae <_dtoa_r+0x91e>
 8012b0a:	e089      	b.n	8012c20 <_dtoa_r+0x990>
 8012b0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012b0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012b12:	e74b      	b.n	80129ac <_dtoa_r+0x71c>
 8012b14:	9b03      	ldr	r3, [sp, #12]
 8012b16:	1e5e      	subs	r6, r3, #1
 8012b18:	9b07      	ldr	r3, [sp, #28]
 8012b1a:	42b3      	cmp	r3, r6
 8012b1c:	bfbf      	itttt	lt
 8012b1e:	9b07      	ldrlt	r3, [sp, #28]
 8012b20:	9607      	strlt	r6, [sp, #28]
 8012b22:	1af2      	sublt	r2, r6, r3
 8012b24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012b26:	bfb6      	itet	lt
 8012b28:	189b      	addlt	r3, r3, r2
 8012b2a:	1b9e      	subge	r6, r3, r6
 8012b2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8012b2e:	9b03      	ldr	r3, [sp, #12]
 8012b30:	bfb8      	it	lt
 8012b32:	2600      	movlt	r6, #0
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	bfb7      	itett	lt
 8012b38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8012b3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8012b40:	1a9d      	sublt	r5, r3, r2
 8012b42:	2300      	movlt	r3, #0
 8012b44:	e734      	b.n	80129b0 <_dtoa_r+0x720>
 8012b46:	9e07      	ldr	r6, [sp, #28]
 8012b48:	9d04      	ldr	r5, [sp, #16]
 8012b4a:	9f08      	ldr	r7, [sp, #32]
 8012b4c:	e73b      	b.n	80129c6 <_dtoa_r+0x736>
 8012b4e:	9a07      	ldr	r2, [sp, #28]
 8012b50:	e767      	b.n	8012a22 <_dtoa_r+0x792>
 8012b52:	9b06      	ldr	r3, [sp, #24]
 8012b54:	2b01      	cmp	r3, #1
 8012b56:	dc18      	bgt.n	8012b8a <_dtoa_r+0x8fa>
 8012b58:	f1ba 0f00 	cmp.w	sl, #0
 8012b5c:	d115      	bne.n	8012b8a <_dtoa_r+0x8fa>
 8012b5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012b62:	b993      	cbnz	r3, 8012b8a <_dtoa_r+0x8fa>
 8012b64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012b68:	0d1b      	lsrs	r3, r3, #20
 8012b6a:	051b      	lsls	r3, r3, #20
 8012b6c:	b183      	cbz	r3, 8012b90 <_dtoa_r+0x900>
 8012b6e:	9b04      	ldr	r3, [sp, #16]
 8012b70:	3301      	adds	r3, #1
 8012b72:	9304      	str	r3, [sp, #16]
 8012b74:	9b05      	ldr	r3, [sp, #20]
 8012b76:	3301      	adds	r3, #1
 8012b78:	9305      	str	r3, [sp, #20]
 8012b7a:	f04f 0801 	mov.w	r8, #1
 8012b7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	f47f af6a 	bne.w	8012a5a <_dtoa_r+0x7ca>
 8012b86:	2001      	movs	r0, #1
 8012b88:	e76f      	b.n	8012a6a <_dtoa_r+0x7da>
 8012b8a:	f04f 0800 	mov.w	r8, #0
 8012b8e:	e7f6      	b.n	8012b7e <_dtoa_r+0x8ee>
 8012b90:	4698      	mov	r8, r3
 8012b92:	e7f4      	b.n	8012b7e <_dtoa_r+0x8ee>
 8012b94:	f43f af7d 	beq.w	8012a92 <_dtoa_r+0x802>
 8012b98:	4618      	mov	r0, r3
 8012b9a:	301c      	adds	r0, #28
 8012b9c:	e772      	b.n	8012a84 <_dtoa_r+0x7f4>
 8012b9e:	9b03      	ldr	r3, [sp, #12]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	dc37      	bgt.n	8012c14 <_dtoa_r+0x984>
 8012ba4:	9b06      	ldr	r3, [sp, #24]
 8012ba6:	2b02      	cmp	r3, #2
 8012ba8:	dd34      	ble.n	8012c14 <_dtoa_r+0x984>
 8012baa:	9b03      	ldr	r3, [sp, #12]
 8012bac:	9302      	str	r3, [sp, #8]
 8012bae:	9b02      	ldr	r3, [sp, #8]
 8012bb0:	b96b      	cbnz	r3, 8012bce <_dtoa_r+0x93e>
 8012bb2:	4631      	mov	r1, r6
 8012bb4:	2205      	movs	r2, #5
 8012bb6:	4620      	mov	r0, r4
 8012bb8:	f000 fae8 	bl	801318c <__multadd>
 8012bbc:	4601      	mov	r1, r0
 8012bbe:	4606      	mov	r6, r0
 8012bc0:	ee18 0a10 	vmov	r0, s16
 8012bc4:	f000 fd02 	bl	80135cc <__mcmp>
 8012bc8:	2800      	cmp	r0, #0
 8012bca:	f73f adbb 	bgt.w	8012744 <_dtoa_r+0x4b4>
 8012bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bd0:	9d01      	ldr	r5, [sp, #4]
 8012bd2:	43db      	mvns	r3, r3
 8012bd4:	9300      	str	r3, [sp, #0]
 8012bd6:	f04f 0800 	mov.w	r8, #0
 8012bda:	4631      	mov	r1, r6
 8012bdc:	4620      	mov	r0, r4
 8012bde:	f000 fab3 	bl	8013148 <_Bfree>
 8012be2:	2f00      	cmp	r7, #0
 8012be4:	f43f aea4 	beq.w	8012930 <_dtoa_r+0x6a0>
 8012be8:	f1b8 0f00 	cmp.w	r8, #0
 8012bec:	d005      	beq.n	8012bfa <_dtoa_r+0x96a>
 8012bee:	45b8      	cmp	r8, r7
 8012bf0:	d003      	beq.n	8012bfa <_dtoa_r+0x96a>
 8012bf2:	4641      	mov	r1, r8
 8012bf4:	4620      	mov	r0, r4
 8012bf6:	f000 faa7 	bl	8013148 <_Bfree>
 8012bfa:	4639      	mov	r1, r7
 8012bfc:	4620      	mov	r0, r4
 8012bfe:	f000 faa3 	bl	8013148 <_Bfree>
 8012c02:	e695      	b.n	8012930 <_dtoa_r+0x6a0>
 8012c04:	2600      	movs	r6, #0
 8012c06:	4637      	mov	r7, r6
 8012c08:	e7e1      	b.n	8012bce <_dtoa_r+0x93e>
 8012c0a:	9700      	str	r7, [sp, #0]
 8012c0c:	4637      	mov	r7, r6
 8012c0e:	e599      	b.n	8012744 <_dtoa_r+0x4b4>
 8012c10:	40240000 	.word	0x40240000
 8012c14:	9b08      	ldr	r3, [sp, #32]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	f000 80ca 	beq.w	8012db0 <_dtoa_r+0xb20>
 8012c1c:	9b03      	ldr	r3, [sp, #12]
 8012c1e:	9302      	str	r3, [sp, #8]
 8012c20:	2d00      	cmp	r5, #0
 8012c22:	dd05      	ble.n	8012c30 <_dtoa_r+0x9a0>
 8012c24:	4639      	mov	r1, r7
 8012c26:	462a      	mov	r2, r5
 8012c28:	4620      	mov	r0, r4
 8012c2a:	f000 fc5f 	bl	80134ec <__lshift>
 8012c2e:	4607      	mov	r7, r0
 8012c30:	f1b8 0f00 	cmp.w	r8, #0
 8012c34:	d05b      	beq.n	8012cee <_dtoa_r+0xa5e>
 8012c36:	6879      	ldr	r1, [r7, #4]
 8012c38:	4620      	mov	r0, r4
 8012c3a:	f000 fa45 	bl	80130c8 <_Balloc>
 8012c3e:	4605      	mov	r5, r0
 8012c40:	b928      	cbnz	r0, 8012c4e <_dtoa_r+0x9be>
 8012c42:	4b87      	ldr	r3, [pc, #540]	; (8012e60 <_dtoa_r+0xbd0>)
 8012c44:	4602      	mov	r2, r0
 8012c46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012c4a:	f7ff bb3b 	b.w	80122c4 <_dtoa_r+0x34>
 8012c4e:	693a      	ldr	r2, [r7, #16]
 8012c50:	3202      	adds	r2, #2
 8012c52:	0092      	lsls	r2, r2, #2
 8012c54:	f107 010c 	add.w	r1, r7, #12
 8012c58:	300c      	adds	r0, #12
 8012c5a:	f7fe fce7 	bl	801162c <memcpy>
 8012c5e:	2201      	movs	r2, #1
 8012c60:	4629      	mov	r1, r5
 8012c62:	4620      	mov	r0, r4
 8012c64:	f000 fc42 	bl	80134ec <__lshift>
 8012c68:	9b01      	ldr	r3, [sp, #4]
 8012c6a:	f103 0901 	add.w	r9, r3, #1
 8012c6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8012c72:	4413      	add	r3, r2
 8012c74:	9305      	str	r3, [sp, #20]
 8012c76:	f00a 0301 	and.w	r3, sl, #1
 8012c7a:	46b8      	mov	r8, r7
 8012c7c:	9304      	str	r3, [sp, #16]
 8012c7e:	4607      	mov	r7, r0
 8012c80:	4631      	mov	r1, r6
 8012c82:	ee18 0a10 	vmov	r0, s16
 8012c86:	f7ff fa77 	bl	8012178 <quorem>
 8012c8a:	4641      	mov	r1, r8
 8012c8c:	9002      	str	r0, [sp, #8]
 8012c8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012c92:	ee18 0a10 	vmov	r0, s16
 8012c96:	f000 fc99 	bl	80135cc <__mcmp>
 8012c9a:	463a      	mov	r2, r7
 8012c9c:	9003      	str	r0, [sp, #12]
 8012c9e:	4631      	mov	r1, r6
 8012ca0:	4620      	mov	r0, r4
 8012ca2:	f000 fcaf 	bl	8013604 <__mdiff>
 8012ca6:	68c2      	ldr	r2, [r0, #12]
 8012ca8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8012cac:	4605      	mov	r5, r0
 8012cae:	bb02      	cbnz	r2, 8012cf2 <_dtoa_r+0xa62>
 8012cb0:	4601      	mov	r1, r0
 8012cb2:	ee18 0a10 	vmov	r0, s16
 8012cb6:	f000 fc89 	bl	80135cc <__mcmp>
 8012cba:	4602      	mov	r2, r0
 8012cbc:	4629      	mov	r1, r5
 8012cbe:	4620      	mov	r0, r4
 8012cc0:	9207      	str	r2, [sp, #28]
 8012cc2:	f000 fa41 	bl	8013148 <_Bfree>
 8012cc6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8012cca:	ea43 0102 	orr.w	r1, r3, r2
 8012cce:	9b04      	ldr	r3, [sp, #16]
 8012cd0:	430b      	orrs	r3, r1
 8012cd2:	464d      	mov	r5, r9
 8012cd4:	d10f      	bne.n	8012cf6 <_dtoa_r+0xa66>
 8012cd6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012cda:	d02a      	beq.n	8012d32 <_dtoa_r+0xaa2>
 8012cdc:	9b03      	ldr	r3, [sp, #12]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	dd02      	ble.n	8012ce8 <_dtoa_r+0xa58>
 8012ce2:	9b02      	ldr	r3, [sp, #8]
 8012ce4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8012ce8:	f88b a000 	strb.w	sl, [fp]
 8012cec:	e775      	b.n	8012bda <_dtoa_r+0x94a>
 8012cee:	4638      	mov	r0, r7
 8012cf0:	e7ba      	b.n	8012c68 <_dtoa_r+0x9d8>
 8012cf2:	2201      	movs	r2, #1
 8012cf4:	e7e2      	b.n	8012cbc <_dtoa_r+0xa2c>
 8012cf6:	9b03      	ldr	r3, [sp, #12]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	db04      	blt.n	8012d06 <_dtoa_r+0xa76>
 8012cfc:	9906      	ldr	r1, [sp, #24]
 8012cfe:	430b      	orrs	r3, r1
 8012d00:	9904      	ldr	r1, [sp, #16]
 8012d02:	430b      	orrs	r3, r1
 8012d04:	d122      	bne.n	8012d4c <_dtoa_r+0xabc>
 8012d06:	2a00      	cmp	r2, #0
 8012d08:	ddee      	ble.n	8012ce8 <_dtoa_r+0xa58>
 8012d0a:	ee18 1a10 	vmov	r1, s16
 8012d0e:	2201      	movs	r2, #1
 8012d10:	4620      	mov	r0, r4
 8012d12:	f000 fbeb 	bl	80134ec <__lshift>
 8012d16:	4631      	mov	r1, r6
 8012d18:	ee08 0a10 	vmov	s16, r0
 8012d1c:	f000 fc56 	bl	80135cc <__mcmp>
 8012d20:	2800      	cmp	r0, #0
 8012d22:	dc03      	bgt.n	8012d2c <_dtoa_r+0xa9c>
 8012d24:	d1e0      	bne.n	8012ce8 <_dtoa_r+0xa58>
 8012d26:	f01a 0f01 	tst.w	sl, #1
 8012d2a:	d0dd      	beq.n	8012ce8 <_dtoa_r+0xa58>
 8012d2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012d30:	d1d7      	bne.n	8012ce2 <_dtoa_r+0xa52>
 8012d32:	2339      	movs	r3, #57	; 0x39
 8012d34:	f88b 3000 	strb.w	r3, [fp]
 8012d38:	462b      	mov	r3, r5
 8012d3a:	461d      	mov	r5, r3
 8012d3c:	3b01      	subs	r3, #1
 8012d3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012d42:	2a39      	cmp	r2, #57	; 0x39
 8012d44:	d071      	beq.n	8012e2a <_dtoa_r+0xb9a>
 8012d46:	3201      	adds	r2, #1
 8012d48:	701a      	strb	r2, [r3, #0]
 8012d4a:	e746      	b.n	8012bda <_dtoa_r+0x94a>
 8012d4c:	2a00      	cmp	r2, #0
 8012d4e:	dd07      	ble.n	8012d60 <_dtoa_r+0xad0>
 8012d50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012d54:	d0ed      	beq.n	8012d32 <_dtoa_r+0xaa2>
 8012d56:	f10a 0301 	add.w	r3, sl, #1
 8012d5a:	f88b 3000 	strb.w	r3, [fp]
 8012d5e:	e73c      	b.n	8012bda <_dtoa_r+0x94a>
 8012d60:	9b05      	ldr	r3, [sp, #20]
 8012d62:	f809 ac01 	strb.w	sl, [r9, #-1]
 8012d66:	4599      	cmp	r9, r3
 8012d68:	d047      	beq.n	8012dfa <_dtoa_r+0xb6a>
 8012d6a:	ee18 1a10 	vmov	r1, s16
 8012d6e:	2300      	movs	r3, #0
 8012d70:	220a      	movs	r2, #10
 8012d72:	4620      	mov	r0, r4
 8012d74:	f000 fa0a 	bl	801318c <__multadd>
 8012d78:	45b8      	cmp	r8, r7
 8012d7a:	ee08 0a10 	vmov	s16, r0
 8012d7e:	f04f 0300 	mov.w	r3, #0
 8012d82:	f04f 020a 	mov.w	r2, #10
 8012d86:	4641      	mov	r1, r8
 8012d88:	4620      	mov	r0, r4
 8012d8a:	d106      	bne.n	8012d9a <_dtoa_r+0xb0a>
 8012d8c:	f000 f9fe 	bl	801318c <__multadd>
 8012d90:	4680      	mov	r8, r0
 8012d92:	4607      	mov	r7, r0
 8012d94:	f109 0901 	add.w	r9, r9, #1
 8012d98:	e772      	b.n	8012c80 <_dtoa_r+0x9f0>
 8012d9a:	f000 f9f7 	bl	801318c <__multadd>
 8012d9e:	4639      	mov	r1, r7
 8012da0:	4680      	mov	r8, r0
 8012da2:	2300      	movs	r3, #0
 8012da4:	220a      	movs	r2, #10
 8012da6:	4620      	mov	r0, r4
 8012da8:	f000 f9f0 	bl	801318c <__multadd>
 8012dac:	4607      	mov	r7, r0
 8012dae:	e7f1      	b.n	8012d94 <_dtoa_r+0xb04>
 8012db0:	9b03      	ldr	r3, [sp, #12]
 8012db2:	9302      	str	r3, [sp, #8]
 8012db4:	9d01      	ldr	r5, [sp, #4]
 8012db6:	ee18 0a10 	vmov	r0, s16
 8012dba:	4631      	mov	r1, r6
 8012dbc:	f7ff f9dc 	bl	8012178 <quorem>
 8012dc0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012dc4:	9b01      	ldr	r3, [sp, #4]
 8012dc6:	f805 ab01 	strb.w	sl, [r5], #1
 8012dca:	1aea      	subs	r2, r5, r3
 8012dcc:	9b02      	ldr	r3, [sp, #8]
 8012dce:	4293      	cmp	r3, r2
 8012dd0:	dd09      	ble.n	8012de6 <_dtoa_r+0xb56>
 8012dd2:	ee18 1a10 	vmov	r1, s16
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	220a      	movs	r2, #10
 8012dda:	4620      	mov	r0, r4
 8012ddc:	f000 f9d6 	bl	801318c <__multadd>
 8012de0:	ee08 0a10 	vmov	s16, r0
 8012de4:	e7e7      	b.n	8012db6 <_dtoa_r+0xb26>
 8012de6:	9b02      	ldr	r3, [sp, #8]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	bfc8      	it	gt
 8012dec:	461d      	movgt	r5, r3
 8012dee:	9b01      	ldr	r3, [sp, #4]
 8012df0:	bfd8      	it	le
 8012df2:	2501      	movle	r5, #1
 8012df4:	441d      	add	r5, r3
 8012df6:	f04f 0800 	mov.w	r8, #0
 8012dfa:	ee18 1a10 	vmov	r1, s16
 8012dfe:	2201      	movs	r2, #1
 8012e00:	4620      	mov	r0, r4
 8012e02:	f000 fb73 	bl	80134ec <__lshift>
 8012e06:	4631      	mov	r1, r6
 8012e08:	ee08 0a10 	vmov	s16, r0
 8012e0c:	f000 fbde 	bl	80135cc <__mcmp>
 8012e10:	2800      	cmp	r0, #0
 8012e12:	dc91      	bgt.n	8012d38 <_dtoa_r+0xaa8>
 8012e14:	d102      	bne.n	8012e1c <_dtoa_r+0xb8c>
 8012e16:	f01a 0f01 	tst.w	sl, #1
 8012e1a:	d18d      	bne.n	8012d38 <_dtoa_r+0xaa8>
 8012e1c:	462b      	mov	r3, r5
 8012e1e:	461d      	mov	r5, r3
 8012e20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012e24:	2a30      	cmp	r2, #48	; 0x30
 8012e26:	d0fa      	beq.n	8012e1e <_dtoa_r+0xb8e>
 8012e28:	e6d7      	b.n	8012bda <_dtoa_r+0x94a>
 8012e2a:	9a01      	ldr	r2, [sp, #4]
 8012e2c:	429a      	cmp	r2, r3
 8012e2e:	d184      	bne.n	8012d3a <_dtoa_r+0xaaa>
 8012e30:	9b00      	ldr	r3, [sp, #0]
 8012e32:	3301      	adds	r3, #1
 8012e34:	9300      	str	r3, [sp, #0]
 8012e36:	2331      	movs	r3, #49	; 0x31
 8012e38:	7013      	strb	r3, [r2, #0]
 8012e3a:	e6ce      	b.n	8012bda <_dtoa_r+0x94a>
 8012e3c:	4b09      	ldr	r3, [pc, #36]	; (8012e64 <_dtoa_r+0xbd4>)
 8012e3e:	f7ff ba95 	b.w	801236c <_dtoa_r+0xdc>
 8012e42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	f47f aa6e 	bne.w	8012326 <_dtoa_r+0x96>
 8012e4a:	4b07      	ldr	r3, [pc, #28]	; (8012e68 <_dtoa_r+0xbd8>)
 8012e4c:	f7ff ba8e 	b.w	801236c <_dtoa_r+0xdc>
 8012e50:	9b02      	ldr	r3, [sp, #8]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	dcae      	bgt.n	8012db4 <_dtoa_r+0xb24>
 8012e56:	9b06      	ldr	r3, [sp, #24]
 8012e58:	2b02      	cmp	r3, #2
 8012e5a:	f73f aea8 	bgt.w	8012bae <_dtoa_r+0x91e>
 8012e5e:	e7a9      	b.n	8012db4 <_dtoa_r+0xb24>
 8012e60:	080144b0 	.word	0x080144b0
 8012e64:	080142d0 	.word	0x080142d0
 8012e68:	08014431 	.word	0x08014431

08012e6c <std>:
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	b510      	push	{r4, lr}
 8012e70:	4604      	mov	r4, r0
 8012e72:	e9c0 3300 	strd	r3, r3, [r0]
 8012e76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012e7a:	6083      	str	r3, [r0, #8]
 8012e7c:	8181      	strh	r1, [r0, #12]
 8012e7e:	6643      	str	r3, [r0, #100]	; 0x64
 8012e80:	81c2      	strh	r2, [r0, #14]
 8012e82:	6183      	str	r3, [r0, #24]
 8012e84:	4619      	mov	r1, r3
 8012e86:	2208      	movs	r2, #8
 8012e88:	305c      	adds	r0, #92	; 0x5c
 8012e8a:	f7fe fbdd 	bl	8011648 <memset>
 8012e8e:	4b05      	ldr	r3, [pc, #20]	; (8012ea4 <std+0x38>)
 8012e90:	6263      	str	r3, [r4, #36]	; 0x24
 8012e92:	4b05      	ldr	r3, [pc, #20]	; (8012ea8 <std+0x3c>)
 8012e94:	62a3      	str	r3, [r4, #40]	; 0x28
 8012e96:	4b05      	ldr	r3, [pc, #20]	; (8012eac <std+0x40>)
 8012e98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012e9a:	4b05      	ldr	r3, [pc, #20]	; (8012eb0 <std+0x44>)
 8012e9c:	6224      	str	r4, [r4, #32]
 8012e9e:	6323      	str	r3, [r4, #48]	; 0x30
 8012ea0:	bd10      	pop	{r4, pc}
 8012ea2:	bf00      	nop
 8012ea4:	08013ab1 	.word	0x08013ab1
 8012ea8:	08013ad3 	.word	0x08013ad3
 8012eac:	08013b0b 	.word	0x08013b0b
 8012eb0:	08013b2f 	.word	0x08013b2f

08012eb4 <_cleanup_r>:
 8012eb4:	4901      	ldr	r1, [pc, #4]	; (8012ebc <_cleanup_r+0x8>)
 8012eb6:	f000 b8c1 	b.w	801303c <_fwalk_reent>
 8012eba:	bf00      	nop
 8012ebc:	08013e35 	.word	0x08013e35

08012ec0 <__sfmoreglue>:
 8012ec0:	b570      	push	{r4, r5, r6, lr}
 8012ec2:	2268      	movs	r2, #104	; 0x68
 8012ec4:	1e4d      	subs	r5, r1, #1
 8012ec6:	4355      	muls	r5, r2
 8012ec8:	460e      	mov	r6, r1
 8012eca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012ece:	f7fe fc2f 	bl	8011730 <_malloc_r>
 8012ed2:	4604      	mov	r4, r0
 8012ed4:	b140      	cbz	r0, 8012ee8 <__sfmoreglue+0x28>
 8012ed6:	2100      	movs	r1, #0
 8012ed8:	e9c0 1600 	strd	r1, r6, [r0]
 8012edc:	300c      	adds	r0, #12
 8012ede:	60a0      	str	r0, [r4, #8]
 8012ee0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012ee4:	f7fe fbb0 	bl	8011648 <memset>
 8012ee8:	4620      	mov	r0, r4
 8012eea:	bd70      	pop	{r4, r5, r6, pc}

08012eec <__sfp_lock_acquire>:
 8012eec:	4801      	ldr	r0, [pc, #4]	; (8012ef4 <__sfp_lock_acquire+0x8>)
 8012eee:	f000 b8ca 	b.w	8013086 <__retarget_lock_acquire_recursive>
 8012ef2:	bf00      	nop
 8012ef4:	200029a9 	.word	0x200029a9

08012ef8 <__sfp_lock_release>:
 8012ef8:	4801      	ldr	r0, [pc, #4]	; (8012f00 <__sfp_lock_release+0x8>)
 8012efa:	f000 b8c5 	b.w	8013088 <__retarget_lock_release_recursive>
 8012efe:	bf00      	nop
 8012f00:	200029a9 	.word	0x200029a9

08012f04 <__sinit_lock_acquire>:
 8012f04:	4801      	ldr	r0, [pc, #4]	; (8012f0c <__sinit_lock_acquire+0x8>)
 8012f06:	f000 b8be 	b.w	8013086 <__retarget_lock_acquire_recursive>
 8012f0a:	bf00      	nop
 8012f0c:	200029aa 	.word	0x200029aa

08012f10 <__sinit_lock_release>:
 8012f10:	4801      	ldr	r0, [pc, #4]	; (8012f18 <__sinit_lock_release+0x8>)
 8012f12:	f000 b8b9 	b.w	8013088 <__retarget_lock_release_recursive>
 8012f16:	bf00      	nop
 8012f18:	200029aa 	.word	0x200029aa

08012f1c <__sinit>:
 8012f1c:	b510      	push	{r4, lr}
 8012f1e:	4604      	mov	r4, r0
 8012f20:	f7ff fff0 	bl	8012f04 <__sinit_lock_acquire>
 8012f24:	69a3      	ldr	r3, [r4, #24]
 8012f26:	b11b      	cbz	r3, 8012f30 <__sinit+0x14>
 8012f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f2c:	f7ff bff0 	b.w	8012f10 <__sinit_lock_release>
 8012f30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012f34:	6523      	str	r3, [r4, #80]	; 0x50
 8012f36:	4b13      	ldr	r3, [pc, #76]	; (8012f84 <__sinit+0x68>)
 8012f38:	4a13      	ldr	r2, [pc, #76]	; (8012f88 <__sinit+0x6c>)
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8012f3e:	42a3      	cmp	r3, r4
 8012f40:	bf04      	itt	eq
 8012f42:	2301      	moveq	r3, #1
 8012f44:	61a3      	streq	r3, [r4, #24]
 8012f46:	4620      	mov	r0, r4
 8012f48:	f000 f820 	bl	8012f8c <__sfp>
 8012f4c:	6060      	str	r0, [r4, #4]
 8012f4e:	4620      	mov	r0, r4
 8012f50:	f000 f81c 	bl	8012f8c <__sfp>
 8012f54:	60a0      	str	r0, [r4, #8]
 8012f56:	4620      	mov	r0, r4
 8012f58:	f000 f818 	bl	8012f8c <__sfp>
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	60e0      	str	r0, [r4, #12]
 8012f60:	2104      	movs	r1, #4
 8012f62:	6860      	ldr	r0, [r4, #4]
 8012f64:	f7ff ff82 	bl	8012e6c <std>
 8012f68:	68a0      	ldr	r0, [r4, #8]
 8012f6a:	2201      	movs	r2, #1
 8012f6c:	2109      	movs	r1, #9
 8012f6e:	f7ff ff7d 	bl	8012e6c <std>
 8012f72:	68e0      	ldr	r0, [r4, #12]
 8012f74:	2202      	movs	r2, #2
 8012f76:	2112      	movs	r1, #18
 8012f78:	f7ff ff78 	bl	8012e6c <std>
 8012f7c:	2301      	movs	r3, #1
 8012f7e:	61a3      	str	r3, [r4, #24]
 8012f80:	e7d2      	b.n	8012f28 <__sinit+0xc>
 8012f82:	bf00      	nop
 8012f84:	080142bc 	.word	0x080142bc
 8012f88:	08012eb5 	.word	0x08012eb5

08012f8c <__sfp>:
 8012f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f8e:	4607      	mov	r7, r0
 8012f90:	f7ff ffac 	bl	8012eec <__sfp_lock_acquire>
 8012f94:	4b1e      	ldr	r3, [pc, #120]	; (8013010 <__sfp+0x84>)
 8012f96:	681e      	ldr	r6, [r3, #0]
 8012f98:	69b3      	ldr	r3, [r6, #24]
 8012f9a:	b913      	cbnz	r3, 8012fa2 <__sfp+0x16>
 8012f9c:	4630      	mov	r0, r6
 8012f9e:	f7ff ffbd 	bl	8012f1c <__sinit>
 8012fa2:	3648      	adds	r6, #72	; 0x48
 8012fa4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012fa8:	3b01      	subs	r3, #1
 8012faa:	d503      	bpl.n	8012fb4 <__sfp+0x28>
 8012fac:	6833      	ldr	r3, [r6, #0]
 8012fae:	b30b      	cbz	r3, 8012ff4 <__sfp+0x68>
 8012fb0:	6836      	ldr	r6, [r6, #0]
 8012fb2:	e7f7      	b.n	8012fa4 <__sfp+0x18>
 8012fb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012fb8:	b9d5      	cbnz	r5, 8012ff0 <__sfp+0x64>
 8012fba:	4b16      	ldr	r3, [pc, #88]	; (8013014 <__sfp+0x88>)
 8012fbc:	60e3      	str	r3, [r4, #12]
 8012fbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012fc2:	6665      	str	r5, [r4, #100]	; 0x64
 8012fc4:	f000 f85e 	bl	8013084 <__retarget_lock_init_recursive>
 8012fc8:	f7ff ff96 	bl	8012ef8 <__sfp_lock_release>
 8012fcc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012fd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012fd4:	6025      	str	r5, [r4, #0]
 8012fd6:	61a5      	str	r5, [r4, #24]
 8012fd8:	2208      	movs	r2, #8
 8012fda:	4629      	mov	r1, r5
 8012fdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012fe0:	f7fe fb32 	bl	8011648 <memset>
 8012fe4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012fe8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012fec:	4620      	mov	r0, r4
 8012fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ff0:	3468      	adds	r4, #104	; 0x68
 8012ff2:	e7d9      	b.n	8012fa8 <__sfp+0x1c>
 8012ff4:	2104      	movs	r1, #4
 8012ff6:	4638      	mov	r0, r7
 8012ff8:	f7ff ff62 	bl	8012ec0 <__sfmoreglue>
 8012ffc:	4604      	mov	r4, r0
 8012ffe:	6030      	str	r0, [r6, #0]
 8013000:	2800      	cmp	r0, #0
 8013002:	d1d5      	bne.n	8012fb0 <__sfp+0x24>
 8013004:	f7ff ff78 	bl	8012ef8 <__sfp_lock_release>
 8013008:	230c      	movs	r3, #12
 801300a:	603b      	str	r3, [r7, #0]
 801300c:	e7ee      	b.n	8012fec <__sfp+0x60>
 801300e:	bf00      	nop
 8013010:	080142bc 	.word	0x080142bc
 8013014:	ffff0001 	.word	0xffff0001

08013018 <fiprintf>:
 8013018:	b40e      	push	{r1, r2, r3}
 801301a:	b503      	push	{r0, r1, lr}
 801301c:	4601      	mov	r1, r0
 801301e:	ab03      	add	r3, sp, #12
 8013020:	4805      	ldr	r0, [pc, #20]	; (8013038 <fiprintf+0x20>)
 8013022:	f853 2b04 	ldr.w	r2, [r3], #4
 8013026:	6800      	ldr	r0, [r0, #0]
 8013028:	9301      	str	r3, [sp, #4]
 801302a:	f000 fc11 	bl	8013850 <_vfiprintf_r>
 801302e:	b002      	add	sp, #8
 8013030:	f85d eb04 	ldr.w	lr, [sp], #4
 8013034:	b003      	add	sp, #12
 8013036:	4770      	bx	lr
 8013038:	2000018c 	.word	0x2000018c

0801303c <_fwalk_reent>:
 801303c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013040:	4606      	mov	r6, r0
 8013042:	4688      	mov	r8, r1
 8013044:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013048:	2700      	movs	r7, #0
 801304a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801304e:	f1b9 0901 	subs.w	r9, r9, #1
 8013052:	d505      	bpl.n	8013060 <_fwalk_reent+0x24>
 8013054:	6824      	ldr	r4, [r4, #0]
 8013056:	2c00      	cmp	r4, #0
 8013058:	d1f7      	bne.n	801304a <_fwalk_reent+0xe>
 801305a:	4638      	mov	r0, r7
 801305c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013060:	89ab      	ldrh	r3, [r5, #12]
 8013062:	2b01      	cmp	r3, #1
 8013064:	d907      	bls.n	8013076 <_fwalk_reent+0x3a>
 8013066:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801306a:	3301      	adds	r3, #1
 801306c:	d003      	beq.n	8013076 <_fwalk_reent+0x3a>
 801306e:	4629      	mov	r1, r5
 8013070:	4630      	mov	r0, r6
 8013072:	47c0      	blx	r8
 8013074:	4307      	orrs	r7, r0
 8013076:	3568      	adds	r5, #104	; 0x68
 8013078:	e7e9      	b.n	801304e <_fwalk_reent+0x12>
	...

0801307c <_localeconv_r>:
 801307c:	4800      	ldr	r0, [pc, #0]	; (8013080 <_localeconv_r+0x4>)
 801307e:	4770      	bx	lr
 8013080:	200002e0 	.word	0x200002e0

08013084 <__retarget_lock_init_recursive>:
 8013084:	4770      	bx	lr

08013086 <__retarget_lock_acquire_recursive>:
 8013086:	4770      	bx	lr

08013088 <__retarget_lock_release_recursive>:
 8013088:	4770      	bx	lr

0801308a <__ascii_mbtowc>:
 801308a:	b082      	sub	sp, #8
 801308c:	b901      	cbnz	r1, 8013090 <__ascii_mbtowc+0x6>
 801308e:	a901      	add	r1, sp, #4
 8013090:	b142      	cbz	r2, 80130a4 <__ascii_mbtowc+0x1a>
 8013092:	b14b      	cbz	r3, 80130a8 <__ascii_mbtowc+0x1e>
 8013094:	7813      	ldrb	r3, [r2, #0]
 8013096:	600b      	str	r3, [r1, #0]
 8013098:	7812      	ldrb	r2, [r2, #0]
 801309a:	1e10      	subs	r0, r2, #0
 801309c:	bf18      	it	ne
 801309e:	2001      	movne	r0, #1
 80130a0:	b002      	add	sp, #8
 80130a2:	4770      	bx	lr
 80130a4:	4610      	mov	r0, r2
 80130a6:	e7fb      	b.n	80130a0 <__ascii_mbtowc+0x16>
 80130a8:	f06f 0001 	mvn.w	r0, #1
 80130ac:	e7f8      	b.n	80130a0 <__ascii_mbtowc+0x16>
	...

080130b0 <__malloc_lock>:
 80130b0:	4801      	ldr	r0, [pc, #4]	; (80130b8 <__malloc_lock+0x8>)
 80130b2:	f7ff bfe8 	b.w	8013086 <__retarget_lock_acquire_recursive>
 80130b6:	bf00      	nop
 80130b8:	200029a8 	.word	0x200029a8

080130bc <__malloc_unlock>:
 80130bc:	4801      	ldr	r0, [pc, #4]	; (80130c4 <__malloc_unlock+0x8>)
 80130be:	f7ff bfe3 	b.w	8013088 <__retarget_lock_release_recursive>
 80130c2:	bf00      	nop
 80130c4:	200029a8 	.word	0x200029a8

080130c8 <_Balloc>:
 80130c8:	b570      	push	{r4, r5, r6, lr}
 80130ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80130cc:	4604      	mov	r4, r0
 80130ce:	460d      	mov	r5, r1
 80130d0:	b976      	cbnz	r6, 80130f0 <_Balloc+0x28>
 80130d2:	2010      	movs	r0, #16
 80130d4:	f7fe faa2 	bl	801161c <malloc>
 80130d8:	4602      	mov	r2, r0
 80130da:	6260      	str	r0, [r4, #36]	; 0x24
 80130dc:	b920      	cbnz	r0, 80130e8 <_Balloc+0x20>
 80130de:	4b18      	ldr	r3, [pc, #96]	; (8013140 <_Balloc+0x78>)
 80130e0:	4818      	ldr	r0, [pc, #96]	; (8013144 <_Balloc+0x7c>)
 80130e2:	2166      	movs	r1, #102	; 0x66
 80130e4:	f7ff f82a 	bl	801213c <__assert_func>
 80130e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80130ec:	6006      	str	r6, [r0, #0]
 80130ee:	60c6      	str	r6, [r0, #12]
 80130f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80130f2:	68f3      	ldr	r3, [r6, #12]
 80130f4:	b183      	cbz	r3, 8013118 <_Balloc+0x50>
 80130f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80130f8:	68db      	ldr	r3, [r3, #12]
 80130fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80130fe:	b9b8      	cbnz	r0, 8013130 <_Balloc+0x68>
 8013100:	2101      	movs	r1, #1
 8013102:	fa01 f605 	lsl.w	r6, r1, r5
 8013106:	1d72      	adds	r2, r6, #5
 8013108:	0092      	lsls	r2, r2, #2
 801310a:	4620      	mov	r0, r4
 801310c:	f000 fb60 	bl	80137d0 <_calloc_r>
 8013110:	b160      	cbz	r0, 801312c <_Balloc+0x64>
 8013112:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013116:	e00e      	b.n	8013136 <_Balloc+0x6e>
 8013118:	2221      	movs	r2, #33	; 0x21
 801311a:	2104      	movs	r1, #4
 801311c:	4620      	mov	r0, r4
 801311e:	f000 fb57 	bl	80137d0 <_calloc_r>
 8013122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013124:	60f0      	str	r0, [r6, #12]
 8013126:	68db      	ldr	r3, [r3, #12]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d1e4      	bne.n	80130f6 <_Balloc+0x2e>
 801312c:	2000      	movs	r0, #0
 801312e:	bd70      	pop	{r4, r5, r6, pc}
 8013130:	6802      	ldr	r2, [r0, #0]
 8013132:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013136:	2300      	movs	r3, #0
 8013138:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801313c:	e7f7      	b.n	801312e <_Balloc+0x66>
 801313e:	bf00      	nop
 8013140:	0801443e 	.word	0x0801443e
 8013144:	0801452e 	.word	0x0801452e

08013148 <_Bfree>:
 8013148:	b570      	push	{r4, r5, r6, lr}
 801314a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801314c:	4605      	mov	r5, r0
 801314e:	460c      	mov	r4, r1
 8013150:	b976      	cbnz	r6, 8013170 <_Bfree+0x28>
 8013152:	2010      	movs	r0, #16
 8013154:	f7fe fa62 	bl	801161c <malloc>
 8013158:	4602      	mov	r2, r0
 801315a:	6268      	str	r0, [r5, #36]	; 0x24
 801315c:	b920      	cbnz	r0, 8013168 <_Bfree+0x20>
 801315e:	4b09      	ldr	r3, [pc, #36]	; (8013184 <_Bfree+0x3c>)
 8013160:	4809      	ldr	r0, [pc, #36]	; (8013188 <_Bfree+0x40>)
 8013162:	218a      	movs	r1, #138	; 0x8a
 8013164:	f7fe ffea 	bl	801213c <__assert_func>
 8013168:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801316c:	6006      	str	r6, [r0, #0]
 801316e:	60c6      	str	r6, [r0, #12]
 8013170:	b13c      	cbz	r4, 8013182 <_Bfree+0x3a>
 8013172:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013174:	6862      	ldr	r2, [r4, #4]
 8013176:	68db      	ldr	r3, [r3, #12]
 8013178:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801317c:	6021      	str	r1, [r4, #0]
 801317e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013182:	bd70      	pop	{r4, r5, r6, pc}
 8013184:	0801443e 	.word	0x0801443e
 8013188:	0801452e 	.word	0x0801452e

0801318c <__multadd>:
 801318c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013190:	690d      	ldr	r5, [r1, #16]
 8013192:	4607      	mov	r7, r0
 8013194:	460c      	mov	r4, r1
 8013196:	461e      	mov	r6, r3
 8013198:	f101 0c14 	add.w	ip, r1, #20
 801319c:	2000      	movs	r0, #0
 801319e:	f8dc 3000 	ldr.w	r3, [ip]
 80131a2:	b299      	uxth	r1, r3
 80131a4:	fb02 6101 	mla	r1, r2, r1, r6
 80131a8:	0c1e      	lsrs	r6, r3, #16
 80131aa:	0c0b      	lsrs	r3, r1, #16
 80131ac:	fb02 3306 	mla	r3, r2, r6, r3
 80131b0:	b289      	uxth	r1, r1
 80131b2:	3001      	adds	r0, #1
 80131b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80131b8:	4285      	cmp	r5, r0
 80131ba:	f84c 1b04 	str.w	r1, [ip], #4
 80131be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80131c2:	dcec      	bgt.n	801319e <__multadd+0x12>
 80131c4:	b30e      	cbz	r6, 801320a <__multadd+0x7e>
 80131c6:	68a3      	ldr	r3, [r4, #8]
 80131c8:	42ab      	cmp	r3, r5
 80131ca:	dc19      	bgt.n	8013200 <__multadd+0x74>
 80131cc:	6861      	ldr	r1, [r4, #4]
 80131ce:	4638      	mov	r0, r7
 80131d0:	3101      	adds	r1, #1
 80131d2:	f7ff ff79 	bl	80130c8 <_Balloc>
 80131d6:	4680      	mov	r8, r0
 80131d8:	b928      	cbnz	r0, 80131e6 <__multadd+0x5a>
 80131da:	4602      	mov	r2, r0
 80131dc:	4b0c      	ldr	r3, [pc, #48]	; (8013210 <__multadd+0x84>)
 80131de:	480d      	ldr	r0, [pc, #52]	; (8013214 <__multadd+0x88>)
 80131e0:	21b5      	movs	r1, #181	; 0xb5
 80131e2:	f7fe ffab 	bl	801213c <__assert_func>
 80131e6:	6922      	ldr	r2, [r4, #16]
 80131e8:	3202      	adds	r2, #2
 80131ea:	f104 010c 	add.w	r1, r4, #12
 80131ee:	0092      	lsls	r2, r2, #2
 80131f0:	300c      	adds	r0, #12
 80131f2:	f7fe fa1b 	bl	801162c <memcpy>
 80131f6:	4621      	mov	r1, r4
 80131f8:	4638      	mov	r0, r7
 80131fa:	f7ff ffa5 	bl	8013148 <_Bfree>
 80131fe:	4644      	mov	r4, r8
 8013200:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013204:	3501      	adds	r5, #1
 8013206:	615e      	str	r6, [r3, #20]
 8013208:	6125      	str	r5, [r4, #16]
 801320a:	4620      	mov	r0, r4
 801320c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013210:	080144b0 	.word	0x080144b0
 8013214:	0801452e 	.word	0x0801452e

08013218 <__hi0bits>:
 8013218:	0c03      	lsrs	r3, r0, #16
 801321a:	041b      	lsls	r3, r3, #16
 801321c:	b9d3      	cbnz	r3, 8013254 <__hi0bits+0x3c>
 801321e:	0400      	lsls	r0, r0, #16
 8013220:	2310      	movs	r3, #16
 8013222:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013226:	bf04      	itt	eq
 8013228:	0200      	lsleq	r0, r0, #8
 801322a:	3308      	addeq	r3, #8
 801322c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013230:	bf04      	itt	eq
 8013232:	0100      	lsleq	r0, r0, #4
 8013234:	3304      	addeq	r3, #4
 8013236:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801323a:	bf04      	itt	eq
 801323c:	0080      	lsleq	r0, r0, #2
 801323e:	3302      	addeq	r3, #2
 8013240:	2800      	cmp	r0, #0
 8013242:	db05      	blt.n	8013250 <__hi0bits+0x38>
 8013244:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013248:	f103 0301 	add.w	r3, r3, #1
 801324c:	bf08      	it	eq
 801324e:	2320      	moveq	r3, #32
 8013250:	4618      	mov	r0, r3
 8013252:	4770      	bx	lr
 8013254:	2300      	movs	r3, #0
 8013256:	e7e4      	b.n	8013222 <__hi0bits+0xa>

08013258 <__lo0bits>:
 8013258:	6803      	ldr	r3, [r0, #0]
 801325a:	f013 0207 	ands.w	r2, r3, #7
 801325e:	4601      	mov	r1, r0
 8013260:	d00b      	beq.n	801327a <__lo0bits+0x22>
 8013262:	07da      	lsls	r2, r3, #31
 8013264:	d423      	bmi.n	80132ae <__lo0bits+0x56>
 8013266:	0798      	lsls	r0, r3, #30
 8013268:	bf49      	itett	mi
 801326a:	085b      	lsrmi	r3, r3, #1
 801326c:	089b      	lsrpl	r3, r3, #2
 801326e:	2001      	movmi	r0, #1
 8013270:	600b      	strmi	r3, [r1, #0]
 8013272:	bf5c      	itt	pl
 8013274:	600b      	strpl	r3, [r1, #0]
 8013276:	2002      	movpl	r0, #2
 8013278:	4770      	bx	lr
 801327a:	b298      	uxth	r0, r3
 801327c:	b9a8      	cbnz	r0, 80132aa <__lo0bits+0x52>
 801327e:	0c1b      	lsrs	r3, r3, #16
 8013280:	2010      	movs	r0, #16
 8013282:	b2da      	uxtb	r2, r3
 8013284:	b90a      	cbnz	r2, 801328a <__lo0bits+0x32>
 8013286:	3008      	adds	r0, #8
 8013288:	0a1b      	lsrs	r3, r3, #8
 801328a:	071a      	lsls	r2, r3, #28
 801328c:	bf04      	itt	eq
 801328e:	091b      	lsreq	r3, r3, #4
 8013290:	3004      	addeq	r0, #4
 8013292:	079a      	lsls	r2, r3, #30
 8013294:	bf04      	itt	eq
 8013296:	089b      	lsreq	r3, r3, #2
 8013298:	3002      	addeq	r0, #2
 801329a:	07da      	lsls	r2, r3, #31
 801329c:	d403      	bmi.n	80132a6 <__lo0bits+0x4e>
 801329e:	085b      	lsrs	r3, r3, #1
 80132a0:	f100 0001 	add.w	r0, r0, #1
 80132a4:	d005      	beq.n	80132b2 <__lo0bits+0x5a>
 80132a6:	600b      	str	r3, [r1, #0]
 80132a8:	4770      	bx	lr
 80132aa:	4610      	mov	r0, r2
 80132ac:	e7e9      	b.n	8013282 <__lo0bits+0x2a>
 80132ae:	2000      	movs	r0, #0
 80132b0:	4770      	bx	lr
 80132b2:	2020      	movs	r0, #32
 80132b4:	4770      	bx	lr
	...

080132b8 <__i2b>:
 80132b8:	b510      	push	{r4, lr}
 80132ba:	460c      	mov	r4, r1
 80132bc:	2101      	movs	r1, #1
 80132be:	f7ff ff03 	bl	80130c8 <_Balloc>
 80132c2:	4602      	mov	r2, r0
 80132c4:	b928      	cbnz	r0, 80132d2 <__i2b+0x1a>
 80132c6:	4b05      	ldr	r3, [pc, #20]	; (80132dc <__i2b+0x24>)
 80132c8:	4805      	ldr	r0, [pc, #20]	; (80132e0 <__i2b+0x28>)
 80132ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80132ce:	f7fe ff35 	bl	801213c <__assert_func>
 80132d2:	2301      	movs	r3, #1
 80132d4:	6144      	str	r4, [r0, #20]
 80132d6:	6103      	str	r3, [r0, #16]
 80132d8:	bd10      	pop	{r4, pc}
 80132da:	bf00      	nop
 80132dc:	080144b0 	.word	0x080144b0
 80132e0:	0801452e 	.word	0x0801452e

080132e4 <__multiply>:
 80132e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132e8:	4691      	mov	r9, r2
 80132ea:	690a      	ldr	r2, [r1, #16]
 80132ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80132f0:	429a      	cmp	r2, r3
 80132f2:	bfb8      	it	lt
 80132f4:	460b      	movlt	r3, r1
 80132f6:	460c      	mov	r4, r1
 80132f8:	bfbc      	itt	lt
 80132fa:	464c      	movlt	r4, r9
 80132fc:	4699      	movlt	r9, r3
 80132fe:	6927      	ldr	r7, [r4, #16]
 8013300:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013304:	68a3      	ldr	r3, [r4, #8]
 8013306:	6861      	ldr	r1, [r4, #4]
 8013308:	eb07 060a 	add.w	r6, r7, sl
 801330c:	42b3      	cmp	r3, r6
 801330e:	b085      	sub	sp, #20
 8013310:	bfb8      	it	lt
 8013312:	3101      	addlt	r1, #1
 8013314:	f7ff fed8 	bl	80130c8 <_Balloc>
 8013318:	b930      	cbnz	r0, 8013328 <__multiply+0x44>
 801331a:	4602      	mov	r2, r0
 801331c:	4b44      	ldr	r3, [pc, #272]	; (8013430 <__multiply+0x14c>)
 801331e:	4845      	ldr	r0, [pc, #276]	; (8013434 <__multiply+0x150>)
 8013320:	f240 115d 	movw	r1, #349	; 0x15d
 8013324:	f7fe ff0a 	bl	801213c <__assert_func>
 8013328:	f100 0514 	add.w	r5, r0, #20
 801332c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013330:	462b      	mov	r3, r5
 8013332:	2200      	movs	r2, #0
 8013334:	4543      	cmp	r3, r8
 8013336:	d321      	bcc.n	801337c <__multiply+0x98>
 8013338:	f104 0314 	add.w	r3, r4, #20
 801333c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013340:	f109 0314 	add.w	r3, r9, #20
 8013344:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013348:	9202      	str	r2, [sp, #8]
 801334a:	1b3a      	subs	r2, r7, r4
 801334c:	3a15      	subs	r2, #21
 801334e:	f022 0203 	bic.w	r2, r2, #3
 8013352:	3204      	adds	r2, #4
 8013354:	f104 0115 	add.w	r1, r4, #21
 8013358:	428f      	cmp	r7, r1
 801335a:	bf38      	it	cc
 801335c:	2204      	movcc	r2, #4
 801335e:	9201      	str	r2, [sp, #4]
 8013360:	9a02      	ldr	r2, [sp, #8]
 8013362:	9303      	str	r3, [sp, #12]
 8013364:	429a      	cmp	r2, r3
 8013366:	d80c      	bhi.n	8013382 <__multiply+0x9e>
 8013368:	2e00      	cmp	r6, #0
 801336a:	dd03      	ble.n	8013374 <__multiply+0x90>
 801336c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013370:	2b00      	cmp	r3, #0
 8013372:	d05a      	beq.n	801342a <__multiply+0x146>
 8013374:	6106      	str	r6, [r0, #16]
 8013376:	b005      	add	sp, #20
 8013378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801337c:	f843 2b04 	str.w	r2, [r3], #4
 8013380:	e7d8      	b.n	8013334 <__multiply+0x50>
 8013382:	f8b3 a000 	ldrh.w	sl, [r3]
 8013386:	f1ba 0f00 	cmp.w	sl, #0
 801338a:	d024      	beq.n	80133d6 <__multiply+0xf2>
 801338c:	f104 0e14 	add.w	lr, r4, #20
 8013390:	46a9      	mov	r9, r5
 8013392:	f04f 0c00 	mov.w	ip, #0
 8013396:	f85e 2b04 	ldr.w	r2, [lr], #4
 801339a:	f8d9 1000 	ldr.w	r1, [r9]
 801339e:	fa1f fb82 	uxth.w	fp, r2
 80133a2:	b289      	uxth	r1, r1
 80133a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80133a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80133ac:	f8d9 2000 	ldr.w	r2, [r9]
 80133b0:	4461      	add	r1, ip
 80133b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80133b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80133ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80133be:	b289      	uxth	r1, r1
 80133c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80133c4:	4577      	cmp	r7, lr
 80133c6:	f849 1b04 	str.w	r1, [r9], #4
 80133ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80133ce:	d8e2      	bhi.n	8013396 <__multiply+0xb2>
 80133d0:	9a01      	ldr	r2, [sp, #4]
 80133d2:	f845 c002 	str.w	ip, [r5, r2]
 80133d6:	9a03      	ldr	r2, [sp, #12]
 80133d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80133dc:	3304      	adds	r3, #4
 80133de:	f1b9 0f00 	cmp.w	r9, #0
 80133e2:	d020      	beq.n	8013426 <__multiply+0x142>
 80133e4:	6829      	ldr	r1, [r5, #0]
 80133e6:	f104 0c14 	add.w	ip, r4, #20
 80133ea:	46ae      	mov	lr, r5
 80133ec:	f04f 0a00 	mov.w	sl, #0
 80133f0:	f8bc b000 	ldrh.w	fp, [ip]
 80133f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80133f8:	fb09 220b 	mla	r2, r9, fp, r2
 80133fc:	4492      	add	sl, r2
 80133fe:	b289      	uxth	r1, r1
 8013400:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013404:	f84e 1b04 	str.w	r1, [lr], #4
 8013408:	f85c 2b04 	ldr.w	r2, [ip], #4
 801340c:	f8be 1000 	ldrh.w	r1, [lr]
 8013410:	0c12      	lsrs	r2, r2, #16
 8013412:	fb09 1102 	mla	r1, r9, r2, r1
 8013416:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801341a:	4567      	cmp	r7, ip
 801341c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013420:	d8e6      	bhi.n	80133f0 <__multiply+0x10c>
 8013422:	9a01      	ldr	r2, [sp, #4]
 8013424:	50a9      	str	r1, [r5, r2]
 8013426:	3504      	adds	r5, #4
 8013428:	e79a      	b.n	8013360 <__multiply+0x7c>
 801342a:	3e01      	subs	r6, #1
 801342c:	e79c      	b.n	8013368 <__multiply+0x84>
 801342e:	bf00      	nop
 8013430:	080144b0 	.word	0x080144b0
 8013434:	0801452e 	.word	0x0801452e

08013438 <__pow5mult>:
 8013438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801343c:	4615      	mov	r5, r2
 801343e:	f012 0203 	ands.w	r2, r2, #3
 8013442:	4606      	mov	r6, r0
 8013444:	460f      	mov	r7, r1
 8013446:	d007      	beq.n	8013458 <__pow5mult+0x20>
 8013448:	4c25      	ldr	r4, [pc, #148]	; (80134e0 <__pow5mult+0xa8>)
 801344a:	3a01      	subs	r2, #1
 801344c:	2300      	movs	r3, #0
 801344e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013452:	f7ff fe9b 	bl	801318c <__multadd>
 8013456:	4607      	mov	r7, r0
 8013458:	10ad      	asrs	r5, r5, #2
 801345a:	d03d      	beq.n	80134d8 <__pow5mult+0xa0>
 801345c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801345e:	b97c      	cbnz	r4, 8013480 <__pow5mult+0x48>
 8013460:	2010      	movs	r0, #16
 8013462:	f7fe f8db 	bl	801161c <malloc>
 8013466:	4602      	mov	r2, r0
 8013468:	6270      	str	r0, [r6, #36]	; 0x24
 801346a:	b928      	cbnz	r0, 8013478 <__pow5mult+0x40>
 801346c:	4b1d      	ldr	r3, [pc, #116]	; (80134e4 <__pow5mult+0xac>)
 801346e:	481e      	ldr	r0, [pc, #120]	; (80134e8 <__pow5mult+0xb0>)
 8013470:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013474:	f7fe fe62 	bl	801213c <__assert_func>
 8013478:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801347c:	6004      	str	r4, [r0, #0]
 801347e:	60c4      	str	r4, [r0, #12]
 8013480:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013484:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013488:	b94c      	cbnz	r4, 801349e <__pow5mult+0x66>
 801348a:	f240 2171 	movw	r1, #625	; 0x271
 801348e:	4630      	mov	r0, r6
 8013490:	f7ff ff12 	bl	80132b8 <__i2b>
 8013494:	2300      	movs	r3, #0
 8013496:	f8c8 0008 	str.w	r0, [r8, #8]
 801349a:	4604      	mov	r4, r0
 801349c:	6003      	str	r3, [r0, #0]
 801349e:	f04f 0900 	mov.w	r9, #0
 80134a2:	07eb      	lsls	r3, r5, #31
 80134a4:	d50a      	bpl.n	80134bc <__pow5mult+0x84>
 80134a6:	4639      	mov	r1, r7
 80134a8:	4622      	mov	r2, r4
 80134aa:	4630      	mov	r0, r6
 80134ac:	f7ff ff1a 	bl	80132e4 <__multiply>
 80134b0:	4639      	mov	r1, r7
 80134b2:	4680      	mov	r8, r0
 80134b4:	4630      	mov	r0, r6
 80134b6:	f7ff fe47 	bl	8013148 <_Bfree>
 80134ba:	4647      	mov	r7, r8
 80134bc:	106d      	asrs	r5, r5, #1
 80134be:	d00b      	beq.n	80134d8 <__pow5mult+0xa0>
 80134c0:	6820      	ldr	r0, [r4, #0]
 80134c2:	b938      	cbnz	r0, 80134d4 <__pow5mult+0x9c>
 80134c4:	4622      	mov	r2, r4
 80134c6:	4621      	mov	r1, r4
 80134c8:	4630      	mov	r0, r6
 80134ca:	f7ff ff0b 	bl	80132e4 <__multiply>
 80134ce:	6020      	str	r0, [r4, #0]
 80134d0:	f8c0 9000 	str.w	r9, [r0]
 80134d4:	4604      	mov	r4, r0
 80134d6:	e7e4      	b.n	80134a2 <__pow5mult+0x6a>
 80134d8:	4638      	mov	r0, r7
 80134da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134de:	bf00      	nop
 80134e0:	08014680 	.word	0x08014680
 80134e4:	0801443e 	.word	0x0801443e
 80134e8:	0801452e 	.word	0x0801452e

080134ec <__lshift>:
 80134ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80134f0:	460c      	mov	r4, r1
 80134f2:	6849      	ldr	r1, [r1, #4]
 80134f4:	6923      	ldr	r3, [r4, #16]
 80134f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80134fa:	68a3      	ldr	r3, [r4, #8]
 80134fc:	4607      	mov	r7, r0
 80134fe:	4691      	mov	r9, r2
 8013500:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013504:	f108 0601 	add.w	r6, r8, #1
 8013508:	42b3      	cmp	r3, r6
 801350a:	db0b      	blt.n	8013524 <__lshift+0x38>
 801350c:	4638      	mov	r0, r7
 801350e:	f7ff fddb 	bl	80130c8 <_Balloc>
 8013512:	4605      	mov	r5, r0
 8013514:	b948      	cbnz	r0, 801352a <__lshift+0x3e>
 8013516:	4602      	mov	r2, r0
 8013518:	4b2a      	ldr	r3, [pc, #168]	; (80135c4 <__lshift+0xd8>)
 801351a:	482b      	ldr	r0, [pc, #172]	; (80135c8 <__lshift+0xdc>)
 801351c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013520:	f7fe fe0c 	bl	801213c <__assert_func>
 8013524:	3101      	adds	r1, #1
 8013526:	005b      	lsls	r3, r3, #1
 8013528:	e7ee      	b.n	8013508 <__lshift+0x1c>
 801352a:	2300      	movs	r3, #0
 801352c:	f100 0114 	add.w	r1, r0, #20
 8013530:	f100 0210 	add.w	r2, r0, #16
 8013534:	4618      	mov	r0, r3
 8013536:	4553      	cmp	r3, sl
 8013538:	db37      	blt.n	80135aa <__lshift+0xbe>
 801353a:	6920      	ldr	r0, [r4, #16]
 801353c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013540:	f104 0314 	add.w	r3, r4, #20
 8013544:	f019 091f 	ands.w	r9, r9, #31
 8013548:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801354c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013550:	d02f      	beq.n	80135b2 <__lshift+0xc6>
 8013552:	f1c9 0e20 	rsb	lr, r9, #32
 8013556:	468a      	mov	sl, r1
 8013558:	f04f 0c00 	mov.w	ip, #0
 801355c:	681a      	ldr	r2, [r3, #0]
 801355e:	fa02 f209 	lsl.w	r2, r2, r9
 8013562:	ea42 020c 	orr.w	r2, r2, ip
 8013566:	f84a 2b04 	str.w	r2, [sl], #4
 801356a:	f853 2b04 	ldr.w	r2, [r3], #4
 801356e:	4298      	cmp	r0, r3
 8013570:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013574:	d8f2      	bhi.n	801355c <__lshift+0x70>
 8013576:	1b03      	subs	r3, r0, r4
 8013578:	3b15      	subs	r3, #21
 801357a:	f023 0303 	bic.w	r3, r3, #3
 801357e:	3304      	adds	r3, #4
 8013580:	f104 0215 	add.w	r2, r4, #21
 8013584:	4290      	cmp	r0, r2
 8013586:	bf38      	it	cc
 8013588:	2304      	movcc	r3, #4
 801358a:	f841 c003 	str.w	ip, [r1, r3]
 801358e:	f1bc 0f00 	cmp.w	ip, #0
 8013592:	d001      	beq.n	8013598 <__lshift+0xac>
 8013594:	f108 0602 	add.w	r6, r8, #2
 8013598:	3e01      	subs	r6, #1
 801359a:	4638      	mov	r0, r7
 801359c:	612e      	str	r6, [r5, #16]
 801359e:	4621      	mov	r1, r4
 80135a0:	f7ff fdd2 	bl	8013148 <_Bfree>
 80135a4:	4628      	mov	r0, r5
 80135a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80135ae:	3301      	adds	r3, #1
 80135b0:	e7c1      	b.n	8013536 <__lshift+0x4a>
 80135b2:	3904      	subs	r1, #4
 80135b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80135b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80135bc:	4298      	cmp	r0, r3
 80135be:	d8f9      	bhi.n	80135b4 <__lshift+0xc8>
 80135c0:	e7ea      	b.n	8013598 <__lshift+0xac>
 80135c2:	bf00      	nop
 80135c4:	080144b0 	.word	0x080144b0
 80135c8:	0801452e 	.word	0x0801452e

080135cc <__mcmp>:
 80135cc:	b530      	push	{r4, r5, lr}
 80135ce:	6902      	ldr	r2, [r0, #16]
 80135d0:	690c      	ldr	r4, [r1, #16]
 80135d2:	1b12      	subs	r2, r2, r4
 80135d4:	d10e      	bne.n	80135f4 <__mcmp+0x28>
 80135d6:	f100 0314 	add.w	r3, r0, #20
 80135da:	3114      	adds	r1, #20
 80135dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80135e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80135e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80135e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80135ec:	42a5      	cmp	r5, r4
 80135ee:	d003      	beq.n	80135f8 <__mcmp+0x2c>
 80135f0:	d305      	bcc.n	80135fe <__mcmp+0x32>
 80135f2:	2201      	movs	r2, #1
 80135f4:	4610      	mov	r0, r2
 80135f6:	bd30      	pop	{r4, r5, pc}
 80135f8:	4283      	cmp	r3, r0
 80135fa:	d3f3      	bcc.n	80135e4 <__mcmp+0x18>
 80135fc:	e7fa      	b.n	80135f4 <__mcmp+0x28>
 80135fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013602:	e7f7      	b.n	80135f4 <__mcmp+0x28>

08013604 <__mdiff>:
 8013604:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013608:	460c      	mov	r4, r1
 801360a:	4606      	mov	r6, r0
 801360c:	4611      	mov	r1, r2
 801360e:	4620      	mov	r0, r4
 8013610:	4690      	mov	r8, r2
 8013612:	f7ff ffdb 	bl	80135cc <__mcmp>
 8013616:	1e05      	subs	r5, r0, #0
 8013618:	d110      	bne.n	801363c <__mdiff+0x38>
 801361a:	4629      	mov	r1, r5
 801361c:	4630      	mov	r0, r6
 801361e:	f7ff fd53 	bl	80130c8 <_Balloc>
 8013622:	b930      	cbnz	r0, 8013632 <__mdiff+0x2e>
 8013624:	4b3a      	ldr	r3, [pc, #232]	; (8013710 <__mdiff+0x10c>)
 8013626:	4602      	mov	r2, r0
 8013628:	f240 2132 	movw	r1, #562	; 0x232
 801362c:	4839      	ldr	r0, [pc, #228]	; (8013714 <__mdiff+0x110>)
 801362e:	f7fe fd85 	bl	801213c <__assert_func>
 8013632:	2301      	movs	r3, #1
 8013634:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013638:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801363c:	bfa4      	itt	ge
 801363e:	4643      	movge	r3, r8
 8013640:	46a0      	movge	r8, r4
 8013642:	4630      	mov	r0, r6
 8013644:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013648:	bfa6      	itte	ge
 801364a:	461c      	movge	r4, r3
 801364c:	2500      	movge	r5, #0
 801364e:	2501      	movlt	r5, #1
 8013650:	f7ff fd3a 	bl	80130c8 <_Balloc>
 8013654:	b920      	cbnz	r0, 8013660 <__mdiff+0x5c>
 8013656:	4b2e      	ldr	r3, [pc, #184]	; (8013710 <__mdiff+0x10c>)
 8013658:	4602      	mov	r2, r0
 801365a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801365e:	e7e5      	b.n	801362c <__mdiff+0x28>
 8013660:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013664:	6926      	ldr	r6, [r4, #16]
 8013666:	60c5      	str	r5, [r0, #12]
 8013668:	f104 0914 	add.w	r9, r4, #20
 801366c:	f108 0514 	add.w	r5, r8, #20
 8013670:	f100 0e14 	add.w	lr, r0, #20
 8013674:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013678:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801367c:	f108 0210 	add.w	r2, r8, #16
 8013680:	46f2      	mov	sl, lr
 8013682:	2100      	movs	r1, #0
 8013684:	f859 3b04 	ldr.w	r3, [r9], #4
 8013688:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801368c:	fa1f f883 	uxth.w	r8, r3
 8013690:	fa11 f18b 	uxtah	r1, r1, fp
 8013694:	0c1b      	lsrs	r3, r3, #16
 8013696:	eba1 0808 	sub.w	r8, r1, r8
 801369a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801369e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80136a2:	fa1f f888 	uxth.w	r8, r8
 80136a6:	1419      	asrs	r1, r3, #16
 80136a8:	454e      	cmp	r6, r9
 80136aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80136ae:	f84a 3b04 	str.w	r3, [sl], #4
 80136b2:	d8e7      	bhi.n	8013684 <__mdiff+0x80>
 80136b4:	1b33      	subs	r3, r6, r4
 80136b6:	3b15      	subs	r3, #21
 80136b8:	f023 0303 	bic.w	r3, r3, #3
 80136bc:	3304      	adds	r3, #4
 80136be:	3415      	adds	r4, #21
 80136c0:	42a6      	cmp	r6, r4
 80136c2:	bf38      	it	cc
 80136c4:	2304      	movcc	r3, #4
 80136c6:	441d      	add	r5, r3
 80136c8:	4473      	add	r3, lr
 80136ca:	469e      	mov	lr, r3
 80136cc:	462e      	mov	r6, r5
 80136ce:	4566      	cmp	r6, ip
 80136d0:	d30e      	bcc.n	80136f0 <__mdiff+0xec>
 80136d2:	f10c 0203 	add.w	r2, ip, #3
 80136d6:	1b52      	subs	r2, r2, r5
 80136d8:	f022 0203 	bic.w	r2, r2, #3
 80136dc:	3d03      	subs	r5, #3
 80136de:	45ac      	cmp	ip, r5
 80136e0:	bf38      	it	cc
 80136e2:	2200      	movcc	r2, #0
 80136e4:	441a      	add	r2, r3
 80136e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80136ea:	b17b      	cbz	r3, 801370c <__mdiff+0x108>
 80136ec:	6107      	str	r7, [r0, #16]
 80136ee:	e7a3      	b.n	8013638 <__mdiff+0x34>
 80136f0:	f856 8b04 	ldr.w	r8, [r6], #4
 80136f4:	fa11 f288 	uxtah	r2, r1, r8
 80136f8:	1414      	asrs	r4, r2, #16
 80136fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80136fe:	b292      	uxth	r2, r2
 8013700:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013704:	f84e 2b04 	str.w	r2, [lr], #4
 8013708:	1421      	asrs	r1, r4, #16
 801370a:	e7e0      	b.n	80136ce <__mdiff+0xca>
 801370c:	3f01      	subs	r7, #1
 801370e:	e7ea      	b.n	80136e6 <__mdiff+0xe2>
 8013710:	080144b0 	.word	0x080144b0
 8013714:	0801452e 	.word	0x0801452e

08013718 <__d2b>:
 8013718:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801371c:	4689      	mov	r9, r1
 801371e:	2101      	movs	r1, #1
 8013720:	ec57 6b10 	vmov	r6, r7, d0
 8013724:	4690      	mov	r8, r2
 8013726:	f7ff fccf 	bl	80130c8 <_Balloc>
 801372a:	4604      	mov	r4, r0
 801372c:	b930      	cbnz	r0, 801373c <__d2b+0x24>
 801372e:	4602      	mov	r2, r0
 8013730:	4b25      	ldr	r3, [pc, #148]	; (80137c8 <__d2b+0xb0>)
 8013732:	4826      	ldr	r0, [pc, #152]	; (80137cc <__d2b+0xb4>)
 8013734:	f240 310a 	movw	r1, #778	; 0x30a
 8013738:	f7fe fd00 	bl	801213c <__assert_func>
 801373c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013740:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013744:	bb35      	cbnz	r5, 8013794 <__d2b+0x7c>
 8013746:	2e00      	cmp	r6, #0
 8013748:	9301      	str	r3, [sp, #4]
 801374a:	d028      	beq.n	801379e <__d2b+0x86>
 801374c:	4668      	mov	r0, sp
 801374e:	9600      	str	r6, [sp, #0]
 8013750:	f7ff fd82 	bl	8013258 <__lo0bits>
 8013754:	9900      	ldr	r1, [sp, #0]
 8013756:	b300      	cbz	r0, 801379a <__d2b+0x82>
 8013758:	9a01      	ldr	r2, [sp, #4]
 801375a:	f1c0 0320 	rsb	r3, r0, #32
 801375e:	fa02 f303 	lsl.w	r3, r2, r3
 8013762:	430b      	orrs	r3, r1
 8013764:	40c2      	lsrs	r2, r0
 8013766:	6163      	str	r3, [r4, #20]
 8013768:	9201      	str	r2, [sp, #4]
 801376a:	9b01      	ldr	r3, [sp, #4]
 801376c:	61a3      	str	r3, [r4, #24]
 801376e:	2b00      	cmp	r3, #0
 8013770:	bf14      	ite	ne
 8013772:	2202      	movne	r2, #2
 8013774:	2201      	moveq	r2, #1
 8013776:	6122      	str	r2, [r4, #16]
 8013778:	b1d5      	cbz	r5, 80137b0 <__d2b+0x98>
 801377a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801377e:	4405      	add	r5, r0
 8013780:	f8c9 5000 	str.w	r5, [r9]
 8013784:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013788:	f8c8 0000 	str.w	r0, [r8]
 801378c:	4620      	mov	r0, r4
 801378e:	b003      	add	sp, #12
 8013790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013794:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013798:	e7d5      	b.n	8013746 <__d2b+0x2e>
 801379a:	6161      	str	r1, [r4, #20]
 801379c:	e7e5      	b.n	801376a <__d2b+0x52>
 801379e:	a801      	add	r0, sp, #4
 80137a0:	f7ff fd5a 	bl	8013258 <__lo0bits>
 80137a4:	9b01      	ldr	r3, [sp, #4]
 80137a6:	6163      	str	r3, [r4, #20]
 80137a8:	2201      	movs	r2, #1
 80137aa:	6122      	str	r2, [r4, #16]
 80137ac:	3020      	adds	r0, #32
 80137ae:	e7e3      	b.n	8013778 <__d2b+0x60>
 80137b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80137b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80137b8:	f8c9 0000 	str.w	r0, [r9]
 80137bc:	6918      	ldr	r0, [r3, #16]
 80137be:	f7ff fd2b 	bl	8013218 <__hi0bits>
 80137c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80137c6:	e7df      	b.n	8013788 <__d2b+0x70>
 80137c8:	080144b0 	.word	0x080144b0
 80137cc:	0801452e 	.word	0x0801452e

080137d0 <_calloc_r>:
 80137d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80137d2:	fba1 2402 	umull	r2, r4, r1, r2
 80137d6:	b94c      	cbnz	r4, 80137ec <_calloc_r+0x1c>
 80137d8:	4611      	mov	r1, r2
 80137da:	9201      	str	r2, [sp, #4]
 80137dc:	f7fd ffa8 	bl	8011730 <_malloc_r>
 80137e0:	9a01      	ldr	r2, [sp, #4]
 80137e2:	4605      	mov	r5, r0
 80137e4:	b930      	cbnz	r0, 80137f4 <_calloc_r+0x24>
 80137e6:	4628      	mov	r0, r5
 80137e8:	b003      	add	sp, #12
 80137ea:	bd30      	pop	{r4, r5, pc}
 80137ec:	220c      	movs	r2, #12
 80137ee:	6002      	str	r2, [r0, #0]
 80137f0:	2500      	movs	r5, #0
 80137f2:	e7f8      	b.n	80137e6 <_calloc_r+0x16>
 80137f4:	4621      	mov	r1, r4
 80137f6:	f7fd ff27 	bl	8011648 <memset>
 80137fa:	e7f4      	b.n	80137e6 <_calloc_r+0x16>

080137fc <__sfputc_r>:
 80137fc:	6893      	ldr	r3, [r2, #8]
 80137fe:	3b01      	subs	r3, #1
 8013800:	2b00      	cmp	r3, #0
 8013802:	b410      	push	{r4}
 8013804:	6093      	str	r3, [r2, #8]
 8013806:	da08      	bge.n	801381a <__sfputc_r+0x1e>
 8013808:	6994      	ldr	r4, [r2, #24]
 801380a:	42a3      	cmp	r3, r4
 801380c:	db01      	blt.n	8013812 <__sfputc_r+0x16>
 801380e:	290a      	cmp	r1, #10
 8013810:	d103      	bne.n	801381a <__sfputc_r+0x1e>
 8013812:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013816:	f000 b98f 	b.w	8013b38 <__swbuf_r>
 801381a:	6813      	ldr	r3, [r2, #0]
 801381c:	1c58      	adds	r0, r3, #1
 801381e:	6010      	str	r0, [r2, #0]
 8013820:	7019      	strb	r1, [r3, #0]
 8013822:	4608      	mov	r0, r1
 8013824:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013828:	4770      	bx	lr

0801382a <__sfputs_r>:
 801382a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801382c:	4606      	mov	r6, r0
 801382e:	460f      	mov	r7, r1
 8013830:	4614      	mov	r4, r2
 8013832:	18d5      	adds	r5, r2, r3
 8013834:	42ac      	cmp	r4, r5
 8013836:	d101      	bne.n	801383c <__sfputs_r+0x12>
 8013838:	2000      	movs	r0, #0
 801383a:	e007      	b.n	801384c <__sfputs_r+0x22>
 801383c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013840:	463a      	mov	r2, r7
 8013842:	4630      	mov	r0, r6
 8013844:	f7ff ffda 	bl	80137fc <__sfputc_r>
 8013848:	1c43      	adds	r3, r0, #1
 801384a:	d1f3      	bne.n	8013834 <__sfputs_r+0xa>
 801384c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013850 <_vfiprintf_r>:
 8013850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013854:	460d      	mov	r5, r1
 8013856:	b09d      	sub	sp, #116	; 0x74
 8013858:	4614      	mov	r4, r2
 801385a:	4698      	mov	r8, r3
 801385c:	4606      	mov	r6, r0
 801385e:	b118      	cbz	r0, 8013868 <_vfiprintf_r+0x18>
 8013860:	6983      	ldr	r3, [r0, #24]
 8013862:	b90b      	cbnz	r3, 8013868 <_vfiprintf_r+0x18>
 8013864:	f7ff fb5a 	bl	8012f1c <__sinit>
 8013868:	4b89      	ldr	r3, [pc, #548]	; (8013a90 <_vfiprintf_r+0x240>)
 801386a:	429d      	cmp	r5, r3
 801386c:	d11b      	bne.n	80138a6 <_vfiprintf_r+0x56>
 801386e:	6875      	ldr	r5, [r6, #4]
 8013870:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013872:	07d9      	lsls	r1, r3, #31
 8013874:	d405      	bmi.n	8013882 <_vfiprintf_r+0x32>
 8013876:	89ab      	ldrh	r3, [r5, #12]
 8013878:	059a      	lsls	r2, r3, #22
 801387a:	d402      	bmi.n	8013882 <_vfiprintf_r+0x32>
 801387c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801387e:	f7ff fc02 	bl	8013086 <__retarget_lock_acquire_recursive>
 8013882:	89ab      	ldrh	r3, [r5, #12]
 8013884:	071b      	lsls	r3, r3, #28
 8013886:	d501      	bpl.n	801388c <_vfiprintf_r+0x3c>
 8013888:	692b      	ldr	r3, [r5, #16]
 801388a:	b9eb      	cbnz	r3, 80138c8 <_vfiprintf_r+0x78>
 801388c:	4629      	mov	r1, r5
 801388e:	4630      	mov	r0, r6
 8013890:	f000 f9c4 	bl	8013c1c <__swsetup_r>
 8013894:	b1c0      	cbz	r0, 80138c8 <_vfiprintf_r+0x78>
 8013896:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013898:	07dc      	lsls	r4, r3, #31
 801389a:	d50e      	bpl.n	80138ba <_vfiprintf_r+0x6a>
 801389c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80138a0:	b01d      	add	sp, #116	; 0x74
 80138a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138a6:	4b7b      	ldr	r3, [pc, #492]	; (8013a94 <_vfiprintf_r+0x244>)
 80138a8:	429d      	cmp	r5, r3
 80138aa:	d101      	bne.n	80138b0 <_vfiprintf_r+0x60>
 80138ac:	68b5      	ldr	r5, [r6, #8]
 80138ae:	e7df      	b.n	8013870 <_vfiprintf_r+0x20>
 80138b0:	4b79      	ldr	r3, [pc, #484]	; (8013a98 <_vfiprintf_r+0x248>)
 80138b2:	429d      	cmp	r5, r3
 80138b4:	bf08      	it	eq
 80138b6:	68f5      	ldreq	r5, [r6, #12]
 80138b8:	e7da      	b.n	8013870 <_vfiprintf_r+0x20>
 80138ba:	89ab      	ldrh	r3, [r5, #12]
 80138bc:	0598      	lsls	r0, r3, #22
 80138be:	d4ed      	bmi.n	801389c <_vfiprintf_r+0x4c>
 80138c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80138c2:	f7ff fbe1 	bl	8013088 <__retarget_lock_release_recursive>
 80138c6:	e7e9      	b.n	801389c <_vfiprintf_r+0x4c>
 80138c8:	2300      	movs	r3, #0
 80138ca:	9309      	str	r3, [sp, #36]	; 0x24
 80138cc:	2320      	movs	r3, #32
 80138ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80138d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80138d6:	2330      	movs	r3, #48	; 0x30
 80138d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013a9c <_vfiprintf_r+0x24c>
 80138dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80138e0:	f04f 0901 	mov.w	r9, #1
 80138e4:	4623      	mov	r3, r4
 80138e6:	469a      	mov	sl, r3
 80138e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80138ec:	b10a      	cbz	r2, 80138f2 <_vfiprintf_r+0xa2>
 80138ee:	2a25      	cmp	r2, #37	; 0x25
 80138f0:	d1f9      	bne.n	80138e6 <_vfiprintf_r+0x96>
 80138f2:	ebba 0b04 	subs.w	fp, sl, r4
 80138f6:	d00b      	beq.n	8013910 <_vfiprintf_r+0xc0>
 80138f8:	465b      	mov	r3, fp
 80138fa:	4622      	mov	r2, r4
 80138fc:	4629      	mov	r1, r5
 80138fe:	4630      	mov	r0, r6
 8013900:	f7ff ff93 	bl	801382a <__sfputs_r>
 8013904:	3001      	adds	r0, #1
 8013906:	f000 80aa 	beq.w	8013a5e <_vfiprintf_r+0x20e>
 801390a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801390c:	445a      	add	r2, fp
 801390e:	9209      	str	r2, [sp, #36]	; 0x24
 8013910:	f89a 3000 	ldrb.w	r3, [sl]
 8013914:	2b00      	cmp	r3, #0
 8013916:	f000 80a2 	beq.w	8013a5e <_vfiprintf_r+0x20e>
 801391a:	2300      	movs	r3, #0
 801391c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013920:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013924:	f10a 0a01 	add.w	sl, sl, #1
 8013928:	9304      	str	r3, [sp, #16]
 801392a:	9307      	str	r3, [sp, #28]
 801392c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013930:	931a      	str	r3, [sp, #104]	; 0x68
 8013932:	4654      	mov	r4, sl
 8013934:	2205      	movs	r2, #5
 8013936:	f814 1b01 	ldrb.w	r1, [r4], #1
 801393a:	4858      	ldr	r0, [pc, #352]	; (8013a9c <_vfiprintf_r+0x24c>)
 801393c:	f7ec fc68 	bl	8000210 <memchr>
 8013940:	9a04      	ldr	r2, [sp, #16]
 8013942:	b9d8      	cbnz	r0, 801397c <_vfiprintf_r+0x12c>
 8013944:	06d1      	lsls	r1, r2, #27
 8013946:	bf44      	itt	mi
 8013948:	2320      	movmi	r3, #32
 801394a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801394e:	0713      	lsls	r3, r2, #28
 8013950:	bf44      	itt	mi
 8013952:	232b      	movmi	r3, #43	; 0x2b
 8013954:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013958:	f89a 3000 	ldrb.w	r3, [sl]
 801395c:	2b2a      	cmp	r3, #42	; 0x2a
 801395e:	d015      	beq.n	801398c <_vfiprintf_r+0x13c>
 8013960:	9a07      	ldr	r2, [sp, #28]
 8013962:	4654      	mov	r4, sl
 8013964:	2000      	movs	r0, #0
 8013966:	f04f 0c0a 	mov.w	ip, #10
 801396a:	4621      	mov	r1, r4
 801396c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013970:	3b30      	subs	r3, #48	; 0x30
 8013972:	2b09      	cmp	r3, #9
 8013974:	d94e      	bls.n	8013a14 <_vfiprintf_r+0x1c4>
 8013976:	b1b0      	cbz	r0, 80139a6 <_vfiprintf_r+0x156>
 8013978:	9207      	str	r2, [sp, #28]
 801397a:	e014      	b.n	80139a6 <_vfiprintf_r+0x156>
 801397c:	eba0 0308 	sub.w	r3, r0, r8
 8013980:	fa09 f303 	lsl.w	r3, r9, r3
 8013984:	4313      	orrs	r3, r2
 8013986:	9304      	str	r3, [sp, #16]
 8013988:	46a2      	mov	sl, r4
 801398a:	e7d2      	b.n	8013932 <_vfiprintf_r+0xe2>
 801398c:	9b03      	ldr	r3, [sp, #12]
 801398e:	1d19      	adds	r1, r3, #4
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	9103      	str	r1, [sp, #12]
 8013994:	2b00      	cmp	r3, #0
 8013996:	bfbb      	ittet	lt
 8013998:	425b      	neglt	r3, r3
 801399a:	f042 0202 	orrlt.w	r2, r2, #2
 801399e:	9307      	strge	r3, [sp, #28]
 80139a0:	9307      	strlt	r3, [sp, #28]
 80139a2:	bfb8      	it	lt
 80139a4:	9204      	strlt	r2, [sp, #16]
 80139a6:	7823      	ldrb	r3, [r4, #0]
 80139a8:	2b2e      	cmp	r3, #46	; 0x2e
 80139aa:	d10c      	bne.n	80139c6 <_vfiprintf_r+0x176>
 80139ac:	7863      	ldrb	r3, [r4, #1]
 80139ae:	2b2a      	cmp	r3, #42	; 0x2a
 80139b0:	d135      	bne.n	8013a1e <_vfiprintf_r+0x1ce>
 80139b2:	9b03      	ldr	r3, [sp, #12]
 80139b4:	1d1a      	adds	r2, r3, #4
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	9203      	str	r2, [sp, #12]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	bfb8      	it	lt
 80139be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80139c2:	3402      	adds	r4, #2
 80139c4:	9305      	str	r3, [sp, #20]
 80139c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013aac <_vfiprintf_r+0x25c>
 80139ca:	7821      	ldrb	r1, [r4, #0]
 80139cc:	2203      	movs	r2, #3
 80139ce:	4650      	mov	r0, sl
 80139d0:	f7ec fc1e 	bl	8000210 <memchr>
 80139d4:	b140      	cbz	r0, 80139e8 <_vfiprintf_r+0x198>
 80139d6:	2340      	movs	r3, #64	; 0x40
 80139d8:	eba0 000a 	sub.w	r0, r0, sl
 80139dc:	fa03 f000 	lsl.w	r0, r3, r0
 80139e0:	9b04      	ldr	r3, [sp, #16]
 80139e2:	4303      	orrs	r3, r0
 80139e4:	3401      	adds	r4, #1
 80139e6:	9304      	str	r3, [sp, #16]
 80139e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139ec:	482c      	ldr	r0, [pc, #176]	; (8013aa0 <_vfiprintf_r+0x250>)
 80139ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80139f2:	2206      	movs	r2, #6
 80139f4:	f7ec fc0c 	bl	8000210 <memchr>
 80139f8:	2800      	cmp	r0, #0
 80139fa:	d03f      	beq.n	8013a7c <_vfiprintf_r+0x22c>
 80139fc:	4b29      	ldr	r3, [pc, #164]	; (8013aa4 <_vfiprintf_r+0x254>)
 80139fe:	bb1b      	cbnz	r3, 8013a48 <_vfiprintf_r+0x1f8>
 8013a00:	9b03      	ldr	r3, [sp, #12]
 8013a02:	3307      	adds	r3, #7
 8013a04:	f023 0307 	bic.w	r3, r3, #7
 8013a08:	3308      	adds	r3, #8
 8013a0a:	9303      	str	r3, [sp, #12]
 8013a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a0e:	443b      	add	r3, r7
 8013a10:	9309      	str	r3, [sp, #36]	; 0x24
 8013a12:	e767      	b.n	80138e4 <_vfiprintf_r+0x94>
 8013a14:	fb0c 3202 	mla	r2, ip, r2, r3
 8013a18:	460c      	mov	r4, r1
 8013a1a:	2001      	movs	r0, #1
 8013a1c:	e7a5      	b.n	801396a <_vfiprintf_r+0x11a>
 8013a1e:	2300      	movs	r3, #0
 8013a20:	3401      	adds	r4, #1
 8013a22:	9305      	str	r3, [sp, #20]
 8013a24:	4619      	mov	r1, r3
 8013a26:	f04f 0c0a 	mov.w	ip, #10
 8013a2a:	4620      	mov	r0, r4
 8013a2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a30:	3a30      	subs	r2, #48	; 0x30
 8013a32:	2a09      	cmp	r2, #9
 8013a34:	d903      	bls.n	8013a3e <_vfiprintf_r+0x1ee>
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d0c5      	beq.n	80139c6 <_vfiprintf_r+0x176>
 8013a3a:	9105      	str	r1, [sp, #20]
 8013a3c:	e7c3      	b.n	80139c6 <_vfiprintf_r+0x176>
 8013a3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013a42:	4604      	mov	r4, r0
 8013a44:	2301      	movs	r3, #1
 8013a46:	e7f0      	b.n	8013a2a <_vfiprintf_r+0x1da>
 8013a48:	ab03      	add	r3, sp, #12
 8013a4a:	9300      	str	r3, [sp, #0]
 8013a4c:	462a      	mov	r2, r5
 8013a4e:	4b16      	ldr	r3, [pc, #88]	; (8013aa8 <_vfiprintf_r+0x258>)
 8013a50:	a904      	add	r1, sp, #16
 8013a52:	4630      	mov	r0, r6
 8013a54:	f7fd ff80 	bl	8011958 <_printf_float>
 8013a58:	4607      	mov	r7, r0
 8013a5a:	1c78      	adds	r0, r7, #1
 8013a5c:	d1d6      	bne.n	8013a0c <_vfiprintf_r+0x1bc>
 8013a5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013a60:	07d9      	lsls	r1, r3, #31
 8013a62:	d405      	bmi.n	8013a70 <_vfiprintf_r+0x220>
 8013a64:	89ab      	ldrh	r3, [r5, #12]
 8013a66:	059a      	lsls	r2, r3, #22
 8013a68:	d402      	bmi.n	8013a70 <_vfiprintf_r+0x220>
 8013a6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013a6c:	f7ff fb0c 	bl	8013088 <__retarget_lock_release_recursive>
 8013a70:	89ab      	ldrh	r3, [r5, #12]
 8013a72:	065b      	lsls	r3, r3, #25
 8013a74:	f53f af12 	bmi.w	801389c <_vfiprintf_r+0x4c>
 8013a78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a7a:	e711      	b.n	80138a0 <_vfiprintf_r+0x50>
 8013a7c:	ab03      	add	r3, sp, #12
 8013a7e:	9300      	str	r3, [sp, #0]
 8013a80:	462a      	mov	r2, r5
 8013a82:	4b09      	ldr	r3, [pc, #36]	; (8013aa8 <_vfiprintf_r+0x258>)
 8013a84:	a904      	add	r1, sp, #16
 8013a86:	4630      	mov	r0, r6
 8013a88:	f7fe fa0a 	bl	8011ea0 <_printf_i>
 8013a8c:	e7e4      	b.n	8013a58 <_vfiprintf_r+0x208>
 8013a8e:	bf00      	nop
 8013a90:	080144e4 	.word	0x080144e4
 8013a94:	08014504 	.word	0x08014504
 8013a98:	080144c4 	.word	0x080144c4
 8013a9c:	0801468c 	.word	0x0801468c
 8013aa0:	08014696 	.word	0x08014696
 8013aa4:	08011959 	.word	0x08011959
 8013aa8:	0801382b 	.word	0x0801382b
 8013aac:	08014692 	.word	0x08014692

08013ab0 <__sread>:
 8013ab0:	b510      	push	{r4, lr}
 8013ab2:	460c      	mov	r4, r1
 8013ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ab8:	f000 fa70 	bl	8013f9c <_read_r>
 8013abc:	2800      	cmp	r0, #0
 8013abe:	bfab      	itete	ge
 8013ac0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013ac2:	89a3      	ldrhlt	r3, [r4, #12]
 8013ac4:	181b      	addge	r3, r3, r0
 8013ac6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013aca:	bfac      	ite	ge
 8013acc:	6563      	strge	r3, [r4, #84]	; 0x54
 8013ace:	81a3      	strhlt	r3, [r4, #12]
 8013ad0:	bd10      	pop	{r4, pc}

08013ad2 <__swrite>:
 8013ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ad6:	461f      	mov	r7, r3
 8013ad8:	898b      	ldrh	r3, [r1, #12]
 8013ada:	05db      	lsls	r3, r3, #23
 8013adc:	4605      	mov	r5, r0
 8013ade:	460c      	mov	r4, r1
 8013ae0:	4616      	mov	r6, r2
 8013ae2:	d505      	bpl.n	8013af0 <__swrite+0x1e>
 8013ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ae8:	2302      	movs	r3, #2
 8013aea:	2200      	movs	r2, #0
 8013aec:	f000 f9de 	bl	8013eac <_lseek_r>
 8013af0:	89a3      	ldrh	r3, [r4, #12]
 8013af2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013af6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013afa:	81a3      	strh	r3, [r4, #12]
 8013afc:	4632      	mov	r2, r6
 8013afe:	463b      	mov	r3, r7
 8013b00:	4628      	mov	r0, r5
 8013b02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b06:	f000 b877 	b.w	8013bf8 <_write_r>

08013b0a <__sseek>:
 8013b0a:	b510      	push	{r4, lr}
 8013b0c:	460c      	mov	r4, r1
 8013b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b12:	f000 f9cb 	bl	8013eac <_lseek_r>
 8013b16:	1c43      	adds	r3, r0, #1
 8013b18:	89a3      	ldrh	r3, [r4, #12]
 8013b1a:	bf15      	itete	ne
 8013b1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8013b1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013b22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013b26:	81a3      	strheq	r3, [r4, #12]
 8013b28:	bf18      	it	ne
 8013b2a:	81a3      	strhne	r3, [r4, #12]
 8013b2c:	bd10      	pop	{r4, pc}

08013b2e <__sclose>:
 8013b2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b32:	f000 b8e9 	b.w	8013d08 <_close_r>
	...

08013b38 <__swbuf_r>:
 8013b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b3a:	460e      	mov	r6, r1
 8013b3c:	4614      	mov	r4, r2
 8013b3e:	4605      	mov	r5, r0
 8013b40:	b118      	cbz	r0, 8013b4a <__swbuf_r+0x12>
 8013b42:	6983      	ldr	r3, [r0, #24]
 8013b44:	b90b      	cbnz	r3, 8013b4a <__swbuf_r+0x12>
 8013b46:	f7ff f9e9 	bl	8012f1c <__sinit>
 8013b4a:	4b21      	ldr	r3, [pc, #132]	; (8013bd0 <__swbuf_r+0x98>)
 8013b4c:	429c      	cmp	r4, r3
 8013b4e:	d12b      	bne.n	8013ba8 <__swbuf_r+0x70>
 8013b50:	686c      	ldr	r4, [r5, #4]
 8013b52:	69a3      	ldr	r3, [r4, #24]
 8013b54:	60a3      	str	r3, [r4, #8]
 8013b56:	89a3      	ldrh	r3, [r4, #12]
 8013b58:	071a      	lsls	r2, r3, #28
 8013b5a:	d52f      	bpl.n	8013bbc <__swbuf_r+0x84>
 8013b5c:	6923      	ldr	r3, [r4, #16]
 8013b5e:	b36b      	cbz	r3, 8013bbc <__swbuf_r+0x84>
 8013b60:	6923      	ldr	r3, [r4, #16]
 8013b62:	6820      	ldr	r0, [r4, #0]
 8013b64:	1ac0      	subs	r0, r0, r3
 8013b66:	6963      	ldr	r3, [r4, #20]
 8013b68:	b2f6      	uxtb	r6, r6
 8013b6a:	4283      	cmp	r3, r0
 8013b6c:	4637      	mov	r7, r6
 8013b6e:	dc04      	bgt.n	8013b7a <__swbuf_r+0x42>
 8013b70:	4621      	mov	r1, r4
 8013b72:	4628      	mov	r0, r5
 8013b74:	f000 f95e 	bl	8013e34 <_fflush_r>
 8013b78:	bb30      	cbnz	r0, 8013bc8 <__swbuf_r+0x90>
 8013b7a:	68a3      	ldr	r3, [r4, #8]
 8013b7c:	3b01      	subs	r3, #1
 8013b7e:	60a3      	str	r3, [r4, #8]
 8013b80:	6823      	ldr	r3, [r4, #0]
 8013b82:	1c5a      	adds	r2, r3, #1
 8013b84:	6022      	str	r2, [r4, #0]
 8013b86:	701e      	strb	r6, [r3, #0]
 8013b88:	6963      	ldr	r3, [r4, #20]
 8013b8a:	3001      	adds	r0, #1
 8013b8c:	4283      	cmp	r3, r0
 8013b8e:	d004      	beq.n	8013b9a <__swbuf_r+0x62>
 8013b90:	89a3      	ldrh	r3, [r4, #12]
 8013b92:	07db      	lsls	r3, r3, #31
 8013b94:	d506      	bpl.n	8013ba4 <__swbuf_r+0x6c>
 8013b96:	2e0a      	cmp	r6, #10
 8013b98:	d104      	bne.n	8013ba4 <__swbuf_r+0x6c>
 8013b9a:	4621      	mov	r1, r4
 8013b9c:	4628      	mov	r0, r5
 8013b9e:	f000 f949 	bl	8013e34 <_fflush_r>
 8013ba2:	b988      	cbnz	r0, 8013bc8 <__swbuf_r+0x90>
 8013ba4:	4638      	mov	r0, r7
 8013ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ba8:	4b0a      	ldr	r3, [pc, #40]	; (8013bd4 <__swbuf_r+0x9c>)
 8013baa:	429c      	cmp	r4, r3
 8013bac:	d101      	bne.n	8013bb2 <__swbuf_r+0x7a>
 8013bae:	68ac      	ldr	r4, [r5, #8]
 8013bb0:	e7cf      	b.n	8013b52 <__swbuf_r+0x1a>
 8013bb2:	4b09      	ldr	r3, [pc, #36]	; (8013bd8 <__swbuf_r+0xa0>)
 8013bb4:	429c      	cmp	r4, r3
 8013bb6:	bf08      	it	eq
 8013bb8:	68ec      	ldreq	r4, [r5, #12]
 8013bba:	e7ca      	b.n	8013b52 <__swbuf_r+0x1a>
 8013bbc:	4621      	mov	r1, r4
 8013bbe:	4628      	mov	r0, r5
 8013bc0:	f000 f82c 	bl	8013c1c <__swsetup_r>
 8013bc4:	2800      	cmp	r0, #0
 8013bc6:	d0cb      	beq.n	8013b60 <__swbuf_r+0x28>
 8013bc8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013bcc:	e7ea      	b.n	8013ba4 <__swbuf_r+0x6c>
 8013bce:	bf00      	nop
 8013bd0:	080144e4 	.word	0x080144e4
 8013bd4:	08014504 	.word	0x08014504
 8013bd8:	080144c4 	.word	0x080144c4

08013bdc <__ascii_wctomb>:
 8013bdc:	b149      	cbz	r1, 8013bf2 <__ascii_wctomb+0x16>
 8013bde:	2aff      	cmp	r2, #255	; 0xff
 8013be0:	bf85      	ittet	hi
 8013be2:	238a      	movhi	r3, #138	; 0x8a
 8013be4:	6003      	strhi	r3, [r0, #0]
 8013be6:	700a      	strbls	r2, [r1, #0]
 8013be8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013bec:	bf98      	it	ls
 8013bee:	2001      	movls	r0, #1
 8013bf0:	4770      	bx	lr
 8013bf2:	4608      	mov	r0, r1
 8013bf4:	4770      	bx	lr
	...

08013bf8 <_write_r>:
 8013bf8:	b538      	push	{r3, r4, r5, lr}
 8013bfa:	4d07      	ldr	r5, [pc, #28]	; (8013c18 <_write_r+0x20>)
 8013bfc:	4604      	mov	r4, r0
 8013bfe:	4608      	mov	r0, r1
 8013c00:	4611      	mov	r1, r2
 8013c02:	2200      	movs	r2, #0
 8013c04:	602a      	str	r2, [r5, #0]
 8013c06:	461a      	mov	r2, r3
 8013c08:	f000 fa86 	bl	8014118 <_write>
 8013c0c:	1c43      	adds	r3, r0, #1
 8013c0e:	d102      	bne.n	8013c16 <_write_r+0x1e>
 8013c10:	682b      	ldr	r3, [r5, #0]
 8013c12:	b103      	cbz	r3, 8013c16 <_write_r+0x1e>
 8013c14:	6023      	str	r3, [r4, #0]
 8013c16:	bd38      	pop	{r3, r4, r5, pc}
 8013c18:	200029ac 	.word	0x200029ac

08013c1c <__swsetup_r>:
 8013c1c:	4b32      	ldr	r3, [pc, #200]	; (8013ce8 <__swsetup_r+0xcc>)
 8013c1e:	b570      	push	{r4, r5, r6, lr}
 8013c20:	681d      	ldr	r5, [r3, #0]
 8013c22:	4606      	mov	r6, r0
 8013c24:	460c      	mov	r4, r1
 8013c26:	b125      	cbz	r5, 8013c32 <__swsetup_r+0x16>
 8013c28:	69ab      	ldr	r3, [r5, #24]
 8013c2a:	b913      	cbnz	r3, 8013c32 <__swsetup_r+0x16>
 8013c2c:	4628      	mov	r0, r5
 8013c2e:	f7ff f975 	bl	8012f1c <__sinit>
 8013c32:	4b2e      	ldr	r3, [pc, #184]	; (8013cec <__swsetup_r+0xd0>)
 8013c34:	429c      	cmp	r4, r3
 8013c36:	d10f      	bne.n	8013c58 <__swsetup_r+0x3c>
 8013c38:	686c      	ldr	r4, [r5, #4]
 8013c3a:	89a3      	ldrh	r3, [r4, #12]
 8013c3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013c40:	0719      	lsls	r1, r3, #28
 8013c42:	d42c      	bmi.n	8013c9e <__swsetup_r+0x82>
 8013c44:	06dd      	lsls	r5, r3, #27
 8013c46:	d411      	bmi.n	8013c6c <__swsetup_r+0x50>
 8013c48:	2309      	movs	r3, #9
 8013c4a:	6033      	str	r3, [r6, #0]
 8013c4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013c50:	81a3      	strh	r3, [r4, #12]
 8013c52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013c56:	e03e      	b.n	8013cd6 <__swsetup_r+0xba>
 8013c58:	4b25      	ldr	r3, [pc, #148]	; (8013cf0 <__swsetup_r+0xd4>)
 8013c5a:	429c      	cmp	r4, r3
 8013c5c:	d101      	bne.n	8013c62 <__swsetup_r+0x46>
 8013c5e:	68ac      	ldr	r4, [r5, #8]
 8013c60:	e7eb      	b.n	8013c3a <__swsetup_r+0x1e>
 8013c62:	4b24      	ldr	r3, [pc, #144]	; (8013cf4 <__swsetup_r+0xd8>)
 8013c64:	429c      	cmp	r4, r3
 8013c66:	bf08      	it	eq
 8013c68:	68ec      	ldreq	r4, [r5, #12]
 8013c6a:	e7e6      	b.n	8013c3a <__swsetup_r+0x1e>
 8013c6c:	0758      	lsls	r0, r3, #29
 8013c6e:	d512      	bpl.n	8013c96 <__swsetup_r+0x7a>
 8013c70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c72:	b141      	cbz	r1, 8013c86 <__swsetup_r+0x6a>
 8013c74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c78:	4299      	cmp	r1, r3
 8013c7a:	d002      	beq.n	8013c82 <__swsetup_r+0x66>
 8013c7c:	4630      	mov	r0, r6
 8013c7e:	f7fd fceb 	bl	8011658 <_free_r>
 8013c82:	2300      	movs	r3, #0
 8013c84:	6363      	str	r3, [r4, #52]	; 0x34
 8013c86:	89a3      	ldrh	r3, [r4, #12]
 8013c88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013c8c:	81a3      	strh	r3, [r4, #12]
 8013c8e:	2300      	movs	r3, #0
 8013c90:	6063      	str	r3, [r4, #4]
 8013c92:	6923      	ldr	r3, [r4, #16]
 8013c94:	6023      	str	r3, [r4, #0]
 8013c96:	89a3      	ldrh	r3, [r4, #12]
 8013c98:	f043 0308 	orr.w	r3, r3, #8
 8013c9c:	81a3      	strh	r3, [r4, #12]
 8013c9e:	6923      	ldr	r3, [r4, #16]
 8013ca0:	b94b      	cbnz	r3, 8013cb6 <__swsetup_r+0x9a>
 8013ca2:	89a3      	ldrh	r3, [r4, #12]
 8013ca4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013cac:	d003      	beq.n	8013cb6 <__swsetup_r+0x9a>
 8013cae:	4621      	mov	r1, r4
 8013cb0:	4630      	mov	r0, r6
 8013cb2:	f000 f933 	bl	8013f1c <__smakebuf_r>
 8013cb6:	89a0      	ldrh	r0, [r4, #12]
 8013cb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013cbc:	f010 0301 	ands.w	r3, r0, #1
 8013cc0:	d00a      	beq.n	8013cd8 <__swsetup_r+0xbc>
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	60a3      	str	r3, [r4, #8]
 8013cc6:	6963      	ldr	r3, [r4, #20]
 8013cc8:	425b      	negs	r3, r3
 8013cca:	61a3      	str	r3, [r4, #24]
 8013ccc:	6923      	ldr	r3, [r4, #16]
 8013cce:	b943      	cbnz	r3, 8013ce2 <__swsetup_r+0xc6>
 8013cd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013cd4:	d1ba      	bne.n	8013c4c <__swsetup_r+0x30>
 8013cd6:	bd70      	pop	{r4, r5, r6, pc}
 8013cd8:	0781      	lsls	r1, r0, #30
 8013cda:	bf58      	it	pl
 8013cdc:	6963      	ldrpl	r3, [r4, #20]
 8013cde:	60a3      	str	r3, [r4, #8]
 8013ce0:	e7f4      	b.n	8013ccc <__swsetup_r+0xb0>
 8013ce2:	2000      	movs	r0, #0
 8013ce4:	e7f7      	b.n	8013cd6 <__swsetup_r+0xba>
 8013ce6:	bf00      	nop
 8013ce8:	2000018c 	.word	0x2000018c
 8013cec:	080144e4 	.word	0x080144e4
 8013cf0:	08014504 	.word	0x08014504
 8013cf4:	080144c4 	.word	0x080144c4

08013cf8 <abort>:
 8013cf8:	b508      	push	{r3, lr}
 8013cfa:	2006      	movs	r0, #6
 8013cfc:	f000 f988 	bl	8014010 <raise>
 8013d00:	2001      	movs	r0, #1
 8013d02:	f000 fa11 	bl	8014128 <_exit>
	...

08013d08 <_close_r>:
 8013d08:	b538      	push	{r3, r4, r5, lr}
 8013d0a:	4d06      	ldr	r5, [pc, #24]	; (8013d24 <_close_r+0x1c>)
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	4604      	mov	r4, r0
 8013d10:	4608      	mov	r0, r1
 8013d12:	602b      	str	r3, [r5, #0]
 8013d14:	f000 f9ba 	bl	801408c <_close>
 8013d18:	1c43      	adds	r3, r0, #1
 8013d1a:	d102      	bne.n	8013d22 <_close_r+0x1a>
 8013d1c:	682b      	ldr	r3, [r5, #0]
 8013d1e:	b103      	cbz	r3, 8013d22 <_close_r+0x1a>
 8013d20:	6023      	str	r3, [r4, #0]
 8013d22:	bd38      	pop	{r3, r4, r5, pc}
 8013d24:	200029ac 	.word	0x200029ac

08013d28 <__sflush_r>:
 8013d28:	898a      	ldrh	r2, [r1, #12]
 8013d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d2e:	4605      	mov	r5, r0
 8013d30:	0710      	lsls	r0, r2, #28
 8013d32:	460c      	mov	r4, r1
 8013d34:	d458      	bmi.n	8013de8 <__sflush_r+0xc0>
 8013d36:	684b      	ldr	r3, [r1, #4]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	dc05      	bgt.n	8013d48 <__sflush_r+0x20>
 8013d3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	dc02      	bgt.n	8013d48 <__sflush_r+0x20>
 8013d42:	2000      	movs	r0, #0
 8013d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013d4a:	2e00      	cmp	r6, #0
 8013d4c:	d0f9      	beq.n	8013d42 <__sflush_r+0x1a>
 8013d4e:	2300      	movs	r3, #0
 8013d50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013d54:	682f      	ldr	r7, [r5, #0]
 8013d56:	602b      	str	r3, [r5, #0]
 8013d58:	d032      	beq.n	8013dc0 <__sflush_r+0x98>
 8013d5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013d5c:	89a3      	ldrh	r3, [r4, #12]
 8013d5e:	075a      	lsls	r2, r3, #29
 8013d60:	d505      	bpl.n	8013d6e <__sflush_r+0x46>
 8013d62:	6863      	ldr	r3, [r4, #4]
 8013d64:	1ac0      	subs	r0, r0, r3
 8013d66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013d68:	b10b      	cbz	r3, 8013d6e <__sflush_r+0x46>
 8013d6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013d6c:	1ac0      	subs	r0, r0, r3
 8013d6e:	2300      	movs	r3, #0
 8013d70:	4602      	mov	r2, r0
 8013d72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013d74:	6a21      	ldr	r1, [r4, #32]
 8013d76:	4628      	mov	r0, r5
 8013d78:	47b0      	blx	r6
 8013d7a:	1c43      	adds	r3, r0, #1
 8013d7c:	89a3      	ldrh	r3, [r4, #12]
 8013d7e:	d106      	bne.n	8013d8e <__sflush_r+0x66>
 8013d80:	6829      	ldr	r1, [r5, #0]
 8013d82:	291d      	cmp	r1, #29
 8013d84:	d82c      	bhi.n	8013de0 <__sflush_r+0xb8>
 8013d86:	4a2a      	ldr	r2, [pc, #168]	; (8013e30 <__sflush_r+0x108>)
 8013d88:	40ca      	lsrs	r2, r1
 8013d8a:	07d6      	lsls	r6, r2, #31
 8013d8c:	d528      	bpl.n	8013de0 <__sflush_r+0xb8>
 8013d8e:	2200      	movs	r2, #0
 8013d90:	6062      	str	r2, [r4, #4]
 8013d92:	04d9      	lsls	r1, r3, #19
 8013d94:	6922      	ldr	r2, [r4, #16]
 8013d96:	6022      	str	r2, [r4, #0]
 8013d98:	d504      	bpl.n	8013da4 <__sflush_r+0x7c>
 8013d9a:	1c42      	adds	r2, r0, #1
 8013d9c:	d101      	bne.n	8013da2 <__sflush_r+0x7a>
 8013d9e:	682b      	ldr	r3, [r5, #0]
 8013da0:	b903      	cbnz	r3, 8013da4 <__sflush_r+0x7c>
 8013da2:	6560      	str	r0, [r4, #84]	; 0x54
 8013da4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013da6:	602f      	str	r7, [r5, #0]
 8013da8:	2900      	cmp	r1, #0
 8013daa:	d0ca      	beq.n	8013d42 <__sflush_r+0x1a>
 8013dac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013db0:	4299      	cmp	r1, r3
 8013db2:	d002      	beq.n	8013dba <__sflush_r+0x92>
 8013db4:	4628      	mov	r0, r5
 8013db6:	f7fd fc4f 	bl	8011658 <_free_r>
 8013dba:	2000      	movs	r0, #0
 8013dbc:	6360      	str	r0, [r4, #52]	; 0x34
 8013dbe:	e7c1      	b.n	8013d44 <__sflush_r+0x1c>
 8013dc0:	6a21      	ldr	r1, [r4, #32]
 8013dc2:	2301      	movs	r3, #1
 8013dc4:	4628      	mov	r0, r5
 8013dc6:	47b0      	blx	r6
 8013dc8:	1c41      	adds	r1, r0, #1
 8013dca:	d1c7      	bne.n	8013d5c <__sflush_r+0x34>
 8013dcc:	682b      	ldr	r3, [r5, #0]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d0c4      	beq.n	8013d5c <__sflush_r+0x34>
 8013dd2:	2b1d      	cmp	r3, #29
 8013dd4:	d001      	beq.n	8013dda <__sflush_r+0xb2>
 8013dd6:	2b16      	cmp	r3, #22
 8013dd8:	d101      	bne.n	8013dde <__sflush_r+0xb6>
 8013dda:	602f      	str	r7, [r5, #0]
 8013ddc:	e7b1      	b.n	8013d42 <__sflush_r+0x1a>
 8013dde:	89a3      	ldrh	r3, [r4, #12]
 8013de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013de4:	81a3      	strh	r3, [r4, #12]
 8013de6:	e7ad      	b.n	8013d44 <__sflush_r+0x1c>
 8013de8:	690f      	ldr	r7, [r1, #16]
 8013dea:	2f00      	cmp	r7, #0
 8013dec:	d0a9      	beq.n	8013d42 <__sflush_r+0x1a>
 8013dee:	0793      	lsls	r3, r2, #30
 8013df0:	680e      	ldr	r6, [r1, #0]
 8013df2:	bf08      	it	eq
 8013df4:	694b      	ldreq	r3, [r1, #20]
 8013df6:	600f      	str	r7, [r1, #0]
 8013df8:	bf18      	it	ne
 8013dfa:	2300      	movne	r3, #0
 8013dfc:	eba6 0807 	sub.w	r8, r6, r7
 8013e00:	608b      	str	r3, [r1, #8]
 8013e02:	f1b8 0f00 	cmp.w	r8, #0
 8013e06:	dd9c      	ble.n	8013d42 <__sflush_r+0x1a>
 8013e08:	6a21      	ldr	r1, [r4, #32]
 8013e0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013e0c:	4643      	mov	r3, r8
 8013e0e:	463a      	mov	r2, r7
 8013e10:	4628      	mov	r0, r5
 8013e12:	47b0      	blx	r6
 8013e14:	2800      	cmp	r0, #0
 8013e16:	dc06      	bgt.n	8013e26 <__sflush_r+0xfe>
 8013e18:	89a3      	ldrh	r3, [r4, #12]
 8013e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e1e:	81a3      	strh	r3, [r4, #12]
 8013e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e24:	e78e      	b.n	8013d44 <__sflush_r+0x1c>
 8013e26:	4407      	add	r7, r0
 8013e28:	eba8 0800 	sub.w	r8, r8, r0
 8013e2c:	e7e9      	b.n	8013e02 <__sflush_r+0xda>
 8013e2e:	bf00      	nop
 8013e30:	20400001 	.word	0x20400001

08013e34 <_fflush_r>:
 8013e34:	b538      	push	{r3, r4, r5, lr}
 8013e36:	690b      	ldr	r3, [r1, #16]
 8013e38:	4605      	mov	r5, r0
 8013e3a:	460c      	mov	r4, r1
 8013e3c:	b913      	cbnz	r3, 8013e44 <_fflush_r+0x10>
 8013e3e:	2500      	movs	r5, #0
 8013e40:	4628      	mov	r0, r5
 8013e42:	bd38      	pop	{r3, r4, r5, pc}
 8013e44:	b118      	cbz	r0, 8013e4e <_fflush_r+0x1a>
 8013e46:	6983      	ldr	r3, [r0, #24]
 8013e48:	b90b      	cbnz	r3, 8013e4e <_fflush_r+0x1a>
 8013e4a:	f7ff f867 	bl	8012f1c <__sinit>
 8013e4e:	4b14      	ldr	r3, [pc, #80]	; (8013ea0 <_fflush_r+0x6c>)
 8013e50:	429c      	cmp	r4, r3
 8013e52:	d11b      	bne.n	8013e8c <_fflush_r+0x58>
 8013e54:	686c      	ldr	r4, [r5, #4]
 8013e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d0ef      	beq.n	8013e3e <_fflush_r+0xa>
 8013e5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013e60:	07d0      	lsls	r0, r2, #31
 8013e62:	d404      	bmi.n	8013e6e <_fflush_r+0x3a>
 8013e64:	0599      	lsls	r1, r3, #22
 8013e66:	d402      	bmi.n	8013e6e <_fflush_r+0x3a>
 8013e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e6a:	f7ff f90c 	bl	8013086 <__retarget_lock_acquire_recursive>
 8013e6e:	4628      	mov	r0, r5
 8013e70:	4621      	mov	r1, r4
 8013e72:	f7ff ff59 	bl	8013d28 <__sflush_r>
 8013e76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013e78:	07da      	lsls	r2, r3, #31
 8013e7a:	4605      	mov	r5, r0
 8013e7c:	d4e0      	bmi.n	8013e40 <_fflush_r+0xc>
 8013e7e:	89a3      	ldrh	r3, [r4, #12]
 8013e80:	059b      	lsls	r3, r3, #22
 8013e82:	d4dd      	bmi.n	8013e40 <_fflush_r+0xc>
 8013e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e86:	f7ff f8ff 	bl	8013088 <__retarget_lock_release_recursive>
 8013e8a:	e7d9      	b.n	8013e40 <_fflush_r+0xc>
 8013e8c:	4b05      	ldr	r3, [pc, #20]	; (8013ea4 <_fflush_r+0x70>)
 8013e8e:	429c      	cmp	r4, r3
 8013e90:	d101      	bne.n	8013e96 <_fflush_r+0x62>
 8013e92:	68ac      	ldr	r4, [r5, #8]
 8013e94:	e7df      	b.n	8013e56 <_fflush_r+0x22>
 8013e96:	4b04      	ldr	r3, [pc, #16]	; (8013ea8 <_fflush_r+0x74>)
 8013e98:	429c      	cmp	r4, r3
 8013e9a:	bf08      	it	eq
 8013e9c:	68ec      	ldreq	r4, [r5, #12]
 8013e9e:	e7da      	b.n	8013e56 <_fflush_r+0x22>
 8013ea0:	080144e4 	.word	0x080144e4
 8013ea4:	08014504 	.word	0x08014504
 8013ea8:	080144c4 	.word	0x080144c4

08013eac <_lseek_r>:
 8013eac:	b538      	push	{r3, r4, r5, lr}
 8013eae:	4d07      	ldr	r5, [pc, #28]	; (8013ecc <_lseek_r+0x20>)
 8013eb0:	4604      	mov	r4, r0
 8013eb2:	4608      	mov	r0, r1
 8013eb4:	4611      	mov	r1, r2
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	602a      	str	r2, [r5, #0]
 8013eba:	461a      	mov	r2, r3
 8013ebc:	f000 f90e 	bl	80140dc <_lseek>
 8013ec0:	1c43      	adds	r3, r0, #1
 8013ec2:	d102      	bne.n	8013eca <_lseek_r+0x1e>
 8013ec4:	682b      	ldr	r3, [r5, #0]
 8013ec6:	b103      	cbz	r3, 8013eca <_lseek_r+0x1e>
 8013ec8:	6023      	str	r3, [r4, #0]
 8013eca:	bd38      	pop	{r3, r4, r5, pc}
 8013ecc:	200029ac 	.word	0x200029ac

08013ed0 <__swhatbuf_r>:
 8013ed0:	b570      	push	{r4, r5, r6, lr}
 8013ed2:	460e      	mov	r6, r1
 8013ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ed8:	2900      	cmp	r1, #0
 8013eda:	b096      	sub	sp, #88	; 0x58
 8013edc:	4614      	mov	r4, r2
 8013ede:	461d      	mov	r5, r3
 8013ee0:	da08      	bge.n	8013ef4 <__swhatbuf_r+0x24>
 8013ee2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	602a      	str	r2, [r5, #0]
 8013eea:	061a      	lsls	r2, r3, #24
 8013eec:	d410      	bmi.n	8013f10 <__swhatbuf_r+0x40>
 8013eee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013ef2:	e00e      	b.n	8013f12 <__swhatbuf_r+0x42>
 8013ef4:	466a      	mov	r2, sp
 8013ef6:	f000 f8a7 	bl	8014048 <_fstat_r>
 8013efa:	2800      	cmp	r0, #0
 8013efc:	dbf1      	blt.n	8013ee2 <__swhatbuf_r+0x12>
 8013efe:	9a01      	ldr	r2, [sp, #4]
 8013f00:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013f04:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013f08:	425a      	negs	r2, r3
 8013f0a:	415a      	adcs	r2, r3
 8013f0c:	602a      	str	r2, [r5, #0]
 8013f0e:	e7ee      	b.n	8013eee <__swhatbuf_r+0x1e>
 8013f10:	2340      	movs	r3, #64	; 0x40
 8013f12:	2000      	movs	r0, #0
 8013f14:	6023      	str	r3, [r4, #0]
 8013f16:	b016      	add	sp, #88	; 0x58
 8013f18:	bd70      	pop	{r4, r5, r6, pc}
	...

08013f1c <__smakebuf_r>:
 8013f1c:	898b      	ldrh	r3, [r1, #12]
 8013f1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013f20:	079d      	lsls	r5, r3, #30
 8013f22:	4606      	mov	r6, r0
 8013f24:	460c      	mov	r4, r1
 8013f26:	d507      	bpl.n	8013f38 <__smakebuf_r+0x1c>
 8013f28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013f2c:	6023      	str	r3, [r4, #0]
 8013f2e:	6123      	str	r3, [r4, #16]
 8013f30:	2301      	movs	r3, #1
 8013f32:	6163      	str	r3, [r4, #20]
 8013f34:	b002      	add	sp, #8
 8013f36:	bd70      	pop	{r4, r5, r6, pc}
 8013f38:	ab01      	add	r3, sp, #4
 8013f3a:	466a      	mov	r2, sp
 8013f3c:	f7ff ffc8 	bl	8013ed0 <__swhatbuf_r>
 8013f40:	9900      	ldr	r1, [sp, #0]
 8013f42:	4605      	mov	r5, r0
 8013f44:	4630      	mov	r0, r6
 8013f46:	f7fd fbf3 	bl	8011730 <_malloc_r>
 8013f4a:	b948      	cbnz	r0, 8013f60 <__smakebuf_r+0x44>
 8013f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f50:	059a      	lsls	r2, r3, #22
 8013f52:	d4ef      	bmi.n	8013f34 <__smakebuf_r+0x18>
 8013f54:	f023 0303 	bic.w	r3, r3, #3
 8013f58:	f043 0302 	orr.w	r3, r3, #2
 8013f5c:	81a3      	strh	r3, [r4, #12]
 8013f5e:	e7e3      	b.n	8013f28 <__smakebuf_r+0xc>
 8013f60:	4b0d      	ldr	r3, [pc, #52]	; (8013f98 <__smakebuf_r+0x7c>)
 8013f62:	62b3      	str	r3, [r6, #40]	; 0x28
 8013f64:	89a3      	ldrh	r3, [r4, #12]
 8013f66:	6020      	str	r0, [r4, #0]
 8013f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f6c:	81a3      	strh	r3, [r4, #12]
 8013f6e:	9b00      	ldr	r3, [sp, #0]
 8013f70:	6163      	str	r3, [r4, #20]
 8013f72:	9b01      	ldr	r3, [sp, #4]
 8013f74:	6120      	str	r0, [r4, #16]
 8013f76:	b15b      	cbz	r3, 8013f90 <__smakebuf_r+0x74>
 8013f78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f7c:	4630      	mov	r0, r6
 8013f7e:	f000 f875 	bl	801406c <_isatty_r>
 8013f82:	b128      	cbz	r0, 8013f90 <__smakebuf_r+0x74>
 8013f84:	89a3      	ldrh	r3, [r4, #12]
 8013f86:	f023 0303 	bic.w	r3, r3, #3
 8013f8a:	f043 0301 	orr.w	r3, r3, #1
 8013f8e:	81a3      	strh	r3, [r4, #12]
 8013f90:	89a0      	ldrh	r0, [r4, #12]
 8013f92:	4305      	orrs	r5, r0
 8013f94:	81a5      	strh	r5, [r4, #12]
 8013f96:	e7cd      	b.n	8013f34 <__smakebuf_r+0x18>
 8013f98:	08012eb5 	.word	0x08012eb5

08013f9c <_read_r>:
 8013f9c:	b538      	push	{r3, r4, r5, lr}
 8013f9e:	4d07      	ldr	r5, [pc, #28]	; (8013fbc <_read_r+0x20>)
 8013fa0:	4604      	mov	r4, r0
 8013fa2:	4608      	mov	r0, r1
 8013fa4:	4611      	mov	r1, r2
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	602a      	str	r2, [r5, #0]
 8013faa:	461a      	mov	r2, r3
 8013fac:	f000 f89e 	bl	80140ec <_read>
 8013fb0:	1c43      	adds	r3, r0, #1
 8013fb2:	d102      	bne.n	8013fba <_read_r+0x1e>
 8013fb4:	682b      	ldr	r3, [r5, #0]
 8013fb6:	b103      	cbz	r3, 8013fba <_read_r+0x1e>
 8013fb8:	6023      	str	r3, [r4, #0]
 8013fba:	bd38      	pop	{r3, r4, r5, pc}
 8013fbc:	200029ac 	.word	0x200029ac

08013fc0 <_raise_r>:
 8013fc0:	291f      	cmp	r1, #31
 8013fc2:	b538      	push	{r3, r4, r5, lr}
 8013fc4:	4604      	mov	r4, r0
 8013fc6:	460d      	mov	r5, r1
 8013fc8:	d904      	bls.n	8013fd4 <_raise_r+0x14>
 8013fca:	2316      	movs	r3, #22
 8013fcc:	6003      	str	r3, [r0, #0]
 8013fce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013fd2:	bd38      	pop	{r3, r4, r5, pc}
 8013fd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013fd6:	b112      	cbz	r2, 8013fde <_raise_r+0x1e>
 8013fd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013fdc:	b94b      	cbnz	r3, 8013ff2 <_raise_r+0x32>
 8013fde:	4620      	mov	r0, r4
 8013fe0:	f000 f830 	bl	8014044 <_getpid_r>
 8013fe4:	462a      	mov	r2, r5
 8013fe6:	4601      	mov	r1, r0
 8013fe8:	4620      	mov	r0, r4
 8013fea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013fee:	f000 b817 	b.w	8014020 <_kill_r>
 8013ff2:	2b01      	cmp	r3, #1
 8013ff4:	d00a      	beq.n	801400c <_raise_r+0x4c>
 8013ff6:	1c59      	adds	r1, r3, #1
 8013ff8:	d103      	bne.n	8014002 <_raise_r+0x42>
 8013ffa:	2316      	movs	r3, #22
 8013ffc:	6003      	str	r3, [r0, #0]
 8013ffe:	2001      	movs	r0, #1
 8014000:	e7e7      	b.n	8013fd2 <_raise_r+0x12>
 8014002:	2400      	movs	r4, #0
 8014004:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014008:	4628      	mov	r0, r5
 801400a:	4798      	blx	r3
 801400c:	2000      	movs	r0, #0
 801400e:	e7e0      	b.n	8013fd2 <_raise_r+0x12>

08014010 <raise>:
 8014010:	4b02      	ldr	r3, [pc, #8]	; (801401c <raise+0xc>)
 8014012:	4601      	mov	r1, r0
 8014014:	6818      	ldr	r0, [r3, #0]
 8014016:	f7ff bfd3 	b.w	8013fc0 <_raise_r>
 801401a:	bf00      	nop
 801401c:	2000018c 	.word	0x2000018c

08014020 <_kill_r>:
 8014020:	b538      	push	{r3, r4, r5, lr}
 8014022:	4d07      	ldr	r5, [pc, #28]	; (8014040 <_kill_r+0x20>)
 8014024:	2300      	movs	r3, #0
 8014026:	4604      	mov	r4, r0
 8014028:	4608      	mov	r0, r1
 801402a:	4611      	mov	r1, r2
 801402c:	602b      	str	r3, [r5, #0]
 801402e:	f000 f84d 	bl	80140cc <_kill>
 8014032:	1c43      	adds	r3, r0, #1
 8014034:	d102      	bne.n	801403c <_kill_r+0x1c>
 8014036:	682b      	ldr	r3, [r5, #0]
 8014038:	b103      	cbz	r3, 801403c <_kill_r+0x1c>
 801403a:	6023      	str	r3, [r4, #0]
 801403c:	bd38      	pop	{r3, r4, r5, pc}
 801403e:	bf00      	nop
 8014040:	200029ac 	.word	0x200029ac

08014044 <_getpid_r>:
 8014044:	f000 b832 	b.w	80140ac <_getpid>

08014048 <_fstat_r>:
 8014048:	b538      	push	{r3, r4, r5, lr}
 801404a:	4d07      	ldr	r5, [pc, #28]	; (8014068 <_fstat_r+0x20>)
 801404c:	2300      	movs	r3, #0
 801404e:	4604      	mov	r4, r0
 8014050:	4608      	mov	r0, r1
 8014052:	4611      	mov	r1, r2
 8014054:	602b      	str	r3, [r5, #0]
 8014056:	f000 f821 	bl	801409c <_fstat>
 801405a:	1c43      	adds	r3, r0, #1
 801405c:	d102      	bne.n	8014064 <_fstat_r+0x1c>
 801405e:	682b      	ldr	r3, [r5, #0]
 8014060:	b103      	cbz	r3, 8014064 <_fstat_r+0x1c>
 8014062:	6023      	str	r3, [r4, #0]
 8014064:	bd38      	pop	{r3, r4, r5, pc}
 8014066:	bf00      	nop
 8014068:	200029ac 	.word	0x200029ac

0801406c <_isatty_r>:
 801406c:	b538      	push	{r3, r4, r5, lr}
 801406e:	4d06      	ldr	r5, [pc, #24]	; (8014088 <_isatty_r+0x1c>)
 8014070:	2300      	movs	r3, #0
 8014072:	4604      	mov	r4, r0
 8014074:	4608      	mov	r0, r1
 8014076:	602b      	str	r3, [r5, #0]
 8014078:	f000 f820 	bl	80140bc <_isatty>
 801407c:	1c43      	adds	r3, r0, #1
 801407e:	d102      	bne.n	8014086 <_isatty_r+0x1a>
 8014080:	682b      	ldr	r3, [r5, #0]
 8014082:	b103      	cbz	r3, 8014086 <_isatty_r+0x1a>
 8014084:	6023      	str	r3, [r4, #0]
 8014086:	bd38      	pop	{r3, r4, r5, pc}
 8014088:	200029ac 	.word	0x200029ac

0801408c <_close>:
 801408c:	4b02      	ldr	r3, [pc, #8]	; (8014098 <_close+0xc>)
 801408e:	2258      	movs	r2, #88	; 0x58
 8014090:	601a      	str	r2, [r3, #0]
 8014092:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014096:	4770      	bx	lr
 8014098:	200029ac 	.word	0x200029ac

0801409c <_fstat>:
 801409c:	4b02      	ldr	r3, [pc, #8]	; (80140a8 <_fstat+0xc>)
 801409e:	2258      	movs	r2, #88	; 0x58
 80140a0:	601a      	str	r2, [r3, #0]
 80140a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80140a6:	4770      	bx	lr
 80140a8:	200029ac 	.word	0x200029ac

080140ac <_getpid>:
 80140ac:	4b02      	ldr	r3, [pc, #8]	; (80140b8 <_getpid+0xc>)
 80140ae:	2258      	movs	r2, #88	; 0x58
 80140b0:	601a      	str	r2, [r3, #0]
 80140b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80140b6:	4770      	bx	lr
 80140b8:	200029ac 	.word	0x200029ac

080140bc <_isatty>:
 80140bc:	4b02      	ldr	r3, [pc, #8]	; (80140c8 <_isatty+0xc>)
 80140be:	2258      	movs	r2, #88	; 0x58
 80140c0:	601a      	str	r2, [r3, #0]
 80140c2:	2000      	movs	r0, #0
 80140c4:	4770      	bx	lr
 80140c6:	bf00      	nop
 80140c8:	200029ac 	.word	0x200029ac

080140cc <_kill>:
 80140cc:	4b02      	ldr	r3, [pc, #8]	; (80140d8 <_kill+0xc>)
 80140ce:	2258      	movs	r2, #88	; 0x58
 80140d0:	601a      	str	r2, [r3, #0]
 80140d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80140d6:	4770      	bx	lr
 80140d8:	200029ac 	.word	0x200029ac

080140dc <_lseek>:
 80140dc:	4b02      	ldr	r3, [pc, #8]	; (80140e8 <_lseek+0xc>)
 80140de:	2258      	movs	r2, #88	; 0x58
 80140e0:	601a      	str	r2, [r3, #0]
 80140e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80140e6:	4770      	bx	lr
 80140e8:	200029ac 	.word	0x200029ac

080140ec <_read>:
 80140ec:	4b02      	ldr	r3, [pc, #8]	; (80140f8 <_read+0xc>)
 80140ee:	2258      	movs	r2, #88	; 0x58
 80140f0:	601a      	str	r2, [r3, #0]
 80140f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80140f6:	4770      	bx	lr
 80140f8:	200029ac 	.word	0x200029ac

080140fc <_sbrk>:
 80140fc:	4a04      	ldr	r2, [pc, #16]	; (8014110 <_sbrk+0x14>)
 80140fe:	6811      	ldr	r1, [r2, #0]
 8014100:	4603      	mov	r3, r0
 8014102:	b909      	cbnz	r1, 8014108 <_sbrk+0xc>
 8014104:	4903      	ldr	r1, [pc, #12]	; (8014114 <_sbrk+0x18>)
 8014106:	6011      	str	r1, [r2, #0]
 8014108:	6810      	ldr	r0, [r2, #0]
 801410a:	4403      	add	r3, r0
 801410c:	6013      	str	r3, [r2, #0]
 801410e:	4770      	bx	lr
 8014110:	200029b0 	.word	0x200029b0
 8014114:	200029b8 	.word	0x200029b8

08014118 <_write>:
 8014118:	4b02      	ldr	r3, [pc, #8]	; (8014124 <_write+0xc>)
 801411a:	2258      	movs	r2, #88	; 0x58
 801411c:	601a      	str	r2, [r3, #0]
 801411e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014122:	4770      	bx	lr
 8014124:	200029ac 	.word	0x200029ac

08014128 <_exit>:
 8014128:	e7fe      	b.n	8014128 <_exit>
	...

0801412c <_init>:
 801412c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801412e:	bf00      	nop
 8014130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014132:	bc08      	pop	{r3}
 8014134:	469e      	mov	lr, r3
 8014136:	4770      	bx	lr

08014138 <_fini>:
 8014138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801413a:	bf00      	nop
 801413c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801413e:	bc08      	pop	{r3}
 8014140:	469e      	mov	lr, r3
 8014142:	4770      	bx	lr
